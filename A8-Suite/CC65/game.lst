ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2000
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               .if rflag
000057r 2               sprshft:     .res 1
000057r 2               .endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               .org asm_code-6
001FFA  1  FF FF        	.word $ffff
001FFC  1  00 20        	.word start_asm
001FFE  1  F5 3E        	.word eind_asm
002000  1               
002000  1               start_asm:
002000  1               	.include "game.inc"
002000  2               .include "testjoy.inc"
002000  3               ;--------------------------------------------------------------
002000  3               ; Arcade Game Designer.
002000  3               ; (C) 2008 Jonathan Cauldwell.
002000  3               ; ZX Spectrum Next Engine v0.7.
002000  3               ; Acorn Atom port by K.v.Oss 2018
002000  3               ;--------------------------------------------------------------
002000  3               
002000  3               ; Conditional compilation flags
002000  3               ; Code is installed if flag is set
002000  3               ; Flags are set in commandline assembly or by the compiler
002000  3               
002000  3               ; Flags set by AGD compiler
002000  3               ;	mflag  			; MENU + INV
002000  3               ;	pflag 			; particle engine
002000  3               ;	sflag 			; scrollytext
002000  3               ;	dflag 			; digging mode
002000  3               ;	cflag			; collectable blocks
002000  3               ;	oflag			; objects
002000  3               ;	lflag			; ladders
002000  3               ;
002000  3               ; Flags set manually
002000  3               ;	aflag			; adventure mode
002000  3               ;	bflag			; big sprites (16x24)
002000  3               ;	iflag			; invert mode
002000  3               
002000  3               .if mflag
002000  3               	.out "- MEN/INV enabled"
002000  3               .endif
002000  3               .if pflag
002000  3               	.out "- Particles enabled"
002000  3               .endif
002000  3               .if sflag
002000  3               	.out "- Scrolling enabled"
002000  3               .endif
002000  3               .if dflag
002000  3               	.out "- Digging enabled"
002000  3               .endif
002000  3               .if cflag
002000  3               	.out "- Collectable blocks enabled"
002000  3               .endif
002000  3               .if oflag
002000  3               	.out "- Objects enabled"
002000  3               .endif
002000  3               .if lflag
002000  3               	.out "- Ladders enabled"
002000  3               .endif
002000  3               .if aflag
002000  3               	.out "- Adventure mode enabled"
002000  3               .endif
002000  3               .if bflag
002000  3               	.out "- Big Sprites (16x24) enabled"
002000  3               .endif
002000  3               .if iflag
002000  3               	.out "- Invert mode enabled"
002000  3               .endif
002000  3               .if rflag
002000  3               	.out "- RAM saving mode enabled"
002000  3               .endif
002000  3               
002000  3               ; Global definitions ------------------------------------------------------------
002000  3               
002000  3               	FONT = font		; Font address
002000  3               
002000  3               	green	= $00		; Colour definition filters
002000  3               	yellow	= $55
002000  3               	blue	= $aa
002000  3               	red	= $ff
002000  3               
002000  3               ; Block characteristics.
002000  3               
002000  3               	PLATFM	= 1		; platform.
002000  3               	WALL	= PLATFM + 1	; solid wall.
002000  3               	LADDER	= WALL + 1	; ladder.
002000  3               	FODDER	= LADDER + 1	; fodder block.
002000  3               	DEADLY	= FODDER + 1	; deadly block.
002000  3               	CUSTOM	= DEADLY + 1	; custom block.
002000  3               	WATER	= CUSTOM + 1	; water block.
002000  3                       COLECT	= WATER + 1	; collectable block.
002000  3                       NUMTYP	= COLECT + 1	; number of types.
002000  3               
002000  3               ; Sprites.
002000  3               
002000  3               .if bflag
002000  3               	SPR_HGT	= 24		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 8		; number of sprites.
002000  3               .else				; 16x16 sprites
002000  3               	SPR_HGT = 16		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 12		; number of sprites.
002000  3               .endif
002000  3               
002000  3               	TABSIZ = 17		; size of each entry.
002000  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002000  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002000  3               	var_X  = 8		; new x coordinate of sprite.
002000  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002000  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002000  3               
002000  3               ; Particle engine.
002000  3               
002000  3               	NUMSHR = 55		; pieces of shrapnel.
002000  3               	SHRSIZ = 6		; bytes per particle.
002000  3               
002000  3               ; System constants
002000  3               
002000  3               	ScrSelAddr  = $b000	; Screen selection address
002000  3               	KeyRowAddr  = $b000	; PIA key matrix row
002000  3               	KeyColAddr  = $b001	; PIA key matrix column
002000  3               	SpeakerBit  = $b002	; Speaker bit
002000  3               	CmdReg      = $b400	; Command register AtoMMC
002000  3               	DatReg      = $b401	; Data register AtoMMC
002000  3               	Timer2_Low  = $b808	; Timer 2 low byte
002000  3               	Timer2_High = $b809	; Timer 2 high byte
002000  3               	ScreenAddr  = $e400	; Startaddress video RAM
002000  3               
002000  3               	MAP 	    = $dd00		; properties map buffer (3x256 bytes)
002000  3               	SCADTB_lb   = MAP+3*256		; screen address table lo-byte (256 bytes)
002000  3               	SCADTB_hb   = SCADTB_lb+256	; screen address table hi-byte (256 bytes)
002000  3               	SHRAPN      = SCADTB_hb+256	; shrapnel table (55x6 bytes)
002000  3               
002000  3               ; System calls
002000  3               
002000  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
002000  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
002000  3               	OSRDCH   = $fe94	; get key subroutine
002000  3                       READKEY  = $fe71	; scan key matrix subroutine
002000  3               	OSWRCH	 = $fff4	; write character
002000  3               
002000  3               
002000  3               .if iflag
002000  3               	TxtInvert   = $ff	; Invert byte for character printing
002000  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002000  3               .else
002000  3               	TxtInvert   = $00	; Invert byte for character printing
002000  3               	ScrFillByte = $00	; Screen fill byte for CLS
002000  3               .endif
002000  3               
002000  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002000  3               
002000  3               ;===============================================================
002000  3               ; Game starts here
002000  3               ;===============================================================
002000  3               
002000  3               ;.segment "CODE"
002000  3               
002000  3  20 29 3C     	jsr init
002003  3               
002003  3               ; Clear variables
002003  3               
002003  3  A9 00        	lda #0
002005  3  A2 00        	ldx #0
002007  3               clrloop:
002007  3  95 00        	sta 0,x
002009  3  E8           	inx
00200A  3  D0 FB        	bne clrloop
00200C  3               
00200C  3               gameloop:
00200C  3  20 25 21     	jsr game	 	; start the game.
00200F  3  4C 0C 20     	jmp gameloop		; Start again
002012  3               
002012  3               ; Definition of variables
002012  3               ; Make sure pointers are arranged in the same order as the data itself.
002012  3               
002012  3  7B 37        msgptr:		.word msgdat	; messages
002014  3  59 38        blkptr:		.word chgfx	; block graphics.
002016  3  61 38        proptr:		.word bprop	; address of char properties.
002018  3  62 38        sptptr:		.word sprgfx	; sprite graphics
00201A  3  E2 38        frmptr:		.word frmlst	; sprite frames.
00201C  3  E6 38        scrptr:		.word scdat	; address of screens.
00201E  3  F2 38        nmeptr:		.word nmedat	; enemy start positions.
002020  3  F7 38        objptr:		.word objdta	; object graphics
002022  3               
002022  3               ;TxtFilter:	.byte $ff
002022  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
002026  3               
002026  3               ; Don't change the order of these four.
002026  3               ; Menu routine relies on winlft following wintop.
002026  3               
002026  3  01           wintop:		.byte WINDOWTOP	; top of window.
002027  3  01           winlft:		.byte WINDOWLFT	; left edge.
002028  3  16           winhgt:		.byte WINDOWHGT	; window height.
002029  3  1E           winwid:		.byte WINDOWWID	; window width.
00202A  3  01           numob:		.byte NUMOBJ	; number of objects in game.
00202B  3               
00202B  3               ; Variables start here.
00202B  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00202B  3               
00202B  3  08           wntopx:		.byte (8 * WINDOWTOP)
00202C  3  08           wnlftx:		.byte (8 * WINDOWLFT)
00202D  3  A8           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00202E  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00202F  3               
00202F  3               ; Assorted game routines which can go in contended memory.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for inventory called by the INV command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with objects seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected objectnr of INV menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               .if mflag
00202F  3               minve:
00202F  3               	lda #<(invdis)		; routine address.
00202F  3               	sta mod0+1		; set up menu routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(invdis)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               	lda #<(fopt)		; find option from available objects.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fopt)
00202F  3               	sta mod1+1+1
00202F  3               	jmp dbox		; do menu routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for menu called by the MENU command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with menu items seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected line nr of MENU menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               mmenu:
00202F  3               	lda #<(always)		; routine address.
00202F  3               	sta mod0+1		; set up routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(always)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               
00202F  3               	lda #<(fstd)		; standard option selection.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fstd)
00202F  3               	sta mod1+2
00202F  3               
00202F  3               ; Drop through into box routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Work out size of box for message or menu.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               dbox:
00202F  3               	lda #<(msgdat)		; pointer to messages.
00202F  3               	sta z80_l
00202F  3               	lda #>(msgdat)
00202F  3               	sta z80_h
00202F  3               
00202F  3               	jsr getwrd		; get message number.
00202F  3               
00202F  3               	lda z80_h		; store pointer to message.
00202F  3               	sta TmpAddr
00202F  3               	lda z80_l
00202F  3               	sta TmpAddr+1
00202F  3               
00202F  3               	lda #1			; height.
00202F  3               	sta z80_d
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               	sta z80_e		; maximum width.
00202F  3               dbox5:
00202F  3               	lda #0			; this line"s width.
00202F  3               	sta z80_b
00202F  3               mod2:
00202F  3               	jsr always		; item in player"s possession?
00202F  3               	cmp #255
00202F  3               	bne dbox6		; not in inventory, skip this line.
00202F  3               	inc z80_d		; add to tally.
00202F  3               dbox6:
00202F  3               	ldy #0			; get character.
00202F  3               	lda (z80_hl),y
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a		; reached end of line?
00202F  3               	cmp #','
00202F  3               	beq dbox3		; yes.
00202F  3               	cmp #13
00202F  3               	beq dbox3		; yes.
00202F  3               	inc z80_b		; add to this line"s width.
00202F  3               	lda z80_a
00202F  3               	bmi dbox4		; end of message? yes, end count.
00202F  3               	jmp dbox6		; repeat until we find the end.
00202F  3               dbox3:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox5		; no, carry on looking.
00202F  3               	lda z80_b		; make this the widest so far.
00202F  3               	sta z80_e
00202F  3               	jmp dbox5		; keep looking.
00202F  3               dbox4:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox8		; no, carry on looking.
00202F  3               	lda z80_b		; final line is the longest so far.
00202F  3               	sta z80_e
00202F  3               dbox8:
00202F  3               	dec z80_d		; decrement items found.
00202F  3               	bne :+			; total was zero.
00202F  3               	lda #255
00202F  3               	sta varopt
00202F  3               	jmp dbox15
00202F  3               :
00202F  3               	lda z80_e		; longest line.
00202F  3               	bne :+			; was it zero?
00202F  3               	jmp dbox15		; total was zero.
00202F  3               :
00202F  3               	sta bwid		; set up size.
00202F  3               	lda z80_d
00202F  3               	sta blen
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; That's set up our box size.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               	lda winhgt		; window height in characters.
00202F  3               	sec
00202F  3               	sbc z80_d		; subtract height of box.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc wintop		; add top edge of window.
00202F  3               	sta btop		; set up box top.
00202F  3               
00202F  3               	lda winwid		; window width in characters.
00202F  3               	sec
00202F  3               	sbc z80_e		; subtract box width.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc winlft		; add left edge of window.
00202F  3               	sta blft		; box left.
00202F  3               
00202F  3               	lda #<(FONT-256)		; font.
00202F  3               	sta grbase		; set up for text display.
00202F  3               	lda #>(FONT-256)
00202F  3               	sta grbase+1
00202F  3               
00202F  3               	lda TmpAddr+1		; restore message pointer.
00202F  3               	sta z80_l
00202F  3               	lda TmpAddr
00202F  3               	sta z80_h
00202F  3               
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set display coordinate.
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               dbox2:
00202F  3               	lda combyt		; get object number.
00202F  3               	sta z80_a
00202F  3               mod0:
00202F  3               	jsr always		; check inventory for display.
00202F  3               	cmp #255
00202F  3               	beq :+
00202F  3               	jmp dbox13		; not in inventory, skip this line.
00202F  3               :
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set left display position.
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_b		; store width.
00202F  3               dbox0:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	cmp #','		; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               	cmp #13			; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               
00202F  3               	cmp #141			; end of line?
00202F  3               	bne :+
00202F  3               	dec bwid
00202F  3               	jmp dbox7		; yes, next one.
00202F  3               :
00202F  3               	dec z80_b		; one less to display.
00202F  3               	and #127		; remove terminator.
00202F  3               
00202F  3               	jsr pchr		; display on screen.
00202F  3               
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a
00202F  3               	cmp #128		; end of message?
00202F  3               	bmi :+
00202F  3               	jmp dbox7		; yes, job done.
00202F  3               :
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	beq :+			; are any left?
00202F  3               	jmp dbox0		; yes, continue.
00202F  3               :
00202F  3               ;---------------------------------------------------
00202F  3               ; Reached limit of characters per line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dbox9:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #13			; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #128		; end of message?
00202F  3               	bcs :+
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox9
00202F  3               
00202F  3               ;---------------------------------------------------
00202F  3               ; Fill box to end of line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dboxf:
00202F  3               	lda #32			; space character.
00202F  3               	jsr pchr		; display character.
00202F  3               	dec z80_b
00202F  3               	beq :+
00202F  3               	jmp dboxf		; repeat for remaining chars on line.
00202F  3               :
00202F  3               	rts
00202F  3               dbox1:
00202F  3               	inc z80_l		; skip character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	jsr dboxf		; fill box out to right side.
00202F  3               dbox10:
00202F  3               	inc dispy		; y coordinate down a line next position.
00202F  3               	jmp dbox2		; next line.
00202F  3               dbox7:
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	bne :+			; are any left?
00202F  3               	jmp dbox11		; no, nothing to draw.
00202F  3               :
00202F  3               	jsr dboxf		; fill message to line.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Drawn the box menu, now select option.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox11:
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set bar position.
00202F  3               dbox14:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	bne dbox14		; yes, debounce it.
00202F  3               	jsr dbar		; draw bar.
00202F  3               dbox12:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	beq dbox12		; no, nothing.
00202F  3               	and #16			; fire button pressed?
00202F  3               	bne :+
00202F  3               mod1:
00202F  3               	jmp fstd		; yes, job done.
00202F  3               :
00202F  3               	jsr dbar		; delete bar.
00202F  3               
00202F  3               	lda joyval		; joystick reading.
00202F  3               	and #8			; going up?
00202F  3               	beq dboxu		; yes, go up.
00202F  3               
00202F  3               	ldx dispy		; vertical position of bar.
00202F  3               	inx			; look down.
00202F  3               	txa
00202F  3               	sec
00202F  3               	sbc btop		; find distance from top.
00202F  3               	cmp blen		; top of box.
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	inc dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               dboxu:
00202F  3               	lda dispy		; vertical position of bar.
00202F  3               	cmp btop		; are we at the top?
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	dec dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               fstd:
00202F  3               	lda dispy		; bar position.
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta varopt		; store the option.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Option not available.  Skip this line.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox13:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               	cmp #13			; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               
00202F  3               	bpl :+			; end of message?
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox13
00202F  3               dbox15:
00202F  3               	lda TmpAddr		; pop message pointer from the stack.
00202F  3               	sta z80_h
00202F  3               	lda TmpAddr+1
00202F  3               	sta z80_l
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Invert bar
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbar:
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set display coordinate.
00202F  3               	jsr gprad		; get printing address.
00202F  3               
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_c		; loop counter in c.
00202F  3               	lda z80_h
00202F  3               	sta z80_d		; store screen address high byte.
00202F  3               dbar1:
00202F  3               	ldx #7			; pixel height in b.
00202F  3               dbar0:
00202F  3               	ldy scrtab,x
00202F  3               	lda (scraddr),y		; get screen byte.
00202F  3               	eor #255		; reverse all bits.
00202F  3               	sta (scraddr),y		; write back to screen.
00202F  3               	dex			; next line down.
00202F  3               	bpl dbar0		; draw rest of character.
00202F  3               
00202F  3               	inc scraddr		; one char right.
00202F  3               	dec z80_c		; decrement character counter.
00202F  3               	bne dbar1		; repeat for whole line.
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Point to object
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  combyt
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  A = object number, A=255 if already in possession
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               invdis:
00202F  3               	lda z80_l		; store message text pointer.
00202F  3               	pha
00202F  3               	lda z80_h
00202F  3               	pha
00202F  3               	lda combyt		; object number.
00202F  3               	inc combyt		; ready for next one.
00202F  3               	jsr gotob		; check if we have object.
00202F  3               	tay
00202F  3               	pla
00202F  3               	sta z80_h
00202F  3               	pla
00202F  3               	sta z80_l
00202F  3               	tya
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Find option selected.
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  -
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected object
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               fopt:
00202F  3               	lda dispy
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta tmp+2		; option selected in b register.
00202F  3               	inc tmp+2
00202F  3               
00202F  3               	lda #0			; set to first item.
00202F  3               	sta combyt		; object number.
00202F  3               fopt0:
00202F  3               	jsr fobj		; find next object in inventory.
00202F  3               	dec tmp+2
00202F  3               	bne fopt0		; repeat for relevant steps down the list.
00202F  3               
00202F  3               	lda combyt		; get option.
00202F  3               	sta varopt		; store the option.
00202F  3               	dec varopt		; one less, due to where we increment combyt.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               fobj:
00202F  3               	ldy combyt		; object number.
00202F  3               	inc combyt		; ready for next item.
00202F  3               	tya
00202F  3               	jsr gotob		; do we have this item?
00202F  3               	cmp #255
00202F  3               	bne :+
00202F  3               	rts
00202F  3               :
00202F  3               	jmp fobj		; yes, it's on the list.
00202F  3               
00202F  3               ;bwid:	.byte 0              ; box/menu width.
00202F  3               ;blen:	.byte 0              ; box/menu height.
00202F  3               ;btop:	.byte 0              ; box coordinates.
00202F  3               ;blft:	.byte 0
00202F  3               .endif
00202F  3               
00202F  3               ;----------------------------------------------------
00202F  3               ; Delay routine 1/50 sec
00202F  3               ;
00202F  3               ; Wait 1/60 sec = 16666 usec
00202F  3               ; Wait 208 x 16 =  3328 usec
00202F  3               ;                 19994 usec
00202F  3               ; rts           =     6 usec
00202F  3               ; Total         = 20000 usec
00202F  3               ;----------------------------------------------------
00202F  3               
00202F  3               delay:
00202F  3  60             rts
002030  3  85 rr        	sta xtmp
002032  3               del_loop:
002032  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
002035  3               
002035  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
002037  3               delay1:
002037  3  61 80        	adc ($80,x)		;	 6 usec
002039  3  61 80        	adc ($80,x)		;	 6 usec
00203B  3  88           	dey			;	 2 usec
00203C  3  D0 F9        	bne delay1		;	 2 usec
00203E  3  EA           	nop			; 2 usec
00203F  3  EA           	nop			; 2 usec
002040  3               				; tot: 20000 usec
002040  3  C6 rr        	dec xtmp
002042  3  D0 EE        	bne del_loop
002044  3  60           	rts
002045  3               
002045  3               ;----------------------------------------------------
002045  3               ; Clear sprite table.
002045  3               ;
002045  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002045  3               ;----------------------------------------------------
002045  3               
002045  3               xspr:
002045  3  A9 FF        	lda #255		; clear byte.
002047  3  A2 00        	ldx #0			; length of table.
002049  3               xspr0:
002049  3  9D 3B 34     	sta sprtab,x		; sprite table.
00204C  3  E8           	inx			; move to next byte.
00204D  3  E0 CC        	cpx #SPRBUF
00204F  3  D0 F8        	bne xspr0		; repeat for rest of table.
002051  3  60           	rts
002052  3               
002052  3               ;-------------------------------------------------------------
002052  3               ; Initialise all objects.
002052  3               ;
002052  3               ; Reset current room,y,x to start room,y,x for all objects
002052  3               ;-------------------------------------------------------------
002052  3               
002052  3               .if oflag
002052  3               iniob:
002052  3  A9 F7        	lda #<objdta 		; objects table.
002054  3  85 68        	sta z80_x
002056  3  A9 38        	lda #>objdta
002058  3  85 69        	sta z80_i
00205A  3               
00205A  3  AE 2A 20     	ldx numob 		; number of objects in the game.
00205D  3               iniob0:
00205D  3  A0 23        	ldy #35
00205F  3  B1 68        	lda (z80_ix),y 		; start screen.
002061  3  A0 20        	ldy #32
002063  3  91 68        	sta (z80_ix),y 		; set start screen.
002065  3               
002065  3  A0 24        	ldy #36
002067  3  B1 68        	lda (z80_ix),y 		; find start y.
002069  3  A0 21        	ldy #33
00206B  3  91 68        	sta (z80_ix),y 		; set start y.
00206D  3               
00206D  3  A0 25        	ldy #37
00206F  3  B1 68        	lda (z80_ix),y 		; get initial x.
002071  3  A0 22        	ldy #34
002073  3  91 68        	sta (z80_ix),y 		; set x coord.
002075  3               
002075  3  18           	clc 			; point to next object.
002076  3  A5 68        	lda z80_x
002078  3  69 26        	adc #38			; distance between objects.
00207A  3  85 68        	sta z80_x
00207C  3  90 02        	bcc :+
00207E  3  E6 69        	inc z80_i
002080  3               :
002080  3  CA           	dex 			; repeat.
002081  3  D0 DA        	bne iniob0
002083  3               
002083  3  60           	rts
002084  3               .endif
002084  3               
002084  3               ;-------------------------------------------------------------
002084  3               ; Screen synchronisation.
002084  3               ;
002084  3               ;  - read joystick/keyboard
002084  3               ;  - handle sound
002084  3               ;  - sync framerate with clock
002084  3               ;  - handle shrapnel every even frame
002084  3               ;-------------------------------------------------------------
002084  3               
002084  3               vsync:
002084  3  48           	pha
002085  3  98           	tya
002086  3  48           	pha
002087  3  8A           	txa
002088  3  48           	pha
002089  3  20 78 2B     	jsr joykey		; read joystick/keyboard.
00208C  3  4C C1 20       jmp sndskip
00208F  3               
00208F  3               vsync1:
00208F  3  AD 09 B8     	lda Timer2_High		; sync framerate with clock
002092  3  C9 FF        	cmp #$ff
002094  3  D0 F9        	bne vsync1
002096  3  A9 C3        	lda #>50000
002098  3  8D 09 B8     	sta Timer2_High
00209B  3  A9 50        	lda #<50000
00209D  3  8D 08 B8     	sta Timer2_Low
0020A0  3               
0020A0  3  A5 rr        	lda clock
0020A2  3  29 01        	and #1
0020A4  3  D0 03        	bne:+
0020A6  3  20 24 21     	jsr proshr		; handle shrapnel every even frame
0020A9  3               :
0020A9  3  AD C7 20     	lda sndtyp
0020AC  3  F0 13        	beq sndskip
0020AE  3               sndloop:
0020AE  3  AD 02 B0     	lda SpeakerBit		; handle sound
0020B1  3  AC C7 20     	ldy sndtyp
0020B4  3               sndwait:
0020B4  3  88           	dey
0020B5  3  D0 FD        	bne sndwait
0020B7  3  49 04        	eor #4
0020B9  3  8D 02 B0     	sta SpeakerBit
0020BC  3  CE C7 20     	dec sndtyp
0020BF  3  D0 ED        	bne sndloop
0020C1  3               sndskip:
0020C1  3  68           	pla
0020C2  3  AA           	tax
0020C3  3  68           	pla
0020C4  3  A8           	tay
0020C5  3  68           	pla
0020C6  3  60           	rts
0020C7  3               
0020C7  3  00           sndtyp:	.byte 0
0020C8  3               
0020C8  3               ;-----------------------------------------------
0020C8  3               ; Redraw the screen.
0020C8  3               ;
0020C8  3               ; Remove old copy of all sprites for redraw.
0020C8  3               ;-----------------------------------------------
0020C8  3               
0020C8  3               redraw:
0020C8  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
0020CA  3  48           	pha
0020CB  3  A5 68        	lda z80_x
0020CD  3  48           	pha
0020CE  3               
0020CE  3  20 FC 27     	jsr droom		; show screen layout.
0020D1  3               .if oflag
0020D1  3  20 26 23     	jsr shwob		; draw objects.
0020D4  3               .endif
0020D4  3               numsp0:
0020D4  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0020D6  3  85 rr        	sta tmp
0020D8  3               
0020D8  3  A9 3B        	lda #<sprtab		; sprite table.
0020DA  3  85 68        	sta z80_x
0020DC  3  A9 34        	lda #>sprtab
0020DE  3  85 69        	sta z80_i
0020E0  3               redrw0:
0020E0  3  A0 00        	ldy #0
0020E2  3  B1 68        	lda (z80_ix),y		; old sprite type.
0020E4  3  C9 FF        	cmp #255		; is it enabled?
0020E6  3  F0 0B        	beq redrw1 		; no, find next one.
0020E8  3               
0020E8  3  A0 03        	ldy #3
0020EA  3  B1 68        	lda (z80_ix),y 		; sprite y.
0020EC  3  C9 B1        	cmp #177		; beyond maximum?
0020EE  3  B0 03        	bcs redrw1		; yes, nothing to draw.
0020F0  3               
0020F0  3  20 04 2F     	jsr sspria		; show single sprite.
0020F3  3               redrw1:
0020F3  3  18           	clc			; next sprite.
0020F4  3  A5 68        	lda z80_x
0020F6  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
0020F8  3  85 68        	sta z80_x
0020FA  3  90 02        	bcc :+
0020FC  3  E6 69        	inc z80_i
0020FE  3               :
0020FE  3  C6 rr        	dec tmp			; repeat for remaining sprites.
002100  3  D0 DE        	bne redrw0
002102  3               rpblc1:
002102  3               ;	jsr dshrp		; redraw shrapnel.
002102  3               
002102  3               .if aflag
002102  3               	jsr rbloc		; draw blocks for this screen
002102  3               .endif
002102  3  68           	pla			; retrieve sprite pointer.
002103  3  85 68        	sta z80_x
002105  3  68           	pla
002106  3  85 69        	sta z80_i
002108  3               
002108  3  60           	rts
002109  3               
002109  3               ;----------------------------------------------------------------------
002109  3               ; Clear screen routine.
002109  3               ;
002109  3               ; Fill screenmem $e400-$fbff with ScrFillByte
002109  3               ;----------------------------------------------------------------------
002109  3               
002109  3               cls:
002109  3  A9 E4        	lda #>ScreenAddr		; screen address.
00210B  3  8D 14 21     	sta clsloop+2
00210E  3  A9 00        	lda #ScrFillByte
002110  3               .if iflag
002110  3               	eor #$ff
002110  3               .endif
002110  3  A0 00        	ldy #0
002112  3               clsloop:
002112  3  99 00 E4     	sta ScreenAddr,y
002115  3  C8           	iny
002116  3  D0 FA        	bne clsloop
002118  3  EE 14 21     	inc clsloop+2
00211B  3  AE 14 21     	ldx clsloop+2
00211E  3  E0 FC        	cpx #>(ScreenAddr+$1800)
002120  3  D0 F0        	bne clsloop
002122  3  60           	rts
002123  3               
002123  3               ;----------------------------------------------------------------------
002123  3               ; Atomic palette is static
002123  3               ;----------------------------------------------------------------------
002123  3               
002123  3               setpal:
002123  3  60           	rts
002124  3               
002124  3               ;----------------------------------------------------------------------
002124  3               ; FODDER check
002124  3               ;----------------------------------------------------------------------
002124  3               
002124  3               .if pflag .or dflag
002124  3               fdchk:
002124  3               	cmp #FODDER 		; is it fodder?
002124  3               	beq :+
002124  3               	rts 			; no.
002124  3               :
002124  3               	lda #0			; wipe fodder in MAP
002124  3               	ldy #0
002124  3               	sta (bufaddr),y 	; rewrite block type.
002124  3               
002124  3               	lda dispx		; x=x/8
002124  3               	pha
002124  3               	lsr a
002124  3               	lsr a
002124  3               	lsr a
002124  3               	sta dispx
002124  3               
002124  3               	lda dispy		; y=y/8
002124  3               	pha
002124  3               	lsr a
002124  3               	lsr a
002124  3               	lsr a
002124  3               	sta dispy
002124  3               
002124  3               	lda #0 			; block to write.
002124  3               	jsr pattr 		; write block.
002124  3               
002124  3               	pla
002124  3               	sta dispy
002124  3               	pla
002124  3               	sta dispx
002124  3               	rts
002124  3               .endif
002124  3               
002124  3               ;----------------------------------------------------
002124  3               ; Scrolly text and puzzle variables.
002124  3               ;----------------------------------------------------
002124  3               
002124  3               .if sflag
002124  3               txtbit:	.byte 128		; bit to write.
002124  3               txtwid:	.byte 16		; width of ticker message.
002124  3               txtpos:	.word msgdat
002124  3               txtini:	.word msgdat
002124  3               txtscr:	.word ScreenAddr
002124  3               .endif
002124  3               
002124  3               ;----------------------------------------------------
002124  3               ; Specialist routines.
002124  3               ; Process shrapnel.
002124  3               ;----------------------------------------------------
002124  3               proshr:
002124  3               .if pflag
002124  3               	lda #<SHRAPN		; table.
002124  3               	sta z80_x
002124  3               	lda #>SHRAPN
002124  3               	sta z80_i
002124  3               
002124  3               	lda #NUMSHR		; shrapnel pieces to process.
002124  3               	sta shrctr
002124  3               prosh0:
002124  3               	ldy #0
002124  3               	lda (z80_ix),y		; on/off marker.
002124  3               	asl a
002124  3               proshx:
002124  3               	bcs :+
002124  3               	jsr prosh1 		; on, so process it.
002124  3               :
002124  3               	clc
002124  3               	lda z80_x
002124  3               	adc #SHRSIZ
002124  3               	sta z80_x
002124  3               	bcc :+
002124  3               	inc z80_i
002124  3               :
002124  3               	dec shrctr		; round again.
002124  3               	bne prosh0
002124  3               .endif
002124  3               .if sflag
002124  3               	jsr scrly
002124  3               .endif
002124  3  60           	rts
002125  3               
002125  3               .if pflag
002125  3               ;shrctr:	.byte 0
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Proces shrapnel piece
002125  3               ;----------------------------------------------------
002125  3               
002125  3               prosh1:
002125  3               	jsr plot 		; delete the pixel.
002125  3               
002125  3               	lda #<shrptr		; shrapnel routine pointers.
002125  3               	sta z80_l
002125  3               	lda #>shrptr
002125  3               	sta z80_h
002125  3               
002125  3               	ldy #0
002125  3               	lda (z80_ix),y		; restore shrapnel type.
002125  3               	jsr prosh2 		; run the routine.
002125  3               	jsr chkxy		; check x and y are good before we redisplay.
002125  3               
002125  3               	lda #<SHRSIZ 		; distance to next.
002125  3               	sta z80_e
002125  3               	lda #>SHRSIZ
002125  3               	sta z80_d
002125  3               	rts
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Run the routine
002125  3               ;----------------------------------------------------
002125  3               
002125  3               prosh2:
002125  3               	asl a 			; 2 bytes per address.
002125  3               	tay
002125  3               	lda shrptr,y
002125  3               	sta z80_l
002125  3               	lda shrptr+1,y 		; fetch high byte from table.
002125  3               	sta z80_h
002125  3               	jmp (z80_hl) 		; jump to routine.
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Paricle routine table
002125  3               ;----------------------------------------------------
002125  3               
002125  3               shrptr:	.word laser		; laser.
002125  3               	.word trail		; vapour trail.
002125  3               	.word shrap		; shrapnel from explosion.
002125  3               	.word dotl		; horizontal starfield left.
002125  3               	.word dotr		; horizontal starfield right.
002125  3               	.word dotu		; vertical starfield up.
002125  3               	.word dotd		; vertical starfield down.
002125  3               	.word ptcusr		; user particle.
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Explosion shrapnel.
002125  3               ;----------------------------------------------------
002125  3               
002125  3               shrap:
002125  3               	ldy #1
002125  3               	lda (z80_ix),y 		; get the angle.
002125  3               	clc
002125  3               	adc #<shrsin		; shrapnel sine table.
002125  3               	sta z80_l
002125  3               	lda #>shrsin
002125  3               	adc #0
002125  3               	sta z80_h
002125  3               
002125  3               	ldy #0
002125  3               	lda (z80_hl),y 		; fetch value from table.
002125  3               	sta z80_e
002125  3               	inc z80_l 		; next byte of table.
002125  3               	bne :+
002125  3               	inc z80_h
002125  3               :
002125  3               	ldy #0
002125  3               	lda (z80_hl),y		; fetch value from table.
002125  3               	sta z80_d
002125  3               	inc z80_l		; next byte of table.
002125  3               	bne :+
002125  3               	inc z80_h
002125  3               :
002125  3               	ldy #0
002125  3               	lda (z80_hl),y 		; fetch value from table.
002125  3               	sta z80_c
002125  3               	inc z80_l 		; next byte of table.
002125  3               	bne :+
002125  3               	inc z80_h
002125  3               :
002125  3               	ldy #0
002125  3               	lda (z80_hl),y 		; fetch value from table.
002125  3               	sta z80_b
002125  3               
002125  3               	ldy #2
002125  3               	lda (z80_ix),y 		; x coordinate in hl.
002125  3               	clc
002125  3               	adc z80_e		; add sine lb
002125  3               	sta (z80_ix),y		; store new coordinate lb.
002125  3               	ldy #3
002125  3               	lda (z80_ix),y
002125  3               	adc z80_d		; add sine hb
002125  3               	sta (z80_ix),y		; store new coordinate hb.
002125  3               
002125  3               	ldy #4
002125  3               	lda (z80_ix),y	 	; y coordinate in hl.
002125  3               	clc
002125  3               	adc z80_c		; add cosine lb
002125  3               	sta (z80_ix),y		; store new coordinate lb.
002125  3               	ldy #5
002125  3               	lda (z80_ix),y
002125  3               	adc z80_b		; add cosine lb
002125  3               	sta (z80_ix),y		; store new coordinate hb.
002125  3               
002125  3               	rts
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Move dots
002125  3               ;----------------------------------------------------
002125  3               
002125  3               dotl:
002125  3               	ldy #5
002125  3               	lda (z80_ix),y
002125  3               	sec
002125  3               	sbc #1		 	; move left.
002125  3               	sta (z80_ix),y
002125  3               	rts
002125  3               dotr:
002125  3               	ldy #5
002125  3               	lda (z80_ix),y
002125  3               	clc
002125  3               	adc #1		 	; move left.
002125  3               	sta (z80_ix),y
002125  3               	rts
002125  3               dotu:
002125  3               	ldy #3
002125  3               	lda (z80_ix),y
002125  3               	sec
002125  3               	sbc #1		 	; move up.
002125  3               	sta (z80_ix),y
002125  3               	rts
002125  3               dotd:
002125  3               	ldy #3
002125  3               	lda (z80_ix),y
002125  3               	clc
002125  3               	adc #1			; move down.
002125  3               	sta (z80_ix),y
002125  3               	rts
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Check if coordinates are ok before redrawing at new position.
002125  3               ;
002125  3               ; left:   X>L		X=L	Ok
002125  3               ; right:  R+15>X	X=R	Ok
002125  3               ; top:    Y>T		Y=T	Ok
002125  3               ; bottom: B+15>Y	Y=B	Ok
002125  3               ;----------------------------------------------------
002125  3               
002125  3               chkxy:
002125  3               
002125  3               ; top:    Y>T		Y=T	Ok
002125  3               
002125  3               	ldy #3
002125  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002125  3               	cmp wntopx		; window top.
002125  3               	bcs :+			; compare with top window limit.
002125  3               	jmp kilshr		; out of window, kill shrapnel.
002125  3               :
002125  3               ; left:   X>L		X=L	Ok
002125  3               
002125  3               	ldy #5
002125  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002125  3               	cmp wnlftx		; left edge.
002125  3               	bcs :+			; compare with left window limit.
002125  3               	jmp kilshr		; out of window, kill shrapnel.
002125  3               :
002125  3               ; bottom: B+15>Y	Y=B	Ok
002125  3               
002125  3               	lda wnbotx		; point to bottom.
002125  3               	clc
002125  3               	adc #15
002125  3               	ldy #3
002125  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002125  3               	bcs :+			; compare with shrapnel x coordinate.
002125  3               	jmp kilshr		; off screen, kill shrapnel..
002125  3               :
002125  3               ; right:  R+15>X	X=R	Ok
002125  3               
002125  3               	lda wnrgtx		; point to right edge.
002125  3               	clc
002125  3               	adc #15
002125  3               	ldy #5
002125  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002125  3               	bcs :+			; compare with window limit.
002125  3               	jmp kilshr		; off screen, kill shrapnel.
002125  3               :
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Drop through.
002125  3               ; Display shrapnel.
002125  3               ;----------------------------------------------------
002125  3               
002125  3               plot:
002125  3               	ldy #3
002125  3               	lda (z80_ix),y		; y integer.
002125  3               	sta dispy	 	; workspace coordinates.
002125  3               	ldy #5
002125  3               	lda (z80_ix),y	 	; x integer.
002125  3               	sta dispx 		; workspace coordinates.
002125  3               
002125  3               	ldy #0
002125  3               	lda (z80_ix),y 		; type.
002125  3               	bne :+			; is it a laser?
002125  3               	jmp plot1 		; yes, draw laser instead.
002125  3               :
002125  3               plot0:
002125  3               	lda dispx		; which pixel within byte do we
002125  3               	and #7			; want to set first?
002125  3               	tay
002125  3               	lda dots,y 		; table of small pixel positions.
002125  3               	sta z80_e 		; get value.
002125  3               
002125  3               	jsr scadd 		; screen address.
002125  3               	ldy #0
002125  3               	lda (scraddr),y		; see what's already there.
002125  3               	eor z80_e
002125  3               	sta (scraddr),y 	; put back on screen.
002125  3               	rts
002125  3               
002125  3               plot1:
002125  3               	jsr scadd 		; screen address.
002125  3               	ldy #0
002125  3               	lda (scraddr),y 	; fetch byte there.
002125  3               	eor #255 		; toggle all bits.
002125  3               	sta (scraddr),y 	; new byte.
002125  3               	rts
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Switch off shrapnel
002125  3               ;----------------------------------------------------
002125  3               
002125  3               kilshr:
002125  3               	lda #128
002125  3               	ldy #0
002125  3               	sta (z80_ix),y	; switch off shrapnel.
002125  3               	rts
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Sine/cosine table
002125  3               ;----------------------------------------------------
002125  3               
002125  3               shrsin:	.word 0,1024,391,946,724,724,946,391
002125  3               	.word 1024,0,946,65144,724,64811,391,64589
002125  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
002125  3               	.word 64512,0,64589,391,64811,724,65144,946
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Create trail
002125  3               ;----------------------------------------------------
002125  3               
002125  3               trail:
002125  3               	ldy #1
002125  3               	lda (z80_ix),y 	; time remaining.
002125  3               	sec
002125  3               	sbc #1
002125  3               	sta (z80_ix),y
002125  3               	bne :+
002125  3               	jmp trailk		; time to switch it off.
002125  3               :
002125  3               	jsr qrand		; get a random number.
002125  3               	lsr a 			; x or y axis?
002125  3               	bcc :+
002125  3               	jmp trailv		; use y.
002125  3               :
002125  3               ; Trail horizontal
002125  3               
002125  3               	lsr a 			; which direction?
002125  3               	bcc :+
002125  3               	jmp traill		; go left.
002125  3               :
002125  3               ; Trail right
002125  3               
002125  3               	ldy #5
002125  3               	lda (z80_ix),y
002125  3               	clc
002125  3               	adc #1	 		; go right.
002125  3               	sta (z80_ix),y
002125  3               	rts
002125  3               
002125  3               ; Trail left
002125  3               
002125  3               traill:
002125  3               	ldy #5
002125  3               	lda (z80_ix),y
002125  3               	sec
002125  3               	sbc #1 			; go left.
002125  3               	sta (z80_ix),y
002125  3               	rts
002125  3               
002125  3               ; Trail vertical
002125  3               
002125  3               trailv:
002125  3               	lsr a		 	; which direction?
002125  3               	bcc :+
002125  3               	jmp trailu		; go up.
002125  3               :
002125  3               ; Trail down
002125  3               
002125  3               	ldy #3
002125  3               	lda (z80_ix),y
002125  3               	clc
002125  3               	adc #1 			; go down.
002125  3               	sta (z80_ix),y
002125  3               	rts
002125  3               
002125  3               ; Trail up
002125  3               
002125  3               trailu:
002125  3               	ldy #3
002125  3               	lda (z80_ix),y
002125  3               	sec
002125  3               	sbc #1 			; go up.
002125  3               	sta (z80_ix),y
002125  3               	rts
002125  3               
002125  3               ; Kill trail
002125  3               
002125  3               trailk:
002125  3               	lda #200		; set off-screen to kill vapour trail.
002125  3               	ldy #3
002125  3               	sta (z80_ix),y
002125  3               	rts
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Create laser beam
002125  3               ;----------------------------------------------------
002125  3               
002125  3               laser:
002125  3               	ldy #1
002125  3               	lda (z80_ix),y 		; direction.
002125  3               	ror a 			; left or right?
002125  3               	bcs :+
002125  3               	jmp laserl		; move left.
002125  3               :
002125  3               ; Laser right
002125  3               
002125  3               	lda #8			; distance to travel.
002125  3               	sta z80_b
002125  3               	jmp laserm		; move laser.
002125  3               
002125  3               ; Laser left
002125  3               
002125  3               laserl:
002125  3               	lda #248		; distance to travel.
002125  3               	sta z80_b
002125  3               laserm:
002125  3               	ldy #5
002125  3               	lda (z80_ix),y		; x position.
002125  3               	clc
002125  3               	adc z80_b		; add distance.
002125  3               	sta (z80_ix),y		; set new x coordinate.
002125  3               
002125  3               ; Test new block.
002125  3               
002125  3               	sta dispx 		; set x for block collision detection purposes.
002125  3               	ldy #3
002125  3               	lda (z80_ix),y 		; get y.
002125  3               	sta dispy		; set coordinate for collision test.
002125  3               	jsr tstbl 		; get block type there.
002125  3               	cmp #WALL		; is it solid?
002125  3               	bne :+
002125  3               	jmp trailk		; yes, it cannot pass.
002125  3               :
002125  3               .if pflag .or dflag
002125  3                       cmp #FODDER             ; is it fodder?
002125  3                       bne :+
002125  3                       jsr fdchk               ; remove fodder block.
002125  3                       jmp trailk              ; destroy laser.
002125  3               :
002125  3               .endif
002125  3                       rts                     ; no, ignore it.
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Dots mask
002125  3               ;----------------------------------------------------
002125  3               
002125  3               dots:	.byte 128,64,32,16,8,4,2,1
002125  3               
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Plot, preserving de.
002125  3               ;----------------------------------------------------
002125  3               
002125  3               plotde:
002125  3               	lda z80_d 		; put de on stack.
002125  3               	pha
002125  3               	lda z80_e
002125  3               	pha
002125  3               
002125  3               	jsr plot 		; plot pixel.
002125  3               
002125  3               	pla			; restore de from stack.
002125  3               	sta z80_e
002125  3               	pla
002125  3               	sta z80_d
002125  3               
002125  3               	rts
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Shoot a laser.
002125  3               ;----------------------------------------------------
002125  3               
002125  3               shoot:
002125  3               	sta z80_c		; store direction in c register.
002125  3               	ldy #8
002125  3               	lda (z80_ix),y 		; y coordinate.
002125  3               	clc
002125  3               shoot1:
002125  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
002125  3               	sta z80_l 		; puty y coordinate in l.
002125  3               
002125  3               	ldy #9
002125  3               	lda (z80_ix),y 		; x coordinate in h.
002125  3               	sta z80_h
002125  3               
002125  3               	lda z80_i		; store pointer to sprite.
002125  3               	pha
002125  3               	lda z80_x
002125  3               	pha
002125  3               
002125  3               	jsr fpslot 		; find particle slot.
002125  3               	bcs :+
002125  3               	jmp vapou2		; failed, restore ix.
002125  3               :
002125  3               	lda #0
002125  3               	ldy #0
002125  3               	sta (z80_ix),y 		; set up a laser.
002125  3               
002125  3               	lda z80_c
002125  3               	ldy #1
002125  3               	sta (z80_ix),y 		; set the direction.
002125  3               
002125  3               	lda z80_l
002125  3               	ldy #3
002125  3               	sta (z80_ix),y		; set y coordinate.
002125  3               
002125  3               	ror z80_c		; check direction we want.
002125  3               	bcc :+
002125  3               	jmp shootr		; shoot right.
002125  3               :
002125  3               	lda z80_h		; X position.
002125  3               shoot0:
002125  3               	and #248		; align on character boundary.
002125  3               	ldy #5
002125  3               	sta (z80_ix),y		; set x coordinate.
002125  3               	jmp vapou0 		; draw first image.
002125  3               shootr:
002125  3               	lda z80_h		; x position.
002125  3               	clc
002125  3               	adc #15			; look right.
002125  3               	jmp shoot0		; align and continue.
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Create a bit of vapour trail.
002125  3               ;----------------------------------------------------
002125  3               
002125  3               vapour:
002125  3               	lda z80_i		; store pointer to sprite.
002125  3               	pha
002125  3               	lda z80_x
002125  3               	pha
002125  3               
002125  3               	ldy #8
002125  3               	lda (z80_ix),y 		; y coordinate.
002125  3               	clc
002125  3               vapou3:
002125  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
002125  3               	sta z80_l
002125  3               
002125  3               	ldy #9
002125  3               	lda (z80_ix),y 		; x coordinate.
002125  3               	adc #7
002125  3               	sta z80_h
002125  3               
002125  3               	jsr fpslot 		; find particle slot.
002125  3               	bcc :+
002125  3               	jmp vapou1		; no, we can use it.
002125  3               :
002125  3               vapou2:
002125  3               	pla
002125  3               	sta z80_x
002125  3               	pla
002125  3               	sta z80_i
002125  3               	rts
002125  3               vapou1:
002125  3               	lda z80_l
002125  3               	ldy #3
002125  3               	sta (z80_ix),y		; set up y.
002125  3               
002125  3               	lda z80_h
002125  3               	ldy #5
002125  3               	sta (z80_ix),y 		; set up x coordinate.
002125  3               
002125  3               	jsr qrand		; get quick random number.
002125  3               	and #15			; random time.
002125  3               	clc
002125  3               	adc #15			; minimum time on screen.
002125  3               	ldy #1
002125  3               	sta (z80_ix),y		; set time on screen.
002125  3               
002125  3               	lda #1
002125  3               	ldy #0
002125  3               	sta (z80_ix),y		; define particle as vapour trail.
002125  3               vapou0:
002125  3               	jsr chkxy		; plot first position.
002125  3               	jmp vapou2
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Create a user particle.
002125  3               ;----------------------------------------------------
002125  3               
002125  3               ptusr:
002125  3               	sta z80_f		; store timer.
002125  3               
002125  3               	ldy #8
002125  3               	lda (z80_ix),y 		; y coordinate.
002125  3               	clc
002125  3               	adc #7			; mid-point of sprite.
002125  3               	sta z80_l
002125  3               
002125  3               	ldy #9
002125  3               	lda (z80_ix),y 		; x coordinate.
002125  3               	clc
002125  3               	adc #7			; mid-point of sprite.
002125  3               	sta z80_h
002125  3               
002125  3               	jsr fpslot 		; find particle slot.
002125  3               	bcs ptusr1
002125  3               	rts 			; out of slots, can't generate anything.
002125  3               ptusr1:
002125  3               	lda z80_l
002125  3               	ldy #3
002125  3               	sta (z80_ix),y 		; set up y.
002125  3               
002125  3               	lda z80_h
002125  3               	ldy #5
002125  3               	sta (z80_ix),y		; set up x coordinate.
002125  3               
002125  3               	lda z80_f 		; restore timer.
002125  3               	ldy #1
002125  3               	sta (z80_ix),y		; set time on screen.
002125  3               
002125  3               	lda #7
002125  3               	ldy #0
002125  3               	sta (z80_ix),y		; define particle as user particle.
002125  3               
002125  3               	jmp chkxy		; plot first position.
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Create a vertical or horizontal star.
002125  3               ;----------------------------------------------------
002125  3               
002125  3               star:
002125  3               	lda z80_i		; store pointer to sprite.
002125  3               	pha
002125  3               	lda z80_x
002125  3               	pha
002125  3               
002125  3               	jsr fpslot 		; find particle slot.
002125  3               	bcs star7		; found one we can use.
002125  3               star0:
002125  3               	pla 			; restore sprite pointer.
002125  3               	sta z80_x
002125  3               	pla
002125  3               	sta z80_i
002125  3               	rts 			; out of slots, can't generate anything.
002125  3               star7:
002125  3               	lda z80_c		; direction.
002125  3               	and #3 			; is it left?
002125  3               	bne :+
002125  3               	jmp star1 		; yes, it's left.
002125  3               :
002125  3               	cmp #1 			; is it right?
002125  3               	bne :+
002125  3               	jmp star2 		; yes, it's right.
002125  3               :
002125  3               	cmp #2 			; is it up?
002125  3               	bne :+
002125  3               	jmp star3 		; yes, it's up.
002125  3               :
002125  3               	ldy wntopx 		; get edge of screen.
002125  3               	iny			; down one pixel.
002125  3               	tya
002125  3               star8:
002125  3               	ldy #3
002125  3               	sta (z80_ix),y 		; set y coord.
002125  3               	jsr qrand 		; get quick random number.
002125  3               star9:
002125  3               	ldy #5
002125  3               	sta (z80_ix),y		; set x position.
002125  3               
002125  3               	lda z80_c		; direction.
002125  3               	and #3			; zero to three.
002125  3               	clc
002125  3               	adc #3			; 3 to 6 for starfield.
002125  3               	ldy #0
002125  3               	sta (z80_ix),y		; define particle as star.
002125  3               	jsr chkxy		; plot first position.
002125  3               	jmp star0
002125  3               star1:
002125  3               	jsr qrand		; get quick random number.
002125  3               	ldy #3
002125  3               	sta (z80_ix),y 		; set y coord.
002125  3               
002125  3               	lda wnrgtx 		; get edge of screen.
002125  3               	clc
002125  3               	adc #15			; add width of sprite minus 1.
002125  3               	jmp star9
002125  3               star2:
002125  3               	jsr qrand 		; get quick random number.
002125  3               	ldy #3
002125  3               	sta (z80_ix),y		; set y coord.
002125  3               
002125  3               	lda wnlftx		; get edge of screen.
002125  3               	jmp star9
002125  3               star3:
002125  3               	lda wnbotx 		; get edge of screen.
002125  3               	clc
002125  3               	adc #15 		; height of sprite minus one pixel.
002125  3               	jmp star8
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Find particle slot for lasers or vapour trail.
002125  3               ; can't use alternate accumulator.
002125  3               ;----------------------------------------------------
002125  3               
002125  3               fpslot:
002125  3               	lda #<SHRAPN 		; shrapnel table.
002125  3               	sta z80_x
002125  3               	lda #>SHRAPN
002125  3               	sta z80_i
002125  3               
002125  3               	lda #NUMSHR		; number of pieces in table.
002125  3               	sta z80_b
002125  3               fpslt0:
002125  3               	ldy #0
002125  3               	lda (z80_ix),y		; get type.
002125  3               	asl a  			; is this slot in use?
002125  3               	bcc :+
002125  3               	rts			; no, we can use it.
002125  3               :
002125  3               	clc			; point to more shrapnel.
002125  3               	lda z80_x
002125  3               	adc #SHRSIZ
002125  3               	sta z80_x
002125  3               	bcc :+
002125  3               	inc z80_i
002125  3               :
002125  3               	dec z80_b		; repeat for all shrapnel.
002125  3               	bne fpslt0
002125  3               
002125  3               	clc
002125  3               	rts 			; out of slots, can't generate anything.
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Create an explosion at sprite position.
002125  3               ;----------------------------------------------------
002125  3               
002125  3               explod:
002125  3               	sta z80_c 		; particles to create.
002125  3               
002125  3               	lda z80_i 		; store pointer to sprite.
002125  3               	pha
002125  3               	lda z80_x
002125  3               	pha
002125  3               
002125  3               	ldy #8
002125  3               	lda (z80_ix),y 		; y coordinate.
002125  3               	sta z80_l
002125  3               	ldy #9
002125  3               	lda (z80_ix),y		; x coordinate.
002125  3               	sta z80_h
002125  3               
002125  3               	lda #<SHRAPN		; shrapnel table.
002125  3               	sta z80_x
002125  3               	lda #>SHRAPN
002125  3               	sta z80_i
002125  3               
002125  3               	lda #NUMSHR		; number of pieces in table.
002125  3               	sta explcnt
002125  3               expld0:
002125  3               	ldy #0
002125  3               	lda (z80_ix),y		; get type.
002125  3               	asl a 			; is this slot in use?
002125  3               	bcs expld1		; no, we can use it.
002125  3               expld2:
002125  3               	clc
002125  3               	lda z80_x
002125  3               	adc #SHRSIZ
002125  3               	sta z80_x
002125  3               	bcc :+
002125  3               	inc z80_i
002125  3               :
002125  3               	dec explcnt		; repeat for all shrapnel.
002125  3               	bne expld0
002125  3               expld3:
002125  3               	pla			; restore sprite pointer.
002125  3               	sta z80_x
002125  3               	pla
002125  3               	sta z80_i
002125  3               	rts 			; out of slots, can't generate any more.
002125  3               
002125  3               expld1:
002125  3               	lda z80_c		; shrapnel counter.
002125  3               	and #15			; 0 to 15.
002125  3               	clc			; add to x.
002125  3               	adc z80_l
002125  3               	ldy #3
002125  3               	sta (z80_ix),y		; y coord.
002125  3               
002125  3               	lda seed3 		; crap random number.
002125  3               	and #15			; 0 to 15.
002125  3               	clc 			; add to y.
002125  3               	adc z80_h
002125  3               	ldy #5
002125  3               	sta (z80_ix),y		; x coord.
002125  3               
002125  3               	lda #2
002125  3               	ldy #0
002125  3               	sta (z80_ix),y		; switch it on.
002125  3               
002125  3               	jsr chkxy		; plot first position.
002125  3               	jsr qrand		; quick random angle.
002125  3               	and #60 		; keep within range.
002125  3               	ldy #1
002125  3               	sta (z80_ix),y		; angle.
002125  3               
002125  3               	dec z80_c		; one less piece of shrapnel to generate.
002125  3               	bne expld2 		; back to main explosion loop.
002125  3               	jmp expld3 		; restore sprite pointer and exit.
002125  3               
002125  3               ;explcnt:	.byte 0
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Quick random
002125  3               ;----------------------------------------------------
002125  3               
002125  3               qrand:
002125  3               	jsr random		; r register.
002125  3               	eor seed3		; combine with seed.
002125  3               	sta seed3 		; new seed.
002125  3               	rts
002125  3               
002125  3               ;seed3:	.byte 0
002125  3               
002125  3               ;----------------------------------------------------
002125  3               ; Display all shrapnel.
002125  3               ;----------------------------------------------------
002125  3               
002125  3               dshrp:
002125  3               	lda #<plotde		; display routine.
002125  3               	sta proshx+1
002125  3               	lda #>plotde
002125  3               	sta proshx+2
002125  3               	jsr proshr		; process shrapnel.
002125  3               
002125  3               	lda #<prosh1		; processing routine.
002125  3               	sta proshx+1
002125  3               	lda #>prosh1
002125  3               	sta proshx+2
002125  3               	rts
002125  3               
002125  3               ;------------------------------------------------------
002125  3               ; Particle engine.
002125  3               ;
002125  3               ; Init particle data for 55 particles in SHRAPN table.
002125  3               ; Every particle has 6 bytes.
002125  3               ;
002125  3               ; global:	-
002125  3               ; local:	x,y,hl
002125  3               ; calls:	-
002125  3               ;------------------------------------------------------
002125  3               
002125  3               inishr:
002125  3               	lda #<SHRAPN 		; table.
002125  3               	sta z80_l
002125  3               	lda #>SHRAPN
002125  3               	sta z80_h
002125  3               
002125  3               	ldy #0
002125  3               	ldx #NUMSHR		; shrapnel pieces to process.
002125  3               inish0:
002125  3               	lda #255 		; kill the shrapnel.
002125  3               	sta (z80_hl),y
002125  3               
002125  3               	clc 			; point there.
002125  3               	lda z80_l
002125  3               	adc #SHRSIZ		; distance to next.
002125  3               	sta z80_l
002125  3               	bcc :+
002125  3               	inc z80_h
002125  3               :
002125  3               	dex
002125  3               	bne inish0 		; round again.
002125  3               	rts
002125  3               
002125  3               ;------------------------------------------------------
002125  3               ; Check for collision between laser and sprite.
002125  3               ;------------------------------------------------------
002125  3               
002125  3               lcol:
002125  3               	lda #<SHRAPN		; shrapnel table.
002125  3               	sta z80_l
002125  3               	lda #>SHRAPN
002125  3               	sta z80_h
002125  3               
002125  3               	lda #NUMSHR		; number of pieces in table.
002125  3               	sta z80_b
002125  3               lcol0:
002125  3               	ldy #0
002125  3               	lda (z80_hl),y 		; get type.
002125  3               	beq lcol1		; yes, check collision.
002125  3               lcol3:
002125  3               	clc			; point to more shrapnel.
002125  3               	lda z80_l
002125  3               	adc #SHRSIZ
002125  3               	sta z80_l
002125  3               	bcc :+
002125  3               	inc z80_h
002125  3               :
002125  3               	dec z80_b		; repeat for all shrapnel.
002125  3               	bne lcol0
002125  3               	rts 			; no collision, carry not set.
002125  3               lcol1:
002125  3               	ldy #3
002125  3               	lda (z80_hl),y		; get y.
002125  3               	sec
002125  3               	ldy #8
002125  3               	sbc (z80_ix),y		; subtract sprite y.
002125  3               lcolh:
002125  3               	cmp #SPR_HGT 		; within range?
002125  3               	bcc :+
002125  3               	jmp lcol2		; no, missed.
002125  3               :
002125  3               	ldy #5
002125  3               	lda (z80_hl),y 		; get x.
002125  3               	sec
002125  3               	ldy #9
002125  3               	sbc (z80_ix),y 		; subtract sprite y.
002125  3               	cmp #16			; within range?
002125  3               	bcs :+
002125  3               	jmp lcol4 		; yes, collision occurred.
002125  3               :
002125  3               lcol2:
002125  3               	jmp lcol3
002125  3               lcol4:
002125  3               	sec
002125  3               	rts 			; return with carry set for collision.
002125  3               .endif
002125  3               
002125  3               ;------------------------------------------------------
002125  3               ; Main game engine code starts here.
002125  3               ; After initialisation, mloop is the main loop
002125  3               ;------------------------------------------------------
002125  3               
002125  3               game:
002125  3               
002125  3               ; Set up screen address table.
002125  3               
002125  3               setsat:
002125  3  A9 00        	lda #<ScreenAddr		; start of screen.
002127  3  85 rr        	sta scraddr
002129  3  A9 E4        	lda #>ScreenAddr
00212B  3  85 rr        	sta scraddr+1
00212D  3               
00212D  3  A0 00        	ldy #0			; vertical lines on screen.
00212F  3               setsa0:
00212F  3  A5 rr        	lda scraddr
002131  3  99 00 E0     	sta SCADTB_lb,y		; write low byte.
002134  3  A5 rr        	lda scraddr+1
002136  3  C0 C0        	cpy #192		; vertical lines on screen.
002138  3  90 02        	bcc :+
00213A  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
00213C  3               :
00213C  3  99 00 E1     	sta SCADTB_hb,y		; write high byte.
00213F  3  20 ED 2F     	jsr nline		; next line down.
002142  3  C8           	iny			; next position in table.
002143  3  D0 EA        	bne setsa0
002145  3               
002145  3               ; Init graphics mode
002145  3               
002145  3  A9 F0        	lda #ScrMode		; graphics mode
002147  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
00214A  3  20 23 21     	jsr setpal 		; set up palette.
00214D  3               
00214D  3               ; Init AtoMMC joystick
00214D  3  20 D5 3C     	jsr joyinit		; AtoMMC joystick on PORT B
002150  3               
002150  3               rpblc2:
002150  3               .if pflag
002150  3               	jsr inishr 		; initialise particle engine.
002150  3               .endif
002150  3               evintr:
002150  3  20 00 37     	jsr evnt12 		; call intro/menu event.
002153  3               
002153  3  A9 02        	lda #WALL 		; write default property.
002155  3  A2 00        	ldx #0
002157  3               clrmap:
002157  3  9D 00 DD     	sta MAP,x 		; block properties.
00215A  3  9D 00 DE     	sta MAP+256,x
00215D  3  9D 00 DF     	sta MAP+512,x
002160  3  E8           	inx			; next byte.
002161  3  D0 F4        	bne clrmap
002163  3               .if oflag
002163  3  20 52 20     	jsr iniob 		; initialise objects.
002166  3               .endif
002166  3  A9 00        	lda #0			; put zero in accumulator.
002168  3  85 rr        	sta gamwon		; reset game won flag.
00216A  3               
00216A  3  20 D6 22     	jsr inisc 		; init the score.
00216D  3               mapst:
00216D  3  AD 4D 35     	lda stmap 		; start position on map.
002170  3  8D 18 35     	sta roomtb		; set up position in table, if there is one.
002173  3               
002173  3               inipbl:
002173  3               .if aflag
002173  3               	lda #<eop		; reset blockpointer
002173  3               	sta pbptr
002173  3               	lda #>eop
002173  3               	sta pbptr+1
002173  3               .endif
002173  3  20 00 31     	jsr initsc 		; set up first screen.
002176  3               
002176  3  A9 07        	lda #<ssprit 		; default to spare sprite in table.
002178  3  85 68        	sta z80_x
00217A  3  A9 35        	lda #>ssprit
00217C  3  85 69        	sta z80_i
00217E  3               evini:
00217E  3  20 65 37     	jsr evnt13 		; initialisation.
002181  3               
002181  3               ; Two restarts.
002181  3               ; First restart - clear all sprites and initialise everything.
002181  3               
002181  3               rstrt:
002181  3  20 76 22     	jsr rsevt 		; restart events.
002184  3  20 45 20     	jsr xspr 		; clear sprite table.
002187  3  20 6C 32     	jsr sprlst 		; fetch pointer to screen sprites.
00218A  3  20 F5 32     	jsr ispr 		; initialise sprite table.
00218D  3               
00218D  3  4C 9C 21     	jmp rstrt0
002190  3               
002190  3               ; Second restart - clear all but player, and don't initialise him.
002190  3               
002190  3               rstrtn:
002190  3  20 76 22     	jsr rsevt		; restart events.
002193  3  20 99 32     	jsr nspr 		; clear all non-player sprites.
002196  3  20 6C 32     	jsr sprlst 		; fetch pointer to screen sprites.
002199  3  20 32 33     	jsr kspr 		; initialise sprite table, no more players.
00219C  3               
00219C  3               ; Set up the player and/or enemy sprites.
00219C  3               
00219C  3               rstrt0:
00219C  3  A9 00        	lda #0 			; zero in accumulator.
00219E  3  85 rr        	sta nexlev 		; reset next level flag.
0021A0  3  85 rr        	sta restfl 		; reset restart flag.
0021A2  3  85 rr        	sta deadf 		; reset dead flag.
0021A4  3  20 FC 27     	jsr droom 		; show screen layout.
0021A7  3               rpblc0:
0021A7  3               .if pflag
0021A7  3               	jsr inishr 		; initialise particle engine.
0021A7  3               .endif
0021A7  3               .if aflag
0021A7  3               	jsr rbloc		; draw blocks for this screen
0021A7  3               .endif
0021A7  3               .if oflag
0021A7  3  20 26 23     	jsr shwob		; draw objects.
0021AA  3               .endif
0021AA  3               
0021AA  3  A9 3B        	lda #<sprtab 		; address of sprite table, even sprites.
0021AC  3  85 68        	sta z80_x
0021AE  3  A9 34        	lda #>sprtab
0021B0  3  85 69        	sta z80_i
0021B2  3  20 DE 2D     	jsr dspr 		; display sprites.
0021B5  3               
0021B5  3  A9 4C        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0021B7  3  85 68        	sta z80_x
0021B9  3  A9 34        	lda #>(sprtab+TABSIZ)
0021BB  3  85 69        	sta z80_i
0021BD  3  20 DE 2D     	jsr dspr 		; display sprites.
0021C0  3               mloop:
0021C0  3  20 84 20     	jsr vsync 		; synchronise with display.
0021C3  3  A9 3B        	lda #<sprtab 		; address of sprite table, even sprites.
0021C5  3  85 68        	sta z80_x
0021C7  3  A9 34        	lda #>sprtab
0021C9  3  85 69        	sta z80_i
0021CB  3  20 DE 2D     	jsr dspr 		; display even sprites.
0021CE  3               
0021CE  3               ;	jsr plsnd 		; play sounds.
0021CE  3               
0021CE  3  20 24 21     	jsr proshr
0021D1  3  A9 4C        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0021D3  3  85 68        	sta z80_x
0021D5  3  A9 34        	lda #>(sprtab+TABSIZ)
0021D7  3  85 69        	sta z80_i
0021D9  3  20 DE 2D     	jsr dspr 		; display odd sprites.
0021DC  3               
0021DC  3  A9 07        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
0021DE  3  85 68        	sta z80_x
0021E0  3  A9 35        	lda #>(ssprit)
0021E2  3  85 69        	sta z80_i
0021E4  3               evlp1:
0021E4  3  20 58 35     	jsr evnt10 		; called once per main loop.
0021E7  3  20 5C 2D     	jsr pspr 		; process sprites.
0021EA  3               
0021EA  3               ; Main loop events.
0021EA  3               
0021EA  3  A9 07        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0021EC  3  85 68        	sta z80_x
0021EE  3  A9 35        	lda #>ssprit
0021F0  3  85 69        	sta z80_i
0021F2  3               evlp2:
0021F2  3  20 FF 36     	jsr evnt11 		; called once per main loop.
0021F5  3               bsortx:
0021F5  3  20 D2 2C     	jsr bsort 		; sort sprites.
0021F8  3               
0021F8  3  A5 rr        	lda nexlev		; finished level flag.
0021FA  3  F0 03        	beq :+
0021FC  3  4C 24 22     	jmp newlev		; is set, go to next level.
0021FF  3               :
0021FF  3  A5 rr        	lda gamwon		; finished game flag.
002201  3  F0 03        	beq :+
002203  3  4C 33 22     	jmp evwon		; is set, finish the game.
002206  3               :
002206  3  A5 rr        	lda restfl 		; finished level flag.
002208  3  C9 01        	cmp #1			; has it been set?
00220A  3  D0 03        	bne :+
00220C  3  4C 81 21     	jmp rstrt		; yes, go to next level.
00220F  3               :
00220F  3  C9 02        	cmp #2			; has it been set?
002211  3  D0 03        	bne :+
002213  3  4C 90 21     	jmp rstrtn		; yes, go to next level.
002216  3               :
002216  3  A5 rr        	lda deadf 		; dead flag.
002218  3  F0 03        	beq :+
00221A  3  4C 39 22     	jmp pdead		; yes, player dead.
00221D  3               :
00221D  3               ; back to start of main loop.
00221D  3               
00221D  3  E6 rr        	inc frmno
00221F  3  E6 rr        	inc clock
002221  3  4C C0 21     	jmp mloop		; switched to a jmp mloop during test mode.
002224  3               
002224  3               ;----------------------------------------------------------
002224  3               ; Read blocks from list and update screen accordingly.
002224  3               ;----------------------------------------------------------
002224  3               
002224  3               .if aflag
002224  3               rbloc:
002224  3               	lda #<eop		; reset temp blockpointer
002224  3               	sta pbbuf
002224  3               	lda #>eop
002224  3               	sta pbbuf+1
002224  3               
002224  3               rbloc2:
002224  3               	lda pbbuf			; check for last block
002224  3               	cmp pbptr
002224  3               	bne rbloc1
002224  3               	lda pbbuf+1
002224  3               	cmp pbptr+1
002224  3               	bne rbloc1
002224  3               	rts
002224  3               rbloc1:
002224  3               	ldy #0
002224  3               	lda (pbbuf),y		; check if block for this scno
002224  3               	cmp scno
002224  3               	bne rbloc0		; if not, skip
002224  3               	iny
002224  3               	lda (pbbuf),y		; get y
002224  3               	sta dispy
002224  3               	iny
002224  3               	lda (pbbuf),y		; get x
002224  3               	sta dispx
002224  3               	iny
002224  3               	lda (pbbuf),y		; get blocknr
002224  3               	jsr pattr2		; draw block
002224  3               rbloc0:
002224  3               	clc			; point to next block
002224  3               	lda pbbuf
002224  3               	adc #4
002224  3               	sta pbbuf
002224  3               	bcc rbloc2
002224  3               	inc pbbuf+1
002224  3               	jmp rbloc2
002224  3               .endif
002224  3               
002224  3               ;----------------------------------------------------------
002224  3               ; New level
002224  3               ;----------------------------------------------------------
002224  3               
002224  3               ;.repeat 270
002224  3               ;  .byte 0
002224  3               ;.endrep
002224  3               
002224  3               newlev:
002224  3  A5 rr        	lda scno 			; current screen.
002226  3  18           	clc
002227  3  69 01        	adc #1				; next screen.
002229  3  CD F1 38     	cmp numsc			; total number of screens.
00222C  3  B0 05        	bcs evwon			; yes, game finished.
00222E  3  85 rr        	sta scno			; set new level number.
002230  3  4C 81 21     	jmp rstrt			; restart, clearing all aliens.
002233  3               
002233  3               evwon:
002233  3  20 6A 37     	jsr evnt18		 	; game completed.
002236  3  4C 4B 22     	jmp tidyup			; tidy up and return to BASIC/calling routine.
002239  3               
002239  3               ;----------------------------------------------------------
002239  3               ; Player dead.
002239  3               ;----------------------------------------------------------
002239  3               
002239  3               ;.repeat 258
002239  3               ;  .byte 0
002239  3               ;.endrep
002239  3               
002239  3               pdead:
002239  3  A9 00        	lda #0				; zeroise accumulator.
00223B  3  85 rr        	sta deadf			; reset dead flag.
00223D  3               evdie:
00223D  3  20 68 37     	jsr evnt16 			; death subroutine.
002240  3  A5 rr        	lda numlif			; number of lives.
002242  3  F0 03        	beq :+
002244  3  4C 81 21     	jmp rstrt 			; restart game.
002247  3               :
002247  3               evfail:
002247  3  20 69 37     	jsr evnt17 			; failure event.
00224A  3  60           	rts			; restart game
00224B  3               
00224B  3               ;----------------------------------------------------------
00224B  3               ; Tidy things up
00224B  3               ;----------------------------------------------------------
00224B  3               
00224B  3               ;.repeat 291
00224B  3               ;  .byte 0
00224B  3               ;.endrep
00224B  3               
00224B  3               tidyup:
00224B  3  A0 00        	ldy #0				; digits to check.
00224D  3               tidyu2:
00224D  3  B9 E0 24     	lda score,y 			; get score digit.
002250  3  CD E6 24     	cmp hiscor 			; are we larger than high score digit?
002253  3  90 07        	bcc tidyu0			; high score is bigger.
002255  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
002257  3  C8           	iny				; next digit of high score.
002258  3  C0 06        	cpy #6
00225A  3  D0 F1        	bne tidyu2			; repeat for all digits
00225C  3               tidyu0:
00225C  3  A9 E0        	lda #<score			; return pointing to score.
00225E  3  85 62        	sta z80_c
002260  3  A9 24        	lda #>score
002262  3  85 63        	sta z80_b
002264  3  60           	rts
002265  3               tidyu1:
002265  3  A0 05        	ldy #5
002267  3               tidyu3:
002267  3  B9 E0 24     	lda score,y			; score.
00226A  3  99 E6 24     	sta hiscor,y			; high score.
00226D  3  88           	dey
00226E  3  10 F7        	bpl tidyu3 			; copy score to high score.
002270  3               evnewh:
002270  3  20 6B 37     	jsr evnt19			; new high score event.
002273  3  4C 5C 22     	jmp tidyu0			; tidy up.
002276  3               
002276  3               ;--------------------------------------------------
002276  3               ; Restart event.
002276  3               ;--------------------------------------------------
002276  3               
002276  3               rsevt:
002276  3  A9 07        	lda #<ssprit 			; default to spare element in table.
002278  3  85 68        	sta z80_x
00227A  3  A9 35        	lda #>ssprit
00227C  3  85 69        	sta z80_i
00227E  3               evrs:
00227E  3  4C 66 37     	jmp evnt14	 		; call restart event.
002281  3               
002281  3               ;------------------------------------------------------------------
002281  3               ; Copy number passed in a to string position bc, right-justified.
002281  3               ;
002281  3               ; Input:
002281  3               ;  A  = number
002281  3               ;  BC = string address
002281  3               ;
002281  3               ; Output:
002281  3               ;  BC = string with number
002281  3               ;-----------------------------------------------------------------
002281  3               
002281  3               num2ch:
002281  3  85 65        	sta z80_d		; Save number
002283  3               
002283  3  A9 00        	lda #0
002285  3  85 rr        	sta flag
002287  3               numdg3:
002287  3  A2 64        	ldx #100		; hundreds column.
002289  3  86 64        	stx z80_e
00228B  3  20 9B 22     	jsr numdg		; show digit.
00228E  3               numdg2:
00228E  3  A2 0A        	ldx #10			; tens column.
002290  3  86 64        	stx z80_e
002292  3  20 9B 22     	jsr numdg		; show digit.
002295  3               
002295  3  E6 rr        	inc flag
002297  3  A2 01        	ldx #1			; units column.
002299  3  86 64        	stx z80_e
00229B  3               numdg:
00229B  3  A9 30        	lda #48			; clear digit.
00229D  3  85 61        	sta z80_a
00229F  3               numdg1:
00229F  3  A5 65        	lda z80_d
0022A1  3  C5 64        	cmp z80_e
0022A3  3  90 0E        	bcc numdg0		; nothing to show.
0022A5  3  38           	sec
0022A6  3  A5 65        	lda z80_d
0022A8  3  E5 64        	sbc z80_e		; subtract from column.
0022AA  3  85 65        	sta z80_d
0022AC  3  E6 61        	inc z80_a		; increment digit.
0022AE  3  E6 rr        	inc flag
0022B0  3  4C 9F 22     	jmp numdg1		; repeat until column is zero.
0022B3  3               numdg0:
0022B3  3  A0 00        	ldy #0
0022B5  3  A5 61        	lda z80_a
0022B7  3  91 62        	sta (z80_bc),y		; write digit to buffer.
0022B9  3  A5 rr        	lda flag
0022BB  3  F0 06        	beq :+
0022BD  3  E6 62        	inc z80_c		; next buffer position.
0022BF  3  D0 02        	bne :+
0022C1  3  E6 63        	inc z80_b
0022C3  3               :
0022C3  3  60           	rts
0022C4  3               num2dd:
0022C4  3  85 65        	sta z80_d		; Save number
0022C6  3               
0022C6  3  A9 01        	lda #1
0022C8  3  85 rr        	sta flag
0022CA  3               
0022CA  3  4C 8E 22     	jmp numdg2
0022CD  3               num2td:
0022CD  3  85 65        	sta z80_d		; Save number
0022CF  3               
0022CF  3  A9 01        	lda #1
0022D1  3  85 rr        	sta flag
0022D3  3  4C 87 22     	jmp numdg3
0022D6  3               
0022D6  3               ;flag:	.byte 0
0022D6  3               
0022D6  3               ;---------------------------------------------------------
0022D6  3               ; Reset score to "000000"
0022D6  3               ;---------------------------------------------------------
0022D6  3               
0022D6  3               inisc:
0022D6  3  A9 30        	lda #'0'
0022D8  3  A2 05        	ldx #5			; digits to initialise.
0022DA  3               inisc0:
0022DA  3  9D E0 24     	sta score,x 		; write zero digit.
0022DD  3  CA           	dex			; next column.
0022DE  3  10 FA        	bpl inisc0		; repeat for all digits.
0022E0  3               
0022E0  3  60           	rts
0022E1  3               
0022E1  3               ;-----------------------------------------------------
0022E1  3               ; Multiply h by d and return in hl.
0022E1  3               ;
0022E1  3               ; Input:
0022E1  3               ;  H = first number
0022E1  3               ;  D = second number
0022E1  3               ;
0022E1  3               ; Output:
0022E1  3               ;  HL = result H x D
0022E1  3               ;-----------------------------------------------------
0022E1  3               
0022E1  3               imul:
0022E1  3  A5 65        	lda z80_d		; HL = H * D
0022E3  3  85 64        	sta z80_e
0022E5  3  A5 67        	lda z80_h
0022E7  3  85 62        	sta z80_c		; make c first multiplier.
0022E9  3               imul0:
0022E9  3  A9 00        	lda #0			; zeroise total.
0022EB  3  85 66        	sta z80_l
0022ED  3  85 67        	sta z80_h
0022EF  3               
0022EF  3  A5 67        	lda z80_h
0022F1  3  85 65        	sta z80_d		; zeroise high byte.
0022F3  3               
0022F3  3  A9 08        	lda #8			; repeat 8 times.
0022F5  3  85 63        	sta z80_b
0022F7  3               imul1:
0022F7  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
0022F9  3  90 0E        	bcc imul2		; wasn't set.
0022FB  3  18           	clc			; bit was set, so add de.
0022FC  3  A5 66        	lda z80_l
0022FE  3  65 64        	adc z80_e
002300  3  85 66        	sta z80_l
002302  3  A5 67        	lda z80_h
002304  3  65 65        	adc z80_d
002306  3  85 67        	sta z80_h
002308  3  18           	clc 			; reset carry.
002309  3               imul2:
002309  3  06 64        	asl z80_e 		; shift de 1 bit left.
00230B  3  26 65        	rol z80_d
00230D  3  C6 63        	dec z80_b
00230F  3  D0 E6        	bne imul1		; repeat 8 times.
002311  3               
002311  3  60           	rts
002312  3               
002312  3               ;-----------------------------------------------
002312  3               ; Divide d by e and return in d, remainder in a.
002312  3               ;
002312  3               ; Input:
002312  3               ;  D = first number
002312  3               ;  E = second number
002312  3               ;
002312  3               ; Output:
002312  3               ;  D = result D/E
002312  3               ;  A = remainder
002312  3               ;-----------------------------------------------
002312  3               
002312  3               idiv:
002312  3  A9 00        	lda #0
002314  3  A0 08        	ldy #8		 	; bits to shift.
002316  3  06 65        	asl z80_d
002318  3               idiv0:
002318  3  2A           	rol a 			; multiply d by 2.
002319  3  C5 64        	cmp z80_e 		; test if e is smaller.
00231B  3  90 02        	bcc idiv1		; e is greater, no division this time.
00231D  3  E5 64        	sbc z80_e		; subtract it.
00231F  3               idiv1:
00231F  3  26 65        	rol z80_d		; rotate into d.
002321  3  88           	dey
002322  3  D0 F4        	bne idiv0		; repeat
002324  3  60           	rts
002325  3               
002325  3               ;---------------------------------------------------
002325  3               ; Play AY sound effect
002325  3               ;---------------------------------------------------
002325  3               
002325  3               plsnd:
002325  3  60           	rts
002326  3               
002326  3               ;---------------------------------------------------
002326  3               ; Objects handling.
002326  3               ; 32 bytes for image
002326  3               ; 3 for room, y and x
002326  3               ; 3 for starting room, y and x.
002326  3               ; 254 = disabled.
002326  3               ; 255 = object in player"s pockets.
002326  3               ;---------------------------------------------------
002326  3               
002326  3               ;---------------------------------------------------
002326  3               ; Show items present.
002326  3               ;---------------------------------------------------
002326  3               
002326  3               .if oflag
002326  3               shwob:
002326  3  A9 F7        	lda #<objdta 			; objects table.
002328  3  85 66        	sta z80_l
00232A  3  A9 38        	lda #>objdta
00232C  3  85 67        	sta z80_h
00232E  3               
00232E  3  AD 2A 20     	lda numob 			; number of objects in the game.
002331  3  85 rr        	sta sprcnt
002333  3               shwob0:
002333  3  A0 20        	ldy #32 			; distance to room number.
002335  3  B1 66        	lda (z80_hl),y 			; same as an item?
002337  3  C5 rr        	cmp scno 			; current location.
002339  3  D0 03        	bne :+
00233B  3  20 50 23     	jsr dobj 			; yes, display object.
00233E  3               :
00233E  3  18           	clc
00233F  3  A5 66        	lda z80_l
002341  3  69 26        	adc #38 			; distance to next item.
002343  3  85 66        	sta z80_l
002345  3  A5 67        	lda z80_h
002347  3  69 00        	adc #0
002349  3  85 67        	sta z80_h	 		; point to it.
00234B  3  C6 rr        	dec sprcnt
00234D  3  D0 E4        	bne shwob0 			; repeat for others.
00234F  3  60           	rts
002350  3               
002350  3               ;---------------------------------------------------
002350  3               ; Display object.
002350  3               ; hl must point to object's start address.
002350  3               ;
002350  3               ; Input:
002350  3               ;  HL = object address
002350  3               ;---------------------------------------------------
002350  3               
002350  3               dobj:
002350  3  A0 21        	ldy #33
002352  3  B1 66        	lda (z80_hl),y 			; point to y.
002354  3  85 rr        	sta dispy
002356  3  C8           	iny
002357  3  B1 66        	lda (z80_hl),y 			; point to x.
002359  3  85 rr        	sta dispx
00235B  3               dobj1:
00235B  3  4C 44 27     	jmp sprite 			; draw this sprite.
00235E  3               
00235E  3               ;--------------------------------------
00235E  3               ; Remove an object.
00235E  3               ;
00235E  3               ; Input:
00235E  3               ;  A = object number
00235E  3               ;--------------------------------------
00235E  3               
00235E  3               remob:
00235E  3  CD 2A 20     	cmp numob			; number of objects in game.
002361  3  90 01        	bcc :+				; are we checking past the end?
002363  3  60           	rts				; yes, can't get non-existent item.
002364  3               :
002364  3  48           	pha				; remember object.
002365  3  20 73 23     	jsr getob			; pick it up if we haven't already got it.
002368  3  68           	pla				; retrieve object number.
002369  3  20 A2 23     	jsr gotob			; get its address.
00236C  3  A9 FE        	lda #254
00236E  3  A0 20        	ldy #32
002370  3  91 66        	sta (z80_hl),y			; remove it.
002372  3  60           	rts
002373  3               
002373  3               ;---------------------------------------------------
002373  3               ; Pick up object number held in the accumulator.
002373  3               ;
002373  3               ; Input:
002373  3               ;  A = object number
002373  3               ;---------------------------------------------------
002373  3               
002373  3               getob:
002373  3  CD 2A 20     	cmp numob 		; number of objects in game.
002376  3  90 01        	bcc :+			; are we checking past the end?
002378  3  60           	rts			; yes, can't get non-existent item.
002379  3               :
002379  3  20 A2 23     	jsr gotob 		; check if we already have it.
00237C  3  C9 FF        	cmp #255
00237E  3  D0 01        	bne :+
002380  3  60           	rts			; we already do.
002381  3               :
002381  3  A0 20        	ldy #32
002383  3  B1 66        	lda (z80_hl),y		; is it on this screen?
002385  3  C5 rr        	cmp scno 		; current screen.
002387  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
002389  3               
002389  3  A9 FF        	lda #255
00238B  3  91 66        	sta (z80_hl),y		; pick it up.
00238D  3  C8           	iny 			; point to y coord.
00238E  3               getob1:
00238E  3  A0 21        	ldy #33
002390  3  B1 66        	lda (z80_hl),y		; y coord.
002392  3  85 rr        	sta dispy
002394  3  A0 22        	ldy #34
002396  3  B1 66        	lda (z80_hl),y 		; x coord.
002398  3  85 rr        	sta dispx
00239A  3  4C 5B 23     	jmp dobj1 		; delete object sprite.
00239D  3               getob0:
00239D  3  A9 FF        	lda #255
00239F  3  91 66        	sta (z80_hl),y 		; pick it up.
0023A1  3  60           	rts
0023A2  3               .endif
0023A2  3               
0023A2  3               ;-----------------------------------------------------------------
0023A2  3               ; Got object check.
0023A2  3               ; Call with object in accumulator, returns zero set if in pockets.
0023A2  3               ;
0023A2  3               ; Input:
0023A2  3               ;  A = object number
0023A2  3               ;-----------------------------------------------------------------
0023A2  3               .if oflag .or mflag
0023A2  3               gotob:
0023A2  3  CD 2A 20     	cmp numob 		; number of objects in game.
0023A5  3  90 03        	bcc :+ 			; are we checking past the end?
0023A7  3  4C AE 23     	jmp gotob0 		; yes, we can't have a non-existent object.
0023AA  3               :
0023AA  3  20 B3 23     	jsr findob		; find the object.
0023AD  3               gotob1:
0023AD  3  60           	rts
0023AE  3               
0023AE  3               gotob0:
0023AE  3  A9 FE        	lda #254 		; missing.
0023B0  3  4C AD 23     	jmp gotob1
0023B3  3               
0023B3  3               findob:
0023B3  3  48           	pha			; save object number
0023B4  3  A9 F7        	lda #<objdta 		; objects.
0023B6  3  85 66        	sta z80_l
0023B8  3  A9 38        	lda #>objdta
0023BA  3  85 67        	sta z80_h
0023BC  3  68           	pla			; retreive object number
0023BD  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
0023BF  3  AA           	tax 			; loop counter
0023C0  3               fndob2:
0023C0  3  18           	clc
0023C1  3  A5 66        	lda z80_l
0023C3  3  69 26        	adc #38 		; size of each object.
0023C5  3  85 66        	sta z80_l
0023C7  3  90 02        	bcc :+
0023C9  3  E6 67        	inc z80_h
0023CB  3               :
0023CB  3  CA           	dex 			; repeat until we find address.
0023CC  3  D0 F2        	bne fndob2
0023CE  3               fndob1:
0023CE  3  A0 20        	ldy #32			; distance to room it's in.
0023D0  3  B1 66        	lda (z80_hl),y		; fetch status.
0023D2  3  60           	rts
0023D3  3               .endif
0023D3  3               
0023D3  3               ;---------------------------------------------
0023D3  3               ; Drop object number at (dispx, dispy).
0023D3  3               ;
0023D3  3               ; Input:
0023D3  3               ;  A = object number
0023D3  3               ;---------------------------------------------
0023D3  3               
0023D3  3               .if oflag
0023D3  3               drpob:
0023D3  3  CD 2A 20     	cmp numob 		; are we checking past the end?
0023D6  3  90 01        	bcc :+
0023D8  3  60           	rts			; yes, can't drop non-existent item.
0023D9  3               :
0023D9  3  20 A2 23     	jsr gotob		; make sure object is in inventory.
0023DC  3  C5 rr        	cmp scno		; already on this screen?
0023DE  3  D0 01        	bne :+
0023E0  3  60           	rts			; yes, nothing to do.
0023E1  3               :
0023E1  3  A0 20        	ldy #32
0023E3  3  A5 rr        	lda scno
0023E5  3  91 66        	sta (z80_hl),y		; bring onto screen.
0023E7  3  A5 rr        	lda dispy		; sprite y coordinate.
0023E9  3  C8           	iny
0023EA  3  91 66        	sta (z80_hl),y		; point to object y.
0023EC  3  A5 rr        	lda dispx 		; sprite x coordinate.
0023EE  3  C8           	iny
0023EF  3  91 66        	sta (z80_hl),y 		; point to object x
0023F1  3  4C 50 23     	jmp dobj		; draw the object sprite.
0023F4  3               
0023F4  3               ;-----------------------------------------------
0023F4  3               ; Seek objects at sprite position.
0023F4  3               ;
0023F4  3               ; Output:
0023F4  3               ;  A = object number, if not found A=255
0023F4  3               ;-----------------------------------------------
0023F4  3               
0023F4  3               skobj:
0023F4  3  A9 F7        	lda #<objdta 		; pointer to objects.
0023F6  3  85 66        	sta z80_l
0023F8  3  A9 38        	lda #>objdta
0023FA  3  85 67        	sta z80_h
0023FC  3               
0023FC  3  AD 2A 20     	lda numob 		; number of objects in game.
0023FF  3  85 63        	sta z80_b 		; set up the loop counter.
002401  3               skobj0:
002401  3  A5 rr        	lda scno		; current room number.
002403  3  A0 20        	ldy #32
002405  3  D1 66        	cmp (z80_hl),y		; is object in here?
002407  3  D0 03        	bne :+
002409  3  20 1E 24     	jsr skobj1		; yes, check coordinates.
00240C  3               :
00240C  3  18           	clc			; point to next object in table.
00240D  3  A5 66        	lda z80_l
00240F  3  69 26        	adc #38			; size of each object.
002411  3  85 66        	sta z80_l
002413  3  90 02        	bcc :+
002415  3  E6 67        	inc z80_h
002417  3               :
002417  3  C6 63        	dec z80_b
002419  3  D0 E6        	bne skobj0		; repeat for all objects.
00241B  3               
00241B  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
00241D  3  60           	rts
00241E  3               
00241E  3               skobj1:
00241E  3  A0 21        	ldy #33			; point to y coordinate.
002420  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
002422  3  38           	sec
002423  3  A0 08        	ldy #8
002425  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
002427  3  18           	clc
002428  3  69 0F        	adc #15			; add sprite height minus one.
00242A  3  C9 1F        	cmp #31			; within range?
00242C  3  B0 18        	bcs skobj2		; no, ignore object.
00242E  3               
00242E  3  A0 22        	ldy #34			; point to x coordinate now.
002430  3  B1 66        	lda (z80_hl),y 		; get coordinate.
002432  3  38           	sec
002433  3  A0 09        	ldy #9
002435  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
002437  3  18           	clc			; add sprite width minus one.
002438  3  69 0F        	adc #15
00243A  3  C9 1F        	cmp #31			; within range?
00243C  3  B0 08        	bcs skobj2		; no, ignore object.
00243E  3               
00243E  3  68           	pla			; remove return address from stack.
00243F  3  68           	pla
002440  3               
002440  3  AD 2A 20     	lda numob 		; objects in game.
002443  3  38           	sec
002444  3  E5 63        	sbc z80_b		; subtract loop counter.
002446  3               skobj2:
002446  3  60           	rts			; accumulator now points to object.
002447  3               .endif
002447  3               
002447  3               ;---------------------------------------------------------------------
002447  3               ; Spawn a new sprite.
002447  3               ;---------------------------------------------------------------------
002447  3               
002447  3                 offset = 20
002447  3               
002447  3               ;.repeat 343
002447  3               ;  .byte 0
002447  3               ;.endrep
002447  3               
002447  3               spawn:
002447  3  A9 3B        	lda #<sprtab		; sprite table.
002449  3  85 66        	sta z80_l
00244B  3  A9 34        	lda #>sprtab
00244D  3  85 67        	sta z80_h
00244F  3               numsp1:
00244F  3  A9 0C        	lda #NUMSPR		; number of sprites.
002451  3  85 rr        	sta spcnt
002453  3               spaw0:
002453  3  A0 00        	ldy #0
002455  3  B1 66        	lda (z80_hl),y		; get sprite type.
002457  3  C9 FF        	cmp #255		; is it an unused slot?
002459  3  F0 0F        	beq spaw1 		; yes, we can use this one.
00245B  3               
00245B  3  18           	clc 			; point to next sprite in table.
00245C  3  A5 66        	lda z80_l
00245E  3  69 11        	adc #TABSIZ		; size of each entry.
002460  3  85 66        	sta z80_l
002462  3  90 02        	bcc :+
002464  3  E6 67        	inc z80_h
002466  3               :
002466  3  C6 rr        	dec spcnt		; one less iteration.
002468  3  D0 E9        	bne spaw0		; keep going until we find a slot.
00246A  3               
00246A  3               ; Didn't find one but drop through and set up a dummy sprite instead.
00246A  3               
00246A  3               spaw1:
00246A  3  A5 69        	lda z80_i		; address of original sprite.
00246C  3  48           	pha
00246D  3  A5 68        	lda z80_x
00246F  3  48           	pha
002470  3               
002470  3  A5 66        	lda z80_l		; store spawned sprite address.
002472  3  85 rr        	sta spptr
002474  3  A5 67        	lda z80_h
002476  3  85 rr        	sta spptr+1
002478  3               
002478  3  A5 62        	lda z80_c
00247A  3  A0 00        	ldy #0
00247C  3  91 66        	sta (z80_hl),y 		; set the type.
00247E  3  A0 05        	ldy #5
002480  3  91 66        	sta (z80_hl),y		; copy
002482  3               
002482  3  A5 63        	lda z80_b
002484  3  A0 01        	ldy #1
002486  3  91 66        	sta (z80_hl),y		; set the image.
002488  3  A0 06        	ldy #6
00248A  3  91 66        	sta (z80_hl),y		; copy
00248C  3               
00248C  3  A9 00        	lda #0 			; frame zero.
00248E  3  A0 02        	ldy #2
002490  3  91 66        	sta (z80_hl),y		; set frame.
002492  3  A0 07        	ldy #7
002494  3  91 66        	sta (z80_hl),y		; copy
002496  3               
002496  3  A0 08        	ldy #8
002498  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00249A  3  A0 03        	ldy #3
00249C  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
00249E  3  A0 08        	ldy #8
0024A0  3  91 66        	sta (z80_hl),y		; copy
0024A2  3               
0024A2  3  A0 09        	ldy #9
0024A4  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0024A6  3  A0 04        	ldy #4
0024A8  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
0024AA  3  A0 09        	ldy #9
0024AC  3  91 66        	sta (z80_hl),y		; copy
0024AE  3               
0024AE  3  A0 0A        	ldy #10			; direction of original.
0024B0  3  B1 68        	lda (z80_ix),y
0024B2  3  91 66        	sta (z80_hl),y		; direction
0024B4  3               
0024B4  3  A9 00        	lda #0
0024B6  3  A0 0B        	ldy #11
0024B8  3  91 66        	sta (z80_hl),y		; reset parameter.
0024BA  3  C8           	iny
0024BB  3  91 66        	sta (z80_hl),y		; reset parameter.
0024BD  3  C8           	iny
0024BE  3  91 66        	sta (z80_hl),y		; reset parameter.
0024C0  3  C8           	iny
0024C1  3  91 66        	sta (z80_hl),y		; reset parameter.
0024C3  3               rtssp:
0024C3  3  A5 rr        	lda spptr		; address of new sprite.
0024C5  3  85 68        	sta z80_x
0024C7  3  A5 rr        	lda spptr+1
0024C9  3  85 69        	sta z80_i
0024CB  3               evis1:
0024CB  3  20 57 35     	jsr evnt09 		; call sprite initialisation event.
0024CE  3               
0024CE  3  A5 rr        	lda spptr 		; address of new sprite.
0024D0  3  85 68        	sta z80_x
0024D2  3  A5 rr        	lda spptr+1
0024D4  3  85 69        	sta z80_i
0024D6  3  20 04 2F     	jsr sspria 		; display the new sprite.
0024D9  3               
0024D9  3  68           	pla			; address of original sprite.
0024DA  3  85 68        	sta z80_x
0024DC  3  68           	pla
0024DD  3  85 69        	sta z80_i
0024DF  3               
0024DF  3  60           	rts
0024E0  3               
0024E0  3               ;spcnt:	.byte 0
0024E0  3               ;spptr:	.word 0			; spawned sprite pointer.
0024E0  3               ;seed:	.byte 0			; seed for random numbers.
0024E0  3  30 30 30 30  score:	.byte "000000"		; player"s score.
0024E4  3  30 30        
0024E6  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
0024EA  3  30 30        
0024EC  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
0024F0  3  30 30        
0024F2  3  00 E4        grbase:	.word ScreenAddr	; graphics base address.
0024F4  3               
0024F4  3               ;----------------------------------------------------
0024F4  3               ; Check y-pos
0024F4  3               ;----------------------------------------------------
0024F4  3               
0024F4  3               checkx:
0024F4  3  A5 rr        	lda dispy		; y position.
0024F6  3  C9 18        	cmp #24			; off screen?
0024F8  3  B0 01        	bcs :+
0024FA  3  60           	rts			; no, it's okay.
0024FB  3               :
0024FB  3  68           	pla			; remove return address from stack.
0024FC  3  85 66        	sta z80_l
0024FE  3  68           	pla
0024FF  3  85 67        	sta z80_h
002501  3  60           	rts
002502  3               
002502  3               ;-----------------------------------------------
002502  3               ; Displays the current high score.
002502  3               ;-----------------------------------------------
002502  3               
002502  3               dhisc:
002502  3  A9 E6        	lda #<hiscor 		; high score text.
002504  3  8D 39 25     	sta dscor3+1
002507  3  8D 54 25     	sta bscor3+1
00250A  3  A9 24        	lda #>hiscor
00250C  3  8D 3A 25     	sta dscor3+2
00250F  3  8D 55 25     	sta bscor3+2
002512  3  4C 25 25     	jmp dscor1		; check in printable range then show 6 digits.
002515  3               
002515  3               ;------------------------------------------------------
002515  3               ; Displays the current score.
002515  3               ;------------------------------------------------------
002515  3               
002515  3               ;.repeat 322
002515  3               ;  .byte 0
002515  3               ;.endrep
002515  3               
002515  3               dscor:
002515  3  A9 E0        	lda #<score		; score text.
002517  3  8D 39 25     	sta dscor3+1
00251A  3  8D 54 25     	sta bscor3+1
00251D  3  A9 24        	lda #>score
00251F  3  8D 3A 25     	sta dscor3+2
002522  3  8D 55 25     	sta bscor3+2
002525  3               dscor1:
002525  3  8C 50 25     	sty tmpscr
002528  3  20 A6 2C     	jsr preprt		; set up font and print position.
00252B  3  20 F4 24     	jsr checkx		; make sure we're in a printable range.
00252E  3               
00252E  3               ;	lda #6			; digits to display.
00252E  3               ;	sta z80_b
00252E  3  A5 rr        	lda prtmod		; get print mode.
002530  3  F0 03        	beq :+			; standard size text?
002532  3  4C 51 25     	jmp bscor0		; no, show double-height.
002535  3               :
002535  3               dscor0:
002535  3               ;	ldy #0
002535  3               ;	lda (z80_hl),y 		; fetch character.
002535  3  AC 50 25     	ldy tmpscr
002538  3               dscor3:
002538  3  B9 E0 24     	lda score,y
00253B  3  20 88 26     	jsr pchar 		; display character.
00253E  3  E6 rr        	inc dispx		; move along x coordinate
002540  3               
002540  3               ;	inc z80_l		; next score column.
002540  3               ;	bne :+
002540  3               ;	inc z80_h
002540  3               ;:
002540  3  EE 50 25     	inc tmpscr
002543  3  C6 63        	dec z80_b
002545  3  D0 EE        	bne dscor0 		; repeat for all digits.
002547  3               dscor2:
002547  3  A5 rr        	lda dispx 		; set up display coordinates.
002549  3  85 rr        	sta charx
00254B  3  A5 rr        	lda dispy
00254D  3  85 rr        	sta chary
00254F  3  60           	rts
002550  3               
002550  3  00           tmpscr:	.byte 0
002551  3               ;------------------------------------------------------
002551  3               ; Displays the current score in double-height characters.
002551  3               ;
002551  3               ; Input:
002551  3               ;  B  = digit number
002551  3               ;  HL = score string
002551  3               ;------------------------------------------------------
002551  3               
002551  3               bscor0:
002551  3               ;	ldy #0
002551  3               
002551  3               ;	lda (z80_hl),y 		; fetch character.
002551  3  A4 rr        	ldy tmp
002553  3               bscor3:
002553  3  B9 E0 24     	lda score,y
002556  3  20 2D 2C     	jsr bchar 		; display big char.
002559  3               
002559  3               ;	inc z80_l 		; next score column.
002559  3               ;	bne :+
002559  3               ;	inc z80_h
002559  3               ;:
002559  3  E6 rr        	inc tmp
00255B  3  C6 63        	dec z80_b
00255D  3  F0 03        	beq :+
00255F  3  4C 51 25     	jmp bscor0 		; repeat for all digits.
002562  3               :
002562  3  4C 47 25     	jmp dscor2 		; tidy up line and column variables.
002565  3               
002565  3               ;-----------------------------------------------------
002565  3               ; Adds number in the hl pair to the score.
002565  3               ;-----------------------------------------------------
002565  3               
002565  3               addsc:
002565  3  A9 E1        	lda #<(score+1) 	; ten thousands column.
002567  3  85 64        	sta z80_e
002569  3  A9 24        	lda #>(score+1)
00256B  3  85 65        	sta z80_d
00256D  3  A9 10        	lda #<10000		; amount to add each time.
00256F  3  85 62        	sta z80_c
002571  3  A9 27        	lda #>10000
002573  3  85 63        	sta z80_b
002575  3  20 B9 25     	jsr incsc		; add to score.
002578  3               
002578  3  E6 64        	inc z80_e		; thousands column.
00257A  3  D0 02        	bne :+
00257C  3  E6 65        	inc z80_d
00257E  3               :
00257E  3  A9 E8        	lda #<1000		; amount to add each time.
002580  3  85 62        	sta z80_c
002582  3  A9 03        	lda #>1000
002584  3  85 63        	sta z80_b
002586  3  20 B9 25     	jsr incsc 		; add to score.
002589  3               
002589  3  E6 64        	inc z80_e		; hundreds column.
00258B  3  D0 02        	bne :+
00258D  3  E6 65        	inc z80_d
00258F  3               :
00258F  3  A9 64        	lda #<100		; amount to add each time.
002591  3  85 62        	sta z80_c
002593  3  A9 00        	lda #>100
002595  3  85 63        	sta z80_b
002597  3  20 B9 25     	jsr incsc		; add to score.
00259A  3               
00259A  3  E6 64        	inc z80_e 		; tens column.
00259C  3  D0 02        	bne :+
00259E  3  E6 65        	inc z80_d
0025A0  3               :
0025A0  3  A9 0A        	lda #<10		; amount to add each time.
0025A2  3  85 62        	sta z80_c
0025A4  3  A9 00        	lda #>10
0025A6  3  85 63        	sta z80_b
0025A8  3  20 B9 25     	jsr incsc 		; add to score.
0025AB  3               
0025AB  3  E6 64        	inc z80_e		; units column.
0025AD  3  D0 02        	bne :+
0025AF  3  E6 65        	inc z80_d
0025B1  3               :
0025B1  3  A9 01        	lda #<1			; units.
0025B3  3  85 62        	sta z80_c
0025B5  3  A9 00        	lda #>1
0025B7  3  85 63        	sta z80_b
0025B9  3               incsc:
0025B9  3  A5 67        	lda z80_h		; store amount to add.
0025BB  3  48           	pha
0025BC  3  A5 66        	lda z80_l
0025BE  3  48           	pha
0025BF  3               
0025BF  3  38           	sec			; subtract from amount to add.
0025C0  3  A5 66        	lda z80_l
0025C2  3  E5 62        	sbc z80_c
0025C4  3  85 66        	sta z80_l
0025C6  3  A5 67        	lda z80_h
0025C8  3  E5 63        	sbc z80_b
0025CA  3  85 67        	sta z80_h
0025CC  3  90 14        	bcc incsc0		; too much, restore value.
0025CE  3               
0025CE  3  68           	pla			; delete the previous amount from the stack.
0025CF  3  68           	pla
0025D0  3               
0025D0  3  A5 65        	lda z80_d 		; store column position.
0025D2  3  48           	pha
0025D3  3  A5 64        	lda z80_e
0025D5  3  48           	pha
0025D6  3  20 E9 25     	jsr incsc2		; do the increment.
0025D9  3               
0025D9  3  68           	pla			; restore column.
0025DA  3  85 64        	sta z80_e
0025DC  3  68           	pla
0025DD  3  85 65        	sta z80_d
0025DF  3  4C B9 25     	jmp incsc		; repeat until all added.
0025E2  3               
0025E2  3               incsc0:
0025E2  3  68           	pla			; restore previous value.
0025E3  3  85 66        	sta z80_l
0025E5  3  68           	pla
0025E6  3  85 67        	sta z80_h
0025E8  3  60           	rts
0025E9  3               incsc2:
0025E9  3  A0 00        	ldy #0
0025EB  3  B1 64        	lda (z80_de),y 		; get amount.
0025ED  3  18           	clc
0025EE  3  69 01        	adc #1			; add one to column.
0025F0  3  91 64        	sta (z80_de),y		; write new column total.
0025F2  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
0025F4  3  B0 01        	bcs :+
0025F6  3  60           	rts			; no, carry on.
0025F7  3               :
0025F7  3  A9 30        	lda #'0'		; make it zero.
0025F9  3  91 64        	sta (z80_de),y		; write new column total.
0025FB  3  C6 64        	dec z80_e		; back one column.
0025FD  3  D0 02        	bne :+
0025FF  3  C6 65        	dec z80_d
002601  3               :
002601  3  4C E9 25     	jmp incsc2
002604  3               
002604  3               ;------------------------------------
002604  3               ; Add bonus to score and reset bonus
002604  3               ;------------------------------------
002604  3               
002604  3               addbo:
002604  3  A2 05        	ldx #5			; last digit.
002606  3  18           	clc
002607  3               addbo0:
002607  3  BD E0 24     	lda score,x		; get score.
00260A  3  7D EC 24     	adc bonus,x		; add bonus.
00260D  3  38           	sec			; 0 to 18.
00260E  3  E9 30        	sbc #48
002610  3  48           	pha
002611  3  A9 30        	lda #'0'
002613  3  9D EC 24     	sta bonus,x
002616  3  68           	pla
002617  3  C9 3A        	cmp #58
002619  3  90 03        	bcc addbo1
00261B  3  38           	sec
00261C  3  E9 0A        	sbc #10
00261E  3               addbo1:
00261E  3  9D E0 24     	sta score,x		; zeroise bonus.
002621  3  CA           	dex			; next digit.
002622  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002624  3  60           	rts
002625  3               
002625  3               ;------------------------------------
002625  3               ; Swap score and bonus.
002625  3               ;------------------------------------
002625  3               
002625  3               swpsb:
002625  3  A2 05        	ldx #5			; digits to add.
002627  3               swpsb0:
002627  3  BD E0 24     	lda score,x 		; get score digits.
00262A  3  48           	pha			; save digit
00262B  3  BD EC 24     	lda bonus,x 		; get bonus digits.
00262E  3  9D E0 24     	sta score,x		; switch score-bonus
002631  3  68           	pla
002632  3  9D EC 24     	sta bonus,x
002635  3  CA           	dex 			; repeat for all 6 digits.
002636  3  10 EF        	bpl swpsb0
002638  3  60           	rts
002639  3               
002639  3               ;----------------------------------------------------
002639  3               ; Get print address.
002639  3               ;----------------------------------------------------
002639  3               
002639  3               gprad:
002639  3  A5 rr        	lda dispx		; get x
00263B  3  85 rr        	sta scraddr		; store lb address
00263D  3               
00263D  3  2A           	rol a
00263E  3  26 rr        	rol tmp
002640  3  2A           	rol a
002641  3  26 rr        	rol tmp
002643  3  2A           	rol a
002644  3  26 rr        	rol tmp
002646  3  A5 rr        	lda tmp
002648  3  29 07        	and #7
00264A  3  85 rr        	sta tmp
00264C  3  A5 rr        	lda prtmod
00264E  3  F0 02        	beq :+
002650  3  06 rr        	asl tmp
002652  3               :
002652  3  A5 rr        	lda tmp
002654  3  18           	clc
002655  3  65 rr        	adc dispy		; get y
002657  3  69 E4        	adc #>ScreenAddr		; add $80
002659  3  85 rr        	sta scraddr+1		; store hb address
00265B  3  60           	rts
00265C  3               
00265C  3               ;--------------------------------------------------------------
00265C  3               ; Get property buffer address of char at (dispx, dispy) in hl.
00265C  3               ;
00265C  3               ; Output:
00265C  3               ;  bufaddr = MAP + dispy*32 + dispx
00265C  3               ;--------------------------------------------------------------
00265C  3               
00265C  3               pradd:
00265C  3  A5 rr        	lda dispy 		; y coordinate.
00265E  3  85 rr        	sta bufaddr
002660  3  A9 00        	lda #0
002662  3  85 rr        	sta bufaddr+1
002664  3  06 rr        	asl bufaddr  		; multiply char by 32
002666  3  26 rr        	rol bufaddr+1
002668  3  06 rr        	asl bufaddr
00266A  3  26 rr        	rol bufaddr+1
00266C  3  06 rr        	asl bufaddr
00266E  3  26 rr        	rol bufaddr+1
002670  3  06 rr        	asl bufaddr
002672  3  26 rr        	rol bufaddr+1
002674  3  06 rr        	asl bufaddr
002676  3  26 rr        	rol bufaddr+1
002678  3  18           	clc			; add address of MAP graphics.
002679  3  A5 rr        	lda bufaddr
00267B  3  65 rr        	adc dispx
00267D  3  69 00        	adc #<MAP
00267F  3  85 rr        	sta bufaddr
002681  3  A5 rr        	lda bufaddr+1
002683  3  69 DD        	adc #>MAP
002685  3  85 rr        	sta bufaddr+1
002687  3  60           	rts
002688  3               
002688  3               ;----------------------------------------------------
002688  3               ; Display character in A at dispx,dispy.
002688  3               ;
002688  3               ; Input:
002688  3               ;  A 	   = character to print
002688  3               ;----------------------------------------------------
002688  3               
002688  3               pchar:
002688  3  85 rr        	sta fntaddr
00268A  3  A9 00        	lda #0
00268C  3  85 rr        	sta fntaddr+1
00268E  3  06 rr        	asl fntaddr  		; multiply char by 8.
002690  3  26 rr        	rol fntaddr+1
002692  3  06 rr        	asl fntaddr
002694  3  26 rr        	rol fntaddr+1
002696  3  06 rr        	asl fntaddr
002698  3  26 rr        	rol fntaddr+1
00269A  3               
00269A  3  A5 rr        	lda fntaddr
00269C  3  18           	clc
00269D  3  69 1D        	adc #<(FONT-256)
00269F  3  85 rr        	sta fntaddr		; that's the low byte.
0026A1  3  A5 rr        	lda fntaddr+1
0026A3  3  69 38        	adc #>(FONT-256)
0026A5  3  85 rr        	sta fntaddr+1		; add displacement.
0026A7  3               pchark:
0026A7  3  20 39 26     	jsr gprad		; get screen address.
0026AA  3  A2 07        	ldx #7			; lines to write.
0026AC  3               pchar0:
0026AC  3  A0 00        	ldy #0
0026AE  3  B1 rr        	lda (fntaddr),y 	; get image byte.
0026B0  3  BC BF 26     	ldy scrtab,x		; Get rowoffset
0026B3  3               .if iflag
0026B3  3               	eor #$ff
0026B3  3               .endif
0026B3  3  91 rr        	sta (scraddr),y 	; copy to screen.
0026B5  3  E6 rr        	inc fntaddr		; next image byte.
0026B7  3  D0 02        	bne :+
0026B9  3  E6 rr        	inc fntaddr+1
0026BB  3               :
0026BB  3  CA           	dex			; next screen row down.
0026BC  3  10 EE        	bpl pchar0		; repeat.
0026BE  3  60           	rts
0026BF  3               
0026BF  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
0026C3  3  60 40 20 00  
0026C7  3               
0026C7  3               ;----------------------------------------------
0026C7  3               
0026C7  3               ; Print attributes, properties and pixels.
0026C7  3               ;
0026C7  3               ; Input:
0026C7  3               ;  A	= tile number
0026C7  3               ;----------------------------------------------
0026C7  3               
0026C7  3               ;.repeat 294
0026C7  3               ;  .byte 0
0026C7  3               ;.endrep
0026C7  3               
0026C7  3               pbpattr:			; entry PUTBLOCK command
0026C7  3  A4 rr        	ldy charx
0026C9  3  84 rr        	sty dispx
0026CB  3  A4 rr        	ldy chary
0026CD  3  84 rr        	sty dispy
0026CF  3               pattr:
0026CF  3               .if aflag
0026CF  3               	pha
0026CF  3               	jsr wbloc		; save blockinfo
0026CF  3               	pla
0026CF  3               .endif
0026CF  3               
0026CF  3               pattr2:
0026CF  3  85 63        	sta z80_b		; store cell in b register for now.
0026D1  3  AA           	tax
0026D2  3  BD 61 38     	lda bprop,x 		; block properties.
0026D5  3  85 62        	sta z80_c
0026D7  3  C9 08        	cmp #COLECT
0026D9  3  D0 05        	bne :+
0026DB  3  A5 63        	lda z80_b
0026DD  3  8D EE 26     	sta colpatt
0026E0  3               :
0026E0  3  20 5C 26     	jsr pradd 		; get property buffer address.
0026E3  3  A5 62        	lda z80_c
0026E5  3  A0 00        	ldy #0
0026E7  3  91 rr        	sta (bufaddr),y 	; write property.
0026E9  3  A5 63        	lda z80_b 		; restore cell.
0026EB  3  4C EF 26     	jmp panp
0026EE  3               ; Print attributes, no properties.
0026EE  3               
0026EE  3               ;.repeat 263
0026EE  3               ; .byte 0
0026EE  3               ;.endrep
0026EE  3               
0026EE  3  00           colpatt:	.byte 0
0026EF  3               
0026EF  3               panp:
0026EF  3  85 64        	sta z80_e		; displacement in e.
0026F1  3  A9 00        	lda #0
0026F3  3  85 65        	sta z80_d		; no high byte.
0026F5  3  06 64        	asl z80_e  		; multiply char by 8.
0026F7  3  26 65        	rol z80_d
0026F9  3  06 64        	asl z80_e
0026FB  3  26 65        	rol z80_d
0026FD  3  06 64        	asl z80_e
0026FF  3  26 65        	rol z80_d
002701  3  18           	clc
002702  3  A5 64        	lda z80_e
002704  3  69 59        	adc #<chgfx 		; address of graphics.
002706  3  85 rr        	sta tileaddr
002708  3  A5 65        	lda z80_d
00270A  3  69 38        	adc #>chgfx
00270C  3  85 rr        	sta tileaddr+1
00270E  3  20 39 26     	jsr gprad 		; get screen address.
002711  3  A2 07        	ldx #7			; number of pixel rows to write.
002713  3               panp0:
002713  3  A0 00        	ldy #0
002715  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002717  3               .if iflag
002717  3               	eor #$ff		; Invert
002717  3               .endif
002717  3  BC BF 26     	ldy scrtab,x
00271A  3  91 rr        	sta (scraddr),y 	; copy to screen.
00271C  3  E6 rr        	inc tileaddr 		; next image byte.
00271E  3  D0 02        	bne :+
002720  3  E6 rr        	inc tileaddr+1
002722  3               :
002722  3  CA           	dex	 		; repeat for 8 pixel rows.
002723  3  10 EE        	bpl panp0
002725  3  E6 rr        	inc dispx 		; move along one.
002727  3  E6 rr        	inc charx
002729  3  60           	rts
00272A  3               
00272A  3               ;----------------------------------------------
00272A  3               ; Write block
00272A  3               ;----------------------------------------------
00272A  3               
00272A  3               .if aflag
00272A  3               wbloc:
00272A  3               	ldy #3
00272A  3               	sta (pbptr),y		; store block number
00272A  3               	dey
00272A  3               	lda dispx
00272A  3               	sta (pbptr),y		; write x position of block.
00272A  3               	dey
00272A  3               	lda dispy
00272A  3               	sta (pbptr),y		; write y position of block.
00272A  3               	dey
00272A  3               	lda scno
00272A  3               	sta (pbptr),y		; write screen.
00272A  3               	clc			; point to next free location
00272A  3               	lda pbptr
00272A  3               	adc #4
00272A  3               	sta pbptr
00272A  3               	bcc :+
00272A  3               	inc pbptr+1
00272A  3               :
00272A  3               	rts
00272A  3               .endif
00272A  3               
00272A  3               ;----------------------------------------------
00272A  3               ; Print character pixels, no more.
00272A  3               ;
00272A  3               ; Input:
00272A  3               ;  A	= character to print
00272A  3               ;----------------------------------------------
00272A  3               
00272A  3               pchr:
00272A  3  20 88 26     	jsr pchar 		; show character in accumulator.
00272D  3  E6 rr        	inc dispx		; move along one.
00272F  3  60           	rts
002730  3               
002730  3               ;----------------------------------------------------
002730  3               ; Shifter sprite routine for objects.
002730  3               ;----------------------------------------------------
002730  3               
002730  3               .if oflag
002730  3               sprit7:
002730  3  A5 63        	lda z80_b
002732  3  F0 0F        	beq sprit0
002734  3  85 61        	sta z80_a
002736  3               sprit3:
002736  3  4E C4 27     	lsr spr			; shift into position.
002739  3  6E C5 27     	ror spr+1
00273C  3  6E C6 27     	ror spr+2
00273F  3  C6 61        	dec z80_a		; one less iteration.
002741  3  D0 F3        	bne sprit3
002743  3               sprit0:
002743  3  60           	rts 			; now apply to screen.
002744  3               
002744  3               ;----------------------------------------------------
002744  3               ; Draw sprite
002744  3               ;----------------------------------------------------
002744  3               
002744  3               sprite:
002744  3  86 rr        	stx xtmp		; Save X-reg
002746  3  20 E1 2E     	jsr scadd 		; get screen address in scraddr.
002749  3               
002749  3  A5 rr        	lda dispx 		; x position.
00274B  3  29 07        	and #7 			; position straddling cells.
00274D  3  85 63        	sta z80_b		; store in b register.
00274F  3               
00274F  3  A5 66        	lda z80_l		; store sprite graphic address.
002751  3  8D 64 27     	sta sprit1+1
002754  3  8D 6B 27     	sta sprit2+1
002757  3  A5 67        	lda z80_h
002759  3  8D 65 27     	sta sprit1+2
00275C  3  8D 6C 27     	sta sprit2+2
00275F  3               
00275F  3  A2 00        	ldx #0			; pixel height.
002761  3  A0 00        	ldy #0
002763  3               sprit1:
002763  3  BD F7 38     	lda objdta,x		; fetch first byte.
002766  3  8D C4 27     	sta spr
002769  3  E8           	inx
00276A  3               sprit2:
00276A  3  BD F7 38     	lda objdta,x
00276D  3  8D C5 27     	sta spr+1
002770  3               
002770  3  A9 00        	lda #0
002772  3  8D C6 27     	sta spr+2
002775  3  20 30 27     	jsr sprit7		; shift sprite
002778  3               
002778  3  CA           	dex
002779  3  AD C4 27     	lda spr			; fetch graphic.
00277C  3  BC A4 27     	ldy spritetab,x
00277F  3  51 rr        	eor (scraddr),y		; merge with screen image.
002781  3  91 rr        	sta (scraddr),y		; write to screen.
002783  3  E8           	inx			; next screen byte.
002784  3               
002784  3  AD C5 27     	lda spr+1		; fetch graphic.
002787  3  BC A4 27     	ldy spritetab,x
00278A  3  51 rr        	eor (scraddr),y		; merge with screen image.
00278C  3  91 rr        	sta (scraddr),y		; write to screen.
00278E  3  C8           	iny
00278F  3               
00278F  3  AD C6 27     	lda spr+2		; fetch graphic.
002792  3  51 rr        	eor (scraddr),y		; merge with screen image.
002794  3  91 rr        	sta (scraddr),y		; write to screen.
002796  3               
002796  3  E8           	inx			; next source byte.
002797  3  E0 10        	cpx #16
002799  3  D0 02        	bne :+
00279B  3  E6 rr        	inc scraddr+1
00279D  3               :
00279D  3  E0 20        	cpx #32
00279F  3  D0 C2        	bne sprit1		; repeat
0027A1  3               
0027A1  3  A6 rr        	ldx xtmp		; retreive X-reg
0027A3  3  60           	rts
0027A4  3               
0027A4  3               spritetab:
0027A4  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0027A8  3  40 41 60 61  
0027AC  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0027B0  3  C0 C1 E0 E1  
0027B4  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0027B8  3  40 41 60 61  
0027BC  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0027C0  3  C0 C1 E0 E1  
0027C4  3               
0027C4  3  00 00 00     spr:	.byte 0,0,0
0027C7  3               
0027C7  3               ;xtmp:	.byte 0
0027C7  3               .endif
0027C7  3               
0027C7  3               ;-----------------------------------------------------------
0027C7  3               ; Get room address.
0027C7  3               ;-----------------------------------------------------------
0027C7  3               
0027C7  3               ;.repeat 273
0027C7  3               ;  .byte 0
0027C7  3               ;.endrep
0027C7  3               
0027C7  3               groom:
0027C7  3  A6 rr        	ldx scno 		; screen number.
0027C9  3  A0 00        	ldy #0
0027CB  3               groomx:
0027CB  3  A9 E6        	lda #<scdat 		; pointer to screens.
0027CD  3  85 66        	sta z80_l
0027CF  3  A9 38        	lda #>scdat
0027D1  3  85 67        	sta z80_h
0027D3  3               groom1:
0027D3  3  E0 00        	cpx #0			; is it the first one?
0027D5  3  F0 15        	beq groom0 		; no more screens to skip.
0027D7  3               
0027D7  3  18           	clc
0027D8  3  A5 66        	lda z80_l
0027DA  3  79 E6 38     	adc scdat,y 		; low byte of screen size.
0027DD  3  85 66        	sta z80_l
0027DF  3  C8           	iny			; point to high byte.
0027E0  3  A5 67        	lda z80_h
0027E2  3  79 E6 38     	adc scdat,y 		; high byte of screen size.
0027E5  3  85 67        	sta z80_h
0027E7  3  C8           	iny			; next address.
0027E8  3               
0027E8  3  CA           	dex 			; one less iteration.
0027E9  3  4C D3 27     	jmp groom1 		; loop until we reach the end.
0027EC  3               groom0:
0027EC  3  AD F1 38     	lda numsc 		; add displacement.
0027EF  3  0A           	asl a
0027F0  3  18           	clc			; add double displacement to address.
0027F1  3  65 66        	adc z80_l
0027F3  3  85 66        	sta z80_l
0027F5  3  A5 67        	lda z80_h
0027F7  3  69 00        	adc #0
0027F9  3  85 67        	sta z80_h
0027FB  3  60           	rts
0027FC  3               
0027FC  3               ;-----------------------------------------------------------
0027FC  3               ; Draw present room.
0027FC  3               ;-----------------------------------------------------------
0027FC  3               
0027FC  3               droom:
0027FC  3  AD 26 20     	lda wintop 		; window top.
0027FF  3  85 rr        	sta dispy		; set cursor y position.
002801  3               droom2:
002801  3  20 C7 27     	jsr groom 		; get address of current room.
002804  3  A9 00        	lda #0	 		; zero in accumulator.
002806  3  85 rr        	sta comcnt 		; reset compression counter.
002808  3  AD 28 20     	lda winhgt 		; height of window.
00280B  3  85 rr        	sta rrow		; set row counter
00280D  3               droom0:
00280D  3  AD 27 20     	lda winlft 		; window left edge.
002810  3  85 rr        	sta dispx 		; set cursor x position.
002812  3  AD 29 20     	lda winwid 		; width of window.
002815  3  85 rr        	sta rcol		; set column counter
002817  3               droom1:
002817  3  20 28 28     	jsr flbyt 		; decompress next byte on the fly.
00281A  3  20 CF 26     	jsr pattr2 		; show attributes and block.
00281D  3  C6 rr        	dec rcol		; one less column.
00281F  3  D0 F6        	bne droom1 		; repeat for entire line.
002821  3  E6 rr        	inc dispy		; move down one line.
002823  3  C6 rr        	dec rrow 		; one less row.
002825  3  D0 E6        	bne droom0 		; repeat for all rows.
002827  3  60           	rts
002828  3               
002828  3               ;rcol:	.byte 0
002828  3               ;rrow:	.byte 0
002828  3               
002828  3               ;----------------------------------------------
002828  3               ; Decompress bytes on-the-fly.
002828  3               ;----------------------------------------------
002828  3               
002828  3               flbyt:
002828  3  A5 rr        	lda comcnt 		; compression counter.
00282A  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
00282C  3               
00282C  3  A0 00        	ldy #0
00282E  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002830  3  E6 66        	inc z80_l 		; point to next cell.
002832  3  D0 02        	bne :+
002834  3  E6 67        	inc z80_h
002836  3               :
002836  3  C9 FF        	cmp #255 		; is this byte a control code?
002838  3  F0 01        	beq :+
00283A  3  60           	rts 			; no, this byte is uncompressed.
00283B  3               :
00283B  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
00283D  3  85 rr        	sta combyt 		; set up the type.
00283F  3  E6 66        	inc z80_l 		; point to quantity.
002841  3  D0 02        	bne :+
002843  3  E6 67        	inc z80_h
002845  3               :
002845  3  B1 66        	lda (z80_hl),y 		; get quantity.
002847  3  E6 66        	inc z80_l 		; point to next byte.
002849  3  D0 02        	bne :+
00284B  3  E6 67        	inc z80_h
00284D  3               :
00284D  3               flbyt1:
00284D  3  85 rr        	sta comcnt 		; store new quantity.
00284F  3  C6 rr        	dec comcnt		; one less.
002851  3  A5 rr        	lda combyt 		; byte to expand.
002853  3  60           	rts
002854  3               
002854  3               ;combyt:	.byte 0			; byte type compressed.
002854  3               ;comcnt:	.byte 0			; compression counter.
002854  3               
002854  3               ;------------------------------------------
002854  3               ; Ladder down check.
002854  3               ;
002854  3               ; Input:
002854  3               ;  IX = sprite pointer
002854  3               ;------------------------------------------
002854  3               
002854  3               .if lflag
002854  3               laddd:
002854  3               	ldy #9
002854  3               	lda (z80_ix),y		; x coordinate.
002854  3               	sta dispx
002854  3               
002854  3               	ldy #8
002854  3               	lda (z80_ix),y		; y coordinate.
002854  3               	and #254		; make it even.
002854  3               	sta (z80_ix),y 		; reset it.
002854  3               	clc 			; look down 16 pixels.
002854  3               numsp5:
002854  3               	adc #SPR_HGT
002854  3               	sta dispy		; coords in dispx,dispy.
002854  3               	jmp laddv
002854  3               
002854  3               ;------------------------------------------
002854  3               ; Ladder up check.
002854  3               ;
002854  3               ; Input:
002854  3               ;  IX = sprite pointer
002854  3               ;
002854  3               ; Output:
002854  3               ;  A  = 0 is ok, A <>0 is not ok
002854  3               ;------------------------------------------
002854  3               
002854  3               laddu:
002854  3               	ldy #9
002854  3               	lda (z80_ix),y		; x coordinate.
002854  3               	sta dispx
002854  3               
002854  3               	ldy #8
002854  3               	lda (z80_ix),y		; y coordinate.
002854  3               	and #254 		; make it even.
002854  3               	sta (z80_ix),y		; reset it.
002854  3               	clc 			; look 2 pixels above feet.
002854  3               numsp6:
002854  3               	adc #SPR_HGT-2
002854  3               	sta dispy		; coords in dispx,dispy.
002854  3               laddv:
002854  3               	jsr tstbl 		; get map address.
002854  3               	jsr ldchk 		; standard ladder check.
002854  3               	beq :+
002854  3               	rts 			; no way through.
002854  3               :
002854  3               	inc bufaddr 		; look right one cell.
002854  3               	bne :+
002854  3               	inc bufaddr+1
002854  3               :
002854  3               	jsr ldchk 		; do the check.
002854  3               	beq :+
002854  3               	rts 			; impassable.
002854  3               :
002854  3               	lda dispx 		; y coordinate.
002854  3               	and #7 			; position straddling block cells.
002854  3               	bne :+
002854  3               	rts 			; no more checks needed.
002854  3               :
002854  3               	inc bufaddr 		; look to third cell.
002854  3               	bne :+
002854  3               	inc bufaddr+1
002854  3               :
002854  3               	jsr ldchk 		; do the check.
002854  3               	rts  			; return with zero flag set accordingly.
002854  3               .endif
002854  3               
002854  3               ;---------------------------------------------------------
002854  3               ; Can go up check.
002854  3               ;
002854  3               ; Input:
002854  3               ;  IX = sprite pointer
002854  3               ;
002854  3               ; Output:
002854  3               ;  A  = 0 is ok, A <>0 is not ok
002854  3               ;---------------------------------------------------------
002854  3               
002854  3               cangu:
002854  3  A0 09        	ldy #9
002856  3  B1 68        	lda (z80_ix),y		; x coordinate.
002858  3  85 rr        	sta dispx
00285A  3  A0 08        	ldy #8
00285C  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00285E  3  38           	sec
00285F  3  E9 02        	sbc #2
002861  3  85 rr        	sta dispy		; coords in dispx,dispy.
002863  3  20 FE 2A     	jsr tstbl 		; get map address.
002866  3  20 16 2A     	jsr lrchk 		; standard left/right check.
002869  3  F0 01        	beq :+
00286B  3  60           	rts			; no way through.
00286C  3               :
00286C  3  E6 rr        	inc bufaddr		; look right one cell.
00286E  3  D0 02        	bne :+
002870  3  E6 rr        	inc bufaddr+1
002872  3               :
002872  3  20 16 2A     	jsr lrchk 		; do the check.
002875  3  F0 01        	beq :+
002877  3  60           	rts			; impassable.
002878  3               :
002878  3  A5 rr        	lda dispx		; x coordinate.
00287A  3  29 07        	and #7			; position straddling block cells.
00287C  3  D0 01        	bne :+
00287E  3  60           	rts			; no more checks needed.
00287F  3               :
00287F  3  E6 rr        	inc bufaddr		; look to third cell.
002881  3  D0 02        	bne :+
002883  3  E6 rr        	inc bufaddr+1
002885  3               :
002885  3  20 16 2A     	jsr lrchk		; do the check.
002888  3  60           	rts 			; return with zero flag set accordingly.
002889  3               
002889  3               ;---------------------------------------------------------
002889  3               ; Can go down check.
002889  3               ;
002889  3               ; Input:
002889  3               ;  IX = sprite pointer
002889  3               ;
002889  3               ; Output:
002889  3               ;  A  = 0 is ok, A <>0 is not ok
002889  3               ;---------------------------------------------------------
002889  3               
002889  3               ;.repeat 264
002889  3               ;  .byte 0
002889  3               ;.endrep
002889  3               
002889  3               cangd:
002889  3  A0 09        	ldy #9
00288B  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00288D  3  85 rr        	sta dispx
00288F  3  A0 08        	ldy #8
002891  3  B1 68        	lda (z80_ix),y		; y coordinate.
002893  3  18           	clc
002894  3               numsp3:
002894  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
002896  3  85 rr        	sta dispy		; coords in dispx,dispy.
002898  3  20 FE 2A     	jsr tstbl 		; get map address.
00289B  3  20 2B 2A     	jsr plchk 		; block, platform check.
00289E  3  F0 01        	beq :+
0028A0  3  60           	rts			; no way through.
0028A1  3               :
0028A1  3  E6 rr        	inc bufaddr		; look right one cell.
0028A3  3  D0 02        	bne :+
0028A5  3  E6 rr        	inc bufaddr+1
0028A7  3               :
0028A7  3  20 2B 2A     	jsr plchk		; block, platform check.
0028AA  3  F0 01        	beq :+
0028AC  3  60           	rts			; impassable.
0028AD  3               :
0028AD  3  A5 rr        	lda dispx		; x coordinate.
0028AF  3  29 07        	and #7			; position straddling block cells.
0028B1  3  D0 01        	bne :+
0028B3  3  60           	rts			; no more checks needed.
0028B4  3               :
0028B4  3  E6 rr        	inc bufaddr		; look to third cell.
0028B6  3  D0 02        	bne :+
0028B8  3  E6 rr        	inc bufaddr+1
0028BA  3               :
0028BA  3  20 2B 2A     	jsr plchk		; block, platform check.
0028BD  3  60           	rts			; return with zero flag set accordingly.
0028BE  3               
0028BE  3               ;---------------------------------------------------------
0028BE  3               ; Can go left check.
0028BE  3               ;
0028BE  3               ; Input:
0028BE  3               ;  IX = sprite pointer
0028BE  3               ;
0028BE  3               ; Output:
0028BE  3               ;  A  = 0 is ok, A <>0 is not ok
0028BE  3               ;---------------------------------------------------------
0028BE  3               
0028BE  3               cangl:
0028BE  3  A0 08        	ldy #8
0028C0  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0028C2  3  85 rr        	sta dispy
0028C4  3  A0 09        	ldy #9
0028C6  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0028C8  3  38           	sec
0028C9  3  E9 02        	sbc #2			; look left 2 pixels.
0028CB  3  85 rr        	sta dispx		; coords in dispx,dispy.
0028CD  3  4C EF 29     	jmp cangh		; test if we can go there.
0028D0  3               
0028D0  3               ;---------------------------------------------------------
0028D0  3               ; Can go right check.
0028D0  3               ;
0028D0  3               ; Input:
0028D0  3               ;  IX = sprite pointer
0028D0  3               ;
0028D0  3               ; Output:
0028D0  3               ;  A  = 0 is ok, A <>0 is not ok
0028D0  3               ;---------------------------------------------------------
0028D0  3               
0028D0  3  00 00 00 00  .repeat 272
0028D4  3  00 00 00 00  
0028D8  3  00 00 00 00  
0029E0  3                 .byte 0
0029E0  3               .endrep
0029E0  3               
0029E0  3               cangr:
0029E0  3  A0 08        	ldy #8
0029E2  3  B1 68        	lda (z80_ix),y		; y coordinate.
0029E4  3  85 rr        	sta dispy
0029E6  3  A0 09        	ldy #9
0029E8  3  B1 68        	lda (z80_ix),y		; x coordinate.
0029EA  3  18           	clc
0029EB  3  69 10        	adc #16			; look right 16 pixels.
0029ED  3  85 rr        	sta dispx		; coords in dispx,dispy.
0029EF  3               cangh:
0029EF  3               cangh2:
0029EF  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
0029F1  3  85 63        	sta z80_b
0029F3  3  A5 rr        	lda dispy		; y position.
0029F5  3  29 07        	and #7			; does x straddle cells?
0029F7  3  D0 02        	bne cangh0		; yes, loop counter is good.
0029F9  3  C6 63        	dec z80_b		; one less row to write.
0029FB  3               cangh0:
0029FB  3  20 FE 2A     	jsr tstbl		; get map address.
0029FE  3               cangh1:
0029FE  3  20 16 2A     	jsr lrchk		; standard left/right check.
002A01  3  F0 01        	beq :+
002A03  3  60           	rts			; no way through.
002A04  3               :
002A04  3  48           	pha
002A05  3  18           	clc
002A06  3  A5 rr        	lda bufaddr
002A08  3  69 20        	adc #32			; look down.
002A0A  3  85 rr        	sta bufaddr
002A0C  3  90 02        	bcc :+
002A0E  3  E6 rr        	inc bufaddr+1
002A10  3               :
002A10  3  68           	pla
002A11  3               
002A11  3  C6 63        	dec z80_b
002A13  3  D0 E9        	bne cangh1
002A15  3  60           	rts
002A16  3               
002A16  3               ;-------------------------------------
002A16  3               ; Check left/right movement is okay.
002A16  3               ;
002A16  3               ; Input:
002A16  3               ;  bufaddr = MAP + x/8 + y/8*32
002A16  3               ;
002A16  3               ; Output:
002A16  3               ;  A  = 0 is ok, A <>0 is not ok
002A16  3               ;-------------------------------------
002A16  3               
002A16  3               lrchk:
002A16  3  A0 00        	ldy #0
002A18  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002A1A  3  C9 02        	cmp #WALL 		; is it passable?
002A1C  3  F0 0A        	beq lrchkx		; no.
002A1E  3               
002A1E  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002A20  3  F0 06        	beq lrchkx		; not passable.
002A22  3  A9 00        	lda #0
002A24  3  60           	rts
002A25  3               
002A25  3               ;--------------------------------------------------------------
002A25  3               ; Called by mmenu
002A25  3               ;--------------------------------------------------------------
002A25  3               
002A25  3               always:
002A25  3  A9 FF        	lda #255		; report it as okay.
002A27  3  60           	rts
002A28  3               
002A28  3               lrchkx:
002A28  3  A9 01        	lda #1 			; reset all bits.
002A2A  3  60           	rts
002A2B  3               
002A2B  3               
002A2B  3               ;--------------------------------------------------------------
002A2B  3               ; Check platform or solid item is not in way.
002A2B  3               ;
002A2B  3               ; Input:
002A2B  3               ;  bufaddr = MAP + x/8 + y/8*32
002A2B  3               ;
002A2B  3               ; Output:
002A2B  3               ;  A  = 0 is ok, A <>0 is not ok
002A2B  3               ;--------------------------------------------------------------
002A2B  3               
002A2B  3               plchk:
002A2B  3  A0 00        	ldy #0
002A2D  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002A2F  3  C9 02        	cmp #WALL 		; is it passable?
002A31  3  F0 F5        	beq lrchkx		; no.
002A33  3               .if pflag .or dflag
002A33  3               	cmp #FODDER		; fodder has to be dug.
002A33  3               	beq lrchkx		; not passable.
002A33  3               .endif
002A33  3  C9 01        	cmp #PLATFM		; platform is solid.
002A35  3  F0 03        	beq plchkx		; not passable.
002A37  3               .if lflag
002A37  3               	cmp #LADDER		; is it a ladder?
002A37  3               	beq lrchkx		; on ladder, deny movement.
002A37  3               .endif
002A37  3               plchk0:
002A37  3  A9 00        	lda #0			; report as ok
002A39  3  60           	rts
002A3A  3               plchkx:
002A3A  3  A5 rr        	lda dispy		; x coordinate.
002A3C  3  29 07        	and #7			; position straddling blocks.
002A3E  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002A40  3  4C 37 2A     	jmp plchk0
002A43  3               
002A43  3               ;--------------------------------------------------------------
002A43  3               ; Check ladder is available.
002A43  3               ;
002A43  3               ; Input:
002A43  3               ;  bufaddr = MAP + x/8 + y/8*32
002A43  3               ;
002A43  3               ; Output:
002A43  3               ;  A  = 0 is ok, A <>0 is not ok
002A43  3               ;--------------------------------------------------------------
002A43  3               
002A43  3               .if lflag
002A43  3               ldchk:
002A43  3               	ldy #0
002A43  3               	lda (bufaddr),y 	; fetch cell.
002A43  3               	cmp #LADDER 		; is it a ladder?
002A43  3               	beq :+
002A43  3               	lda #1
002A43  3               	rts  			; return with zero flag set accordingly.
002A43  3               :
002A43  3               	lda #0
002A43  3               	rts
002A43  3               .endif
002A43  3               
002A43  3               ;--------------------------------------------------------------
002A43  3               ; Get collectables.
002A43  3               ;--------------------------------------------------------------
002A43  3               
002A43  3               .if cflag
002A43  3               getcol:
002A43  3                       lda #COLECT             ; collectable blocks.
002A43  3                       sta z80_b
002A43  3                       jsr tded                ; test for collectable blocks.
002A43  3                       cmp z80_b               ; did we find one?
002A43  3                       beq :+
002A43  3                       rts                     ; none were found, job done.
002A43  3               :
002A43  3                       jsr gtblk               ; get block.
002A43  3                       jsr evnt20              ; collected block event.
002A43  3                       jmp getcol              ; repeat until none left.
002A43  3               
002A43  3               ; Get collectable block.
002A43  3               
002A43  3               gtblk:
002A43  3               	ldy #0
002A43  3               	lda (bufaddr),y
002A43  3               	sta z80_a
002A43  3                       lda #0
002A43  3                       sta (bufaddr),y		; make it empty now.
002A43  3               
002A43  3               	lda bufaddr		; set dispx
002A43  3               	and #31
002A43  3               	sta dispx
002A43  3               
002A43  3               	lda bufaddr+1		; Set dispy
002A43  3               	sec
002A43  3               	sbc #>MAP
002A43  3               	sta bufaddr+1
002A43  3               	asl bufaddr
002A43  3               	rol bufaddr+1
002A43  3               	asl bufaddr
002A43  3               	rol bufaddr+1
002A43  3               	asl bufaddr
002A43  3               	rol bufaddr+1
002A43  3               	lda bufaddr+1
002A43  3               	sta dispy
002A43  3               
002A43  3               	lda colpatt		; get blocknr
002A43  3               	sta z80_e		; displacement in e.
002A43  3               	lda #0
002A43  3               	sta z80_d		; no high byte.
002A43  3               	asl z80_e  		; multiply char by 8.
002A43  3               	rol z80_d
002A43  3               	asl z80_e
002A43  3               	rol z80_d
002A43  3               	asl z80_e
002A43  3               	rol z80_d
002A43  3               	clc
002A43  3               	lda z80_e
002A43  3               	adc #<chgfx 		; address of graphics.
002A43  3               	sta tileaddr
002A43  3               	lda z80_d
002A43  3               	adc #>chgfx
002A43  3               	sta tileaddr+1
002A43  3               	jsr gprad 		; get screen address.
002A43  3               	ldx #7			; number of pixel rows to write.
002A43  3               gtblk0:
002A43  3               	ldy #0
002A43  3               	lda (tileaddr),y 	; get image byte.
002A43  3               	ldy scrtab,x
002A43  3               	eor (scraddr),y 	; XOR tile on screen
002A43  3               	sta (scraddr),y 	; copy to screen.
002A43  3               	inc tileaddr 		; next image byte.
002A43  3               	bne :+
002A43  3               	inc tileaddr+1
002A43  3               :
002A43  3               	dex	 		; repeat for 8 pixel rows.
002A43  3               	bpl gtblk0
002A43  3               	rts
002A43  3               .endif
002A43  3               
002A43  3               ;--------------------------------------------------------------
002A43  3               ; Touched deadly block check.
002A43  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002A43  3               ;
002A43  3               ; Input:
002A43  3               ;  IX = sprite address
002A43  3               ;
002A43  3               ; Output:
002A43  3               ;  A  = 0 is ok, A=5 is not ok
002A43  3               ;--------------------------------------------------------------
002A43  3               
002A43  3               tded:
002A43  3  A0 08        	ldy #8
002A45  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002A47  3  85 rr        	sta dispy
002A49  3  C8           	iny
002A4A  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002A4C  3  85 rr        	sta dispx		; coords in dispx,dispy.
002A4E  3  20 FE 2A     	jsr tstbl		; get map address.
002A51  3  48           	pha
002A52  3  A9 1F        	lda #31			; default distance to next line down.
002A54  3  85 64        	sta z80_e
002A56  3  68           	pla
002A57  3  C5 63        	cmp z80_b		; is this the required block?
002A59  3  D0 01        	bne :+
002A5B  3  60           	rts			; yes.
002A5C  3               :
002A5C  3  E6 rr        	inc bufaddr 		; next cell.
002A5E  3  D0 02        	bne :+
002A60  3  E6 rr        	inc bufaddr+1
002A62  3               :
002A62  3  A0 00        	ldy #0
002A64  3  B1 rr        	lda (bufaddr),y		; fetch type.
002A66  3  C5 63        	cmp z80_b 		; is this deadly/custom?
002A68  3  D0 01        	bne :+
002A6A  3  60           	rts			; yes.
002A6B  3               :
002A6B  3  A5 rr        	lda dispx		; horizontal position.
002A6D  3  85 62        	sta z80_c 		; store column in c register.
002A6F  3  29 07        	and #7			; is it straddling cells?
002A71  3  D0 03        	bne :+
002A73  3  4C 87 2A     	jmp tded0		; no.
002A76  3               :
002A76  3  E6 rr        	inc bufaddr 		; last cell.
002A78  3  D0 02        	bne :+
002A7A  3  E6 rr        	inc bufaddr+1
002A7C  3               :
002A7C  3  A0 00        	ldy #0
002A7E  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002A80  3  C5 63        	cmp z80_b		; is this the block?
002A82  3  D0 01        	bne :+
002A84  3  60           	rts			; yes.
002A85  3               :
002A85  3  C6 64        	dec z80_e		; one less cell to next row down.
002A87  3               tded0:
002A87  3  18           	clc 			; point to next row.
002A88  3  A5 rr        	lda bufaddr
002A8A  3  65 64        	adc z80_e
002A8C  3  85 rr        	sta bufaddr
002A8E  3  90 02        	bcc :+
002A90  3  E6 rr        	inc bufaddr+1
002A92  3               :
002A92  3  A0 00        	ldy #0
002A94  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
002A96  3  C5 63        	cmp z80_b		; is this fatal?
002A98  3  D0 01        	bne :+
002A9A  3  60           	rts			; yes.
002A9B  3               :
002A9B  3  E6 rr        	inc bufaddr 		; next cell.
002A9D  3  D0 02        	bne :+
002A9F  3  E6 rr        	inc bufaddr+1
002AA1  3               :
002AA1  3  A0 00        	ldy #0
002AA3  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002AA5  3  C5 63        	cmp z80_b		; is this fatal?
002AA7  3  D0 01        	bne :+
002AA9  3  60           	rts			; yes.
002AAA  3               :
002AAA  3  A5 62        	lda z80_c		; horizontal position.
002AAC  3  29 07        	and #7			; is it straddling cells?
002AAE  3  D0 03        	bne :+
002AB0  3  4C C2 2A     	jmp tded1 		; no.
002AB3  3               :
002AB3  3  E6 rr        	inc bufaddr		; last cell.
002AB5  3  D0 02        	bne :+
002AB7  3  E6 rr        	inc bufaddr+1
002AB9  3               :
002AB9  3  A0 00        	ldy #0
002ABB  3  B1 rr        	lda (bufaddr),y		; fetch type.
002ABD  3  C5 63        	cmp z80_b		; is this fatal?
002ABF  3  D0 01        	bne :+
002AC1  3  60           	rts			; yes.
002AC2  3               :
002AC2  3               tded1:
002AC2  3  A5 rr        	lda dispy		; vertical position.
002AC4  3  29 07        	and #7 			; is it straddling cells?
002AC6  3  D0 01        	bne :+
002AC8  3  60           	rts			; no, job done.
002AC9  3               :
002AC9  3  18           	clc			; point to next row.
002ACA  3  A5 rr        	lda bufaddr
002ACC  3  65 64        	adc z80_e
002ACE  3  85 rr        	sta bufaddr
002AD0  3  90 02        	bcc :+
002AD2  3  E6 rr        	inc bufaddr+1
002AD4  3               :
002AD4  3  A0 00        	ldy #0
002AD6  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
002AD8  3  C5 63        	cmp z80_b		; is this fatal?
002ADA  3  D0 01        	bne :+
002ADC  3  60           	rts			; yes.
002ADD  3               :
002ADD  3  E6 rr        	inc bufaddr		; next cell.
002ADF  3  D0 02        	bne :+
002AE1  3  E6 rr        	inc bufaddr+1
002AE3  3               :
002AE3  3  A0 00        	ldy #0
002AE5  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002AE7  3  C5 63        	cmp z80_b		; is this fatal?
002AE9  3  D0 01        	bne :+
002AEB  3  60           	rts			; yes.
002AEC  3               :
002AEC  3  A5 62        	lda z80_c		; horizontal position.
002AEE  3  29 07        	and #7			; is it straddling cells?
002AF0  3  D0 01        	bne :+
002AF2  3  60           	rts			; no.
002AF3  3               :
002AF3  3  E6 rr        	inc bufaddr		; last cell.
002AF5  3  D0 02        	bne :+
002AF7  3  E6 rr        	inc bufaddr+1
002AF9  3               :
002AF9  3  A0 00        	ldy #0
002AFB  3  B1 rr        	lda (bufaddr),y		; fetch final type.
002AFD  3  60           	rts 			; return with final type in accumulator.
002AFE  3               
002AFE  3               ;---------------------------------------------------
002AFE  3               ; Fetch block type at (dispx, dispy).
002AFE  3               ;
002AFE  3               ; Output:
002AFE  3               ;  A = block type
002AFE  3               ;---------------------------------------------------
002AFE  3               
002AFE  3               tstbl:
002AFE  3  A5 rr        	lda dispy 		; fetch y coord.
002B00  3  4A           	lsr a			; bufaddr = y/8
002B01  3  4A           	lsr a
002B02  3  4A           	lsr a
002B03  3  85 rr        	sta chary
002B05  3               
002B05  3  85 rr        	sta bufaddr
002B07  3  A9 00        	lda #0
002B09  3  85 rr        	sta bufaddr+1
002B0B  3               
002B0B  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
002B0D  3  26 rr        	rol bufaddr+1
002B0F  3  06 rr        	asl bufaddr
002B11  3  26 rr        	rol bufaddr+1
002B13  3  06 rr        	asl bufaddr
002B15  3  26 rr        	rol bufaddr+1
002B17  3  06 rr        	asl bufaddr
002B19  3  26 rr        	rol bufaddr+1
002B1B  3  06 rr        	asl bufaddr
002B1D  3  26 rr        	rol bufaddr+1
002B1F  3               
002B1F  3  A5 rr        	lda dispx		; x/8
002B21  3  4A           	lsr a
002B22  3  4A           	lsr a
002B23  3  4A           	lsr a
002B24  3  85 rr        	sta charx
002B26  3               
002B26  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
002B27  3  65 rr        	adc bufaddr
002B29  3  69 00        	adc #<MAP
002B2B  3  85 rr        	sta bufaddr
002B2D  3  A5 rr        	lda bufaddr+1
002B2F  3  69 DD        	adc #>MAP
002B31  3  85 rr        	sta bufaddr+1
002B33  3               
002B33  3  A0 00        	ldy #0
002B35  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002B37  3  60           	rts
002B38  3               
002B38  3               
002B38  3               ;-------------------------------------------------------------------
002B38  3               ; Jump - if we can.
002B38  3               ; Requires initial speed to be set up in accumulator prior to call.
002B38  3               ;
002B38  3               ; Input:
002B38  3               ;  IX = sprite address
002B38  3               ;-------------------------------------------------------------------
002B38  3               
002B38  3               jump:
002B38  3  A0 0D        	ldy #13
002B3A  3  B1 68        	lda (z80_ix),y		; jump table low.
002B3C  3  A0 0E        	ldy #14
002B3E  3  11 68        	ora (z80_ix),y		; jump table high.
002B40  3  F0 01        	beq :+
002B42  3  60           	rts			; already in the air.
002B43  3               :
002B43  3  A9 3C        	lda #>jtab
002B45  3  A0 0E        	ldy #14
002B47  3  91 68        	sta (z80_ix),y		; set jump high.
002B49  3  A9 1D        	lda #<jtab		; jump table start.
002B4B  3  A0 0D        	ldy #13
002B4D  3  91 68        	sta (z80_ix),y		; set jump low.
002B4F  3  60           	rts
002B50  3               
002B50  3               ; Jump table.
002B50  3               
002B50  3               ;jtab:
002B50  3               ;	.byte 248,250,252
002B50  3               ;	.byte 254,254,255
002B50  3               ;	.byte 255,255,0,0
002B50  3               ;	.byte 0,1,1,1,2,2
002B50  3               ;	.byte 4,6,8,8,8,99
002B50  3               
002B50  3               ;------------------------------------------------
002B50  3               ; Random numbers code.
002B50  3               ; Pseudo-random number generator, 8-bit.
002B50  3               ;
002B50  3               ; Output:
002B50  3               ;  RND = random number
002B50  3               ;------------------------------------------------
002B50  3               
002B50  3               random:
002B50  3  A5 rr        	lda seed
002B52  3  F0 05        	beq doEor
002B54  3  0A           	asl a
002B55  3  F0 04        	beq noEor
002B57  3  90 02        	bcc noEor
002B59  3  49 1D        doEor:	eor #$1d
002B5B  3  85 rr        noEor:	sta seed
002B5D  3  60           	rts
002B5E  3               
002B5E  3  A5 rr        	lda seed		; get last random number.
002B60  3  0A           	asl a
002B61  3  0A           	asl a
002B62  3  18           	clc
002B63  3  65 rr        	adc seed
002B65  3  18           	clc
002B66  3  69 45        	adc #$45
002B68  3  85 rr        	sta seed		; store new seed.
002B6A  3  85 rr        	sta varrnd		; return number in variable.
002B6C  3  60           	rts
002B6D  3               
002B6D  3               ;--------------------------------------------------------
002B6D  3               ; Keys
002B6D  3               ;
002B6D  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002B6D  3               ;             ||||||||
002B6D  3               ;             |||||||+> Right    KEY 0  - X
002B6D  3               ;             ||||||+-> Left     KEY 1  - Z
002B6D  3               ;             |||||+--> Down     KEY 2  - .
002B6D  3               ;             ||||+---> Up       KEY 3  - ;
002B6D  3               ;             |||+----> Fire1    KEY 4  - SPC
002B6D  3               ;             ||+-----> Fire2    KEY 5  - Q
002B6D  3               ;             |+------> Fire3    KEY 6  - P
002B6D  3               ;             +-------> Not used
002B6D  3               ;
002B6D  3               ;                       Option1  KEY 7  - 1
002B6D  3               ;                       Option2  KEY 8  - 2
002B6D  3               ;                       Option3  KEY 9  - 3
002B6D  3               ;                       Option4  KEY 10 - 4
002B6D  3               ;--------------------------------------------------------
002B6D  3               
002B6D  3               ;              X   Z   .   ;  SPC  Q   P
002B6D  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002B6D  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002B6D  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002B71  3  00 04 14     
002B74  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
002B78  3               
002B78  3               ;-------------------------------------------------------
002B78  3               ; Joystick and keyboard reading routines.
002B78  3               ;
002B78  3               ; contrl = 0, Keyboard
002B78  3               ;          1, JoyKeyb
002B78  3               ;          2, JoyMMC
002B78  3               ;-------------------------------------------------------
002B78  3               
002B78  3               joykey:
002B78  3  A5 rr        	lda contrl 		; control flag.
002B7A  3  C9 01        	cmp #1
002B7C  3  D0 03        	bne :+
002B7E  3  4C D6 3C     	jmp joy1 		; read keyboard joystick
002B81  3               :
002B81  3  C9 02        	cmp #2
002B83  3  D0 03        	bne :+
002B85  3  4C 06 3D     	jmp joy2 		; read MMC joystick.
002B88  3               :
002B88  3               ; Keyboard controls.
002B88  3               
002B88  3  A9 00        	lda #0		 	; zero reading.
002B8A  3  85 64        	sta z80_e
002B8C  3               
002B8C  3  A0 06        	ldy #6	 		; address of last key.
002B8E  3               joyke0:
002B8E  3  B9 1E 3C     	lda keys,y 		; get key from table.
002B91  3  20 AD 3C     	jsr ktest		; being pressed?
002B94  3  26 64        	rol z80_e 		; rotate into reading.
002B96  3               
002B96  3  88           	dey		 	; next key.
002B97  3  10 F5        	bpl joyke0 		; repeat for all keys.
002B99  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002B9B  3  85 rr        	sta joyval		; remember value.
002B9D  3  60           	rts
002B9E  3               
002B9E  3               ;---------------------------------------------------------------
002B9E  3               ; Display message.
002B9E  3               ;
002B9E  3               ; Input:
002B9E  3               ;  A = message number
002B9E  3               ;---------------------------------------------------------------
002B9E  3               
002B9E  3               dmsg:
002B9E  3  AA           	tax
002B9F  3  A9 7B        	lda #<msgdat		; pointer to messages.
002BA1  3  85 66        	sta z80_l
002BA3  3  A9 37        	lda #>msgdat
002BA5  3  85 67        	sta z80_h
002BA7  3  20 B9 2C     	jsr getwrd		; get message number.
002BAA  3               dmsg3:
002BAA  3  20 A6 2C     	jsr preprt		; pre-printing stuff.
002BAD  3  20 F4 24     	jsr checkx		; make sure we"re in a printable range.
002BB0  3  A5 rr        	lda prtmod		; print mode.
002BB2  3  D0 47        	bne bmsg1		; no, double-height text.
002BB4  3               dmsg0:
002BB4  3  A5 67        	lda z80_h		; store string pointer.
002BB6  3  48           	pha
002BB7  3  A5 66        	lda z80_l
002BB9  3  48           	pha
002BBA  3               
002BBA  3  A0 00        	ldy #0
002BBC  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
002BBE  3  29 7F        	and #127		; remove any end marker.
002BC0  3  C9 0D        	cmp #13
002BC2  3  F0 24        	beq dmsg1
002BC4  3  20 88 26     	jsr pchar		; display character.
002BC7  3  20 93 2C     	jsr nexpos 		; display position.
002BCA  3  D0 03        	bne dmsg2		; not on a new line.
002BCC  3  20 98 2C     	jsr nexlin		; next line down.
002BCF  3               dmsg2:
002BCF  3  68           	pla			; retrieve string pointer
002BD0  3  85 66        	sta z80_l
002BD2  3  68           	pla
002BD3  3  85 67        	sta z80_h
002BD5  3               
002BD5  3  A0 00        	ldy #0
002BD7  3  B1 66        	lda (z80_hl),y		; fetch last character.
002BD9  3  0A           	asl a  			; was it the end?
002BDA  3  90 03        	bcc :+
002BDC  3  4C 47 25     	jmp dscor2		; yes, job done.
002BDF  3               :
002BDF  3  E6 66        	inc z80_l		; next character to display.
002BE1  3  D0 02        	bne :+
002BE3  3  E6 67        	inc z80_h
002BE5  3               :
002BE5  3  4C B4 2B     	jmp dmsg0
002BE8  3               dmsg1:
002BE8  3  E6 rr        	inc dispy
002BEA  3  A5 rr        	lda dispy
002BEC  3  C9 18        	cmp #24
002BEE  3  90 04        	bcc dmsg4
002BF0  3  A9 00        	lda #0
002BF2  3  85 rr        	sta dispy
002BF4  3               dmsg4:
002BF4  3  A9 00        	lda #0
002BF6  3  85 rr        	sta dispx
002BF8  3  4C CF 2B     	jmp dmsg2
002BFB  3               
002BFB  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
002BFB  3               
002BFB  3               ;----------------------------------------------------------
002BFB  3               ; Display message in big text.
002BFB  3               ;
002BFB  3               ; Input:
002BFB  3               ;  HL = string pointer
002BFB  3               ;----------------------------------------------------------
002BFB  3               
002BFB  3               bmsg1:
002BFB  3  A0 00        	ldy #0
002BFD  3  B1 66        	lda (z80_hl),y 		; get character to display.
002BFF  3  29 7F        	and #127		; only want 7 bits.
002C01  3  C9 0D        	cmp #13
002C03  3  F0 13        	beq bmsg2
002C05  3  20 2D 2C     	jsr bchar 		; display big char.
002C08  3               bmsg3:
002C08  3  A0 00        	ldy #0
002C0A  3  B1 66        	lda (z80_hl),y 		; look at last character.
002C0C  3  48           	pha
002C0D  3  E6 66        	inc z80_l 		; next character in list.
002C0F  3  D0 02        	bne :+
002C11  3  E6 67        	inc z80_h
002C13  3               :
002C13  3  68           	pla
002C14  3  0A           	asl a  			; was terminator flag set?
002C15  3  90 E4        	bcc bmsg1		; no, keep going.
002C17  3  60           	rts
002C18  3               bmsg2:
002C18  3  A9 00        	lda #0
002C1A  3  85 rr        	sta dispx
002C1C  3  E6 rr        	inc dispy
002C1E  3  E6 rr        	inc dispy
002C20  3  A5 rr        	lda dispy
002C22  3  C9 17        	cmp #23
002C24  3  90 E2        	bcc bmsg3
002C26  3  A9 00        	lda #0
002C28  3  85 rr        	sta dispy
002C2A  3  4C 08 2C     	jmp bmsg3
002C2D  3               
002C2D  3               ;----------------------------------------------------------
002C2D  3               ; Big character display.
002C2D  3               ;
002C2D  3               ; Input:
002C2D  3               ;  A = character
002C2D  3               ;----------------------------------------------------------
002C2D  3               
002C2D  3               bchar:
002C2D  3  85 64        	sta z80_e		; save char in lb
002C2F  3  A9 00        	lda #0
002C31  3  85 65        	sta z80_d		; reset hb
002C33  3               
002C33  3  06 64        	asl z80_e 		; multiply char by 8.
002C35  3  26 65        	rol z80_d
002C37  3  06 64        	asl z80_e
002C39  3  26 65        	rol z80_d
002C3B  3  06 64        	asl z80_e
002C3D  3  26 65        	rol z80_d		; de = a*8
002C3F  3               
002C3F  3  18           	clc			; de = Fontpointer + a*8
002C40  3  A5 64        	lda z80_e
002C42  3  69 1D        	adc #<(FONT-256) 		; address of font.
002C44  3  85 64        	sta z80_e
002C46  3  A5 65        	lda z80_d
002C48  3  69 38        	adc #>(FONT-256)
002C4A  3  85 65        	sta z80_d
002C4C  3               
002C4C  3  20 39 26     	jsr gprad 		; get screen address.
002C4F  3               
002C4F  3  A2 00        	ldx #0			; height of character in font.
002C51  3               bchar0:
002C51  3  A0 00        	ldy #0
002C53  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
002C55  3               
002C55  3               .if iflag
002C55  3               	eor #$ff
002C55  3               .endif
002C55  3               
002C55  3  91 rr        	sta (scraddr),y
002C57  3  48           	pha
002C58  3  20 ED 2F     	jsr nline 		; next line down.
002C5B  3  68           	pla
002C5C  3  91 rr        	sta (scraddr),y
002C5E  3  20 ED 2F     	jsr nline 		; next line down.
002C61  3               
002C61  3  18           	clc
002C62  3  E6 64        	inc z80_e 		; next line of font.
002C64  3  D0 02        	bne :+
002C66  3  E6 65        	inc z80_d
002C68  3               :
002C68  3  E8           	inx
002C69  3  E0 08        	cpx #8
002C6B  3  D0 E4        	bne bchar0
002C6D  3               
002C6D  3  20 93 2C     	jsr nexpos		; display position.
002C70  3  D0 05        	bne bchar2 		; not on a new line.
002C72  3               bchar3:
002C72  3  E6 rr        	inc dispy
002C74  3  20 98 2C     	jsr nexlin 		; next line check.
002C77  3               bchar2:
002C77  3  4C 47 25     	jmp dscor2		; tidy up line and column variables.
002C7A  3               
002C7A  3               
002C7A  3               ;-------------------------------------------------
002C7A  3               ; Display a character.
002C7A  3               ;
002C7A  3               ; Input:
002C7A  3               ;  A = character
002C7A  3               ;-------------------------------------------------
002C7A  3               
002C7A  3               achar:
002C7A  3  85 63        	sta z80_b 		; copy to b.
002C7C  3  20 A6 2C     	jsr preprt 		; get ready to print.
002C7F  3  A5 63        	lda z80_b		; character in accumulator.
002C81  3  A6 rr        	ldx prtmod 		; print mode.
002C83  3  F0 03        	beq :+
002C85  3  4C 2D 2C     	jmp bchar 		; no, double-height text.
002C88  3               :
002C88  3  20 88 26     	jsr pchar 		; display character.
002C8B  3  20 93 2C     	jsr nexpos 		; display position.
002C8E  3  F0 E2        	beq bchar3		; next line down.
002C90  3  4C 77 2C     	jmp bchar2 		; tidy up.
002C93  3               
002C93  3               
002C93  3               ;-------------------------------------------------
002C93  3               ; Get next print column position.
002C93  3               ;-------------------------------------------------
002C93  3               
002C93  3               nexpos:
002C93  3  E6 rr        	inc dispx		; move along one position.
002C95  3  A5 rr        	lda dispx 		; get coordinate.
002C97  3               ;	and #31
002C97  3  60           	rts 			; return with status in zero flag.
002C98  3               
002C98  3               ;-------------------------------------------------
002C98  3               ; Get next print line position.
002C98  3               ;-------------------------------------------------
002C98  3               
002C98  3               nexlin:
002C98  3  E6 rr        	inc dispy 		; newline.
002C9A  3  A5 rr        	lda dispy		; vertical position.
002C9C  3  C9 18        	cmp #24			; past screen edge?
002C9E  3  B0 01        	bcs :+
002CA0  3  60           	rts			; no, still okay.
002CA1  3               :
002CA1  3  A9 00        	lda #0			; restart at top.
002CA3  3  85 rr        	sta dispy
002CA5  3  60           	rts
002CA6  3               
002CA6  3               ;--------------------------------------------------------
002CA6  3               ; Pre-print preliminaries.
002CA6  3               ;--------------------------------------------------------
002CA6  3               
002CA6  3               preprt:
002CA6  3  A9 1D        	lda #<(FONT-256)		; font pointer.
002CA8  3  8D F2 24     	sta grbase		; set up graphics base.
002CAB  3  A9 38        	lda #>(FONT-256)
002CAD  3  8D F3 24     	sta grbase+1
002CB0  3               prescr:
002CB0  3  A5 rr        	lda charx 		; display coordinates.
002CB2  3  85 rr        	sta dispx		; set up general coordinates.
002CB4  3  A5 rr        	lda chary
002CB6  3  85 rr        	sta dispy
002CB8  3  60           	rts
002CB9  3               
002CB9  3               ;--------------------------------------------------------------
002CB9  3               ; Get messagenr x in hl
002CB9  3               ;
002CB9  3               ; Input:
002CB9  3               ;  HL = pointer to message list
002CB9  3               ;  X  = message number.
002CB9  3               ;--------------------------------------------------------------
002CB9  3               
002CB9  3               getwrd:
002CB9  3  E0 00        	cpx #0
002CBB  3  D0 01        	bne:+ 			; first word in list?
002CBD  3  60           	rts 			; yep, don't search.
002CBE  3               :
002CBE  3  A0 00        	ldy #0
002CC0  3               getwd0:
002CC0  3  B1 66        	lda (z80_hl),y
002CC2  3  48           	pha
002CC3  3  E6 66        	inc z80_l
002CC5  3  D0 02        	bne :+
002CC7  3  E6 67        	inc z80_h
002CC9  3               :
002CC9  3  68           	pla
002CCA  3  C9 80        	cmp #128		; found end?
002CCC  3  30 F2        	bmi getwd0		; no, carry on.
002CCE  3  CA           	dex			; until we have right number.
002CCF  3  D0 EF        	bne getwd0
002CD1  3  60           	rts
002CD2  3               
002CD2  3               ;-----------------------------------------------------------
002CD2  3               ; Bubble sort.
002CD2  3               ;-----------------------------------------------------------
002CD2  3               
002CD2  3               bsort:
002CD2  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
002CD4  3  85 rr        	sta qscnt
002CD6  3               
002CD6  3  A9 3B        	lda #<sprtab 		; sprite table.
002CD8  3  85 68        	sta z80_x
002CDA  3  A9 34        	lda #>sprtab
002CDC  3  85 69        	sta z80_i
002CDE  3               bsort0:
002CDE  3  A0 00        	ldy #0
002CE0  3  B1 68        	lda (z80_ix),y 		; first sprite type.
002CE2  3  C9 FF        	cmp #255 		; is it switched off?
002CE4  3  F0 30        	beq swemp		; yes, may need to switch another in here.
002CE6  3               
002CE6  3  A0 11        	ldy #TABSIZ
002CE8  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
002CEA  3  C9 FF        	cmp #255 		; is it enabled?
002CEC  3  F0 0A        	beq bsort2 		; no, nothing to swap.
002CEE  3               
002CEE  3  A0 14        	ldy #TABSIZ+3
002CF0  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
002CF2  3  A0 03        	ldy #3
002CF4  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
002CF6  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
002CF8  3               bsort2:
002CF8  3  18           	clc
002CF9  3  A5 68        	lda z80_x
002CFB  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002CFD  3  85 68        	sta z80_x
002CFF  3  90 02        	bcc :+
002D01  3  E6 69        	inc z80_i
002D03  3               :
002D03  3  C6 rr        	dec qscnt
002D05  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
002D07  3  60           	rts
002D08  3               
002D08  3               ;qscnt:	.byte 0
002D08  3               
002D08  3               bsort1:
002D08  3  A0 11        	ldy #TABSIZ
002D0A  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
002D0C  3  C9 FF        	cmp #255		; is it enabled?
002D0E  3  F0 E8        	beq bsort2		; no, nothing to swap.
002D10  3  20 24 2D     	jsr swspr		; swap positions.
002D13  3  4C F8 2C     	jmp bsort2
002D16  3               swemp:
002D16  3  A0 11        	ldy #TABSIZ
002D18  3  B1 68        	lda (z80_ix),y		; next table entry.
002D1A  3  C9 FF        	cmp #255		; is that one on?
002D1C  3  F0 DA        	beq bsort2		; no, nothing to swap.
002D1E  3  20 24 2D     	jsr swspr		; swap positions.
002D21  3  4C F8 2C     	jmp bsort2
002D24  3               
002D24  3               ; Swap sprites.
002D24  3               
002D24  3               swspr:
002D24  3  A5 68        	lda z80_x		; table address
002D26  3  85 64        	sta z80_e		; copy to de pair.
002D28  3  85 66        	sta z80_l		; copy to hl pair.
002D2A  3  A5 69        	lda z80_i
002D2C  3  85 67        	sta z80_h
002D2E  3  85 65        	sta z80_d
002D30  3               
002D30  3  18           	clc
002D31  3  A5 66        	lda z80_l
002D33  3  69 11        	adc #TABSIZ		; distance to second entry.
002D35  3  85 66        	sta z80_l
002D37  3  90 02        	bcc :+
002D39  3  E6 67        	inc z80_h
002D3B  3               :
002D3B  3  A9 11        	lda #TABSIZ		; bytes to swap.
002D3D  3  85 63        	sta z80_b
002D3F  3  A0 00        	ldy #0
002D41  3               swspr0:
002D41  3  B1 66        	lda (z80_hl),y		; fetch second byte.
002D43  3  48           	pha
002D44  3  B1 64        	lda (z80_de),y 		; fetch first byte.
002D46  3  91 66        	sta (z80_hl),y 		; copy to second.
002D48  3  68           	pla
002D49  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
002D4B  3               
002D4B  3  E6 64        	inc z80_e 		; next byte.
002D4D  3  D0 02        	bne :+
002D4F  3  E6 65        	inc z80_d
002D51  3               :
002D51  3  E6 66        	inc z80_l 		; next byte.
002D53  3  D0 02        	bne :+
002D55  3  E6 67        	inc z80_h
002D57  3               :
002D57  3  C6 63        	dec z80_b
002D59  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
002D5B  3  60           	rts
002D5C  3               
002D5C  3               ;----------------------------------------------------
002D5C  3               ; Process sprites.
002D5C  3               ;----------------------------------------------------
002D5C  3               
002D5C  3               pspr:
002D5C  3  A9 0C        	lda #NUMSPR		; sprites to process.
002D5E  3  85 rr        	sta sprptr
002D60  3               
002D60  3  A9 3B        	lda #<sprtab 		; sprite table.
002D62  3  85 68        	sta z80_x
002D64  3  A9 34        	lda #>sprtab
002D66  3  85 69        	sta z80_i
002D68  3               pspr1:
002D68  3  A0 00        	ldy #0
002D6A  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
002D6C  3  C9 09        	cmp #9 			; within range of sprite types?
002D6E  3  B0 03        	bcs :+
002D70  3  20 83 2D     	jsr pspr2 		; yes, process this one.
002D73  3               :
002D73  3  18           	clc
002D74  3  A5 68        	lda z80_x
002D76  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002D78  3  85 68        	sta z80_x
002D7A  3  90 02        	bcc :+
002D7C  3  E6 69        	inc z80_i		; next sprite.
002D7E  3               :
002D7E  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
002D80  3  D0 E6        	bne pspr1
002D82  3  60           	rts
002D83  3               
002D83  3               ;sprptr:	.byte 0
002D83  3               
002D83  3               pspr2:
002D83  3  A5 68        	lda z80_x 		; store original sprite pointer.
002D85  3  85 rr        	sta ogptr
002D87  3  A5 69        	lda z80_i
002D89  3  85 rr        	sta ogptr+1
002D8B  3  20 97 2D     	jsr pspr3		; do the routine.
002D8E  3               rtorg:
002D8E  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
002D90  3  85 68        	sta z80_x
002D92  3  A5 rr        	lda ogptr+1
002D94  3  85 69        	sta z80_i
002D96  3               rtorg0:
002D96  3  60           	rts
002D97  3               
002D97  3               pspr3:
002D97  3  A9 CC        	lda #<evtyp0		; sprite type events list.
002D99  3  85 66        	sta z80_l
002D9B  3  A9 2D        	lda #>evtyp0
002D9D  3  85 67        	sta z80_h
002D9F  3               pspr4:
002D9F  3  B1 68        	lda (z80_ix),y
002DA1  3  0A           	asl a			; double accumulator.
002DA2  3  18           	clc
002DA3  3  65 66        	adc z80_l
002DA5  3  85 66        	sta z80_l
002DA7  3  90 02        	bcc :+
002DA9  3  E6 67        	inc z80_h
002DAB  3               :
002DAB  3  B1 66        	lda (z80_hl),y
002DAD  3  85 64        	sta z80_e 		; copy to de.
002DAF  3  48           	pha
002DB0  3               
002DB0  3  E6 66        	inc z80_l 		; next byte of address.
002DB2  3  D0 02        	bne :+
002DB4  3  E6 67        	inc z80_h
002DB6  3               :
002DB6  3  B1 66        	lda (z80_hl),y 		; address high.
002DB8  3  85 65        	sta z80_d
002DBA  3               
002DBA  3  48           	pha	 		; swap address into hl.
002DBB  3  A5 67        	lda z80_h
002DBD  3  85 65        	sta z80_d
002DBF  3  68           	pla
002DC0  3  85 67        	sta z80_h
002DC2  3  68           	pla
002DC3  3  85 66        	sta z80_l
002DC5  3  A5 66        	lda z80_l
002DC7  3  85 64        	sta z80_e
002DC9  3               
002DC9  3  6C 66 00     	jmp (z80_hl) 		; go there.
002DCC  3               
002DCC  3               ;ogptr:	.word 0			; original sprite pointer.
002DCC  3               
002DCC  3               ; Address of each sprite type's routine.
002DCC  3               
002DCC  3  4E 35        evtyp0:	.word evnt00
002DCE  3  4F 35        evtyp1:	.word evnt01
002DD0  3  50 35        evtyp2:	.word evnt02
002DD2  3  51 35        evtyp3:	.word evnt03
002DD4  3  52 35        evtyp4:	.word evnt04
002DD6  3  53 35        evtyp5:	.word evnt05
002DD8  3  54 35        evtyp6:	.word evnt06
002DDA  3  55 35        evtyp7:	.word evnt07
002DDC  3  56 35        evtyp8:	.word evnt08
002DDE  3               
002DDE  3               ;--------------------------------------------------------------
002DDE  3               ; Display sprites.
002DDE  3               ;
002DDE  3               ; Input:
002DDE  3               ;  IX = sprite table
002DDE  3               ;--------------------------------------------------------------
002DDE  3               
002DDE  3               dspr:
002DDE  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
002DE0  3  85 rr        	sta sprcnt
002DE2  3               dspr0:
002DE2  3  A0 00        	ldy #0
002DE4  3  B1 68        	lda (z80_ix),y 		; get sprite type.
002DE6  3  C9 FF        	cmp #255 		; is it enabled?
002DE8  3  D0 42        	bne dspr1 		; yes, it needs deleting.
002DEA  3               dspr5:
002DEA  3  A0 05        	ldy #5
002DEC  3  B1 68        	lda (z80_ix),y 		; new type.
002DEE  3  C9 FF        	cmp #255		; is it enabled?
002DF0  3  D0 77        	bne dspr3 		; yes, it needs drawing.
002DF2  3               dspr2:
002DF2  3  A0 05        	ldy #5
002DF4  3  B1 68        	lda (z80_ix),y 		; copy new type.
002DF6  3  A0 00        	ldy #0
002DF8  3  91 68        	sta (z80_ix),y
002DFA  3  A0 06        	ldy #6
002DFC  3  B1 68        	lda (z80_ix),y 		; copy new image number.
002DFE  3  A0 01        	ldy #1
002E00  3  91 68        	sta (z80_ix),y
002E02  3  A0 07        	ldy #7
002E04  3  B1 68        	lda (z80_ix),y 		; copy new frame.
002E06  3  A0 02        	ldy #2
002E08  3  91 68        	sta (z80_ix),y
002E0A  3  A0 08        	ldy #8
002E0C  3  B1 68        	lda (z80_ix),y 		; copy new y.
002E0E  3  A0 03        	ldy #3
002E10  3  91 68        	sta (z80_ix),y
002E12  3  A0 09        	ldy #9
002E14  3  B1 68        	lda (z80_ix),y 		; copy new x.
002E16  3  A0 04        	ldy #4
002E18  3  91 68        	sta (z80_ix),y
002E1A  3               
002E1A  3  18           	clc
002E1B  3  A5 68        	lda z80_x
002E1D  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
002E1F  3  85 68        	sta z80_x
002E21  3  A5 69        	lda z80_i
002E23  3  69 00        	adc #0
002E25  3  85 69        	sta z80_i 		; next sprite.
002E27  3  C6 rr        	dec sprcnt
002E29  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
002E2B  3  60           	rts
002E2C  3               dspr1:
002E2C  3  A0 05        	ldy #5
002E2E  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
002E30  3  C9 FF        	cmp #255		; is this enabled?
002E32  3  D0 06        	bne dspr4 		; yes, display both.
002E34  3               dspr6:
002E34  3  20 04 2F     	jsr sspria 		; show single sprite.
002E37  3  4C F2 2D     	jmp dspr2
002E3A  3               
002E3A  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
002E3A  3               
002E3A  3               dspr4:
002E3A  3  A0 04        	ldy #4
002E3C  3  B1 68        	lda (z80_ix),y		; old x.
002E3E  3  A0 09        	ldy #9
002E40  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
002E42  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
002E44  3               
002E44  3  A0 03        	ldy #3
002E46  3  B1 68        	lda (z80_ix),y		; old y.
002E48  3  A0 08        	ldy #8
002E4A  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002E4C  3  D0 15        	bne dspr7		; they differ, need to redraw.
002E4E  3               
002E4E  3  A0 02        	ldy #2
002E50  3  B1 68        	lda (z80_ix),y 		; old frame.
002E52  3  A0 07        	ldy #7
002E54  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002E56  3  4C 63 2E     	jmp dspr7 		; they differ, need to redraw.
002E59  3               
002E59  3  A0 01        	ldy #1
002E5B  3  B1 68        	lda (z80_ix),y 		; old image.
002E5D  3  A0 06        	ldy #6
002E5F  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002E61  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
002E63  3               dspr7:
002E63  3  20 31 2F     	jsr sspric 		; delete old sprite, draw new one simultaneously.
002E66  3  4C F2 2D     	jmp dspr2
002E69  3               dspr3:
002E69  3  20 2B 2F     	jsr ssprib 		; show single sprite.
002E6C  3  4C F2 2D     	jmp dspr2
002E6F  3               
002E6F  3               ;sprcnt:	.byte 0
002E6F  3               
002E6F  3               ;-----------------------------------------
002E6F  3               ; Get sprite address calculations.
002E6F  3               ; gspran = new sprite, gsprad = old sprite.
002E6F  3               ;
002E6F  3               ; Input:
002E6F  3               ;  IX = sprite address
002E6F  3               ;-----------------------------------------
002E6F  3               
002E6F  3               gspran:
002E6F  3  A0 08        	ldy #8
002E71  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
002E73  3  85 rr        	sta dispy
002E75  3  A0 09        	ldy #9
002E77  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
002E79  3  85 rr        	sta dispx
002E7B  3  A0 06        	ldy #6
002E7D  3  B1 68        	lda (z80_ix),y 		; new sprite image.
002E7F  3  20 5D 32     	jsr gfrm		; fetch start frame for this sprite.
002E82  3               
002E82  3  A0 00        	ldy #0
002E84  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002E86  3  A0 07        	ldy #7
002E88  3  18           	clc
002E89  3  71 68        	adc (z80_ix),y 		; new add frame number.
002E8B  3  4C AA 2E     	jmp gspra0
002E8E  3               
002E8E  3               ;-----------------------------------------
002E8E  3               ; Calculate old sprite address
002E8E  3               ;
002E8E  3               ; Input:
002E8E  3               ;  IX = sprite address
002E8E  3               ;
002E8E  3               ; Output:
002E8E  3               ;  B  = right byte mask
002E8E  3               ;  C  = left byte mask
002E8E  3               ;  DE = spriteframe address
002E8E  3               ;  scraddr = screenaddress(dispx,dispy)
002E8E  3               ;-----------------------------------------
002E8E  3               
002E8E  3               gsprad:
002E8E  3  A0 03        	ldy #3
002E90  3  B1 68        	lda (z80_ix),y		; y coordinate.
002E92  3  85 rr        	sta dispy
002E94  3  A0 04        	ldy #4
002E96  3  B1 68        	lda (z80_ix),y		; x coordinate.
002E98  3  85 rr        	sta dispx
002E9A  3  A0 01        	ldy #1
002E9C  3  B1 68        	lda (z80_ix),y 		; sprite image.
002E9E  3  20 5D 32     	jsr gfrm 		; fetch start frame for this sprite.
002EA1  3               
002EA1  3  A0 00        	ldy #0
002EA3  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002EA5  3  A0 02        	ldy #2
002EA7  3  18           	clc
002EA8  3  71 68        	adc (z80_ix),y 		; add frame number.
002EAA  3               gspra0:
002EAA  3  4A           	lsr a	  		; multiply by 128.
002EAB  3  85 65        	sta z80_d 		; store in d.
002EAD  3  8D 02 2F     	sta tmp1
002EB0  3  A9 00        	lda #0
002EB2  3  6A           	ror a
002EB3  3  85 64        	sta z80_e 		; got low byte.
002EB5  3  8D 03 2F     	sta tmp2
002EB8  3               .if bflag
002EB8  3               	lsr tmp1
002EB8  3               	ror tmp2
002EB8  3               	clc
002EB8  3               	lda tmp2
002EB8  3               	adc z80_e
002EB8  3               	sta z80_e
002EB8  3               	lda tmp1
002EB8  3               	adc z80_d
002EB8  3               	sta z80_d
002EB8  3               .endif
002EB8  3  18           	clc 			; address of play sprites.
002EB9  3  A5 64        	lda z80_e
002EBB  3  69 62        	adc #<sprgfx
002EBD  3  85 64        	sta z80_e
002EBF  3  A5 65        	lda z80_d
002EC1  3  69 38        	adc #>sprgfx
002EC3  3  85 65        	sta z80_d
002EC5  3               
002EC5  3  A5 rr        	lda dispx 		; y coordinate.
002EC7  3  29 06        	and #6 			; position within byte boundary.
002EC9  3  AA           	tax	 		; low byte of table displacement.
002ECA  3               
002ECA  3  0A           	asl a	  		; multiply by 32.
002ECB  3  0A           	asl a  			; already a multiple
002ECC  3  0A           	asl a  			; of 2, so just 4
002ECD  3               .if bflag
002ECD  3               	sta tmp1
002ECD  3               	asl a  			; shifts needed.
002ECD  3               	clc
002ECD  3               	adc tmp1
002ECD  3               .else
002ECD  3  0A           	asl a  			; shifts needed.
002ECE  3               .endif
002ECE  3  18           	clc 			; add to sprite address.
002ECF  3  65 64        	adc z80_e
002ED1  3  85 64        	sta z80_e
002ED3  3  90 02        	bcc :+
002ED5  3  E6 65        	inc z80_d
002ED7  3               :
002ED7  3  BD FA 2E     	lda spmask,x		 ; pointer to mask table.
002EDA  3  85 62        	sta z80_c 		; left mask.
002EDC  3  BD FB 2E     	lda spmask+1,x
002EDF  3  85 63        	sta z80_b 		; right mask.
002EE1  3               
002EE1  3               ;------------------------------------------------------------------
002EE1  3               ; Drop into screen address routine.
002EE1  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
002EE1  3               ;------------------------------------------------------------------
002EE1  3               
002EE1  3               scadd:
002EE1  3  A6 rr        	ldx dispy
002EE3  3  E0 C0        	cpx #192
002EE5  3  90 02        	bcc :+
002EE7  3  A2 C0        	ldx #192
002EE9  3               :
002EE9  3  A5 rr        	lda dispx
002EEB  3  4A           	lsr a
002EEC  3  4A           	lsr a
002EED  3  4A           	lsr a
002EEE  3  18           	clc
002EEF  3  7D 00 E0     	adc SCADTB_lb,x
002EF2  3  85 rr        	sta scraddr
002EF4  3  BD 00 E1     	lda SCADTB_hb,x
002EF7  3  85 rr        	sta scraddr+1
002EF9  3  60           	rts
002EFA  3               
002EFA  3  FF 00        spmask:	.byte $ff,$00
002EFC  3  3F C0        	.byte $3f,$c0
002EFE  3  0F F0        	.byte $0f,$f0
002F00  3  03 FC        	.byte $03,$fc
002F02  3               
002F02  3  00           tmp1:	.byte 0
002F03  3  00           tmp2:	.byte 0
002F04  3               
002F04  3               ;-----------------------------------------------------------------
002F04  3               ; These are the sprite routines.
002F04  3               ; sspria = single sprite, old (ix).
002F04  3               ; ssprib = single sprite, new (ix+5).
002F04  3               ; sspric = both sprites, old (ix) and new (ix+5).
002F04  3               ;-----------------------------------------------------------------
002F04  3               
002F04  3               sspria:
002F04  3  20 8E 2E     	jsr gsprad		; get old sprite address.
002F07  3               sspri2:
002F07  3  A5 64        	lda z80_e
002F09  3  8D 79 2F     	sta dline1+1		; Set spritedata address
002F0C  3  8D 88 2F     	sta dline2+1
002F0F  3  A5 65        	lda z80_d
002F11  3  8D 7A 2F     	sta dline1+2
002F14  3  8D 89 2F     	sta dline2+2
002F17  3  86 rr        	stx xtmp
002F19  3  A2 00        	ldx #0			; vertical lines.
002F1B  3               sspri0:
002F1B  3  20 75 2F     	jsr dline		; draw a line.
002F1E  3  E0 10        	cpx #16			; detect block boundery
002F20  3  D0 02        	bne :+			; skip if not
002F22  3  E6 rr        	inc scraddr+1		; jump to next blockline
002F24  3               :
002F24  3  E0 20        	cpx #32			; check finished
002F26  3               .if bflag
002F26  3               	bne :+			; skip if not
002F26  3               	inc scraddr+1		; jump to next blockline
002F26  3               	inc z80_hlp+1		; jump to next blockline
002F26  3               :
002F26  3               	cpx #48			; check finished
002F26  3               .endif
002F26  3  D0 F3        	bne sspri0		; no, repeat
002F28  3  A6 rr        	ldx xtmp
002F2A  3  60           	rts
002F2B  3               
002F2B  3               ;-----------------------------------------------------------------
002F2B  3               
002F2B  3               ssprib:
002F2B  3  20 6F 2E     	jsr gspran 		; get new sprite address.
002F2E  3  4C 07 2F     	jmp sspri2
002F31  3               
002F31  3               ;-----------------------------------------------------------------
002F31  3               
002F31  3               sspric:
002F31  3  20 8E 2E     	jsr gsprad 		; get old sprite address.
002F34  3  A5 64        	lda z80_e
002F36  3  8D 9D 2F     	sta ddline1+1		; Set spritedata address
002F39  3  8D AC 2F     	sta ddline2+1
002F3C  3  A5 65        	lda z80_d
002F3E  3  8D 9E 2F     	sta ddline1+2
002F41  3  8D AD 2F     	sta ddline2+2
002F44  3  20 C4 3E     	jsr exx  		; store addresses.
002F47  3               
002F47  3  20 6F 2E     	jsr gspran 		; get new sprite addresses.
002F4A  3  A5 64        	lda z80_e
002F4C  3  8D 79 2F     	sta dline1+1		; Set spritedata address
002F4F  3  8D 88 2F     	sta dline2+1
002F52  3  A5 65        	lda z80_d
002F54  3  8D 7A 2F     	sta dline1+2
002F57  3  8D 89 2F     	sta dline2+2
002F5A  3               
002F5A  3  86 rr        	stx xtmp
002F5C  3  A2 00        	ldx #0			; vertical lines.
002F5E  3               lloop:
002F5E  3  20 75 2F     	jsr dline 		; draw a line.
002F61  3  CA           	dex
002F62  3  CA           	dex
002F63  3  20 99 2F     	jsr ddline 		; delete a line.
002F66  3  E0 10        	cpx #16			; detect block boundery
002F68  3  D0 04        	bne :+			; skip if not
002F6A  3  E6 rr        	inc scraddr+1		; jump to next blockline
002F6C  3  E6 73        	inc z80_hlp+1		; jump to next blockline
002F6E  3               :
002F6E  3  E0 20        	cpx #32			; check finished
002F70  3               .if bflag
002F70  3               	bne :+			; skip if not
002F70  3               	inc scraddr+1		; jump to next blockline
002F70  3               	inc z80_hlp+1		; jump to next blockline
002F70  3               :
002F70  3               	cpx #48			; check finished
002F70  3               .endif
002F70  3  D0 EC        	bne lloop		; no, repeat
002F72  3  A6 rr        	ldx xtmp
002F74  3  60           	rts
002F75  3               
002F75  3               
002F75  3               ;-----------------------------------------------------------------
002F75  3               
002F75  3               dline:
002F75  3  BC BD 2F     	ldy sprline,x		; point to screenleft
002F78  3               dline1:
002F78  3  BD F7 38     	lda objdta,x		; fetch spriteleft byte
002F7B  3  85 61        	sta z80_a		; save spriteright byte
002F7D  3  A5 61        	lda z80_a
002F7F  3  25 62        	and z80_c		; mask left
002F81  3  51 rr        	eor (scraddr),y		; merge with screenleft
002F83  3  91 rr        	sta (scraddr),y		; write screenleft
002F85  3               sline:
002F85  3  E8           	inx			; next spritebyte
002F86  3  C8           	iny			; point to screenmiddle
002F87  3               dline2:
002F87  3  BD F7 38     	lda objdta,x		; fetch spritemiddle byte
002F8A  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
002F8C  3  91 rr        	sta (scraddr),y		; write screenmiddle
002F8E  3               sline2:
002F8E  3  C8           	iny			; point to screenright
002F8F  3  A5 61        	lda z80_a		; fetch spriteright byte
002F91  3  25 63        	and z80_b		; mask right
002F93  3  51 rr        	eor (scraddr),y		; merge with screenright
002F95  3  91 rr        	sta (scraddr),y		; write screenright
002F97  3               sline3:
002F97  3  E8           	inx			; next spritebyte
002F98  3               
002F98  3  60           	rts
002F99  3               
002F99  3               ;-----------------------------------------------------------------
002F99  3               
002F99  3               ddline:
002F99  3  BC BD 2F     	ldy sprline,x		; point to screenleft
002F9C  3               ddline1:
002F9C  3  BD F7 38     	lda objdta,x		; fetch spriteleft byte
002F9F  3  85 61        	sta z80_a		; save spriteright byte
002FA1  3  A5 61        	lda z80_a
002FA3  3  25 6E        	and z80_cp		; mask left
002FA5  3  51 72        	eor (z80_hlp),y		; merge with screenleft
002FA7  3  91 72        	sta (z80_hlp),y		; write screenleft
002FA9  3               dsline:
002FA9  3  E8           	inx			; next spritebyte
002FAA  3  C8           	iny			; point to screenmiddle
002FAB  3               ddline2:
002FAB  3  BD F7 38     	lda objdta,x		; fetch spritemiddle byte
002FAE  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
002FB0  3  91 72        	sta (z80_hlp),y		; write screenmiddle
002FB2  3               dsline2:
002FB2  3  C8           	iny			; point to screenright
002FB3  3  A5 61        	lda z80_a		; fetch spriteright byte
002FB5  3  25 6F        	and z80_bp		; mask right
002FB7  3  51 72        	eor (z80_hlp),y		; merge with screenright
002FB9  3  91 72        	sta (z80_hlp),y		; write screenright
002FBB  3               dsline3:
002FBB  3  E8           	inx			; next spritebyte
002FBC  3               
002FBC  3  60           	rts
002FBD  3               
002FBD  3               sprline:
002FBD  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002FC1  3  40 41 60 61  
002FC5  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002FC9  3  C0 C1 E0 E1  
002FCD  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002FD1  3  40 41 60 61  
002FD5  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002FD9  3  C0 C1 E0 E1  
002FDD  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002FE1  3  40 41 60 61  
002FE5  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002FE9  3  C0 C1 E0 E1  
002FED  3               
002FED  3               ;----------------------------------------------------------------------
002FED  3               ; Line drawn, now work out next target address.
002FED  3               ;----------------------------------------------------------------------
002FED  3               
002FED  3               nline:
002FED  3  18           	clc
002FEE  3  A5 rr        	lda scraddr 		; get low byte of address.
002FF0  3  69 20        	adc #$20
002FF2  3  85 rr        	sta scraddr 		; new low byte of address.
002FF4  3  90 02        	bcc :+
002FF6  3  E6 rr        	inc scraddr+1 		; new high byte of address.
002FF8  3               :
002FF8  3  60           	rts
002FF9  3               
002FF9  3               ;-------------------------------------------------------------
002FF9  3               ; Line drawn, now work out next target address.
002FF9  3               ;
002FF9  3               ; Input:
002FF9  3               ;  BP  = right mask
002FF9  3               ;  CP  = left mask
002FF9  3               ;  DEP = spriteaddress
002FF9  3               ;  z80_hlp = screen address
002FF9  3               ;-------------------------------------------------------------
002FF9  3               
002FF9  3               
002FF9  3               ;-----------------------------------------------------------
002FF9  3               ; Animates a sprite.
002FF9  3               ;
002FF9  3               ; Input:
002FF9  3               ;  IX = sprite address
002FF9  3               ;  HL = last sprite address
002FF9  3               ;-----------------------------------------------------------
002FF9  3               
002FF9  3               animsp:
002FF9  3  25 rr        	and frmno
002FFB  3  F0 01        	beq :+
002FFD  3  60           	rts
002FFE  3               :
002FFE  3  A0 06        	ldy #6
003000  3  B1 68        	lda (z80_ix),y		; sprite image
003002  3  20 5D 32     	jsr gfrm		; get frame data.
003005  3               
003005  3  E6 66        	inc z80_l		; point to frames.
003007  3  D0 02        	bne :+
003009  3  E6 67        	inc z80_h
00300B  3               :
00300B  3  A0 07        	ldy #7
00300D  3  B1 68        	lda (z80_ix),y		; sprite frame.
00300F  3  18           	clc
003010  3  69 01        	adc #1			; next one along.
003012  3  A0 00        	ldy #0
003014  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
003016  3  90 02        	bcc anims0		; no, not yet.
003018  3  A9 00        	lda #0			; start at first frame.
00301A  3               anims0:
00301A  3  A0 07        	ldy #7
00301C  3  91 68        	sta (z80_ix),y		; new frame.
00301E  3  60           	rts
00301F  3               
00301F  3               ;--------------------------------------------------------------
00301F  3               ; Animate back
00301F  3               ;
00301F  3               ; Input:
00301F  3               ;  IX = sprite address
00301F  3               ;  HL = last sprite address
00301F  3               ;--------------------------------------------------------------
00301F  3               
00301F  3               animbk:
00301F  3  25 rr        	and frmno
003021  3  F0 01        	beq :+
003023  3  60           	rts
003024  3               :
003024  3  A0 06        	ldy #6
003026  3  B1 68        	lda (z80_ix),y		; sprite image.
003028  3  20 5D 32     	jsr gfrm		; get frame data.
00302B  3               
00302B  3  E6 66        	inc z80_l 		; point to frames.
00302D  3  D0 02        	bne :+
00302F  3  E6 67        	inc z80_h
003031  3               :
003031  3  A0 07        	ldy #7
003033  3  B1 68        	lda (z80_ix),y 		; sprite frame.
003035  3  F0 03        	beq :+
003037  3  4C 3E 30     	jmp rtanb0 		; yes, start at end.
00303A  3               :
00303A  3  A0 00        	ldy #0
00303C  3  B1 66        	lda (z80_hl),y 		; last sprite.
00303E  3               rtanb0:
00303E  3  38           	sec
00303F  3  E9 01        	sbc #1			; next one along.
003041  3  4C 1A 30     	jmp anims0		; set new frame.
003044  3               
003044  3               ;--------------------------------------------------------------
003044  3               ; Check for collision with other sprite, strict enforcement.
003044  3               ;
003044  3               ; Input:
003044  3               ;  b		= sprite to test for
003044  3               ;  ix		= current sprite pointer
003044  3               ;
003044  3               ; global:	b
003044  3               ; local:	x,y,hl,de,skptr
003044  3               ; calls:	-
003044  3               ;--------------------------------------------------------------
003044  3               
003044  3               sktyp:
003044  3  A9 3B        	lda #<sprtab				; sprite table.
003046  3  85 66        	sta z80_l
003048  3  A9 34        	lda #>sprtab
00304A  3  85 67        	sta z80_h
00304C  3               numsp2:
00304C  3  A9 0C        	lda #NUMSPR				; number of sprites.
00304E  3  85 rr        	sta sktptr
003050  3               sktyp0:
003050  3  A5 66        	lda z80_l 				; store pointer to sprite.
003052  3  85 rr        	sta skptr
003054  3  A5 67        	lda z80_h
003056  3  85 rr        	sta skptr+1
003058  3               
003058  3  A0 00        	ldy #0
00305A  3  B1 66        	lda (z80_hl),y 				; get sprite type.
00305C  3  C5 63        	cmp z80_b				; is it the type we seek?
00305E  3  F0 1D        	beq coltyp				; yes, we can use this one.
003060  3               sktyp1:
003060  3  18           	clc
003061  3  A5 rr        	lda skptr				; retrieve sprite pointer.
003063  3  69 11        	adc #TABSIZ				; size of each entry.
003065  3  85 66        	sta z80_l
003067  3  A5 rr        	lda skptr+1
003069  3  69 00        	adc #0
00306B  3  85 67        	sta z80_h
00306D  3  C6 rr        	dec sktptr					; one less iteration.
00306F  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
003071  3  A9 00        	lda #0					; default to ROM address - no sprite.
003073  3  85 66        	sta z80_l
003075  3  85 67        	sta z80_h
003077  3  85 rr        	sta skptr				; store pointer to sprite.
003079  3  85 rr        	sta skptr+1
00307B  3               
00307B  3  18           	clc					; don't return with zero flag set.
00307C  3  60           	rts 					; didn't find one.
00307D  3               
00307D  3               ;skptr:	.word 0					; search pointer.
00307D  3               ;sktptr:	.byte 0
00307D  3               
00307D  3               coltyp:
00307D  3  A0 00        	ldy #0
00307F  3  B1 68        	lda (z80_ix),y				; current sprite type.
003081  3  C5 63        	cmp z80_b				; seeking sprite of same type?
003083  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
003085  3               colty0:
003085  3  A0 09        	ldy #9					; distance to x position in table.
003087  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
003089  3  85 64        	sta z80_e
00308B  3  88           	dey
00308C  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
00308E  3  85 65        	sta z80_d
003090  3               
003090  3               ; Drop into collision detection.
003090  3               
003090  3               colc16:
003090  3  A0 09        	ldy #9
003092  3  B1 68        	lda (z80_ix),y			 	; x coord.
003094  3  38           	sec					; subtract x.
003095  3  E5 64        	sbc z80_e
003097  3  B0 05        	bcs  colc1a 				; result is positive.
003099  3  49 FF        	eor #$ff				; make negative positive.
00309B  3  18           	clc
00309C  3  69 01        	adc #1
00309E  3               colc1a:
00309E  3  C9 10        	cmp #16 				; within x range?
0030A0  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0030A2  3  85 62        	sta z80_c				; store difference.
0030A4  3               
0030A4  3  A0 08        	ldy #8
0030A6  3  B1 68        	lda (z80_ix),y				; y coord.
0030A8  3  38           	sec
0030A9  3  E5 65        	sbc z80_d				; subtract y.
0030AB  3  B0 05        	bcs colc1b				; result is positive.
0030AD  3  49 FF        	eor #$ff				; make negative positive.
0030AF  3  18           	clc
0030B0  3  69 01        	adc #1
0030B2  3               colc1b:
0030B2  3  C9 10        	cmp #16					; within y range?
0030B4  3  B0 AA        	bcs sktyp1 				; no - they've missed.
0030B6  3  18           	clc					; add x difference.
0030B7  3  65 62        	adc z80_c
0030B9  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0030BB  3  B0 02        	bcs :+
0030BD  3  38           	sec
0030BE  3  60           	rts 					; carry set if there's a collision.
0030BF  3               :
0030BF  3  4C 60 30     	jmp sktyp1				; try next sprite in table.
0030C2  3               colty1:
0030C2  3  A5 68        	lda z80_x  				; compare the two.
0030C4  3  C5 66        	cmp z80_l
0030C6  3  D0 09        	bne end_col
0030C8  3  A5 69        	lda z80_i
0030CA  3  C5 67        	cmp z80_h
0030CC  3  D0 03        	bne end_col
0030CE  3  4C 60 30     	jmp sktyp1 				; addresses are identical.
0030D1  3               end_col:
0030D1  3  4C 85 30     	jmp colty0
0030D4  3               
0030D4  3               ;-----------------------------------------------------------
0030D4  3               ; Display number, left aligned
0030D4  3               ;
0030D4  3               ; Input:
0030D4  3               ;  a		= number
0030D4  3               ;
0030D4  3               ; global:	-
0030D4  3               ; local:	a,y,bc,hl,displ0
0030D4  3               ; calls:	num2ch,dmsg3
0030D4  3               ;-----------------------------------------------------------
0030D4  3               
0030D4  3               disply:
0030D4  3  85 61        	sta z80_a
0030D6  3  A9 FC        	lda #<displ0				; display workspace.
0030D8  3  85 62        	sta z80_c
0030DA  3  A9 30        	lda #>displ0
0030DC  3  85 63        	sta z80_b
0030DE  3  A5 61        	lda z80_a
0030E0  3  20 81 22     	jsr num2ch				; convert accumulator to string.
0030E3  3               displ1:
0030E3  3  C6 62        	dec z80_c				; back one character.
0030E5  3  D0 02        	bne :+
0030E7  3  C6 63        	dec z80_b
0030E9  3               :
0030E9  3  A0 00        	ldy #0
0030EB  3  B1 62        	lda (z80_bc),y				; fetch digit.
0030ED  3  09 80        	ora #128				; insert end marker.
0030EF  3  91 62        	sta (z80_bc),y				; new value.
0030F1  3               
0030F1  3  A9 FC        	lda #<displ0				; display space.
0030F3  3  85 66        	sta z80_l
0030F5  3  A9 30        	lda #>displ0
0030F7  3  85 67        	sta z80_h
0030F9  3  4C AA 2B     	jmp dmsg3				; display the string.
0030FC  3               
0030FC  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
003100  3               
003100  3               ;----------------------------------------------------------------
003100  3               ; Initialise screen.
003100  3               ;
003100  3               ; global:	roomtb,scno
003100  3               ; local:	-
003100  3               ; calls:	tstcs
003100  3               ;----------------------------------------------------------------
003100  3               
003100  3               initsc:
003100  3  AD 18 35     	lda roomtb 			; whereabouts in the map are we?
003103  3  20 0D 31     	jsr tstsc 			; find displacement.
003106  3  C9 FF        	cmp #255 			; is it valid?
003108  3  F0 02        	beq init_end 			; no, it's rubbish.
00310A  3  85 rr        	sta scno			; store new room number.
00310C  3               init_end:
00310C  3  60           	rts
00310D  3               
00310D  3               ;----------------------------------------------------------------
00310D  3               ; Test screen.
00310D  3               ;
00310D  3               ; global:	-
00310D  3               ; local:	x
00310D  3               ; calls:	-
00310D  3               ;----------------------------------------------------------------
00310D  3               
00310D  3               tstsc:
00310D  3  85 rr        	sta tmproom
00310F  3  18           	clc
003110  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
003112  3  AA           	tax 				; add displacement to map data.
003113  3  BD 44 35     	lda mapdat-MAPWID,x 		; find room number there.
003116  3  60           	rts
003117  3               
003117  3               ;tmproom:	.byte 0
003117  3               
003117  3               ;--------------------------
003117  3               ; Screen left.
003117  3               ;--------------------------
003117  3               
003117  3               scrl:
003117  3  AD 18 35     	lda roomtb 			; present room table pointer.
00311A  3  38           	sec
00311B  3  E9 01        	sbc #1				; room left.
00311D  3               scrl0:
00311D  3  20 0D 31     	jsr tstsc			; test screen.
003120  3  C9 FF        	cmp #255			; is there a screen this way?
003122  3  D0 01        	bne :+
003124  3  60           	rts				; no, return to loop.
003125  3               :
003125  3  A5 rr        	lda tmproom			; restore room displacement.
003127  3  8D 18 35     	sta roomtb			; new room table position.
00312A  3               scrl1:
00312A  3  20 00 31     	jsr initsc 			; set new screen.
00312D  3  A9 02        	lda #2
00312F  3  85 rr        	sta restfl 			; set it.
003131  3  60           	rts
003132  3               scrr:
003132  3  AD 18 35     	lda roomtb 			; room table pointer.
003135  3  18           	clc
003136  3  69 01        	adc #1				; room right.
003138  3  4C 1D 31     	jmp scrl0
00313B  3               scru:
00313B  3  AD 18 35     	lda roomtb 			; room table pointer.
00313E  3  38           	sec
00313F  3  E9 03        	sbc #MAPWID 			; room up.
003141  3  4C 1D 31     	jmp scrl0
003144  3               scrd:
003144  3  AD 18 35     	lda roomtb 			; room table pointer.
003147  3  18           	clc
003148  3  69 03        	adc #MAPWID 			; room down.
00314A  3  4C 1D 31     	jmp scrl0
00314D  3               
00314D  3               ;-----------------------------------------
00314D  3               ; Jump to new screen.
00314D  3               ;-----------------------------------------
00314D  3               
00314D  3               nwscr:
00314D  3  A2 00        	ldx #0				; start of map data.
00314F  3               nwscr0:
00314F  3  DD 47 35     	cmp mapdat,x
003152  3  F0 06        	beq nwscr1			; have we found a match for screen?
003154  3  E8           	inx 				; next room.
003155  3  E0 50        	cpx #80				; zero room count, 80 to search.
003157  3  D0 F6        	bne nwscr0			; keep looking.
003159  3  60           	rts
00315A  3               nwscr1:
00315A  3  8E 18 35     	stx roomtb			; set the map position.
00315D  3  4C 2A 31     	jmp scrl1			; draw new room.
003160  3               
003160  3               
003160  3               ;----------------------------------------------------------
003160  3               ; Gravity processing.
003160  3               ;----------------------------------------------------------
003160  3               
003160  3               grav:
003160  3  A0 0D        	ldy #13
003162  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003164  3  85 66        	sta z80_l
003166  3  A0 0E        	ldy #14
003168  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00316A  3  85 67        	sta z80_h
00316C  3  05 66        	ora z80_l			; merge in low byte.
00316E  3  D0 01        	bne :+
003170  3  60           	rts				; if neither is set, we're not in the air.
003171  3               :
003171  3  A0 00        	ldy #0
003173  3  B1 66        	lda (z80_hl),y			; pixels to move.
003175  3  85 61        	sta z80_a
003177  3  C9 63        	cmp #99				; reached the end?
003179  3  D0 0C        	bne grav0			; no, continue.
00317B  3               grav2:
00317B  3  C6 66        	dec z80_l			; go back to previous value.
00317D  3  C9 FF        	cmp #$ff
00317F  3  D0 02        	bne :+
003181  3  C6 67        	dec z80_h
003183  3               :
003183  3  B1 66        	lda (z80_hl),y			; fetch that from table.
003185  3  85 61        	sta z80_a
003187  3               grav0:
003187  3  E6 66        	inc z80_l			; point to next table entry.
003189  3  D0 02        	bne :+
00318B  3  E6 67        	inc z80_h
00318D  3               :
00318D  3  A5 66        	lda z80_l
00318F  3  A0 0D        	ldy #13
003191  3  91 68        	sta (z80_ix),y			; store new pointer low.
003193  3  A5 67        	lda z80_h
003195  3  A0 0E        	ldy #14
003197  3  91 68        	sta (z80_ix),y			; store new pointer high.
003199  3               grav1:
003199  3  A5 61        	lda z80_a
00319B  3  D0 01        	bne :+				; any movement required?
00319D  3  60           	rts				; no, not this time.
00319E  3               :
00319E  3  A5 61        	lda z80_a
0031A0  3  C9 80        	cmp #128			; is it up or down?
0031A2  3  B0 15        	bcs gravu			; it's up.
0031A4  3               gravd:
0031A4  3  85 63        	sta z80_b			; set pixels to move.
0031A6  3               gravd0:
0031A6  3  20 89 28     	jsr cangd			; can we go down?
0031A9  3  D0 28        	bne gravst			; can't move down, so stop.
0031AB  3  A0 08        	ldy #8
0031AD  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
0031AF  3  18           	clc
0031B0  3  69 01        	adc #1
0031B2  3  91 68        	sta (z80_ix),y
0031B4  3  C6 63        	dec z80_b
0031B6  3  D0 EE        	bne gravd0
0031B8  3  60           	rts
0031B9  3               gravu:
0031B9  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0031BB  3  18           	clc
0031BC  3  69 01        	adc #1
0031BE  3  85 63        	sta z80_b			; set pixels to move.
0031C0  3               gravu0:
0031C0  3  20 54 28     	jsr cangu			; can we go up?
0031C3  3  D0 6E        	bne ifalls			; can't move up, go down next.
0031C5  3  A0 08        	ldy #8
0031C7  3  B1 68        	lda (z80_ix),y
0031C9  3  38           	sec
0031CA  3  E9 01        	sbc #1
0031CC  3  91 68        	sta (z80_ix),y			; adjust new x coord.
0031CE  3  C6 63        	dec z80_b
0031D0  3  D0 EE        	bne gravu0
0031D2  3  60           	rts
0031D3  3               gravst:
0031D3  3  A0 0D        	ldy #13
0031D5  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0031D7  3  85 66        	sta z80_l
0031D9  3  A0 0E        	ldy #14
0031DB  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0031DD  3  85 67        	sta z80_h
0031DF  3               
0031DF  3  A9 00        	lda #0				; null value in pointer.
0031E1  3  A0 0D        	ldy #13
0031E3  3  91 68        	sta (z80_ix),y			; store new pointer low.
0031E5  3  C8           	iny
0031E6  3  91 68        	sta (z80_ix),y			; store new pointer high.
0031E8  3               
0031E8  3  A0 00        	ldy #0
0031EA  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
0031EC  3  C9 63        	cmp #99				; is it the end marker?
0031EE  3               evftf:
0031EE  3  F0 01        	beq :+				; yes, fallen too far.
0031F0  3  60           	rts
0031F1  3               :
0031F1  3  4C 67 37     	jmp evnt15			; EVENT FELLTOOFAR
0031F4  3               
0031F4  3               ;------------------------------------------------
0031F4  3               ; Initiate fall check.
0031F4  3               ;------------------------------------------------
0031F4  3               
0031F4  3               ifall:
0031F4  3  A0 0D        	ldy #13
0031F6  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0031F8  3  85 66        	sta z80_l
0031FA  3  A0 0E        	ldy #14
0031FC  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0031FE  3  85 67        	sta z80_h			; high byte in accumulator.
003200  3  05 66        	ora z80_l			; merge in low byte.
003202  3  F0 01        	beq :+
003204  3  60           	rts				; if either is set, we're already in the air.
003205  3               :
003205  3  A0 09        	ldy #9
003207  3  B1 68        	lda (z80_ix),y			; y coordinate.
003209  3  85 rr        	sta dispx
00320B  3  A0 08        	ldy #8
00320D  3  B1 68        	lda (z80_ix),y			; look x coordinate.
00320F  3  18           	clc
003210  3               numsp7:
003210  3  69 10        	adc #SPR_HGT			; add 16 pixels.
003212  3  85 rr        	sta dispy			; set up test coordinates.
003214  3  20 FE 2A     	jsr tstbl			; get map address.
003217  3  20 2B 2A     	jsr plchk			; block, platform check.
00321A  3  F0 01        	beq :+
00321C  3  60           	rts				; it's solid, don't fall.
00321D  3               :
00321D  3  E6 rr        	inc bufaddr			; look right one cell.
00321F  3  20 2B 2A     	jsr plchk			; block, platform check.
003222  3  F0 01        	beq :+
003224  3  60           	rts				; it's solid, don't fall.
003225  3               :
003225  3  A5 rr        	lda dispx			; y coordinate.
003227  3  29 07        	and #7				; position straddling block cells.
003229  3  F0 08        	beq ifalls			; no more checks needed.
00322B  3  E6 rr        	inc bufaddr			; look to third cell.
00322D  3  20 2B 2A     	jsr plchk			; block, platform check.
003230  3  F0 01        	beq :+
003232  3  60           	rts				; it's solid, don't fall.
003233  3               :
003233  3               ifalls:
003233  3  A9 1D        	lda #<jtab			; jump table start.
003235  3  85 66        	sta z80_l
003237  3  A9 3C        	lda #>jtab
003239  3  85 67        	sta z80_h
00323B  3               ifal0:
00323B  3  E6 66        	inc z80_l			; point to next value.
00323D  3  D0 02        	bne :+
00323F  3  E6 67        	inc z80_h
003241  3               :
003241  3  A0 00        	ldy #0
003243  3  B1 66        	lda (z80_hl),y			; fetch value.
003245  3  F0 F4        	beq ifal0			; no, get next value.
003247  3  C9 63        	cmp #99				; reached end of table?
003249  3  D0 01        	bne :+
00324B  3  60           	rts				; yes, don't fall.
00324C  3               :
00324C  3  C9 80        	cmp #128			; is it going up?
00324E  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
003250  3               
003250  3  A0 0D        	ldy #13
003252  3  A5 66        	lda z80_l
003254  3  91 68        	sta (z80_ix),y 			; set jump low.
003256  3  A0 0E        	ldy #14
003258  3  A5 67        	lda z80_h
00325A  3  91 68        	sta (z80_ix),y 			; set jump high.
00325C  3  60           	rts
00325D  3               
00325D  3               
00325D  3               ;----------------------------------------------------
00325D  3               ; Get frame data for a particular sprite.
00325D  3               ; Input:
00325D  3               ;  a		= framenumer
00325D  3               ; Output:
00325D  3               ;  hl		= frame address
00325D  3               ;
00325D  3               ; global:	hl,frmptr
00325D  3               ; local:	-
00325D  3               ; calls:	-
00325D  3               ;----------------------------------------------------
00325D  3               
00325D  3               gfrm:
00325D  3  0A           	asl a	 		 	; multiple of 2.
00325E  3  18           	clc
00325F  3  6D 1A 20     	adc frmptr 			; frames used by game.
003262  3  85 66        	sta z80_l
003264  3  AD 1B 20     	lda frmptr+1
003267  3  69 00        	adc #0
003269  3  85 67        	sta z80_h 			; point to frame start.
00326B  3  60           	rts
00326C  3               
00326C  3               ;----------------------------------------------------
00326C  3               ; Find sprite list for current room.
00326C  3               ;
00326C  3               ; global:	hl
00326C  3               ; local:	x,y
00326C  3               ; calls:	-
00326C  3               ;----------------------------------------------------
00326C  3               
00326C  3               sprlst:
00326C  3  A9 F2        	lda #<nmedat 			; list of enemy sprites.
00326E  3  85 66        	sta z80_l
003270  3  A9 38        	lda #>nmedat
003272  3  85 67        	sta z80_h
003274  3  A6 rr        	ldx scno 			; screen number.
003276  3  D0 01        	bne sprls2 			; is it the first screen?
003278  3  60           	rts 				; yes, don't need to search data.
003279  3               sprls2:
003279  3  A0 00        	ldy #0
00327B  3               sprls1:
00327B  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
00327D  3  C9 FF        	cmp #255			; is it an end marker?
00327F  3  F0 0E        	beq sprls0 			; yes, end of this room.
003281  3               
003281  3  18           	clc 				; point to next sprite in list.
003282  3  A5 66        	lda z80_l
003284  3  69 04        	adc #NMESIZ
003286  3  85 66        	sta z80_l
003288  3  90 02        	bcc :+
00328A  3  E6 67        	inc z80_h
00328C  3               :
00328C  3  4C 7B 32     	jmp sprls1 			; continue until end of room.
00328F  3               sprls0:
00328F  3  E6 66        	inc z80_l 			; point to start of next screen.s
003291  3  D0 02        	bne :+
003293  3  E6 67        	inc z80_h
003295  3               :
003295  3  CA           	dex
003296  3  D0 E3        	bne sprls1 			; continue until room found.
003298  3  60           	rts
003299  3               
003299  3               
003299  3               ;----------------------------------------------------
003299  3               ; Clear all but a single player sprite.
003299  3               ;
003299  3               ; global:	-
003299  3               ; local:	x,y,ix
003299  3               ; calls:	-
003299  3               ;----------------------------------------------------
003299  3               
003299  3               nspr:
003299  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00329B  3  85 rr        	sta sprcnt
00329D  3  A9 3B        	lda #<sprtab 			; sprite table.
00329F  3  85 68        	sta z80_x
0032A1  3  A9 34        	lda #>sprtab
0032A3  3  85 69        	sta z80_i
0032A5  3               nspr0:
0032A5  3  A0 00        	ldy #0 				; fetch sprite type.
0032A7  3  B1 68        	lda (z80_ix),y 			; is it a player?
0032A9  3  F0 1A        	beq nspr1 			; yes, keep this one.
0032AB  3               
0032AB  3  A9 FF        	lda #255
0032AD  3  A0 00        	ldy #0 				; fetch sprite type.
0032AF  3  91 68        	sta (z80_ix),y 			; delete sprite.
0032B1  3  A0 05        	ldy #5
0032B3  3  91 68        	sta (z80_ix),y 			; remove next type.
0032B5  3               
0032B5  3  18           	clc	 			; next sprite.
0032B6  3  A5 68        	lda z80_x
0032B8  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0032BA  3  85 68        	sta z80_x
0032BC  3  90 02        	bcc :+
0032BE  3  E6 69        	inc z80_i
0032C0  3               :
0032C0  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0032C2  3  D0 E1        	bne nspr0
0032C4  3  60           	rts
0032C5  3               nspr1:
0032C5  3  A9 FF        	lda #255
0032C7  3  A0 00        	ldy #0
0032C9  3  91 68        	sta (z80_ix),y 			; delete sprite.
0032CB  3               
0032CB  3  18           	clc	 			; point to next sprite.
0032CC  3  A5 68        	lda z80_x
0032CE  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0032D0  3  85 68        	sta z80_x
0032D2  3  90 02        	bcc :+
0032D4  3  E6 69        	inc z80_i
0032D6  3               :
0032D6  3  C6 rr        	dec sprcnt	 			; one less to do.
0032D8  3  D0 01        	bne nspr2
0032DA  3  60           	rts
0032DB  3               nspr2:
0032DB  3  A9 FF        	lda #255
0032DD  3  A0 00        	ldy #0
0032DF  3  91 68        	sta (z80_ix),y 			; delete sprite.
0032E1  3  A0 05        	ldy #5
0032E3  3  91 68        	sta (z80_ix),y 			; remove next type.
0032E5  3               
0032E5  3  18           	clc	 			; next sprite.
0032E6  3  A5 68        	lda z80_x
0032E8  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0032EA  3  85 68        	sta z80_x
0032EC  3  90 02        	bcc :+
0032EE  3  E6 69        	inc z80_i
0032F0  3               :
0032F0  3  C6 rr        	dec sprcnt	 			; one less space in table.
0032F2  3  D0 E7        	bne nspr2
0032F4  3  60           	rts
0032F5  3               
0032F5  3               ;----------------------------------------------------------
0032F5  3               ; Two initialisation routines.
0032F5  3               ; Initialise sprites - copy everything from list to table.
0032F5  3               ;
0032F5  3               ; global:	-
0032F5  3               ; local:	x,y,ix
0032F5  3               ; calls:	cpsp
0032F5  3               ;----------------------------------------------------------
0032F5  3               
0032F5  3               ispr:
0032F5  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0032F7  3  85 rr        	sta sprcnt
0032F9  3  A9 3B        	lda #<sprtab			; sprite table.
0032FB  3  85 68        	sta z80_x
0032FD  3  A9 34        	lda #>sprtab
0032FF  3  85 69        	sta z80_i
003301  3               ispr2:
003301  3  A0 00        	ldy #0
003303  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003305  3  C9 FF        	cmp #255 			; is it an end marker?
003307  3  D0 01        	bne :+
003309  3  60           	rts 				; yes, no more to do.
00330A  3               :
00330A  3               ispr1:
00330A  3  A0 00        	ldy #0
00330C  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
00330E  3  C9 FF        	cmp #255 			; is it enabled yet?
003310  3  D0 08        	bne ispr4			; yes, try another slot.
003312  3               
003312  3  A0 05        	ldy #5
003314  3  B1 68        	lda (z80_ix),y		 	; next type.
003316  3  C9 FF        	cmp #255 			; is it enabled yet?
003318  3  F0 10        	beq ispr3 			; no, process this one.
00331A  3               ispr4:
00331A  3  18           	clc 				; next sprite.
00331B  3  A5 68        	lda z80_x
00331D  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00331F  3  85 68        	sta z80_x
003321  3  90 02        	bcc :+
003323  3  E6 69        	inc z80_i
003325  3               :
003325  3  C6 rr        	dec sprcnt
003327  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
003329  3  60           	rts  				; no more room in table.
00332A  3               ispr3:
00332A  3  20 7D 33     	jsr cpsp			; initialise a sprite.
00332D  3  C6 rr        	dec sprcnt			; one less space in the table.
00332F  3  D0 D0        	bne ispr2
003331  3  60           	rts
003332  3               
003332  3               
003332  3               ;-----------------------------------------------------------------------
003332  3               ; Initialise sprites - but not player, we're keeping the old one.
003332  3               ;
003332  3               ; global:	-
003332  3               ; local:	x,y,ix
003332  3               ; calls:	cpsp
003332  3               ;-----------------------------------------------------------------------
003332  3               
003332  3               kspr:
003332  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
003334  3  A9 3B        	lda #<sprtab 			; sprite table.
003336  3  85 68        	sta z80_x
003338  3  A9 34        	lda #>sprtab
00333A  3  85 69        	sta z80_i
00333C  3               kspr2:
00333C  3  A0 00        	ldy #0
00333E  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003340  3  C9 FF        	cmp #255 			; is it an end marker?
003342  3  D0 01        	bne :+
003344  3  60           	rts 				; yes, no more to do.
003345  3               :
003345  3  C9 00        	cmp #0
003347  3  D0 0E        	bne kspr1 			; no, add to table as normal.
003349  3               
003349  3  18           	clc 				; next sprite.
00334A  3  A5 66        	lda z80_l
00334C  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
00334E  3  85 66        	sta z80_l
003350  3  90 02        	bcc :+
003352  3  E6 67        	inc z80_h
003354  3               :
003354  3  4C 3C 33     	jmp kspr2
003357  3               kspr1:
003357  3  A0 00        	ldy #0 				; fetch sprite type.
003359  3  B1 68        	lda (z80_ix),y
00335B  3  C9 FF        	cmp #255 			; is it enabled yet?
00335D  3  D0 08        	bne kspr4 			; yes, try another slot.
00335F  3               
00335F  3  A0 05        	ldy #5 				; next type.
003361  3  B1 68        	lda (z80_ix),y
003363  3  C9 FF        	cmp #255 			; is it enabled yet?
003365  3  F0 0F        	beq kspr3 			; no, process this one.
003367  3               kspr4:
003367  3  18           	clc 				; next sprite.
003368  3  A5 68        	lda z80_x
00336A  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00336C  3  85 68        	sta z80_x
00336E  3  90 02        	bcc :+
003370  3  E6 69        	inc z80_i
003372  3               :
003372  3  CA           	dex	 			; repeat for remaining sprites.
003373  3  D0 E2        	bne kspr1
003375  3  60           	rts  				; no more room in table.
003376  3               kspr3:
003376  3  20 7D 33     	jsr cpsp 			; copy sprite to table.
003379  3  CA           	dex	 			; one less space in the table.
00337A  3  D0 C0        	bne kspr2
00337C  3  60           	rts
00337D  3               
00337D  3               ;----------------------------------------------
00337D  3               ; Copy sprite from list to table.
00337D  3               ;
00337D  3               ; global:	hl,ix
00337D  3               ; local:	y
00337D  3               ; calls:	evnt09
00337D  3               ;----------------------------------------------
00337D  3               
00337D  3               cpsp:
00337D  3  A0 00        	ldy #0				; fetch byte from table.
00337F  3  B1 66        	lda (z80_hl),y
003381  3  91 68        	sta (z80_ix),y			; set up type.
003383  3  A0 05        	ldy #PAM1ST
003385  3  91 68        	sta (z80_ix),y 			; set up type.
003387  3               
003387  3  E6 66        	inc z80_l 			; move to next byte.
003389  3  D0 02        	bne :+
00338B  3  E6 67        	inc z80_h
00338D  3               :
00338D  3  A0 00        	ldy #0 				; fetch byte from table.
00338F  3  B1 66        	lda (z80_hl),y
003391  3  A0 06        	ldy #6
003393  3  91 68        	sta (z80_ix),y			; set up image.
003395  3               
003395  3  E6 66        	inc z80_l 			; move to next byte.
003397  3  D0 02        	bne :+
003399  3  E6 67        	inc z80_h
00339B  3               :
00339B  3  A0 00        	ldy #0
00339D  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
00339F  3  A0 08        	ldy #8
0033A1  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0033A3  3               
0033A3  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0033A5  3  A0 03        	ldy #3
0033A7  3  91 68        	sta (z80_ix),y
0033A9  3               
0033A9  3  E6 66        	inc z80_l 			; move to next byte.
0033AB  3  D0 02        	bne :+
0033AD  3  E6 67        	inc z80_h
0033AF  3               :
0033AF  3  A0 00        	ldy #0 				; fetch byte from table.
0033B1  3  B1 66        	lda (z80_hl),y
0033B3  3  A0 09        	ldy #9
0033B5  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0033B7  3               
0033B7  3  E6 66        	inc z80_l 			; move to next byte.
0033B9  3  D0 02        	bne :+
0033BB  3  E6 67        	inc z80_h
0033BD  3               :
0033BD  3  A9 00        	lda #0				; zeroes in accumulator.
0033BF  3  A0 07        	ldy #7 				; reset frame number.
0033C1  3  91 68        	sta (z80_ix),y
0033C3  3  A0 0A        	ldy #10 			; reset direction.
0033C5  3  91 68        	sta (z80_ix),y
0033C7  3  A0 0D        	ldy #13				; reset jump pointer low.
0033C9  3  91 68        	sta (z80_ix),y
0033CB  3  A0 0E        	ldy #14	 			; reset jump pointer high.
0033CD  3  91 68        	sta (z80_ix),y
0033CF  3               
0033CF  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
0033D1  3  A0 10        	ldy #16
0033D3  3  91 68        	sta (z80_ix),y
0033D5  3               evis0:
0033D5  3  A5 69        	lda z80_i
0033D7  3  48           	pha
0033D8  3  A5 68        	lda z80_x
0033DA  3  48           	pha
0033DB  3  A5 67        	lda z80_h
0033DD  3  48           	pha
0033DE  3  A5 66        	lda z80_l
0033E0  3  48           	pha
0033E1  3               
0033E1  3  20 57 35     	jsr evnt09 			; perform event.
0033E4  3               
0033E4  3  68           	pla
0033E5  3  85 66        	sta z80_l
0033E7  3  68           	pla
0033E8  3  85 67        	sta z80_h
0033EA  3  68           	pla
0033EB  3  85 68        	sta z80_x
0033ED  3  68           	pla
0033EE  3  85 69        	sta z80_i
0033F0  3               
0033F0  3  18           	clc
0033F1  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0033F3  3  69 11        	adc #TABSIZ		 	; next sprite.
0033F5  3  85 68        	sta z80_x
0033F7  3  90 02        	bcc :+
0033F9  3  E6 69        	inc z80_i
0033FB  3               :
0033FB  3  60           	rts
0033FC  3               
0033FC  3               
0033FC  3               ;-------------------------------------
0033FC  3               ; Clear the play area window.
0033FC  3               ;-------------------------------------
0033FC  3               
0033FC  3               clw:
0033FC  3  AD 26 20     	lda wintop			; get coordinates of window.
0033FF  3  85 rr        	sta dispy			; put into dispx for calculation.
003401  3  AD 27 20     	lda winlft
003404  3  85 rr        	sta dispx
003406  3               
003406  3  AD 28 20     	lda winhgt			; height of window.
003409  3  85 rr        	sta rrow			; copy to b register.
00340B  3               clw3:
00340B  3  AD 29 20     	lda winwid 			; width of window.
00340E  3  85 rr        	sta rcol
003410  3               clw2:
003410  3  20 39 26     	jsr gprad 			; get print address.
003413  3  A9 00        	lda #0				; zero byte to write.
003415  3  A2 07        	ldx #7				; pixel height of each cell.
003417  3               clw1:
003417  3  BC BF 26     	ldy scrtab,x
00341A  3  91 rr        	sta (scraddr),y 			; copy to screen.
00341C  3  CA           	dex				; next screen row down.
00341D  3  10 F8        	bpl clw1
00341F  3               
00341F  3  E6 rr        	inc dispx			; next column.
003421  3  C6 rr        	dec rcol			; one less to do.
003423  3  D0 EB        	bne clw2			; repeat for remaining columns.
003425  3               
003425  3  AD 27 20     	lda winlft			; get left edge.
003428  3  85 rr        	sta dispx 			; reset x.
00342A  3  E6 rr        	inc dispy 			; next line down.
00342C  3               
00342C  3  C6 rr        	dec rrow
00342E  3  D0 DB        	bne clw3			; repeat down the screen.
003430  3               
003430  3  AD 26 20     	lda wintop			; get coordinates of window.
003433  3  85 rr        	sta chary			; put into display position.
003435  3  AD 27 20     	lda winlft
003438  3  85 rr        	sta charx
00343A  3  60           	rts
00343B  3               
00343B  3               
00343B  3               ;----------------------------------------------------------
00343B  3               ; Effects code.
00343B  3               ; Ticker routine is called 25 times per second.
00343B  3               ;
00343B  3               ; HL = txtscr = left text screen address
00343B  3               ; DE = txtscr+txtwid-1 = right text screen address
00343B  3               ; BC = txtpos = text scroller position
00343B  3               ;
00343B  3               ;----------------------------------------------------------
00343B  3               
00343B  3               .if sflag
00343B  3               scrly:
00343B  3               	rts
00343B  3               	.word txtscr         	; get left screen address.
00343B  3               	sta scr_l
00343B  3               	lda txtscr+1
00343B  3               	sta scr_l+1
00343B  3               	sta scr_r+1
00343B  3               
00343B  3               	stx xtmp
00343B  3               
00343B  3               	clc         		; get right screen address.
00343B  3               	lda scr_l
00343B  3               	adc txtwid
00343B  3               	sta scr_r
00343B  3               	dec scr_r
00343B  3               scrly1:
00343B  3               	ldy txtwid		; set txtwide
00343B  3               	dey
00343B  3               	clc
00343B  3               scrly0:
00343B  3               	lda (scr_l),y		; scroll 1 line
00343B  3               	rol a
00343B  3               	sta (scr_l),y
00343B  3               	dey
00343B  3               	bpl scrly0
00343B  3               
00343B  3               	clc			; point to next line
00343B  3               	lda scr_l
00343B  3               	adc #32
00343B  3               	sta scr_l
00343B  3               	bcc scrly1		; repeat 8 times
00343B  3               
00343B  3               	lda txtpos 		; get text pointer.
00343B  3               	sta scr_txt
00343B  3               	lda txtpos+1
00343B  3               	sta scr_txt+1
00343B  3               
00343B  3               	ldy #0
00343B  3               	lda (scr_txt),y 		; find character we're displaying.
00343B  3               	and #127 		; remove end marker bit if applicable.
00343B  3               	cmp #13			; is it newline?
00343B  3               	bne scrly5 		; no, it's okay.
00343B  3               	lda #32			; convert to a space instead.
00343B  3               scrly5:
00343B  3               	sta fntaddr		; calculate char address
00343B  3               	lda #0
00343B  3               	sta fntaddr+1
00343B  3               	asl fntaddr  		; multiply char by 8.
00343B  3               	rol fntaddr+1
00343B  3               	asl fntaddr
00343B  3               	rol fntaddr+1
00343B  3               	asl fntaddr
00343B  3               	rol fntaddr+1
00343B  3               	lda fntaddr
00343B  3               	clc
00343B  3               	adc #<(FONT-256)
00343B  3               	sta scrly3+1		; that's the low byte.
00343B  3               	lda fntaddr+1
00343B  3               	adc #>(FONT-256)
00343B  3               	sta scrly3+2		; add displacement.
00343B  3               
00343B  3               	ldx #0
00343B  3               scrly3:
00343B  3               	lda $3333,x		; get image of char line.
00343B  3               	and txtbit
00343B  3               	beq scrly2		; don't plot pixel
00343B  3               	ldy scrline,x
00343B  3               	lda (scr_r),y
00343B  3               	clc
00343B  3               	ora #1
00343B  3               	sta (scr_r),y		; plot pixel
00343B  3               scrly2:
00343B  3               	inx			; next line of char.
00343B  3               	cpx #8
00343B  3               	bne scrly3
00343B  3               
00343B  3               	lsr txtbit		; bit of text to display.
00343B  3               	bcs :+
00343B  3               	rts
00343B  3               :
00343B  3               	ldy #0
00343B  3               	lda (scr_txt),y 	; what was the character?
00343B  3               	asl a	  		; end of message?
00343B  3               	bcs scrly4
00343B  3               	inc txtpos
00343B  3               	bne :+
00343B  3               	inc txtpos+1
00343B  3               :
00343B  3               	jmp scrly6 		; not yet - continue.
00343B  3               scrly4:
00343B  3               	lda txtini 		; start of scrolling message.
00343B  3               	sta txtpos
00343B  3               	lda txtini+1
00343B  3               	sta txtpos+1
00343B  3               scrly6:
00343B  3               	lda #128
00343B  3               	sta txtbit
00343B  3               	ldx xtmp
00343B  3               	rts
00343B  3               
00343B  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
00343B  3               
00343B  3               ;-------------------------------------------------------
00343B  3               ; Entry TICKER command
00343B  3               ;
00343B  3               ; Entry:
00343B  3               ;  z80_b = message nr
00343B  3               ;  z80_c = width
00343B  3               ;-------------------------------------------------------
00343B  3               
00343B  3               iscrly:
00343B  3               	jsr prescr 		; set up display position.
00343B  3               
00343B  3               	lda #<msgdat 		; text messages.
00343B  3               	sta z80_l
00343B  3               	lda #>msgdat
00343B  3               	sta z80_h
00343B  3               
00343B  3               	lda z80_c 		; width.
00343B  3               	sec
00343B  3               	sbc #1			; subtract one.
00343B  3               	cmp #32 		; is it between 1 and 32?
00343B  3               	bcc :+
00343B  3               	lda #$60
00343B  3               	jmp iscrl0		; no, disable messages.
00343B  3               :
00343B  3               	ldx z80_b		; message number.
00343B  3               	jsr getwrd 		; find message start.
00343B  3               
00343B  3               	lda z80_l		; set initial text position.
00343B  3               	sta txtini
00343B  3               	lda z80_h
00343B  3               	sta txtini+1
00343B  3               
00343B  3               	lda #$ad		; code for lda adrr
00343B  3               iscrl0:
00343B  3               	sta scrly		; enable/disable scrolling routine.
00343B  3               
00343B  3               	jsr prescr 		; set up display position.
00343B  3               	jsr gprad 		; get print address.
00343B  3               
00343B  3               	lda scraddr 		; set text screen address.
00343B  3               	sta txtscr
00343B  3               	lda scraddr+1
00343B  3               	sta txtscr+1
00343B  3               
00343B  3               	lda z80_c		; width.
00343B  3               	sta txtwid		; set width in working storage.
00343B  3               
00343B  3               	lda #128 		; start with leftmost bit.
00343B  3               	sta txtbit
00343B  3               
00343B  3               	jmp scrly4
00343B  3               .endif
00343B  3               
00343B  3               ;------------------------------------------------------------------
00343B  3               ; Dig routine, conditional assembly depending on dflag
00343B  3               ;------------------------------------------------------------------
00343B  3               .if dflag
00343B  3               dig:
00343B  3               	and #3
00343B  3               	beq digr		; dig right
00343B  3               	cmp #1
00343B  3               	beq digl		; dig left
00343B  3               	cmp #2
00343B  3               	beq digd		; dig down
00343B  3               
00343B  3               ; Dig up.
00343B  3               
00343B  3               digu:				; dig up
00343B  3               	ldy #8
00343B  3               	lda (z80_ix),y
00343B  3               	sec
00343B  3               	sbc #2
00343B  3               	sta dispy		; set y
00343B  3               
00343B  3               	iny
00343B  3               	lda (z80_ix),y
00343B  3               	sta dispx		; set x
00343B  3               	jmp digv
00343B  3               
00343B  3               ; Dig down.
00343B  3               
00343B  3               digd:
00343B  3               	ldy #9
00343B  3               	lda (z80_ix),y
00343B  3               	sta dispx		; set y
00343B  3               
00343B  3               	dey
00343B  3               	clc
00343B  3               	lda (z80_ix),y
00343B  3               	adc #16
00343B  3               	sta dispy		; set y
00343B  3               	jmp digv
00343B  3               
00343B  3               ; Dig left.
00343B  3               
00343B  3               digl:
00343B  3               	ldy #8
00343B  3               	lda (z80_ix),y
00343B  3               	sta dispy		; set y
00343B  3               
00343B  3               	iny
00343B  3               	lda (z80_ix),y
00343B  3               	sec
00343B  3               	sbc #2			; x=x-2
00343B  3               	sta dispx		; set x
00343B  3               	jmp digh
00343B  3               
00343B  3               ; Dig right.
00343B  3               
00343B  3               digr:
00343B  3               	ldy #8
00343B  3               	lda (z80_ix),y
00343B  3               	sta dispy		; set y
00343B  3               
00343B  3               	iny
00343B  3               	lda (z80_ix),y
00343B  3               	clc
00343B  3               	adc #16
00343B  3               	sta dispx		; set x+16
00343B  3               	jmp digh
00343B  3               
00343B  3               ; Vertical digging
00343B  3               
00343B  3               digv:
00343B  3               	jsr tstbl		; check blocktype in MAP
00343B  3               	jsr fdchk		; test if FODDER
00343B  3               
00343B  3               	clc
00343B  3               	lda dispx		; look 1 cell down
00343B  3               	adc #8
00343B  3               	sta dispx
00343B  3               	jsr tstbl		; check blocktype in MAP
00343B  3               	jsr fdchk
00343B  3               	lda dispx
00343B  3               	and #7
00343B  3               	bne :+
00343B  3               	rts
00343B  3               :
00343B  3               	clc
00343B  3               	lda dispx		; look 1 cell down
00343B  3               	adc #8
00343B  3               	sta dispx
00343B  3               	jsr tstbl		; check blocktype in MAP
00343B  3               	jmp fdchk
00343B  3               
00343B  3               ; Horizontal digging
00343B  3               
00343B  3               digh:
00343B  3               	jsr tstbl		; check blocktype in MAP
00343B  3               	jsr fdchk		; test if FODDER
00343B  3               
00343B  3               	clc
00343B  3               	lda dispy		; look 1 cell down
00343B  3               	adc #8
00343B  3               	sta dispy
00343B  3               	jsr tstbl		; check blocktype in MAP
00343B  3               	jsr fdchk
00343B  3               	lda dispy
00343B  3               	and #7
00343B  3               	bne :+
00343B  3               	rts
00343B  3               :
00343B  3               	clc
00343B  3               	lda dispy		; look 1 cell down
00343B  3               	adc #8
00343B  3               	sta dispy
00343B  3               	jsr tstbl		; check blocktype in MAP
00343B  3               	jmp fdchk
00343B  3               
00343B  3               digcnt:	.byte 0
00343B  3               
00343B  3               .endif
00343B  3               
00343B  3               ;------------------------------------------------------------------
00343B  3               ; Sprite table
00343B  3               ;------------------------------------------------------------------
00343B  3               
00343B  3               
00343B  3               ; ix+0  = type.
00343B  3               ; ix+1  = sprite image number.
00343B  3               ; ix+2  = frame.
00343B  3               ; ix+3  = y coord.
00343B  3               ; ix+4  = x coord.
00343B  3               
00343B  3               ; ix+5  = new type.
00343B  3               ; ix+6  = new image number.
00343B  3               ; ix+7  = new frame.
00343B  3               ; ix+8  = new y coord.
00343B  3               ; ix+9  = new x coord.
00343B  3               
00343B  3               ; ix+10 = direction.
00343B  3               ; ix+11 = parameter 1.
00343B  3               ; ix+12 = parameter 2.
00343B  3               ; ix+13 = jump pointer low.
00343B  3               ; ix+14 = jump pointer high.
00343B  3               ; ix+15 = data pointer low.
00343B  3               ; ix+16 = data pointer high.
00343B  3               
00343B  3               ; block NUMSPR * TABSIZ,255
00343B  3               
00343B  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
00343F  3  FF FF FF FF  
003443  3  FF FF FF FF  
003507  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00350B  3  FF FF FF 00  
00350F  3  C0 78 00 00  
003518  3  07           roomtb:	.byte 7                      ; start room map offset.
003519  3               
003519  3               ; User routine.  Put your own code in here to be called with USER instruction.
003519  3               ; if USER has an argument it will be passed in the accumulator.
003519  3               
003519  3               user:
003519  3               	.include "user.inc"
003519  4  60           	rts
00351A  4               
00351A  3               
00351A  3               setfgcol:
00351A  3  29 03        	and #3
00351C  3  A8           	tay
00351D  3  B9 3F 35     	lda codcol,y
003520  3  4C 36 35     	jmp calfgc
003523  3               
003523  3               setbgcol:
003523  3  29 03        	and #3
003525  3               calbgc:
003525  3  A8           	tay
003526  3  B9 3F 35     	lda codcol,y
003529  3  48           	pha
00352A  3  AD 3D 35     	lda andeor
00352D  3  4D 3E 35     	eor andeor+1
003530  3  AA           	tax
003531  3  68           	pla
003532  3  8D 3E 35     	sta andeor+1
003535  3  8A           	txa
003536  3               calfgc:
003536  3  4D 3E 35     	eor andeor+1
003539  3  8D 3D 35     	sta andeor
00353C  3               calex1:
00353C  3  60           	rts
00353D  3               
00353D  3  00 00        andeor:	.byte 0,0
00353F  3  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
003543  3               
003543  3               ; Everything below here will be generated by the editors.
003543  3               
003543  3  60                   rts
003544  3               WINDOWTOP = 1
003544  3               WINDOWLFT = 1
003544  3               WINDOWHGT = 22
003544  3               WINDOWWID = 30 ;a
003544  3               MAPWID = 3
003544  3  FF FF FF             .byte 255,255,255
003547  3               mapdat:
003547  3  FF 00 FF             .byte 255,0,255
00354A  3  FF FF FF             .byte 255,255,255
00354D  3  01           stmap:  .byte 1
00354E  3               
00354E  3               evnt00:
00354E  3  60                   rts
00354F  3               evnt01:
00354F  3  60                   rts
003550  3               evnt02:
003550  3  60                   rts
003551  3               evnt03:
003551  3  60                   rts
003552  3               evnt04:
003552  3  60                   rts
003553  3               evnt05:
003553  3  60                   rts
003554  3               evnt06:
003554  3  60                   rts
003555  3               evnt07:
003555  3  60                   rts
003556  3               evnt08:
003556  3  60                   rts
003557  3               evnt09:
003557  3  60                   rts
003558  3               evnt10:
003558  3  A9 00                lda #0		; AT
00355A  3  85 rr                sta chary
00355C  3  A9 01                lda #1
00355E  3  85 rr                sta charx
003560  3  A9 01                lda #1		; PRINTMODE
003562  3  85 rr                sta prtmod
003564  3  A9 00                lda #0		; PRINT
003566  3  20 9E 2B             jsr dmsg
003569  3  A9 00                lda #0		; PRINTMODE
00356B  3  85 rr                sta prtmod
00356D  3  A9 03                lda #3		; AT
00356F  3  85 rr                sta chary
003571  3  A9 01                lda #1
003573  3  85 rr                sta charx
003575  3  A9 01                lda #1		; PRINT
003577  3  20 9E 2B             jsr dmsg
00357A  3  A5 rr                lda joyval	; KEY
00357C  3  29 01                and #1
00357E  3  F0 03                beq :+
003580  3  4C 8B 35             jmp k00116
003583  3               :
003583  3  A9 02                lda #2		; PRINT
003585  3  20 9E 2B             jsr dmsg
003588  3  4C 90 35             jmp k00126
00358B  3  A9 03        k00116: lda #3		; PRINT
00358D  3  20 9E 2B             jsr dmsg
003590  3  A9 04        k00126: lda #4		; AT
003592  3  85 rr                sta chary
003594  3  A9 01                lda #1
003596  3  85 rr                sta charx
003598  3  A9 04                lda #4		; PRINT
00359A  3  20 9E 2B             jsr dmsg
00359D  3  A5 rr                lda joyval	; KEY
00359F  3  29 02                and #2
0035A1  3  F0 03                beq :+
0035A3  3  4C AE 35             jmp k00188
0035A6  3               :
0035A6  3  A9 05                lda #5		; PRINT
0035A8  3  20 9E 2B             jsr dmsg
0035AB  3  4C B3 35             jmp k00198
0035AE  3  A9 06        k00188: lda #6		; PRINT
0035B0  3  20 9E 2B             jsr dmsg
0035B3  3  A9 05        k00198: lda #5		; AT
0035B5  3  85 rr                sta chary
0035B7  3  A9 01                lda #1
0035B9  3  85 rr                sta charx
0035BB  3  A9 07                lda #7		; PRINT
0035BD  3  20 9E 2B             jsr dmsg
0035C0  3  A5 rr                lda joyval	; KEY
0035C2  3  29 04                and #4
0035C4  3  F0 03                beq :+
0035C6  3  4C D1 35             jmp k00261
0035C9  3               :
0035C9  3  A9 08                lda #8		; PRINT
0035CB  3  20 9E 2B             jsr dmsg
0035CE  3  4C D6 35             jmp k00271
0035D1  3  A9 09        k00261: lda #9		; PRINT
0035D3  3  20 9E 2B             jsr dmsg
0035D6  3  A9 06        k00271: lda #6		; AT
0035D8  3  85 rr                sta chary
0035DA  3  A9 01                lda #1
0035DC  3  85 rr                sta charx
0035DE  3  A9 0A                lda #10		; PRINT
0035E0  3  20 9E 2B             jsr dmsg
0035E3  3  A5 rr                lda joyval	; KEY
0035E5  3  29 08                and #8
0035E7  3  F0 03                beq :+
0035E9  3  4C F4 35             jmp k00334
0035EC  3               :
0035EC  3  A9 0B                lda #11		; PRINT
0035EE  3  20 9E 2B             jsr dmsg
0035F1  3  4C F9 35             jmp k00344
0035F4  3  A9 0C        k00334: lda #12		; PRINT
0035F6  3  20 9E 2B             jsr dmsg
0035F9  3  A9 07        k00344: lda #7		; AT
0035FB  3  85 rr                sta chary
0035FD  3  A9 01                lda #1
0035FF  3  85 rr                sta charx
003601  3  A9 0D                lda #13		; PRINT
003603  3  20 9E 2B             jsr dmsg
003606  3  A5 rr                lda joyval	; KEY
003608  3  29 10                and #16
00360A  3  F0 03                beq :+
00360C  3  4C 17 36             jmp k00407
00360F  3               :
00360F  3  A9 0E                lda #14		; PRINT
003611  3  20 9E 2B             jsr dmsg
003614  3  4C 1C 36             jmp k00418
003617  3  A9 0F        k00407: lda #15		; PRINT
003619  3  20 9E 2B             jsr dmsg
00361C  3  A9 08        k00418: lda #8		; AT
00361E  3  85 rr                sta chary
003620  3  A9 01                lda #1
003622  3  85 rr                sta charx
003624  3  A9 10                lda #16		; PRINT
003626  3  20 9E 2B             jsr dmsg
003629  3  A5 rr                lda joyval	; KEY
00362B  3  29 20                and #32
00362D  3  F0 03                beq :+
00362F  3  4C 3A 36             jmp k00481
003632  3               :
003632  3  A9 11                lda #17		; PRINT
003634  3  20 9E 2B             jsr dmsg
003637  3  4C 3F 36             jmp k00491
00363A  3  A9 12        k00481: lda #18		; PRINT
00363C  3  20 9E 2B             jsr dmsg
00363F  3  A9 09        k00491: lda #9		; AT
003641  3  85 rr                sta chary
003643  3  A9 01                lda #1
003645  3  85 rr                sta charx
003647  3  A9 13                lda #19		; PRINT
003649  3  20 9E 2B             jsr dmsg
00364C  3  A5 rr                lda joyval	; KEY
00364E  3  29 40                and #64
003650  3  F0 03                beq :+
003652  3  4C 5D 36             jmp k00554
003655  3               :
003655  3  A9 14                lda #20		; PRINT
003657  3  20 9E 2B             jsr dmsg
00365A  3  4C 62 36             jmp k00565
00365D  3  A9 15        k00554: lda #21		; PRINT
00365F  3  20 9E 2B             jsr dmsg
003662  3  A9 0A        k00565: lda #10		; AT
003664  3  85 rr                sta chary
003666  3  A9 01                lda #1
003668  3  85 rr                sta charx
00366A  3  A9 16                lda #22		; PRINT
00366C  3  20 9E 2B             jsr dmsg
00366F  3  A0 07                ldy #7 	; KEY
003671  3  B9 1E 3C             lda keys,y
003674  3  20 AD 3C             jsr ktest
003677  3  90 03                bcc :+
003679  3  4C 84 36             jmp k00632
00367C  3               :
00367C  3  A9 17                lda #23		; PRINT
00367E  3  20 9E 2B             jsr dmsg
003681  3  4C 89 36             jmp k00643
003684  3  A9 18        k00632: lda #24		; PRINT
003686  3  20 9E 2B             jsr dmsg
003689  3  A9 0B        k00643: lda #11		; AT
00368B  3  85 rr                sta chary
00368D  3  A9 01                lda #1
00368F  3  85 rr                sta charx
003691  3  A9 19                lda #25		; PRINT
003693  3  20 9E 2B             jsr dmsg
003696  3  A0 08                ldy #8 	; KEY
003698  3  B9 1E 3C             lda keys,y
00369B  3  20 AD 3C             jsr ktest
00369E  3  90 03                bcc :+
0036A0  3  4C AB 36             jmp k00711
0036A3  3               :
0036A3  3  A9 1A                lda #26		; PRINT
0036A5  3  20 9E 2B             jsr dmsg
0036A8  3  4C B0 36             jmp k00721
0036AB  3  A9 1B        k00711: lda #27		; PRINT
0036AD  3  20 9E 2B             jsr dmsg
0036B0  3  A9 0C        k00721: lda #12		; AT
0036B2  3  85 rr                sta chary
0036B4  3  A9 01                lda #1
0036B6  3  85 rr                sta charx
0036B8  3  A9 1C                lda #28		; PRINT
0036BA  3  20 9E 2B             jsr dmsg
0036BD  3  A0 09                ldy #9 	; KEY
0036BF  3  B9 1E 3C             lda keys,y
0036C2  3  20 AD 3C             jsr ktest
0036C5  3  90 03                bcc :+
0036C7  3  4C D2 36             jmp k00789
0036CA  3               :
0036CA  3  A9 1D                lda #29		; PRINT
0036CC  3  20 9E 2B             jsr dmsg
0036CF  3  4C D7 36             jmp k00799
0036D2  3  A9 1E        k00789: lda #30		; PRINT
0036D4  3  20 9E 2B             jsr dmsg
0036D7  3  A9 0D        k00799: lda #13		; AT
0036D9  3  85 rr                sta chary
0036DB  3  A9 01                lda #1
0036DD  3  85 rr                sta charx
0036DF  3  A9 1F                lda #31		; PRINT
0036E1  3  20 9E 2B             jsr dmsg
0036E4  3  A0 0A                ldy #10 	; KEY
0036E6  3  B9 1E 3C             lda keys,y
0036E9  3  20 AD 3C             jsr ktest
0036EC  3  90 03                bcc :+
0036EE  3  4C F9 36             jmp k00867
0036F1  3               :
0036F1  3  A9 20                lda #32		; PRINT
0036F3  3  20 9E 2B             jsr dmsg
0036F6  3  4C FE 36             jmp k00878
0036F9  3  A9 21        k00867: lda #33		; PRINT
0036FB  3  20 9E 2B             jsr dmsg
0036FE  3  60           k00878: rts
0036FF  3               evnt11:
0036FF  3  60                   rts
003700  3               evnt12:
003700  3  20 09 21             jsr cls		; CLS
003703  3  A9 08                lda #8		; AT
003705  3  85 rr                sta chary
003707  3  A9 05                lda #5
003709  3  85 rr                sta charx
00370B  3  A9 22                lda #34		; PRINT
00370D  3  20 9E 2B             jsr dmsg
003710  3  A9 0A                lda #10		; AT
003712  3  85 rr                sta chary
003714  3  A9 0A                lda #10
003716  3  85 rr                sta charx
003718  3  A9 23                lda #35		; PRINT
00371A  3  20 9E 2B             jsr dmsg
00371D  3  A9 0C                lda #12		; AT
00371F  3  85 rr                sta chary
003721  3  A9 0A                lda #10
003723  3  85 rr                sta charx
003725  3  A9 24                lda #36		; PRINT
003727  3  20 9E 2B             jsr dmsg
00372A  3  A9 00                lda #0
00372C  3  85 rr                sta varf
00372E  3  A9 00        m00102: lda #0
003730  3  C5 rr                cmp varf
003732  3  F0 03                beq *+5
003734  3  4C 64 37             jmp m00204
003737  3  A0 07                ldy #7 	; KEY
003739  3  B9 1E 3C             lda keys,y
00373C  3  20 AD 3C             jsr ktest
00373F  3  90 03                bcc :+
003741  3  4C 4C 37             jmp m00159
003744  3               :
003744  3  A9 01                lda #1
003746  3  85 rr                sta contrl
003748  3  A9 01                lda #1
00374A  3  85 rr                sta varf
00374C  3  A0 08        m00159: ldy #8 	; KEY
00374E  3  B9 1E 3C             lda keys,y
003751  3  20 AD 3C             jsr ktest
003754  3  90 03                bcc :+
003756  3  4C 61 37             jmp m00199
003759  3               :
003759  3  A9 02                lda #2
00375B  3  85 rr                sta contrl
00375D  3  A9 01                lda #1
00375F  3  85 rr                sta varf
003761  3  4C 2E 37     m00199: jmp m00102
003764  3  60           m00204: rts
003765  3               evnt13:
003765  3  60                   rts
003766  3               evnt14:
003766  3  60                   rts
003767  3               evnt15:
003767  3  60                   rts
003768  3               evnt16:
003768  3  60                   rts
003769  3               evnt17:
003769  3  60                   rts
00376A  3               evnt18:
00376A  3  60                   rts
00376B  3               evnt19:
00376B  3  60                   rts
00376C  3               evnt20:
00376C  3  A9 0A                lda #10	; PUT
00376E  3  85 rr                sta dispx
003770  3  A9 0A                lda #10
003772  3  85 rr                sta dispy
003774  3  A9 00                lda #0
003776  3  20 D3 23             jsr drpob
003779  3  60                   rts
00377A  3  60           ptcusr: rts
00377B  3               msgdat:
00377B  3  4A 4F 59 53          .byte "JOYSTICK TEST:",160
00377F  3  54 49 43 4B  
003783  3  20 54 45 53  
00378A  3  4B 45 59 20          .byte "KEY RIGHT:",160
00378E  3  52 49 47 48  
003792  3  54 3A A0     
003795  3  4F CB                .byte "O",203
003797  3  2E AE                .byte ".",174
003799  3  4B 45 59 20          .byte "KEY LEFT :",160
00379D  3  4C 45 46 54  
0037A1  3  20 3A A0     
0037A4  3  4F CB                .byte "O",203
0037A6  3  2E AE                .byte ".",174
0037A8  3  4B 45 59 20          .byte "KEY DOWN :",160
0037AC  3  44 4F 57 4E  
0037B0  3  20 3A A0     
0037B3  3  4F CB                .byte "O",203
0037B5  3  2E AE                .byte ".",174
0037B7  3  4B 45 59 20          .byte "KEY UP   :",160
0037BB  3  55 50 20 20  
0037BF  3  20 3A A0     
0037C2  3  4F CB                .byte "O",203
0037C4  3  2E AE                .byte ".",174
0037C6  3  4B 45 59 20          .byte "KEY FIRE1:",160
0037CA  3  46 49 52 45  
0037CE  3  31 3A A0     
0037D1  3  4F CB                .byte "O",203
0037D3  3  2E AE                .byte ".",174
0037D5  3  4B 45 59 20          .byte "KEY FIRE2:",160
0037D9  3  46 49 52 45  
0037DD  3  32 3A A0     
0037E0  3  4F CB                .byte "O",203
0037E2  3  2E AE                .byte ".",174
0037E4  3  4B 45 59 20          .byte "KEY FIRE3:",160
0037E8  3  46 49 52 45  
0037EC  3  33 3A A0     
0037EF  3  4F CB                .byte "O",203
0037F1  3  2E AE                .byte ".",174
0037F3  3  4B 45 59 20          .byte "KEY OPT1 :",160
0037F7  3  4F 50 54 31  
0037FB  3  20 3A A0     
0037FE  3  4F CB                .byte "O",203
003800  3  2E AE                .byte ".",174
003802  3  4B 45 59 20          .byte "KEY OPT2 :",160
003806  3  4F 50 54 32  
00380A  3  20 3A A0     
00380D  3  4F CB                .byte "O",203
00380F  3  2E AE                .byte ".",174
003811  3  4B 45 59 20          .byte "KEY OPT3 :",160
003815  3  4F 50 54 33  
003819  3  20 3A A0     
00381C  3  4F CB                .byte "O",203
00381E  3  2E AE                .byte ".",174
003820  3  4B 45 59 20          .byte "KEY OPT4 :",160
003824  3  4F 50 54 34  
003828  3  20 3A A0     
00382B  3  4F CB                .byte "O",203
00382D  3  2E AE                .byte ".",174
00382F  3  53 45 4C 45          .byte "SELECT INPUT DEVIC",197
003833  3  43 54 20 49  
003837  3  4E 50 55 54  
003842  3  31 2E 4A 4F          .byte "1.JOYSTICK",177
003846  3  59 53 54 49  
00384A  3  43 4B B1     
00384D  3  32 2E 4A 4F          .byte "2.JOYSTICK",178
003851  3  59 53 54 49  
003855  3  43 4B B2     
003858  3               nummsg:
003858  3  25                   .byte 37
003859  3               chgfx:
003859  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00385D  3  00 00 00 00  
003861  3               bprop:
003861  3  00                   .byte 0
003862  3               sprgfx:
003862  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003866  3  00 00 00 00  
00386A  3  00 00 00 00  
003882  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003886  3  00 00 00 00  
00388A  3  00 00 00 00  
0038A2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0038A6  3  00 00 00 00  
0038AA  3  00 00 00 00  
0038C2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0038C6  3  00 00 00 00  
0038CA  3  00 00 00 00  
0038E2  3               frmlst:
0038E2  3  00 01 01 00          .byte 0,1,1,0
0038E6  3               scdat:
0038E6  3  09 00                .word 9
0038E8  3  FF 00 00 FF          .byte 255,0,0,255,0,0,255,0,148
0038EC  3  00 00 FF 00  
0038F0  3  94           
0038F1  3               numsc:
0038F1  3  01                   .byte 1
0038F2  3               nmedat:
0038F2  3  00 00 58 80          .byte 0,0,88,128,255
0038F6  3  FF           
0038F7  3               NUMOBJ = 1
0038F7  3               objdta:
0038F7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,32,0,160,32
0038FB  3  00 00 00 00  
0038FF  3  00 00 00 00  
00391D  3               font:
00391D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003921  3  00 00 00 00  
003925  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
003929  3  30 00 30 00  
00392D  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
003931  3  00 00 00 00  
003935  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
003939  3  6C FE 6C 00  
00393D  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
003941  3  7E 1E 7E 18  
003945  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
003949  3  30 6E CE 00  
00394D  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
003951  3  7E CC 7E 00  
003955  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
003959  3  00 00 00 00  
00395D  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
003961  3  18 18 0C 00  
003965  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
003969  3  30 30 60 00  
00396D  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
003971  3  7E 18 3C 00  
003975  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
003979  3  7E 18 18 00  
00397D  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
003981  3  00 18 18 30  
003985  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
003989  3  7E 00 00 00  
00398D  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
003991  3  00 38 38 00  
003995  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
003999  3  18 30 60 00  
00399D  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0039A1  3  F6 E6 7C 00  
0039A5  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
0039A9  3  18 18 7E 00  
0039AD  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
0039B1  3  7C C0 FE 00  
0039B5  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
0039B9  3  06 C6 7C 00  
0039BD  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
0039C1  3  D8 FE 18 00  
0039C5  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
0039C9  3  06 C6 7C 00  
0039CD  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
0039D1  3  C6 C6 7C 00  
0039D5  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
0039D9  3  18 30 30 00  
0039DD  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
0039E1  3  C6 C6 7C 00  
0039E5  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
0039E9  3  7E 06 7C 00  
0039ED  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
0039F1  3  00 00 30 00  
0039F5  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
0039F9  3  00 30 30 60  
0039FD  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
003A01  3  30 18 0C 00  
003A05  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
003A09  3  00 7E 00 00  
003A0D  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
003A11  3  0C 18 30 00  
003A15  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
003A19  3  18 00 18 00  
003A1D  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
003A21  3  FE C0 7C 00  
003A25  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
003A29  3  FE C6 C6 00  
003A2D  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
003A31  3  C6 C6 FC 00  
003A35  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
003A39  3  C0 C6 7C 00  
003A3D  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
003A41  3  C6 CC F8 00  
003A45  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
003A49  3  C0 C0 FE 00  
003A4D  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
003A51  3  C0 C0 C0 00  
003A55  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
003A59  3  DE C6 7C 00  
003A5D  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
003A61  3  C6 C6 C6 00  
003A65  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
003A69  3  18 18 7E 00  
003A6D  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
003A71  3  C6 C6 7C 00  
003A75  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
003A79  3  D8 CC C6 00  
003A7D  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
003A81  3  C0 C0 FE 00  
003A85  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
003A89  3  C6 C6 C6 00  
003A8D  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
003A91  3  DE CE C6 00  
003A95  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
003A99  3  C6 C6 7C 00  
003A9D  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
003AA1  3  FC C0 C0 00  
003AA5  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
003AA9  3  F6 DE 7C 00  
003AAD  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
003AB1  3  FC CC C6 00  
003AB5  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
003AB9  3  06 C6 7C 00  
003ABD  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
003AC1  3  30 30 30 00  
003AC5  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
003AC9  3  C6 C6 7C 00  
003ACD  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
003AD1  3  C6 6C 38 00  
003AD5  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
003AD9  3  C6 FE 6C 00  
003ADD  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
003AE1  3  38 6C C6 00  
003AE5  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
003AE9  3  30 30 30 00  
003AED  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
003AF1  3  30 60 FE 00  
003AF5  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
003AF9  3  18 18 1E 00  
003AFD  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
003B01  3  30 18 0C 00  
003B05  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
003B09  3  30 30 F0 00  
003B0D  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
003B11  3  30 30 30 00  
003B15  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003B19  3  00 00 00 FF  
003B1D  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
003B21  3  60 60 FE 00  
003B25  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
003B29  3  7C CC 7C 00  
003B2D  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
003B31  3  66 66 7C 00  
003B35  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
003B39  3  60 60 3C 00  
003B3D  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
003B41  3  CC CC 7C 00  
003B45  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
003B49  3  F8 C0 7C 00  
003B4D  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
003B51  3  30 30 30 00  
003B55  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
003B59  3  CC 7C 0C 78  
003B5D  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
003B61  3  CC CC CC 00  
003B65  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
003B69  3  30 30 78 00  
003B6D  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
003B71  3  0C 0C 6C 38  
003B75  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
003B79  3  70 78 6C 00  
003B7D  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
003B81  3  30 30 1C 00  
003B85  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
003B89  3  FC FC FC 00  
003B8D  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
003B91  3  CC CC CC 00  
003B95  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
003B99  3  CC CC 78 00  
003B9D  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
003BA1  3  CC F8 C0 C0  
003BA5  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
003BA9  3  CC 7C 0C 0E  
003BAD  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
003BB1  3  60 60 60 00  
003BB5  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
003BB9  3  78 0C F8 00  
003BBD  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
003BC1  3  30 30 1C 00  
003BC5  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
003BC9  3  CC CC 78 00  
003BCD  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
003BD1  3  78 78 30 00  
003BD5  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
003BD9  3  FC FC 78 00  
003BDD  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
003BE1  3  30 78 CC 00  
003BE5  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
003BE9  3  CC 7C 0C 78  
003BED  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
003BF1  3  30 60 FC 00  
003BF5  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
003BF9  3  18 18 1E 00  
003BFD  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
003C01  3  18 18 18 00  
003C05  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
003C09  3  30 30 F0 00  
003C0D  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
003C11  3  00 00 00 00  
003C15  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
003C19  3  E3 BB C6 7C  
003C1D  3               jtab:
003C1D  3  63                   .byte 99
003C1E  3  0A 08 3F 2F  keys:   .byte 10,8,63,47,33,37,35,31,30,26,24
003C22  3  21 25 23 1F  
003C26  3  1E 1A 18     
003C29  3               
003C29  2               
003C29  1               	.include "lib.inc"
003C29  2               ;----------------------------------------------------------------------
003C29  2               ; Atari 800 Platform Specific functions
003C29  2               ;----------------------------------------------------------------------
003C29  2               
003C29  2               ;============================================================
003C29  2               ; PLATFORM VARIABLES
003C29  2               ;============================================================
003C29  2               ;
003C29  2               ; Memory map:
003C29  2               ;
003C29  2               ;	$0000-$01ff	 0.50kB	CPU WS
003C29  2               ;	$0200-$05ff	 1,00kB	IOCB/Printer/Cassette RAM
003C29  2               ;	$0600-$06ff	 0,25kB	User RAM
003C29  2               ;	$0700-$1fff	 6,25kB
003C29  2               ;	$2000-$ffff	56,00kB	User RAM
003C29  2               ;
003C29  2               ; Keyboard matrix:
003C29  2               ;
003C29  2               ;		0	1	2	3	4	5	6	7
003C29  2               ;       ----------------------------------------------------------------------
003C29  2               ;	$00:	L	J	;:	F1	F2	K	+\	*^
003C29  2               ;	$08:	O		P	U	Ret	I	-_	=|
003C29  2               ;	$10:	V	Help	C	F3	F4	B	X	Z
003C29  2               ;	$18:	4$		3#	6&	Esc	5%	2"	1!
003C29  2               ;	$20:	,[	Space	.]	N		M	/?	Invert
003C29  2               ;	$28:	R		E	Y	Tab	T	W	Q
003C29  2               ;	$30:	9(		0)	7'	Bksp	8@	<	>
003C29  2               ;	$38:	F	H	D		Caps	G	S	A
003C29  2               ;
003C29  2               ; Atari 800 constants:
003C29  2               
003C29  2               	LMS		= 64
003C29  2               	HS		= 16
003C29  2               	VS		= 32
003C29  2               	MODE2		= 2
003C29  2               	MODE3		= 3
003C29  2               	MODE4		= 4
003C29  2               	MODE5		= 5
003C29  2               	MODEB		= $0B
003C29  2               	MODED		= $0D
003C29  2               	MODEE		= $0E
003C29  2               	MODEF		= $0F
003C29  2               
003C29  2               	BLANK1		= $00
003C29  2               	BLANK2		= $10
003C29  2               	BLANK3		= $20
003C29  2               	BLANK4		= $30
003C29  2               	BLANK5		= $40
003C29  2               	BLANK6		= $50
003C29  2               	BLANK7		= $60
003C29  2               	BLANK8		= $70
003C29  2               
003C29  2               	DLISTENDJUMP	= $41
003C29  2               
003C29  2               ; Atari 800 Addresses
003C29  2               
003C29  2               	HPOSP0	= $D000		; HORIZONTAL POSITION P0
003C29  2               	HPOSP1	= $D001		; HORIZONTAL POSITION P1
003C29  2               	HPOSP2	= $D002		; HORIZONTAL POSITION P2
003C29  2               	HPOSP3	= $D003		; HORIZONTAL POSITION P3
003C29  2               	HPOSM0	= $D004		; HORIZONTAL POSITION M0
003C29  2               	HPOSM1	= $D005		; HORIZONTAL POSITION M1
003C29  2               	HPOSM2	= $D006		; HORIZONTAL POSITION M2
003C29  2               	HPOSM3	= $D007		; HORIZONTAL POSITION M3
003C29  2               
003C29  2               	SIZEP0	= $D008		; SIZE P0
003C29  2               	SIZEP1	= $D009		; SIZE P0
003C29  2               	SIZEP2	= $D00A		; SIZE P0
003C29  2               	SIZEP3	= $D00B		; SIZE P0
003C29  2               	SIZEM	= $D00C		; SIZE M
003C29  2               
003C29  2               	GRAFP0	= $D00D
003C29  2               	GRAFP1	= $D00E
003C29  2               	GRAFP2	= $D00F
003C29  2               	GRAFP3	= $D010
003C29  2               	GRAFM	= $D011
003C29  2               
003C29  2               	TRIG0	= $D010
003C29  2               	TRIG1	= $D011
003C29  2               
003C29  2               	COLPM0	= $D012		; COLOR P0/M0
003C29  2               	COLPM1	= $D013		; COLOR P1/M1
003C29  2               	COLPM2	= $D014		; COLOR P2/M2
003C29  2               	COLPM3	= $D015		; COLOR P3/M3
003C29  2               
003C29  2               	COLPF0	= $D016
003C29  2               	COLPF1	= $D017
003C29  2               	COLPF2	= $D018
003C29  2               	COLPF3	= $D019
003C29  2               	COLBK	= $D01A
003C29  2               
003C29  2               	KBCODE	= $D209
003C29  2               	RANDOM	= $D20A
003C29  2               	IRQEN	= $D20E
003C29  2               	IRQST	= $D20E
003C29  2               	SKSTAT	= $D20F
003C29  2               
003C29  2               	STICK	= $D300
003C29  2               	PORTB	= $D301
003C29  2               	PBCTL	= $D303
003C29  2               
003C29  2               	DMACTL	= $D400
003C29  2               	DLISTL	= $D402
003C29  2               	DLISTH	= $D403
003C29  2               	WSYNC	= $D40A
003C29  2               	VCOUNT	= $D40B
003C29  2               	NMIEN	= $D40E
003C29  2               	NMIST	= $D40F
003C29  2               	NMIRES	= $D40F
003C29  2               
003C29  2               	NMI	= $FFFA
003C29  2               	RESET	= $FFFC
003C29  2               	IRQ	= $FFFE
003C29  2               
003C29  2               ;----------------------------------------------------------------------
003C29  2               ; Atari 800 hardware fns
003C29  2               ;----------------------------------------------------------------------
003C29  2               
003C29  2               init:
003C29  2               
003C29  2               ; Disable interrupts
003C29  2               
003C29  2  78           	sei
003C2A  2  A9 00        	lda #0
003C2C  2  8D 0E D2     	sta IRQEN		; Disable IRQ
003C2F  2  8D 0E D4     	sta NMIEN		; Disable NMI
003C32  2               
003C32  2               ; Switch BASIC + OS ROMS off
003C32  2               
003C32  2  AD 03 D3     	lda PBCTL
003C35  2  09 02        	ora #%00000010
003C37  2  8D 03 D3     	sta PBCTL
003C3A  2  AD 01 D3     	lda PORTB
003C3D  2  29 7C        	and #%01111100
003C3F  2  09 82        	ora #%10000010
003C41  2  8D 01 D3     	sta PORTB
003C44  2               
003C44  2               ; Setup new NMI handler
003C44  2               
003C44  2  A9 66        	lda #<nmi_handler
003C46  2  8D FA FF     	sta NMI
003C49  2  A9 3C        	lda #>nmi_handler
003C4B  2  8D FB FF     	sta NMI+1
003C4E  2  A9 C0        	lda #%11000000
003C50  2  8D 0E D4     	sta NMIEN
003C53  2               
003C53  2               ; Init video registers
003C53  2               
003C53  2  A9 FA        	lda #<BITMAP_DLIST
003C55  2  8D 02 D4     	sta DLISTL
003C58  2  A9 3D        	lda #>BITMAP_DLIST
003C5A  2  8D 03 D4     	sta DLISTH
003C5D  2               
003C5D  2               ; Screenwidth 32 bytes
003C5D  2               
003C5D  2  A9 31        	lda #%00110001
003C5F  2  8D 00 D4     	sta DMACTL
003C62  2               
003C62  2  20 09 21     	jsr cls
003C65  2               
003C65  2  60           	rts
003C66  2               
003C66  2               nmi_handler:
003C66  2  2C 0F D4     	bit NMIST
003C69  2  30 2F        	bmi dli_handler
003C6B  2  10 0D        	bpl nmi_not_dli
003C6D  2               nmi_not_vbi:
003C6D  2  A9 20        	lda #%00100000
003C6F  2  2C 0F D4     	bit NMIST
003C72  2  D0 04        	bne nmi_not_reset
003C74  2  8D 0F D4     	sta NMIRES
003C77  2  40           	rti
003C78  2               nmi_not_reset:
003C78  2  68           	pla
003C79  2  40           	rti
003C7A  2               nmi_not_dli:
003C7A  2  48           	pha
003C7B  2  50 F0        	bvc nmi_not_vbi
003C7D  2  8A           	txa
003C7E  2  48           	pha
003C7F  2  98           	tya
003C80  2  48           	pha
003C81  2               
003C81  2  A9 FF        	lda #$FF
003C83  2  8D 1A D0     	sta COLBK
003C86  2  8D 0A D4     	sta WSYNC
003C89  2  8D 0A D4     	sta WSYNC
003C8C  2  A9 00        	lda #0
003C8E  2  8D 1A D0     	sta COLBK
003C91  2  8D 0F D4     	sta NMIRES
003C94  2  68           	pla
003C95  2  A8           	tay
003C96  2  68           	pla
003C97  2  AA           	tax
003C98  2  68           	pla
003C99  2  40           	rti
003C9A  2               
003C9A  2               dli_handler:
003C9A  2  40           	rti
003C9B  2               
003C9B  2               ;========================================================
003C9B  2               ; KEY AND JOYSTICK ROUTINES
003C9B  2               ;--------------------------------------------------------
003C9B  2               ; Keys
003C9B  2               ;
003C9B  2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
003C9B  2               ;             ||||||||
003C9B  2               ;             |||||||+> Right    KEY 0  - X
003C9B  2               ;             ||||||+-> Left     KEY 1  - Z
003C9B  2               ;             |||||+--> Down     KEY 2  - .
003C9B  2               ;             ||||+---> Up       KEY 3  - ;
003C9B  2               ;             |||+----> Fire1    KEY 4  - SPC
003C9B  2               ;             ||+-----> Fire2    KEY 5  - Q
003C9B  2               ;             |+------> Fire3    KEY 6  - P
003C9B  2               ;             +-------> Not used
003C9B  2               ;
003C9B  2               ;                       Option1  KEY 7  - 1
003C9B  2               ;                       Option2  KEY 8  - 2
003C9B  2               ;                       Option3  KEY 9  - 3
003C9B  2               ;                       Option4  KEY 10 - 4
003C9B  2               ;--------------------------------------------------------
003C9B  2               ;----------------------------------------------------
003C9B  2               ; PRSKEY
003C9B  2               ; Wait for keypress.
003C9B  2               ;----------------------------------------------------
003C9B  2               
003C9B  2               prskey:
003C9B  2  AD 0F D2     	lda SKSTAT		; Check keypress
003C9E  2  C9 FF        	cmp #255
003CA0  2  F0 03        	beq :+
003CA2  2  4C AC 3C     	jmp prsend
003CA5  2               :
003CA5  2  20 78 2B     	jsr joykey		; Check joystick move
003CA8  2  C9 FF        	cmp #255
003CAA  2  F0 EF        	beq prskey
003CAC  2               prsend:
003CAC  2  60           	rts
003CAD  2               
003CAD  2               ;--------------------------------------------------------
003CAD  2               ; KTEST
003CAD  2               ; Check if key in A is pressed,
003CAD  2               ;  carry clr = key pressed
003CAD  2               ;  carry set = key not pressed
003CAD  2               ;--------------------------------------------------------
003CAD  2               
003CAD  2               ktest:
003CAD  2  85 rr        	sta tmp
003CAF  2  AD 0F D2     	lda SKSTAT		; Check keypress
003CB2  2  29 04        	and #4
003CB4  2  D0 07        	bne notpressed
003CB6  2  A5 rr        	lda tmp
003CB8  2  CD 09 D2     	cmp KBCODE
003CBB  2  F0 02        	beq pressed
003CBD  2               notpressed:
003CBD  2  38           	sec
003CBE  2  60           	rts
003CBF  2               pressed:
003CBF  2  18           	clc			; key pressed
003CC0  2  60           	rts
003CC1  2               
003CC1  2               ;---------------------------------------------------------------
003CC1  2               ; KGET
003CC1  2               ; Return keycode when a key is pressed and released
003CC1  2               ;---------------------------------------------------------------
003CC1  2               
003CC1  2               kget:
003CC1  2  AD 0F D2     	lda SKSTAT		; Check keypress
003CC4  2  29 04        	and #4
003CC6  2  D0 F9        	bne kget
003CC8  2  AD 09 D2     	lda KBCODE		; If pressed, get keycode
003CCB  2  48           	pha			; Save keycode pressed
003CCC  2               kget2:
003CCC  2  AD 0F D2     	lda SKSTAT		; Check keypress
003CCF  2  29 04        	and #4
003CD1  2  F0 F9        	beq kget2
003CD3  2  68           	pla
003CD4  2  60           	rts
003CD5  2               
003CD5  2               ;-------------------------------------------------------
003CD5  2               ; Joystick routines.
003CD5  2               ;
003CD5  2               ; contrl = 1, Joystick1
003CD5  2               ;          2, Joystick2
003CD5  2               ;-------------------------------------------------------
003CD5  2               
003CD5  2               ; Iitialize joysticks
003CD5  2               
003CD5  2               joyinit:
003CD5  2  60           	rts
003CD6  2               
003CD6  2               ; Joystick1 controls.
003CD6  2               
003CD6  2               joy1:
003CD6  2  A9 00        	lda #0		 	; zero reading.
003CD8  2  85 rr        	sta joyval
003CDA  2               
003CDA  2  AD 24 3C     	lda keys+6		; Check Fire3
003CDD  2  20 AD 3C     	jsr ktest
003CE0  2  26 rr        	rol joyval
003CE2  2  AD 23 3C     	lda keys+5		; Check Fire2
003CE5  2  20 AD 3C     	jsr ktest
003CE8  2  26 rr        	rol joyval
003CEA  2  AD 10 D0     	lda TRIG0		; Check Fire
003CED  2  4A           	lsr
003CEE  2  26 rr        	rol joyval
003CF0  2               
003CF0  2  AD 00 D3     	lda STICK
003CF3  2  85 rr        	sta tmp
003CF5  2  46 rr        	lsr tmp			; Check up
003CF7  2  26 rr        	rol joyval
003CF9  2  46 rr        	lsr tmp			; Check dwon
003CFB  2  26 rr        	rol joyval
003CFD  2  46 rr        	lsr tmp			; Check left
003CFF  2  26 rr        	rol joyval
003D01  2  46 rr        	lsr tmp			; Check right
003D03  2  26 rr        	rol joyval
003D05  2               
003D05  2  60           	rts
003D06  2               
003D06  2               ; Joystick2 controls.
003D06  2               
003D06  2               joy2:
003D06  2  A9 00        	lda #0		 	; zero reading.
003D08  2  85 rr        	sta joyval
003D0A  2               
003D0A  2  AD 24 3C     	lda keys+6		; Check Fire3
003D0D  2  20 AD 3C     	jsr ktest
003D10  2  26 rr        	rol joyval
003D12  2  AD 23 3C     	lda keys+5		; Check Fire2
003D15  2  20 AD 3C     	jsr ktest
003D18  2  26 rr        	rol joyval
003D1A  2  AD 11 D0     	lda TRIG1		; Check Fire
003D1D  2  4A           	lsr
003D1E  2  26 rr        	rol joyval
003D20  2               
003D20  2  AD 00 D3     	lda STICK
003D23  2  4A           	lsr a
003D24  2  4A           	lsr a
003D25  2  4A           	lsr a
003D26  2  4A           	lsr a
003D27  2  85 rr        	sta tmp
003D29  2  46 rr        	lsr tmp			; Check up
003D2B  2  26 rr        	rol joyval
003D2D  2  46 rr        	lsr tmp			; Check dwon
003D2F  2  26 rr        	rol joyval
003D31  2  46 rr        	lsr tmp			; Check left
003D33  2  26 rr        	rol joyval
003D35  2  46 rr        	lsr tmp			; Check right
003D37  2  26 rr        	rol joyval
003D39  2               
003D39  2  60           	rts
003D3A  2  60           	rts
003D3B  2               
003D3B  2               ;---------------------------------------------------------------
003D3B  2               ; Bitmap display list must be aligned at $100
003D3B  2               ;---------------------------------------------------------------
003D3B  2               
003D3B  2  xx xx xx xx  .align $100
003D3F  2  xx xx xx xx  
003D43  2  xx xx xx xx  
003DFA  2               
003DFA  2               BITMAP_DLIST:
003DFA  2  70           	.byte BLANK8
003DFB  2  70           	.byte BLANK8
003DFC  2  70           	.byte BLANK8
003DFD  2               
003DFD  2  4F           	.byte LMS+MODEF
003DFE  2  00 E4        	.word ScreenAddr
003E00  2  0F 0F 0F 0F  	.res 95,MODEF
003E04  2  0F 0F 0F 0F  
003E08  2  0F 0F 0F 0F  
003E5F  2               
003E5F  2  4F            	.byte LMS+MODEF
003E60  2  00 F0        	.word ScreenAddr+96*32
003E62  2  0F 0F 0F 0F  	.res 95,MODEF
003E66  2  0F 0F 0F 0F  
003E6A  2  0F 0F 0F 0F  
003EC1  2               
003EC1  2  41           	.byte DLISTENDJUMP
003EC2  2  FA 3D        	.word BITMAP_DLIST
003EC4  2               
003EC4  2               
003EC4  1               	.include "z80.asm"
003EC4  2               ;------------------------------------------------------
003EC4  2               ; z80.asm
003EC4  2               ; spectrum stuff
003EC4  2               ; adresses
003EC4  2               
003EC4  2               
003EC4  2               ; Contains seperatly 1 bit set
003EC4  2               
003EC4  2               _bitmem0	= $f8
003EC4  2               _bitmem1	= $f9
003EC4  2               _bitmem2	= $fa
003EC4  2               _bitmem3	= $fb
003EC4  2               _bitmem4	= $fc
003EC4  2               _bitmem5	= $fd
003EC4  2               _bitmem6	= $fe
003EC4  2               _bitmem7	= $ff
003EC4  2               
003EC4  2               ; constants
003EC4  2               _bitvalue0	= $01
003EC4  2               _bitvalue1	= $02
003EC4  2               _bitvalue2	= $04
003EC4  2               _bitvalue3	= $08
003EC4  2               _bitvalue4	= $10
003EC4  2               _bitvalue5	= $20
003EC4  2               _bitvalue6	= $40
003EC4  2               _bitvalue7	= $80
003EC4  2               
003EC4  2               _notbitvalue0	= $fe
003EC4  2               _notbitvalue1	= $fd
003EC4  2               _notbitvalue2	= $fb
003EC4  2               _notbitvalue3	= $f7
003EC4  2               _notbitvalue4	= $ef
003EC4  2               _notbitvalue5	= $df
003EC4  2               _notbitvalue6	= $bf
003EC4  2               _notbitvalue7	= $7f
003EC4  2               
003EC4  2               
003EC4  2               exx:
003EC4  2  A5 62        		lda z80_c
003EC6  2  A4 6E        		ldy z80_cp
003EC8  2  84 62        		sty z80_c
003ECA  2  85 6E        		sta z80_cp
003ECC  2  A5 63        		lda z80_b
003ECE  2  A4 6F        		ldy z80_bp
003ED0  2  84 63        		sty z80_b
003ED2  2  85 6F        		sta z80_bp
003ED4  2  A5 64        		lda z80_e
003ED6  2  A4 70        		ldy z80_ep
003ED8  2  84 64        		sty z80_e
003EDA  2  85 70        		sta z80_ep
003EDC  2  A5 65        		lda z80_d
003EDE  2  A4 71        		ldy z80_dp
003EE0  2  84 65        		sty z80_d
003EE2  2  85 71        		sta z80_dp
003EE4  2  A5 rr        		lda scraddr
003EE6  2  A4 72        		ldy z80_lp
003EE8  2  84 rr        		sty scraddr
003EEA  2  85 72        		sta z80_lp
003EEC  2  A5 rr        		lda scraddr+1
003EEE  2  A4 73        		ldy z80_hp
003EF0  2  84 rr        		sty scraddr+1
003EF2  2  85 73        		sta z80_hp
003EF4  2  60           		rts
003EF5  2               
003EF5  2               
003EF5  1               eind_asm:
003EF5  1               eop:					; End Of Program
003EF5  1               
003EF5  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
003EF5  1               
