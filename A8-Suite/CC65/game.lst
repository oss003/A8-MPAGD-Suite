ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2000
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               .if rflag
000057r 2               sprshft:     .res 1
000057r 2               .endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               .org asm_code-6
001FFA  1  FF FF        	.word $ffff
001FFC  1  00 20        	.word start_asm
001FFE  1  FB 39        	.word eind_asm
002000  1               
002000  1               start_asm:
002000  1               	.include "game.inc"
002000  2               .include "testcolour.inc"
002000  3               ;--------------------------------------------------------------
002000  3               ; Arcade Game Designer.
002000  3               ; (C) 2008 Jonathan Cauldwell.
002000  3               ; ZX Spectrum Next Engine v0.7.
002000  3               ; Acorn Atom port by K.v.Oss 2018
002000  3               ;--------------------------------------------------------------
002000  3               
002000  3               ; Conditional compilation flags
002000  3               ; Code is installed if flag is set
002000  3               ; Flags are set in commandline assembly or by the compiler
002000  3               
002000  3               ; Flags set by AGD compiler
002000  3               ;	mflag  			; MENU + INV
002000  3               ;	pflag 			; particle engine
002000  3               ;	sflag 			; scrollytext
002000  3               ;	dflag 			; digging mode
002000  3               ;	cflag			; collectable blocks
002000  3               ;	oflag			; objects
002000  3               ;	lflag			; ladders
002000  3               ;
002000  3               ; Flags set manually
002000  3               ;	aflag			; adventure mode
002000  3               ;	bflag			; big sprites (16x24)
002000  3               ;	iflag			; invert mode
002000  3               
002000  3               .if mflag
002000  3               	.out "- MEN/INV enabled"
002000  3               .endif
002000  3               .if pflag
002000  3               	.out "- Particles enabled"
002000  3               .endif
002000  3               .if sflag
002000  3               	.out "- Scrolling enabled"
002000  3               .endif
002000  3               .if dflag
002000  3               	.out "- Digging enabled"
002000  3               .endif
002000  3               .if cflag
002000  3               	.out "- Collectable blocks enabled"
002000  3               .endif
002000  3               .if oflag
002000  3               	.out "- Objects enabled"
002000  3               .endif
002000  3               .if lflag
002000  3               	.out "- Ladders enabled"
002000  3               .endif
002000  3               .if aflag
002000  3               	.out "- Adventure mode enabled"
002000  3               .endif
002000  3               .if bflag
002000  3               	.out "- Big Sprites (16x24) enabled"
002000  3               .endif
002000  3               .if iflag
002000  3               	.out "- Invert mode enabled"
002000  3               .endif
002000  3               .if gflag
002000  3               	.out "- Colour mode enabled"
002000  3               .endif
002000  3               .if rflag
002000  3               	.out "- RAM saving mode enabled"
002000  3               .endif
002000  3               
002000  3               ; Global definitions ------------------------------------------------------------
002000  3               
002000  3               	FONT = font		; Font address
002000  3               
002000  3               	green	= $00		; Colour definition filters
002000  3               	yellow	= $55
002000  3               	blue	= $aa
002000  3               	red	= $ff
002000  3               
002000  3               ; Block characteristics.
002000  3               
002000  3               	PLATFM	= 1		; platform.
002000  3               	WALL	= PLATFM + 1	; solid wall.
002000  3               	LADDER	= WALL + 1	; ladder.
002000  3               	FODDER	= LADDER + 1	; fodder block.
002000  3               	DEADLY	= FODDER + 1	; deadly block.
002000  3               	CUSTOM	= DEADLY + 1	; custom block.
002000  3               	WATER	= CUSTOM + 1	; water block.
002000  3                       COLECT	= WATER + 1	; collectable block.
002000  3                       NUMTYP	= COLECT + 1	; number of types.
002000  3               
002000  3               ; Sprites.
002000  3               
002000  3               .if bflag
002000  3               	SPR_HGT	= 24		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 8		; number of sprites.
002000  3               .else				; 16x16 sprites
002000  3               	SPR_HGT = 16		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 12		; number of sprites.
002000  3               .endif
002000  3               
002000  3               	TABSIZ = 17		; size of each entry.
002000  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002000  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002000  3               	var_X  = 8		; new x coordinate of sprite.
002000  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002000  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002000  3               
002000  3               ; Particle engine.
002000  3               
002000  3               	NUMSHR = 55		; pieces of shrapnel.
002000  3               	SHRSIZ = 6		; bytes per particle.
002000  3               
002000  3               ; System constants
002000  3               
002000  3               	ScrSelAddr  = $b000	; Screen selection address
002000  3               	KeyRowAddr  = $b000	; PIA key matrix row
002000  3               	KeyColAddr  = $b001	; PIA key matrix column
002000  3               	SpeakerBit  = $b002	; Speaker bit
002000  3               	CmdReg      = $b400	; Command register AtoMMC
002000  3               	DatReg      = $b401	; Data register AtoMMC
002000  3               	Timer2_Low  = $b808	; Timer 2 low byte
002000  3               	Timer2_High = $b809	; Timer 2 high byte
002000  3               	ScreenAddr  = $e400	; Startaddress video RAM
002000  3               
002000  3               	MAP 	    = $dd00		; properties map buffer (3x256 bytes)
002000  3               	SCADTB_lb   = MAP+3*256		; screen address table lo-byte (256 bytes)
002000  3               	SCADTB_hb   = SCADTB_lb+256	; screen address table hi-byte (256 bytes)
002000  3               	SHRAPN      = SCADTB_hb+256	; shrapnel table (55x6 bytes)
002000  3               
002000  3               ; System calls
002000  3               
002000  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
002000  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
002000  3               	OSRDCH   = $fe94	; get key subroutine
002000  3                       READKEY  = $fe71	; scan key matrix subroutine
002000  3               	OSWRCH	 = $fff4	; write character
002000  3               
002000  3               
002000  3               .if iflag
002000  3               	TxtInvert   = $ff	; Invert byte for character printing
002000  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002000  3               .else
002000  3               	TxtInvert   = $00	; Invert byte for character printing
002000  3               	ScrFillByte = $00	; Screen fill byte for CLS
002000  3               .endif
002000  3               
002000  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002000  3               
002000  3               ;===============================================================
002000  3               ; Game starts here
002000  3               ;===============================================================
002000  3               
002000  3               ;.segment "CODE"
002000  3               
002000  3  20 56 37     	jsr init
002003  3               
002003  3               ; Clear variables
002003  3               
002003  3  A9 00        	lda #0
002005  3  A2 00        	ldx #0
002007  3               clrloop:
002007  3  95 00        	sta 0,x
002009  3  E8           	inx
00200A  3  D0 FB        	bne clrloop
00200C  3               
00200C  3               gameloop:
00200C  3  20 C8 20     	jsr game	 	; start the game.
00200F  3  4C 0C 20     	jmp gameloop		; Start again
002012  3               
002012  3               ; Definition of variables
002012  3               ; Make sure pointers are arranged in the same order as the data itself.
002012  3               
002012  3  81 33        msgptr:		.word msgdat	; messages
002014  3  86 33        blkptr:		.word chgfx	; block graphics.
002016  3  8E 33        proptr:		.word bprop	; address of char properties.
002018  3  8F 33        sptptr:		.word sprgfx	; sprite graphics
00201A  3  0F 34        frmptr:		.word frmlst	; sprite frames.
00201C  3  13 34        scrptr:		.word scdat	; address of screens.
00201E  3  1F 34        nmeptr:		.word nmedat	; enemy start positions.
002020  3  24 34        objptr:		.word objdta	; object graphics
002022  3               
002022  3               ;TxtFilter:	.byte $ff
002022  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
002026  3               
002026  3               ; Don't change the order of these four.
002026  3               ; Menu routine relies on winlft following wintop.
002026  3               
002026  3  01           wintop:		.byte WINDOWTOP	; top of window.
002027  3  01           winlft:		.byte WINDOWLFT	; left edge.
002028  3  16           winhgt:		.byte WINDOWHGT	; window height.
002029  3  1E           winwid:		.byte WINDOWWID	; window width.
00202A  3  01           numob:		.byte NUMOBJ	; number of objects in game.
00202B  3               
00202B  3               ; Variables start here.
00202B  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00202B  3               
00202B  3  08           wntopx:		.byte (8 * WINDOWTOP)
00202C  3  08           wnlftx:		.byte (8 * WINDOWLFT)
00202D  3  A8           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00202E  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00202F  3               
00202F  3               ; Assorted game routines which can go in contended memory.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for inventory called by the INV command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with objects seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected objectnr of INV menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               .if mflag
00202F  3               minve:
00202F  3               	lda #<(invdis)		; routine address.
00202F  3               	sta mod0+1		; set up menu routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(invdis)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               	lda #<(fopt)		; find option from available objects.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fopt)
00202F  3               	sta mod1+1+1
00202F  3               	jmp dbox		; do menu routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for menu called by the MENU command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with menu items seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected line nr of MENU menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               mmenu:
00202F  3               	lda #<(always)		; routine address.
00202F  3               	sta mod0+1		; set up routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(always)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               
00202F  3               	lda #<(fstd)		; standard option selection.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fstd)
00202F  3               	sta mod1+2
00202F  3               
00202F  3               ; Drop through into box routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Work out size of box for message or menu.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               dbox:
00202F  3               	lda #<(msgdat)		; pointer to messages.
00202F  3               	sta z80_l
00202F  3               	lda #>(msgdat)
00202F  3               	sta z80_h
00202F  3               
00202F  3               	jsr getwrd		; get message number.
00202F  3               
00202F  3               	lda z80_h		; store pointer to message.
00202F  3               	sta TmpAddr
00202F  3               	lda z80_l
00202F  3               	sta TmpAddr+1
00202F  3               
00202F  3               	lda #1			; height.
00202F  3               	sta z80_d
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               	sta z80_e		; maximum width.
00202F  3               dbox5:
00202F  3               	lda #0			; this line"s width.
00202F  3               	sta z80_b
00202F  3               mod2:
00202F  3               	jsr always		; item in player"s possession?
00202F  3               	cmp #255
00202F  3               	bne dbox6		; not in inventory, skip this line.
00202F  3               	inc z80_d		; add to tally.
00202F  3               dbox6:
00202F  3               	ldy #0			; get character.
00202F  3               	lda (z80_hl),y
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a		; reached end of line?
00202F  3               	cmp #','
00202F  3               	beq dbox3		; yes.
00202F  3               	cmp #13
00202F  3               	beq dbox3		; yes.
00202F  3               	inc z80_b		; add to this line"s width.
00202F  3               	lda z80_a
00202F  3               	bmi dbox4		; end of message? yes, end count.
00202F  3               	jmp dbox6		; repeat until we find the end.
00202F  3               dbox3:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox5		; no, carry on looking.
00202F  3               	lda z80_b		; make this the widest so far.
00202F  3               	sta z80_e
00202F  3               	jmp dbox5		; keep looking.
00202F  3               dbox4:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox8		; no, carry on looking.
00202F  3               	lda z80_b		; final line is the longest so far.
00202F  3               	sta z80_e
00202F  3               dbox8:
00202F  3               	dec z80_d		; decrement items found.
00202F  3               	bne :+			; total was zero.
00202F  3               	lda #255
00202F  3               	sta varopt
00202F  3               	jmp dbox15
00202F  3               :
00202F  3               	lda z80_e		; longest line.
00202F  3               	bne :+			; was it zero?
00202F  3               	jmp dbox15		; total was zero.
00202F  3               :
00202F  3               	sta bwid		; set up size.
00202F  3               	lda z80_d
00202F  3               	sta blen
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; That's set up our box size.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               	lda winhgt		; window height in characters.
00202F  3               	sec
00202F  3               	sbc z80_d		; subtract height of box.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc wintop		; add top edge of window.
00202F  3               	sta btop		; set up box top.
00202F  3               
00202F  3               	lda winwid		; window width in characters.
00202F  3               	sec
00202F  3               	sbc z80_e		; subtract box width.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc winlft		; add left edge of window.
00202F  3               	sta blft		; box left.
00202F  3               
00202F  3               	lda #<(FONT-256)		; font.
00202F  3               	sta grbase		; set up for text display.
00202F  3               	lda #>(FONT-256)
00202F  3               	sta grbase+1
00202F  3               
00202F  3               	lda TmpAddr+1		; restore message pointer.
00202F  3               	sta z80_l
00202F  3               	lda TmpAddr
00202F  3               	sta z80_h
00202F  3               
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set display coordinate.
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               dbox2:
00202F  3               	lda combyt		; get object number.
00202F  3               	sta z80_a
00202F  3               mod0:
00202F  3               	jsr always		; check inventory for display.
00202F  3               	cmp #255
00202F  3               	beq :+
00202F  3               	jmp dbox13		; not in inventory, skip this line.
00202F  3               :
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set left display position.
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_b		; store width.
00202F  3               dbox0:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	cmp #','		; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               	cmp #13			; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               
00202F  3               	cmp #141			; end of line?
00202F  3               	bne :+
00202F  3               	dec bwid
00202F  3               	jmp dbox7		; yes, next one.
00202F  3               :
00202F  3               	dec z80_b		; one less to display.
00202F  3               	and #127		; remove terminator.
00202F  3               
00202F  3               	jsr pchr		; display on screen.
00202F  3               
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a
00202F  3               	cmp #128		; end of message?
00202F  3               	bmi :+
00202F  3               	jmp dbox7		; yes, job done.
00202F  3               :
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	beq :+			; are any left?
00202F  3               	jmp dbox0		; yes, continue.
00202F  3               :
00202F  3               ;---------------------------------------------------
00202F  3               ; Reached limit of characters per line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dbox9:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #13			; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #128		; end of message?
00202F  3               	bcs :+
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox9
00202F  3               
00202F  3               ;---------------------------------------------------
00202F  3               ; Fill box to end of line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dboxf:
00202F  3               	lda #32			; space character.
00202F  3               	jsr pchr		; display character.
00202F  3               	dec z80_b
00202F  3               	beq :+
00202F  3               	jmp dboxf		; repeat for remaining chars on line.
00202F  3               :
00202F  3               	rts
00202F  3               dbox1:
00202F  3               	inc z80_l		; skip character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	jsr dboxf		; fill box out to right side.
00202F  3               dbox10:
00202F  3               	inc dispy		; y coordinate down a line next position.
00202F  3               	jmp dbox2		; next line.
00202F  3               dbox7:
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	bne :+			; are any left?
00202F  3               	jmp dbox11		; no, nothing to draw.
00202F  3               :
00202F  3               	jsr dboxf		; fill message to line.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Drawn the box menu, now select option.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox11:
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set bar position.
00202F  3               dbox14:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	bne dbox14		; yes, debounce it.
00202F  3               	jsr dbar		; draw bar.
00202F  3               dbox12:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	beq dbox12		; no, nothing.
00202F  3               	and #16			; fire button pressed?
00202F  3               	bne :+
00202F  3               mod1:
00202F  3               	jmp fstd		; yes, job done.
00202F  3               :
00202F  3               	jsr dbar		; delete bar.
00202F  3               
00202F  3               	lda joyval		; joystick reading.
00202F  3               	and #8			; going up?
00202F  3               	beq dboxu		; yes, go up.
00202F  3               
00202F  3               	ldx dispy		; vertical position of bar.
00202F  3               	inx			; look down.
00202F  3               	txa
00202F  3               	sec
00202F  3               	sbc btop		; find distance from top.
00202F  3               	cmp blen		; top of box.
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	inc dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               dboxu:
00202F  3               	lda dispy		; vertical position of bar.
00202F  3               	cmp btop		; are we at the top?
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	dec dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               fstd:
00202F  3               	lda dispy		; bar position.
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta varopt		; store the option.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Option not available.  Skip this line.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox13:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               	cmp #13			; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               
00202F  3               	bpl :+			; end of message?
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox13
00202F  3               dbox15:
00202F  3               	lda TmpAddr		; pop message pointer from the stack.
00202F  3               	sta z80_h
00202F  3               	lda TmpAddr+1
00202F  3               	sta z80_l
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Invert bar
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbar:
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set display coordinate.
00202F  3               	jsr gprad		; get printing address.
00202F  3               
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_c		; loop counter in c.
00202F  3               	lda z80_h
00202F  3               	sta z80_d		; store screen address high byte.
00202F  3               dbar1:
00202F  3               	ldx #7			; pixel height in b.
00202F  3               dbar0:
00202F  3               	ldy scrtab,x
00202F  3               	lda (scraddr),y		; get screen byte.
00202F  3               	eor #255		; reverse all bits.
00202F  3               	sta (scraddr),y		; write back to screen.
00202F  3               	dex			; next line down.
00202F  3               	bpl dbar0		; draw rest of character.
00202F  3               
00202F  3               	inc scraddr		; one char right.
00202F  3               	dec z80_c		; decrement character counter.
00202F  3               	bne dbar1		; repeat for whole line.
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Point to object
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  combyt
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  A = object number, A=255 if already in possession
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               invdis:
00202F  3               	lda z80_l		; store message text pointer.
00202F  3               	pha
00202F  3               	lda z80_h
00202F  3               	pha
00202F  3               	lda combyt		; object number.
00202F  3               	inc combyt		; ready for next one.
00202F  3               	jsr gotob		; check if we have object.
00202F  3               	tay
00202F  3               	pla
00202F  3               	sta z80_h
00202F  3               	pla
00202F  3               	sta z80_l
00202F  3               	tya
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Find option selected.
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  -
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected object
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               fopt:
00202F  3               	lda dispy
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta tmp+2		; option selected in b register.
00202F  3               	inc tmp+2
00202F  3               
00202F  3               	lda #0			; set to first item.
00202F  3               	sta combyt		; object number.
00202F  3               fopt0:
00202F  3               	jsr fobj		; find next object in inventory.
00202F  3               	dec tmp+2
00202F  3               	bne fopt0		; repeat for relevant steps down the list.
00202F  3               
00202F  3               	lda combyt		; get option.
00202F  3               	sta varopt		; store the option.
00202F  3               	dec varopt		; one less, due to where we increment combyt.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               fobj:
00202F  3               	ldy combyt		; object number.
00202F  3               	inc combyt		; ready for next item.
00202F  3               	tya
00202F  3               	jsr gotob		; do we have this item?
00202F  3               	cmp #255
00202F  3               	bne :+
00202F  3               	rts
00202F  3               :
00202F  3               	jmp fobj		; yes, it's on the list.
00202F  3               
00202F  3               ;bwid:	.byte 0              ; box/menu width.
00202F  3               ;blen:	.byte 0              ; box/menu height.
00202F  3               ;btop:	.byte 0              ; box coordinates.
00202F  3               ;blft:	.byte 0
00202F  3               .endif
00202F  3               
00202F  3               ;----------------------------------------------------
00202F  3               ; Delay routine 1/50 sec
00202F  3               ;----------------------------------------------------
00202F  3               
00202F  3               delay:
00202F  3  8D 96 37     	sta frames_delay
002032  3               del_loop:
002032  3  AD 96 37     	lda frames_delay
002035  3  D0 FB        	bne del_loop
002037  3  60           	rts
002038  3               
002038  3               ;----------------------------------------------------
002038  3               ; Clear sprite table.
002038  3               ;
002038  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002038  3               ;----------------------------------------------------
002038  3               
002038  3               xspr:
002038  3  A9 FF        	lda #255		; clear byte.
00203A  3  A2 00        	ldx #0			; length of table.
00203C  3               xspr0:
00203C  3  9D 20 32     	sta sprtab,x		; sprite table.
00203F  3  E8           	inx			; move to next byte.
002040  3  E0 CC        	cpx #SPRBUF
002042  3  D0 F8        	bne xspr0		; repeat for rest of table.
002044  3  60           	rts
002045  3               
002045  3               ;-------------------------------------------------------------
002045  3               ; Initialise all objects.
002045  3               ;
002045  3               ; Reset current room,y,x to start room,y,x for all objects
002045  3               ;-------------------------------------------------------------
002045  3               
002045  3               .if oflag
002045  3               iniob:
002045  3               	lda #<objdta 		; objects table.
002045  3               	sta z80_x
002045  3               	lda #>objdta
002045  3               	sta z80_i
002045  3               
002045  3               	ldx numob 		; number of objects in the game.
002045  3               iniob0:
002045  3               	ldy #35
002045  3               	lda (z80_ix),y 		; start screen.
002045  3               	ldy #32
002045  3               	sta (z80_ix),y 		; set start screen.
002045  3               
002045  3               	ldy #36
002045  3               	lda (z80_ix),y 		; find start y.
002045  3               	ldy #33
002045  3               	sta (z80_ix),y 		; set start y.
002045  3               
002045  3               	ldy #37
002045  3               	lda (z80_ix),y 		; get initial x.
002045  3               	ldy #34
002045  3               	sta (z80_ix),y 		; set x coord.
002045  3               
002045  3               	clc 			; point to next object.
002045  3               	lda z80_x
002045  3               	adc #38			; distance between objects.
002045  3               	sta z80_x
002045  3               	bcc :+
002045  3               	inc z80_i
002045  3               :
002045  3               	dex 			; repeat.
002045  3               	bne iniob0
002045  3               
002045  3               	rts
002045  3               .endif
002045  3               
002045  3               ;-------------------------------------------------------------
002045  3               ; Screen synchronisation.
002045  3               ;
002045  3               ;  - read joystick/keyboard
002045  3               ;  - handle sound
002045  3               ;  - handle shrapnel every even frame
002045  3               ;  - sync framerate to 25 Hz
002045  3               ;-------------------------------------------------------------
002045  3               
002045  3               vsync:
002045  3               
002045  3               ; Save registers
002045  3               
002045  3  48           	pha
002046  3  98           	tya
002047  3  48           	pha
002048  3  8A           	txa
002049  3  48           	pha
00204A  3               
00204A  3               ; Read joystick/keyboard
00204A  3               
00204A  3  20 5D 29     	jsr joykey		; read joystick/keyboard.
00204D  3               
00204D  3               ; Handle shrapnel every even frame
00204D  3               
00204D  3  A5 rr        	lda clock
00204F  3  29 01        	and #1
002051  3  D0 03        	bne:+
002053  3  20 C7 20     	jsr proshr		; handle shrapnel every even frame
002056  3               :
002056  3               
002056  3               ; Handle sound
002056  3               
002056  3  AD 6D 20     	lda sndtyp
002059  3  F0 00        	beq sndskip
00205B  3               sndloop:
00205B  3               
00205B  3               sndskip:
00205B  3               
00205B  3               ; Sync framerate to 25 Hz
00205B  3               
00205B  3               check_if_enough_frames_passed:
00205B  3  AD 95 37     	lda frames_passed
00205E  3  C9 02        	cmp #2
002060  3  90 F9        	bcc check_if_enough_frames_passed
002062  3               
002062  3  A9 00        	lda #0			; sync framerate 25 Hz
002064  3  8D 95 37     	sta frames_passed
002067  3               
002067  3               ; Restore registers
002067  3               
002067  3  68           	pla
002068  3  AA           	tax
002069  3  68           	pla
00206A  3  A8           	tay
00206B  3  68           	pla
00206C  3  60           	rts
00206D  3               
00206D  3  00           sndtyp:	.byte 0
00206E  3               
00206E  3               ;-----------------------------------------------
00206E  3               ; Redraw the screen.
00206E  3               ;
00206E  3               ; Remove old copy of all sprites for redraw.
00206E  3               ;-----------------------------------------------
00206E  3               
00206E  3               redraw:
00206E  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
002070  3  48           	pha
002071  3  A5 68        	lda z80_x
002073  3  48           	pha
002074  3               
002074  3  20 E1 25     	jsr droom		; show screen layout.
002077  3               .if oflag
002077  3               	jsr shwob		; draw objects.
002077  3               .endif
002077  3               numsp0:
002077  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002079  3  85 rr        	sta tmp
00207B  3               
00207B  3  A9 20        	lda #<sprtab		; sprite table.
00207D  3  85 68        	sta z80_x
00207F  3  A9 32        	lda #>sprtab
002081  3  85 69        	sta z80_i
002083  3               redrw0:
002083  3  A0 00        	ldy #0
002085  3  B1 68        	lda (z80_ix),y		; old sprite type.
002087  3  C9 FF        	cmp #255		; is it enabled?
002089  3  F0 0B        	beq redrw1 		; no, find next one.
00208B  3               
00208B  3  A0 03        	ldy #3
00208D  3  B1 68        	lda (z80_ix),y 		; sprite y.
00208F  3  C9 B1        	cmp #177		; beyond maximum?
002091  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002093  3               
002093  3  20 E9 2C     	jsr sspria		; show single sprite.
002096  3               redrw1:
002096  3  18           	clc			; next sprite.
002097  3  A5 68        	lda z80_x
002099  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00209B  3  85 68        	sta z80_x
00209D  3  90 02        	bcc :+
00209F  3  E6 69        	inc z80_i
0020A1  3               :
0020A1  3  C6 rr        	dec tmp			; repeat for remaining sprites.
0020A3  3  D0 DE        	bne redrw0
0020A5  3               rpblc1:
0020A5  3               ;	jsr dshrp		; redraw shrapnel.
0020A5  3               
0020A5  3               .if aflag
0020A5  3               	jsr rbloc		; draw blocks for this screen
0020A5  3               .endif
0020A5  3  68           	pla			; retrieve sprite pointer.
0020A6  3  85 68        	sta z80_x
0020A8  3  68           	pla
0020A9  3  85 69        	sta z80_i
0020AB  3               
0020AB  3  60           	rts
0020AC  3               
0020AC  3               ;----------------------------------------------------------------------
0020AC  3               ; Clear screen routine.
0020AC  3               ;
0020AC  3               ; Fill screenmem $e400-$fbff with ScrFillByte
0020AC  3               ;----------------------------------------------------------------------
0020AC  3               
0020AC  3               cls:
0020AC  3  A9 E4        	lda #>ScreenAddr		; screen address.
0020AE  3  8D B7 20     	sta clsloop+2
0020B1  3  A9 00        	lda #ScrFillByte
0020B3  3               .if iflag
0020B3  3               	eor #$ff
0020B3  3               .endif
0020B3  3  A0 00        	ldy #0
0020B5  3               clsloop:
0020B5  3  99 00 E4     	sta ScreenAddr,y
0020B8  3  C8           	iny
0020B9  3  D0 FA        	bne clsloop
0020BB  3  EE B7 20     	inc clsloop+2
0020BE  3  AE B7 20     	ldx clsloop+2
0020C1  3  E0 FC        	cpx #>(ScreenAddr+$1800)
0020C3  3  D0 F0        	bne clsloop
0020C5  3  60           	rts
0020C6  3               
0020C6  3               ;----------------------------------------------------------------------
0020C6  3               ; Atomic palette is static
0020C6  3               ;----------------------------------------------------------------------
0020C6  3               
0020C6  3               setpal:
0020C6  3  60           	rts
0020C7  3               
0020C7  3               ;----------------------------------------------------------------------
0020C7  3               ; FODDER check
0020C7  3               ;----------------------------------------------------------------------
0020C7  3               
0020C7  3               .if pflag .or dflag
0020C7  3               fdchk:
0020C7  3               	cmp #FODDER 		; is it fodder?
0020C7  3               	beq :+
0020C7  3               	rts 			; no.
0020C7  3               :
0020C7  3               	lda #0			; wipe fodder in MAP
0020C7  3               	ldy #0
0020C7  3               	sta (bufaddr),y 	; rewrite block type.
0020C7  3               
0020C7  3               	lda dispx		; x=x/8
0020C7  3               	pha
0020C7  3               	lsr a
0020C7  3               	lsr a
0020C7  3               	lsr a
0020C7  3               	sta dispx
0020C7  3               
0020C7  3               	lda dispy		; y=y/8
0020C7  3               	pha
0020C7  3               	lsr a
0020C7  3               	lsr a
0020C7  3               	lsr a
0020C7  3               	sta dispy
0020C7  3               
0020C7  3               	lda #0 			; block to write.
0020C7  3               	jsr pattr 		; write block.
0020C7  3               
0020C7  3               	pla
0020C7  3               	sta dispy
0020C7  3               	pla
0020C7  3               	sta dispx
0020C7  3               	rts
0020C7  3               .endif
0020C7  3               
0020C7  3               ;----------------------------------------------------
0020C7  3               ; Scrolly text and puzzle variables.
0020C7  3               ;----------------------------------------------------
0020C7  3               
0020C7  3               .if sflag
0020C7  3               txtbit:	.byte 128		; bit to write.
0020C7  3               txtwid:	.byte 16		; width of ticker message.
0020C7  3               txtpos:	.word msgdat
0020C7  3               txtini:	.word msgdat
0020C7  3               txtscr:	.word ScreenAddr
0020C7  3               .endif
0020C7  3               
0020C7  3               ;----------------------------------------------------
0020C7  3               ; Specialist routines.
0020C7  3               ; Process shrapnel.
0020C7  3               ;----------------------------------------------------
0020C7  3               proshr:
0020C7  3               .if pflag
0020C7  3               	lda #<SHRAPN		; table.
0020C7  3               	sta z80_x
0020C7  3               	lda #>SHRAPN
0020C7  3               	sta z80_i
0020C7  3               
0020C7  3               	lda #NUMSHR		; shrapnel pieces to process.
0020C7  3               	sta shrctr
0020C7  3               prosh0:
0020C7  3               	ldy #0
0020C7  3               	lda (z80_ix),y		; on/off marker.
0020C7  3               	asl a
0020C7  3               proshx:
0020C7  3               	bcs :+
0020C7  3               	jsr prosh1 		; on, so process it.
0020C7  3               :
0020C7  3               	clc
0020C7  3               	lda z80_x
0020C7  3               	adc #SHRSIZ
0020C7  3               	sta z80_x
0020C7  3               	bcc :+
0020C7  3               	inc z80_i
0020C7  3               :
0020C7  3               	dec shrctr		; round again.
0020C7  3               	bne prosh0
0020C7  3               .endif
0020C7  3               .if sflag
0020C7  3               	jsr scrly
0020C7  3               .endif
0020C7  3  60           	rts
0020C8  3               
0020C8  3               .if pflag
0020C8  3               ;shrctr:	.byte 0
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Proces shrapnel piece
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               prosh1:
0020C8  3               	jsr plot 		; delete the pixel.
0020C8  3               
0020C8  3               	lda #<shrptr		; shrapnel routine pointers.
0020C8  3               	sta z80_l
0020C8  3               	lda #>shrptr
0020C8  3               	sta z80_h
0020C8  3               
0020C8  3               	ldy #0
0020C8  3               	lda (z80_ix),y		; restore shrapnel type.
0020C8  3               	jsr prosh2 		; run the routine.
0020C8  3               	jsr chkxy		; check x and y are good before we redisplay.
0020C8  3               
0020C8  3               	lda #<SHRSIZ 		; distance to next.
0020C8  3               	sta z80_e
0020C8  3               	lda #>SHRSIZ
0020C8  3               	sta z80_d
0020C8  3               	rts
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Run the routine
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               prosh2:
0020C8  3               	asl a 			; 2 bytes per address.
0020C8  3               	tay
0020C8  3               	lda shrptr,y
0020C8  3               	sta z80_l
0020C8  3               	lda shrptr+1,y 		; fetch high byte from table.
0020C8  3               	sta z80_h
0020C8  3               	jmp (z80_hl) 		; jump to routine.
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Paricle routine table
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               shrptr:	.word laser		; laser.
0020C8  3               	.word trail		; vapour trail.
0020C8  3               	.word shrap		; shrapnel from explosion.
0020C8  3               	.word dotl		; horizontal starfield left.
0020C8  3               	.word dotr		; horizontal starfield right.
0020C8  3               	.word dotu		; vertical starfield up.
0020C8  3               	.word dotd		; vertical starfield down.
0020C8  3               	.word ptcusr		; user particle.
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Explosion shrapnel.
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               shrap:
0020C8  3               	ldy #1
0020C8  3               	lda (z80_ix),y 		; get the angle.
0020C8  3               	clc
0020C8  3               	adc #<shrsin		; shrapnel sine table.
0020C8  3               	sta z80_l
0020C8  3               	lda #>shrsin
0020C8  3               	adc #0
0020C8  3               	sta z80_h
0020C8  3               
0020C8  3               	ldy #0
0020C8  3               	lda (z80_hl),y 		; fetch value from table.
0020C8  3               	sta z80_e
0020C8  3               	inc z80_l 		; next byte of table.
0020C8  3               	bne :+
0020C8  3               	inc z80_h
0020C8  3               :
0020C8  3               	ldy #0
0020C8  3               	lda (z80_hl),y		; fetch value from table.
0020C8  3               	sta z80_d
0020C8  3               	inc z80_l		; next byte of table.
0020C8  3               	bne :+
0020C8  3               	inc z80_h
0020C8  3               :
0020C8  3               	ldy #0
0020C8  3               	lda (z80_hl),y 		; fetch value from table.
0020C8  3               	sta z80_c
0020C8  3               	inc z80_l 		; next byte of table.
0020C8  3               	bne :+
0020C8  3               	inc z80_h
0020C8  3               :
0020C8  3               	ldy #0
0020C8  3               	lda (z80_hl),y 		; fetch value from table.
0020C8  3               	sta z80_b
0020C8  3               
0020C8  3               	ldy #2
0020C8  3               	lda (z80_ix),y 		; x coordinate in hl.
0020C8  3               	clc
0020C8  3               	adc z80_e		; add sine lb
0020C8  3               	sta (z80_ix),y		; store new coordinate lb.
0020C8  3               	ldy #3
0020C8  3               	lda (z80_ix),y
0020C8  3               	adc z80_d		; add sine hb
0020C8  3               	sta (z80_ix),y		; store new coordinate hb.
0020C8  3               
0020C8  3               	ldy #4
0020C8  3               	lda (z80_ix),y	 	; y coordinate in hl.
0020C8  3               	clc
0020C8  3               	adc z80_c		; add cosine lb
0020C8  3               	sta (z80_ix),y		; store new coordinate lb.
0020C8  3               	ldy #5
0020C8  3               	lda (z80_ix),y
0020C8  3               	adc z80_b		; add cosine lb
0020C8  3               	sta (z80_ix),y		; store new coordinate hb.
0020C8  3               
0020C8  3               	rts
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Move dots
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               dotl:
0020C8  3               	ldy #5
0020C8  3               	lda (z80_ix),y
0020C8  3               	sec
0020C8  3               	sbc #1		 	; move left.
0020C8  3               	sta (z80_ix),y
0020C8  3               	rts
0020C8  3               dotr:
0020C8  3               	ldy #5
0020C8  3               	lda (z80_ix),y
0020C8  3               	clc
0020C8  3               	adc #1		 	; move left.
0020C8  3               	sta (z80_ix),y
0020C8  3               	rts
0020C8  3               dotu:
0020C8  3               	ldy #3
0020C8  3               	lda (z80_ix),y
0020C8  3               	sec
0020C8  3               	sbc #1		 	; move up.
0020C8  3               	sta (z80_ix),y
0020C8  3               	rts
0020C8  3               dotd:
0020C8  3               	ldy #3
0020C8  3               	lda (z80_ix),y
0020C8  3               	clc
0020C8  3               	adc #1			; move down.
0020C8  3               	sta (z80_ix),y
0020C8  3               	rts
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Check if coordinates are ok before redrawing at new position.
0020C8  3               ;
0020C8  3               ; left:   X>L		X=L	Ok
0020C8  3               ; right:  R+15>X	X=R	Ok
0020C8  3               ; top:    Y>T		Y=T	Ok
0020C8  3               ; bottom: B+15>Y	Y=B	Ok
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               chkxy:
0020C8  3               
0020C8  3               ; top:    Y>T		Y=T	Ok
0020C8  3               
0020C8  3               	ldy #3
0020C8  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0020C8  3               	cmp wntopx		; window top.
0020C8  3               	bcs :+			; compare with top window limit.
0020C8  3               	jmp kilshr		; out of window, kill shrapnel.
0020C8  3               :
0020C8  3               ; left:   X>L		X=L	Ok
0020C8  3               
0020C8  3               	ldy #5
0020C8  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0020C8  3               	cmp wnlftx		; left edge.
0020C8  3               	bcs :+			; compare with left window limit.
0020C8  3               	jmp kilshr		; out of window, kill shrapnel.
0020C8  3               :
0020C8  3               ; bottom: B+15>Y	Y=B	Ok
0020C8  3               
0020C8  3               	lda wnbotx		; point to bottom.
0020C8  3               	clc
0020C8  3               	adc #15
0020C8  3               	ldy #3
0020C8  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0020C8  3               	bcs :+			; compare with shrapnel x coordinate.
0020C8  3               	jmp kilshr		; off screen, kill shrapnel..
0020C8  3               :
0020C8  3               ; right:  R+15>X	X=R	Ok
0020C8  3               
0020C8  3               	lda wnrgtx		; point to right edge.
0020C8  3               	clc
0020C8  3               	adc #15
0020C8  3               	ldy #5
0020C8  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0020C8  3               	bcs :+			; compare with window limit.
0020C8  3               	jmp kilshr		; off screen, kill shrapnel.
0020C8  3               :
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Drop through.
0020C8  3               ; Display shrapnel.
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               plot:
0020C8  3               	ldy #3
0020C8  3               	lda (z80_ix),y		; y integer.
0020C8  3               	sta dispy	 	; workspace coordinates.
0020C8  3               	ldy #5
0020C8  3               	lda (z80_ix),y	 	; x integer.
0020C8  3               	sta dispx 		; workspace coordinates.
0020C8  3               
0020C8  3               	ldy #0
0020C8  3               	lda (z80_ix),y 		; type.
0020C8  3               	bne :+			; is it a laser?
0020C8  3               	jmp plot1 		; yes, draw laser instead.
0020C8  3               :
0020C8  3               plot0:
0020C8  3               	lda dispx		; which pixel within byte do we
0020C8  3               	and #7			; want to set first?
0020C8  3               	tay
0020C8  3               	lda dots,y 		; table of small pixel positions.
0020C8  3               	sta z80_e 		; get value.
0020C8  3               
0020C8  3               	jsr scadd 		; screen address.
0020C8  3               	ldy #0
0020C8  3               	lda (scraddr),y		; see what's already there.
0020C8  3               	eor z80_e
0020C8  3               	sta (scraddr),y 	; put back on screen.
0020C8  3               	rts
0020C8  3               
0020C8  3               plot1:
0020C8  3               	jsr scadd 		; screen address.
0020C8  3               	ldy #0
0020C8  3               	lda (scraddr),y 	; fetch byte there.
0020C8  3               	eor #255 		; toggle all bits.
0020C8  3               	sta (scraddr),y 	; new byte.
0020C8  3               	rts
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Switch off shrapnel
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               kilshr:
0020C8  3               	lda #128
0020C8  3               	ldy #0
0020C8  3               	sta (z80_ix),y	; switch off shrapnel.
0020C8  3               	rts
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Sine/cosine table
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               shrsin:	.word 0,1024,391,946,724,724,946,391
0020C8  3               	.word 1024,0,946,65144,724,64811,391,64589
0020C8  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0020C8  3               	.word 64512,0,64589,391,64811,724,65144,946
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Create trail
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               trail:
0020C8  3               	ldy #1
0020C8  3               	lda (z80_ix),y 	; time remaining.
0020C8  3               	sec
0020C8  3               	sbc #1
0020C8  3               	sta (z80_ix),y
0020C8  3               	bne :+
0020C8  3               	jmp trailk		; time to switch it off.
0020C8  3               :
0020C8  3               	jsr qrand		; get a random number.
0020C8  3               	lsr a 			; x or y axis?
0020C8  3               	bcc :+
0020C8  3               	jmp trailv		; use y.
0020C8  3               :
0020C8  3               ; Trail horizontal
0020C8  3               
0020C8  3               	lsr a 			; which direction?
0020C8  3               	bcc :+
0020C8  3               	jmp traill		; go left.
0020C8  3               :
0020C8  3               ; Trail right
0020C8  3               
0020C8  3               	ldy #5
0020C8  3               	lda (z80_ix),y
0020C8  3               	clc
0020C8  3               	adc #1	 		; go right.
0020C8  3               	sta (z80_ix),y
0020C8  3               	rts
0020C8  3               
0020C8  3               ; Trail left
0020C8  3               
0020C8  3               traill:
0020C8  3               	ldy #5
0020C8  3               	lda (z80_ix),y
0020C8  3               	sec
0020C8  3               	sbc #1 			; go left.
0020C8  3               	sta (z80_ix),y
0020C8  3               	rts
0020C8  3               
0020C8  3               ; Trail vertical
0020C8  3               
0020C8  3               trailv:
0020C8  3               	lsr a		 	; which direction?
0020C8  3               	bcc :+
0020C8  3               	jmp trailu		; go up.
0020C8  3               :
0020C8  3               ; Trail down
0020C8  3               
0020C8  3               	ldy #3
0020C8  3               	lda (z80_ix),y
0020C8  3               	clc
0020C8  3               	adc #1 			; go down.
0020C8  3               	sta (z80_ix),y
0020C8  3               	rts
0020C8  3               
0020C8  3               ; Trail up
0020C8  3               
0020C8  3               trailu:
0020C8  3               	ldy #3
0020C8  3               	lda (z80_ix),y
0020C8  3               	sec
0020C8  3               	sbc #1 			; go up.
0020C8  3               	sta (z80_ix),y
0020C8  3               	rts
0020C8  3               
0020C8  3               ; Kill trail
0020C8  3               
0020C8  3               trailk:
0020C8  3               	lda #200		; set off-screen to kill vapour trail.
0020C8  3               	ldy #3
0020C8  3               	sta (z80_ix),y
0020C8  3               	rts
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Create laser beam
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               laser:
0020C8  3               	ldy #1
0020C8  3               	lda (z80_ix),y 		; direction.
0020C8  3               	ror a 			; left or right?
0020C8  3               	bcc :+
0020C8  3               	jmp laserl		; move left.
0020C8  3               :
0020C8  3               ; Laser right
0020C8  3               
0020C8  3               	lda #8			; distance to travel.
0020C8  3               	sta z80_b
0020C8  3               	jmp laserm		; move laser.
0020C8  3               
0020C8  3               ; Laser left
0020C8  3               
0020C8  3               laserl:
0020C8  3               	lda #248		; distance to travel.
0020C8  3               	sta z80_b
0020C8  3               laserm:
0020C8  3               	ldy #5
0020C8  3               	lda (z80_ix),y		; x position.
0020C8  3               	clc
0020C8  3               	adc z80_b		; add distance.
0020C8  3               	sta (z80_ix),y		; set new x coordinate.
0020C8  3               
0020C8  3               ; Test new block.
0020C8  3               
0020C8  3               	sta dispx 		; set x for block collision detection purposes.
0020C8  3               	ldy #3
0020C8  3               	lda (z80_ix),y 		; get y.
0020C8  3               	sta dispy		; set coordinate for collision test.
0020C8  3               	jsr tstbl 		; get block type there.
0020C8  3               	cmp #WALL		; is it solid?
0020C8  3               	bne :+
0020C8  3               	jmp trailk		; yes, it cannot pass.
0020C8  3               :
0020C8  3               .if pflag .or dflag
0020C8  3                       cmp #FODDER             ; is it fodder?
0020C8  3                       bne :+
0020C8  3                       jsr fdchk               ; remove fodder block.
0020C8  3                       jmp trailk              ; destroy laser.
0020C8  3               :
0020C8  3               .endif
0020C8  3                       rts                     ; no, ignore it.
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Dots mask
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               dots:	.byte 128,64,32,16,8,4,2,1
0020C8  3               
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Plot, preserving de.
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               plotde:
0020C8  3               	lda z80_d 		; put de on stack.
0020C8  3               	pha
0020C8  3               	lda z80_e
0020C8  3               	pha
0020C8  3               
0020C8  3               	jsr plot 		; plot pixel.
0020C8  3               
0020C8  3               	pla			; restore de from stack.
0020C8  3               	sta z80_e
0020C8  3               	pla
0020C8  3               	sta z80_d
0020C8  3               
0020C8  3               	rts
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Shoot a laser.
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               shoot:
0020C8  3               	sta z80_c		; store direction in c register.
0020C8  3               	ldy #8
0020C8  3               	lda (z80_ix),y 		; y coordinate.
0020C8  3               	clc
0020C8  3               shoot1:
0020C8  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0020C8  3               	sta z80_l 		; puty y coordinate in l.
0020C8  3               
0020C8  3               	ldy #9
0020C8  3               	lda (z80_ix),y 		; x coordinate in h.
0020C8  3               	sta z80_h
0020C8  3               
0020C8  3               	lda z80_i		; store pointer to sprite.
0020C8  3               	pha
0020C8  3               	lda z80_x
0020C8  3               	pha
0020C8  3               
0020C8  3               	jsr fpslot 		; find particle slot.
0020C8  3               	bcs :+
0020C8  3               	jmp vapou2		; failed, restore ix.
0020C8  3               :
0020C8  3               	lda #0
0020C8  3               	ldy #0
0020C8  3               	sta (z80_ix),y 		; set up a laser.
0020C8  3               
0020C8  3               	lda z80_c
0020C8  3               	ldy #1
0020C8  3               	sta (z80_ix),y 		; set the direction.
0020C8  3               
0020C8  3               	lda z80_l
0020C8  3               	ldy #3
0020C8  3               	sta (z80_ix),y		; set y coordinate.
0020C8  3               
0020C8  3               	ror z80_c		; check direction we want.
0020C8  3               	bcc :+
0020C8  3               	jmp shootr		; shoot right.
0020C8  3               :
0020C8  3               	lda z80_h		; X position.
0020C8  3               shoot0:
0020C8  3               	and #248		; align on character boundary.
0020C8  3               	ldy #5
0020C8  3               	sta (z80_ix),y		; set x coordinate.
0020C8  3               	jmp vapou0 		; draw first image.
0020C8  3               shootr:
0020C8  3               	lda z80_h		; x position.
0020C8  3               	clc
0020C8  3               	adc #15			; look right.
0020C8  3               	jmp shoot0		; align and continue.
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Create a bit of vapour trail.
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               vapour:
0020C8  3               	lda z80_i		; store pointer to sprite.
0020C8  3               	pha
0020C8  3               	lda z80_x
0020C8  3               	pha
0020C8  3               
0020C8  3               	ldy #8
0020C8  3               	lda (z80_ix),y 		; y coordinate.
0020C8  3               	clc
0020C8  3               vapou3:
0020C8  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0020C8  3               	sta z80_l
0020C8  3               
0020C8  3               	ldy #9
0020C8  3               	lda (z80_ix),y 		; x coordinate.
0020C8  3               	adc #7
0020C8  3               	sta z80_h
0020C8  3               
0020C8  3               	jsr fpslot 		; find particle slot.
0020C8  3               	bcc :+
0020C8  3               	jmp vapou1		; no, we can use it.
0020C8  3               :
0020C8  3               vapou2:
0020C8  3               	pla
0020C8  3               	sta z80_x
0020C8  3               	pla
0020C8  3               	sta z80_i
0020C8  3               	rts
0020C8  3               vapou1:
0020C8  3               	lda z80_l
0020C8  3               	ldy #3
0020C8  3               	sta (z80_ix),y		; set up y.
0020C8  3               
0020C8  3               	lda z80_h
0020C8  3               	ldy #5
0020C8  3               	sta (z80_ix),y 		; set up x coordinate.
0020C8  3               
0020C8  3               	jsr qrand		; get quick random number.
0020C8  3               	and #15			; random time.
0020C8  3               	clc
0020C8  3               	adc #15			; minimum time on screen.
0020C8  3               	ldy #1
0020C8  3               	sta (z80_ix),y		; set time on screen.
0020C8  3               
0020C8  3               	lda #1
0020C8  3               	ldy #0
0020C8  3               	sta (z80_ix),y		; define particle as vapour trail.
0020C8  3               vapou0:
0020C8  3               	jsr chkxy		; plot first position.
0020C8  3               	jmp vapou2
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Create a user particle.
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               ptusr:
0020C8  3               	sta z80_f		; store timer.
0020C8  3               
0020C8  3               	ldy #8
0020C8  3               	lda (z80_ix),y 		; y coordinate.
0020C8  3               	clc
0020C8  3               	adc #7			; mid-point of sprite.
0020C8  3               	sta z80_l
0020C8  3               
0020C8  3               	ldy #9
0020C8  3               	lda (z80_ix),y 		; x coordinate.
0020C8  3               	clc
0020C8  3               	adc #7			; mid-point of sprite.
0020C8  3               	sta z80_h
0020C8  3               
0020C8  3               	jsr fpslot 		; find particle slot.
0020C8  3               	bcs ptusr1
0020C8  3               	rts 			; out of slots, can't generate anything.
0020C8  3               ptusr1:
0020C8  3               	lda z80_l
0020C8  3               	ldy #3
0020C8  3               	sta (z80_ix),y 		; set up y.
0020C8  3               
0020C8  3               	lda z80_h
0020C8  3               	ldy #5
0020C8  3               	sta (z80_ix),y		; set up x coordinate.
0020C8  3               
0020C8  3               	lda z80_f 		; restore timer.
0020C8  3               	ldy #1
0020C8  3               	sta (z80_ix),y		; set time on screen.
0020C8  3               
0020C8  3               	lda #7
0020C8  3               	ldy #0
0020C8  3               	sta (z80_ix),y		; define particle as user particle.
0020C8  3               
0020C8  3               	jmp chkxy		; plot first position.
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Create a vertical or horizontal star.
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               star:
0020C8  3               	lda z80_i		; store pointer to sprite.
0020C8  3               	pha
0020C8  3               	lda z80_x
0020C8  3               	pha
0020C8  3               
0020C8  3               	jsr fpslot 		; find particle slot.
0020C8  3               	bcs star7		; found one we can use.
0020C8  3               star0:
0020C8  3               	pla 			; restore sprite pointer.
0020C8  3               	sta z80_x
0020C8  3               	pla
0020C8  3               	sta z80_i
0020C8  3               	rts 			; out of slots, can't generate anything.
0020C8  3               star7:
0020C8  3               	lda z80_c		; direction.
0020C8  3               	and #3 			; is it left?
0020C8  3               	bne :+
0020C8  3               	jmp star1 		; yes, it's left.
0020C8  3               :
0020C8  3               	cmp #1 			; is it right?
0020C8  3               	bne :+
0020C8  3               	jmp star2 		; yes, it's right.
0020C8  3               :
0020C8  3               	cmp #2 			; is it up?
0020C8  3               	bne :+
0020C8  3               	jmp star3 		; yes, it's up.
0020C8  3               :
0020C8  3               	ldy wntopx 		; get edge of screen.
0020C8  3               	iny			; down one pixel.
0020C8  3               	tya
0020C8  3               star8:
0020C8  3               	ldy #3
0020C8  3               	sta (z80_ix),y 		; set y coord.
0020C8  3               	jsr qrand 		; get quick random number.
0020C8  3               star9:
0020C8  3               	ldy #5
0020C8  3               	sta (z80_ix),y		; set x position.
0020C8  3               
0020C8  3               	lda z80_c		; direction.
0020C8  3               	and #3			; zero to three.
0020C8  3               	clc
0020C8  3               	adc #3			; 3 to 6 for starfield.
0020C8  3               	ldy #0
0020C8  3               	sta (z80_ix),y		; define particle as star.
0020C8  3               	jsr chkxy		; plot first position.
0020C8  3               	jmp star0
0020C8  3               star1:
0020C8  3               	jsr qrand		; get quick random number.
0020C8  3               	ldy #3
0020C8  3               	sta (z80_ix),y 		; set y coord.
0020C8  3               
0020C8  3               	lda wnrgtx 		; get edge of screen.
0020C8  3               	clc
0020C8  3               	adc #15			; add width of sprite minus 1.
0020C8  3               	jmp star9
0020C8  3               star2:
0020C8  3               	jsr qrand 		; get quick random number.
0020C8  3               	ldy #3
0020C8  3               	sta (z80_ix),y		; set y coord.
0020C8  3               
0020C8  3               	lda wnlftx		; get edge of screen.
0020C8  3               	jmp star9
0020C8  3               star3:
0020C8  3               	lda wnbotx 		; get edge of screen.
0020C8  3               	clc
0020C8  3               	adc #15 		; height of sprite minus one pixel.
0020C8  3               	jmp star8
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Find particle slot for lasers or vapour trail.
0020C8  3               ; can't use alternate accumulator.
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               fpslot:
0020C8  3               	lda #<SHRAPN 		; shrapnel table.
0020C8  3               	sta z80_x
0020C8  3               	lda #>SHRAPN
0020C8  3               	sta z80_i
0020C8  3               
0020C8  3               	lda #NUMSHR		; number of pieces in table.
0020C8  3               	sta z80_b
0020C8  3               fpslt0:
0020C8  3               	ldy #0
0020C8  3               	lda (z80_ix),y		; get type.
0020C8  3               	asl a  			; is this slot in use?
0020C8  3               	bcc :+
0020C8  3               	rts			; no, we can use it.
0020C8  3               :
0020C8  3               	clc			; point to more shrapnel.
0020C8  3               	lda z80_x
0020C8  3               	adc #SHRSIZ
0020C8  3               	sta z80_x
0020C8  3               	bcc :+
0020C8  3               	inc z80_i
0020C8  3               :
0020C8  3               	dec z80_b		; repeat for all shrapnel.
0020C8  3               	bne fpslt0
0020C8  3               
0020C8  3               	clc
0020C8  3               	rts 			; out of slots, can't generate anything.
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Create an explosion at sprite position.
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               explod:
0020C8  3               	sta z80_c 		; particles to create.
0020C8  3               
0020C8  3               	lda z80_i 		; store pointer to sprite.
0020C8  3               	pha
0020C8  3               	lda z80_x
0020C8  3               	pha
0020C8  3               
0020C8  3               	ldy #8
0020C8  3               	lda (z80_ix),y 		; y coordinate.
0020C8  3               	sta z80_l
0020C8  3               	ldy #9
0020C8  3               	lda (z80_ix),y		; x coordinate.
0020C8  3               	sta z80_h
0020C8  3               
0020C8  3               	lda #<SHRAPN		; shrapnel table.
0020C8  3               	sta z80_x
0020C8  3               	lda #>SHRAPN
0020C8  3               	sta z80_i
0020C8  3               
0020C8  3               	lda #NUMSHR		; number of pieces in table.
0020C8  3               	sta explcnt
0020C8  3               expld0:
0020C8  3               	ldy #0
0020C8  3               	lda (z80_ix),y		; get type.
0020C8  3               	asl a 			; is this slot in use?
0020C8  3               	bcs expld1		; no, we can use it.
0020C8  3               expld2:
0020C8  3               	clc
0020C8  3               	lda z80_x
0020C8  3               	adc #SHRSIZ
0020C8  3               	sta z80_x
0020C8  3               	bcc :+
0020C8  3               	inc z80_i
0020C8  3               :
0020C8  3               	dec explcnt		; repeat for all shrapnel.
0020C8  3               	bne expld0
0020C8  3               expld3:
0020C8  3               	pla			; restore sprite pointer.
0020C8  3               	sta z80_x
0020C8  3               	pla
0020C8  3               	sta z80_i
0020C8  3               	rts 			; out of slots, can't generate any more.
0020C8  3               
0020C8  3               expld1:
0020C8  3               	lda z80_c		; shrapnel counter.
0020C8  3               	and #15			; 0 to 15.
0020C8  3               	clc			; add to x.
0020C8  3               	adc z80_l
0020C8  3               	ldy #3
0020C8  3               	sta (z80_ix),y		; y coord.
0020C8  3               
0020C8  3               	lda seed3 		; crap random number.
0020C8  3               	and #15			; 0 to 15.
0020C8  3               	clc 			; add to y.
0020C8  3               	adc z80_h
0020C8  3               	ldy #5
0020C8  3               	sta (z80_ix),y		; x coord.
0020C8  3               
0020C8  3               	lda #2
0020C8  3               	ldy #0
0020C8  3               	sta (z80_ix),y		; switch it on.
0020C8  3               
0020C8  3               	jsr chkxy		; plot first position.
0020C8  3               	jsr qrand		; quick random angle.
0020C8  3               	and #60 		; keep within range.
0020C8  3               	ldy #1
0020C8  3               	sta (z80_ix),y		; angle.
0020C8  3               
0020C8  3               	dec z80_c		; one less piece of shrapnel to generate.
0020C8  3               	bne expld2 		; back to main explosion loop.
0020C8  3               	jmp expld3 		; restore sprite pointer and exit.
0020C8  3               
0020C8  3               ;explcnt:	.byte 0
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Quick random
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               qrand:
0020C8  3               	jsr random		; r register.
0020C8  3               	eor seed3		; combine with seed.
0020C8  3               	sta seed3 		; new seed.
0020C8  3               	rts
0020C8  3               
0020C8  3               ;seed3:	.byte 0
0020C8  3               
0020C8  3               ;----------------------------------------------------
0020C8  3               ; Display all shrapnel.
0020C8  3               ;----------------------------------------------------
0020C8  3               
0020C8  3               dshrp:
0020C8  3               	lda #<plotde		; display routine.
0020C8  3               	sta proshx+1
0020C8  3               	lda #>plotde
0020C8  3               	sta proshx+2
0020C8  3               	jsr proshr		; process shrapnel.
0020C8  3               
0020C8  3               	lda #<prosh1		; processing routine.
0020C8  3               	sta proshx+1
0020C8  3               	lda #>prosh1
0020C8  3               	sta proshx+2
0020C8  3               	rts
0020C8  3               
0020C8  3               ;------------------------------------------------------
0020C8  3               ; Particle engine.
0020C8  3               ;
0020C8  3               ; Init particle data for 55 particles in SHRAPN table.
0020C8  3               ; Every particle has 6 bytes.
0020C8  3               ;
0020C8  3               ; global:	-
0020C8  3               ; local:	x,y,hl
0020C8  3               ; calls:	-
0020C8  3               ;------------------------------------------------------
0020C8  3               
0020C8  3               inishr:
0020C8  3               	lda #<SHRAPN 		; table.
0020C8  3               	sta z80_l
0020C8  3               	lda #>SHRAPN
0020C8  3               	sta z80_h
0020C8  3               
0020C8  3               	ldy #0
0020C8  3               	ldx #NUMSHR		; shrapnel pieces to process.
0020C8  3               inish0:
0020C8  3               	lda #255 		; kill the shrapnel.
0020C8  3               	sta (z80_hl),y
0020C8  3               
0020C8  3               	clc 			; point there.
0020C8  3               	lda z80_l
0020C8  3               	adc #SHRSIZ		; distance to next.
0020C8  3               	sta z80_l
0020C8  3               	bcc :+
0020C8  3               	inc z80_h
0020C8  3               :
0020C8  3               	dex
0020C8  3               	bne inish0 		; round again.
0020C8  3               	rts
0020C8  3               
0020C8  3               ;------------------------------------------------------
0020C8  3               ; Check for collision between laser and sprite.
0020C8  3               ;------------------------------------------------------
0020C8  3               
0020C8  3               lcol:
0020C8  3               	lda #<SHRAPN		; shrapnel table.
0020C8  3               	sta z80_l
0020C8  3               	lda #>SHRAPN
0020C8  3               	sta z80_h
0020C8  3               
0020C8  3               	lda #NUMSHR		; number of pieces in table.
0020C8  3               	sta z80_b
0020C8  3               lcol0:
0020C8  3               	ldy #0
0020C8  3               	lda (z80_hl),y 		; get type.
0020C8  3               	beq lcol1		; yes, check collision.
0020C8  3               lcol3:
0020C8  3               	clc			; point to more shrapnel.
0020C8  3               	lda z80_l
0020C8  3               	adc #SHRSIZ
0020C8  3               	sta z80_l
0020C8  3               	bcc :+
0020C8  3               	inc z80_h
0020C8  3               :
0020C8  3               	dec z80_b		; repeat for all shrapnel.
0020C8  3               	bne lcol0
0020C8  3               	rts 			; no collision, carry not set.
0020C8  3               lcol1:
0020C8  3               	ldy #3
0020C8  3               	lda (z80_hl),y		; get y.
0020C8  3               	sec
0020C8  3               	ldy #8
0020C8  3               	sbc (z80_ix),y		; subtract sprite y.
0020C8  3               lcolh:
0020C8  3               	cmp #SPR_HGT 		; within range?
0020C8  3               	bcc :+
0020C8  3               	jmp lcol2		; no, missed.
0020C8  3               :
0020C8  3               	ldy #5
0020C8  3               	lda (z80_hl),y 		; get x.
0020C8  3               	sec
0020C8  3               	ldy #9
0020C8  3               	sbc (z80_ix),y 		; subtract sprite y.
0020C8  3               	cmp #16			; within range?
0020C8  3               	bcs :+
0020C8  3               	jmp lcol4 		; yes, collision occurred.
0020C8  3               :
0020C8  3               lcol2:
0020C8  3               	jmp lcol3
0020C8  3               lcol4:
0020C8  3               	sec
0020C8  3               	rts 			; return with carry set for collision.
0020C8  3               .endif
0020C8  3               
0020C8  3               ;------------------------------------------------------
0020C8  3               ; Main game engine code starts here.
0020C8  3               ; After initialisation, mloop is the main loop
0020C8  3               ;------------------------------------------------------
0020C8  3               
0020C8  3               game:
0020C8  3               
0020C8  3               ; Set up screen address table.
0020C8  3               
0020C8  3               setsat:
0020C8  3  A9 00        	lda #<ScreenAddr		; start of screen.
0020CA  3  85 rr        	sta scraddr
0020CC  3  A9 E4        	lda #>ScreenAddr
0020CE  3  85 rr        	sta scraddr+1
0020D0  3               
0020D0  3  A0 00        	ldy #0			; vertical lines on screen.
0020D2  3               setsa0:
0020D2  3  A5 rr        	lda scraddr
0020D4  3  99 00 E0     	sta SCADTB_lb,y		; write low byte.
0020D7  3  A5 rr        	lda scraddr+1
0020D9  3  C0 C0        	cpy #192		; vertical lines on screen.
0020DB  3  90 02        	bcc :+
0020DD  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
0020DF  3               :
0020DF  3  99 00 E1     	sta SCADTB_hb,y		; write high byte.
0020E2  3  20 D2 2D     	jsr nline		; next line down.
0020E5  3  C8           	iny			; next position in table.
0020E6  3  D0 EA        	bne setsa0
0020E8  3               
0020E8  3               ; Init graphics mode
0020E8  3               
0020E8  3  A9 F0        	lda #ScrMode		; graphics mode
0020EA  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
0020ED  3  20 C6 20     	jsr setpal 		; set up palette.
0020F0  3               
0020F0  3               ; Init AtoMMC joystick
0020F0  3  20 0E 38     	jsr joyinit		; AtoMMC joystick on PORT B
0020F3  3               
0020F3  3               rpblc2:
0020F3  3               .if pflag
0020F3  3               	jsr inishr 		; initialise particle engine.
0020F3  3               .endif
0020F3  3               evintr:
0020F3  3  20 16 33     	jsr evnt12 		; call intro/menu event.
0020F6  3               
0020F6  3  A9 02        	lda #WALL 		; write default property.
0020F8  3  A2 00        	ldx #0
0020FA  3               clrmap:
0020FA  3  9D 00 DD     	sta MAP,x 		; block properties.
0020FD  3  9D 00 DE     	sta MAP+256,x
002100  3  9D 00 DF     	sta MAP+512,x
002103  3  E8           	inx			; next byte.
002104  3  D0 F4        	bne clrmap
002106  3               .if oflag
002106  3               	jsr iniob 		; initialise objects.
002106  3               .endif
002106  3  A9 00        	lda #0			; put zero in accumulator.
002108  3  85 rr        	sta gamwon		; reset game won flag.
00210A  3               
00210A  3  20 73 22     	jsr inisc 		; init the score.
00210D  3               mapst:
00210D  3  AD 09 33     	lda stmap 		; start position on map.
002110  3  8D FD 32     	sta roomtb		; set up position in table, if there is one.
002113  3               
002113  3               inipbl:
002113  3               .if aflag
002113  3               	lda #<eop		; reset blockpointer
002113  3               	sta pbptr
002113  3               	lda #>eop
002113  3               	sta pbptr+1
002113  3               .endif
002113  3  20 E5 2E     	jsr initsc 		; set up first screen.
002116  3               
002116  3  A9 EC        	lda #<ssprit 		; default to spare sprite in table.
002118  3  85 68        	sta z80_x
00211A  3  A9 32        	lda #>ssprit
00211C  3  85 69        	sta z80_i
00211E  3               evini:
00211E  3  20 78 33     	jsr evnt13 		; initialisation.
002121  3               
002121  3               ; Two restarts.
002121  3               ; First restart - clear all sprites and initialise everything.
002121  3               
002121  3               rstrt:
002121  3  20 13 22     	jsr rsevt 		; restart events.
002124  3  20 38 20     	jsr xspr 		; clear sprite table.
002127  3  20 51 30     	jsr sprlst 		; fetch pointer to screen sprites.
00212A  3  20 DA 30     	jsr ispr 		; initialise sprite table.
00212D  3               
00212D  3  4C 3C 21     	jmp rstrt0
002130  3               
002130  3               ; Second restart - clear all but player, and don't initialise him.
002130  3               
002130  3               rstrtn:
002130  3  20 13 22     	jsr rsevt		; restart events.
002133  3  20 7E 30     	jsr nspr 		; clear all non-player sprites.
002136  3  20 51 30     	jsr sprlst 		; fetch pointer to screen sprites.
002139  3  20 17 31     	jsr kspr 		; initialise sprite table, no more players.
00213C  3               
00213C  3               ; Set up the player and/or enemy sprites.
00213C  3               
00213C  3               rstrt0:
00213C  3  A9 00        	lda #0 			; zero in accumulator.
00213E  3  85 rr        	sta nexlev 		; reset next level flag.
002140  3  85 rr        	sta restfl 		; reset restart flag.
002142  3  85 rr        	sta deadf 		; reset dead flag.
002144  3  20 E1 25     	jsr droom 		; show screen layout.
002147  3               rpblc0:
002147  3               .if pflag
002147  3               	jsr inishr 		; initialise particle engine.
002147  3               .endif
002147  3               .if aflag
002147  3               	jsr rbloc		; draw blocks for this screen
002147  3               .endif
002147  3               .if oflag
002147  3               	jsr shwob		; draw objects.
002147  3               .endif
002147  3               
002147  3  A9 20        	lda #<sprtab 		; address of sprite table, even sprites.
002149  3  85 68        	sta z80_x
00214B  3  A9 32        	lda #>sprtab
00214D  3  85 69        	sta z80_i
00214F  3  20 C3 2B     	jsr dspr 		; display sprites.
002152  3               
002152  3  A9 31        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002154  3  85 68        	sta z80_x
002156  3  A9 32        	lda #>(sprtab+TABSIZ)
002158  3  85 69        	sta z80_i
00215A  3  20 C3 2B     	jsr dspr 		; display sprites.
00215D  3               mloop:
00215D  3  20 45 20     	jsr vsync 		; synchronise with display.
002160  3  A9 20        	lda #<sprtab 		; address of sprite table, even sprites.
002162  3  85 68        	sta z80_x
002164  3  A9 32        	lda #>sprtab
002166  3  85 69        	sta z80_i
002168  3  20 C3 2B     	jsr dspr 		; display even sprites.
00216B  3               
00216B  3               ;	jsr plsnd 		; play sounds.
00216B  3               
00216B  3  20 C7 20     	jsr proshr
00216E  3  A9 31        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002170  3  85 68        	sta z80_x
002172  3  A9 32        	lda #>(sprtab+TABSIZ)
002174  3  85 69        	sta z80_i
002176  3  20 C3 2B     	jsr dspr 		; display odd sprites.
002179  3               
002179  3  A9 EC        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00217B  3  85 68        	sta z80_x
00217D  3  A9 32        	lda #>(ssprit)
00217F  3  85 69        	sta z80_i
002181  3               evlp1:
002181  3  20 14 33     	jsr evnt10 		; called once per main loop.
002184  3  20 41 2B     	jsr pspr 		; process sprites.
002187  3               
002187  3               ; Main loop events.
002187  3               
002187  3  A9 EC        	lda #<ssprit 		; point to spare sprite for spawning purposes.
002189  3  85 68        	sta z80_x
00218B  3  A9 32        	lda #>ssprit
00218D  3  85 69        	sta z80_i
00218F  3               evlp2:
00218F  3  20 15 33     	jsr evnt11 		; called once per main loop.
002192  3               bsortx:
002192  3  20 B7 2A     	jsr bsort 		; sort sprites.
002195  3               
002195  3  A5 rr        	lda nexlev		; finished level flag.
002197  3  F0 03        	beq :+
002199  3  4C C1 21     	jmp newlev		; is set, go to next level.
00219C  3               :
00219C  3  A5 rr        	lda gamwon		; finished game flag.
00219E  3  F0 03        	beq :+
0021A0  3  4C D0 21     	jmp evwon		; is set, finish the game.
0021A3  3               :
0021A3  3  A5 rr        	lda restfl 		; finished level flag.
0021A5  3  C9 01        	cmp #1			; has it been set?
0021A7  3  D0 03        	bne :+
0021A9  3  4C 21 21     	jmp rstrt		; yes, go to next level.
0021AC  3               :
0021AC  3  C9 02        	cmp #2			; has it been set?
0021AE  3  D0 03        	bne :+
0021B0  3  4C 30 21     	jmp rstrtn		; yes, go to next level.
0021B3  3               :
0021B3  3  A5 rr        	lda deadf 		; dead flag.
0021B5  3  F0 03        	beq :+
0021B7  3  4C D6 21     	jmp pdead		; yes, player dead.
0021BA  3               :
0021BA  3               ; back to start of main loop.
0021BA  3               
0021BA  3  E6 rr        	inc frmno
0021BC  3  E6 rr        	inc clock
0021BE  3  4C 5D 21     	jmp mloop		; switched to a jmp mloop during test mode.
0021C1  3               
0021C1  3               ;----------------------------------------------------------
0021C1  3               ; Read blocks from list and update screen accordingly.
0021C1  3               ;----------------------------------------------------------
0021C1  3               
0021C1  3               .if aflag
0021C1  3               rbloc:
0021C1  3               	lda #<eop		; reset temp blockpointer
0021C1  3               	sta pbbuf
0021C1  3               	lda #>eop
0021C1  3               	sta pbbuf+1
0021C1  3               
0021C1  3               rbloc2:
0021C1  3               	lda pbbuf			; check for last block
0021C1  3               	cmp pbptr
0021C1  3               	bne rbloc1
0021C1  3               	lda pbbuf+1
0021C1  3               	cmp pbptr+1
0021C1  3               	bne rbloc1
0021C1  3               	rts
0021C1  3               rbloc1:
0021C1  3               	ldy #0
0021C1  3               	lda (pbbuf),y		; check if block for this scno
0021C1  3               	cmp scno
0021C1  3               	bne rbloc0		; if not, skip
0021C1  3               	iny
0021C1  3               	lda (pbbuf),y		; get y
0021C1  3               	sta dispy
0021C1  3               	iny
0021C1  3               	lda (pbbuf),y		; get x
0021C1  3               	sta dispx
0021C1  3               	iny
0021C1  3               	lda (pbbuf),y		; get blocknr
0021C1  3               	jsr pattr2		; draw block
0021C1  3               rbloc0:
0021C1  3               	clc			; point to next block
0021C1  3               	lda pbbuf
0021C1  3               	adc #4
0021C1  3               	sta pbbuf
0021C1  3               	bcc rbloc2
0021C1  3               	inc pbbuf+1
0021C1  3               	jmp rbloc2
0021C1  3               .endif
0021C1  3               
0021C1  3               ;----------------------------------------------------------
0021C1  3               ; New level
0021C1  3               ;----------------------------------------------------------
0021C1  3               
0021C1  3               ;.repeat 270
0021C1  3               ;  .byte 0
0021C1  3               ;.endrep
0021C1  3               
0021C1  3               newlev:
0021C1  3  A5 rr        	lda scno 			; current screen.
0021C3  3  18           	clc
0021C4  3  69 01        	adc #1				; next screen.
0021C6  3  CD 1E 34     	cmp numsc			; total number of screens.
0021C9  3  B0 05        	bcs evwon			; yes, game finished.
0021CB  3  85 rr        	sta scno			; set new level number.
0021CD  3  4C 21 21     	jmp rstrt			; restart, clearing all aliens.
0021D0  3               
0021D0  3               evwon:
0021D0  3  20 7D 33     	jsr evnt18		 	; game completed.
0021D3  3  4C E8 21     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0021D6  3               
0021D6  3               ;----------------------------------------------------------
0021D6  3               ; Player dead.
0021D6  3               ;----------------------------------------------------------
0021D6  3               
0021D6  3               ;.repeat 258
0021D6  3               ;  .byte 0
0021D6  3               ;.endrep
0021D6  3               
0021D6  3               pdead:
0021D6  3  A9 00        	lda #0				; zeroise accumulator.
0021D8  3  85 rr        	sta deadf			; reset dead flag.
0021DA  3               evdie:
0021DA  3  20 7B 33     	jsr evnt16 			; death subroutine.
0021DD  3  A5 rr        	lda numlif			; number of lives.
0021DF  3  F0 03        	beq :+
0021E1  3  4C 21 21     	jmp rstrt 			; restart game.
0021E4  3               :
0021E4  3               evfail:
0021E4  3  20 7C 33     	jsr evnt17 			; failure event.
0021E7  3  60           	rts			; restart game
0021E8  3               
0021E8  3               ;----------------------------------------------------------
0021E8  3               ; Tidy things up
0021E8  3               ;----------------------------------------------------------
0021E8  3               
0021E8  3               ;.repeat 291
0021E8  3               ;  .byte 0
0021E8  3               ;.endrep
0021E8  3               
0021E8  3               tidyup:
0021E8  3  A0 00        	ldy #0				; digits to check.
0021EA  3               tidyu2:
0021EA  3  B9 5C 23     	lda score,y 			; get score digit.
0021ED  3  CD 62 23     	cmp hiscor 			; are we larger than high score digit?
0021F0  3  90 07        	bcc tidyu0			; high score is bigger.
0021F2  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0021F4  3  C8           	iny				; next digit of high score.
0021F5  3  C0 06        	cpy #6
0021F7  3  D0 F1        	bne tidyu2			; repeat for all digits
0021F9  3               tidyu0:
0021F9  3  A9 5C        	lda #<score			; return pointing to score.
0021FB  3  85 62        	sta z80_c
0021FD  3  A9 23        	lda #>score
0021FF  3  85 63        	sta z80_b
002201  3  60           	rts
002202  3               tidyu1:
002202  3  A0 05        	ldy #5
002204  3               tidyu3:
002204  3  B9 5C 23     	lda score,y			; score.
002207  3  99 62 23     	sta hiscor,y			; high score.
00220A  3  88           	dey
00220B  3  10 F7        	bpl tidyu3 			; copy score to high score.
00220D  3               evnewh:
00220D  3  20 7E 33     	jsr evnt19			; new high score event.
002210  3  4C F9 21     	jmp tidyu0			; tidy up.
002213  3               
002213  3               ;--------------------------------------------------
002213  3               ; Restart event.
002213  3               ;--------------------------------------------------
002213  3               
002213  3               rsevt:
002213  3  A9 EC        	lda #<ssprit 			; default to spare element in table.
002215  3  85 68        	sta z80_x
002217  3  A9 32        	lda #>ssprit
002219  3  85 69        	sta z80_i
00221B  3               evrs:
00221B  3  4C 79 33     	jmp evnt14	 		; call restart event.
00221E  3               
00221E  3               ;------------------------------------------------------------------
00221E  3               ; Copy number passed in a to string position bc, right-justified.
00221E  3               ;
00221E  3               ; Input:
00221E  3               ;  A  = number
00221E  3               ;  BC = string address
00221E  3               ;
00221E  3               ; Output:
00221E  3               ;  BC = string with number
00221E  3               ;-----------------------------------------------------------------
00221E  3               
00221E  3               num2ch:
00221E  3  85 65        	sta z80_d		; Save number
002220  3               
002220  3  A9 00        	lda #0
002222  3  85 rr        	sta flag
002224  3               numdg3:
002224  3  A2 64        	ldx #100		; hundreds column.
002226  3  86 64        	stx z80_e
002228  3  20 38 22     	jsr numdg		; show digit.
00222B  3               numdg2:
00222B  3  A2 0A        	ldx #10			; tens column.
00222D  3  86 64        	stx z80_e
00222F  3  20 38 22     	jsr numdg		; show digit.
002232  3               
002232  3  E6 rr        	inc flag
002234  3  A2 01        	ldx #1			; units column.
002236  3  86 64        	stx z80_e
002238  3               numdg:
002238  3  A9 30        	lda #48			; clear digit.
00223A  3  85 61        	sta z80_a
00223C  3               numdg1:
00223C  3  A5 65        	lda z80_d
00223E  3  C5 64        	cmp z80_e
002240  3  90 0E        	bcc numdg0		; nothing to show.
002242  3  38           	sec
002243  3  A5 65        	lda z80_d
002245  3  E5 64        	sbc z80_e		; subtract from column.
002247  3  85 65        	sta z80_d
002249  3  E6 61        	inc z80_a		; increment digit.
00224B  3  E6 rr        	inc flag
00224D  3  4C 3C 22     	jmp numdg1		; repeat until column is zero.
002250  3               numdg0:
002250  3  A0 00        	ldy #0
002252  3  A5 61        	lda z80_a
002254  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002256  3  A5 rr        	lda flag
002258  3  F0 06        	beq :+
00225A  3  E6 62        	inc z80_c		; next buffer position.
00225C  3  D0 02        	bne :+
00225E  3  E6 63        	inc z80_b
002260  3               :
002260  3  60           	rts
002261  3               num2dd:
002261  3  85 65        	sta z80_d		; Save number
002263  3               
002263  3  A9 01        	lda #1
002265  3  85 rr        	sta flag
002267  3               
002267  3  4C 2B 22     	jmp numdg2
00226A  3               num2td:
00226A  3  85 65        	sta z80_d		; Save number
00226C  3               
00226C  3  A9 01        	lda #1
00226E  3  85 rr        	sta flag
002270  3  4C 24 22     	jmp numdg3
002273  3               
002273  3               ;flag:	.byte 0
002273  3               
002273  3               ;---------------------------------------------------------
002273  3               ; Reset score to "000000"
002273  3               ;---------------------------------------------------------
002273  3               
002273  3               inisc:
002273  3  A9 30        	lda #'0'
002275  3  A2 05        	ldx #5			; digits to initialise.
002277  3               inisc0:
002277  3  9D 5C 23     	sta score,x 		; write zero digit.
00227A  3  CA           	dex			; next column.
00227B  3  10 FA        	bpl inisc0		; repeat for all digits.
00227D  3               
00227D  3  60           	rts
00227E  3               
00227E  3               ;-----------------------------------------------------
00227E  3               ; Multiply h by d and return in hl.
00227E  3               ;
00227E  3               ; Input:
00227E  3               ;  H = first number
00227E  3               ;  D = second number
00227E  3               ;
00227E  3               ; Output:
00227E  3               ;  HL = result H x D
00227E  3               ;-----------------------------------------------------
00227E  3               
00227E  3               imul:
00227E  3  A5 65        	lda z80_d		; HL = H * D
002280  3  85 64        	sta z80_e
002282  3  A5 67        	lda z80_h
002284  3  85 62        	sta z80_c		; make c first multiplier.
002286  3               imul0:
002286  3  A9 00        	lda #0			; zeroise total.
002288  3  85 66        	sta z80_l
00228A  3  85 67        	sta z80_h
00228C  3               
00228C  3  A5 67        	lda z80_h
00228E  3  85 65        	sta z80_d		; zeroise high byte.
002290  3               
002290  3  A9 08        	lda #8			; repeat 8 times.
002292  3  85 63        	sta z80_b
002294  3               imul1:
002294  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
002296  3  90 0E        	bcc imul2		; wasn't set.
002298  3  18           	clc			; bit was set, so add de.
002299  3  A5 66        	lda z80_l
00229B  3  65 64        	adc z80_e
00229D  3  85 66        	sta z80_l
00229F  3  A5 67        	lda z80_h
0022A1  3  65 65        	adc z80_d
0022A3  3  85 67        	sta z80_h
0022A5  3  18           	clc 			; reset carry.
0022A6  3               imul2:
0022A6  3  06 64        	asl z80_e 		; shift de 1 bit left.
0022A8  3  26 65        	rol z80_d
0022AA  3  C6 63        	dec z80_b
0022AC  3  D0 E6        	bne imul1		; repeat 8 times.
0022AE  3               
0022AE  3  60           	rts
0022AF  3               
0022AF  3               ;-----------------------------------------------
0022AF  3               ; Divide d by e and return in d, remainder in a.
0022AF  3               ;
0022AF  3               ; Input:
0022AF  3               ;  D = first number
0022AF  3               ;  E = second number
0022AF  3               ;
0022AF  3               ; Output:
0022AF  3               ;  D = result D/E
0022AF  3               ;  A = remainder
0022AF  3               ;-----------------------------------------------
0022AF  3               
0022AF  3               idiv:
0022AF  3  A9 00        	lda #0
0022B1  3  A0 08        	ldy #8		 	; bits to shift.
0022B3  3  06 65        	asl z80_d
0022B5  3               idiv0:
0022B5  3  2A           	rol a 			; multiply d by 2.
0022B6  3  C5 64        	cmp z80_e 		; test if e is smaller.
0022B8  3  90 02        	bcc idiv1		; e is greater, no division this time.
0022BA  3  E5 64        	sbc z80_e		; subtract it.
0022BC  3               idiv1:
0022BC  3  26 65        	rol z80_d		; rotate into d.
0022BE  3  88           	dey
0022BF  3  D0 F4        	bne idiv0		; repeat
0022C1  3  60           	rts
0022C2  3               
0022C2  3               ;---------------------------------------------------
0022C2  3               ; Play AY sound effect
0022C2  3               ;---------------------------------------------------
0022C2  3               
0022C2  3               plsnd:
0022C2  3  60           	rts
0022C3  3               
0022C3  3               ;---------------------------------------------------
0022C3  3               ; Objects handling.
0022C3  3               ; 32 bytes for image
0022C3  3               ; 3 for room, y and x
0022C3  3               ; 3 for starting room, y and x.
0022C3  3               ; 254 = disabled.
0022C3  3               ; 255 = object in player"s pockets.
0022C3  3               ;---------------------------------------------------
0022C3  3               
0022C3  3               ;---------------------------------------------------
0022C3  3               ; Show items present.
0022C3  3               ;---------------------------------------------------
0022C3  3               
0022C3  3               .if oflag
0022C3  3               shwob:
0022C3  3               	lda #<objdta 			; objects table.
0022C3  3               	sta z80_l
0022C3  3               	lda #>objdta
0022C3  3               	sta z80_h
0022C3  3               
0022C3  3               	lda numob 			; number of objects in the game.
0022C3  3               	sta sprcnt
0022C3  3               shwob0:
0022C3  3               	ldy #32 			; distance to room number.
0022C3  3               	lda (z80_hl),y 			; same as an item?
0022C3  3               	cmp scno 			; current location.
0022C3  3               	bne :+
0022C3  3               	jsr dobj 			; yes, display object.
0022C3  3               :
0022C3  3               	clc
0022C3  3               	lda z80_l
0022C3  3               	adc #38 			; distance to next item.
0022C3  3               	sta z80_l
0022C3  3               	lda z80_h
0022C3  3               	adc #0
0022C3  3               	sta z80_h	 		; point to it.
0022C3  3               	dec sprcnt
0022C3  3               	bne shwob0 			; repeat for others.
0022C3  3               	rts
0022C3  3               
0022C3  3               ;---------------------------------------------------
0022C3  3               ; Display object.
0022C3  3               ; hl must point to object's start address.
0022C3  3               ;
0022C3  3               ; Input:
0022C3  3               ;  HL = object address
0022C3  3               ;---------------------------------------------------
0022C3  3               
0022C3  3               dobj:
0022C3  3               	ldy #33
0022C3  3               	lda (z80_hl),y 			; point to y.
0022C3  3               	sta dispy
0022C3  3               	iny
0022C3  3               	lda (z80_hl),y 			; point to x.
0022C3  3               	sta dispx
0022C3  3               dobj1:
0022C3  3               	jmp sprite 			; draw this sprite.
0022C3  3               
0022C3  3               ;--------------------------------------
0022C3  3               ; Remove an object.
0022C3  3               ;
0022C3  3               ; Input:
0022C3  3               ;  A = object number
0022C3  3               ;--------------------------------------
0022C3  3               
0022C3  3               remob:
0022C3  3               	cmp numob			; number of objects in game.
0022C3  3               	bcc :+				; are we checking past the end?
0022C3  3               	rts				; yes, can't get non-existent item.
0022C3  3               :
0022C3  3               	pha				; remember object.
0022C3  3               	jsr getob			; pick it up if we haven't already got it.
0022C3  3               	pla				; retrieve object number.
0022C3  3               	jsr gotob			; get its address.
0022C3  3               	lda #254
0022C3  3               	ldy #32
0022C3  3               	sta (z80_hl),y			; remove it.
0022C3  3               	rts
0022C3  3               
0022C3  3               ;---------------------------------------------------
0022C3  3               ; Pick up object number held in the accumulator.
0022C3  3               ;
0022C3  3               ; Input:
0022C3  3               ;  A = object number
0022C3  3               ;---------------------------------------------------
0022C3  3               
0022C3  3               getob:
0022C3  3               	cmp numob 		; number of objects in game.
0022C3  3               	bcc :+			; are we checking past the end?
0022C3  3               	rts			; yes, can't get non-existent item.
0022C3  3               :
0022C3  3               	jsr gotob 		; check if we already have it.
0022C3  3               	cmp #255
0022C3  3               	bne :+
0022C3  3               	rts			; we already do.
0022C3  3               :
0022C3  3               	ldy #32
0022C3  3               	lda (z80_hl),y		; is it on this screen?
0022C3  3               	cmp scno 		; current screen.
0022C3  3               	bne getob0		; not on screen, so nothing to delete.
0022C3  3               
0022C3  3               	lda #255
0022C3  3               	sta (z80_hl),y		; pick it up.
0022C3  3               	iny 			; point to y coord.
0022C3  3               getob1:
0022C3  3               	ldy #33
0022C3  3               	lda (z80_hl),y		; y coord.
0022C3  3               	sta dispy
0022C3  3               	ldy #34
0022C3  3               	lda (z80_hl),y 		; x coord.
0022C3  3               	sta dispx
0022C3  3               	jmp dobj1 		; delete object sprite.
0022C3  3               getob0:
0022C3  3               	lda #255
0022C3  3               	sta (z80_hl),y 		; pick it up.
0022C3  3               	rts
0022C3  3               .endif
0022C3  3               
0022C3  3               ;-----------------------------------------------------------------
0022C3  3               ; Got object check.
0022C3  3               ; Call with object in accumulator, returns zero set if in pockets.
0022C3  3               ;
0022C3  3               ; Input:
0022C3  3               ;  A = object number
0022C3  3               ;-----------------------------------------------------------------
0022C3  3               .if oflag .or mflag
0022C3  3               gotob:
0022C3  3               	cmp numob 		; number of objects in game.
0022C3  3               	bcc :+ 			; are we checking past the end?
0022C3  3               	jmp gotob0 		; yes, we can't have a non-existent object.
0022C3  3               :
0022C3  3               	jsr findob		; find the object.
0022C3  3               gotob1:
0022C3  3               	rts
0022C3  3               
0022C3  3               gotob0:
0022C3  3               	lda #254 		; missing.
0022C3  3               	jmp gotob1
0022C3  3               
0022C3  3               findob:
0022C3  3               	pha			; save object number
0022C3  3               	lda #<objdta 		; objects.
0022C3  3               	sta z80_l
0022C3  3               	lda #>objdta
0022C3  3               	sta z80_h
0022C3  3               	pla			; retreive object number
0022C3  3               	beq fndob1 		; is it zero? yes, skip loop.
0022C3  3               	tax 			; loop counter
0022C3  3               fndob2:
0022C3  3               	clc
0022C3  3               	lda z80_l
0022C3  3               	adc #38 		; size of each object.
0022C3  3               	sta z80_l
0022C3  3               	bcc :+
0022C3  3               	inc z80_h
0022C3  3               :
0022C3  3               	dex 			; repeat until we find address.
0022C3  3               	bne fndob2
0022C3  3               fndob1:
0022C3  3               	ldy #32			; distance to room it's in.
0022C3  3               	lda (z80_hl),y		; fetch status.
0022C3  3               	rts
0022C3  3               .endif
0022C3  3               
0022C3  3               ;---------------------------------------------
0022C3  3               ; Drop object number at (dispx, dispy).
0022C3  3               ;
0022C3  3               ; Input:
0022C3  3               ;  A = object number
0022C3  3               ;---------------------------------------------
0022C3  3               
0022C3  3               .if oflag
0022C3  3               drpob:
0022C3  3               	cmp numob 		; are we checking past the end?
0022C3  3               	bcc :+
0022C3  3               	rts			; yes, can't drop non-existent item.
0022C3  3               :
0022C3  3               	jsr gotob		; make sure object is in inventory.
0022C3  3               	cmp scno		; already on this screen?
0022C3  3               	bne :+
0022C3  3               	rts			; yes, nothing to do.
0022C3  3               :
0022C3  3               	ldy #32
0022C3  3               	lda scno
0022C3  3               	sta (z80_hl),y		; bring onto screen.
0022C3  3               	lda dispy		; sprite y coordinate.
0022C3  3               	iny
0022C3  3               	sta (z80_hl),y		; point to object y.
0022C3  3               	lda dispx 		; sprite x coordinate.
0022C3  3               	iny
0022C3  3               	sta (z80_hl),y 		; point to object x
0022C3  3               	jmp dobj		; draw the object sprite.
0022C3  3               
0022C3  3               ;-----------------------------------------------
0022C3  3               ; Seek objects at sprite position.
0022C3  3               ;
0022C3  3               ; Output:
0022C3  3               ;  A = object number, if not found A=255
0022C3  3               ;-----------------------------------------------
0022C3  3               
0022C3  3               skobj:
0022C3  3               	lda #<objdta 		; pointer to objects.
0022C3  3               	sta z80_l
0022C3  3               	lda #>objdta
0022C3  3               	sta z80_h
0022C3  3               
0022C3  3               	lda numob 		; number of objects in game.
0022C3  3               	sta z80_b 		; set up the loop counter.
0022C3  3               skobj0:
0022C3  3               	lda scno		; current room number.
0022C3  3               	ldy #32
0022C3  3               	cmp (z80_hl),y		; is object in here?
0022C3  3               	bne :+
0022C3  3               	jsr skobj1		; yes, check coordinates.
0022C3  3               :
0022C3  3               	clc			; point to next object in table.
0022C3  3               	lda z80_l
0022C3  3               	adc #38			; size of each object.
0022C3  3               	sta z80_l
0022C3  3               	bcc :+
0022C3  3               	inc z80_h
0022C3  3               :
0022C3  3               	dec z80_b
0022C3  3               	bne skobj0		; repeat for all objects.
0022C3  3               
0022C3  3               	lda #255		; end of list and nothing found, return 255.
0022C3  3               	rts
0022C3  3               
0022C3  3               skobj1:
0022C3  3               	ldy #33			; point to y coordinate.
0022C3  3               	lda (z80_hl),y		; point to y coordinate.
0022C3  3               	sec
0022C3  3               	ldy #8
0022C3  3               	sbc (z80_ix),y 		; subtract sprite y.
0022C3  3               	clc
0022C3  3               	adc #15			; add sprite height minus one.
0022C3  3               	cmp #31			; within range?
0022C3  3               	bcs skobj2		; no, ignore object.
0022C3  3               
0022C3  3               	ldy #34			; point to x coordinate now.
0022C3  3               	lda (z80_hl),y 		; get coordinate.
0022C3  3               	sec
0022C3  3               	ldy #9
0022C3  3               	sbc (z80_ix),y 		; subtract the sprite x.
0022C3  3               	clc			; add sprite width minus one.
0022C3  3               	adc #15
0022C3  3               	cmp #31			; within range?
0022C3  3               	bcs skobj2		; no, ignore object.
0022C3  3               
0022C3  3               	pla			; remove return address from stack.
0022C3  3               	pla
0022C3  3               
0022C3  3               	lda numob 		; objects in game.
0022C3  3               	sec
0022C3  3               	sbc z80_b		; subtract loop counter.
0022C3  3               skobj2:
0022C3  3               	rts			; accumulator now points to object.
0022C3  3               .endif
0022C3  3               
0022C3  3               ;---------------------------------------------------------------------
0022C3  3               ; Spawn a new sprite.
0022C3  3               ;---------------------------------------------------------------------
0022C3  3               
0022C3  3                 offset = 20
0022C3  3               
0022C3  3               ;.repeat 343
0022C3  3               ;  .byte 0
0022C3  3               ;.endrep
0022C3  3               
0022C3  3               spawn:
0022C3  3  A9 20        	lda #<sprtab		; sprite table.
0022C5  3  85 66        	sta z80_l
0022C7  3  A9 32        	lda #>sprtab
0022C9  3  85 67        	sta z80_h
0022CB  3               numsp1:
0022CB  3  A9 0C        	lda #NUMSPR		; number of sprites.
0022CD  3  85 rr        	sta spcnt
0022CF  3               spaw0:
0022CF  3  A0 00        	ldy #0
0022D1  3  B1 66        	lda (z80_hl),y		; get sprite type.
0022D3  3  C9 FF        	cmp #255		; is it an unused slot?
0022D5  3  F0 0F        	beq spaw1 		; yes, we can use this one.
0022D7  3               
0022D7  3  18           	clc 			; point to next sprite in table.
0022D8  3  A5 66        	lda z80_l
0022DA  3  69 11        	adc #TABSIZ		; size of each entry.
0022DC  3  85 66        	sta z80_l
0022DE  3  90 02        	bcc :+
0022E0  3  E6 67        	inc z80_h
0022E2  3               :
0022E2  3  C6 rr        	dec spcnt		; one less iteration.
0022E4  3  D0 E9        	bne spaw0		; keep going until we find a slot.
0022E6  3               
0022E6  3               ; Didn't find one but drop through and set up a dummy sprite instead.
0022E6  3               
0022E6  3               spaw1:
0022E6  3  A5 69        	lda z80_i		; address of original sprite.
0022E8  3  48           	pha
0022E9  3  A5 68        	lda z80_x
0022EB  3  48           	pha
0022EC  3               
0022EC  3  A5 66        	lda z80_l		; store spawned sprite address.
0022EE  3  85 rr        	sta spptr
0022F0  3  A5 67        	lda z80_h
0022F2  3  85 rr        	sta spptr+1
0022F4  3               
0022F4  3  A5 62        	lda z80_c
0022F6  3  A0 00        	ldy #0
0022F8  3  91 66        	sta (z80_hl),y 		; set the type.
0022FA  3  A0 05        	ldy #5
0022FC  3  91 66        	sta (z80_hl),y		; copy
0022FE  3               
0022FE  3  A5 63        	lda z80_b
002300  3  A0 01        	ldy #1
002302  3  91 66        	sta (z80_hl),y		; set the image.
002304  3  A0 06        	ldy #6
002306  3  91 66        	sta (z80_hl),y		; copy
002308  3               
002308  3  A9 00        	lda #0 			; frame zero.
00230A  3  A0 02        	ldy #2
00230C  3  91 66        	sta (z80_hl),y		; set frame.
00230E  3  A0 07        	ldy #7
002310  3  91 66        	sta (z80_hl),y		; copy
002312  3               
002312  3  A0 08        	ldy #8
002314  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002316  3  A0 03        	ldy #3
002318  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
00231A  3  A0 08        	ldy #8
00231C  3  91 66        	sta (z80_hl),y		; copy
00231E  3               
00231E  3  A0 09        	ldy #9
002320  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002322  3  A0 04        	ldy #4
002324  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002326  3  A0 09        	ldy #9
002328  3  91 66        	sta (z80_hl),y		; copy
00232A  3               
00232A  3  A0 0A        	ldy #10			; direction of original.
00232C  3  B1 68        	lda (z80_ix),y
00232E  3  91 66        	sta (z80_hl),y		; direction
002330  3               
002330  3  A9 00        	lda #0
002332  3  A0 0B        	ldy #11
002334  3  91 66        	sta (z80_hl),y		; reset parameter.
002336  3  C8           	iny
002337  3  91 66        	sta (z80_hl),y		; reset parameter.
002339  3  C8           	iny
00233A  3  91 66        	sta (z80_hl),y		; reset parameter.
00233C  3  C8           	iny
00233D  3  91 66        	sta (z80_hl),y		; reset parameter.
00233F  3               rtssp:
00233F  3  A5 rr        	lda spptr		; address of new sprite.
002341  3  85 68        	sta z80_x
002343  3  A5 rr        	lda spptr+1
002345  3  85 69        	sta z80_i
002347  3               evis1:
002347  3  20 13 33     	jsr evnt09 		; call sprite initialisation event.
00234A  3               
00234A  3  A5 rr        	lda spptr 		; address of new sprite.
00234C  3  85 68        	sta z80_x
00234E  3  A5 rr        	lda spptr+1
002350  3  85 69        	sta z80_i
002352  3  20 E9 2C     	jsr sspria 		; display the new sprite.
002355  3               
002355  3  68           	pla			; address of original sprite.
002356  3  85 68        	sta z80_x
002358  3  68           	pla
002359  3  85 69        	sta z80_i
00235B  3               
00235B  3  60           	rts
00235C  3               
00235C  3               ;spcnt:	.byte 0
00235C  3               ;spptr:	.word 0			; spawned sprite pointer.
00235C  3               ;seed:	.byte 0			; seed for random numbers.
00235C  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002360  3  30 30        
002362  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002366  3  30 30        
002368  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00236C  3  30 30        
00236E  3  00 E4        grbase:	.word ScreenAddr	; graphics base address.
002370  3               
002370  3               ;----------------------------------------------------
002370  3               ; Check y-pos
002370  3               ;----------------------------------------------------
002370  3               
002370  3               checkx:
002370  3  A5 rr        	lda dispy		; y position.
002372  3  C9 18        	cmp #24			; off screen?
002374  3  B0 01        	bcs :+
002376  3  60           	rts			; no, it's okay.
002377  3               :
002377  3  68           	pla			; remove return address from stack.
002378  3  85 66        	sta z80_l
00237A  3  68           	pla
00237B  3  85 67        	sta z80_h
00237D  3  60           	rts
00237E  3               
00237E  3               ;-----------------------------------------------
00237E  3               ; Displays the current high score.
00237E  3               ;-----------------------------------------------
00237E  3               
00237E  3               dhisc:
00237E  3  A9 62        	lda #<hiscor 		; high score text.
002380  3  8D B5 23     	sta dscor3+1
002383  3  8D D0 23     	sta bscor3+1
002386  3  A9 23        	lda #>hiscor
002388  3  8D B6 23     	sta dscor3+2
00238B  3  8D D1 23     	sta bscor3+2
00238E  3  4C A1 23     	jmp dscor1		; check in printable range then show 6 digits.
002391  3               
002391  3               ;------------------------------------------------------
002391  3               ; Displays the current score.
002391  3               ;------------------------------------------------------
002391  3               
002391  3               ;.repeat 322
002391  3               ;  .byte 0
002391  3               ;.endrep
002391  3               
002391  3               dscor:
002391  3  A9 5C        	lda #<score		; score text.
002393  3  8D B5 23     	sta dscor3+1
002396  3  8D D0 23     	sta bscor3+1
002399  3  A9 23        	lda #>score
00239B  3  8D B6 23     	sta dscor3+2
00239E  3  8D D1 23     	sta bscor3+2
0023A1  3               dscor1:
0023A1  3  8C CC 23     	sty tmpscr
0023A4  3  20 8B 2A     	jsr preprt		; set up font and print position.
0023A7  3  20 70 23     	jsr checkx		; make sure we're in a printable range.
0023AA  3               
0023AA  3               ;	lda #6			; digits to display.
0023AA  3               ;	sta z80_b
0023AA  3  A5 rr        	lda prtmod		; get print mode.
0023AC  3  F0 03        	beq :+			; standard size text?
0023AE  3  4C CD 23     	jmp bscor0		; no, show double-height.
0023B1  3               :
0023B1  3               dscor0:
0023B1  3               ;	ldy #0
0023B1  3               ;	lda (z80_hl),y 		; fetch character.
0023B1  3  AC CC 23     	ldy tmpscr
0023B4  3               dscor3:
0023B4  3  B9 5C 23     	lda score,y
0023B7  3  20 04 25     	jsr pchar 		; display character.
0023BA  3  E6 rr        	inc dispx		; move along x coordinate
0023BC  3               
0023BC  3               ;	inc z80_l		; next score column.
0023BC  3               ;	bne :+
0023BC  3               ;	inc z80_h
0023BC  3               ;:
0023BC  3  EE CC 23     	inc tmpscr
0023BF  3  C6 63        	dec z80_b
0023C1  3  D0 EE        	bne dscor0 		; repeat for all digits.
0023C3  3               dscor2:
0023C3  3  A5 rr        	lda dispx 		; set up display coordinates.
0023C5  3  85 rr        	sta charx
0023C7  3  A5 rr        	lda dispy
0023C9  3  85 rr        	sta chary
0023CB  3  60           	rts
0023CC  3               
0023CC  3  00           tmpscr:	.byte 0
0023CD  3               ;------------------------------------------------------
0023CD  3               ; Displays the current score in double-height characters.
0023CD  3               ;
0023CD  3               ; Input:
0023CD  3               ;  B  = digit number
0023CD  3               ;  HL = score string
0023CD  3               ;------------------------------------------------------
0023CD  3               
0023CD  3               bscor0:
0023CD  3               ;	ldy #0
0023CD  3               
0023CD  3               ;	lda (z80_hl),y 		; fetch character.
0023CD  3  A4 rr        	ldy tmp
0023CF  3               bscor3:
0023CF  3  B9 5C 23     	lda score,y
0023D2  3  20 12 2A     	jsr bchar 		; display big char.
0023D5  3               
0023D5  3               ;	inc z80_l 		; next score column.
0023D5  3               ;	bne :+
0023D5  3               ;	inc z80_h
0023D5  3               ;:
0023D5  3  E6 rr        	inc tmp
0023D7  3  C6 63        	dec z80_b
0023D9  3  F0 03        	beq :+
0023DB  3  4C CD 23     	jmp bscor0 		; repeat for all digits.
0023DE  3               :
0023DE  3  4C C3 23     	jmp dscor2 		; tidy up line and column variables.
0023E1  3               
0023E1  3               ;-----------------------------------------------------
0023E1  3               ; Adds number in the hl pair to the score.
0023E1  3               ;-----------------------------------------------------
0023E1  3               
0023E1  3               addsc:
0023E1  3  A9 5D        	lda #<(score+1) 	; ten thousands column.
0023E3  3  85 64        	sta z80_e
0023E5  3  A9 23        	lda #>(score+1)
0023E7  3  85 65        	sta z80_d
0023E9  3  A9 10        	lda #<10000		; amount to add each time.
0023EB  3  85 62        	sta z80_c
0023ED  3  A9 27        	lda #>10000
0023EF  3  85 63        	sta z80_b
0023F1  3  20 35 24     	jsr incsc		; add to score.
0023F4  3               
0023F4  3  E6 64        	inc z80_e		; thousands column.
0023F6  3  D0 02        	bne :+
0023F8  3  E6 65        	inc z80_d
0023FA  3               :
0023FA  3  A9 E8        	lda #<1000		; amount to add each time.
0023FC  3  85 62        	sta z80_c
0023FE  3  A9 03        	lda #>1000
002400  3  85 63        	sta z80_b
002402  3  20 35 24     	jsr incsc 		; add to score.
002405  3               
002405  3  E6 64        	inc z80_e		; hundreds column.
002407  3  D0 02        	bne :+
002409  3  E6 65        	inc z80_d
00240B  3               :
00240B  3  A9 64        	lda #<100		; amount to add each time.
00240D  3  85 62        	sta z80_c
00240F  3  A9 00        	lda #>100
002411  3  85 63        	sta z80_b
002413  3  20 35 24     	jsr incsc		; add to score.
002416  3               
002416  3  E6 64        	inc z80_e 		; tens column.
002418  3  D0 02        	bne :+
00241A  3  E6 65        	inc z80_d
00241C  3               :
00241C  3  A9 0A        	lda #<10		; amount to add each time.
00241E  3  85 62        	sta z80_c
002420  3  A9 00        	lda #>10
002422  3  85 63        	sta z80_b
002424  3  20 35 24     	jsr incsc 		; add to score.
002427  3               
002427  3  E6 64        	inc z80_e		; units column.
002429  3  D0 02        	bne :+
00242B  3  E6 65        	inc z80_d
00242D  3               :
00242D  3  A9 01        	lda #<1			; units.
00242F  3  85 62        	sta z80_c
002431  3  A9 00        	lda #>1
002433  3  85 63        	sta z80_b
002435  3               incsc:
002435  3  A5 67        	lda z80_h		; store amount to add.
002437  3  48           	pha
002438  3  A5 66        	lda z80_l
00243A  3  48           	pha
00243B  3               
00243B  3  38           	sec			; subtract from amount to add.
00243C  3  A5 66        	lda z80_l
00243E  3  E5 62        	sbc z80_c
002440  3  85 66        	sta z80_l
002442  3  A5 67        	lda z80_h
002444  3  E5 63        	sbc z80_b
002446  3  85 67        	sta z80_h
002448  3  90 14        	bcc incsc0		; too much, restore value.
00244A  3               
00244A  3  68           	pla			; delete the previous amount from the stack.
00244B  3  68           	pla
00244C  3               
00244C  3  A5 65        	lda z80_d 		; store column position.
00244E  3  48           	pha
00244F  3  A5 64        	lda z80_e
002451  3  48           	pha
002452  3  20 65 24     	jsr incsc2		; do the increment.
002455  3               
002455  3  68           	pla			; restore column.
002456  3  85 64        	sta z80_e
002458  3  68           	pla
002459  3  85 65        	sta z80_d
00245B  3  4C 35 24     	jmp incsc		; repeat until all added.
00245E  3               
00245E  3               incsc0:
00245E  3  68           	pla			; restore previous value.
00245F  3  85 66        	sta z80_l
002461  3  68           	pla
002462  3  85 67        	sta z80_h
002464  3  60           	rts
002465  3               incsc2:
002465  3  A0 00        	ldy #0
002467  3  B1 64        	lda (z80_de),y 		; get amount.
002469  3  18           	clc
00246A  3  69 01        	adc #1			; add one to column.
00246C  3  91 64        	sta (z80_de),y		; write new column total.
00246E  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002470  3  B0 01        	bcs :+
002472  3  60           	rts			; no, carry on.
002473  3               :
002473  3  A9 30        	lda #'0'		; make it zero.
002475  3  91 64        	sta (z80_de),y		; write new column total.
002477  3  C6 64        	dec z80_e		; back one column.
002479  3  D0 02        	bne :+
00247B  3  C6 65        	dec z80_d
00247D  3               :
00247D  3  4C 65 24     	jmp incsc2
002480  3               
002480  3               ;------------------------------------
002480  3               ; Add bonus to score and reset bonus
002480  3               ;------------------------------------
002480  3               
002480  3               addbo:
002480  3  A2 05        	ldx #5			; last digit.
002482  3  18           	clc
002483  3               addbo0:
002483  3  BD 5C 23     	lda score,x		; get score.
002486  3  7D 68 23     	adc bonus,x		; add bonus.
002489  3  38           	sec			; 0 to 18.
00248A  3  E9 30        	sbc #48
00248C  3  48           	pha
00248D  3  A9 30        	lda #'0'
00248F  3  9D 68 23     	sta bonus,x
002492  3  68           	pla
002493  3  C9 3A        	cmp #58
002495  3  90 03        	bcc addbo1
002497  3  38           	sec
002498  3  E9 0A        	sbc #10
00249A  3               addbo1:
00249A  3  9D 5C 23     	sta score,x		; zeroise bonus.
00249D  3  CA           	dex			; next digit.
00249E  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0024A0  3  60           	rts
0024A1  3               
0024A1  3               ;------------------------------------
0024A1  3               ; Swap score and bonus.
0024A1  3               ;------------------------------------
0024A1  3               
0024A1  3               swpsb:
0024A1  3  A2 05        	ldx #5			; digits to add.
0024A3  3               swpsb0:
0024A3  3  BD 5C 23     	lda score,x 		; get score digits.
0024A6  3  48           	pha			; save digit
0024A7  3  BD 68 23     	lda bonus,x 		; get bonus digits.
0024AA  3  9D 5C 23     	sta score,x		; switch score-bonus
0024AD  3  68           	pla
0024AE  3  9D 68 23     	sta bonus,x
0024B1  3  CA           	dex 			; repeat for all 6 digits.
0024B2  3  10 EF        	bpl swpsb0
0024B4  3  60           	rts
0024B5  3               
0024B5  3               ;----------------------------------------------------
0024B5  3               ; Get print address.
0024B5  3               ;----------------------------------------------------
0024B5  3               
0024B5  3               gprad:
0024B5  3  A5 rr        	lda dispx		; get x
0024B7  3  85 rr        	sta scraddr		; store lb address
0024B9  3               
0024B9  3  2A           	rol a
0024BA  3  26 rr        	rol tmp
0024BC  3  2A           	rol a
0024BD  3  26 rr        	rol tmp
0024BF  3  2A           	rol a
0024C0  3  26 rr        	rol tmp
0024C2  3  A5 rr        	lda tmp
0024C4  3  29 07        	and #7
0024C6  3  85 rr        	sta tmp
0024C8  3  A5 rr        	lda prtmod
0024CA  3  F0 02        	beq :+
0024CC  3  06 rr        	asl tmp
0024CE  3               :
0024CE  3  A5 rr        	lda tmp
0024D0  3  18           	clc
0024D1  3  65 rr        	adc dispy		; get y
0024D3  3  69 E4        	adc #>ScreenAddr		; add $80
0024D5  3  85 rr        	sta scraddr+1		; store hb address
0024D7  3  60           	rts
0024D8  3               
0024D8  3               ;--------------------------------------------------------------
0024D8  3               ; Get property buffer address of char at (dispx, dispy) in hl.
0024D8  3               ;
0024D8  3               ; Output:
0024D8  3               ;  bufaddr = MAP + dispy*32 + dispx
0024D8  3               ;--------------------------------------------------------------
0024D8  3               
0024D8  3               pradd:
0024D8  3  A5 rr        	lda dispy 		; y coordinate.
0024DA  3  85 rr        	sta bufaddr
0024DC  3  A9 00        	lda #0
0024DE  3  85 rr        	sta bufaddr+1
0024E0  3  06 rr        	asl bufaddr  		; multiply char by 32
0024E2  3  26 rr        	rol bufaddr+1
0024E4  3  06 rr        	asl bufaddr
0024E6  3  26 rr        	rol bufaddr+1
0024E8  3  06 rr        	asl bufaddr
0024EA  3  26 rr        	rol bufaddr+1
0024EC  3  06 rr        	asl bufaddr
0024EE  3  26 rr        	rol bufaddr+1
0024F0  3  06 rr        	asl bufaddr
0024F2  3  26 rr        	rol bufaddr+1
0024F4  3  18           	clc			; add address of MAP graphics.
0024F5  3  A5 rr        	lda bufaddr
0024F7  3  65 rr        	adc dispx
0024F9  3  69 00        	adc #<MAP
0024FB  3  85 rr        	sta bufaddr
0024FD  3  A5 rr        	lda bufaddr+1
0024FF  3  69 DD        	adc #>MAP
002501  3  85 rr        	sta bufaddr+1
002503  3  60           	rts
002504  3               
002504  3               ;----------------------------------------------------
002504  3               ; Display character in A at dispx,dispy.
002504  3               ;
002504  3               ; Input:
002504  3               ;  A 	   = character to print
002504  3               ;----------------------------------------------------
002504  3               
002504  3               pchar:
002504  3  85 rr        	sta fntaddr
002506  3  A9 00        	lda #0
002508  3  85 rr        	sta fntaddr+1
00250A  3  06 rr        	asl fntaddr  		; multiply char by 8.
00250C  3  26 rr        	rol fntaddr+1
00250E  3  06 rr        	asl fntaddr
002510  3  26 rr        	rol fntaddr+1
002512  3  06 rr        	asl fntaddr
002514  3  26 rr        	rol fntaddr+1
002516  3               
002516  3  A5 rr        	lda fntaddr
002518  3  18           	clc
002519  3  69 4A        	adc #<(FONT-256)
00251B  3  85 rr        	sta fntaddr		; that's the low byte.
00251D  3  A5 rr        	lda fntaddr+1
00251F  3  69 33        	adc #>(FONT-256)
002521  3  85 rr        	sta fntaddr+1		; add displacement.
002523  3               pchark:
002523  3  20 B5 24     	jsr gprad		; get screen address.
002526  3  A2 07        	ldx #7			; lines to write.
002528  3               pchar0:
002528  3  A0 00        	ldy #0
00252A  3  B1 rr        	lda (fntaddr),y 	; get image byte.
00252C  3  BC 3B 25     	ldy scrtab,x		; Get rowoffset
00252F  3               .if iflag
00252F  3               	eor #$ff
00252F  3               .endif
00252F  3  91 rr        	sta (scraddr),y 	; copy to screen.
002531  3  E6 rr        	inc fntaddr		; next image byte.
002533  3  D0 02        	bne :+
002535  3  E6 rr        	inc fntaddr+1
002537  3               :
002537  3  CA           	dex			; next screen row down.
002538  3  10 EE        	bpl pchar0		; repeat.
00253A  3  60           	rts
00253B  3               
00253B  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
00253F  3  60 40 20 00  
002543  3               
002543  3               ;----------------------------------------------
002543  3               
002543  3               ; Print attributes, properties and pixels.
002543  3               ;
002543  3               ; Input:
002543  3               ;  A	= tile number
002543  3               ;----------------------------------------------
002543  3               
002543  3               ;.repeat 294
002543  3               ;  .byte 0
002543  3               ;.endrep
002543  3               
002543  3               pbpattr:			; entry PUTBLOCK command
002543  3  A4 rr        	ldy charx
002545  3  84 rr        	sty dispx
002547  3  A4 rr        	ldy chary
002549  3  84 rr        	sty dispy
00254B  3               pattr:
00254B  3               .if aflag
00254B  3               	pha
00254B  3               	jsr wbloc		; save blockinfo
00254B  3               	pla
00254B  3               .endif
00254B  3               
00254B  3               pattr2:
00254B  3  85 63        	sta z80_b		; store cell in b register for now.
00254D  3  AA           	tax
00254E  3  BD 8E 33     	lda bprop,x 		; block properties.
002551  3  85 62        	sta z80_c
002553  3  C9 08        	cmp #COLECT
002555  3  D0 05        	bne :+
002557  3  A5 63        	lda z80_b
002559  3  8D 6A 25     	sta colpatt
00255C  3               :
00255C  3  20 D8 24     	jsr pradd 		; get property buffer address.
00255F  3  A5 62        	lda z80_c
002561  3  A0 00        	ldy #0
002563  3  91 rr        	sta (bufaddr),y 	; write property.
002565  3  A5 63        	lda z80_b 		; restore cell.
002567  3  4C 6B 25     	jmp panp
00256A  3               ; Print attributes, no properties.
00256A  3               
00256A  3               ;.repeat 263
00256A  3               ; .byte 0
00256A  3               ;.endrep
00256A  3               
00256A  3  00           colpatt:	.byte 0
00256B  3               
00256B  3               panp:
00256B  3  85 64        	sta z80_e		; displacement in e.
00256D  3  A9 00        	lda #0
00256F  3  85 65        	sta z80_d		; no high byte.
002571  3  06 64        	asl z80_e  		; multiply char by 8.
002573  3  26 65        	rol z80_d
002575  3  06 64        	asl z80_e
002577  3  26 65        	rol z80_d
002579  3  06 64        	asl z80_e
00257B  3  26 65        	rol z80_d
00257D  3  18           	clc
00257E  3  A5 64        	lda z80_e
002580  3  69 86        	adc #<chgfx 		; address of graphics.
002582  3  85 rr        	sta tileaddr
002584  3  A5 65        	lda z80_d
002586  3  69 33        	adc #>chgfx
002588  3  85 rr        	sta tileaddr+1
00258A  3  20 B5 24     	jsr gprad 		; get screen address.
00258D  3  A2 07        	ldx #7			; number of pixel rows to write.
00258F  3               panp0:
00258F  3  A0 00        	ldy #0
002591  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002593  3               .if iflag
002593  3               	eor #$ff		; Invert
002593  3               .endif
002593  3  BC 3B 25     	ldy scrtab,x
002596  3  91 rr        	sta (scraddr),y 	; copy to screen.
002598  3  E6 rr        	inc tileaddr 		; next image byte.
00259A  3  D0 02        	bne :+
00259C  3  E6 rr        	inc tileaddr+1
00259E  3               :
00259E  3  CA           	dex	 		; repeat for 8 pixel rows.
00259F  3  10 EE        	bpl panp0
0025A1  3  E6 rr        	inc dispx 		; move along one.
0025A3  3  E6 rr        	inc charx
0025A5  3  60           	rts
0025A6  3               
0025A6  3               ;----------------------------------------------
0025A6  3               ; Write block
0025A6  3               ;----------------------------------------------
0025A6  3               
0025A6  3               .if aflag
0025A6  3               wbloc:
0025A6  3               	ldy #3
0025A6  3               	sta (pbptr),y		; store block number
0025A6  3               	dey
0025A6  3               	lda dispx
0025A6  3               	sta (pbptr),y		; write x position of block.
0025A6  3               	dey
0025A6  3               	lda dispy
0025A6  3               	sta (pbptr),y		; write y position of block.
0025A6  3               	dey
0025A6  3               	lda scno
0025A6  3               	sta (pbptr),y		; write screen.
0025A6  3               	clc			; point to next free location
0025A6  3               	lda pbptr
0025A6  3               	adc #4
0025A6  3               	sta pbptr
0025A6  3               	bcc :+
0025A6  3               	inc pbptr+1
0025A6  3               :
0025A6  3               	rts
0025A6  3               .endif
0025A6  3               
0025A6  3               ;----------------------------------------------
0025A6  3               ; Print character pixels, no more.
0025A6  3               ;
0025A6  3               ; Input:
0025A6  3               ;  A	= character to print
0025A6  3               ;----------------------------------------------
0025A6  3               
0025A6  3               pchr:
0025A6  3  20 04 25     	jsr pchar 		; show character in accumulator.
0025A9  3  E6 rr        	inc dispx		; move along one.
0025AB  3  60           	rts
0025AC  3               
0025AC  3               ;----------------------------------------------------
0025AC  3               ; Shifter sprite routine for objects.
0025AC  3               ;----------------------------------------------------
0025AC  3               
0025AC  3               .if oflag
0025AC  3               sprit7:
0025AC  3               	lda z80_b
0025AC  3               	beq sprit0
0025AC  3               	sta z80_a
0025AC  3               sprit3:
0025AC  3               	lsr spr			; shift into position.
0025AC  3               	ror spr+1
0025AC  3               	ror spr+2
0025AC  3               	dec z80_a		; one less iteration.
0025AC  3               	bne sprit3
0025AC  3               sprit0:
0025AC  3               	rts 			; now apply to screen.
0025AC  3               
0025AC  3               ;----------------------------------------------------
0025AC  3               ; Draw sprite
0025AC  3               ;----------------------------------------------------
0025AC  3               
0025AC  3               sprite:
0025AC  3               	stx xtmp		; Save X-reg
0025AC  3               	jsr scadd 		; get screen address in scraddr.
0025AC  3               
0025AC  3               	lda dispx 		; x position.
0025AC  3               	and #7 			; position straddling cells.
0025AC  3               	sta z80_b		; store in b register.
0025AC  3               
0025AC  3               	lda z80_l		; store sprite graphic address.
0025AC  3               	sta sprit1+1
0025AC  3               	sta sprit2+1
0025AC  3               	lda z80_h
0025AC  3               	sta sprit1+2
0025AC  3               	sta sprit2+2
0025AC  3               
0025AC  3               	ldx #0			; pixel height.
0025AC  3               	ldy #0
0025AC  3               sprit1:
0025AC  3               	lda objdta,x		; fetch first byte.
0025AC  3               	sta spr
0025AC  3               	inx
0025AC  3               sprit2:
0025AC  3               	lda objdta,x
0025AC  3               	sta spr+1
0025AC  3               
0025AC  3               	lda #0
0025AC  3               	sta spr+2
0025AC  3               	jsr sprit7		; shift sprite
0025AC  3               
0025AC  3               	dex
0025AC  3               	lda spr			; fetch graphic.
0025AC  3               	ldy spritetab,x
0025AC  3               	eor (scraddr),y		; merge with screen image.
0025AC  3               	sta (scraddr),y		; write to screen.
0025AC  3               	inx			; next screen byte.
0025AC  3               
0025AC  3               	lda spr+1		; fetch graphic.
0025AC  3               	ldy spritetab,x
0025AC  3               	eor (scraddr),y		; merge with screen image.
0025AC  3               	sta (scraddr),y		; write to screen.
0025AC  3               	iny
0025AC  3               
0025AC  3               	lda spr+2		; fetch graphic.
0025AC  3               	eor (scraddr),y		; merge with screen image.
0025AC  3               	sta (scraddr),y		; write to screen.
0025AC  3               
0025AC  3               	inx			; next source byte.
0025AC  3               	cpx #16
0025AC  3               	bne :+
0025AC  3               	inc scraddr+1
0025AC  3               :
0025AC  3               	cpx #32
0025AC  3               	bne sprit1		; repeat
0025AC  3               
0025AC  3               	ldx xtmp		; retreive X-reg
0025AC  3               	rts
0025AC  3               
0025AC  3               spritetab:
0025AC  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0025AC  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0025AC  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0025AC  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0025AC  3               
0025AC  3               spr:	.byte 0,0,0
0025AC  3               
0025AC  3               ;xtmp:	.byte 0
0025AC  3               .endif
0025AC  3               
0025AC  3               ;-----------------------------------------------------------
0025AC  3               ; Get room address.
0025AC  3               ;-----------------------------------------------------------
0025AC  3               
0025AC  3               ;.repeat 273
0025AC  3               ;  .byte 0
0025AC  3               ;.endrep
0025AC  3               
0025AC  3               groom:
0025AC  3  A6 rr        	ldx scno 		; screen number.
0025AE  3  A0 00        	ldy #0
0025B0  3               groomx:
0025B0  3  A9 13        	lda #<scdat 		; pointer to screens.
0025B2  3  85 66        	sta z80_l
0025B4  3  A9 34        	lda #>scdat
0025B6  3  85 67        	sta z80_h
0025B8  3               groom1:
0025B8  3  E0 00        	cpx #0			; is it the first one?
0025BA  3  F0 15        	beq groom0 		; no more screens to skip.
0025BC  3               
0025BC  3  18           	clc
0025BD  3  A5 66        	lda z80_l
0025BF  3  79 13 34     	adc scdat,y 		; low byte of screen size.
0025C2  3  85 66        	sta z80_l
0025C4  3  C8           	iny			; point to high byte.
0025C5  3  A5 67        	lda z80_h
0025C7  3  79 13 34     	adc scdat,y 		; high byte of screen size.
0025CA  3  85 67        	sta z80_h
0025CC  3  C8           	iny			; next address.
0025CD  3               
0025CD  3  CA           	dex 			; one less iteration.
0025CE  3  4C B8 25     	jmp groom1 		; loop until we reach the end.
0025D1  3               groom0:
0025D1  3  AD 1E 34     	lda numsc 		; add displacement.
0025D4  3  0A           	asl a
0025D5  3  18           	clc			; add double displacement to address.
0025D6  3  65 66        	adc z80_l
0025D8  3  85 66        	sta z80_l
0025DA  3  A5 67        	lda z80_h
0025DC  3  69 00        	adc #0
0025DE  3  85 67        	sta z80_h
0025E0  3  60           	rts
0025E1  3               
0025E1  3               ;-----------------------------------------------------------
0025E1  3               ; Draw present room.
0025E1  3               ;-----------------------------------------------------------
0025E1  3               
0025E1  3               droom:
0025E1  3  AD 26 20     	lda wintop 		; window top.
0025E4  3  85 rr        	sta dispy		; set cursor y position.
0025E6  3               droom2:
0025E6  3  20 AC 25     	jsr groom 		; get address of current room.
0025E9  3  A9 00        	lda #0	 		; zero in accumulator.
0025EB  3  85 rr        	sta comcnt 		; reset compression counter.
0025ED  3  AD 28 20     	lda winhgt 		; height of window.
0025F0  3  85 rr        	sta rrow		; set row counter
0025F2  3               droom0:
0025F2  3  AD 27 20     	lda winlft 		; window left edge.
0025F5  3  85 rr        	sta dispx 		; set cursor x position.
0025F7  3  AD 29 20     	lda winwid 		; width of window.
0025FA  3  85 rr        	sta rcol		; set column counter
0025FC  3               droom1:
0025FC  3  20 0D 26     	jsr flbyt 		; decompress next byte on the fly.
0025FF  3  20 4B 25     	jsr pattr2 		; show attributes and block.
002602  3  C6 rr        	dec rcol		; one less column.
002604  3  D0 F6        	bne droom1 		; repeat for entire line.
002606  3  E6 rr        	inc dispy		; move down one line.
002608  3  C6 rr        	dec rrow 		; one less row.
00260A  3  D0 E6        	bne droom0 		; repeat for all rows.
00260C  3  60           	rts
00260D  3               
00260D  3               ;rcol:	.byte 0
00260D  3               ;rrow:	.byte 0
00260D  3               
00260D  3               ;----------------------------------------------
00260D  3               ; Decompress bytes on-the-fly.
00260D  3               ;----------------------------------------------
00260D  3               
00260D  3               flbyt:
00260D  3  A5 rr        	lda comcnt 		; compression counter.
00260F  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002611  3               
002611  3  A0 00        	ldy #0
002613  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002615  3  E6 66        	inc z80_l 		; point to next cell.
002617  3  D0 02        	bne :+
002619  3  E6 67        	inc z80_h
00261B  3               :
00261B  3  C9 FF        	cmp #255 		; is this byte a control code?
00261D  3  F0 01        	beq :+
00261F  3  60           	rts 			; no, this byte is uncompressed.
002620  3               :
002620  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002622  3  85 rr        	sta combyt 		; set up the type.
002624  3  E6 66        	inc z80_l 		; point to quantity.
002626  3  D0 02        	bne :+
002628  3  E6 67        	inc z80_h
00262A  3               :
00262A  3  B1 66        	lda (z80_hl),y 		; get quantity.
00262C  3  E6 66        	inc z80_l 		; point to next byte.
00262E  3  D0 02        	bne :+
002630  3  E6 67        	inc z80_h
002632  3               :
002632  3               flbyt1:
002632  3  85 rr        	sta comcnt 		; store new quantity.
002634  3  C6 rr        	dec comcnt		; one less.
002636  3  A5 rr        	lda combyt 		; byte to expand.
002638  3  60           	rts
002639  3               
002639  3               ;combyt:	.byte 0			; byte type compressed.
002639  3               ;comcnt:	.byte 0			; compression counter.
002639  3               
002639  3               ;------------------------------------------
002639  3               ; Ladder down check.
002639  3               ;
002639  3               ; Input:
002639  3               ;  IX = sprite pointer
002639  3               ;------------------------------------------
002639  3               
002639  3               .if lflag
002639  3               laddd:
002639  3               	ldy #9
002639  3               	lda (z80_ix),y		; x coordinate.
002639  3               	sta dispx
002639  3               
002639  3               	ldy #8
002639  3               	lda (z80_ix),y		; y coordinate.
002639  3               	and #254		; make it even.
002639  3               	sta (z80_ix),y 		; reset it.
002639  3               	clc 			; look down 16 pixels.
002639  3               numsp5:
002639  3               	adc #SPR_HGT
002639  3               	sta dispy		; coords in dispx,dispy.
002639  3               	jmp laddv
002639  3               
002639  3               ;------------------------------------------
002639  3               ; Ladder up check.
002639  3               ;
002639  3               ; Input:
002639  3               ;  IX = sprite pointer
002639  3               ;
002639  3               ; Output:
002639  3               ;  A  = 0 is ok, A <>0 is not ok
002639  3               ;------------------------------------------
002639  3               
002639  3               laddu:
002639  3               	ldy #9
002639  3               	lda (z80_ix),y		; x coordinate.
002639  3               	sta dispx
002639  3               
002639  3               	ldy #8
002639  3               	lda (z80_ix),y		; y coordinate.
002639  3               	and #254 		; make it even.
002639  3               	sta (z80_ix),y		; reset it.
002639  3               	clc 			; look 2 pixels above feet.
002639  3               numsp6:
002639  3               	adc #SPR_HGT-2
002639  3               	sta dispy		; coords in dispx,dispy.
002639  3               laddv:
002639  3               	jsr tstbl 		; get map address.
002639  3               	jsr ldchk 		; standard ladder check.
002639  3               	beq :+
002639  3               	rts 			; no way through.
002639  3               :
002639  3               	inc bufaddr 		; look right one cell.
002639  3               	bne :+
002639  3               	inc bufaddr+1
002639  3               :
002639  3               	jsr ldchk 		; do the check.
002639  3               	beq :+
002639  3               	rts 			; impassable.
002639  3               :
002639  3               	lda dispx 		; y coordinate.
002639  3               	and #7 			; position straddling block cells.
002639  3               	bne :+
002639  3               	rts 			; no more checks needed.
002639  3               :
002639  3               	inc bufaddr 		; look to third cell.
002639  3               	bne :+
002639  3               	inc bufaddr+1
002639  3               :
002639  3               	jsr ldchk 		; do the check.
002639  3               	rts  			; return with zero flag set accordingly.
002639  3               .endif
002639  3               
002639  3               ;---------------------------------------------------------
002639  3               ; Can go up check.
002639  3               ;
002639  3               ; Input:
002639  3               ;  IX = sprite pointer
002639  3               ;
002639  3               ; Output:
002639  3               ;  A  = 0 is ok, A <>0 is not ok
002639  3               ;---------------------------------------------------------
002639  3               
002639  3               cangu:
002639  3  A0 09        	ldy #9
00263B  3  B1 68        	lda (z80_ix),y		; x coordinate.
00263D  3  85 rr        	sta dispx
00263F  3  A0 08        	ldy #8
002641  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002643  3  38           	sec
002644  3  E9 02        	sbc #2
002646  3  85 rr        	sta dispy		; coords in dispx,dispy.
002648  3  20 E3 28     	jsr tstbl 		; get map address.
00264B  3  20 FB 27     	jsr lrchk 		; standard left/right check.
00264E  3  F0 01        	beq :+
002650  3  60           	rts			; no way through.
002651  3               :
002651  3  E6 rr        	inc bufaddr		; look right one cell.
002653  3  D0 02        	bne :+
002655  3  E6 rr        	inc bufaddr+1
002657  3               :
002657  3  20 FB 27     	jsr lrchk 		; do the check.
00265A  3  F0 01        	beq :+
00265C  3  60           	rts			; impassable.
00265D  3               :
00265D  3  A5 rr        	lda dispx		; x coordinate.
00265F  3  29 07        	and #7			; position straddling block cells.
002661  3  D0 01        	bne :+
002663  3  60           	rts			; no more checks needed.
002664  3               :
002664  3  E6 rr        	inc bufaddr		; look to third cell.
002666  3  D0 02        	bne :+
002668  3  E6 rr        	inc bufaddr+1
00266A  3               :
00266A  3  20 FB 27     	jsr lrchk		; do the check.
00266D  3  60           	rts 			; return with zero flag set accordingly.
00266E  3               
00266E  3               ;---------------------------------------------------------
00266E  3               ; Can go down check.
00266E  3               ;
00266E  3               ; Input:
00266E  3               ;  IX = sprite pointer
00266E  3               ;
00266E  3               ; Output:
00266E  3               ;  A  = 0 is ok, A <>0 is not ok
00266E  3               ;---------------------------------------------------------
00266E  3               
00266E  3               ;.repeat 264
00266E  3               ;  .byte 0
00266E  3               ;.endrep
00266E  3               
00266E  3               cangd:
00266E  3  A0 09        	ldy #9
002670  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002672  3  85 rr        	sta dispx
002674  3  A0 08        	ldy #8
002676  3  B1 68        	lda (z80_ix),y		; y coordinate.
002678  3  18           	clc
002679  3               numsp3:
002679  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
00267B  3  85 rr        	sta dispy		; coords in dispx,dispy.
00267D  3  20 E3 28     	jsr tstbl 		; get map address.
002680  3  20 10 28     	jsr plchk 		; block, platform check.
002683  3  F0 01        	beq :+
002685  3  60           	rts			; no way through.
002686  3               :
002686  3  E6 rr        	inc bufaddr		; look right one cell.
002688  3  D0 02        	bne :+
00268A  3  E6 rr        	inc bufaddr+1
00268C  3               :
00268C  3  20 10 28     	jsr plchk		; block, platform check.
00268F  3  F0 01        	beq :+
002691  3  60           	rts			; impassable.
002692  3               :
002692  3  A5 rr        	lda dispx		; x coordinate.
002694  3  29 07        	and #7			; position straddling block cells.
002696  3  D0 01        	bne :+
002698  3  60           	rts			; no more checks needed.
002699  3               :
002699  3  E6 rr        	inc bufaddr		; look to third cell.
00269B  3  D0 02        	bne :+
00269D  3  E6 rr        	inc bufaddr+1
00269F  3               :
00269F  3  20 10 28     	jsr plchk		; block, platform check.
0026A2  3  60           	rts			; return with zero flag set accordingly.
0026A3  3               
0026A3  3               ;---------------------------------------------------------
0026A3  3               ; Can go left check.
0026A3  3               ;
0026A3  3               ; Input:
0026A3  3               ;  IX = sprite pointer
0026A3  3               ;
0026A3  3               ; Output:
0026A3  3               ;  A  = 0 is ok, A <>0 is not ok
0026A3  3               ;---------------------------------------------------------
0026A3  3               
0026A3  3               cangl:
0026A3  3  A0 08        	ldy #8
0026A5  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0026A7  3  85 rr        	sta dispy
0026A9  3  A0 09        	ldy #9
0026AB  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0026AD  3  38           	sec
0026AE  3  E9 02        	sbc #2			; look left 2 pixels.
0026B0  3  85 rr        	sta dispx		; coords in dispx,dispy.
0026B2  3  4C D4 27     	jmp cangh		; test if we can go there.
0026B5  3               
0026B5  3               ;---------------------------------------------------------
0026B5  3               ; Can go right check.
0026B5  3               ;
0026B5  3               ; Input:
0026B5  3               ;  IX = sprite pointer
0026B5  3               ;
0026B5  3               ; Output:
0026B5  3               ;  A  = 0 is ok, A <>0 is not ok
0026B5  3               ;---------------------------------------------------------
0026B5  3               
0026B5  3  00 00 00 00  .repeat 272
0026B9  3  00 00 00 00  
0026BD  3  00 00 00 00  
0027C5  3                 .byte 0
0027C5  3               .endrep
0027C5  3               
0027C5  3               cangr:
0027C5  3  A0 08        	ldy #8
0027C7  3  B1 68        	lda (z80_ix),y		; y coordinate.
0027C9  3  85 rr        	sta dispy
0027CB  3  A0 09        	ldy #9
0027CD  3  B1 68        	lda (z80_ix),y		; x coordinate.
0027CF  3  18           	clc
0027D0  3  69 10        	adc #16			; look right 16 pixels.
0027D2  3  85 rr        	sta dispx		; coords in dispx,dispy.
0027D4  3               cangh:
0027D4  3               cangh2:
0027D4  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
0027D6  3  85 63        	sta z80_b
0027D8  3  A5 rr        	lda dispy		; y position.
0027DA  3  29 07        	and #7			; does x straddle cells?
0027DC  3  D0 02        	bne cangh0		; yes, loop counter is good.
0027DE  3  C6 63        	dec z80_b		; one less row to write.
0027E0  3               cangh0:
0027E0  3  20 E3 28     	jsr tstbl		; get map address.
0027E3  3               cangh1:
0027E3  3  20 FB 27     	jsr lrchk		; standard left/right check.
0027E6  3  F0 01        	beq :+
0027E8  3  60           	rts			; no way through.
0027E9  3               :
0027E9  3  48           	pha
0027EA  3  18           	clc
0027EB  3  A5 rr        	lda bufaddr
0027ED  3  69 20        	adc #32			; look down.
0027EF  3  85 rr        	sta bufaddr
0027F1  3  90 02        	bcc :+
0027F3  3  E6 rr        	inc bufaddr+1
0027F5  3               :
0027F5  3  68           	pla
0027F6  3               
0027F6  3  C6 63        	dec z80_b
0027F8  3  D0 E9        	bne cangh1
0027FA  3  60           	rts
0027FB  3               
0027FB  3               ;-------------------------------------
0027FB  3               ; Check left/right movement is okay.
0027FB  3               ;
0027FB  3               ; Input:
0027FB  3               ;  bufaddr = MAP + x/8 + y/8*32
0027FB  3               ;
0027FB  3               ; Output:
0027FB  3               ;  A  = 0 is ok, A <>0 is not ok
0027FB  3               ;-------------------------------------
0027FB  3               
0027FB  3               lrchk:
0027FB  3  A0 00        	ldy #0
0027FD  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
0027FF  3  C9 02        	cmp #WALL 		; is it passable?
002801  3  F0 0A        	beq lrchkx		; no.
002803  3               
002803  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002805  3  F0 06        	beq lrchkx		; not passable.
002807  3  A9 00        	lda #0
002809  3  60           	rts
00280A  3               
00280A  3               ;--------------------------------------------------------------
00280A  3               ; Called by mmenu
00280A  3               ;--------------------------------------------------------------
00280A  3               
00280A  3               always:
00280A  3  A9 FF        	lda #255		; report it as okay.
00280C  3  60           	rts
00280D  3               
00280D  3               lrchkx:
00280D  3  A9 01        	lda #1 			; reset all bits.
00280F  3  60           	rts
002810  3               
002810  3               
002810  3               ;--------------------------------------------------------------
002810  3               ; Check platform or solid item is not in way.
002810  3               ;
002810  3               ; Input:
002810  3               ;  bufaddr = MAP + x/8 + y/8*32
002810  3               ;
002810  3               ; Output:
002810  3               ;  A  = 0 is ok, A <>0 is not ok
002810  3               ;--------------------------------------------------------------
002810  3               
002810  3               plchk:
002810  3  A0 00        	ldy #0
002812  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002814  3  C9 02        	cmp #WALL 		; is it passable?
002816  3  F0 F5        	beq lrchkx		; no.
002818  3               .if pflag .or dflag
002818  3               	cmp #FODDER		; fodder has to be dug.
002818  3               	beq lrchkx		; not passable.
002818  3               .endif
002818  3  C9 01        	cmp #PLATFM		; platform is solid.
00281A  3  F0 03        	beq plchkx		; not passable.
00281C  3               .if lflag
00281C  3               	cmp #LADDER		; is it a ladder?
00281C  3               	beq lrchkx		; on ladder, deny movement.
00281C  3               .endif
00281C  3               plchk0:
00281C  3  A9 00        	lda #0			; report as ok
00281E  3  60           	rts
00281F  3               plchkx:
00281F  3  A5 rr        	lda dispy		; x coordinate.
002821  3  29 07        	and #7			; position straddling blocks.
002823  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002825  3  4C 1C 28     	jmp plchk0
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Check ladder is available.
002828  3               ;
002828  3               ; Input:
002828  3               ;  bufaddr = MAP + x/8 + y/8*32
002828  3               ;
002828  3               ; Output:
002828  3               ;  A  = 0 is ok, A <>0 is not ok
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               .if lflag
002828  3               ldchk:
002828  3               	ldy #0
002828  3               	lda (bufaddr),y 	; fetch cell.
002828  3               	cmp #LADDER 		; is it a ladder?
002828  3               	beq :+
002828  3               	lda #1
002828  3               	rts  			; return with zero flag set accordingly.
002828  3               :
002828  3               	lda #0
002828  3               	rts
002828  3               .endif
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Get collectables.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               .if cflag
002828  3               getcol:
002828  3                       lda #COLECT             ; collectable blocks.
002828  3                       sta z80_b
002828  3                       jsr tded                ; test for collectable blocks.
002828  3                       cmp z80_b               ; did we find one?
002828  3                       beq :+
002828  3                       rts                     ; none were found, job done.
002828  3               :
002828  3                       jsr gtblk               ; get block.
002828  3                       jsr evnt20              ; collected block event.
002828  3                       jmp getcol              ; repeat until none left.
002828  3               
002828  3               ; Get collectable block.
002828  3               
002828  3               gtblk:
002828  3               	ldy #0
002828  3               	lda (bufaddr),y
002828  3               	sta z80_a
002828  3                       lda #0
002828  3                       sta (bufaddr),y		; make it empty now.
002828  3               
002828  3               	lda bufaddr		; set dispx
002828  3               	and #31
002828  3               	sta dispx
002828  3               
002828  3               	lda bufaddr+1		; Set dispy
002828  3               	sec
002828  3               	sbc #>MAP
002828  3               	sta bufaddr+1
002828  3               	asl bufaddr
002828  3               	rol bufaddr+1
002828  3               	asl bufaddr
002828  3               	rol bufaddr+1
002828  3               	asl bufaddr
002828  3               	rol bufaddr+1
002828  3               	lda bufaddr+1
002828  3               	sta dispy
002828  3               
002828  3               	lda colpatt		; get blocknr
002828  3               	sta z80_e		; displacement in e.
002828  3               	lda #0
002828  3               	sta z80_d		; no high byte.
002828  3               	asl z80_e  		; multiply char by 8.
002828  3               	rol z80_d
002828  3               	asl z80_e
002828  3               	rol z80_d
002828  3               	asl z80_e
002828  3               	rol z80_d
002828  3               	clc
002828  3               	lda z80_e
002828  3               	adc #<chgfx 		; address of graphics.
002828  3               	sta tileaddr
002828  3               	lda z80_d
002828  3               	adc #>chgfx
002828  3               	sta tileaddr+1
002828  3               	jsr gprad 		; get screen address.
002828  3               	ldx #7			; number of pixel rows to write.
002828  3               gtblk0:
002828  3               	ldy #0
002828  3               	lda (tileaddr),y 	; get image byte.
002828  3               	ldy scrtab,x
002828  3               	eor (scraddr),y 	; XOR tile on screen
002828  3               	sta (scraddr),y 	; copy to screen.
002828  3               	inc tileaddr 		; next image byte.
002828  3               	bne :+
002828  3               	inc tileaddr+1
002828  3               :
002828  3               	dex	 		; repeat for 8 pixel rows.
002828  3               	bpl gtblk0
002828  3               	rts
002828  3               .endif
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Touched deadly block check.
002828  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002828  3               ;
002828  3               ; Input:
002828  3               ;  IX = sprite address
002828  3               ;
002828  3               ; Output:
002828  3               ;  A  = 0 is ok, A=5 is not ok
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               tded:
002828  3  A0 08        	ldy #8
00282A  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00282C  3  85 rr        	sta dispy
00282E  3  C8           	iny
00282F  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002831  3  85 rr        	sta dispx		; coords in dispx,dispy.
002833  3  20 E3 28     	jsr tstbl		; get map address.
002836  3  48           	pha
002837  3  A9 1F        	lda #31			; default distance to next line down.
002839  3  85 64        	sta z80_e
00283B  3  68           	pla
00283C  3  C5 63        	cmp z80_b		; is this the required block?
00283E  3  D0 01        	bne :+
002840  3  60           	rts			; yes.
002841  3               :
002841  3  E6 rr        	inc bufaddr 		; next cell.
002843  3  D0 02        	bne :+
002845  3  E6 rr        	inc bufaddr+1
002847  3               :
002847  3  A0 00        	ldy #0
002849  3  B1 rr        	lda (bufaddr),y		; fetch type.
00284B  3  C5 63        	cmp z80_b 		; is this deadly/custom?
00284D  3  D0 01        	bne :+
00284F  3  60           	rts			; yes.
002850  3               :
002850  3  A5 rr        	lda dispx		; horizontal position.
002852  3  85 62        	sta z80_c 		; store column in c register.
002854  3  29 07        	and #7			; is it straddling cells?
002856  3  D0 03        	bne :+
002858  3  4C 6C 28     	jmp tded0		; no.
00285B  3               :
00285B  3  E6 rr        	inc bufaddr 		; last cell.
00285D  3  D0 02        	bne :+
00285F  3  E6 rr        	inc bufaddr+1
002861  3               :
002861  3  A0 00        	ldy #0
002863  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002865  3  C5 63        	cmp z80_b		; is this the block?
002867  3  D0 01        	bne :+
002869  3  60           	rts			; yes.
00286A  3               :
00286A  3  C6 64        	dec z80_e		; one less cell to next row down.
00286C  3               tded0:
00286C  3  18           	clc 			; point to next row.
00286D  3  A5 rr        	lda bufaddr
00286F  3  65 64        	adc z80_e
002871  3  85 rr        	sta bufaddr
002873  3  90 02        	bcc :+
002875  3  E6 rr        	inc bufaddr+1
002877  3               :
002877  3  A0 00        	ldy #0
002879  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
00287B  3  C5 63        	cmp z80_b		; is this fatal?
00287D  3  D0 01        	bne :+
00287F  3  60           	rts			; yes.
002880  3               :
002880  3  E6 rr        	inc bufaddr 		; next cell.
002882  3  D0 02        	bne :+
002884  3  E6 rr        	inc bufaddr+1
002886  3               :
002886  3  A0 00        	ldy #0
002888  3  B1 rr        	lda (bufaddr),y 	; fetch type.
00288A  3  C5 63        	cmp z80_b		; is this fatal?
00288C  3  D0 01        	bne :+
00288E  3  60           	rts			; yes.
00288F  3               :
00288F  3  A5 62        	lda z80_c		; horizontal position.
002891  3  29 07        	and #7			; is it straddling cells?
002893  3  D0 03        	bne :+
002895  3  4C A7 28     	jmp tded1 		; no.
002898  3               :
002898  3  E6 rr        	inc bufaddr		; last cell.
00289A  3  D0 02        	bne :+
00289C  3  E6 rr        	inc bufaddr+1
00289E  3               :
00289E  3  A0 00        	ldy #0
0028A0  3  B1 rr        	lda (bufaddr),y		; fetch type.
0028A2  3  C5 63        	cmp z80_b		; is this fatal?
0028A4  3  D0 01        	bne :+
0028A6  3  60           	rts			; yes.
0028A7  3               :
0028A7  3               tded1:
0028A7  3  A5 rr        	lda dispy		; vertical position.
0028A9  3  29 07        	and #7 			; is it straddling cells?
0028AB  3  D0 01        	bne :+
0028AD  3  60           	rts			; no, job done.
0028AE  3               :
0028AE  3  18           	clc			; point to next row.
0028AF  3  A5 rr        	lda bufaddr
0028B1  3  65 64        	adc z80_e
0028B3  3  85 rr        	sta bufaddr
0028B5  3  90 02        	bcc :+
0028B7  3  E6 rr        	inc bufaddr+1
0028B9  3               :
0028B9  3  A0 00        	ldy #0
0028BB  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
0028BD  3  C5 63        	cmp z80_b		; is this fatal?
0028BF  3  D0 01        	bne :+
0028C1  3  60           	rts			; yes.
0028C2  3               :
0028C2  3  E6 rr        	inc bufaddr		; next cell.
0028C4  3  D0 02        	bne :+
0028C6  3  E6 rr        	inc bufaddr+1
0028C8  3               :
0028C8  3  A0 00        	ldy #0
0028CA  3  B1 rr        	lda (bufaddr),y 	; fetch type.
0028CC  3  C5 63        	cmp z80_b		; is this fatal?
0028CE  3  D0 01        	bne :+
0028D0  3  60           	rts			; yes.
0028D1  3               :
0028D1  3  A5 62        	lda z80_c		; horizontal position.
0028D3  3  29 07        	and #7			; is it straddling cells?
0028D5  3  D0 01        	bne :+
0028D7  3  60           	rts			; no.
0028D8  3               :
0028D8  3  E6 rr        	inc bufaddr		; last cell.
0028DA  3  D0 02        	bne :+
0028DC  3  E6 rr        	inc bufaddr+1
0028DE  3               :
0028DE  3  A0 00        	ldy #0
0028E0  3  B1 rr        	lda (bufaddr),y		; fetch final type.
0028E2  3  60           	rts 			; return with final type in accumulator.
0028E3  3               
0028E3  3               ;---------------------------------------------------
0028E3  3               ; Fetch block type at (dispx, dispy).
0028E3  3               ;
0028E3  3               ; Output:
0028E3  3               ;  A = block type
0028E3  3               ;---------------------------------------------------
0028E3  3               
0028E3  3               tstbl:
0028E3  3  A5 rr        	lda dispy 		; fetch y coord.
0028E5  3  4A           	lsr a			; bufaddr = y/8
0028E6  3  4A           	lsr a
0028E7  3  4A           	lsr a
0028E8  3  85 rr        	sta chary
0028EA  3               
0028EA  3  85 rr        	sta bufaddr
0028EC  3  A9 00        	lda #0
0028EE  3  85 rr        	sta bufaddr+1
0028F0  3               
0028F0  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
0028F2  3  26 rr        	rol bufaddr+1
0028F4  3  06 rr        	asl bufaddr
0028F6  3  26 rr        	rol bufaddr+1
0028F8  3  06 rr        	asl bufaddr
0028FA  3  26 rr        	rol bufaddr+1
0028FC  3  06 rr        	asl bufaddr
0028FE  3  26 rr        	rol bufaddr+1
002900  3  06 rr        	asl bufaddr
002902  3  26 rr        	rol bufaddr+1
002904  3               
002904  3  A5 rr        	lda dispx		; x/8
002906  3  4A           	lsr a
002907  3  4A           	lsr a
002908  3  4A           	lsr a
002909  3  85 rr        	sta charx
00290B  3               
00290B  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
00290C  3  65 rr        	adc bufaddr
00290E  3  69 00        	adc #<MAP
002910  3  85 rr        	sta bufaddr
002912  3  A5 rr        	lda bufaddr+1
002914  3  69 DD        	adc #>MAP
002916  3  85 rr        	sta bufaddr+1
002918  3               
002918  3  A0 00        	ldy #0
00291A  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
00291C  3  60           	rts
00291D  3               
00291D  3               
00291D  3               ;-------------------------------------------------------------------
00291D  3               ; Jump - if we can.
00291D  3               ; Requires initial speed to be set up in accumulator prior to call.
00291D  3               ;
00291D  3               ; Input:
00291D  3               ;  IX = sprite address
00291D  3               ;-------------------------------------------------------------------
00291D  3               
00291D  3               jump:
00291D  3  A0 0D        	ldy #13
00291F  3  B1 68        	lda (z80_ix),y		; jump table low.
002921  3  A0 0E        	ldy #14
002923  3  11 68        	ora (z80_ix),y		; jump table high.
002925  3  F0 01        	beq :+
002927  3  60           	rts			; already in the air.
002928  3               :
002928  3  A9 37        	lda #>jtab
00292A  3  A0 0E        	ldy #14
00292C  3  91 68        	sta (z80_ix),y		; set jump high.
00292E  3  A9 4A        	lda #<jtab		; jump table start.
002930  3  A0 0D        	ldy #13
002932  3  91 68        	sta (z80_ix),y		; set jump low.
002934  3  60           	rts
002935  3               
002935  3               ; Jump table.
002935  3               
002935  3               ;jtab:
002935  3               ;	.byte 248,250,252
002935  3               ;	.byte 254,254,255
002935  3               ;	.byte 255,255,0,0
002935  3               ;	.byte 0,1,1,1,2,2
002935  3               ;	.byte 4,6,8,8,8,99
002935  3               
002935  3               ;------------------------------------------------
002935  3               ; Random numbers code.
002935  3               ; Pseudo-random number generator, 8-bit.
002935  3               ;
002935  3               ; Output:
002935  3               ;  RND = random number
002935  3               ;------------------------------------------------
002935  3               
002935  3               random:
002935  3  A5 rr        	lda seed
002937  3  F0 05        	beq doEor
002939  3  0A           	asl a
00293A  3  F0 04        	beq noEor
00293C  3  90 02        	bcc noEor
00293E  3  49 1D        doEor:	eor #$1d
002940  3  85 rr        noEor:	sta seed
002942  3  60           	rts
002943  3               
002943  3  A5 rr        	lda seed		; get last random number.
002945  3  0A           	asl a
002946  3  0A           	asl a
002947  3  18           	clc
002948  3  65 rr        	adc seed
00294A  3  18           	clc
00294B  3  69 45        	adc #$45
00294D  3  85 rr        	sta seed		; store new seed.
00294F  3  85 rr        	sta varrnd		; return number in variable.
002951  3  60           	rts
002952  3               
002952  3               ;--------------------------------------------------------
002952  3               ; Keys
002952  3               ;
002952  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002952  3               ;             ||||||||
002952  3               ;             |||||||+> Right    KEY 0  - X
002952  3               ;             ||||||+-> Left     KEY 1  - Z
002952  3               ;             |||||+--> Down     KEY 2  - .
002952  3               ;             ||||+---> Up       KEY 3  - ;
002952  3               ;             |||+----> Fire1    KEY 4  - SPC
002952  3               ;             ||+-----> Fire2    KEY 5  - Q
002952  3               ;             |+------> Fire3    KEY 6  - P
002952  3               ;             +-------> Not used
002952  3               ;
002952  3               ;                       Option1  KEY 7  - 1
002952  3               ;                       Option2  KEY 8  - 2
002952  3               ;                       Option3  KEY 9  - 3
002952  3               ;                       Option4  KEY 10 - 4
002952  3               ;--------------------------------------------------------
002952  3               
002952  3               ;              X   Z   .   ;  SPC  Q   P
002952  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002952  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002952  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002956  3  00 04 14     
002959  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
00295D  3               
00295D  3               ;-------------------------------------------------------
00295D  3               ; Joystick and keyboard reading routines.
00295D  3               ;
00295D  3               ; contrl = 0, Keyboard
00295D  3               ;          1, JoyKeyb
00295D  3               ;          2, JoyMMC
00295D  3               ;-------------------------------------------------------
00295D  3               
00295D  3               joykey:
00295D  3  A5 rr        	lda contrl 		; control flag.
00295F  3  C9 01        	cmp #1
002961  3  D0 03        	bne :+
002963  3  4C 0F 38     	jmp joy1 		; read keyboard joystick
002966  3               :
002966  3  C9 02        	cmp #2
002968  3  D0 03        	bne :+
00296A  3  4C 3F 38     	jmp joy2 		; read MMC joystick.
00296D  3               :
00296D  3               ; Keyboard controls.
00296D  3               
00296D  3  A9 00        	lda #0		 	; zero reading.
00296F  3  85 64        	sta z80_e
002971  3               
002971  3  A0 06        	ldy #6	 		; address of last key.
002973  3               joyke0:
002973  3  B9 4B 37     	lda keys,y 		; get key from table.
002976  3  20 E6 37     	jsr ktest		; being pressed?
002979  3  26 64        	rol z80_e 		; rotate into reading.
00297B  3               
00297B  3  88           	dey		 	; next key.
00297C  3  10 F5        	bpl joyke0 		; repeat for all keys.
00297E  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002980  3  85 rr        	sta joyval		; remember value.
002982  3  60           	rts
002983  3               
002983  3               ;---------------------------------------------------------------
002983  3               ; Display message.
002983  3               ;
002983  3               ; Input:
002983  3               ;  A = message number
002983  3               ;---------------------------------------------------------------
002983  3               
002983  3               dmsg:
002983  3  AA           	tax
002984  3  A9 81        	lda #<msgdat		; pointer to messages.
002986  3  85 66        	sta z80_l
002988  3  A9 33        	lda #>msgdat
00298A  3  85 67        	sta z80_h
00298C  3  20 9E 2A     	jsr getwrd		; get message number.
00298F  3               dmsg3:
00298F  3  20 8B 2A     	jsr preprt		; pre-printing stuff.
002992  3  20 70 23     	jsr checkx		; make sure we"re in a printable range.
002995  3  A5 rr        	lda prtmod		; print mode.
002997  3  D0 47        	bne bmsg1		; no, double-height text.
002999  3               dmsg0:
002999  3  A5 67        	lda z80_h		; store string pointer.
00299B  3  48           	pha
00299C  3  A5 66        	lda z80_l
00299E  3  48           	pha
00299F  3               
00299F  3  A0 00        	ldy #0
0029A1  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
0029A3  3  29 7F        	and #127		; remove any end marker.
0029A5  3  C9 0D        	cmp #13
0029A7  3  F0 24        	beq dmsg1
0029A9  3  20 04 25     	jsr pchar		; display character.
0029AC  3  20 78 2A     	jsr nexpos 		; display position.
0029AF  3  D0 03        	bne dmsg2		; not on a new line.
0029B1  3  20 7D 2A     	jsr nexlin		; next line down.
0029B4  3               dmsg2:
0029B4  3  68           	pla			; retrieve string pointer
0029B5  3  85 66        	sta z80_l
0029B7  3  68           	pla
0029B8  3  85 67        	sta z80_h
0029BA  3               
0029BA  3  A0 00        	ldy #0
0029BC  3  B1 66        	lda (z80_hl),y		; fetch last character.
0029BE  3  0A           	asl a  			; was it the end?
0029BF  3  90 03        	bcc :+
0029C1  3  4C C3 23     	jmp dscor2		; yes, job done.
0029C4  3               :
0029C4  3  E6 66        	inc z80_l		; next character to display.
0029C6  3  D0 02        	bne :+
0029C8  3  E6 67        	inc z80_h
0029CA  3               :
0029CA  3  4C 99 29     	jmp dmsg0
0029CD  3               dmsg1:
0029CD  3  E6 rr        	inc dispy
0029CF  3  A5 rr        	lda dispy
0029D1  3  C9 18        	cmp #24
0029D3  3  90 04        	bcc dmsg4
0029D5  3  A9 00        	lda #0
0029D7  3  85 rr        	sta dispy
0029D9  3               dmsg4:
0029D9  3  A9 00        	lda #0
0029DB  3  85 rr        	sta dispx
0029DD  3  4C B4 29     	jmp dmsg2
0029E0  3               
0029E0  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
0029E0  3               
0029E0  3               ;----------------------------------------------------------
0029E0  3               ; Display message in big text.
0029E0  3               ;
0029E0  3               ; Input:
0029E0  3               ;  HL = string pointer
0029E0  3               ;----------------------------------------------------------
0029E0  3               
0029E0  3               bmsg1:
0029E0  3  A0 00        	ldy #0
0029E2  3  B1 66        	lda (z80_hl),y 		; get character to display.
0029E4  3  29 7F        	and #127		; only want 7 bits.
0029E6  3  C9 0D        	cmp #13
0029E8  3  F0 13        	beq bmsg2
0029EA  3  20 12 2A     	jsr bchar 		; display big char.
0029ED  3               bmsg3:
0029ED  3  A0 00        	ldy #0
0029EF  3  B1 66        	lda (z80_hl),y 		; look at last character.
0029F1  3  48           	pha
0029F2  3  E6 66        	inc z80_l 		; next character in list.
0029F4  3  D0 02        	bne :+
0029F6  3  E6 67        	inc z80_h
0029F8  3               :
0029F8  3  68           	pla
0029F9  3  0A           	asl a  			; was terminator flag set?
0029FA  3  90 E4        	bcc bmsg1		; no, keep going.
0029FC  3  60           	rts
0029FD  3               bmsg2:
0029FD  3  A9 00        	lda #0
0029FF  3  85 rr        	sta dispx
002A01  3  E6 rr        	inc dispy
002A03  3  E6 rr        	inc dispy
002A05  3  A5 rr        	lda dispy
002A07  3  C9 17        	cmp #23
002A09  3  90 E2        	bcc bmsg3
002A0B  3  A9 00        	lda #0
002A0D  3  85 rr        	sta dispy
002A0F  3  4C ED 29     	jmp bmsg3
002A12  3               
002A12  3               ;----------------------------------------------------------
002A12  3               ; Big character display.
002A12  3               ;
002A12  3               ; Input:
002A12  3               ;  A = character
002A12  3               ;----------------------------------------------------------
002A12  3               
002A12  3               bchar:
002A12  3  85 64        	sta z80_e		; save char in lb
002A14  3  A9 00        	lda #0
002A16  3  85 65        	sta z80_d		; reset hb
002A18  3               
002A18  3  06 64        	asl z80_e 		; multiply char by 8.
002A1A  3  26 65        	rol z80_d
002A1C  3  06 64        	asl z80_e
002A1E  3  26 65        	rol z80_d
002A20  3  06 64        	asl z80_e
002A22  3  26 65        	rol z80_d		; de = a*8
002A24  3               
002A24  3  18           	clc			; de = Fontpointer + a*8
002A25  3  A5 64        	lda z80_e
002A27  3  69 4A        	adc #<(FONT-256) 		; address of font.
002A29  3  85 64        	sta z80_e
002A2B  3  A5 65        	lda z80_d
002A2D  3  69 33        	adc #>(FONT-256)
002A2F  3  85 65        	sta z80_d
002A31  3               
002A31  3  20 B5 24     	jsr gprad 		; get screen address.
002A34  3               
002A34  3  A2 00        	ldx #0			; height of character in font.
002A36  3               bchar0:
002A36  3  A0 00        	ldy #0
002A38  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
002A3A  3               
002A3A  3               .if iflag
002A3A  3               	eor #$ff
002A3A  3               .endif
002A3A  3               
002A3A  3  91 rr        	sta (scraddr),y
002A3C  3  48           	pha
002A3D  3  20 D2 2D     	jsr nline 		; next line down.
002A40  3  68           	pla
002A41  3  91 rr        	sta (scraddr),y
002A43  3  20 D2 2D     	jsr nline 		; next line down.
002A46  3               
002A46  3  18           	clc
002A47  3  E6 64        	inc z80_e 		; next line of font.
002A49  3  D0 02        	bne :+
002A4B  3  E6 65        	inc z80_d
002A4D  3               :
002A4D  3  E8           	inx
002A4E  3  E0 08        	cpx #8
002A50  3  D0 E4        	bne bchar0
002A52  3               
002A52  3  20 78 2A     	jsr nexpos		; display position.
002A55  3  D0 05        	bne bchar2 		; not on a new line.
002A57  3               bchar3:
002A57  3  E6 rr        	inc dispy
002A59  3  20 7D 2A     	jsr nexlin 		; next line check.
002A5C  3               bchar2:
002A5C  3  4C C3 23     	jmp dscor2		; tidy up line and column variables.
002A5F  3               
002A5F  3               
002A5F  3               ;-------------------------------------------------
002A5F  3               ; Display a character.
002A5F  3               ;
002A5F  3               ; Input:
002A5F  3               ;  A = character
002A5F  3               ;-------------------------------------------------
002A5F  3               
002A5F  3               achar:
002A5F  3  85 63        	sta z80_b 		; copy to b.
002A61  3  20 8B 2A     	jsr preprt 		; get ready to print.
002A64  3  A5 63        	lda z80_b		; character in accumulator.
002A66  3  A6 rr        	ldx prtmod 		; print mode.
002A68  3  F0 03        	beq :+
002A6A  3  4C 12 2A     	jmp bchar 		; no, double-height text.
002A6D  3               :
002A6D  3  20 04 25     	jsr pchar 		; display character.
002A70  3  20 78 2A     	jsr nexpos 		; display position.
002A73  3  F0 E2        	beq bchar3		; next line down.
002A75  3  4C 5C 2A     	jmp bchar2 		; tidy up.
002A78  3               
002A78  3               
002A78  3               ;-------------------------------------------------
002A78  3               ; Get next print column position.
002A78  3               ;-------------------------------------------------
002A78  3               
002A78  3               nexpos:
002A78  3  E6 rr        	inc dispx		; move along one position.
002A7A  3  A5 rr        	lda dispx 		; get coordinate.
002A7C  3               ;	and #31
002A7C  3  60           	rts 			; return with status in zero flag.
002A7D  3               
002A7D  3               ;-------------------------------------------------
002A7D  3               ; Get next print line position.
002A7D  3               ;-------------------------------------------------
002A7D  3               
002A7D  3               nexlin:
002A7D  3  E6 rr        	inc dispy 		; newline.
002A7F  3  A5 rr        	lda dispy		; vertical position.
002A81  3  C9 18        	cmp #24			; past screen edge?
002A83  3  B0 01        	bcs :+
002A85  3  60           	rts			; no, still okay.
002A86  3               :
002A86  3  A9 00        	lda #0			; restart at top.
002A88  3  85 rr        	sta dispy
002A8A  3  60           	rts
002A8B  3               
002A8B  3               ;--------------------------------------------------------
002A8B  3               ; Pre-print preliminaries.
002A8B  3               ;--------------------------------------------------------
002A8B  3               
002A8B  3               preprt:
002A8B  3  A9 4A        	lda #<(FONT-256)		; font pointer.
002A8D  3  8D 6E 23     	sta grbase		; set up graphics base.
002A90  3  A9 33        	lda #>(FONT-256)
002A92  3  8D 6F 23     	sta grbase+1
002A95  3               prescr:
002A95  3  A5 rr        	lda charx 		; display coordinates.
002A97  3  85 rr        	sta dispx		; set up general coordinates.
002A99  3  A5 rr        	lda chary
002A9B  3  85 rr        	sta dispy
002A9D  3  60           	rts
002A9E  3               
002A9E  3               ;--------------------------------------------------------------
002A9E  3               ; Get messagenr x in hl
002A9E  3               ;
002A9E  3               ; Input:
002A9E  3               ;  HL = pointer to message list
002A9E  3               ;  X  = message number.
002A9E  3               ;--------------------------------------------------------------
002A9E  3               
002A9E  3               getwrd:
002A9E  3  E0 00        	cpx #0
002AA0  3  D0 01        	bne:+ 			; first word in list?
002AA2  3  60           	rts 			; yep, don't search.
002AA3  3               :
002AA3  3  A0 00        	ldy #0
002AA5  3               getwd0:
002AA5  3  B1 66        	lda (z80_hl),y
002AA7  3  48           	pha
002AA8  3  E6 66        	inc z80_l
002AAA  3  D0 02        	bne :+
002AAC  3  E6 67        	inc z80_h
002AAE  3               :
002AAE  3  68           	pla
002AAF  3  C9 80        	cmp #128		; found end?
002AB1  3  30 F2        	bmi getwd0		; no, carry on.
002AB3  3  CA           	dex			; until we have right number.
002AB4  3  D0 EF        	bne getwd0
002AB6  3  60           	rts
002AB7  3               
002AB7  3               ;-----------------------------------------------------------
002AB7  3               ; Bubble sort.
002AB7  3               ;-----------------------------------------------------------
002AB7  3               
002AB7  3               bsort:
002AB7  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
002AB9  3  85 rr        	sta qscnt
002ABB  3               
002ABB  3  A9 20        	lda #<sprtab 		; sprite table.
002ABD  3  85 68        	sta z80_x
002ABF  3  A9 32        	lda #>sprtab
002AC1  3  85 69        	sta z80_i
002AC3  3               bsort0:
002AC3  3  A0 00        	ldy #0
002AC5  3  B1 68        	lda (z80_ix),y 		; first sprite type.
002AC7  3  C9 FF        	cmp #255 		; is it switched off?
002AC9  3  F0 30        	beq swemp		; yes, may need to switch another in here.
002ACB  3               
002ACB  3  A0 11        	ldy #TABSIZ
002ACD  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
002ACF  3  C9 FF        	cmp #255 		; is it enabled?
002AD1  3  F0 0A        	beq bsort2 		; no, nothing to swap.
002AD3  3               
002AD3  3  A0 14        	ldy #TABSIZ+3
002AD5  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
002AD7  3  A0 03        	ldy #3
002AD9  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
002ADB  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
002ADD  3               bsort2:
002ADD  3  18           	clc
002ADE  3  A5 68        	lda z80_x
002AE0  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002AE2  3  85 68        	sta z80_x
002AE4  3  90 02        	bcc :+
002AE6  3  E6 69        	inc z80_i
002AE8  3               :
002AE8  3  C6 rr        	dec qscnt
002AEA  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
002AEC  3  60           	rts
002AED  3               
002AED  3               ;qscnt:	.byte 0
002AED  3               
002AED  3               bsort1:
002AED  3  A0 11        	ldy #TABSIZ
002AEF  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
002AF1  3  C9 FF        	cmp #255		; is it enabled?
002AF3  3  F0 E8        	beq bsort2		; no, nothing to swap.
002AF5  3  20 09 2B     	jsr swspr		; swap positions.
002AF8  3  4C DD 2A     	jmp bsort2
002AFB  3               swemp:
002AFB  3  A0 11        	ldy #TABSIZ
002AFD  3  B1 68        	lda (z80_ix),y		; next table entry.
002AFF  3  C9 FF        	cmp #255		; is that one on?
002B01  3  F0 DA        	beq bsort2		; no, nothing to swap.
002B03  3  20 09 2B     	jsr swspr		; swap positions.
002B06  3  4C DD 2A     	jmp bsort2
002B09  3               
002B09  3               ; Swap sprites.
002B09  3               
002B09  3               swspr:
002B09  3  A5 68        	lda z80_x		; table address
002B0B  3  85 64        	sta z80_e		; copy to de pair.
002B0D  3  85 66        	sta z80_l		; copy to hl pair.
002B0F  3  A5 69        	lda z80_i
002B11  3  85 67        	sta z80_h
002B13  3  85 65        	sta z80_d
002B15  3               
002B15  3  18           	clc
002B16  3  A5 66        	lda z80_l
002B18  3  69 11        	adc #TABSIZ		; distance to second entry.
002B1A  3  85 66        	sta z80_l
002B1C  3  90 02        	bcc :+
002B1E  3  E6 67        	inc z80_h
002B20  3               :
002B20  3  A9 11        	lda #TABSIZ		; bytes to swap.
002B22  3  85 63        	sta z80_b
002B24  3  A0 00        	ldy #0
002B26  3               swspr0:
002B26  3  B1 66        	lda (z80_hl),y		; fetch second byte.
002B28  3  48           	pha
002B29  3  B1 64        	lda (z80_de),y 		; fetch first byte.
002B2B  3  91 66        	sta (z80_hl),y 		; copy to second.
002B2D  3  68           	pla
002B2E  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
002B30  3               
002B30  3  E6 64        	inc z80_e 		; next byte.
002B32  3  D0 02        	bne :+
002B34  3  E6 65        	inc z80_d
002B36  3               :
002B36  3  E6 66        	inc z80_l 		; next byte.
002B38  3  D0 02        	bne :+
002B3A  3  E6 67        	inc z80_h
002B3C  3               :
002B3C  3  C6 63        	dec z80_b
002B3E  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
002B40  3  60           	rts
002B41  3               
002B41  3               ;----------------------------------------------------
002B41  3               ; Process sprites.
002B41  3               ;----------------------------------------------------
002B41  3               
002B41  3               pspr:
002B41  3  A9 0C        	lda #NUMSPR		; sprites to process.
002B43  3  85 rr        	sta sprptr
002B45  3               
002B45  3  A9 20        	lda #<sprtab 		; sprite table.
002B47  3  85 68        	sta z80_x
002B49  3  A9 32        	lda #>sprtab
002B4B  3  85 69        	sta z80_i
002B4D  3               pspr1:
002B4D  3  A0 00        	ldy #0
002B4F  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
002B51  3  C9 09        	cmp #9 			; within range of sprite types?
002B53  3  B0 03        	bcs :+
002B55  3  20 68 2B     	jsr pspr2 		; yes, process this one.
002B58  3               :
002B58  3  18           	clc
002B59  3  A5 68        	lda z80_x
002B5B  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002B5D  3  85 68        	sta z80_x
002B5F  3  90 02        	bcc :+
002B61  3  E6 69        	inc z80_i		; next sprite.
002B63  3               :
002B63  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
002B65  3  D0 E6        	bne pspr1
002B67  3  60           	rts
002B68  3               
002B68  3               ;sprptr:	.byte 0
002B68  3               
002B68  3               pspr2:
002B68  3  A5 68        	lda z80_x 		; store original sprite pointer.
002B6A  3  85 rr        	sta ogptr
002B6C  3  A5 69        	lda z80_i
002B6E  3  85 rr        	sta ogptr+1
002B70  3  20 7C 2B     	jsr pspr3		; do the routine.
002B73  3               rtorg:
002B73  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
002B75  3  85 68        	sta z80_x
002B77  3  A5 rr        	lda ogptr+1
002B79  3  85 69        	sta z80_i
002B7B  3               rtorg0:
002B7B  3  60           	rts
002B7C  3               
002B7C  3               pspr3:
002B7C  3  A9 B1        	lda #<evtyp0		; sprite type events list.
002B7E  3  85 66        	sta z80_l
002B80  3  A9 2B        	lda #>evtyp0
002B82  3  85 67        	sta z80_h
002B84  3               pspr4:
002B84  3  B1 68        	lda (z80_ix),y
002B86  3  0A           	asl a			; double accumulator.
002B87  3  18           	clc
002B88  3  65 66        	adc z80_l
002B8A  3  85 66        	sta z80_l
002B8C  3  90 02        	bcc :+
002B8E  3  E6 67        	inc z80_h
002B90  3               :
002B90  3  B1 66        	lda (z80_hl),y
002B92  3  85 64        	sta z80_e 		; copy to de.
002B94  3  48           	pha
002B95  3               
002B95  3  E6 66        	inc z80_l 		; next byte of address.
002B97  3  D0 02        	bne :+
002B99  3  E6 67        	inc z80_h
002B9B  3               :
002B9B  3  B1 66        	lda (z80_hl),y 		; address high.
002B9D  3  85 65        	sta z80_d
002B9F  3               
002B9F  3  48           	pha	 		; swap address into hl.
002BA0  3  A5 67        	lda z80_h
002BA2  3  85 65        	sta z80_d
002BA4  3  68           	pla
002BA5  3  85 67        	sta z80_h
002BA7  3  68           	pla
002BA8  3  85 66        	sta z80_l
002BAA  3  A5 66        	lda z80_l
002BAC  3  85 64        	sta z80_e
002BAE  3               
002BAE  3  6C 66 00     	jmp (z80_hl) 		; go there.
002BB1  3               
002BB1  3               ;ogptr:	.word 0			; original sprite pointer.
002BB1  3               
002BB1  3               ; Address of each sprite type's routine.
002BB1  3               
002BB1  3  0A 33        evtyp0:	.word evnt00
002BB3  3  0B 33        evtyp1:	.word evnt01
002BB5  3  0C 33        evtyp2:	.word evnt02
002BB7  3  0D 33        evtyp3:	.word evnt03
002BB9  3  0E 33        evtyp4:	.word evnt04
002BBB  3  0F 33        evtyp5:	.word evnt05
002BBD  3  10 33        evtyp6:	.word evnt06
002BBF  3  11 33        evtyp7:	.word evnt07
002BC1  3  12 33        evtyp8:	.word evnt08
002BC3  3               
002BC3  3               ;--------------------------------------------------------------
002BC3  3               ; Display sprites.
002BC3  3               ;
002BC3  3               ; Input:
002BC3  3               ;  IX = sprite table
002BC3  3               ;--------------------------------------------------------------
002BC3  3               
002BC3  3               dspr:
002BC3  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
002BC5  3  85 rr        	sta sprcnt
002BC7  3               dspr0:
002BC7  3  A0 00        	ldy #0
002BC9  3  B1 68        	lda (z80_ix),y 		; get sprite type.
002BCB  3  C9 FF        	cmp #255 		; is it enabled?
002BCD  3  D0 42        	bne dspr1 		; yes, it needs deleting.
002BCF  3               dspr5:
002BCF  3  A0 05        	ldy #5
002BD1  3  B1 68        	lda (z80_ix),y 		; new type.
002BD3  3  C9 FF        	cmp #255		; is it enabled?
002BD5  3  D0 77        	bne dspr3 		; yes, it needs drawing.
002BD7  3               dspr2:
002BD7  3  A0 05        	ldy #5
002BD9  3  B1 68        	lda (z80_ix),y 		; copy new type.
002BDB  3  A0 00        	ldy #0
002BDD  3  91 68        	sta (z80_ix),y
002BDF  3  A0 06        	ldy #6
002BE1  3  B1 68        	lda (z80_ix),y 		; copy new image number.
002BE3  3  A0 01        	ldy #1
002BE5  3  91 68        	sta (z80_ix),y
002BE7  3  A0 07        	ldy #7
002BE9  3  B1 68        	lda (z80_ix),y 		; copy new frame.
002BEB  3  A0 02        	ldy #2
002BED  3  91 68        	sta (z80_ix),y
002BEF  3  A0 08        	ldy #8
002BF1  3  B1 68        	lda (z80_ix),y 		; copy new y.
002BF3  3  A0 03        	ldy #3
002BF5  3  91 68        	sta (z80_ix),y
002BF7  3  A0 09        	ldy #9
002BF9  3  B1 68        	lda (z80_ix),y 		; copy new x.
002BFB  3  A0 04        	ldy #4
002BFD  3  91 68        	sta (z80_ix),y
002BFF  3               
002BFF  3  18           	clc
002C00  3  A5 68        	lda z80_x
002C02  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
002C04  3  85 68        	sta z80_x
002C06  3  A5 69        	lda z80_i
002C08  3  69 00        	adc #0
002C0A  3  85 69        	sta z80_i 		; next sprite.
002C0C  3  C6 rr        	dec sprcnt
002C0E  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
002C10  3  60           	rts
002C11  3               dspr1:
002C11  3  A0 05        	ldy #5
002C13  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
002C15  3  C9 FF        	cmp #255		; is this enabled?
002C17  3  D0 06        	bne dspr4 		; yes, display both.
002C19  3               dspr6:
002C19  3  20 E9 2C     	jsr sspria 		; show single sprite.
002C1C  3  4C D7 2B     	jmp dspr2
002C1F  3               
002C1F  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
002C1F  3               
002C1F  3               dspr4:
002C1F  3  A0 04        	ldy #4
002C21  3  B1 68        	lda (z80_ix),y		; old x.
002C23  3  A0 09        	ldy #9
002C25  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
002C27  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
002C29  3               
002C29  3  A0 03        	ldy #3
002C2B  3  B1 68        	lda (z80_ix),y		; old y.
002C2D  3  A0 08        	ldy #8
002C2F  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002C31  3  D0 15        	bne dspr7		; they differ, need to redraw.
002C33  3               
002C33  3  A0 02        	ldy #2
002C35  3  B1 68        	lda (z80_ix),y 		; old frame.
002C37  3  A0 07        	ldy #7
002C39  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002C3B  3  4C 48 2C     	jmp dspr7 		; they differ, need to redraw.
002C3E  3               
002C3E  3  A0 01        	ldy #1
002C40  3  B1 68        	lda (z80_ix),y 		; old image.
002C42  3  A0 06        	ldy #6
002C44  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002C46  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
002C48  3               dspr7:
002C48  3  20 16 2D     	jsr sspric 		; delete old sprite, draw new one simultaneously.
002C4B  3  4C D7 2B     	jmp dspr2
002C4E  3               dspr3:
002C4E  3  20 10 2D     	jsr ssprib 		; show single sprite.
002C51  3  4C D7 2B     	jmp dspr2
002C54  3               
002C54  3               ;sprcnt:	.byte 0
002C54  3               
002C54  3               ;-----------------------------------------
002C54  3               ; Get sprite address calculations.
002C54  3               ; gspran = new sprite, gsprad = old sprite.
002C54  3               ;
002C54  3               ; Input:
002C54  3               ;  IX = sprite address
002C54  3               ;-----------------------------------------
002C54  3               
002C54  3               gspran:
002C54  3  A0 08        	ldy #8
002C56  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
002C58  3  85 rr        	sta dispy
002C5A  3  A0 09        	ldy #9
002C5C  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
002C5E  3  85 rr        	sta dispx
002C60  3  A0 06        	ldy #6
002C62  3  B1 68        	lda (z80_ix),y 		; new sprite image.
002C64  3  20 42 30     	jsr gfrm		; fetch start frame for this sprite.
002C67  3               
002C67  3  A0 00        	ldy #0
002C69  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002C6B  3  A0 07        	ldy #7
002C6D  3  18           	clc
002C6E  3  71 68        	adc (z80_ix),y 		; new add frame number.
002C70  3  4C 8F 2C     	jmp gspra0
002C73  3               
002C73  3               ;-----------------------------------------
002C73  3               ; Calculate old sprite address
002C73  3               ;
002C73  3               ; Input:
002C73  3               ;  IX = sprite address
002C73  3               ;
002C73  3               ; Output:
002C73  3               ;  B  = right byte mask
002C73  3               ;  C  = left byte mask
002C73  3               ;  DE = spriteframe address
002C73  3               ;  scraddr = screenaddress(dispx,dispy)
002C73  3               ;-----------------------------------------
002C73  3               
002C73  3               gsprad:
002C73  3  A0 03        	ldy #3
002C75  3  B1 68        	lda (z80_ix),y		; y coordinate.
002C77  3  85 rr        	sta dispy
002C79  3  A0 04        	ldy #4
002C7B  3  B1 68        	lda (z80_ix),y		; x coordinate.
002C7D  3  85 rr        	sta dispx
002C7F  3  A0 01        	ldy #1
002C81  3  B1 68        	lda (z80_ix),y 		; sprite image.
002C83  3  20 42 30     	jsr gfrm 		; fetch start frame for this sprite.
002C86  3               
002C86  3  A0 00        	ldy #0
002C88  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002C8A  3  A0 02        	ldy #2
002C8C  3  18           	clc
002C8D  3  71 68        	adc (z80_ix),y 		; add frame number.
002C8F  3               gspra0:
002C8F  3  4A           	lsr a	  		; multiply by 128.
002C90  3  85 65        	sta z80_d 		; store in d.
002C92  3  8D E7 2C     	sta tmp1
002C95  3  A9 00        	lda #0
002C97  3  6A           	ror a
002C98  3  85 64        	sta z80_e 		; got low byte.
002C9A  3  8D E8 2C     	sta tmp2
002C9D  3               .if bflag
002C9D  3               	lsr tmp1
002C9D  3               	ror tmp2
002C9D  3               	clc
002C9D  3               	lda tmp2
002C9D  3               	adc z80_e
002C9D  3               	sta z80_e
002C9D  3               	lda tmp1
002C9D  3               	adc z80_d
002C9D  3               	sta z80_d
002C9D  3               .endif
002C9D  3  18           	clc 			; address of play sprites.
002C9E  3  A5 64        	lda z80_e
002CA0  3  69 8F        	adc #<sprgfx
002CA2  3  85 64        	sta z80_e
002CA4  3  A5 65        	lda z80_d
002CA6  3  69 33        	adc #>sprgfx
002CA8  3  85 65        	sta z80_d
002CAA  3               
002CAA  3  A5 rr        	lda dispx 		; y coordinate.
002CAC  3  29 06        	and #6 			; position within byte boundary.
002CAE  3  AA           	tax	 		; low byte of table displacement.
002CAF  3               
002CAF  3  0A           	asl a	  		; multiply by 32.
002CB0  3  0A           	asl a  			; already a multiple
002CB1  3  0A           	asl a  			; of 2, so just 4
002CB2  3               .if bflag
002CB2  3               	sta tmp1
002CB2  3               	asl a  			; shifts needed.
002CB2  3               	clc
002CB2  3               	adc tmp1
002CB2  3               .else
002CB2  3  0A           	asl a  			; shifts needed.
002CB3  3               .endif
002CB3  3  18           	clc 			; add to sprite address.
002CB4  3  65 64        	adc z80_e
002CB6  3  85 64        	sta z80_e
002CB8  3  90 02        	bcc :+
002CBA  3  E6 65        	inc z80_d
002CBC  3               :
002CBC  3  BD DF 2C     	lda spmask,x		 ; pointer to mask table.
002CBF  3  85 62        	sta z80_c 		; left mask.
002CC1  3  BD E0 2C     	lda spmask+1,x
002CC4  3  85 63        	sta z80_b 		; right mask.
002CC6  3               
002CC6  3               ;------------------------------------------------------------------
002CC6  3               ; Drop into screen address routine.
002CC6  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
002CC6  3               ;------------------------------------------------------------------
002CC6  3               
002CC6  3               scadd:
002CC6  3  A6 rr        	ldx dispy
002CC8  3  E0 C0        	cpx #192
002CCA  3  90 02        	bcc :+
002CCC  3  A2 C0        	ldx #192
002CCE  3               :
002CCE  3  A5 rr        	lda dispx
002CD0  3  4A           	lsr a
002CD1  3  4A           	lsr a
002CD2  3  4A           	lsr a
002CD3  3  18           	clc
002CD4  3  7D 00 E0     	adc SCADTB_lb,x
002CD7  3  85 rr        	sta scraddr
002CD9  3  BD 00 E1     	lda SCADTB_hb,x
002CDC  3  85 rr        	sta scraddr+1
002CDE  3  60           	rts
002CDF  3               
002CDF  3  FF 00        spmask:	.byte $ff,$00
002CE1  3  3F C0        	.byte $3f,$c0
002CE3  3  0F F0        	.byte $0f,$f0
002CE5  3  03 FC        	.byte $03,$fc
002CE7  3               
002CE7  3  00           tmp1:	.byte 0
002CE8  3  00           tmp2:	.byte 0
002CE9  3               
002CE9  3               ;-----------------------------------------------------------------
002CE9  3               ; These are the sprite routines.
002CE9  3               ; sspria = single sprite, old (ix).
002CE9  3               ; ssprib = single sprite, new (ix+5).
002CE9  3               ; sspric = both sprites, old (ix) and new (ix+5).
002CE9  3               ;-----------------------------------------------------------------
002CE9  3               
002CE9  3               sspria:
002CE9  3  20 73 2C     	jsr gsprad		; get old sprite address.
002CEC  3               sspri2:
002CEC  3  A5 64        	lda z80_e
002CEE  3  8D 5E 2D     	sta dline1+1		; Set spritedata address
002CF1  3  8D 6D 2D     	sta dline2+1
002CF4  3  A5 65        	lda z80_d
002CF6  3  8D 5F 2D     	sta dline1+2
002CF9  3  8D 6E 2D     	sta dline2+2
002CFC  3  86 rr        	stx xtmp
002CFE  3  A2 00        	ldx #0			; vertical lines.
002D00  3               sspri0:
002D00  3  20 5A 2D     	jsr dline		; draw a line.
002D03  3  E0 10        	cpx #16			; detect block boundery
002D05  3  D0 02        	bne :+			; skip if not
002D07  3  E6 rr        	inc scraddr+1		; jump to next blockline
002D09  3               :
002D09  3  E0 20        	cpx #32			; check finished
002D0B  3               .if bflag
002D0B  3               	bne :+			; skip if not
002D0B  3               	inc scraddr+1		; jump to next blockline
002D0B  3               	inc z80_hlp+1		; jump to next blockline
002D0B  3               :
002D0B  3               	cpx #48			; check finished
002D0B  3               .endif
002D0B  3  D0 F3        	bne sspri0		; no, repeat
002D0D  3  A6 rr        	ldx xtmp
002D0F  3  60           	rts
002D10  3               
002D10  3               ;-----------------------------------------------------------------
002D10  3               
002D10  3               ssprib:
002D10  3  20 54 2C     	jsr gspran 		; get new sprite address.
002D13  3  4C EC 2C     	jmp sspri2
002D16  3               
002D16  3               ;-----------------------------------------------------------------
002D16  3               
002D16  3               sspric:
002D16  3  20 73 2C     	jsr gsprad 		; get old sprite address.
002D19  3  A5 64        	lda z80_e
002D1B  3  8D 82 2D     	sta ddline1+1		; Set spritedata address
002D1E  3  8D 91 2D     	sta ddline2+1
002D21  3  A5 65        	lda z80_d
002D23  3  8D 83 2D     	sta ddline1+2
002D26  3  8D 92 2D     	sta ddline2+2
002D29  3  20 CA 39     	jsr exx  		; store addresses.
002D2C  3               
002D2C  3  20 54 2C     	jsr gspran 		; get new sprite addresses.
002D2F  3  A5 64        	lda z80_e
002D31  3  8D 5E 2D     	sta dline1+1		; Set spritedata address
002D34  3  8D 6D 2D     	sta dline2+1
002D37  3  A5 65        	lda z80_d
002D39  3  8D 5F 2D     	sta dline1+2
002D3C  3  8D 6E 2D     	sta dline2+2
002D3F  3               
002D3F  3  86 rr        	stx xtmp
002D41  3  A2 00        	ldx #0			; vertical lines.
002D43  3               lloop:
002D43  3  20 5A 2D     	jsr dline 		; draw a line.
002D46  3  CA           	dex
002D47  3  CA           	dex
002D48  3  20 7E 2D     	jsr ddline 		; delete a line.
002D4B  3  E0 10        	cpx #16			; detect block boundery
002D4D  3  D0 04        	bne :+			; skip if not
002D4F  3  E6 rr        	inc scraddr+1		; jump to next blockline
002D51  3  E6 73        	inc z80_hlp+1		; jump to next blockline
002D53  3               :
002D53  3  E0 20        	cpx #32			; check finished
002D55  3               .if bflag
002D55  3               	bne :+			; skip if not
002D55  3               	inc scraddr+1		; jump to next blockline
002D55  3               	inc z80_hlp+1		; jump to next blockline
002D55  3               :
002D55  3               	cpx #48			; check finished
002D55  3               .endif
002D55  3  D0 EC        	bne lloop		; no, repeat
002D57  3  A6 rr        	ldx xtmp
002D59  3  60           	rts
002D5A  3               
002D5A  3               
002D5A  3               ;-----------------------------------------------------------------
002D5A  3               
002D5A  3               dline:
002D5A  3  BC A2 2D     	ldy sprline,x		; point to screenleft
002D5D  3               dline1:
002D5D  3  BD 24 34     	lda objdta,x		; fetch spriteleft byte
002D60  3  85 61        	sta z80_a		; save spriteright byte
002D62  3  A5 61        	lda z80_a
002D64  3  25 62        	and z80_c		; mask left
002D66  3  51 rr        	eor (scraddr),y		; merge with screenleft
002D68  3  91 rr        	sta (scraddr),y		; write screenleft
002D6A  3               sline:
002D6A  3  E8           	inx			; next spritebyte
002D6B  3  C8           	iny			; point to screenmiddle
002D6C  3               dline2:
002D6C  3  BD 24 34     	lda objdta,x		; fetch spritemiddle byte
002D6F  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
002D71  3  91 rr        	sta (scraddr),y		; write screenmiddle
002D73  3               sline2:
002D73  3  C8           	iny			; point to screenright
002D74  3  A5 61        	lda z80_a		; fetch spriteright byte
002D76  3  25 63        	and z80_b		; mask right
002D78  3  51 rr        	eor (scraddr),y		; merge with screenright
002D7A  3  91 rr        	sta (scraddr),y		; write screenright
002D7C  3               sline3:
002D7C  3  E8           	inx			; next spritebyte
002D7D  3               
002D7D  3  60           	rts
002D7E  3               
002D7E  3               ;-----------------------------------------------------------------
002D7E  3               
002D7E  3               ddline:
002D7E  3  BC A2 2D     	ldy sprline,x		; point to screenleft
002D81  3               ddline1:
002D81  3  BD 24 34     	lda objdta,x		; fetch spriteleft byte
002D84  3  85 61        	sta z80_a		; save spriteright byte
002D86  3  A5 61        	lda z80_a
002D88  3  25 6E        	and z80_cp		; mask left
002D8A  3  51 72        	eor (z80_hlp),y		; merge with screenleft
002D8C  3  91 72        	sta (z80_hlp),y		; write screenleft
002D8E  3               dsline:
002D8E  3  E8           	inx			; next spritebyte
002D8F  3  C8           	iny			; point to screenmiddle
002D90  3               ddline2:
002D90  3  BD 24 34     	lda objdta,x		; fetch spritemiddle byte
002D93  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
002D95  3  91 72        	sta (z80_hlp),y		; write screenmiddle
002D97  3               dsline2:
002D97  3  C8           	iny			; point to screenright
002D98  3  A5 61        	lda z80_a		; fetch spriteright byte
002D9A  3  25 6F        	and z80_bp		; mask right
002D9C  3  51 72        	eor (z80_hlp),y		; merge with screenright
002D9E  3  91 72        	sta (z80_hlp),y		; write screenright
002DA0  3               dsline3:
002DA0  3  E8           	inx			; next spritebyte
002DA1  3               
002DA1  3  60           	rts
002DA2  3               
002DA2  3               sprline:
002DA2  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002DA6  3  40 41 60 61  
002DAA  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002DAE  3  C0 C1 E0 E1  
002DB2  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002DB6  3  40 41 60 61  
002DBA  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002DBE  3  C0 C1 E0 E1  
002DC2  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002DC6  3  40 41 60 61  
002DCA  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002DCE  3  C0 C1 E0 E1  
002DD2  3               .if bflag
002DD2  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002DD2  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002DD2  3               .endif
002DD2  3               
002DD2  3               ;----------------------------------------------------------------------
002DD2  3               ; Line drawn, now work out next target address.
002DD2  3               ;----------------------------------------------------------------------
002DD2  3               
002DD2  3               nline:
002DD2  3  18           	clc
002DD3  3  A5 rr        	lda scraddr 		; get low byte of address.
002DD5  3  69 20        	adc #$20
002DD7  3  85 rr        	sta scraddr 		; new low byte of address.
002DD9  3  90 02        	bcc :+
002DDB  3  E6 rr        	inc scraddr+1 		; new high byte of address.
002DDD  3               :
002DDD  3  60           	rts
002DDE  3               
002DDE  3               ;-------------------------------------------------------------
002DDE  3               ; Line drawn, now work out next target address.
002DDE  3               ;
002DDE  3               ; Input:
002DDE  3               ;  BP  = right mask
002DDE  3               ;  CP  = left mask
002DDE  3               ;  DEP = spriteaddress
002DDE  3               ;  z80_hlp = screen address
002DDE  3               ;-------------------------------------------------------------
002DDE  3               
002DDE  3               
002DDE  3               ;-----------------------------------------------------------
002DDE  3               ; Animates a sprite.
002DDE  3               ;
002DDE  3               ; Input:
002DDE  3               ;  IX = sprite address
002DDE  3               ;  HL = last sprite address
002DDE  3               ;-----------------------------------------------------------
002DDE  3               
002DDE  3               animsp:
002DDE  3  25 rr        	and frmno
002DE0  3  F0 01        	beq :+
002DE2  3  60           	rts
002DE3  3               :
002DE3  3  A0 06        	ldy #6
002DE5  3  B1 68        	lda (z80_ix),y		; sprite image
002DE7  3  20 42 30     	jsr gfrm		; get frame data.
002DEA  3               
002DEA  3  E6 66        	inc z80_l		; point to frames.
002DEC  3  D0 02        	bne :+
002DEE  3  E6 67        	inc z80_h
002DF0  3               :
002DF0  3  A0 07        	ldy #7
002DF2  3  B1 68        	lda (z80_ix),y		; sprite frame.
002DF4  3  18           	clc
002DF5  3  69 01        	adc #1			; next one along.
002DF7  3  A0 00        	ldy #0
002DF9  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
002DFB  3  90 02        	bcc anims0		; no, not yet.
002DFD  3  A9 00        	lda #0			; start at first frame.
002DFF  3               anims0:
002DFF  3  A0 07        	ldy #7
002E01  3  91 68        	sta (z80_ix),y		; new frame.
002E03  3  60           	rts
002E04  3               
002E04  3               ;--------------------------------------------------------------
002E04  3               ; Animate back
002E04  3               ;
002E04  3               ; Input:
002E04  3               ;  IX = sprite address
002E04  3               ;  HL = last sprite address
002E04  3               ;--------------------------------------------------------------
002E04  3               
002E04  3               animbk:
002E04  3  25 rr        	and frmno
002E06  3  F0 01        	beq :+
002E08  3  60           	rts
002E09  3               :
002E09  3  A0 06        	ldy #6
002E0B  3  B1 68        	lda (z80_ix),y		; sprite image.
002E0D  3  20 42 30     	jsr gfrm		; get frame data.
002E10  3               
002E10  3  E6 66        	inc z80_l 		; point to frames.
002E12  3  D0 02        	bne :+
002E14  3  E6 67        	inc z80_h
002E16  3               :
002E16  3  A0 07        	ldy #7
002E18  3  B1 68        	lda (z80_ix),y 		; sprite frame.
002E1A  3  F0 03        	beq :+
002E1C  3  4C 23 2E     	jmp rtanb0 		; yes, start at end.
002E1F  3               :
002E1F  3  A0 00        	ldy #0
002E21  3  B1 66        	lda (z80_hl),y 		; last sprite.
002E23  3               rtanb0:
002E23  3  38           	sec
002E24  3  E9 01        	sbc #1			; next one along.
002E26  3  4C FF 2D     	jmp anims0		; set new frame.
002E29  3               
002E29  3               ;--------------------------------------------------------------
002E29  3               ; Check for collision with other sprite, strict enforcement.
002E29  3               ;
002E29  3               ; Input:
002E29  3               ;  b		= sprite to test for
002E29  3               ;  ix		= current sprite pointer
002E29  3               ;
002E29  3               ; global:	b
002E29  3               ; local:	x,y,hl,de,skptr
002E29  3               ; calls:	-
002E29  3               ;--------------------------------------------------------------
002E29  3               
002E29  3               sktyp:
002E29  3  A9 20        	lda #<sprtab				; sprite table.
002E2B  3  85 66        	sta z80_l
002E2D  3  A9 32        	lda #>sprtab
002E2F  3  85 67        	sta z80_h
002E31  3               numsp2:
002E31  3  A9 0C        	lda #NUMSPR				; number of sprites.
002E33  3  85 rr        	sta sktptr
002E35  3               sktyp0:
002E35  3  A5 66        	lda z80_l 				; store pointer to sprite.
002E37  3  85 rr        	sta skptr
002E39  3  A5 67        	lda z80_h
002E3B  3  85 rr        	sta skptr+1
002E3D  3               
002E3D  3  A0 00        	ldy #0
002E3F  3  B1 66        	lda (z80_hl),y 				; get sprite type.
002E41  3  C5 63        	cmp z80_b				; is it the type we seek?
002E43  3  F0 1D        	beq coltyp				; yes, we can use this one.
002E45  3               sktyp1:
002E45  3  18           	clc
002E46  3  A5 rr        	lda skptr				; retrieve sprite pointer.
002E48  3  69 11        	adc #TABSIZ				; size of each entry.
002E4A  3  85 66        	sta z80_l
002E4C  3  A5 rr        	lda skptr+1
002E4E  3  69 00        	adc #0
002E50  3  85 67        	sta z80_h
002E52  3  C6 rr        	dec sktptr					; one less iteration.
002E54  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
002E56  3  A9 00        	lda #0					; default to ROM address - no sprite.
002E58  3  85 66        	sta z80_l
002E5A  3  85 67        	sta z80_h
002E5C  3  85 rr        	sta skptr				; store pointer to sprite.
002E5E  3  85 rr        	sta skptr+1
002E60  3               
002E60  3  18           	clc					; don't return with zero flag set.
002E61  3  60           	rts 					; didn't find one.
002E62  3               
002E62  3               ;skptr:	.word 0					; search pointer.
002E62  3               ;sktptr:	.byte 0
002E62  3               
002E62  3               coltyp:
002E62  3  A0 00        	ldy #0
002E64  3  B1 68        	lda (z80_ix),y				; current sprite type.
002E66  3  C5 63        	cmp z80_b				; seeking sprite of same type?
002E68  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
002E6A  3               colty0:
002E6A  3  A0 09        	ldy #9					; distance to x position in table.
002E6C  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
002E6E  3  85 64        	sta z80_e
002E70  3  88           	dey
002E71  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
002E73  3  85 65        	sta z80_d
002E75  3               
002E75  3               ; Drop into collision detection.
002E75  3               
002E75  3               colc16:
002E75  3  A0 09        	ldy #9
002E77  3  B1 68        	lda (z80_ix),y			 	; x coord.
002E79  3  38           	sec					; subtract x.
002E7A  3  E5 64        	sbc z80_e
002E7C  3  B0 05        	bcs  colc1a 				; result is positive.
002E7E  3  49 FF        	eor #$ff				; make negative positive.
002E80  3  18           	clc
002E81  3  69 01        	adc #1
002E83  3               colc1a:
002E83  3  C9 10        	cmp #16 				; within x range?
002E85  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
002E87  3  85 62        	sta z80_c				; store difference.
002E89  3               
002E89  3  A0 08        	ldy #8
002E8B  3  B1 68        	lda (z80_ix),y				; y coord.
002E8D  3  38           	sec
002E8E  3  E5 65        	sbc z80_d				; subtract y.
002E90  3  B0 05        	bcs colc1b				; result is positive.
002E92  3  49 FF        	eor #$ff				; make negative positive.
002E94  3  18           	clc
002E95  3  69 01        	adc #1
002E97  3               colc1b:
002E97  3  C9 10        	cmp #16					; within y range?
002E99  3  B0 AA        	bcs sktyp1 				; no - they've missed.
002E9B  3  18           	clc					; add x difference.
002E9C  3  65 62        	adc z80_c
002E9E  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
002EA0  3  B0 02        	bcs :+
002EA2  3  38           	sec
002EA3  3  60           	rts 					; carry set if there's a collision.
002EA4  3               :
002EA4  3  4C 45 2E     	jmp sktyp1				; try next sprite in table.
002EA7  3               colty1:
002EA7  3  A5 68        	lda z80_x  				; compare the two.
002EA9  3  C5 66        	cmp z80_l
002EAB  3  D0 09        	bne end_col
002EAD  3  A5 69        	lda z80_i
002EAF  3  C5 67        	cmp z80_h
002EB1  3  D0 03        	bne end_col
002EB3  3  4C 45 2E     	jmp sktyp1 				; addresses are identical.
002EB6  3               end_col:
002EB6  3  4C 6A 2E     	jmp colty0
002EB9  3               
002EB9  3               ;-----------------------------------------------------------
002EB9  3               ; Display number, left aligned
002EB9  3               ;
002EB9  3               ; Input:
002EB9  3               ;  a		= number
002EB9  3               ;
002EB9  3               ; global:	-
002EB9  3               ; local:	a,y,bc,hl,displ0
002EB9  3               ; calls:	num2ch,dmsg3
002EB9  3               ;-----------------------------------------------------------
002EB9  3               
002EB9  3               disply:
002EB9  3  85 61        	sta z80_a
002EBB  3  A9 E1        	lda #<displ0				; display workspace.
002EBD  3  85 62        	sta z80_c
002EBF  3  A9 2E        	lda #>displ0
002EC1  3  85 63        	sta z80_b
002EC3  3  A5 61        	lda z80_a
002EC5  3  20 1E 22     	jsr num2ch				; convert accumulator to string.
002EC8  3               displ1:
002EC8  3  C6 62        	dec z80_c				; back one character.
002ECA  3  D0 02        	bne :+
002ECC  3  C6 63        	dec z80_b
002ECE  3               :
002ECE  3  A0 00        	ldy #0
002ED0  3  B1 62        	lda (z80_bc),y				; fetch digit.
002ED2  3  09 80        	ora #128				; insert end marker.
002ED4  3  91 62        	sta (z80_bc),y				; new value.
002ED6  3               
002ED6  3  A9 E1        	lda #<displ0				; display space.
002ED8  3  85 66        	sta z80_l
002EDA  3  A9 2E        	lda #>displ0
002EDC  3  85 67        	sta z80_h
002EDE  3  4C 8F 29     	jmp dmsg3				; display the string.
002EE1  3               
002EE1  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
002EE5  3               
002EE5  3               ;----------------------------------------------------------------
002EE5  3               ; Initialise screen.
002EE5  3               ;
002EE5  3               ; global:	roomtb,scno
002EE5  3               ; local:	-
002EE5  3               ; calls:	tstcs
002EE5  3               ;----------------------------------------------------------------
002EE5  3               
002EE5  3               initsc:
002EE5  3  AD FD 32     	lda roomtb 			; whereabouts in the map are we?
002EE8  3  20 F2 2E     	jsr tstsc 			; find displacement.
002EEB  3  C9 FF        	cmp #255 			; is it valid?
002EED  3  F0 02        	beq init_end 			; no, it's rubbish.
002EEF  3  85 rr        	sta scno			; store new room number.
002EF1  3               init_end:
002EF1  3  60           	rts
002EF2  3               
002EF2  3               ;----------------------------------------------------------------
002EF2  3               ; Test screen.
002EF2  3               ;
002EF2  3               ; global:	-
002EF2  3               ; local:	x
002EF2  3               ; calls:	-
002EF2  3               ;----------------------------------------------------------------
002EF2  3               
002EF2  3               tstsc:
002EF2  3  85 rr        	sta tmproom
002EF4  3  18           	clc
002EF5  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
002EF7  3  AA           	tax 				; add displacement to map data.
002EF8  3  BD 00 33     	lda mapdat-MAPWID,x 		; find room number there.
002EFB  3  60           	rts
002EFC  3               
002EFC  3               ;tmproom:	.byte 0
002EFC  3               
002EFC  3               ;--------------------------
002EFC  3               ; Screen left.
002EFC  3               ;--------------------------
002EFC  3               
002EFC  3               scrl:
002EFC  3  AD FD 32     	lda roomtb 			; present room table pointer.
002EFF  3  38           	sec
002F00  3  E9 01        	sbc #1				; room left.
002F02  3               scrl0:
002F02  3  20 F2 2E     	jsr tstsc			; test screen.
002F05  3  C9 FF        	cmp #255			; is there a screen this way?
002F07  3  D0 01        	bne :+
002F09  3  60           	rts				; no, return to loop.
002F0A  3               :
002F0A  3  A5 rr        	lda tmproom			; restore room displacement.
002F0C  3  8D FD 32     	sta roomtb			; new room table position.
002F0F  3               scrl1:
002F0F  3  20 E5 2E     	jsr initsc 			; set new screen.
002F12  3  A9 02        	lda #2
002F14  3  85 rr        	sta restfl 			; set it.
002F16  3  60           	rts
002F17  3               scrr:
002F17  3  AD FD 32     	lda roomtb 			; room table pointer.
002F1A  3  18           	clc
002F1B  3  69 01        	adc #1				; room right.
002F1D  3  4C 02 2F     	jmp scrl0
002F20  3               scru:
002F20  3  AD FD 32     	lda roomtb 			; room table pointer.
002F23  3  38           	sec
002F24  3  E9 03        	sbc #MAPWID 			; room up.
002F26  3  4C 02 2F     	jmp scrl0
002F29  3               scrd:
002F29  3  AD FD 32     	lda roomtb 			; room table pointer.
002F2C  3  18           	clc
002F2D  3  69 03        	adc #MAPWID 			; room down.
002F2F  3  4C 02 2F     	jmp scrl0
002F32  3               
002F32  3               ;-----------------------------------------
002F32  3               ; Jump to new screen.
002F32  3               ;-----------------------------------------
002F32  3               
002F32  3               nwscr:
002F32  3  A2 00        	ldx #0				; start of map data.
002F34  3               nwscr0:
002F34  3  DD 03 33     	cmp mapdat,x
002F37  3  F0 06        	beq nwscr1			; have we found a match for screen?
002F39  3  E8           	inx 				; next room.
002F3A  3  E0 50        	cpx #80				; zero room count, 80 to search.
002F3C  3  D0 F6        	bne nwscr0			; keep looking.
002F3E  3  60           	rts
002F3F  3               nwscr1:
002F3F  3  8E FD 32     	stx roomtb			; set the map position.
002F42  3  4C 0F 2F     	jmp scrl1			; draw new room.
002F45  3               
002F45  3               
002F45  3               ;----------------------------------------------------------
002F45  3               ; Gravity processing.
002F45  3               ;----------------------------------------------------------
002F45  3               
002F45  3               grav:
002F45  3  A0 0D        	ldy #13
002F47  3  B1 68        	lda (z80_ix),y			; jump pointer low.
002F49  3  85 66        	sta z80_l
002F4B  3  A0 0E        	ldy #14
002F4D  3  B1 68        	lda (z80_ix),y			; jump pointer high.
002F4F  3  85 67        	sta z80_h
002F51  3  05 66        	ora z80_l			; merge in low byte.
002F53  3  D0 01        	bne :+
002F55  3  60           	rts				; if neither is set, we're not in the air.
002F56  3               :
002F56  3  A0 00        	ldy #0
002F58  3  B1 66        	lda (z80_hl),y			; pixels to move.
002F5A  3  85 61        	sta z80_a
002F5C  3  C9 63        	cmp #99				; reached the end?
002F5E  3  D0 0C        	bne grav0			; no, continue.
002F60  3               grav2:
002F60  3  C6 66        	dec z80_l			; go back to previous value.
002F62  3  C9 FF        	cmp #$ff
002F64  3  D0 02        	bne :+
002F66  3  C6 67        	dec z80_h
002F68  3               :
002F68  3  B1 66        	lda (z80_hl),y			; fetch that from table.
002F6A  3  85 61        	sta z80_a
002F6C  3               grav0:
002F6C  3  E6 66        	inc z80_l			; point to next table entry.
002F6E  3  D0 02        	bne :+
002F70  3  E6 67        	inc z80_h
002F72  3               :
002F72  3  A5 66        	lda z80_l
002F74  3  A0 0D        	ldy #13
002F76  3  91 68        	sta (z80_ix),y			; store new pointer low.
002F78  3  A5 67        	lda z80_h
002F7A  3  A0 0E        	ldy #14
002F7C  3  91 68        	sta (z80_ix),y			; store new pointer high.
002F7E  3               grav1:
002F7E  3  A5 61        	lda z80_a
002F80  3  D0 01        	bne :+				; any movement required?
002F82  3  60           	rts				; no, not this time.
002F83  3               :
002F83  3  A5 61        	lda z80_a
002F85  3  C9 80        	cmp #128			; is it up or down?
002F87  3  B0 15        	bcs gravu			; it's up.
002F89  3               gravd:
002F89  3  85 63        	sta z80_b			; set pixels to move.
002F8B  3               gravd0:
002F8B  3  20 6E 26     	jsr cangd			; can we go down?
002F8E  3  D0 28        	bne gravst			; can't move down, so stop.
002F90  3  A0 08        	ldy #8
002F92  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
002F94  3  18           	clc
002F95  3  69 01        	adc #1
002F97  3  91 68        	sta (z80_ix),y
002F99  3  C6 63        	dec z80_b
002F9B  3  D0 EE        	bne gravd0
002F9D  3  60           	rts
002F9E  3               gravu:
002F9E  3  49 FF        	eor #$ff			; flip the sign so it's positive.
002FA0  3  18           	clc
002FA1  3  69 01        	adc #1
002FA3  3  85 63        	sta z80_b			; set pixels to move.
002FA5  3               gravu0:
002FA5  3  20 39 26     	jsr cangu			; can we go up?
002FA8  3  D0 6E        	bne ifalls			; can't move up, go down next.
002FAA  3  A0 08        	ldy #8
002FAC  3  B1 68        	lda (z80_ix),y
002FAE  3  38           	sec
002FAF  3  E9 01        	sbc #1
002FB1  3  91 68        	sta (z80_ix),y			; adjust new x coord.
002FB3  3  C6 63        	dec z80_b
002FB5  3  D0 EE        	bne gravu0
002FB7  3  60           	rts
002FB8  3               gravst:
002FB8  3  A0 0D        	ldy #13
002FBA  3  B1 68        	lda (z80_ix),y			; jump pointer low.
002FBC  3  85 66        	sta z80_l
002FBE  3  A0 0E        	ldy #14
002FC0  3  B1 68        	lda (z80_ix),y			; jump pointer high.
002FC2  3  85 67        	sta z80_h
002FC4  3               
002FC4  3  A9 00        	lda #0				; null value in pointer.
002FC6  3  A0 0D        	ldy #13
002FC8  3  91 68        	sta (z80_ix),y			; store new pointer low.
002FCA  3  C8           	iny
002FCB  3  91 68        	sta (z80_ix),y			; store new pointer high.
002FCD  3               
002FCD  3  A0 00        	ldy #0
002FCF  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
002FD1  3  C9 63        	cmp #99				; is it the end marker?
002FD3  3               evftf:
002FD3  3  F0 01        	beq :+				; yes, fallen too far.
002FD5  3  60           	rts
002FD6  3               :
002FD6  3  4C 7A 33     	jmp evnt15			; EVENT FELLTOOFAR
002FD9  3               
002FD9  3               ;------------------------------------------------
002FD9  3               ; Initiate fall check.
002FD9  3               ;------------------------------------------------
002FD9  3               
002FD9  3               ifall:
002FD9  3  A0 0D        	ldy #13
002FDB  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
002FDD  3  85 66        	sta z80_l
002FDF  3  A0 0E        	ldy #14
002FE1  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
002FE3  3  85 67        	sta z80_h			; high byte in accumulator.
002FE5  3  05 66        	ora z80_l			; merge in low byte.
002FE7  3  F0 01        	beq :+
002FE9  3  60           	rts				; if either is set, we're already in the air.
002FEA  3               :
002FEA  3  A0 09        	ldy #9
002FEC  3  B1 68        	lda (z80_ix),y			; y coordinate.
002FEE  3  85 rr        	sta dispx
002FF0  3  A0 08        	ldy #8
002FF2  3  B1 68        	lda (z80_ix),y			; look x coordinate.
002FF4  3  18           	clc
002FF5  3               numsp7:
002FF5  3  69 10        	adc #SPR_HGT			; add 16 pixels.
002FF7  3  85 rr        	sta dispy			; set up test coordinates.
002FF9  3  20 E3 28     	jsr tstbl			; get map address.
002FFC  3  20 10 28     	jsr plchk			; block, platform check.
002FFF  3  F0 01        	beq :+
003001  3  60           	rts				; it's solid, don't fall.
003002  3               :
003002  3  E6 rr        	inc bufaddr			; look right one cell.
003004  3  20 10 28     	jsr plchk			; block, platform check.
003007  3  F0 01        	beq :+
003009  3  60           	rts				; it's solid, don't fall.
00300A  3               :
00300A  3  A5 rr        	lda dispx			; y coordinate.
00300C  3  29 07        	and #7				; position straddling block cells.
00300E  3  F0 08        	beq ifalls			; no more checks needed.
003010  3  E6 rr        	inc bufaddr			; look to third cell.
003012  3  20 10 28     	jsr plchk			; block, platform check.
003015  3  F0 01        	beq :+
003017  3  60           	rts				; it's solid, don't fall.
003018  3               :
003018  3               ifalls:
003018  3  A9 4A        	lda #<jtab			; jump table start.
00301A  3  85 66        	sta z80_l
00301C  3  A9 37        	lda #>jtab
00301E  3  85 67        	sta z80_h
003020  3               ifal0:
003020  3  E6 66        	inc z80_l			; point to next value.
003022  3  D0 02        	bne :+
003024  3  E6 67        	inc z80_h
003026  3               :
003026  3  A0 00        	ldy #0
003028  3  B1 66        	lda (z80_hl),y			; fetch value.
00302A  3  F0 F4        	beq ifal0			; no, get next value.
00302C  3  C9 63        	cmp #99				; reached end of table?
00302E  3  D0 01        	bne :+
003030  3  60           	rts				; yes, don't fall.
003031  3               :
003031  3  C9 80        	cmp #128			; is it going up?
003033  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
003035  3               
003035  3  A0 0D        	ldy #13
003037  3  A5 66        	lda z80_l
003039  3  91 68        	sta (z80_ix),y 			; set jump low.
00303B  3  A0 0E        	ldy #14
00303D  3  A5 67        	lda z80_h
00303F  3  91 68        	sta (z80_ix),y 			; set jump high.
003041  3  60           	rts
003042  3               
003042  3               
003042  3               ;----------------------------------------------------
003042  3               ; Get frame data for a particular sprite.
003042  3               ; Input:
003042  3               ;  a		= framenumer
003042  3               ; Output:
003042  3               ;  hl		= frame address
003042  3               ;
003042  3               ; global:	hl,frmptr
003042  3               ; local:	-
003042  3               ; calls:	-
003042  3               ;----------------------------------------------------
003042  3               
003042  3               gfrm:
003042  3  0A           	asl a	 		 	; multiple of 2.
003043  3  18           	clc
003044  3  6D 1A 20     	adc frmptr 			; frames used by game.
003047  3  85 66        	sta z80_l
003049  3  AD 1B 20     	lda frmptr+1
00304C  3  69 00        	adc #0
00304E  3  85 67        	sta z80_h 			; point to frame start.
003050  3  60           	rts
003051  3               
003051  3               ;----------------------------------------------------
003051  3               ; Find sprite list for current room.
003051  3               ;
003051  3               ; global:	hl
003051  3               ; local:	x,y
003051  3               ; calls:	-
003051  3               ;----------------------------------------------------
003051  3               
003051  3               sprlst:
003051  3  A9 1F        	lda #<nmedat 			; list of enemy sprites.
003053  3  85 66        	sta z80_l
003055  3  A9 34        	lda #>nmedat
003057  3  85 67        	sta z80_h
003059  3  A6 rr        	ldx scno 			; screen number.
00305B  3  D0 01        	bne sprls2 			; is it the first screen?
00305D  3  60           	rts 				; yes, don't need to search data.
00305E  3               sprls2:
00305E  3  A0 00        	ldy #0
003060  3               sprls1:
003060  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
003062  3  C9 FF        	cmp #255			; is it an end marker?
003064  3  F0 0E        	beq sprls0 			; yes, end of this room.
003066  3               
003066  3  18           	clc 				; point to next sprite in list.
003067  3  A5 66        	lda z80_l
003069  3  69 04        	adc #NMESIZ
00306B  3  85 66        	sta z80_l
00306D  3  90 02        	bcc :+
00306F  3  E6 67        	inc z80_h
003071  3               :
003071  3  4C 60 30     	jmp sprls1 			; continue until end of room.
003074  3               sprls0:
003074  3  E6 66        	inc z80_l 			; point to start of next screen.s
003076  3  D0 02        	bne :+
003078  3  E6 67        	inc z80_h
00307A  3               :
00307A  3  CA           	dex
00307B  3  D0 E3        	bne sprls1 			; continue until room found.
00307D  3  60           	rts
00307E  3               
00307E  3               
00307E  3               ;----------------------------------------------------
00307E  3               ; Clear all but a single player sprite.
00307E  3               ;
00307E  3               ; global:	-
00307E  3               ; local:	x,y,ix
00307E  3               ; calls:	-
00307E  3               ;----------------------------------------------------
00307E  3               
00307E  3               nspr:
00307E  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003080  3  85 rr        	sta sprcnt
003082  3  A9 20        	lda #<sprtab 			; sprite table.
003084  3  85 68        	sta z80_x
003086  3  A9 32        	lda #>sprtab
003088  3  85 69        	sta z80_i
00308A  3               nspr0:
00308A  3  A0 00        	ldy #0 				; fetch sprite type.
00308C  3  B1 68        	lda (z80_ix),y 			; is it a player?
00308E  3  F0 1A        	beq nspr1 			; yes, keep this one.
003090  3               
003090  3  A9 FF        	lda #255
003092  3  A0 00        	ldy #0 				; fetch sprite type.
003094  3  91 68        	sta (z80_ix),y 			; delete sprite.
003096  3  A0 05        	ldy #5
003098  3  91 68        	sta (z80_ix),y 			; remove next type.
00309A  3               
00309A  3  18           	clc	 			; next sprite.
00309B  3  A5 68        	lda z80_x
00309D  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00309F  3  85 68        	sta z80_x
0030A1  3  90 02        	bcc :+
0030A3  3  E6 69        	inc z80_i
0030A5  3               :
0030A5  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0030A7  3  D0 E1        	bne nspr0
0030A9  3  60           	rts
0030AA  3               nspr1:
0030AA  3  A9 FF        	lda #255
0030AC  3  A0 00        	ldy #0
0030AE  3  91 68        	sta (z80_ix),y 			; delete sprite.
0030B0  3               
0030B0  3  18           	clc	 			; point to next sprite.
0030B1  3  A5 68        	lda z80_x
0030B3  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0030B5  3  85 68        	sta z80_x
0030B7  3  90 02        	bcc :+
0030B9  3  E6 69        	inc z80_i
0030BB  3               :
0030BB  3  C6 rr        	dec sprcnt	 			; one less to do.
0030BD  3  D0 01        	bne nspr2
0030BF  3  60           	rts
0030C0  3               nspr2:
0030C0  3  A9 FF        	lda #255
0030C2  3  A0 00        	ldy #0
0030C4  3  91 68        	sta (z80_ix),y 			; delete sprite.
0030C6  3  A0 05        	ldy #5
0030C8  3  91 68        	sta (z80_ix),y 			; remove next type.
0030CA  3               
0030CA  3  18           	clc	 			; next sprite.
0030CB  3  A5 68        	lda z80_x
0030CD  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0030CF  3  85 68        	sta z80_x
0030D1  3  90 02        	bcc :+
0030D3  3  E6 69        	inc z80_i
0030D5  3               :
0030D5  3  C6 rr        	dec sprcnt	 			; one less space in table.
0030D7  3  D0 E7        	bne nspr2
0030D9  3  60           	rts
0030DA  3               
0030DA  3               ;----------------------------------------------------------
0030DA  3               ; Two initialisation routines.
0030DA  3               ; Initialise sprites - copy everything from list to table.
0030DA  3               ;
0030DA  3               ; global:	-
0030DA  3               ; local:	x,y,ix
0030DA  3               ; calls:	cpsp
0030DA  3               ;----------------------------------------------------------
0030DA  3               
0030DA  3               ispr:
0030DA  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0030DC  3  85 rr        	sta sprcnt
0030DE  3  A9 20        	lda #<sprtab			; sprite table.
0030E0  3  85 68        	sta z80_x
0030E2  3  A9 32        	lda #>sprtab
0030E4  3  85 69        	sta z80_i
0030E6  3               ispr2:
0030E6  3  A0 00        	ldy #0
0030E8  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0030EA  3  C9 FF        	cmp #255 			; is it an end marker?
0030EC  3  D0 01        	bne :+
0030EE  3  60           	rts 				; yes, no more to do.
0030EF  3               :
0030EF  3               ispr1:
0030EF  3  A0 00        	ldy #0
0030F1  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
0030F3  3  C9 FF        	cmp #255 			; is it enabled yet?
0030F5  3  D0 08        	bne ispr4			; yes, try another slot.
0030F7  3               
0030F7  3  A0 05        	ldy #5
0030F9  3  B1 68        	lda (z80_ix),y		 	; next type.
0030FB  3  C9 FF        	cmp #255 			; is it enabled yet?
0030FD  3  F0 10        	beq ispr3 			; no, process this one.
0030FF  3               ispr4:
0030FF  3  18           	clc 				; next sprite.
003100  3  A5 68        	lda z80_x
003102  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003104  3  85 68        	sta z80_x
003106  3  90 02        	bcc :+
003108  3  E6 69        	inc z80_i
00310A  3               :
00310A  3  C6 rr        	dec sprcnt
00310C  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
00310E  3  60           	rts  				; no more room in table.
00310F  3               ispr3:
00310F  3  20 62 31     	jsr cpsp			; initialise a sprite.
003112  3  C6 rr        	dec sprcnt			; one less space in the table.
003114  3  D0 D0        	bne ispr2
003116  3  60           	rts
003117  3               
003117  3               
003117  3               ;-----------------------------------------------------------------------
003117  3               ; Initialise sprites - but not player, we're keeping the old one.
003117  3               ;
003117  3               ; global:	-
003117  3               ; local:	x,y,ix
003117  3               ; calls:	cpsp
003117  3               ;-----------------------------------------------------------------------
003117  3               
003117  3               kspr:
003117  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
003119  3  A9 20        	lda #<sprtab 			; sprite table.
00311B  3  85 68        	sta z80_x
00311D  3  A9 32        	lda #>sprtab
00311F  3  85 69        	sta z80_i
003121  3               kspr2:
003121  3  A0 00        	ldy #0
003123  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003125  3  C9 FF        	cmp #255 			; is it an end marker?
003127  3  D0 01        	bne :+
003129  3  60           	rts 				; yes, no more to do.
00312A  3               :
00312A  3  C9 00        	cmp #0
00312C  3  D0 0E        	bne kspr1 			; no, add to table as normal.
00312E  3               
00312E  3  18           	clc 				; next sprite.
00312F  3  A5 66        	lda z80_l
003131  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
003133  3  85 66        	sta z80_l
003135  3  90 02        	bcc :+
003137  3  E6 67        	inc z80_h
003139  3               :
003139  3  4C 21 31     	jmp kspr2
00313C  3               kspr1:
00313C  3  A0 00        	ldy #0 				; fetch sprite type.
00313E  3  B1 68        	lda (z80_ix),y
003140  3  C9 FF        	cmp #255 			; is it enabled yet?
003142  3  D0 08        	bne kspr4 			; yes, try another slot.
003144  3               
003144  3  A0 05        	ldy #5 				; next type.
003146  3  B1 68        	lda (z80_ix),y
003148  3  C9 FF        	cmp #255 			; is it enabled yet?
00314A  3  F0 0F        	beq kspr3 			; no, process this one.
00314C  3               kspr4:
00314C  3  18           	clc 				; next sprite.
00314D  3  A5 68        	lda z80_x
00314F  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003151  3  85 68        	sta z80_x
003153  3  90 02        	bcc :+
003155  3  E6 69        	inc z80_i
003157  3               :
003157  3  CA           	dex	 			; repeat for remaining sprites.
003158  3  D0 E2        	bne kspr1
00315A  3  60           	rts  				; no more room in table.
00315B  3               kspr3:
00315B  3  20 62 31     	jsr cpsp 			; copy sprite to table.
00315E  3  CA           	dex	 			; one less space in the table.
00315F  3  D0 C0        	bne kspr2
003161  3  60           	rts
003162  3               
003162  3               ;----------------------------------------------
003162  3               ; Copy sprite from list to table.
003162  3               ;
003162  3               ; global:	hl,ix
003162  3               ; local:	y
003162  3               ; calls:	evnt09
003162  3               ;----------------------------------------------
003162  3               
003162  3               cpsp:
003162  3  A0 00        	ldy #0				; fetch byte from table.
003164  3  B1 66        	lda (z80_hl),y
003166  3  91 68        	sta (z80_ix),y			; set up type.
003168  3  A0 05        	ldy #PAM1ST
00316A  3  91 68        	sta (z80_ix),y 			; set up type.
00316C  3               
00316C  3  E6 66        	inc z80_l 			; move to next byte.
00316E  3  D0 02        	bne :+
003170  3  E6 67        	inc z80_h
003172  3               :
003172  3  A0 00        	ldy #0 				; fetch byte from table.
003174  3  B1 66        	lda (z80_hl),y
003176  3  A0 06        	ldy #6
003178  3  91 68        	sta (z80_ix),y			; set up image.
00317A  3               
00317A  3  E6 66        	inc z80_l 			; move to next byte.
00317C  3  D0 02        	bne :+
00317E  3  E6 67        	inc z80_h
003180  3               :
003180  3  A0 00        	ldy #0
003182  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
003184  3  A0 08        	ldy #8
003186  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003188  3               
003188  3  A9 C8        	lda #200 			; set initial coordinate off screen.
00318A  3  A0 03        	ldy #3
00318C  3  91 68        	sta (z80_ix),y
00318E  3               
00318E  3  E6 66        	inc z80_l 			; move to next byte.
003190  3  D0 02        	bne :+
003192  3  E6 67        	inc z80_h
003194  3               :
003194  3  A0 00        	ldy #0 				; fetch byte from table.
003196  3  B1 66        	lda (z80_hl),y
003198  3  A0 09        	ldy #9
00319A  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00319C  3               
00319C  3  E6 66        	inc z80_l 			; move to next byte.
00319E  3  D0 02        	bne :+
0031A0  3  E6 67        	inc z80_h
0031A2  3               :
0031A2  3  A9 00        	lda #0				; zeroes in accumulator.
0031A4  3  A0 07        	ldy #7 				; reset frame number.
0031A6  3  91 68        	sta (z80_ix),y
0031A8  3  A0 0A        	ldy #10 			; reset direction.
0031AA  3  91 68        	sta (z80_ix),y
0031AC  3  A0 0D        	ldy #13				; reset jump pointer low.
0031AE  3  91 68        	sta (z80_ix),y
0031B0  3  A0 0E        	ldy #14	 			; reset jump pointer high.
0031B2  3  91 68        	sta (z80_ix),y
0031B4  3               
0031B4  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
0031B6  3  A0 10        	ldy #16
0031B8  3  91 68        	sta (z80_ix),y
0031BA  3               evis0:
0031BA  3  A5 69        	lda z80_i
0031BC  3  48           	pha
0031BD  3  A5 68        	lda z80_x
0031BF  3  48           	pha
0031C0  3  A5 67        	lda z80_h
0031C2  3  48           	pha
0031C3  3  A5 66        	lda z80_l
0031C5  3  48           	pha
0031C6  3               
0031C6  3  20 13 33     	jsr evnt09 			; perform event.
0031C9  3               
0031C9  3  68           	pla
0031CA  3  85 66        	sta z80_l
0031CC  3  68           	pla
0031CD  3  85 67        	sta z80_h
0031CF  3  68           	pla
0031D0  3  85 68        	sta z80_x
0031D2  3  68           	pla
0031D3  3  85 69        	sta z80_i
0031D5  3               
0031D5  3  18           	clc
0031D6  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0031D8  3  69 11        	adc #TABSIZ		 	; next sprite.
0031DA  3  85 68        	sta z80_x
0031DC  3  90 02        	bcc :+
0031DE  3  E6 69        	inc z80_i
0031E0  3               :
0031E0  3  60           	rts
0031E1  3               
0031E1  3               
0031E1  3               ;-------------------------------------
0031E1  3               ; Clear the play area window.
0031E1  3               ;-------------------------------------
0031E1  3               
0031E1  3               clw:
0031E1  3  AD 26 20     	lda wintop			; get coordinates of window.
0031E4  3  85 rr        	sta dispy			; put into dispx for calculation.
0031E6  3  AD 27 20     	lda winlft
0031E9  3  85 rr        	sta dispx
0031EB  3               
0031EB  3  AD 28 20     	lda winhgt			; height of window.
0031EE  3  85 rr        	sta rrow			; copy to b register.
0031F0  3               clw3:
0031F0  3  AD 29 20     	lda winwid 			; width of window.
0031F3  3  85 rr        	sta rcol
0031F5  3               clw2:
0031F5  3  20 B5 24     	jsr gprad 			; get print address.
0031F8  3  A9 00        	lda #0				; zero byte to write.
0031FA  3  A2 07        	ldx #7				; pixel height of each cell.
0031FC  3               clw1:
0031FC  3  BC 3B 25     	ldy scrtab,x
0031FF  3  91 rr        	sta (scraddr),y 			; copy to screen.
003201  3  CA           	dex				; next screen row down.
003202  3  10 F8        	bpl clw1
003204  3               
003204  3  E6 rr        	inc dispx			; next column.
003206  3  C6 rr        	dec rcol			; one less to do.
003208  3  D0 EB        	bne clw2			; repeat for remaining columns.
00320A  3               
00320A  3  AD 27 20     	lda winlft			; get left edge.
00320D  3  85 rr        	sta dispx 			; reset x.
00320F  3  E6 rr        	inc dispy 			; next line down.
003211  3               
003211  3  C6 rr        	dec rrow
003213  3  D0 DB        	bne clw3			; repeat down the screen.
003215  3               
003215  3  AD 26 20     	lda wintop			; get coordinates of window.
003218  3  85 rr        	sta chary			; put into display position.
00321A  3  AD 27 20     	lda winlft
00321D  3  85 rr        	sta charx
00321F  3  60           	rts
003220  3               
003220  3               
003220  3               ;----------------------------------------------------------
003220  3               ; Effects code.
003220  3               ; Ticker routine is called 25 times per second.
003220  3               ;
003220  3               ; HL = txtscr = left text screen address
003220  3               ; DE = txtscr+txtwid-1 = right text screen address
003220  3               ; BC = txtpos = text scroller position
003220  3               ;
003220  3               ;----------------------------------------------------------
003220  3               
003220  3               .if sflag
003220  3               scrly:
003220  3               	rts
003220  3               	.word txtscr         	; get left screen address.
003220  3               	sta scr_l
003220  3               	lda txtscr+1
003220  3               	sta scr_l+1
003220  3               	sta scr_r+1
003220  3               
003220  3               	stx xtmp
003220  3               
003220  3               	clc         		; get right screen address.
003220  3               	lda scr_l
003220  3               	adc txtwid
003220  3               	sta scr_r
003220  3               	dec scr_r
003220  3               scrly1:
003220  3               	ldy txtwid		; set txtwide
003220  3               	dey
003220  3               	clc
003220  3               scrly0:
003220  3               	lda (scr_l),y		; scroll 1 line
003220  3               	rol a
003220  3               	sta (scr_l),y
003220  3               	dey
003220  3               	bpl scrly0
003220  3               
003220  3               	clc			; point to next line
003220  3               	lda scr_l
003220  3               	adc #32
003220  3               	sta scr_l
003220  3               	bcc scrly1		; repeat 8 times
003220  3               
003220  3               	lda txtpos 		; get text pointer.
003220  3               	sta scr_txt
003220  3               	lda txtpos+1
003220  3               	sta scr_txt+1
003220  3               
003220  3               	ldy #0
003220  3               	lda (scr_txt),y 		; find character we're displaying.
003220  3               	and #127 		; remove end marker bit if applicable.
003220  3               	cmp #13			; is it newline?
003220  3               	bne scrly5 		; no, it's okay.
003220  3               	lda #32			; convert to a space instead.
003220  3               scrly5:
003220  3               	sta fntaddr		; calculate char address
003220  3               	lda #0
003220  3               	sta fntaddr+1
003220  3               	asl fntaddr  		; multiply char by 8.
003220  3               	rol fntaddr+1
003220  3               	asl fntaddr
003220  3               	rol fntaddr+1
003220  3               	asl fntaddr
003220  3               	rol fntaddr+1
003220  3               	lda fntaddr
003220  3               	clc
003220  3               	adc #<(FONT-256)
003220  3               	sta scrly3+1		; that's the low byte.
003220  3               	lda fntaddr+1
003220  3               	adc #>(FONT-256)
003220  3               	sta scrly3+2		; add displacement.
003220  3               
003220  3               	ldx #0
003220  3               scrly3:
003220  3               	lda $3333,x		; get image of char line.
003220  3               	and txtbit
003220  3               	beq scrly2		; don't plot pixel
003220  3               	ldy scrline,x
003220  3               	lda (scr_r),y
003220  3               	clc
003220  3               	ora #1
003220  3               	sta (scr_r),y		; plot pixel
003220  3               scrly2:
003220  3               	inx			; next line of char.
003220  3               	cpx #8
003220  3               	bne scrly3
003220  3               
003220  3               	lsr txtbit		; bit of text to display.
003220  3               	bcs :+
003220  3               	rts
003220  3               :
003220  3               	ldy #0
003220  3               	lda (scr_txt),y 	; what was the character?
003220  3               	asl a	  		; end of message?
003220  3               	bcs scrly4
003220  3               	inc txtpos
003220  3               	bne :+
003220  3               	inc txtpos+1
003220  3               :
003220  3               	jmp scrly6 		; not yet - continue.
003220  3               scrly4:
003220  3               	lda txtini 		; start of scrolling message.
003220  3               	sta txtpos
003220  3               	lda txtini+1
003220  3               	sta txtpos+1
003220  3               scrly6:
003220  3               	lda #128
003220  3               	sta txtbit
003220  3               	ldx xtmp
003220  3               	rts
003220  3               
003220  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003220  3               
003220  3               ;-------------------------------------------------------
003220  3               ; Entry TICKER command
003220  3               ;
003220  3               ; Entry:
003220  3               ;  z80_b = message nr
003220  3               ;  z80_c = width
003220  3               ;-------------------------------------------------------
003220  3               
003220  3               iscrly:
003220  3               	jsr prescr 		; set up display position.
003220  3               
003220  3               	lda #<msgdat 		; text messages.
003220  3               	sta z80_l
003220  3               	lda #>msgdat
003220  3               	sta z80_h
003220  3               
003220  3               	lda z80_c 		; width.
003220  3               	sec
003220  3               	sbc #1			; subtract one.
003220  3               	cmp #32 		; is it between 1 and 32?
003220  3               	bcc :+
003220  3               	lda #$60
003220  3               	jmp iscrl0		; no, disable messages.
003220  3               :
003220  3               	ldx z80_b		; message number.
003220  3               	jsr getwrd 		; find message start.
003220  3               
003220  3               	lda z80_l		; set initial text position.
003220  3               	sta txtini
003220  3               	lda z80_h
003220  3               	sta txtini+1
003220  3               
003220  3               	lda #$ad		; code for lda adrr
003220  3               iscrl0:
003220  3               	sta scrly		; enable/disable scrolling routine.
003220  3               
003220  3               	jsr prescr 		; set up display position.
003220  3               	jsr gprad 		; get print address.
003220  3               
003220  3               	lda scraddr 		; set text screen address.
003220  3               	sta txtscr
003220  3               	lda scraddr+1
003220  3               	sta txtscr+1
003220  3               
003220  3               	lda z80_c		; width.
003220  3               	sta txtwid		; set width in working storage.
003220  3               
003220  3               	lda #128 		; start with leftmost bit.
003220  3               	sta txtbit
003220  3               
003220  3               	jmp scrly4
003220  3               .endif
003220  3               
003220  3               ;------------------------------------------------------------------
003220  3               ; Dig routine, conditional assembly depending on dflag
003220  3               ;------------------------------------------------------------------
003220  3               .if dflag
003220  3               dig:
003220  3               	and #3
003220  3               	beq digr		; dig right
003220  3               	cmp #1
003220  3               	beq digl		; dig left
003220  3               	cmp #2
003220  3               	beq digd		; dig down
003220  3               
003220  3               ; Dig up.
003220  3               
003220  3               digu:				; dig up
003220  3               	ldy #8
003220  3               	lda (z80_ix),y
003220  3               	sec
003220  3               	sbc #2
003220  3               	sta dispy		; set y
003220  3               
003220  3               	iny
003220  3               	lda (z80_ix),y
003220  3               	sta dispx		; set x
003220  3               	jmp digv
003220  3               
003220  3               ; Dig down.
003220  3               
003220  3               digd:
003220  3               	ldy #9
003220  3               	lda (z80_ix),y
003220  3               	sta dispx		; set y
003220  3               
003220  3               	dey
003220  3               	clc
003220  3               	lda (z80_ix),y
003220  3               	adc #16
003220  3               	sta dispy		; set y
003220  3               	jmp digv
003220  3               
003220  3               ; Dig left.
003220  3               
003220  3               digl:
003220  3               	ldy #8
003220  3               	lda (z80_ix),y
003220  3               	sta dispy		; set y
003220  3               
003220  3               	iny
003220  3               	lda (z80_ix),y
003220  3               	sec
003220  3               	sbc #2			; x=x-2
003220  3               	sta dispx		; set x
003220  3               	jmp digh
003220  3               
003220  3               ; Dig right.
003220  3               
003220  3               digr:
003220  3               	ldy #8
003220  3               	lda (z80_ix),y
003220  3               	sta dispy		; set y
003220  3               
003220  3               	iny
003220  3               	lda (z80_ix),y
003220  3               	clc
003220  3               	adc #16
003220  3               	sta dispx		; set x+16
003220  3               	jmp digh
003220  3               
003220  3               ; Vertical digging
003220  3               
003220  3               digv:
003220  3               	jsr tstbl		; check blocktype in MAP
003220  3               	jsr fdchk		; test if FODDER
003220  3               
003220  3               	clc
003220  3               	lda dispx		; look 1 cell down
003220  3               	adc #8
003220  3               	sta dispx
003220  3               	jsr tstbl		; check blocktype in MAP
003220  3               	jsr fdchk
003220  3               	lda dispx
003220  3               	and #7
003220  3               	bne :+
003220  3               	rts
003220  3               :
003220  3               	clc
003220  3               	lda dispx		; look 1 cell down
003220  3               	adc #8
003220  3               	sta dispx
003220  3               	jsr tstbl		; check blocktype in MAP
003220  3               	jmp fdchk
003220  3               
003220  3               ; Horizontal digging
003220  3               
003220  3               digh:
003220  3               	jsr tstbl		; check blocktype in MAP
003220  3               	jsr fdchk		; test if FODDER
003220  3               
003220  3               	clc
003220  3               	lda dispy		; look 1 cell down
003220  3               	adc #8
003220  3               	sta dispy
003220  3               	jsr tstbl		; check blocktype in MAP
003220  3               	jsr fdchk
003220  3               	lda dispy
003220  3               	and #7
003220  3               	bne :+
003220  3               	rts
003220  3               :
003220  3               	clc
003220  3               	lda dispy		; look 1 cell down
003220  3               	adc #8
003220  3               	sta dispy
003220  3               	jsr tstbl		; check blocktype in MAP
003220  3               	jmp fdchk
003220  3               
003220  3               digcnt:	.byte 0
003220  3               
003220  3               .endif
003220  3               
003220  3               ;------------------------------------------------------------------
003220  3               ; Sprite table
003220  3               ;------------------------------------------------------------------
003220  3               
003220  3               
003220  3               ; ix+0  = type.
003220  3               ; ix+1  = sprite image number.
003220  3               ; ix+2  = frame.
003220  3               ; ix+3  = y coord.
003220  3               ; ix+4  = x coord.
003220  3               
003220  3               ; ix+5  = new type.
003220  3               ; ix+6  = new image number.
003220  3               ; ix+7  = new frame.
003220  3               ; ix+8  = new y coord.
003220  3               ; ix+9  = new x coord.
003220  3               
003220  3               ; ix+10 = direction.
003220  3               ; ix+11 = parameter 1.
003220  3               ; ix+12 = parameter 2.
003220  3               ; ix+13 = jump pointer low.
003220  3               ; ix+14 = jump pointer high.
003220  3               ; ix+15 = data pointer low.
003220  3               ; ix+16 = data pointer high.
003220  3               
003220  3               ; block NUMSPR * TABSIZ,255
003220  3               
003220  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
003224  3  FF FF FF FF  
003228  3  FF FF FF FF  
0032EC  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0032F0  3  FF FF FF 00  
0032F4  3  C0 78 00 00  
0032FD  3  07           roomtb:	.byte 7                      ; start room map offset.
0032FE  3               
0032FE  3               ; User routine.  Put your own code in here to be called with USER instruction.
0032FE  3               ; if USER has an argument it will be passed in the accumulator.
0032FE  3               
0032FE  3               user:
0032FE  3               	.include "user.inc"
0032FE  4  60           	rts
0032FF  4               
0032FF  3               
0032FF  3               ; Everything below here will be generated by the editors.
0032FF  3               
0032FF  3  60                   rts
003300  3               WINDOWTOP = 1
003300  3               WINDOWLFT = 1
003300  3               WINDOWHGT = 22
003300  3               WINDOWWID = 30 ;a
003300  3               MAPWID = 3
003300  3  FF FF FF             .byte 255,255,255
003303  3               mapdat:
003303  3  FF 00 FF             .byte 255,0,255
003306  3  FF FF FF             .byte 255,255,255
003309  3  01           stmap:  .byte 1
00330A  3               
00330A  3               evnt00:
00330A  3  60                   rts
00330B  3               evnt01:
00330B  3  60                   rts
00330C  3               evnt02:
00330C  3  60                   rts
00330D  3               evnt03:
00330D  3  60                   rts
00330E  3               evnt04:
00330E  3  60                   rts
00330F  3               evnt05:
00330F  3  60                   rts
003310  3               evnt06:
003310  3  60                   rts
003311  3               evnt07:
003311  3  60                   rts
003312  3               evnt08:
003312  3  60                   rts
003313  3               evnt09:
003313  3  60                   rts
003314  3               evnt10:
003314  3  60                   rts
003315  3               evnt11:
003315  3  60                   rts
003316  3               evnt12:
003316  3  A9 00                lda #0
003318  3  85 rr                sta varc
00331A  3  A9 00                lda #0
00331C  3  85 rr                sta varp
00331E  3  A9 10                lda #16 	; REPEAT
003320  3  85 rr                sta loopa
003322  3  A9 10        m00029: lda #16 	; REPEAT
003324  3  85 rr                sta loopb
003326  3  A5 rr        m00040: lda varp 	; PAPER
003328  3  20 8B 38             jsr setbgcol
00332B  3  A5 rr                lda varc
00332D  3  85 rr                sta chary
00332F  3  A5 rr                lda varp
003331  3  85 rr                sta vard
003333  3  A5 rr                lda vard
003335  3  0A                   asl a
003336  3  85 rr                sta vard
003338  3  A5 rr                lda vard
00333A  3  85 rr                sta charx
00333C  3  A9 00                lda #0		; PRINT
00333E  3  20 83 29             jsr dmsg
003341  3  A5 rr                lda varc
003343  3  18                   clc
003344  3  69 01                adc #1
003346  3  85 rr                sta varc
003348  3  20 C7 37             jsr prskey	; WAITKEY
00334B  3  C6 rr                dec loopb	; ENDREPEAT
00334D  3  F0 03                beq :+
00334F  3  4C 26 33             jmp m00040
003352  3               :
003352  3  A9 00                lda #0
003354  3  85 rr                sta varc
003356  3  A5 rr                lda varp
003358  3  18                   clc
003359  3  69 01                adc #1
00335B  3  85 rr                sta varp
00335D  3  C6 rr                dec loopa	; ENDREPEAT
00335F  3  F0 03                beq :+
003361  3  4C 22 33             jmp m00029
003364  3               :
003364  3  20 C7 37             jsr prskey	; WAITKEY
003367  3  A9 00                lda #0		; AT
003369  3  85 rr                sta chary
00336B  3  A9 00                lda #0
00336D  3  85 rr                sta charx
00336F  3  A9 01                lda #1		; PRINT
003371  3  20 83 29             jsr dmsg
003374  3  20 C7 37             jsr prskey	; WAITKEY
003377  3  60                   rts
003378  3               evnt13:
003378  3  60                   rts
003379  3               evnt14:
003379  3  60                   rts
00337A  3               evnt15:
00337A  3  60                   rts
00337B  3               evnt16:
00337B  3  60                   rts
00337C  3               evnt17:
00337C  3  60                   rts
00337D  3               evnt18:
00337D  3  60                   rts
00337E  3               evnt19:
00337E  3  60                   rts
00337F  3               evnt20:
00337F  3  60                   rts
003380  3  60           ptcusr: rts
003381  3               msgdat:
003381  3  58 F8                .byte "X",248
003383  3  4F CB                .byte "O",203
003385  3               nummsg:
003385  3  02                   .byte 2
003386  3               chgfx:
003386  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00338A  3  00 00 00 00  
00338E  3               bprop:
00338E  3  00                   .byte 0
00338F  3               sprgfx:
00338F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003393  3  00 00 00 00  
003397  3  00 00 00 00  
0033AF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0033B3  3  00 00 00 00  
0033B7  3  00 00 00 00  
0033CF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0033D3  3  00 00 00 00  
0033D7  3  00 00 00 00  
0033EF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0033F3  3  00 00 00 00  
0033F7  3  00 00 00 00  
00340F  3               frmlst:
00340F  3  00 01 01 00          .byte 0,1,1,0
003413  3               scdat:
003413  3  09 00                .word 9
003415  3  FF 00 00 FF          .byte 255,0,0,255,0,0,255,0,148
003419  3  00 00 FF 00  
00341D  3  94           
00341E  3               numsc:
00341E  3  01                   .byte 1
00341F  3               nmedat:
00341F  3  42 00 58 80          .byte 66,0,88,128,255
003423  3  FF           
003424  3               NUMOBJ = 1
003424  3               objdta:
003424  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,32,0,160,32
003428  3  00 00 00 00  
00342C  3  00 00 00 00  
00344A  3               font:
00344A  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00344E  3  00 00 00 00  
003452  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
003456  3  FF FF FF FF  
00345A  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
00345E  3  00 00 00 00  
003462  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
003466  3  6C FE 6C 00  
00346A  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
00346E  3  7E 1E 7E 18  
003472  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
003476  3  30 6E CE 00  
00347A  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
00347E  3  7E CC 7E 00  
003482  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
003486  3  00 00 00 00  
00348A  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
00348E  3  18 18 0C 00  
003492  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
003496  3  30 30 60 00  
00349A  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
00349E  3  7E 18 3C 00  
0034A2  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0034A6  3  7E 18 18 00  
0034AA  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0034AE  3  00 18 18 30  
0034B2  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0034B6  3  7E 00 00 00  
0034BA  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0034BE  3  00 38 38 00  
0034C2  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0034C6  3  18 30 60 00  
0034CA  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0034CE  3  F6 E6 7C 00  
0034D2  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
0034D6  3  18 18 7E 00  
0034DA  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
0034DE  3  7C C0 FE 00  
0034E2  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
0034E6  3  06 C6 7C 00  
0034EA  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
0034EE  3  D8 FE 18 00  
0034F2  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
0034F6  3  06 C6 7C 00  
0034FA  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
0034FE  3  C6 C6 7C 00  
003502  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
003506  3  18 30 30 00  
00350A  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
00350E  3  C6 C6 7C 00  
003512  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
003516  3  7E 06 7C 00  
00351A  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
00351E  3  00 00 30 00  
003522  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
003526  3  00 30 30 60  
00352A  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
00352E  3  30 18 0C 00  
003532  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
003536  3  00 7E 00 00  
00353A  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
00353E  3  0C 18 30 00  
003542  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
003546  3  18 00 18 00  
00354A  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
00354E  3  FE C0 7C 00  
003552  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
003556  3  FE C6 C6 00  
00355A  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
00355E  3  C6 C6 FC 00  
003562  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
003566  3  C0 C6 7C 00  
00356A  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
00356E  3  C6 CC F8 00  
003572  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
003576  3  C0 C0 FE 00  
00357A  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
00357E  3  C0 C0 C0 00  
003582  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
003586  3  DE C6 7C 00  
00358A  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
00358E  3  C6 C6 C6 00  
003592  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
003596  3  18 18 7E 00  
00359A  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
00359E  3  C6 C6 7C 00  
0035A2  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
0035A6  3  D8 CC C6 00  
0035AA  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0035AE  3  C0 C0 FE 00  
0035B2  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0035B6  3  C6 C6 C6 00  
0035BA  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
0035BE  3  DE CE C6 00  
0035C2  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
0035C6  3  C6 C6 7C 00  
0035CA  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
0035CE  3  FC C0 C0 00  
0035D2  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
0035D6  3  F6 DE 7C 00  
0035DA  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
0035DE  3  FC CC C6 00  
0035E2  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
0035E6  3  06 C6 7C 00  
0035EA  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
0035EE  3  30 30 30 00  
0035F2  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
0035F6  3  C6 C6 7C 00  
0035FA  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
0035FE  3  C6 6C 38 00  
003602  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
003606  3  C6 FE 6C 00  
00360A  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
00360E  3  38 6C C6 00  
003612  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
003616  3  30 30 30 00  
00361A  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
00361E  3  30 60 FE 00  
003622  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
003626  3  18 18 1E 00  
00362A  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
00362E  3  30 18 0C 00  
003632  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
003636  3  30 30 F0 00  
00363A  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
00363E  3  30 30 30 00  
003642  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003646  3  00 00 00 FF  
00364A  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
00364E  3  60 60 FE 00  
003652  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
003656  3  7C CC 7C 00  
00365A  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
00365E  3  66 66 7C 00  
003662  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
003666  3  60 60 3C 00  
00366A  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
00366E  3  CC CC 7C 00  
003672  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
003676  3  F8 C0 7C 00  
00367A  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
00367E  3  30 30 30 00  
003682  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
003686  3  CC 7C 0C 78  
00368A  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
00368E  3  CC CC CC 00  
003692  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
003696  3  30 30 78 00  
00369A  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
00369E  3  0C 0C 6C 38  
0036A2  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0036A6  3  70 78 6C 00  
0036AA  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0036AE  3  30 30 1C 00  
0036B2  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0036B6  3  FC FC FC 00  
0036BA  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
0036BE  3  CC CC CC 00  
0036C2  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
0036C6  3  CC CC 78 00  
0036CA  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0036CE  3  CC F8 C0 C0  
0036D2  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
0036D6  3  CC 7C 0C 0E  
0036DA  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
0036DE  3  60 60 60 00  
0036E2  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
0036E6  3  78 0C F8 00  
0036EA  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
0036EE  3  30 30 1C 00  
0036F2  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
0036F6  3  CC CC 78 00  
0036FA  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
0036FE  3  78 78 30 00  
003702  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
003706  3  FC FC 78 00  
00370A  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00370E  3  30 78 CC 00  
003712  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
003716  3  CC 7C 0C 78  
00371A  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
00371E  3  30 60 FC 00  
003722  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
003726  3  18 18 1E 00  
00372A  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
00372E  3  18 18 18 00  
003732  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
003736  3  30 30 F0 00  
00373A  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
00373E  3  00 00 00 00  
003742  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
003746  3  E3 BB C6 7C  
00374A  3               jtab:
00374A  3  63                   .byte 99
00374B  3  0A 08 3F 2F  keys:   .byte 10,8,63,47,33,35,37,31,30,26,24
00374F  3  21 23 25 1F  
003753  3  1E 1A 18     
003756  3               
003756  2               
003756  1               	.include "lib.inc"
003756  2               ;----------------------------------------------------------------------
003756  2               ; Atari 800 Platform Specific functions
003756  2               ;----------------------------------------------------------------------
003756  2               
003756  2               ;============================================================
003756  2               ; PLATFORM VARIABLES
003756  2               ;============================================================
003756  2               ;
003756  2               ; Memory map:
003756  2               ;
003756  2               ;	$0000-$01ff	 0.50kB	CPU WS
003756  2               ;	$0200-$05ff	 1,00kB	IOCB/Printer/Cassette RAM
003756  2               ;	$0600-$06ff	 0,25kB	User RAM
003756  2               ;	$0700-$1fff	 6,25kB
003756  2               ;	$2000-$ffff	56,00kB	User RAM
003756  2               ;
003756  2               ; Keyboard matrix:
003756  2               ;
003756  2               ;		0	1	2	3	4	5	6	7
003756  2               ;       ----------------------------------------------------------------------
003756  2               ;	$00:	L	J	;:	F1	F2	K	+\	*^
003756  2               ;	$08:	O		P	U	Ret	I	-_	=|
003756  2               ;	$10:	V	Help	C	F3	F4	B	X	Z
003756  2               ;	$18:	4$		3#	6&	Esc	5%	2"	1!
003756  2               ;	$20:	,[	Space	.]	N		M	/?	Invert
003756  2               ;	$28:	R		E	Y	Tab	T	W	Q
003756  2               ;	$30:	9(		0)	7'	Bksp	8@	<	>
003756  2               ;	$38:	F	H	D		Caps	G	S	A
003756  2               ;
003756  2               ; Atari 800 constants:
003756  2               
003756  2               	LMS		= 64
003756  2               	HS		= 16
003756  2               	VS		= 32
003756  2               	MODE2		= 2
003756  2               	MODE3		= 3
003756  2               	MODE4		= 4
003756  2               	MODE5		= 5
003756  2               	MODEB		= $0B
003756  2               	MODED		= $0D
003756  2               	MODEE		= $0E
003756  2               	MODEF		= $0F
003756  2               
003756  2               	BLANK1		= $00
003756  2               	BLANK2		= $10
003756  2               	BLANK3		= $20
003756  2               	BLANK4		= $30
003756  2               	BLANK5		= $40
003756  2               	BLANK6		= $50
003756  2               	BLANK7		= $60
003756  2               	BLANK8		= $70
003756  2               
003756  2               	DLISTENDJUMP	= $41
003756  2               
003756  2               ; Atari 800 Addresses
003756  2               
003756  2               	HPOSP0	= $D000		; HORIZONTAL POSITION P0
003756  2               	HPOSP1	= $D001		; HORIZONTAL POSITION P1
003756  2               	HPOSP2	= $D002		; HORIZONTAL POSITION P2
003756  2               	HPOSP3	= $D003		; HORIZONTAL POSITION P3
003756  2               	HPOSM0	= $D004		; HORIZONTAL POSITION M0
003756  2               	HPOSM1	= $D005		; HORIZONTAL POSITION M1
003756  2               	HPOSM2	= $D006		; HORIZONTAL POSITION M2
003756  2               	HPOSM3	= $D007		; HORIZONTAL POSITION M3
003756  2               
003756  2               	SIZEP0	= $D008		; SIZE P0
003756  2               	SIZEP1	= $D009		; SIZE P0
003756  2               	SIZEP2	= $D00A		; SIZE P0
003756  2               	SIZEP3	= $D00B		; SIZE P0
003756  2               	SIZEM	= $D00C		; SIZE M
003756  2               
003756  2               	GRAFP0	= $D00D
003756  2               	GRAFP1	= $D00E
003756  2               	GRAFP2	= $D00F
003756  2               	GRAFP3	= $D010
003756  2               	GRAFM	= $D011
003756  2               
003756  2               	TRIG0	= $D010
003756  2               	TRIG1	= $D011
003756  2               
003756  2               	COLPM0	= $D012		; COLOR P0/M0
003756  2               	COLPM1	= $D013		; COLOR P1/M1
003756  2               	COLPM2	= $D014		; COLOR P2/M2
003756  2               	COLPM3	= $D015		; COLOR P3/M3
003756  2               
003756  2               	COLPF0	= $D016
003756  2               	COLPF1	= $D017
003756  2               	COLPF2	= $D018
003756  2               	COLPF3	= $D019
003756  2               	COLBK	= $D01A
003756  2               
003756  2               	KBCODE	= $D209
003756  2               	RANDOM	= $D20A
003756  2               	IRQEN	= $D20E
003756  2               	IRQST	= $D20E
003756  2               	SKSTAT	= $D20F
003756  2               
003756  2               	STICK	= $D300
003756  2               	PORTB	= $D301
003756  2               	PBCTL	= $D303
003756  2               
003756  2               	DMACTL	= $D400
003756  2               	DLISTL	= $D402
003756  2               	DLISTH	= $D403
003756  2               	WSYNC	= $D40A
003756  2               	VCOUNT	= $D40B
003756  2               	NMIEN	= $D40E
003756  2               	NMIST	= $D40F
003756  2               	NMIRES	= $D40F
003756  2               
003756  2               	NMI	= $FFFA
003756  2               	RESET	= $FFFC
003756  2               	IRQ	= $FFFE
003756  2               
003756  2               ;----------------------------------------------------------------------
003756  2               ; Atari 800 hardware fns
003756  2               ;----------------------------------------------------------------------
003756  2               
003756  2               init:
003756  2               
003756  2               ; Disable interrupts
003756  2               
003756  2  78           	sei
003757  2  A9 00        	lda #0
003759  2  8D 0E D2     	sta IRQEN		; Disable IRQ
00375C  2  8D 0E D4     	sta NMIEN		; Disable NMI
00375F  2               
00375F  2               ; Switch BASIC + OS ROMS off
00375F  2               
00375F  2  AD 03 D3     	lda PBCTL
003762  2  09 02        	ora #%00000010
003764  2  8D 03 D3     	sta PBCTL
003767  2  AD 01 D3     	lda PORTB
00376A  2  29 7C        	and #%01111100
00376C  2  09 82        	ora #%10000010
00376E  2  8D 01 D3     	sta PORTB
003771  2               
003771  2               ; Setup new NMI handler
003771  2               
003771  2  A9 97        	lda #<nmi_handler
003773  2  8D FA FF     	sta NMI
003776  2  A9 37        	lda #>nmi_handler
003778  2  8D FB FF     	sta NMI+1
00377B  2  A9 C0        	lda #%11000000
00377D  2  8D 0E D4     	sta NMIEN
003780  2               
003780  2               ; Init video registers
003780  2               
003780  2  A9 00        	lda #<BITMAP_DLIST
003782  2  8D 02 D4     	sta DLISTL
003785  2  A9 39        	lda #>BITMAP_DLIST
003787  2  8D 03 D4     	sta DLISTH
00378A  2               
00378A  2               ; Screenwidth 32 bytes
00378A  2               
00378A  2  A9 31        	lda #%00110001
00378C  2  8D 00 D4     	sta DMACTL
00378F  2               
00378F  2  20 AC 20     	jsr cls
003792  2               
003792  2  60           	rts
003793  2               
003793  2               ; NMI interrupt handler
003793  2               
003793  2  00 00        frame_counter:	.byte 0,0
003795  2  00           frames_passed:	.byte 0
003796  2  00           frames_delay:	.byte 0
003797  2               
003797  2               nmi_handler:
003797  2  2C 0F D4     	bit NMIST
00379A  2  30 2A        	bmi dli_handler
00379C  2  10 0D        	bpl nmi_not_dli
00379E  2               nmi_not_vbi:
00379E  2  A9 20        	lda #%00100000
0037A0  2  2C 0F D4     	bit NMIST
0037A3  2  D0 04        	bne nmi_not_reset
0037A5  2  8D 0F D4     	sta NMIRES
0037A8  2  40           	rti
0037A9  2               nmi_not_reset:
0037A9  2  68           	pla
0037AA  2  40           	rti
0037AB  2               nmi_not_dli:
0037AB  2  48           	pha
0037AC  2  50 F0        	bvc nmi_not_vbi
0037AE  2  8A           	txa
0037AF  2  48           	pha
0037B0  2  98           	tya
0037B1  2  48           	pha
0037B2  2               
0037B2  2               ; Used for syncing to 25 Hz
0037B2  2               
0037B2  2  EE 95 37     	inc frames_passed
0037B5  2               
0037B5  2  EE 93 37     	inc frame_counter
0037B8  2  D0 03        	bne skip_inc_frame_counter
0037BA  2  EE 94 37     	inc frame_counter+1
0037BD  2               skip_inc_frame_counter:
0037BD  2               
0037BD  2               ; Adjust delay counter
0037BD  2               
0037BD  2  CE 96 37     	dec frames_delay
0037C0  2               
0037C0  2               ; Restore registers
0037C0  2               
0037C0  2  68           	pla
0037C1  2  A8           	tay
0037C2  2  68           	pla
0037C3  2  AA           	tax
0037C4  2  68           	pla
0037C5  2  40           	rti
0037C6  2               
0037C6  2               dli_handler:
0037C6  2  40           	rti
0037C7  2               
0037C7  2               ;========================================================
0037C7  2               ; KEY AND JOYSTICK ROUTINES
0037C7  2               ;--------------------------------------------------------
0037C7  2               ; Keys
0037C7  2               ;
0037C7  2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
0037C7  2               ;             ||||||||
0037C7  2               ;             |||||||+> Right    KEY 0  - X
0037C7  2               ;             ||||||+-> Left     KEY 1  - Z
0037C7  2               ;             |||||+--> Down     KEY 2  - .
0037C7  2               ;             ||||+---> Up       KEY 3  - ;
0037C7  2               ;             |||+----> Fire1    KEY 4  - SPC
0037C7  2               ;             ||+-----> Fire2    KEY 5  - Q
0037C7  2               ;             |+------> Fire3    KEY 6  - P
0037C7  2               ;             +-------> Not used
0037C7  2               ;
0037C7  2               ;                       Option1  KEY 7  - 1
0037C7  2               ;                       Option2  KEY 8  - 2
0037C7  2               ;                       Option3  KEY 9  - 3
0037C7  2               ;                       Option4  KEY 10 - 4
0037C7  2               ;--------------------------------------------------------
0037C7  2               ;----------------------------------------------------
0037C7  2               ; PRSKEY
0037C7  2               ; Wait for keypress.
0037C7  2               ;----------------------------------------------------
0037C7  2               
0037C7  2               prskey:
0037C7  2  AD 0F D2     	lda SKSTAT		; Check keypress
0037CA  2  29 7F        	and #127
0037CC  2  C9 7F        	cmp #127
0037CE  2  F0 03        	beq :+
0037D0  2  4C DC 37     	jmp prsend
0037D3  2               :
0037D3  2  20 5D 29     	jsr joykey		; Check joystick move
0037D6  2  29 7F        	and #127
0037D8  2  C9 7F        	cmp #127
0037DA  2  F0 EB        	beq prskey
0037DC  2               prsend:
0037DC  2  AD 0F D2     	lda SKSTAT		; Check release
0037DF  2  29 7F        	and #127
0037E1  2  C9 7F        	cmp #127
0037E3  2  D0 F7        	bne prsend
0037E5  2  60           	rts
0037E6  2               
0037E6  2               ;--------------------------------------------------------
0037E6  2               ; KTEST
0037E6  2               ; Check if key in A is pressed,
0037E6  2               ;  carry clr = key pressed
0037E6  2               ;  carry set = key not pressed
0037E6  2               ;--------------------------------------------------------
0037E6  2               
0037E6  2               ktest:
0037E6  2  85 rr        	sta tmp
0037E8  2  AD 0F D2     	lda SKSTAT		; Check keypress
0037EB  2  29 04        	and #4
0037ED  2  D0 07        	bne notpressed
0037EF  2  A5 rr        	lda tmp
0037F1  2  CD 09 D2     	cmp KBCODE
0037F4  2  F0 02        	beq pressed
0037F6  2               notpressed:
0037F6  2  38           	sec
0037F7  2  60           	rts
0037F8  2               pressed:
0037F8  2  18           	clc			; key pressed
0037F9  2  60           	rts
0037FA  2               
0037FA  2               ;---------------------------------------------------------------
0037FA  2               ; KGET
0037FA  2               ; Return keycode when a key is pressed and released
0037FA  2               ;---------------------------------------------------------------
0037FA  2               
0037FA  2               kget:
0037FA  2  AD 0F D2     	lda SKSTAT		; Check keypress
0037FD  2  29 04        	and #4
0037FF  2  D0 F9        	bne kget
003801  2  AD 09 D2     	lda KBCODE		; If pressed, get keycode
003804  2  48           	pha			; Save keycode pressed
003805  2               kget2:
003805  2  AD 0F D2     	lda SKSTAT		; Check keypress
003808  2  29 04        	and #4
00380A  2  F0 F9        	beq kget2
00380C  2  68           	pla
00380D  2  60           	rts
00380E  2               
00380E  2               ;-------------------------------------------------------
00380E  2               ; Joystick routines.
00380E  2               ;
00380E  2               ; contrl = 1, Joystick1
00380E  2               ;          2, Joystick2
00380E  2               ;-------------------------------------------------------
00380E  2               
00380E  2               ; Iitialize joysticks
00380E  2               
00380E  2               joyinit:
00380E  2  60           	rts
00380F  2               
00380F  2               ; Joystick1 controls.
00380F  2               
00380F  2               joy1:
00380F  2  A9 00        	lda #0		 	; zero reading.
003811  2  85 rr        	sta joyval
003813  2               
003813  2  AD 51 37     	lda keys+6		; Check Fire3
003816  2  20 E6 37     	jsr ktest
003819  2  26 rr        	rol joyval
00381B  2  AD 50 37     	lda keys+5		; Check Fire2
00381E  2  20 E6 37     	jsr ktest
003821  2  26 rr        	rol joyval
003823  2  AD 10 D0     	lda TRIG0		; Check Fire
003826  2  4A           	lsr
003827  2  26 rr        	rol joyval
003829  2               
003829  2  AD 00 D3     	lda STICK
00382C  2  85 rr        	sta tmp
00382E  2  46 rr        	lsr tmp			; Check up
003830  2  26 rr        	rol joyval
003832  2  46 rr        	lsr tmp			; Check dwon
003834  2  26 rr        	rol joyval
003836  2  46 rr        	lsr tmp			; Check left
003838  2  26 rr        	rol joyval
00383A  2  46 rr        	lsr tmp			; Check right
00383C  2  26 rr        	rol joyval
00383E  2               
00383E  2  60           	rts
00383F  2               
00383F  2               ; Joystick2 controls.
00383F  2               
00383F  2               joy2:
00383F  2  A9 00        	lda #0		 	; zero reading.
003841  2  85 rr        	sta joyval
003843  2               
003843  2  AD 51 37     	lda keys+6		; Check Fire3
003846  2  20 E6 37     	jsr ktest
003849  2  26 rr        	rol joyval
00384B  2  AD 50 37     	lda keys+5		; Check Fire2
00384E  2  20 E6 37     	jsr ktest
003851  2  26 rr        	rol joyval
003853  2  AD 11 D0     	lda TRIG1		; Check Fire
003856  2  4A           	lsr
003857  2  26 rr        	rol joyval
003859  2               
003859  2  AD 00 D3     	lda STICK
00385C  2  4A           	lsr a
00385D  2  4A           	lsr a
00385E  2  4A           	lsr a
00385F  2  4A           	lsr a
003860  2  85 rr        	sta tmp
003862  2  46 rr        	lsr tmp			; Check up
003864  2  26 rr        	rol joyval
003866  2  46 rr        	lsr tmp			; Check dwon
003868  2  26 rr        	rol joyval
00386A  2  46 rr        	lsr tmp			; Check left
00386C  2  26 rr        	rol joyval
00386E  2  46 rr        	lsr tmp			; Check right
003870  2  26 rr        	rol joyval
003872  2               
003872  2  60           	rts
003873  2               
003873  2               ;-------------------------------------------------------
003873  2               ; Colours
003873  2               ;-------------------------------------------------------
003873  2               
003873  2               ; INK sets foreground colour
003873  2               
003873  2               setfgcol:
003873  2  AA           	tax
003874  2  BD 7B 38     	lda fgcolour,x
003877  2  8D 19 D0     	sta COLPF3
00387A  2  60           	rts
00387B  2               
00387B  2               fgcolour:
00387B  2  00 FE 34 98  	.byte $00,$fe,$34,$98,$42,$c6,$80,$de
00387F  2  42 C6 80 DE  
003883  2  24 28 48 9E  	.byte $24,$28,$48,$9e,$6e,$be,$78,$1e
003887  2  6E BE 78 1E  
00388B  2               
00388B  2               ; PAPER sets background colour
00388B  2               
00388B  2               setbgcol:
00388B  2  AA           	tax
00388C  2  BD 93 38     	lda bgcolour,x
00388F  2  8D 1A D0     	sta COLBK
003892  2  60           	rts
003893  2               
003893  2               bgcolour:
003893  2  00 FE 34 98  	.byte $00,$fe,$34,$98,$42,$c6,$80,$de
003897  2  42 C6 80 DE  
00389B  2  24 28 48 9E  	.byte $24,$28,$48,$9e,$6e,$be,$78,$1e
00389F  2  6E BE 78 1E  
0038A3  2               
0038A3  2               ;---------------------------------------------------------------
0038A3  2               ; Bitmap display list must be aligned at $100
0038A3  2               ;---------------------------------------------------------------
0038A3  2               bitmaplist:
0038A3  2               
0038A3  2               ; Align $100
0038A3  2               
0038A3  2  00 00 00 00  .repeat ((bitmaplist/256)+1)*256-bitmaplist
0038A7  2  00 00 00 00  
0038AB  2  00 00 00 00  
003900  2               	.byte 0
003900  2               .endrepeat
003900  2               
003900  2               ; Set graphic mode
003900  2               
003900  2               .if gflag
003900  2               	GFXMODE = MODEE
003900  2               .else
003900  2               	GFXMODE = MODEF
003900  2               .endif
003900  2               
003900  2               BITMAP_DLIST:
003900  2  70           	.byte BLANK8
003901  2  70           	.byte BLANK8
003902  2  70           	.byte BLANK8
003903  2               
003903  2  4F           	.byte LMS+GFXMODE
003904  2  00 E4        	.word ScreenAddr
003906  2  0F 0F 0F 0F  	.res 95,GFXMODE
00390A  2  0F 0F 0F 0F  
00390E  2  0F 0F 0F 0F  
003965  2               
003965  2  4F            	.byte LMS+GFXMODE
003966  2  00 F0        	.word ScreenAddr+96*32
003968  2  0F 0F 0F 0F  	.res 95,GFXMODE
00396C  2  0F 0F 0F 0F  
003970  2  0F 0F 0F 0F  
0039C7  2               
0039C7  2  41           	.byte DLISTENDJUMP
0039C8  2  00 39        	.word BITMAP_DLIST
0039CA  2               
0039CA  2               
0039CA  1               	.include "z80.asm"
0039CA  2               ;------------------------------------------------------
0039CA  2               ; z80.asm
0039CA  2               ; spectrum stuff
0039CA  2               ; adresses
0039CA  2               
0039CA  2               
0039CA  2               ; Contains seperatly 1 bit set
0039CA  2               
0039CA  2               _bitmem0	= $f8
0039CA  2               _bitmem1	= $f9
0039CA  2               _bitmem2	= $fa
0039CA  2               _bitmem3	= $fb
0039CA  2               _bitmem4	= $fc
0039CA  2               _bitmem5	= $fd
0039CA  2               _bitmem6	= $fe
0039CA  2               _bitmem7	= $ff
0039CA  2               
0039CA  2               ; constants
0039CA  2               _bitvalue0	= $01
0039CA  2               _bitvalue1	= $02
0039CA  2               _bitvalue2	= $04
0039CA  2               _bitvalue3	= $08
0039CA  2               _bitvalue4	= $10
0039CA  2               _bitvalue5	= $20
0039CA  2               _bitvalue6	= $40
0039CA  2               _bitvalue7	= $80
0039CA  2               
0039CA  2               _notbitvalue0	= $fe
0039CA  2               _notbitvalue1	= $fd
0039CA  2               _notbitvalue2	= $fb
0039CA  2               _notbitvalue3	= $f7
0039CA  2               _notbitvalue4	= $ef
0039CA  2               _notbitvalue5	= $df
0039CA  2               _notbitvalue6	= $bf
0039CA  2               _notbitvalue7	= $7f
0039CA  2               
0039CA  2               
0039CA  2               exx:
0039CA  2  A5 62        		lda z80_c
0039CC  2  A4 6E        		ldy z80_cp
0039CE  2  84 62        		sty z80_c
0039D0  2  85 6E        		sta z80_cp
0039D2  2  A5 63        		lda z80_b
0039D4  2  A4 6F        		ldy z80_bp
0039D6  2  84 63        		sty z80_b
0039D8  2  85 6F        		sta z80_bp
0039DA  2  A5 64        		lda z80_e
0039DC  2  A4 70        		ldy z80_ep
0039DE  2  84 64        		sty z80_e
0039E0  2  85 70        		sta z80_ep
0039E2  2  A5 65        		lda z80_d
0039E4  2  A4 71        		ldy z80_dp
0039E6  2  84 65        		sty z80_d
0039E8  2  85 71        		sta z80_dp
0039EA  2  A5 rr        		lda scraddr
0039EC  2  A4 72        		ldy z80_lp
0039EE  2  84 rr        		sty scraddr
0039F0  2  85 72        		sta z80_lp
0039F2  2  A5 rr        		lda scraddr+1
0039F4  2  A4 73        		ldy z80_hp
0039F6  2  84 rr        		sty scraddr+1
0039F8  2  85 73        		sta z80_hp
0039FA  2  60           		rts
0039FB  2               
0039FB  2               
0039FB  1               eind_asm:
0039FB  1               eop:					; End Of Program
0039FB  1               
0039FB  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(48384-eind_asm + start_asm))
0039FB  1               
