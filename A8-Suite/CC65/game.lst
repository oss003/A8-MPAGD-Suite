ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2000
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               pflag = 1 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2  xx           shrctr:	    .res 1
000058r 2               .endif
000058r 2               .if pflag
000058r 2  xx           explcnt:    .res 1
000059r 2  xx           seed3:	    .res 1
00005Ar 2               .endif
00005Ar 2               
00005Ar 2               .if aflag
00005Ar 2               pbptr:       .res 2
00005Ar 2               pbbuf:	     .res 2
00005Ar 2               .endif
00005Ar 2               
00005Ar 2               ;sndtyp:     .res 1
00005Ar 2               
00005Ar 2               .if rflag
00005Ar 2               sprshft:     .res 1
00005Ar 2               .endif
00005Ar 2               
00005Ar 1               
00005Ar 1               .segment "CODE"
000000r 1               .org asm_code-6
001FFA  1  FF FF        	.word $ffff
001FFC  1  00 20        	.word start_asm
001FFE  1  F5 8B        	.word eind_asm
002000  1               
002000  1               start_asm:
002000  1               	.include "game.inc"
002000  2               .include "baldy.inc"
002000  3               ;--------------------------------------------------------------
002000  3               ; Arcade Game Designer.
002000  3               ; (C) 2008 Jonathan Cauldwell.
002000  3               ; ZX Spectrum Next Engine v0.7.
002000  3               ; Acorn Atom port by K.v.Oss 2018
002000  3               ;--------------------------------------------------------------
002000  3               
002000  3               ; Conditional compilation flags
002000  3               ; Code is installed if flag is set
002000  3               ; Flags are set in commandline assembly or by the compiler
002000  3               
002000  3               ; Flags set by AGD compiler
002000  3               ;	mflag  			; MENU + INV
002000  3               ;	pflag 			; particle engine
002000  3               ;	sflag 			; scrollytext
002000  3               ;	dflag 			; digging mode
002000  3               ;	cflag			; collectable blocks
002000  3               ;	oflag			; objects
002000  3               ;	lflag			; ladders
002000  3               ;
002000  3               ; Flags set manually
002000  3               ;	aflag			; adventure mode
002000  3               ;	bflag			; big sprites (16x24)
002000  3               ;	iflag			; invert mode
002000  3               
002000  3               .if mflag
002000  3               	.out "- MEN/INV enabled"
002000  3               .endif
002000  3               .if pflag
002000  3               	.out "- Particles enabled"
002000  3               .endif
002000  3               .if sflag
002000  3               	.out "- Scrolling enabled"
002000  3               .endif
002000  3               .if dflag
002000  3               	.out "- Digging enabled"
002000  3               .endif
002000  3               .if cflag
002000  3               	.out "- Collectable blocks enabled"
002000  3               .endif
002000  3               .if oflag
002000  3               	.out "- Objects enabled"
002000  3               .endif
002000  3               .if lflag
002000  3               	.out "- Ladders enabled"
002000  3               .endif
002000  3               .if aflag
002000  3               	.out "- Adventure mode enabled"
002000  3               .endif
002000  3               .if bflag
002000  3               	.out "- Big Sprites (16x24) enabled"
002000  3               .endif
002000  3               .if iflag
002000  3               	.out "- Invert mode enabled"
002000  3               .endif
002000  3               .if gflag
002000  3               	.out "- Colour mode enabled"
002000  3               .endif
002000  3               .if rflag
002000  3               	.out "- RAM saving mode enabled"
002000  3               .endif
002000  3               
002000  3               ; Global definitions ------------------------------------------------------------
002000  3               
002000  3               	FONT = font		; Font address
002000  3               
002000  3               	green	= $00		; Colour definition filters
002000  3               	yellow	= $55
002000  3               	blue	= $aa
002000  3               	red	= $ff
002000  3               
002000  3               ; Block characteristics.
002000  3               
002000  3               	PLATFM	= 1		; platform.
002000  3               	WALL	= PLATFM + 1	; solid wall.
002000  3               	LADDER	= WALL + 1	; ladder.
002000  3               	FODDER	= LADDER + 1	; fodder block.
002000  3               	DEADLY	= FODDER + 1	; deadly block.
002000  3               	CUSTOM	= DEADLY + 1	; custom block.
002000  3               	WATER	= CUSTOM + 1	; water block.
002000  3                       COLECT	= WATER + 1	; collectable block.
002000  3                       NUMTYP	= COLECT + 1	; number of types.
002000  3               
002000  3               ; Sprites.
002000  3               
002000  3               .if bflag
002000  3               	SPR_HGT	= 24		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 8		; number of sprites.
002000  3               .else				; 16x16 sprites
002000  3               	SPR_HGT = 16		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 12		; number of sprites.
002000  3               .endif
002000  3               
002000  3               	TABSIZ = 17		; size of each entry.
002000  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002000  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002000  3               	var_X  = 8		; new x coordinate of sprite.
002000  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002000  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002000  3               
002000  3               ; Particle engine.
002000  3               
002000  3               	NUMSHR = 55		; pieces of shrapnel.
002000  3               	SHRSIZ = 6		; bytes per particle.
002000  3               
002000  3               ; System constants
002000  3               
002000  3               	ScrSelAddr  = $b000	; Screen selection address
002000  3               	KeyRowAddr  = $b000	; PIA key matrix row
002000  3               	KeyColAddr  = $b001	; PIA key matrix column
002000  3               	SpeakerBit  = $b002	; Speaker bit
002000  3               	CmdReg      = $b400	; Command register AtoMMC
002000  3               	DatReg      = $b401	; Data register AtoMMC
002000  3               	Timer2_Low  = $b808	; Timer 2 low byte
002000  3               	Timer2_High = $b809	; Timer 2 high byte
002000  3               	ScreenAddr  = $e400	; Startaddress video RAM
002000  3               
002000  3               	MAP 	    = $dd00		; properties map buffer (3x256 bytes)
002000  3               	SCADTB_lb   = MAP+3*256		; screen address table lo-byte (256 bytes)
002000  3               	SCADTB_hb   = SCADTB_lb+256	; screen address table hi-byte (256 bytes)
002000  3               	SHRAPN      = SCADTB_hb+256	; shrapnel table (55x6 bytes)
002000  3               
002000  3               ; System calls
002000  3               
002000  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
002000  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
002000  3               	OSRDCH   = $fe94	; get key subroutine
002000  3                       READKEY  = $fe71	; scan key matrix subroutine
002000  3               	OSWRCH	 = $fff4	; write character
002000  3               
002000  3               
002000  3               .if iflag
002000  3               	TxtInvert   = $ff	; Invert byte for character printing
002000  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002000  3               .else
002000  3               	TxtInvert   = $00	; Invert byte for character printing
002000  3               	ScrFillByte = $00	; Screen fill byte for CLS
002000  3               .endif
002000  3               
002000  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002000  3               
002000  3               ;===============================================================
002000  3               ; Game starts here
002000  3               ;===============================================================
002000  3               
002000  3               ;.segment "CODE"
002000  3               
002000  3  20 FE 88     	jsr init
002003  3               
002003  3               ; Clear variables
002003  3               
002003  3  A9 00        	lda #0
002005  3  A2 00        	ldx #0
002007  3               clrloop:
002007  3  95 00        	sta 0,x
002009  3  E8           	inx
00200A  3  D0 FB        	bne clrloop
00200C  3               
00200C  3               gameloop:
00200C  3  20 CA 25     	jsr game	 	; start the game.
00200F  3  4C 0C 20     	jmp gameloop		; Start again
002012  3               
002012  3               ; Definition of variables
002012  3               ; Make sure pointers are arranged in the same order as the data itself.
002012  3               
002012  3  B4 49        msgptr:		.word msgdat	; messages
002014  3  8D 4A        blkptr:		.word chgfx	; block graphics.
002016  3  85 4D        proptr:		.word bprop	; address of char properties.
002018  3  E4 4D        sptptr:		.word sprgfx	; sprite graphics
00201A  3  64 6A        frmptr:		.word frmlst	; sprite frames.
00201C  3  8A 6A        scrptr:		.word scdat	; address of screens.
00201E  3  59 7E        nmeptr:		.word nmedat	; enemy start positions.
002020  3  02 80        objptr:		.word objdta	; object graphics
002022  3               
002022  3               ;TxtFilter:	.byte $ff
002022  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
002026  3               
002026  3               ; Don't change the order of these four.
002026  3               ; Menu routine relies on winlft following wintop.
002026  3               
002026  3  01           wintop:		.byte WINDOWTOP	; top of window.
002027  3  01           winlft:		.byte WINDOWLFT	; left edge.
002028  3  14           winhgt:		.byte WINDOWHGT	; window height.
002029  3  1E           winwid:		.byte WINDOWWID	; window width.
00202A  3  28           numob:		.byte NUMOBJ	; number of objects in game.
00202B  3               
00202B  3               ; Variables start here.
00202B  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00202B  3               
00202B  3  08           wntopx:		.byte (8 * WINDOWTOP)
00202C  3  08           wnlftx:		.byte (8 * WINDOWLFT)
00202D  3  98           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00202E  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00202F  3               
00202F  3               ; Assorted game routines which can go in contended memory.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for inventory called by the INV command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with objects seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected objectnr of INV menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               .if mflag
00202F  3               minve:
00202F  3               	lda #<(invdis)		; routine address.
00202F  3               	sta mod0+1		; set up menu routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(invdis)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               	lda #<(fopt)		; find option from available objects.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fopt)
00202F  3               	sta mod1+1+1
00202F  3               	jmp dbox		; do menu routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for menu called by the MENU command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with menu items seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected line nr of MENU menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               mmenu:
00202F  3               	lda #<(always)		; routine address.
00202F  3               	sta mod0+1		; set up routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(always)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               
00202F  3               	lda #<(fstd)		; standard option selection.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fstd)
00202F  3               	sta mod1+2
00202F  3               
00202F  3               ; Drop through into box routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Work out size of box for message or menu.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               dbox:
00202F  3               	lda #<(msgdat)		; pointer to messages.
00202F  3               	sta z80_l
00202F  3               	lda #>(msgdat)
00202F  3               	sta z80_h
00202F  3               
00202F  3               	jsr getwrd		; get message number.
00202F  3               
00202F  3               	lda z80_h		; store pointer to message.
00202F  3               	sta TmpAddr
00202F  3               	lda z80_l
00202F  3               	sta TmpAddr+1
00202F  3               
00202F  3               	lda #1			; height.
00202F  3               	sta z80_d
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               	sta z80_e		; maximum width.
00202F  3               dbox5:
00202F  3               	lda #0			; this line"s width.
00202F  3               	sta z80_b
00202F  3               mod2:
00202F  3               	jsr always		; item in player"s possession?
00202F  3               	cmp #255
00202F  3               	bne dbox6		; not in inventory, skip this line.
00202F  3               	inc z80_d		; add to tally.
00202F  3               dbox6:
00202F  3               	ldy #0			; get character.
00202F  3               	lda (z80_hl),y
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a		; reached end of line?
00202F  3               	cmp #','
00202F  3               	beq dbox3		; yes.
00202F  3               	cmp #13
00202F  3               	beq dbox3		; yes.
00202F  3               	inc z80_b		; add to this line"s width.
00202F  3               	lda z80_a
00202F  3               	bmi dbox4		; end of message? yes, end count.
00202F  3               	jmp dbox6		; repeat until we find the end.
00202F  3               dbox3:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox5		; no, carry on looking.
00202F  3               	lda z80_b		; make this the widest so far.
00202F  3               	sta z80_e
00202F  3               	jmp dbox5		; keep looking.
00202F  3               dbox4:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox8		; no, carry on looking.
00202F  3               	lda z80_b		; final line is the longest so far.
00202F  3               	sta z80_e
00202F  3               dbox8:
00202F  3               	dec z80_d		; decrement items found.
00202F  3               	bne :+			; total was zero.
00202F  3               	lda #255
00202F  3               	sta varopt
00202F  3               	jmp dbox15
00202F  3               :
00202F  3               	lda z80_e		; longest line.
00202F  3               	bne :+			; was it zero?
00202F  3               	jmp dbox15		; total was zero.
00202F  3               :
00202F  3               	sta bwid		; set up size.
00202F  3               	lda z80_d
00202F  3               	sta blen
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; That's set up our box size.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               	lda winhgt		; window height in characters.
00202F  3               	sec
00202F  3               	sbc z80_d		; subtract height of box.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc wintop		; add top edge of window.
00202F  3               	sta btop		; set up box top.
00202F  3               
00202F  3               	lda winwid		; window width in characters.
00202F  3               	sec
00202F  3               	sbc z80_e		; subtract box width.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc winlft		; add left edge of window.
00202F  3               	sta blft		; box left.
00202F  3               
00202F  3               	lda #<(FONT-256)		; font.
00202F  3               	sta grbase		; set up for text display.
00202F  3               	lda #>(FONT-256)
00202F  3               	sta grbase+1
00202F  3               
00202F  3               	lda TmpAddr+1		; restore message pointer.
00202F  3               	sta z80_l
00202F  3               	lda TmpAddr
00202F  3               	sta z80_h
00202F  3               
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set display coordinate.
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               dbox2:
00202F  3               	lda combyt		; get object number.
00202F  3               	sta z80_a
00202F  3               mod0:
00202F  3               	jsr always		; check inventory for display.
00202F  3               	cmp #255
00202F  3               	beq :+
00202F  3               	jmp dbox13		; not in inventory, skip this line.
00202F  3               :
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set left display position.
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_b		; store width.
00202F  3               dbox0:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	cmp #','		; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               	cmp #13			; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               
00202F  3               	cmp #141			; end of line?
00202F  3               	bne :+
00202F  3               	dec bwid
00202F  3               	jmp dbox7		; yes, next one.
00202F  3               :
00202F  3               	dec z80_b		; one less to display.
00202F  3               	and #127		; remove terminator.
00202F  3               
00202F  3               	jsr pchr		; display on screen.
00202F  3               
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a
00202F  3               	cmp #128		; end of message?
00202F  3               	bmi :+
00202F  3               	jmp dbox7		; yes, job done.
00202F  3               :
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	beq :+			; are any left?
00202F  3               	jmp dbox0		; yes, continue.
00202F  3               :
00202F  3               ;---------------------------------------------------
00202F  3               ; Reached limit of characters per line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dbox9:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #13			; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #128		; end of message?
00202F  3               	bcs :+
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox9
00202F  3               
00202F  3               ;---------------------------------------------------
00202F  3               ; Fill box to end of line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dboxf:
00202F  3               	lda #32			; space character.
00202F  3               	jsr pchr		; display character.
00202F  3               	dec z80_b
00202F  3               	beq :+
00202F  3               	jmp dboxf		; repeat for remaining chars on line.
00202F  3               :
00202F  3               	rts
00202F  3               dbox1:
00202F  3               	inc z80_l		; skip character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	jsr dboxf		; fill box out to right side.
00202F  3               dbox10:
00202F  3               	inc dispy		; y coordinate down a line next position.
00202F  3               	jmp dbox2		; next line.
00202F  3               dbox7:
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	bne :+			; are any left?
00202F  3               	jmp dbox11		; no, nothing to draw.
00202F  3               :
00202F  3               	jsr dboxf		; fill message to line.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Drawn the box menu, now select option.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox11:
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set bar position.
00202F  3               dbox14:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	bne dbox14		; yes, debounce it.
00202F  3               	jsr dbar		; draw bar.
00202F  3               dbox12:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	beq dbox12		; no, nothing.
00202F  3               	and #16			; fire button pressed?
00202F  3               	bne :+
00202F  3               mod1:
00202F  3               	jmp fstd		; yes, job done.
00202F  3               :
00202F  3               	jsr dbar		; delete bar.
00202F  3               
00202F  3               	lda joyval		; joystick reading.
00202F  3               	and #8			; going up?
00202F  3               	beq dboxu		; yes, go up.
00202F  3               
00202F  3               	ldx dispy		; vertical position of bar.
00202F  3               	inx			; look down.
00202F  3               	txa
00202F  3               	sec
00202F  3               	sbc btop		; find distance from top.
00202F  3               	cmp blen		; top of box.
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	inc dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               dboxu:
00202F  3               	lda dispy		; vertical position of bar.
00202F  3               	cmp btop		; are we at the top?
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	dec dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               fstd:
00202F  3               	lda dispy		; bar position.
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta varopt		; store the option.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Option not available.  Skip this line.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox13:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               	cmp #13			; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               
00202F  3               	bpl :+			; end of message?
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox13
00202F  3               dbox15:
00202F  3               	lda TmpAddr		; pop message pointer from the stack.
00202F  3               	sta z80_h
00202F  3               	lda TmpAddr+1
00202F  3               	sta z80_l
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Invert bar
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbar:
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set display coordinate.
00202F  3               	jsr gprad		; get printing address.
00202F  3               
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_c		; loop counter in c.
00202F  3               	lda z80_h
00202F  3               	sta z80_d		; store screen address high byte.
00202F  3               dbar1:
00202F  3               	ldx #7			; pixel height in b.
00202F  3               dbar0:
00202F  3               	ldy scrtab,x
00202F  3               	lda (scraddr),y		; get screen byte.
00202F  3               	eor #255		; reverse all bits.
00202F  3               	sta (scraddr),y		; write back to screen.
00202F  3               	dex			; next line down.
00202F  3               	bpl dbar0		; draw rest of character.
00202F  3               
00202F  3               	inc scraddr		; one char right.
00202F  3               	dec z80_c		; decrement character counter.
00202F  3               	bne dbar1		; repeat for whole line.
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Point to object
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  combyt
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  A = object number, A=255 if already in possession
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               invdis:
00202F  3               	lda z80_l		; store message text pointer.
00202F  3               	pha
00202F  3               	lda z80_h
00202F  3               	pha
00202F  3               	lda combyt		; object number.
00202F  3               	inc combyt		; ready for next one.
00202F  3               	jsr gotob		; check if we have object.
00202F  3               	tay
00202F  3               	pla
00202F  3               	sta z80_h
00202F  3               	pla
00202F  3               	sta z80_l
00202F  3               	tya
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Find option selected.
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  -
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected object
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               fopt:
00202F  3               	lda dispy
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta tmp+2		; option selected in b register.
00202F  3               	inc tmp+2
00202F  3               
00202F  3               	lda #0			; set to first item.
00202F  3               	sta combyt		; object number.
00202F  3               fopt0:
00202F  3               	jsr fobj		; find next object in inventory.
00202F  3               	dec tmp+2
00202F  3               	bne fopt0		; repeat for relevant steps down the list.
00202F  3               
00202F  3               	lda combyt		; get option.
00202F  3               	sta varopt		; store the option.
00202F  3               	dec varopt		; one less, due to where we increment combyt.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               fobj:
00202F  3               	ldy combyt		; object number.
00202F  3               	inc combyt		; ready for next item.
00202F  3               	tya
00202F  3               	jsr gotob		; do we have this item?
00202F  3               	cmp #255
00202F  3               	bne :+
00202F  3               	rts
00202F  3               :
00202F  3               	jmp fobj		; yes, it's on the list.
00202F  3               
00202F  3               ;bwid:	.byte 0              ; box/menu width.
00202F  3               ;blen:	.byte 0              ; box/menu height.
00202F  3               ;btop:	.byte 0              ; box coordinates.
00202F  3               ;blft:	.byte 0
00202F  3               .endif
00202F  3               
00202F  3               ;----------------------------------------------------
00202F  3               ; Delay routine 1/50 sec
00202F  3               ;
00202F  3               ; Wait 1/60 sec = 16666 usec
00202F  3               ; Wait 208 x 16 =  3328 usec
00202F  3               ;                 19994 usec
00202F  3               ; rts           =     6 usec
00202F  3               ; Total         = 20000 usec
00202F  3               ;----------------------------------------------------
00202F  3               
00202F  3               delay:
00202F  3  60             rts
002030  3  85 rr        	sta xtmp
002032  3               del_loop:
002032  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
002035  3               
002035  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
002037  3               delay1:
002037  3  61 80        	adc ($80,x)		;	 6 usec
002039  3  61 80        	adc ($80,x)		;	 6 usec
00203B  3  88           	dey			;	 2 usec
00203C  3  D0 F9        	bne delay1		;	 2 usec
00203E  3  EA           	nop			; 2 usec
00203F  3  EA           	nop			; 2 usec
002040  3               				; tot: 20000 usec
002040  3  C6 rr        	dec xtmp
002042  3  D0 EE        	bne del_loop
002044  3  60           	rts
002045  3               
002045  3               ;----------------------------------------------------
002045  3               ; Clear sprite table.
002045  3               ;
002045  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002045  3               ;----------------------------------------------------
002045  3               
002045  3               xspr:
002045  3  A9 FF        	lda #255		; clear byte.
002047  3  A2 00        	ldx #0			; length of table.
002049  3               xspr0:
002049  3  9D EA 38     	sta sprtab,x		; sprite table.
00204C  3  E8           	inx			; move to next byte.
00204D  3  E0 CC        	cpx #SPRBUF
00204F  3  D0 F8        	bne xspr0		; repeat for rest of table.
002051  3  60           	rts
002052  3               
002052  3               ;-------------------------------------------------------------
002052  3               ; Initialise all objects.
002052  3               ;
002052  3               ; Reset current room,y,x to start room,y,x for all objects
002052  3               ;-------------------------------------------------------------
002052  3               
002052  3               .if oflag
002052  3               iniob:
002052  3  A9 02        	lda #<objdta 		; objects table.
002054  3  85 68        	sta z80_x
002056  3  A9 80        	lda #>objdta
002058  3  85 69        	sta z80_i
00205A  3               
00205A  3  AE 2A 20     	ldx numob 		; number of objects in the game.
00205D  3               iniob0:
00205D  3  A0 23        	ldy #35
00205F  3  B1 68        	lda (z80_ix),y 		; start screen.
002061  3  A0 20        	ldy #32
002063  3  91 68        	sta (z80_ix),y 		; set start screen.
002065  3               
002065  3  A0 24        	ldy #36
002067  3  B1 68        	lda (z80_ix),y 		; find start y.
002069  3  A0 21        	ldy #33
00206B  3  91 68        	sta (z80_ix),y 		; set start y.
00206D  3               
00206D  3  A0 25        	ldy #37
00206F  3  B1 68        	lda (z80_ix),y 		; get initial x.
002071  3  A0 22        	ldy #34
002073  3  91 68        	sta (z80_ix),y 		; set x coord.
002075  3               
002075  3  18           	clc 			; point to next object.
002076  3  A5 68        	lda z80_x
002078  3  69 26        	adc #38			; distance between objects.
00207A  3  85 68        	sta z80_x
00207C  3  90 02        	bcc :+
00207E  3  E6 69        	inc z80_i
002080  3               :
002080  3  CA           	dex 			; repeat.
002081  3  D0 DA        	bne iniob0
002083  3               
002083  3  60           	rts
002084  3               .endif
002084  3               
002084  3               ;-------------------------------------------------------------
002084  3               ; Screen synchronisation.
002084  3               ;
002084  3               ;  - read joystick/keyboard
002084  3               ;  - handle sound
002084  3               ;  - handle shrapnel every even frame
002084  3               ;  - sync framerate to 25 Hz
002084  3               ;-------------------------------------------------------------
002084  3               
002084  3               vsync:
002084  3               
002084  3               ; Save registers
002084  3               
002084  3  48           	pha
002085  3  98           	tya
002086  3  48           	pha
002087  3  8A           	txa
002088  3  48           	pha
002089  3               
002089  3               ; Read joystick/keyboard
002089  3               
002089  3  20 27 30     	jsr joykey		; read joystick/keyboard.
00208C  3               
00208C  3               ; Handle shrapnel every even frame
00208C  3               
00208C  3  A5 rr        	lda clock
00208E  3  29 01        	and #1
002090  3  D0 03        	bne:+
002092  3  20 39 21     	jsr proshr		; handle shrapnel every even frame
002095  3               :
002095  3               
002095  3               ; Handle sound
002095  3               
002095  3  AD B5 20     	lda sndtyp
002098  3  F0 00        	beq sndskip
00209A  3               sndloop:
00209A  3               
00209A  3               sndskip:
00209A  3               
00209A  3               ; Sync framerate to 25 Hz
00209A  3               
00209A  3  A9 00        	lda #0			; sync framerate 25 Hz
00209C  3  8D 3D 89     	sta frame_edge
00209F  3               wait_for_frame_counter_1:
00209F  3  AD 3B 89     	lda frame_counter
0020A2  3  4A           	lsr a
0020A3  3  6E 3D 89     	ror frame_edge
0020A6  3  AD 3D 89     	lda frame_edge
0020A9  3  29 C0        	and #%11000000
0020AB  3  C9 40        	cmp #%01000000
0020AD  3  D0 F0        	bne wait_for_frame_counter_1
0020AF  3               
0020AF  3               ; Restore registers
0020AF  3               
0020AF  3  68           	pla
0020B0  3  AA           	tax
0020B1  3  68           	pla
0020B2  3  A8           	tay
0020B3  3  68           	pla
0020B4  3  60           	rts
0020B5  3               
0020B5  3  00           sndtyp:	.byte 0
0020B6  3               
0020B6  3               ;-----------------------------------------------
0020B6  3               ; Redraw the screen.
0020B6  3               ;
0020B6  3               ; Remove old copy of all sprites for redraw.
0020B6  3               ;-----------------------------------------------
0020B6  3               
0020B6  3               redraw:
0020B6  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
0020B8  3  48           	pha
0020B9  3  A5 68        	lda z80_x
0020BB  3  48           	pha
0020BC  3               
0020BC  3  20 A7 2C     	jsr droom		; show screen layout.
0020BF  3               .if oflag
0020BF  3  20 D1 27     	jsr shwob		; draw objects.
0020C2  3               .endif
0020C2  3               numsp0:
0020C2  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0020C4  3  85 rr        	sta tmp
0020C6  3               
0020C6  3  A9 EA        	lda #<sprtab		; sprite table.
0020C8  3  85 68        	sta z80_x
0020CA  3  A9 38        	lda #>sprtab
0020CC  3  85 69        	sta z80_i
0020CE  3               redrw0:
0020CE  3  A0 00        	ldy #0
0020D0  3  B1 68        	lda (z80_ix),y		; old sprite type.
0020D2  3  C9 FF        	cmp #255		; is it enabled?
0020D4  3  F0 0B        	beq redrw1 		; no, find next one.
0020D6  3               
0020D6  3  A0 03        	ldy #3
0020D8  3  B1 68        	lda (z80_ix),y 		; sprite y.
0020DA  3  C9 B1        	cmp #177		; beyond maximum?
0020DC  3  B0 03        	bcs redrw1		; yes, nothing to draw.
0020DE  3               
0020DE  3  20 B3 33     	jsr sspria		; show single sprite.
0020E1  3               redrw1:
0020E1  3  18           	clc			; next sprite.
0020E2  3  A5 68        	lda z80_x
0020E4  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
0020E6  3  85 68        	sta z80_x
0020E8  3  90 02        	bcc :+
0020EA  3  E6 69        	inc z80_i
0020EC  3               :
0020EC  3  C6 rr        	dec tmp			; repeat for remaining sprites.
0020EE  3  D0 DE        	bne redrw0
0020F0  3               rpblc1:
0020F0  3               ;	jsr dshrp		; redraw shrapnel.
0020F0  3               
0020F0  3               .if aflag
0020F0  3               	jsr rbloc		; draw blocks for this screen
0020F0  3               .endif
0020F0  3  68           	pla			; retrieve sprite pointer.
0020F1  3  85 68        	sta z80_x
0020F3  3  68           	pla
0020F4  3  85 69        	sta z80_i
0020F6  3               
0020F6  3  60           	rts
0020F7  3               
0020F7  3               ;----------------------------------------------------------------------
0020F7  3               ; Clear screen routine.
0020F7  3               ;
0020F7  3               ; Fill screenmem $e400-$fbff with ScrFillByte
0020F7  3               ;----------------------------------------------------------------------
0020F7  3               
0020F7  3               cls:
0020F7  3  A9 E4        	lda #>ScreenAddr		; screen address.
0020F9  3  8D 02 21     	sta clsloop+2
0020FC  3  A9 00        	lda #ScrFillByte
0020FE  3               .if iflag
0020FE  3               	eor #$ff
0020FE  3               .endif
0020FE  3  A0 00        	ldy #0
002100  3               clsloop:
002100  3  99 00 E4     	sta ScreenAddr,y
002103  3  C8           	iny
002104  3  D0 FA        	bne clsloop
002106  3  EE 02 21     	inc clsloop+2
002109  3  AE 02 21     	ldx clsloop+2
00210C  3  E0 FC        	cpx #>(ScreenAddr+$1800)
00210E  3  D0 F0        	bne clsloop
002110  3  60           	rts
002111  3               
002111  3               ;----------------------------------------------------------------------
002111  3               ; Atomic palette is static
002111  3               ;----------------------------------------------------------------------
002111  3               
002111  3               setpal:
002111  3  60           	rts
002112  3               
002112  3               ;----------------------------------------------------------------------
002112  3               ; FODDER check
002112  3               ;----------------------------------------------------------------------
002112  3               
002112  3               .if pflag .or dflag
002112  3               fdchk:
002112  3  C9 04        	cmp #FODDER 		; is it fodder?
002114  3  F0 01        	beq :+
002116  3  60           	rts 			; no.
002117  3               :
002117  3  A9 00        	lda #0			; wipe fodder in MAP
002119  3  A0 00        	ldy #0
00211B  3  91 rr        	sta (bufaddr),y 	; rewrite block type.
00211D  3               
00211D  3  A5 rr        	lda dispx		; x=x/8
00211F  3  48           	pha
002120  3  4A           	lsr a
002121  3  4A           	lsr a
002122  3  4A           	lsr a
002123  3  85 rr        	sta dispx
002125  3               
002125  3  A5 rr        	lda dispy		; y=y/8
002127  3  48           	pha
002128  3  4A           	lsr a
002129  3  4A           	lsr a
00212A  3  4A           	lsr a
00212B  3  85 rr        	sta dispy
00212D  3               
00212D  3  A9 00        	lda #0 			; block to write.
00212F  3  20 7A 2B     	jsr pattr 		; write block.
002132  3               
002132  3  68           	pla
002133  3  85 rr        	sta dispy
002135  3  68           	pla
002136  3  85 rr        	sta dispx
002138  3  60           	rts
002139  3               .endif
002139  3               
002139  3               ;----------------------------------------------------
002139  3               ; Scrolly text and puzzle variables.
002139  3               ;----------------------------------------------------
002139  3               
002139  3               .if sflag
002139  3               txtbit:	.byte 128		; bit to write.
002139  3               txtwid:	.byte 16		; width of ticker message.
002139  3               txtpos:	.word msgdat
002139  3               txtini:	.word msgdat
002139  3               txtscr:	.word ScreenAddr
002139  3               .endif
002139  3               
002139  3               ;----------------------------------------------------
002139  3               ; Specialist routines.
002139  3               ; Process shrapnel.
002139  3               ;----------------------------------------------------
002139  3               proshr:
002139  3               .if pflag
002139  3  A9 00        	lda #<SHRAPN		; table.
00213B  3  85 68        	sta z80_x
00213D  3  A9 E2        	lda #>SHRAPN
00213F  3  85 69        	sta z80_i
002141  3               
002141  3  A9 37        	lda #NUMSHR		; shrapnel pieces to process.
002143  3  85 rr        	sta shrctr
002145  3               prosh0:
002145  3  A0 00        	ldy #0
002147  3  B1 68        	lda (z80_ix),y		; on/off marker.
002149  3  0A           	asl a
00214A  3               proshx:
00214A  3  B0 03        	bcs :+
00214C  3  20 5F 21     	jsr prosh1 		; on, so process it.
00214F  3               :
00214F  3  18           	clc
002150  3  A5 68        	lda z80_x
002152  3  69 06        	adc #SHRSIZ
002154  3  85 68        	sta z80_x
002156  3  90 02        	bcc :+
002158  3  E6 69        	inc z80_i
00215A  3               :
00215A  3  C6 rr        	dec shrctr		; round again.
00215C  3  D0 E7        	bne prosh0
00215E  3               .endif
00215E  3               .if sflag
00215E  3               	jsr scrly
00215E  3               .endif
00215E  3  60           	rts
00215F  3               
00215F  3               .if pflag
00215F  3               ;shrctr:	.byte 0
00215F  3               
00215F  3               ;----------------------------------------------------
00215F  3               ; Proces shrapnel piece
00215F  3               ;----------------------------------------------------
00215F  3               
00215F  3               prosh1:
00215F  3  20 56 22     	jsr plot 		; delete the pixel.
002162  3               
002162  3  A9 8C        	lda #<shrptr		; shrapnel routine pointers.
002164  3  85 66        	sta z80_l
002166  3  A9 21        	lda #>shrptr
002168  3  85 67        	sta z80_h
00216A  3               
00216A  3  A0 00        	ldy #0
00216C  3  B1 68        	lda (z80_ix),y		; restore shrapnel type.
00216E  3  20 7D 21     	jsr prosh2 		; run the routine.
002171  3  20 20 22     	jsr chkxy		; check x and y are good before we redisplay.
002174  3               
002174  3  A9 06        	lda #<SHRSIZ 		; distance to next.
002176  3  85 64        	sta z80_e
002178  3  A9 00        	lda #>SHRSIZ
00217A  3  85 65        	sta z80_d
00217C  3  60           	rts
00217D  3               
00217D  3               ;----------------------------------------------------
00217D  3               ; Run the routine
00217D  3               ;----------------------------------------------------
00217D  3               
00217D  3               prosh2:
00217D  3  0A           	asl a 			; 2 bytes per address.
00217E  3  A8           	tay
00217F  3  B9 8C 21     	lda shrptr,y
002182  3  85 66        	sta z80_l
002184  3  B9 8D 21     	lda shrptr+1,y 		; fetch high byte from table.
002187  3  85 67        	sta z80_h
002189  3  6C 66 00     	jmp (z80_hl) 		; jump to routine.
00218C  3               
00218C  3               ;----------------------------------------------------
00218C  3               ; Paricle routine table
00218C  3               ;----------------------------------------------------
00218C  3               
00218C  3  26 23        shrptr:	.word laser		; laser.
00218E  3  D4 22        	.word trail		; vapour trail.
002190  3  9C 21        	.word shrap		; shrapnel from explosion.
002192  3  F8 21        	.word dotl		; horizontal starfield left.
002194  3  02 22        	.word dotr		; horizontal starfield right.
002196  3  0C 22        	.word dotu		; vertical starfield up.
002198  3  16 22        	.word dotd		; vertical starfield down.
00219A  3  B3 49        	.word ptcusr		; user particle.
00219C  3               
00219C  3               ;----------------------------------------------------
00219C  3               ; Explosion shrapnel.
00219C  3               ;----------------------------------------------------
00219C  3               
00219C  3               shrap:
00219C  3  A0 01        	ldy #1
00219E  3  B1 68        	lda (z80_ix),y 		; get the angle.
0021A0  3  18           	clc
0021A1  3  69 94        	adc #<shrsin		; shrapnel sine table.
0021A3  3  85 66        	sta z80_l
0021A5  3  A9 22        	lda #>shrsin
0021A7  3  69 00        	adc #0
0021A9  3  85 67        	sta z80_h
0021AB  3               
0021AB  3  A0 00        	ldy #0
0021AD  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
0021AF  3  85 64        	sta z80_e
0021B1  3  E6 66        	inc z80_l 		; next byte of table.
0021B3  3  D0 02        	bne :+
0021B5  3  E6 67        	inc z80_h
0021B7  3               :
0021B7  3  A0 00        	ldy #0
0021B9  3  B1 66        	lda (z80_hl),y		; fetch value from table.
0021BB  3  85 65        	sta z80_d
0021BD  3  E6 66        	inc z80_l		; next byte of table.
0021BF  3  D0 02        	bne :+
0021C1  3  E6 67        	inc z80_h
0021C3  3               :
0021C3  3  A0 00        	ldy #0
0021C5  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
0021C7  3  85 62        	sta z80_c
0021C9  3  E6 66        	inc z80_l 		; next byte of table.
0021CB  3  D0 02        	bne :+
0021CD  3  E6 67        	inc z80_h
0021CF  3               :
0021CF  3  A0 00        	ldy #0
0021D1  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
0021D3  3  85 63        	sta z80_b
0021D5  3               
0021D5  3  A0 02        	ldy #2
0021D7  3  B1 68        	lda (z80_ix),y 		; x coordinate in hl.
0021D9  3  18           	clc
0021DA  3  65 64        	adc z80_e		; add sine lb
0021DC  3  91 68        	sta (z80_ix),y		; store new coordinate lb.
0021DE  3  A0 03        	ldy #3
0021E0  3  B1 68        	lda (z80_ix),y
0021E2  3  65 65        	adc z80_d		; add sine hb
0021E4  3  91 68        	sta (z80_ix),y		; store new coordinate hb.
0021E6  3               
0021E6  3  A0 04        	ldy #4
0021E8  3  B1 68        	lda (z80_ix),y	 	; y coordinate in hl.
0021EA  3  18           	clc
0021EB  3  65 62        	adc z80_c		; add cosine lb
0021ED  3  91 68        	sta (z80_ix),y		; store new coordinate lb.
0021EF  3  A0 05        	ldy #5
0021F1  3  B1 68        	lda (z80_ix),y
0021F3  3  65 63        	adc z80_b		; add cosine lb
0021F5  3  91 68        	sta (z80_ix),y		; store new coordinate hb.
0021F7  3               
0021F7  3  60           	rts
0021F8  3               
0021F8  3               ;----------------------------------------------------
0021F8  3               ; Move dots
0021F8  3               ;----------------------------------------------------
0021F8  3               
0021F8  3               dotl:
0021F8  3  A0 05        	ldy #5
0021FA  3  B1 68        	lda (z80_ix),y
0021FC  3  38           	sec
0021FD  3  E9 01        	sbc #1		 	; move left.
0021FF  3  91 68        	sta (z80_ix),y
002201  3  60           	rts
002202  3               dotr:
002202  3  A0 05        	ldy #5
002204  3  B1 68        	lda (z80_ix),y
002206  3  18           	clc
002207  3  69 01        	adc #1		 	; move left.
002209  3  91 68        	sta (z80_ix),y
00220B  3  60           	rts
00220C  3               dotu:
00220C  3  A0 03        	ldy #3
00220E  3  B1 68        	lda (z80_ix),y
002210  3  38           	sec
002211  3  E9 01        	sbc #1		 	; move up.
002213  3  91 68        	sta (z80_ix),y
002215  3  60           	rts
002216  3               dotd:
002216  3  A0 03        	ldy #3
002218  3  B1 68        	lda (z80_ix),y
00221A  3  18           	clc
00221B  3  69 01        	adc #1			; move down.
00221D  3  91 68        	sta (z80_ix),y
00221F  3  60           	rts
002220  3               
002220  3               ;----------------------------------------------------
002220  3               ; Check if coordinates are ok before redrawing at new position.
002220  3               ;
002220  3               ; left:   X>L		X=L	Ok
002220  3               ; right:  R+15>X	X=R	Ok
002220  3               ; top:    Y>T		Y=T	Ok
002220  3               ; bottom: B+15>Y	Y=B	Ok
002220  3               ;----------------------------------------------------
002220  3               
002220  3               chkxy:
002220  3               
002220  3               ; top:    Y>T		Y=T	Ok
002220  3               
002220  3  A0 03        	ldy #3
002222  3  B1 68        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002224  3  CD 2B 20     	cmp wntopx		; window top.
002227  3  B0 03        	bcs :+			; compare with top window limit.
002229  3  4C 8D 22     	jmp kilshr		; out of window, kill shrapnel.
00222C  3               :
00222C  3               ; left:   X>L		X=L	Ok
00222C  3               
00222C  3  A0 05        	ldy #5
00222E  3  B1 68        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002230  3  CD 2C 20     	cmp wnlftx		; left edge.
002233  3  B0 03        	bcs :+			; compare with left window limit.
002235  3  4C 8D 22     	jmp kilshr		; out of window, kill shrapnel.
002238  3               :
002238  3               ; bottom: B+15>Y	Y=B	Ok
002238  3               
002238  3  AD 2D 20     	lda wnbotx		; point to bottom.
00223B  3  18           	clc
00223C  3  69 0F        	adc #15
00223E  3  A0 03        	ldy #3
002240  3  D1 68        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002242  3  B0 03        	bcs :+			; compare with shrapnel x coordinate.
002244  3  4C 8D 22     	jmp kilshr		; off screen, kill shrapnel..
002247  3               :
002247  3               ; right:  R+15>X	X=R	Ok
002247  3               
002247  3  AD 2E 20     	lda wnrgtx		; point to right edge.
00224A  3  18           	clc
00224B  3  69 0F        	adc #15
00224D  3  A0 05        	ldy #5
00224F  3  D1 68        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002251  3  B0 03        	bcs :+			; compare with window limit.
002253  3  4C 8D 22     	jmp kilshr		; off screen, kill shrapnel.
002256  3               :
002256  3               
002256  3               ;----------------------------------------------------
002256  3               ; Drop through.
002256  3               ; Display shrapnel.
002256  3               ;----------------------------------------------------
002256  3               
002256  3               plot:
002256  3  A0 03        	ldy #3
002258  3  B1 68        	lda (z80_ix),y		; y integer.
00225A  3  85 rr        	sta dispy	 	; workspace coordinates.
00225C  3  A0 05        	ldy #5
00225E  3  B1 68        	lda (z80_ix),y	 	; x integer.
002260  3  85 rr        	sta dispx 		; workspace coordinates.
002262  3               
002262  3  A0 00        	ldy #0
002264  3  B1 68        	lda (z80_ix),y 		; type.
002266  3  D0 03        	bne :+			; is it a laser?
002268  3  4C 81 22     	jmp plot1 		; yes, draw laser instead.
00226B  3               :
00226B  3               plot0:
00226B  3  A5 rr        	lda dispx		; which pixel within byte do we
00226D  3  29 07        	and #7			; want to set first?
00226F  3  A8           	tay
002270  3  B9 61 23     	lda dots,y 		; table of small pixel positions.
002273  3  85 64        	sta z80_e 		; get value.
002275  3               
002275  3  20 90 33     	jsr scadd 		; screen address.
002278  3  A0 00        	ldy #0
00227A  3  B1 rr        	lda (scraddr),y		; see what's already there.
00227C  3  45 64        	eor z80_e
00227E  3  91 rr        	sta (scraddr),y 	; put back on screen.
002280  3  60           	rts
002281  3               
002281  3               plot1:
002281  3  20 90 33     	jsr scadd 		; screen address.
002284  3  A0 00        	ldy #0
002286  3  B1 rr        	lda (scraddr),y 	; fetch byte there.
002288  3  49 FF        	eor #255 		; toggle all bits.
00228A  3  91 rr        	sta (scraddr),y 	; new byte.
00228C  3  60           	rts
00228D  3               
00228D  3               ;----------------------------------------------------
00228D  3               ; Switch off shrapnel
00228D  3               ;----------------------------------------------------
00228D  3               
00228D  3               kilshr:
00228D  3  A9 80        	lda #128
00228F  3  A0 00        	ldy #0
002291  3  91 68        	sta (z80_ix),y	; switch off shrapnel.
002293  3  60           	rts
002294  3               
002294  3               ;----------------------------------------------------
002294  3               ; Sine/cosine table
002294  3               ;----------------------------------------------------
002294  3               
002294  3  00 00 00 04  shrsin:	.word 0,1024,391,946,724,724,946,391
002298  3  87 01 B2 03  
00229C  3  D4 02 D4 02  
0022A4  3  00 04 00 00  	.word 1024,0,946,65144,724,64811,391,64589
0022A8  3  B2 03 78 FE  
0022AC  3  D4 02 2B FD  
0022B4  3  00 00 00 FC  	.word 0,64512,65144,64589,64811,64811,64589,65144
0022B8  3  78 FE 4D FC  
0022BC  3  2B FD 2B FD  
0022C4  3  00 FC 00 00  	.word 64512,0,64589,391,64811,724,65144,946
0022C8  3  4D FC 87 01  
0022CC  3  2B FD D4 02  
0022D4  3               
0022D4  3               ;----------------------------------------------------
0022D4  3               ; Create trail
0022D4  3               ;----------------------------------------------------
0022D4  3               
0022D4  3               trail:
0022D4  3  A0 01        	ldy #1
0022D6  3  B1 68        	lda (z80_ix),y 	; time remaining.
0022D8  3  38           	sec
0022D9  3  E9 01        	sbc #1
0022DB  3  91 68        	sta (z80_ix),y
0022DD  3  D0 03        	bne :+
0022DF  3  4C 1F 23     	jmp trailk		; time to switch it off.
0022E2  3               :
0022E2  3  20 44 25     	jsr qrand		; get a random number.
0022E5  3  4A           	lsr a 			; x or y axis?
0022E6  3  90 03        	bcc :+
0022E8  3  4C 05 23     	jmp trailv		; use y.
0022EB  3               :
0022EB  3               ; Trail horizontal
0022EB  3               
0022EB  3  4A           	lsr a 			; which direction?
0022EC  3  90 03        	bcc :+
0022EE  3  4C FB 22     	jmp traill		; go left.
0022F1  3               :
0022F1  3               ; Trail right
0022F1  3               
0022F1  3  A0 05        	ldy #5
0022F3  3  B1 68        	lda (z80_ix),y
0022F5  3  18           	clc
0022F6  3  69 01        	adc #1	 		; go right.
0022F8  3  91 68        	sta (z80_ix),y
0022FA  3  60           	rts
0022FB  3               
0022FB  3               ; Trail left
0022FB  3               
0022FB  3               traill:
0022FB  3  A0 05        	ldy #5
0022FD  3  B1 68        	lda (z80_ix),y
0022FF  3  38           	sec
002300  3  E9 01        	sbc #1 			; go left.
002302  3  91 68        	sta (z80_ix),y
002304  3  60           	rts
002305  3               
002305  3               ; Trail vertical
002305  3               
002305  3               trailv:
002305  3  4A           	lsr a		 	; which direction?
002306  3  90 03        	bcc :+
002308  3  4C 15 23     	jmp trailu		; go up.
00230B  3               :
00230B  3               ; Trail down
00230B  3               
00230B  3  A0 03        	ldy #3
00230D  3  B1 68        	lda (z80_ix),y
00230F  3  18           	clc
002310  3  69 01        	adc #1 			; go down.
002312  3  91 68        	sta (z80_ix),y
002314  3  60           	rts
002315  3               
002315  3               ; Trail up
002315  3               
002315  3               trailu:
002315  3  A0 03        	ldy #3
002317  3  B1 68        	lda (z80_ix),y
002319  3  38           	sec
00231A  3  E9 01        	sbc #1 			; go up.
00231C  3  91 68        	sta (z80_ix),y
00231E  3  60           	rts
00231F  3               
00231F  3               ; Kill trail
00231F  3               
00231F  3               trailk:
00231F  3  A9 C8        	lda #200		; set off-screen to kill vapour trail.
002321  3  A0 03        	ldy #3
002323  3  91 68        	sta (z80_ix),y
002325  3  60           	rts
002326  3               
002326  3               ;----------------------------------------------------
002326  3               ; Create laser beam
002326  3               ;----------------------------------------------------
002326  3               
002326  3               laser:
002326  3  A0 01        	ldy #1
002328  3  B1 68        	lda (z80_ix),y 		; direction.
00232A  3  6A           	ror a 			; left or right?
00232B  3  B0 03        	bcs :+
00232D  3  4C 37 23     	jmp laserl		; move left.
002330  3               :
002330  3               ; Laser right
002330  3               
002330  3  A9 08        	lda #8			; distance to travel.
002332  3  85 63        	sta z80_b
002334  3  4C 3B 23     	jmp laserm		; move laser.
002337  3               
002337  3               ; Laser left
002337  3               
002337  3               laserl:
002337  3  A9 F8        	lda #248		; distance to travel.
002339  3  85 63        	sta z80_b
00233B  3               laserm:
00233B  3  A0 05        	ldy #5
00233D  3  B1 68        	lda (z80_ix),y		; x position.
00233F  3  18           	clc
002340  3  65 63        	adc z80_b		; add distance.
002342  3  91 68        	sta (z80_ix),y		; set new x coordinate.
002344  3               
002344  3               ; Test new block.
002344  3               
002344  3  85 rr        	sta dispx 		; set x for block collision detection purposes.
002346  3  A0 03        	ldy #3
002348  3  B1 68        	lda (z80_ix),y 		; get y.
00234A  3  85 rr        	sta dispy		; set coordinate for collision test.
00234C  3  20 AD 2F     	jsr tstbl 		; get block type there.
00234F  3  C9 02        	cmp #WALL		; is it solid?
002351  3  D0 03        	bne :+
002353  3  4C 1F 23     	jmp trailk		; yes, it cannot pass.
002356  3               :
002356  3               .if pflag .or dflag
002356  3  C9 04                cmp #FODDER             ; is it fodder?
002358  3  D0 06                bne :+
00235A  3  20 12 21             jsr fdchk               ; remove fodder block.
00235D  3  4C 1F 23             jmp trailk              ; destroy laser.
002360  3               :
002360  3               .endif
002360  3  60                   rts                     ; no, ignore it.
002361  3               
002361  3               ;----------------------------------------------------
002361  3               ; Dots mask
002361  3               ;----------------------------------------------------
002361  3               
002361  3  80 40 20 10  dots:	.byte 128,64,32,16,8,4,2,1
002365  3  08 04 02 01  
002369  3               
002369  3               
002369  3               ;----------------------------------------------------
002369  3               ; Plot, preserving de.
002369  3               ;----------------------------------------------------
002369  3               
002369  3               plotde:
002369  3  A5 65        	lda z80_d 		; put de on stack.
00236B  3  48           	pha
00236C  3  A5 64        	lda z80_e
00236E  3  48           	pha
00236F  3               
00236F  3  20 56 22     	jsr plot 		; plot pixel.
002372  3               
002372  3  68           	pla			; restore de from stack.
002373  3  85 64        	sta z80_e
002375  3  68           	pla
002376  3  85 65        	sta z80_d
002378  3               
002378  3  60           	rts
002379  3               
002379  3               ;----------------------------------------------------
002379  3               ; Shoot a laser.
002379  3               ;----------------------------------------------------
002379  3               
002379  3               shoot:
002379  3  85 62        	sta z80_c		; store direction in c register.
00237B  3  A0 08        	ldy #8
00237D  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00237F  3  18           	clc
002380  3               shoot1:
002380  3  69 07        	adc #(SPR_HGT/2-1)	; down 7 pixels.
002382  3  85 66        	sta z80_l 		; puty y coordinate in l.
002384  3               
002384  3  A0 09        	ldy #9
002386  3  B1 68        	lda (z80_ix),y 		; x coordinate in h.
002388  3  85 67        	sta z80_h
00238A  3               
00238A  3  A5 69        	lda z80_i		; store pointer to sprite.
00238C  3  48           	pha
00238D  3  A5 68        	lda z80_x
00238F  3  48           	pha
002390  3               
002390  3  20 B3 24     	jsr fpslot 		; find particle slot.
002393  3  B0 03        	bcs :+
002395  3  4C E3 23     	jmp vapou2		; failed, restore ix.
002398  3               :
002398  3  A9 00        	lda #0
00239A  3  A0 00        	ldy #0
00239C  3  91 68        	sta (z80_ix),y 		; set up a laser.
00239E  3               
00239E  3  A5 62        	lda z80_c
0023A0  3  A0 01        	ldy #1
0023A2  3  91 68        	sta (z80_ix),y 		; set the direction.
0023A4  3               
0023A4  3  A5 66        	lda z80_l
0023A6  3  A0 03        	ldy #3
0023A8  3  91 68        	sta (z80_ix),y		; set y coordinate.
0023AA  3               
0023AA  3  66 62        	ror z80_c		; check direction we want.
0023AC  3  90 03        	bcc :+
0023AE  3  4C BC 23     	jmp shootr		; shoot right.
0023B1  3               :
0023B1  3  A5 67        	lda z80_h		; X position.
0023B3  3               shoot0:
0023B3  3  29 F8        	and #248		; align on character boundary.
0023B5  3  A0 05        	ldy #5
0023B7  3  91 68        	sta (z80_ix),y		; set x coordinate.
0023B9  3  4C 08 24     	jmp vapou0 		; draw first image.
0023BC  3               shootr:
0023BC  3  A5 67        	lda z80_h		; x position.
0023BE  3  18           	clc
0023BF  3  69 0F        	adc #15			; look right.
0023C1  3  4C B3 23     	jmp shoot0		; align and continue.
0023C4  3               
0023C4  3               ;----------------------------------------------------
0023C4  3               ; Create a bit of vapour trail.
0023C4  3               ;----------------------------------------------------
0023C4  3               
0023C4  3               vapour:
0023C4  3  A5 69        	lda z80_i		; store pointer to sprite.
0023C6  3  48           	pha
0023C7  3  A5 68        	lda z80_x
0023C9  3  48           	pha
0023CA  3               
0023CA  3  A0 08        	ldy #8
0023CC  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0023CE  3  18           	clc
0023CF  3               vapou3:
0023CF  3  69 07        	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0023D1  3  85 66        	sta z80_l
0023D3  3               
0023D3  3  A0 09        	ldy #9
0023D5  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0023D7  3  69 07        	adc #7
0023D9  3  85 67        	sta z80_h
0023DB  3               
0023DB  3  20 B3 24     	jsr fpslot 		; find particle slot.
0023DE  3  90 03        	bcc :+
0023E0  3  4C EA 23     	jmp vapou1		; no, we can use it.
0023E3  3               :
0023E3  3               vapou2:
0023E3  3  68           	pla
0023E4  3  85 68        	sta z80_x
0023E6  3  68           	pla
0023E7  3  85 69        	sta z80_i
0023E9  3  60           	rts
0023EA  3               vapou1:
0023EA  3  A5 66        	lda z80_l
0023EC  3  A0 03        	ldy #3
0023EE  3  91 68        	sta (z80_ix),y		; set up y.
0023F0  3               
0023F0  3  A5 67        	lda z80_h
0023F2  3  A0 05        	ldy #5
0023F4  3  91 68        	sta (z80_ix),y 		; set up x coordinate.
0023F6  3               
0023F6  3  20 44 25     	jsr qrand		; get quick random number.
0023F9  3  29 0F        	and #15			; random time.
0023FB  3  18           	clc
0023FC  3  69 0F        	adc #15			; minimum time on screen.
0023FE  3  A0 01        	ldy #1
002400  3  91 68        	sta (z80_ix),y		; set time on screen.
002402  3               
002402  3  A9 01        	lda #1
002404  3  A0 00        	ldy #0
002406  3  91 68        	sta (z80_ix),y		; define particle as vapour trail.
002408  3               vapou0:
002408  3  20 20 22     	jsr chkxy		; plot first position.
00240B  3  4C E3 23     	jmp vapou2
00240E  3               
00240E  3               ;----------------------------------------------------
00240E  3               ; Create a user particle.
00240E  3               ;----------------------------------------------------
00240E  3               
00240E  3               ptusr:
00240E  3  85 60        	sta z80_f		; store timer.
002410  3               
002410  3  A0 08        	ldy #8
002412  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002414  3  18           	clc
002415  3  69 07        	adc #7			; mid-point of sprite.
002417  3  85 66        	sta z80_l
002419  3               
002419  3  A0 09        	ldy #9
00241B  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00241D  3  18           	clc
00241E  3  69 07        	adc #7			; mid-point of sprite.
002420  3  85 67        	sta z80_h
002422  3               
002422  3  20 B3 24     	jsr fpslot 		; find particle slot.
002425  3  B0 01        	bcs ptusr1
002427  3  60           	rts 			; out of slots, can't generate anything.
002428  3               ptusr1:
002428  3  A5 66        	lda z80_l
00242A  3  A0 03        	ldy #3
00242C  3  91 68        	sta (z80_ix),y 		; set up y.
00242E  3               
00242E  3  A5 67        	lda z80_h
002430  3  A0 05        	ldy #5
002432  3  91 68        	sta (z80_ix),y		; set up x coordinate.
002434  3               
002434  3  A5 60        	lda z80_f 		; restore timer.
002436  3  A0 01        	ldy #1
002438  3  91 68        	sta (z80_ix),y		; set time on screen.
00243A  3               
00243A  3  A9 07        	lda #7
00243C  3  A0 00        	ldy #0
00243E  3  91 68        	sta (z80_ix),y		; define particle as user particle.
002440  3               
002440  3  4C 20 22     	jmp chkxy		; plot first position.
002443  3               
002443  3               ;----------------------------------------------------
002443  3               ; Create a vertical or horizontal star.
002443  3               ;----------------------------------------------------
002443  3               
002443  3               star:
002443  3  A5 69        	lda z80_i		; store pointer to sprite.
002445  3  48           	pha
002446  3  A5 68        	lda z80_x
002448  3  48           	pha
002449  3               
002449  3  20 B3 24     	jsr fpslot 		; find particle slot.
00244C  3  B0 07        	bcs star7		; found one we can use.
00244E  3               star0:
00244E  3  68           	pla 			; restore sprite pointer.
00244F  3  85 68        	sta z80_x
002451  3  68           	pla
002452  3  85 69        	sta z80_i
002454  3  60           	rts 			; out of slots, can't generate anything.
002455  3               star7:
002455  3  A5 62        	lda z80_c		; direction.
002457  3  29 03        	and #3 			; is it left?
002459  3  D0 03        	bne :+
00245B  3  4C 8D 24     	jmp star1 		; yes, it's left.
00245E  3               :
00245E  3  C9 01        	cmp #1 			; is it right?
002460  3  D0 03        	bne :+
002462  3  4C 9D 24     	jmp star2 		; yes, it's right.
002465  3               :
002465  3  C9 02        	cmp #2 			; is it up?
002467  3  D0 03        	bne :+
002469  3  4C AA 24     	jmp star3 		; yes, it's up.
00246C  3               :
00246C  3  AC 2B 20     	ldy wntopx 		; get edge of screen.
00246F  3  C8           	iny			; down one pixel.
002470  3  98           	tya
002471  3               star8:
002471  3  A0 03        	ldy #3
002473  3  91 68        	sta (z80_ix),y 		; set y coord.
002475  3  20 44 25     	jsr qrand 		; get quick random number.
002478  3               star9:
002478  3  A0 05        	ldy #5
00247A  3  91 68        	sta (z80_ix),y		; set x position.
00247C  3               
00247C  3  A5 62        	lda z80_c		; direction.
00247E  3  29 03        	and #3			; zero to three.
002480  3  18           	clc
002481  3  69 03        	adc #3			; 3 to 6 for starfield.
002483  3  A0 00        	ldy #0
002485  3  91 68        	sta (z80_ix),y		; define particle as star.
002487  3  20 20 22     	jsr chkxy		; plot first position.
00248A  3  4C 4E 24     	jmp star0
00248D  3               star1:
00248D  3  20 44 25     	jsr qrand		; get quick random number.
002490  3  A0 03        	ldy #3
002492  3  91 68        	sta (z80_ix),y 		; set y coord.
002494  3               
002494  3  AD 2E 20     	lda wnrgtx 		; get edge of screen.
002497  3  18           	clc
002498  3  69 0F        	adc #15			; add width of sprite minus 1.
00249A  3  4C 78 24     	jmp star9
00249D  3               star2:
00249D  3  20 44 25     	jsr qrand 		; get quick random number.
0024A0  3  A0 03        	ldy #3
0024A2  3  91 68        	sta (z80_ix),y		; set y coord.
0024A4  3               
0024A4  3  AD 2C 20     	lda wnlftx		; get edge of screen.
0024A7  3  4C 78 24     	jmp star9
0024AA  3               star3:
0024AA  3  AD 2D 20     	lda wnbotx 		; get edge of screen.
0024AD  3  18           	clc
0024AE  3  69 0F        	adc #15 		; height of sprite minus one pixel.
0024B0  3  4C 71 24     	jmp star8
0024B3  3               
0024B3  3               ;----------------------------------------------------
0024B3  3               ; Find particle slot for lasers or vapour trail.
0024B3  3               ; can't use alternate accumulator.
0024B3  3               ;----------------------------------------------------
0024B3  3               
0024B3  3               fpslot:
0024B3  3  A9 00        	lda #<SHRAPN 		; shrapnel table.
0024B5  3  85 68        	sta z80_x
0024B7  3  A9 E2        	lda #>SHRAPN
0024B9  3  85 69        	sta z80_i
0024BB  3               
0024BB  3  A9 37        	lda #NUMSHR		; number of pieces in table.
0024BD  3  85 63        	sta z80_b
0024BF  3               fpslt0:
0024BF  3  A0 00        	ldy #0
0024C1  3  B1 68        	lda (z80_ix),y		; get type.
0024C3  3  0A           	asl a  			; is this slot in use?
0024C4  3  90 01        	bcc :+
0024C6  3  60           	rts			; no, we can use it.
0024C7  3               :
0024C7  3  18           	clc			; point to more shrapnel.
0024C8  3  A5 68        	lda z80_x
0024CA  3  69 06        	adc #SHRSIZ
0024CC  3  85 68        	sta z80_x
0024CE  3  90 02        	bcc :+
0024D0  3  E6 69        	inc z80_i
0024D2  3               :
0024D2  3  C6 63        	dec z80_b		; repeat for all shrapnel.
0024D4  3  D0 E9        	bne fpslt0
0024D6  3               
0024D6  3  18           	clc
0024D7  3  60           	rts 			; out of slots, can't generate anything.
0024D8  3               
0024D8  3               ;----------------------------------------------------
0024D8  3               ; Create an explosion at sprite position.
0024D8  3               ;----------------------------------------------------
0024D8  3               
0024D8  3               explod:
0024D8  3  85 62        	sta z80_c 		; particles to create.
0024DA  3               
0024DA  3  A5 69        	lda z80_i 		; store pointer to sprite.
0024DC  3  48           	pha
0024DD  3  A5 68        	lda z80_x
0024DF  3  48           	pha
0024E0  3               
0024E0  3  A0 08        	ldy #8
0024E2  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0024E4  3  85 66        	sta z80_l
0024E6  3  A0 09        	ldy #9
0024E8  3  B1 68        	lda (z80_ix),y		; x coordinate.
0024EA  3  85 67        	sta z80_h
0024EC  3               
0024EC  3  A9 00        	lda #<SHRAPN		; shrapnel table.
0024EE  3  85 68        	sta z80_x
0024F0  3  A9 E2        	lda #>SHRAPN
0024F2  3  85 69        	sta z80_i
0024F4  3               
0024F4  3  A9 37        	lda #NUMSHR		; number of pieces in table.
0024F6  3  85 rr        	sta explcnt
0024F8  3               expld0:
0024F8  3  A0 00        	ldy #0
0024FA  3  B1 68        	lda (z80_ix),y		; get type.
0024FC  3  0A           	asl a 			; is this slot in use?
0024FD  3  B0 16        	bcs expld1		; no, we can use it.
0024FF  3               expld2:
0024FF  3  18           	clc
002500  3  A5 68        	lda z80_x
002502  3  69 06        	adc #SHRSIZ
002504  3  85 68        	sta z80_x
002506  3  90 02        	bcc :+
002508  3  E6 69        	inc z80_i
00250A  3               :
00250A  3  C6 rr        	dec explcnt		; repeat for all shrapnel.
00250C  3  D0 EA        	bne expld0
00250E  3               expld3:
00250E  3  68           	pla			; restore sprite pointer.
00250F  3  85 68        	sta z80_x
002511  3  68           	pla
002512  3  85 69        	sta z80_i
002514  3  60           	rts 			; out of slots, can't generate any more.
002515  3               
002515  3               expld1:
002515  3  A5 62        	lda z80_c		; shrapnel counter.
002517  3  29 0F        	and #15			; 0 to 15.
002519  3  18           	clc			; add to x.
00251A  3  65 66        	adc z80_l
00251C  3  A0 03        	ldy #3
00251E  3  91 68        	sta (z80_ix),y		; y coord.
002520  3               
002520  3  A5 rr        	lda seed3 		; crap random number.
002522  3  29 0F        	and #15			; 0 to 15.
002524  3  18           	clc 			; add to y.
002525  3  65 67        	adc z80_h
002527  3  A0 05        	ldy #5
002529  3  91 68        	sta (z80_ix),y		; x coord.
00252B  3               
00252B  3  A9 02        	lda #2
00252D  3  A0 00        	ldy #0
00252F  3  91 68        	sta (z80_ix),y		; switch it on.
002531  3               
002531  3  20 20 22     	jsr chkxy		; plot first position.
002534  3  20 44 25     	jsr qrand		; quick random angle.
002537  3  29 3C        	and #60 		; keep within range.
002539  3  A0 01        	ldy #1
00253B  3  91 68        	sta (z80_ix),y		; angle.
00253D  3               
00253D  3  C6 62        	dec z80_c		; one less piece of shrapnel to generate.
00253F  3  D0 BE        	bne expld2 		; back to main explosion loop.
002541  3  4C 0E 25     	jmp expld3 		; restore sprite pointer and exit.
002544  3               
002544  3               ;explcnt:	.byte 0
002544  3               
002544  3               ;----------------------------------------------------
002544  3               ; Quick random
002544  3               ;----------------------------------------------------
002544  3               
002544  3               qrand:
002544  3  20 FF 2F     	jsr random		; r register.
002547  3  45 rr        	eor seed3		; combine with seed.
002549  3  85 rr        	sta seed3 		; new seed.
00254B  3  60           	rts
00254C  3               
00254C  3               ;seed3:	.byte 0
00254C  3               
00254C  3               ;----------------------------------------------------
00254C  3               ; Display all shrapnel.
00254C  3               ;----------------------------------------------------
00254C  3               
00254C  3               dshrp:
00254C  3  A9 69        	lda #<plotde		; display routine.
00254E  3  8D 4B 21     	sta proshx+1
002551  3  A9 23        	lda #>plotde
002553  3  8D 4C 21     	sta proshx+2
002556  3  20 39 21     	jsr proshr		; process shrapnel.
002559  3               
002559  3  A9 5F        	lda #<prosh1		; processing routine.
00255B  3  8D 4B 21     	sta proshx+1
00255E  3  A9 21        	lda #>prosh1
002560  3  8D 4C 21     	sta proshx+2
002563  3  60           	rts
002564  3               
002564  3               ;------------------------------------------------------
002564  3               ; Particle engine.
002564  3               ;
002564  3               ; Init particle data for 55 particles in SHRAPN table.
002564  3               ; Every particle has 6 bytes.
002564  3               ;
002564  3               ; global:	-
002564  3               ; local:	x,y,hl
002564  3               ; calls:	-
002564  3               ;------------------------------------------------------
002564  3               
002564  3               inishr:
002564  3  A9 00        	lda #<SHRAPN 		; table.
002566  3  85 66        	sta z80_l
002568  3  A9 E2        	lda #>SHRAPN
00256A  3  85 67        	sta z80_h
00256C  3               
00256C  3  A0 00        	ldy #0
00256E  3  A2 37        	ldx #NUMSHR		; shrapnel pieces to process.
002570  3               inish0:
002570  3  A9 FF        	lda #255 		; kill the shrapnel.
002572  3  91 66        	sta (z80_hl),y
002574  3               
002574  3  18           	clc 			; point there.
002575  3  A5 66        	lda z80_l
002577  3  69 06        	adc #SHRSIZ		; distance to next.
002579  3  85 66        	sta z80_l
00257B  3  90 02        	bcc :+
00257D  3  E6 67        	inc z80_h
00257F  3               :
00257F  3  CA           	dex
002580  3  D0 EE        	bne inish0 		; round again.
002582  3  60           	rts
002583  3               
002583  3               ;------------------------------------------------------
002583  3               ; Check for collision between laser and sprite.
002583  3               ;------------------------------------------------------
002583  3               
002583  3               lcol:
002583  3  A9 00        	lda #<SHRAPN		; shrapnel table.
002585  3  85 66        	sta z80_l
002587  3  A9 E2        	lda #>SHRAPN
002589  3  85 67        	sta z80_h
00258B  3               
00258B  3  A9 37        	lda #NUMSHR		; number of pieces in table.
00258D  3  85 63        	sta z80_b
00258F  3               lcol0:
00258F  3  A0 00        	ldy #0
002591  3  B1 66        	lda (z80_hl),y 		; get type.
002593  3  F0 10        	beq lcol1		; yes, check collision.
002595  3               lcol3:
002595  3  18           	clc			; point to more shrapnel.
002596  3  A5 66        	lda z80_l
002598  3  69 06        	adc #SHRSIZ
00259A  3  85 66        	sta z80_l
00259C  3  90 02        	bcc :+
00259E  3  E6 67        	inc z80_h
0025A0  3               :
0025A0  3  C6 63        	dec z80_b		; repeat for all shrapnel.
0025A2  3  D0 EB        	bne lcol0
0025A4  3  60           	rts 			; no collision, carry not set.
0025A5  3               lcol1:
0025A5  3  A0 03        	ldy #3
0025A7  3  B1 66        	lda (z80_hl),y		; get y.
0025A9  3  38           	sec
0025AA  3  A0 08        	ldy #8
0025AC  3  F1 68        	sbc (z80_ix),y		; subtract sprite y.
0025AE  3               lcolh:
0025AE  3  C9 10        	cmp #SPR_HGT 		; within range?
0025B0  3  90 03        	bcc :+
0025B2  3  4C C5 25     	jmp lcol2		; no, missed.
0025B5  3               :
0025B5  3  A0 05        	ldy #5
0025B7  3  B1 66        	lda (z80_hl),y 		; get x.
0025B9  3  38           	sec
0025BA  3  A0 09        	ldy #9
0025BC  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
0025BE  3  C9 10        	cmp #16			; within range?
0025C0  3  B0 03        	bcs :+
0025C2  3  4C C8 25     	jmp lcol4 		; yes, collision occurred.
0025C5  3               :
0025C5  3               lcol2:
0025C5  3  4C 95 25     	jmp lcol3
0025C8  3               lcol4:
0025C8  3  38           	sec
0025C9  3  60           	rts 			; return with carry set for collision.
0025CA  3               .endif
0025CA  3               
0025CA  3               ;------------------------------------------------------
0025CA  3               ; Main game engine code starts here.
0025CA  3               ; After initialisation, mloop is the main loop
0025CA  3               ;------------------------------------------------------
0025CA  3               
0025CA  3               game:
0025CA  3               
0025CA  3               ; Set up screen address table.
0025CA  3               
0025CA  3               setsat:
0025CA  3  A9 00        	lda #<ScreenAddr		; start of screen.
0025CC  3  85 rr        	sta scraddr
0025CE  3  A9 E4        	lda #>ScreenAddr
0025D0  3  85 rr        	sta scraddr+1
0025D2  3               
0025D2  3  A0 00        	ldy #0			; vertical lines on screen.
0025D4  3               setsa0:
0025D4  3  A5 rr        	lda scraddr
0025D6  3  99 00 E0     	sta SCADTB_lb,y		; write low byte.
0025D9  3  A5 rr        	lda scraddr+1
0025DB  3  C0 C0        	cpy #192		; vertical lines on screen.
0025DD  3  90 02        	bcc :+
0025DF  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
0025E1  3               :
0025E1  3  99 00 E1     	sta SCADTB_hb,y		; write high byte.
0025E4  3  20 9C 34     	jsr nline		; next line down.
0025E7  3  C8           	iny			; next position in table.
0025E8  3  D0 EA        	bne setsa0
0025EA  3               
0025EA  3               ; Init graphics mode
0025EA  3               
0025EA  3  A9 F0        	lda #ScrMode		; graphics mode
0025EC  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
0025EF  3  20 11 21     	jsr setpal 		; set up palette.
0025F2  3               
0025F2  3               ; Init AtoMMC joystick
0025F2  3  20 A2 89     	jsr joyinit		; AtoMMC joystick on PORT B
0025F5  3               
0025F5  3               rpblc2:
0025F5  3               .if pflag
0025F5  3  20 64 25     	jsr inishr 		; initialise particle engine.
0025F8  3               .endif
0025F8  3               evintr:
0025F8  3  20 65 48     	jsr evnt12 		; call intro/menu event.
0025FB  3               
0025FB  3  A9 02        	lda #WALL 		; write default property.
0025FD  3  A2 00        	ldx #0
0025FF  3               clrmap:
0025FF  3  9D 00 DD     	sta MAP,x 		; block properties.
002602  3  9D 00 DE     	sta MAP+256,x
002605  3  9D 00 DF     	sta MAP+512,x
002608  3  E8           	inx			; next byte.
002609  3  D0 F4        	bne clrmap
00260B  3               .if oflag
00260B  3  20 52 20     	jsr iniob 		; initialise objects.
00260E  3               .endif
00260E  3  A9 00        	lda #0			; put zero in accumulator.
002610  3  85 rr        	sta gamwon		; reset game won flag.
002612  3               
002612  3  20 81 27     	jsr inisc 		; init the score.
002615  3               mapst:
002615  3  AD 27 3A     	lda stmap 		; start position on map.
002618  3  8D C7 39     	sta roomtb		; set up position in table, if there is one.
00261B  3               
00261B  3               inipbl:
00261B  3               .if aflag
00261B  3               	lda #<eop		; reset blockpointer
00261B  3               	sta pbptr
00261B  3               	lda #>eop
00261B  3               	sta pbptr+1
00261B  3               .endif
00261B  3  20 AF 35     	jsr initsc 		; set up first screen.
00261E  3               
00261E  3  A9 B6        	lda #<ssprit 		; default to spare sprite in table.
002620  3  85 68        	sta z80_x
002622  3  A9 39        	lda #>ssprit
002624  3  85 69        	sta z80_i
002626  3               evini:
002626  3  20 DE 48     	jsr evnt13 		; initialisation.
002629  3               
002629  3               ; Two restarts.
002629  3               ; First restart - clear all sprites and initialise everything.
002629  3               
002629  3               rstrt:
002629  3  20 21 27     	jsr rsevt 		; restart events.
00262C  3  20 45 20     	jsr xspr 		; clear sprite table.
00262F  3  20 1B 37     	jsr sprlst 		; fetch pointer to screen sprites.
002632  3  20 A4 37     	jsr ispr 		; initialise sprite table.
002635  3               
002635  3  4C 44 26     	jmp rstrt0
002638  3               
002638  3               ; Second restart - clear all but player, and don't initialise him.
002638  3               
002638  3               rstrtn:
002638  3  20 21 27     	jsr rsevt		; restart events.
00263B  3  20 48 37     	jsr nspr 		; clear all non-player sprites.
00263E  3  20 1B 37     	jsr sprlst 		; fetch pointer to screen sprites.
002641  3  20 E1 37     	jsr kspr 		; initialise sprite table, no more players.
002644  3               
002644  3               ; Set up the player and/or enemy sprites.
002644  3               
002644  3               rstrt0:
002644  3  A9 00        	lda #0 			; zero in accumulator.
002646  3  85 rr        	sta nexlev 		; reset next level flag.
002648  3  85 rr        	sta restfl 		; reset restart flag.
00264A  3  85 rr        	sta deadf 		; reset dead flag.
00264C  3  20 A7 2C     	jsr droom 		; show screen layout.
00264F  3               rpblc0:
00264F  3               .if pflag
00264F  3  20 64 25     	jsr inishr 		; initialise particle engine.
002652  3               .endif
002652  3               .if aflag
002652  3               	jsr rbloc		; draw blocks for this screen
002652  3               .endif
002652  3               .if oflag
002652  3  20 D1 27     	jsr shwob		; draw objects.
002655  3               .endif
002655  3               
002655  3  A9 EA        	lda #<sprtab 		; address of sprite table, even sprites.
002657  3  85 68        	sta z80_x
002659  3  A9 38        	lda #>sprtab
00265B  3  85 69        	sta z80_i
00265D  3  20 8D 32     	jsr dspr 		; display sprites.
002660  3               
002660  3  A9 FB        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002662  3  85 68        	sta z80_x
002664  3  A9 38        	lda #>(sprtab+TABSIZ)
002666  3  85 69        	sta z80_i
002668  3  20 8D 32     	jsr dspr 		; display sprites.
00266B  3               mloop:
00266B  3  20 84 20     	jsr vsync 		; synchronise with display.
00266E  3  A9 EA        	lda #<sprtab 		; address of sprite table, even sprites.
002670  3  85 68        	sta z80_x
002672  3  A9 38        	lda #>sprtab
002674  3  85 69        	sta z80_i
002676  3  20 8D 32     	jsr dspr 		; display even sprites.
002679  3               
002679  3               ;	jsr plsnd 		; play sounds.
002679  3               
002679  3  20 39 21     	jsr proshr
00267C  3  A9 FB        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00267E  3  85 68        	sta z80_x
002680  3  A9 38        	lda #>(sprtab+TABSIZ)
002682  3  85 69        	sta z80_i
002684  3  20 8D 32     	jsr dspr 		; display odd sprites.
002687  3               
002687  3  A9 B6        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
002689  3  85 68        	sta z80_x
00268B  3  A9 39        	lda #>(ssprit)
00268D  3  85 69        	sta z80_i
00268F  3               evlp1:
00268F  3  20 CB 47     	jsr evnt10 		; called once per main loop.
002692  3  20 0B 32     	jsr pspr 		; process sprites.
002695  3               
002695  3               ; Main loop events.
002695  3               
002695  3  A9 B6        	lda #<ssprit 		; point to spare sprite for spawning purposes.
002697  3  85 68        	sta z80_x
002699  3  A9 39        	lda #>ssprit
00269B  3  85 69        	sta z80_i
00269D  3               evlp2:
00269D  3  20 E6 47     	jsr evnt11 		; called once per main loop.
0026A0  3               bsortx:
0026A0  3  20 81 31     	jsr bsort 		; sort sprites.
0026A3  3               
0026A3  3  A5 rr        	lda nexlev		; finished level flag.
0026A5  3  F0 03        	beq :+
0026A7  3  4C CF 26     	jmp newlev		; is set, go to next level.
0026AA  3               :
0026AA  3  A5 rr        	lda gamwon		; finished game flag.
0026AC  3  F0 03        	beq :+
0026AE  3  4C DE 26     	jmp evwon		; is set, finish the game.
0026B1  3               :
0026B1  3  A5 rr        	lda restfl 		; finished level flag.
0026B3  3  C9 01        	cmp #1			; has it been set?
0026B5  3  D0 03        	bne :+
0026B7  3  4C 29 26     	jmp rstrt		; yes, go to next level.
0026BA  3               :
0026BA  3  C9 02        	cmp #2			; has it been set?
0026BC  3  D0 03        	bne :+
0026BE  3  4C 38 26     	jmp rstrtn		; yes, go to next level.
0026C1  3               :
0026C1  3  A5 rr        	lda deadf 		; dead flag.
0026C3  3  F0 03        	beq :+
0026C5  3  4C E4 26     	jmp pdead		; yes, player dead.
0026C8  3               :
0026C8  3               ; back to start of main loop.
0026C8  3               
0026C8  3  E6 rr        	inc frmno
0026CA  3  E6 rr        	inc clock
0026CC  3  4C 6B 26     	jmp mloop		; switched to a jmp mloop during test mode.
0026CF  3               
0026CF  3               ;----------------------------------------------------------
0026CF  3               ; Read blocks from list and update screen accordingly.
0026CF  3               ;----------------------------------------------------------
0026CF  3               
0026CF  3               .if aflag
0026CF  3               rbloc:
0026CF  3               	lda #<eop		; reset temp blockpointer
0026CF  3               	sta pbbuf
0026CF  3               	lda #>eop
0026CF  3               	sta pbbuf+1
0026CF  3               
0026CF  3               rbloc2:
0026CF  3               	lda pbbuf			; check for last block
0026CF  3               	cmp pbptr
0026CF  3               	bne rbloc1
0026CF  3               	lda pbbuf+1
0026CF  3               	cmp pbptr+1
0026CF  3               	bne rbloc1
0026CF  3               	rts
0026CF  3               rbloc1:
0026CF  3               	ldy #0
0026CF  3               	lda (pbbuf),y		; check if block for this scno
0026CF  3               	cmp scno
0026CF  3               	bne rbloc0		; if not, skip
0026CF  3               	iny
0026CF  3               	lda (pbbuf),y		; get y
0026CF  3               	sta dispy
0026CF  3               	iny
0026CF  3               	lda (pbbuf),y		; get x
0026CF  3               	sta dispx
0026CF  3               	iny
0026CF  3               	lda (pbbuf),y		; get blocknr
0026CF  3               	jsr pattr2		; draw block
0026CF  3               rbloc0:
0026CF  3               	clc			; point to next block
0026CF  3               	lda pbbuf
0026CF  3               	adc #4
0026CF  3               	sta pbbuf
0026CF  3               	bcc rbloc2
0026CF  3               	inc pbbuf+1
0026CF  3               	jmp rbloc2
0026CF  3               .endif
0026CF  3               
0026CF  3               ;----------------------------------------------------------
0026CF  3               ; New level
0026CF  3               ;----------------------------------------------------------
0026CF  3               
0026CF  3               ;.repeat 270
0026CF  3               ;  .byte 0
0026CF  3               ;.endrep
0026CF  3               
0026CF  3               newlev:
0026CF  3  A5 rr        	lda scno 			; current screen.
0026D1  3  18           	clc
0026D2  3  69 01        	adc #1				; next screen.
0026D4  3  CD 58 7E     	cmp numsc			; total number of screens.
0026D7  3  B0 05        	bcs evwon			; yes, game finished.
0026D9  3  85 rr        	sta scno			; set new level number.
0026DB  3  4C 29 26     	jmp rstrt			; restart, clearing all aliens.
0026DE  3               
0026DE  3               evwon:
0026DE  3  20 AB 49     	jsr evnt18		 	; game completed.
0026E1  3  4C F6 26     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0026E4  3               
0026E4  3               ;----------------------------------------------------------
0026E4  3               ; Player dead.
0026E4  3               ;----------------------------------------------------------
0026E4  3               
0026E4  3               ;.repeat 258
0026E4  3               ;  .byte 0
0026E4  3               ;.endrep
0026E4  3               
0026E4  3               pdead:
0026E4  3  A9 00        	lda #0				; zeroise accumulator.
0026E6  3  85 rr        	sta deadf			; reset dead flag.
0026E8  3               evdie:
0026E8  3  20 75 49     	jsr evnt16 			; death subroutine.
0026EB  3  A5 rr        	lda numlif			; number of lives.
0026ED  3  F0 03        	beq :+
0026EF  3  4C 29 26     	jmp rstrt 			; restart game.
0026F2  3               :
0026F2  3               evfail:
0026F2  3  20 8A 49     	jsr evnt17 			; failure event.
0026F5  3  60           	rts			; restart game
0026F6  3               
0026F6  3               ;----------------------------------------------------------
0026F6  3               ; Tidy things up
0026F6  3               ;----------------------------------------------------------
0026F6  3               
0026F6  3               ;.repeat 291
0026F6  3               ;  .byte 0
0026F6  3               ;.endrep
0026F6  3               
0026F6  3               tidyup:
0026F6  3  A0 00        	ldy #0				; digits to check.
0026F8  3               tidyu2:
0026F8  3  B9 8B 29     	lda score,y 			; get score digit.
0026FB  3  CD 91 29     	cmp hiscor 			; are we larger than high score digit?
0026FE  3  90 07        	bcc tidyu0			; high score is bigger.
002700  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
002702  3  C8           	iny				; next digit of high score.
002703  3  C0 06        	cpy #6
002705  3  D0 F1        	bne tidyu2			; repeat for all digits
002707  3               tidyu0:
002707  3  A9 8B        	lda #<score			; return pointing to score.
002709  3  85 62        	sta z80_c
00270B  3  A9 29        	lda #>score
00270D  3  85 63        	sta z80_b
00270F  3  60           	rts
002710  3               tidyu1:
002710  3  A0 05        	ldy #5
002712  3               tidyu3:
002712  3  B9 8B 29     	lda score,y			; score.
002715  3  99 91 29     	sta hiscor,y			; high score.
002718  3  88           	dey
002719  3  10 F7        	bpl tidyu3 			; copy score to high score.
00271B  3               evnewh:
00271B  3  20 B1 49     	jsr evnt19			; new high score event.
00271E  3  4C 07 27     	jmp tidyu0			; tidy up.
002721  3               
002721  3               ;--------------------------------------------------
002721  3               ; Restart event.
002721  3               ;--------------------------------------------------
002721  3               
002721  3               rsevt:
002721  3  A9 B6        	lda #<ssprit 			; default to spare element in table.
002723  3  85 68        	sta z80_x
002725  3  A9 39        	lda #>ssprit
002727  3  85 69        	sta z80_i
002729  3               evrs:
002729  3  4C 1A 49     	jmp evnt14	 		; call restart event.
00272C  3               
00272C  3               ;------------------------------------------------------------------
00272C  3               ; Copy number passed in a to string position bc, right-justified.
00272C  3               ;
00272C  3               ; Input:
00272C  3               ;  A  = number
00272C  3               ;  BC = string address
00272C  3               ;
00272C  3               ; Output:
00272C  3               ;  BC = string with number
00272C  3               ;-----------------------------------------------------------------
00272C  3               
00272C  3               num2ch:
00272C  3  85 65        	sta z80_d		; Save number
00272E  3               
00272E  3  A9 00        	lda #0
002730  3  85 rr        	sta flag
002732  3               numdg3:
002732  3  A2 64        	ldx #100		; hundreds column.
002734  3  86 64        	stx z80_e
002736  3  20 46 27     	jsr numdg		; show digit.
002739  3               numdg2:
002739  3  A2 0A        	ldx #10			; tens column.
00273B  3  86 64        	stx z80_e
00273D  3  20 46 27     	jsr numdg		; show digit.
002740  3               
002740  3  E6 rr        	inc flag
002742  3  A2 01        	ldx #1			; units column.
002744  3  86 64        	stx z80_e
002746  3               numdg:
002746  3  A9 30        	lda #48			; clear digit.
002748  3  85 61        	sta z80_a
00274A  3               numdg1:
00274A  3  A5 65        	lda z80_d
00274C  3  C5 64        	cmp z80_e
00274E  3  90 0E        	bcc numdg0		; nothing to show.
002750  3  38           	sec
002751  3  A5 65        	lda z80_d
002753  3  E5 64        	sbc z80_e		; subtract from column.
002755  3  85 65        	sta z80_d
002757  3  E6 61        	inc z80_a		; increment digit.
002759  3  E6 rr        	inc flag
00275B  3  4C 4A 27     	jmp numdg1		; repeat until column is zero.
00275E  3               numdg0:
00275E  3  A0 00        	ldy #0
002760  3  A5 61        	lda z80_a
002762  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002764  3  A5 rr        	lda flag
002766  3  F0 06        	beq :+
002768  3  E6 62        	inc z80_c		; next buffer position.
00276A  3  D0 02        	bne :+
00276C  3  E6 63        	inc z80_b
00276E  3               :
00276E  3  60           	rts
00276F  3               num2dd:
00276F  3  85 65        	sta z80_d		; Save number
002771  3               
002771  3  A9 01        	lda #1
002773  3  85 rr        	sta flag
002775  3               
002775  3  4C 39 27     	jmp numdg2
002778  3               num2td:
002778  3  85 65        	sta z80_d		; Save number
00277A  3               
00277A  3  A9 01        	lda #1
00277C  3  85 rr        	sta flag
00277E  3  4C 32 27     	jmp numdg3
002781  3               
002781  3               ;flag:	.byte 0
002781  3               
002781  3               ;---------------------------------------------------------
002781  3               ; Reset score to "000000"
002781  3               ;---------------------------------------------------------
002781  3               
002781  3               inisc:
002781  3  A9 30        	lda #'0'
002783  3  A2 05        	ldx #5			; digits to initialise.
002785  3               inisc0:
002785  3  9D 8B 29     	sta score,x 		; write zero digit.
002788  3  CA           	dex			; next column.
002789  3  10 FA        	bpl inisc0		; repeat for all digits.
00278B  3               
00278B  3  60           	rts
00278C  3               
00278C  3               ;-----------------------------------------------------
00278C  3               ; Multiply h by d and return in hl.
00278C  3               ;
00278C  3               ; Input:
00278C  3               ;  H = first number
00278C  3               ;  D = second number
00278C  3               ;
00278C  3               ; Output:
00278C  3               ;  HL = result H x D
00278C  3               ;-----------------------------------------------------
00278C  3               
00278C  3               imul:
00278C  3  A5 65        	lda z80_d		; HL = H * D
00278E  3  85 64        	sta z80_e
002790  3  A5 67        	lda z80_h
002792  3  85 62        	sta z80_c		; make c first multiplier.
002794  3               imul0:
002794  3  A9 00        	lda #0			; zeroise total.
002796  3  85 66        	sta z80_l
002798  3  85 67        	sta z80_h
00279A  3               
00279A  3  A5 67        	lda z80_h
00279C  3  85 65        	sta z80_d		; zeroise high byte.
00279E  3               
00279E  3  A9 08        	lda #8			; repeat 8 times.
0027A0  3  85 63        	sta z80_b
0027A2  3               imul1:
0027A2  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
0027A4  3  90 0E        	bcc imul2		; wasn't set.
0027A6  3  18           	clc			; bit was set, so add de.
0027A7  3  A5 66        	lda z80_l
0027A9  3  65 64        	adc z80_e
0027AB  3  85 66        	sta z80_l
0027AD  3  A5 67        	lda z80_h
0027AF  3  65 65        	adc z80_d
0027B1  3  85 67        	sta z80_h
0027B3  3  18           	clc 			; reset carry.
0027B4  3               imul2:
0027B4  3  06 64        	asl z80_e 		; shift de 1 bit left.
0027B6  3  26 65        	rol z80_d
0027B8  3  C6 63        	dec z80_b
0027BA  3  D0 E6        	bne imul1		; repeat 8 times.
0027BC  3               
0027BC  3  60           	rts
0027BD  3               
0027BD  3               ;-----------------------------------------------
0027BD  3               ; Divide d by e and return in d, remainder in a.
0027BD  3               ;
0027BD  3               ; Input:
0027BD  3               ;  D = first number
0027BD  3               ;  E = second number
0027BD  3               ;
0027BD  3               ; Output:
0027BD  3               ;  D = result D/E
0027BD  3               ;  A = remainder
0027BD  3               ;-----------------------------------------------
0027BD  3               
0027BD  3               idiv:
0027BD  3  A9 00        	lda #0
0027BF  3  A0 08        	ldy #8		 	; bits to shift.
0027C1  3  06 65        	asl z80_d
0027C3  3               idiv0:
0027C3  3  2A           	rol a 			; multiply d by 2.
0027C4  3  C5 64        	cmp z80_e 		; test if e is smaller.
0027C6  3  90 02        	bcc idiv1		; e is greater, no division this time.
0027C8  3  E5 64        	sbc z80_e		; subtract it.
0027CA  3               idiv1:
0027CA  3  26 65        	rol z80_d		; rotate into d.
0027CC  3  88           	dey
0027CD  3  D0 F4        	bne idiv0		; repeat
0027CF  3  60           	rts
0027D0  3               
0027D0  3               ;---------------------------------------------------
0027D0  3               ; Play AY sound effect
0027D0  3               ;---------------------------------------------------
0027D0  3               
0027D0  3               plsnd:
0027D0  3  60           	rts
0027D1  3               
0027D1  3               ;---------------------------------------------------
0027D1  3               ; Objects handling.
0027D1  3               ; 32 bytes for image
0027D1  3               ; 3 for room, y and x
0027D1  3               ; 3 for starting room, y and x.
0027D1  3               ; 254 = disabled.
0027D1  3               ; 255 = object in player"s pockets.
0027D1  3               ;---------------------------------------------------
0027D1  3               
0027D1  3               ;---------------------------------------------------
0027D1  3               ; Show items present.
0027D1  3               ;---------------------------------------------------
0027D1  3               
0027D1  3               .if oflag
0027D1  3               shwob:
0027D1  3  A9 02        	lda #<objdta 			; objects table.
0027D3  3  85 66        	sta z80_l
0027D5  3  A9 80        	lda #>objdta
0027D7  3  85 67        	sta z80_h
0027D9  3               
0027D9  3  AD 2A 20     	lda numob 			; number of objects in the game.
0027DC  3  85 rr        	sta sprcnt
0027DE  3               shwob0:
0027DE  3  A0 20        	ldy #32 			; distance to room number.
0027E0  3  B1 66        	lda (z80_hl),y 			; same as an item?
0027E2  3  C5 rr        	cmp scno 			; current location.
0027E4  3  D0 03        	bne :+
0027E6  3  20 FB 27     	jsr dobj 			; yes, display object.
0027E9  3               :
0027E9  3  18           	clc
0027EA  3  A5 66        	lda z80_l
0027EC  3  69 26        	adc #38 			; distance to next item.
0027EE  3  85 66        	sta z80_l
0027F0  3  A5 67        	lda z80_h
0027F2  3  69 00        	adc #0
0027F4  3  85 67        	sta z80_h	 		; point to it.
0027F6  3  C6 rr        	dec sprcnt
0027F8  3  D0 E4        	bne shwob0 			; repeat for others.
0027FA  3  60           	rts
0027FB  3               
0027FB  3               ;---------------------------------------------------
0027FB  3               ; Display object.
0027FB  3               ; hl must point to object's start address.
0027FB  3               ;
0027FB  3               ; Input:
0027FB  3               ;  HL = object address
0027FB  3               ;---------------------------------------------------
0027FB  3               
0027FB  3               dobj:
0027FB  3  A0 21        	ldy #33
0027FD  3  B1 66        	lda (z80_hl),y 			; point to y.
0027FF  3  85 rr        	sta dispy
002801  3  C8           	iny
002802  3  B1 66        	lda (z80_hl),y 			; point to x.
002804  3  85 rr        	sta dispx
002806  3               dobj1:
002806  3  4C EF 2B     	jmp sprite 			; draw this sprite.
002809  3               
002809  3               ;--------------------------------------
002809  3               ; Remove an object.
002809  3               ;
002809  3               ; Input:
002809  3               ;  A = object number
002809  3               ;--------------------------------------
002809  3               
002809  3               remob:
002809  3  CD 2A 20     	cmp numob			; number of objects in game.
00280C  3  90 01        	bcc :+				; are we checking past the end?
00280E  3  60           	rts				; yes, can't get non-existent item.
00280F  3               :
00280F  3  48           	pha				; remember object.
002810  3  20 1E 28     	jsr getob			; pick it up if we haven't already got it.
002813  3  68           	pla				; retrieve object number.
002814  3  20 4D 28     	jsr gotob			; get its address.
002817  3  A9 FE        	lda #254
002819  3  A0 20        	ldy #32
00281B  3  91 66        	sta (z80_hl),y			; remove it.
00281D  3  60           	rts
00281E  3               
00281E  3               ;---------------------------------------------------
00281E  3               ; Pick up object number held in the accumulator.
00281E  3               ;
00281E  3               ; Input:
00281E  3               ;  A = object number
00281E  3               ;---------------------------------------------------
00281E  3               
00281E  3               getob:
00281E  3  CD 2A 20     	cmp numob 		; number of objects in game.
002821  3  90 01        	bcc :+			; are we checking past the end?
002823  3  60           	rts			; yes, can't get non-existent item.
002824  3               :
002824  3  20 4D 28     	jsr gotob 		; check if we already have it.
002827  3  C9 FF        	cmp #255
002829  3  D0 01        	bne :+
00282B  3  60           	rts			; we already do.
00282C  3               :
00282C  3  A0 20        	ldy #32
00282E  3  B1 66        	lda (z80_hl),y		; is it on this screen?
002830  3  C5 rr        	cmp scno 		; current screen.
002832  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
002834  3               
002834  3  A9 FF        	lda #255
002836  3  91 66        	sta (z80_hl),y		; pick it up.
002838  3  C8           	iny 			; point to y coord.
002839  3               getob1:
002839  3  A0 21        	ldy #33
00283B  3  B1 66        	lda (z80_hl),y		; y coord.
00283D  3  85 rr        	sta dispy
00283F  3  A0 22        	ldy #34
002841  3  B1 66        	lda (z80_hl),y 		; x coord.
002843  3  85 rr        	sta dispx
002845  3  4C 06 28     	jmp dobj1 		; delete object sprite.
002848  3               getob0:
002848  3  A9 FF        	lda #255
00284A  3  91 66        	sta (z80_hl),y 		; pick it up.
00284C  3  60           	rts
00284D  3               .endif
00284D  3               
00284D  3               ;-----------------------------------------------------------------
00284D  3               ; Got object check.
00284D  3               ; Call with object in accumulator, returns zero set if in pockets.
00284D  3               ;
00284D  3               ; Input:
00284D  3               ;  A = object number
00284D  3               ;-----------------------------------------------------------------
00284D  3               .if oflag .or mflag
00284D  3               gotob:
00284D  3  CD 2A 20     	cmp numob 		; number of objects in game.
002850  3  90 03        	bcc :+ 			; are we checking past the end?
002852  3  4C 59 28     	jmp gotob0 		; yes, we can't have a non-existent object.
002855  3               :
002855  3  20 5E 28     	jsr findob		; find the object.
002858  3               gotob1:
002858  3  60           	rts
002859  3               
002859  3               gotob0:
002859  3  A9 FE        	lda #254 		; missing.
00285B  3  4C 58 28     	jmp gotob1
00285E  3               
00285E  3               findob:
00285E  3  48           	pha			; save object number
00285F  3  A9 02        	lda #<objdta 		; objects.
002861  3  85 66        	sta z80_l
002863  3  A9 80        	lda #>objdta
002865  3  85 67        	sta z80_h
002867  3  68           	pla			; retreive object number
002868  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
00286A  3  AA           	tax 			; loop counter
00286B  3               fndob2:
00286B  3  18           	clc
00286C  3  A5 66        	lda z80_l
00286E  3  69 26        	adc #38 		; size of each object.
002870  3  85 66        	sta z80_l
002872  3  90 02        	bcc :+
002874  3  E6 67        	inc z80_h
002876  3               :
002876  3  CA           	dex 			; repeat until we find address.
002877  3  D0 F2        	bne fndob2
002879  3               fndob1:
002879  3  A0 20        	ldy #32			; distance to room it's in.
00287B  3  B1 66        	lda (z80_hl),y		; fetch status.
00287D  3  60           	rts
00287E  3               .endif
00287E  3               
00287E  3               ;---------------------------------------------
00287E  3               ; Drop object number at (dispx, dispy).
00287E  3               ;
00287E  3               ; Input:
00287E  3               ;  A = object number
00287E  3               ;---------------------------------------------
00287E  3               
00287E  3               .if oflag
00287E  3               drpob:
00287E  3  CD 2A 20     	cmp numob 		; are we checking past the end?
002881  3  90 01        	bcc :+
002883  3  60           	rts			; yes, can't drop non-existent item.
002884  3               :
002884  3  20 4D 28     	jsr gotob		; make sure object is in inventory.
002887  3  C5 rr        	cmp scno		; already on this screen?
002889  3  D0 01        	bne :+
00288B  3  60           	rts			; yes, nothing to do.
00288C  3               :
00288C  3  A0 20        	ldy #32
00288E  3  A5 rr        	lda scno
002890  3  91 66        	sta (z80_hl),y		; bring onto screen.
002892  3  A5 rr        	lda dispy		; sprite y coordinate.
002894  3  C8           	iny
002895  3  91 66        	sta (z80_hl),y		; point to object y.
002897  3  A5 rr        	lda dispx 		; sprite x coordinate.
002899  3  C8           	iny
00289A  3  91 66        	sta (z80_hl),y 		; point to object x
00289C  3  4C FB 27     	jmp dobj		; draw the object sprite.
00289F  3               
00289F  3               ;-----------------------------------------------
00289F  3               ; Seek objects at sprite position.
00289F  3               ;
00289F  3               ; Output:
00289F  3               ;  A = object number, if not found A=255
00289F  3               ;-----------------------------------------------
00289F  3               
00289F  3               skobj:
00289F  3  A9 02        	lda #<objdta 		; pointer to objects.
0028A1  3  85 66        	sta z80_l
0028A3  3  A9 80        	lda #>objdta
0028A5  3  85 67        	sta z80_h
0028A7  3               
0028A7  3  AD 2A 20     	lda numob 		; number of objects in game.
0028AA  3  85 63        	sta z80_b 		; set up the loop counter.
0028AC  3               skobj0:
0028AC  3  A5 rr        	lda scno		; current room number.
0028AE  3  A0 20        	ldy #32
0028B0  3  D1 66        	cmp (z80_hl),y		; is object in here?
0028B2  3  D0 03        	bne :+
0028B4  3  20 C9 28     	jsr skobj1		; yes, check coordinates.
0028B7  3               :
0028B7  3  18           	clc			; point to next object in table.
0028B8  3  A5 66        	lda z80_l
0028BA  3  69 26        	adc #38			; size of each object.
0028BC  3  85 66        	sta z80_l
0028BE  3  90 02        	bcc :+
0028C0  3  E6 67        	inc z80_h
0028C2  3               :
0028C2  3  C6 63        	dec z80_b
0028C4  3  D0 E6        	bne skobj0		; repeat for all objects.
0028C6  3               
0028C6  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
0028C8  3  60           	rts
0028C9  3               
0028C9  3               skobj1:
0028C9  3  A0 21        	ldy #33			; point to y coordinate.
0028CB  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
0028CD  3  38           	sec
0028CE  3  A0 08        	ldy #8
0028D0  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
0028D2  3  18           	clc
0028D3  3  69 0F        	adc #15			; add sprite height minus one.
0028D5  3  C9 1F        	cmp #31			; within range?
0028D7  3  B0 18        	bcs skobj2		; no, ignore object.
0028D9  3               
0028D9  3  A0 22        	ldy #34			; point to x coordinate now.
0028DB  3  B1 66        	lda (z80_hl),y 		; get coordinate.
0028DD  3  38           	sec
0028DE  3  A0 09        	ldy #9
0028E0  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
0028E2  3  18           	clc			; add sprite width minus one.
0028E3  3  69 0F        	adc #15
0028E5  3  C9 1F        	cmp #31			; within range?
0028E7  3  B0 08        	bcs skobj2		; no, ignore object.
0028E9  3               
0028E9  3  68           	pla			; remove return address from stack.
0028EA  3  68           	pla
0028EB  3               
0028EB  3  AD 2A 20     	lda numob 		; objects in game.
0028EE  3  38           	sec
0028EF  3  E5 63        	sbc z80_b		; subtract loop counter.
0028F1  3               skobj2:
0028F1  3  60           	rts			; accumulator now points to object.
0028F2  3               .endif
0028F2  3               
0028F2  3               ;---------------------------------------------------------------------
0028F2  3               ; Spawn a new sprite.
0028F2  3               ;---------------------------------------------------------------------
0028F2  3               
0028F2  3                 offset = 20
0028F2  3               
0028F2  3               ;.repeat 343
0028F2  3               ;  .byte 0
0028F2  3               ;.endrep
0028F2  3               
0028F2  3               spawn:
0028F2  3  A9 EA        	lda #<sprtab		; sprite table.
0028F4  3  85 66        	sta z80_l
0028F6  3  A9 38        	lda #>sprtab
0028F8  3  85 67        	sta z80_h
0028FA  3               numsp1:
0028FA  3  A9 0C        	lda #NUMSPR		; number of sprites.
0028FC  3  85 rr        	sta spcnt
0028FE  3               spaw0:
0028FE  3  A0 00        	ldy #0
002900  3  B1 66        	lda (z80_hl),y		; get sprite type.
002902  3  C9 FF        	cmp #255		; is it an unused slot?
002904  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002906  3               
002906  3  18           	clc 			; point to next sprite in table.
002907  3  A5 66        	lda z80_l
002909  3  69 11        	adc #TABSIZ		; size of each entry.
00290B  3  85 66        	sta z80_l
00290D  3  90 02        	bcc :+
00290F  3  E6 67        	inc z80_h
002911  3               :
002911  3  C6 rr        	dec spcnt		; one less iteration.
002913  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002915  3               
002915  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002915  3               
002915  3               spaw1:
002915  3  A5 69        	lda z80_i		; address of original sprite.
002917  3  48           	pha
002918  3  A5 68        	lda z80_x
00291A  3  48           	pha
00291B  3               
00291B  3  A5 66        	lda z80_l		; store spawned sprite address.
00291D  3  85 rr        	sta spptr
00291F  3  A5 67        	lda z80_h
002921  3  85 rr        	sta spptr+1
002923  3               
002923  3  A5 62        	lda z80_c
002925  3  A0 00        	ldy #0
002927  3  91 66        	sta (z80_hl),y 		; set the type.
002929  3  A0 05        	ldy #5
00292B  3  91 66        	sta (z80_hl),y		; copy
00292D  3               
00292D  3  A5 63        	lda z80_b
00292F  3  A0 01        	ldy #1
002931  3  91 66        	sta (z80_hl),y		; set the image.
002933  3  A0 06        	ldy #6
002935  3  91 66        	sta (z80_hl),y		; copy
002937  3               
002937  3  A9 00        	lda #0 			; frame zero.
002939  3  A0 02        	ldy #2
00293B  3  91 66        	sta (z80_hl),y		; set frame.
00293D  3  A0 07        	ldy #7
00293F  3  91 66        	sta (z80_hl),y		; copy
002941  3               
002941  3  A0 08        	ldy #8
002943  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002945  3  A0 03        	ldy #3
002947  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002949  3  A0 08        	ldy #8
00294B  3  91 66        	sta (z80_hl),y		; copy
00294D  3               
00294D  3  A0 09        	ldy #9
00294F  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002951  3  A0 04        	ldy #4
002953  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002955  3  A0 09        	ldy #9
002957  3  91 66        	sta (z80_hl),y		; copy
002959  3               
002959  3  A0 0A        	ldy #10			; direction of original.
00295B  3  B1 68        	lda (z80_ix),y
00295D  3  91 66        	sta (z80_hl),y		; direction
00295F  3               
00295F  3  A9 00        	lda #0
002961  3  A0 0B        	ldy #11
002963  3  91 66        	sta (z80_hl),y		; reset parameter.
002965  3  C8           	iny
002966  3  91 66        	sta (z80_hl),y		; reset parameter.
002968  3  C8           	iny
002969  3  91 66        	sta (z80_hl),y		; reset parameter.
00296B  3  C8           	iny
00296C  3  91 66        	sta (z80_hl),y		; reset parameter.
00296E  3               rtssp:
00296E  3  A5 rr        	lda spptr		; address of new sprite.
002970  3  85 68        	sta z80_x
002972  3  A5 rr        	lda spptr+1
002974  3  85 69        	sta z80_i
002976  3               evis1:
002976  3  20 51 47     	jsr evnt09 		; call sprite initialisation event.
002979  3               
002979  3  A5 rr        	lda spptr 		; address of new sprite.
00297B  3  85 68        	sta z80_x
00297D  3  A5 rr        	lda spptr+1
00297F  3  85 69        	sta z80_i
002981  3  20 B3 33     	jsr sspria 		; display the new sprite.
002984  3               
002984  3  68           	pla			; address of original sprite.
002985  3  85 68        	sta z80_x
002987  3  68           	pla
002988  3  85 69        	sta z80_i
00298A  3               
00298A  3  60           	rts
00298B  3               
00298B  3               ;spcnt:	.byte 0
00298B  3               ;spptr:	.word 0			; spawned sprite pointer.
00298B  3               ;seed:	.byte 0			; seed for random numbers.
00298B  3  30 30 30 30  score:	.byte "000000"		; player"s score.
00298F  3  30 30        
002991  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002995  3  30 30        
002997  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00299B  3  30 30        
00299D  3  00 E4        grbase:	.word ScreenAddr	; graphics base address.
00299F  3               
00299F  3               ;----------------------------------------------------
00299F  3               ; Check y-pos
00299F  3               ;----------------------------------------------------
00299F  3               
00299F  3               checkx:
00299F  3  A5 rr        	lda dispy		; y position.
0029A1  3  C9 18        	cmp #24			; off screen?
0029A3  3  B0 01        	bcs :+
0029A5  3  60           	rts			; no, it's okay.
0029A6  3               :
0029A6  3  68           	pla			; remove return address from stack.
0029A7  3  85 66        	sta z80_l
0029A9  3  68           	pla
0029AA  3  85 67        	sta z80_h
0029AC  3  60           	rts
0029AD  3               
0029AD  3               ;-----------------------------------------------
0029AD  3               ; Displays the current high score.
0029AD  3               ;-----------------------------------------------
0029AD  3               
0029AD  3               dhisc:
0029AD  3  A9 91        	lda #<hiscor 		; high score text.
0029AF  3  8D E4 29     	sta dscor3+1
0029B2  3  8D FF 29     	sta bscor3+1
0029B5  3  A9 29        	lda #>hiscor
0029B7  3  8D E5 29     	sta dscor3+2
0029BA  3  8D 00 2A     	sta bscor3+2
0029BD  3  4C D0 29     	jmp dscor1		; check in printable range then show 6 digits.
0029C0  3               
0029C0  3               ;------------------------------------------------------
0029C0  3               ; Displays the current score.
0029C0  3               ;------------------------------------------------------
0029C0  3               
0029C0  3               ;.repeat 322
0029C0  3               ;  .byte 0
0029C0  3               ;.endrep
0029C0  3               
0029C0  3               dscor:
0029C0  3  A9 8B        	lda #<score		; score text.
0029C2  3  8D E4 29     	sta dscor3+1
0029C5  3  8D FF 29     	sta bscor3+1
0029C8  3  A9 29        	lda #>score
0029CA  3  8D E5 29     	sta dscor3+2
0029CD  3  8D 00 2A     	sta bscor3+2
0029D0  3               dscor1:
0029D0  3  8C FB 29     	sty tmpscr
0029D3  3  20 55 31     	jsr preprt		; set up font and print position.
0029D6  3  20 9F 29     	jsr checkx		; make sure we're in a printable range.
0029D9  3               
0029D9  3               ;	lda #6			; digits to display.
0029D9  3               ;	sta z80_b
0029D9  3  A5 rr        	lda prtmod		; get print mode.
0029DB  3  F0 03        	beq :+			; standard size text?
0029DD  3  4C FC 29     	jmp bscor0		; no, show double-height.
0029E0  3               :
0029E0  3               dscor0:
0029E0  3               ;	ldy #0
0029E0  3               ;	lda (z80_hl),y 		; fetch character.
0029E0  3  AC FB 29     	ldy tmpscr
0029E3  3               dscor3:
0029E3  3  B9 8B 29     	lda score,y
0029E6  3  20 33 2B     	jsr pchar 		; display character.
0029E9  3  E6 rr        	inc dispx		; move along x coordinate
0029EB  3               
0029EB  3               ;	inc z80_l		; next score column.
0029EB  3               ;	bne :+
0029EB  3               ;	inc z80_h
0029EB  3               ;:
0029EB  3  EE FB 29     	inc tmpscr
0029EE  3  C6 63        	dec z80_b
0029F0  3  D0 EE        	bne dscor0 		; repeat for all digits.
0029F2  3               dscor2:
0029F2  3  A5 rr        	lda dispx 		; set up display coordinates.
0029F4  3  85 rr        	sta charx
0029F6  3  A5 rr        	lda dispy
0029F8  3  85 rr        	sta chary
0029FA  3  60           	rts
0029FB  3               
0029FB  3  00           tmpscr:	.byte 0
0029FC  3               ;------------------------------------------------------
0029FC  3               ; Displays the current score in double-height characters.
0029FC  3               ;
0029FC  3               ; Input:
0029FC  3               ;  B  = digit number
0029FC  3               ;  HL = score string
0029FC  3               ;------------------------------------------------------
0029FC  3               
0029FC  3               bscor0:
0029FC  3               ;	ldy #0
0029FC  3               
0029FC  3               ;	lda (z80_hl),y 		; fetch character.
0029FC  3  A4 rr        	ldy tmp
0029FE  3               bscor3:
0029FE  3  B9 8B 29     	lda score,y
002A01  3  20 DC 30     	jsr bchar 		; display big char.
002A04  3               
002A04  3               ;	inc z80_l 		; next score column.
002A04  3               ;	bne :+
002A04  3               ;	inc z80_h
002A04  3               ;:
002A04  3  E6 rr        	inc tmp
002A06  3  C6 63        	dec z80_b
002A08  3  F0 03        	beq :+
002A0A  3  4C FC 29     	jmp bscor0 		; repeat for all digits.
002A0D  3               :
002A0D  3  4C F2 29     	jmp dscor2 		; tidy up line and column variables.
002A10  3               
002A10  3               ;-----------------------------------------------------
002A10  3               ; Adds number in the hl pair to the score.
002A10  3               ;-----------------------------------------------------
002A10  3               
002A10  3               addsc:
002A10  3  A9 8C        	lda #<(score+1) 	; ten thousands column.
002A12  3  85 64        	sta z80_e
002A14  3  A9 29        	lda #>(score+1)
002A16  3  85 65        	sta z80_d
002A18  3  A9 10        	lda #<10000		; amount to add each time.
002A1A  3  85 62        	sta z80_c
002A1C  3  A9 27        	lda #>10000
002A1E  3  85 63        	sta z80_b
002A20  3  20 64 2A     	jsr incsc		; add to score.
002A23  3               
002A23  3  E6 64        	inc z80_e		; thousands column.
002A25  3  D0 02        	bne :+
002A27  3  E6 65        	inc z80_d
002A29  3               :
002A29  3  A9 E8        	lda #<1000		; amount to add each time.
002A2B  3  85 62        	sta z80_c
002A2D  3  A9 03        	lda #>1000
002A2F  3  85 63        	sta z80_b
002A31  3  20 64 2A     	jsr incsc 		; add to score.
002A34  3               
002A34  3  E6 64        	inc z80_e		; hundreds column.
002A36  3  D0 02        	bne :+
002A38  3  E6 65        	inc z80_d
002A3A  3               :
002A3A  3  A9 64        	lda #<100		; amount to add each time.
002A3C  3  85 62        	sta z80_c
002A3E  3  A9 00        	lda #>100
002A40  3  85 63        	sta z80_b
002A42  3  20 64 2A     	jsr incsc		; add to score.
002A45  3               
002A45  3  E6 64        	inc z80_e 		; tens column.
002A47  3  D0 02        	bne :+
002A49  3  E6 65        	inc z80_d
002A4B  3               :
002A4B  3  A9 0A        	lda #<10		; amount to add each time.
002A4D  3  85 62        	sta z80_c
002A4F  3  A9 00        	lda #>10
002A51  3  85 63        	sta z80_b
002A53  3  20 64 2A     	jsr incsc 		; add to score.
002A56  3               
002A56  3  E6 64        	inc z80_e		; units column.
002A58  3  D0 02        	bne :+
002A5A  3  E6 65        	inc z80_d
002A5C  3               :
002A5C  3  A9 01        	lda #<1			; units.
002A5E  3  85 62        	sta z80_c
002A60  3  A9 00        	lda #>1
002A62  3  85 63        	sta z80_b
002A64  3               incsc:
002A64  3  A5 67        	lda z80_h		; store amount to add.
002A66  3  48           	pha
002A67  3  A5 66        	lda z80_l
002A69  3  48           	pha
002A6A  3               
002A6A  3  38           	sec			; subtract from amount to add.
002A6B  3  A5 66        	lda z80_l
002A6D  3  E5 62        	sbc z80_c
002A6F  3  85 66        	sta z80_l
002A71  3  A5 67        	lda z80_h
002A73  3  E5 63        	sbc z80_b
002A75  3  85 67        	sta z80_h
002A77  3  90 14        	bcc incsc0		; too much, restore value.
002A79  3               
002A79  3  68           	pla			; delete the previous amount from the stack.
002A7A  3  68           	pla
002A7B  3               
002A7B  3  A5 65        	lda z80_d 		; store column position.
002A7D  3  48           	pha
002A7E  3  A5 64        	lda z80_e
002A80  3  48           	pha
002A81  3  20 94 2A     	jsr incsc2		; do the increment.
002A84  3               
002A84  3  68           	pla			; restore column.
002A85  3  85 64        	sta z80_e
002A87  3  68           	pla
002A88  3  85 65        	sta z80_d
002A8A  3  4C 64 2A     	jmp incsc		; repeat until all added.
002A8D  3               
002A8D  3               incsc0:
002A8D  3  68           	pla			; restore previous value.
002A8E  3  85 66        	sta z80_l
002A90  3  68           	pla
002A91  3  85 67        	sta z80_h
002A93  3  60           	rts
002A94  3               incsc2:
002A94  3  A0 00        	ldy #0
002A96  3  B1 64        	lda (z80_de),y 		; get amount.
002A98  3  18           	clc
002A99  3  69 01        	adc #1			; add one to column.
002A9B  3  91 64        	sta (z80_de),y		; write new column total.
002A9D  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002A9F  3  B0 01        	bcs :+
002AA1  3  60           	rts			; no, carry on.
002AA2  3               :
002AA2  3  A9 30        	lda #'0'		; make it zero.
002AA4  3  91 64        	sta (z80_de),y		; write new column total.
002AA6  3  C6 64        	dec z80_e		; back one column.
002AA8  3  D0 02        	bne :+
002AAA  3  C6 65        	dec z80_d
002AAC  3               :
002AAC  3  4C 94 2A     	jmp incsc2
002AAF  3               
002AAF  3               ;------------------------------------
002AAF  3               ; Add bonus to score and reset bonus
002AAF  3               ;------------------------------------
002AAF  3               
002AAF  3               addbo:
002AAF  3  A2 05        	ldx #5			; last digit.
002AB1  3  18           	clc
002AB2  3               addbo0:
002AB2  3  BD 8B 29     	lda score,x		; get score.
002AB5  3  7D 97 29     	adc bonus,x		; add bonus.
002AB8  3  38           	sec			; 0 to 18.
002AB9  3  E9 30        	sbc #48
002ABB  3  48           	pha
002ABC  3  A9 30        	lda #'0'
002ABE  3  9D 97 29     	sta bonus,x
002AC1  3  68           	pla
002AC2  3  C9 3A        	cmp #58
002AC4  3  90 03        	bcc addbo1
002AC6  3  38           	sec
002AC7  3  E9 0A        	sbc #10
002AC9  3               addbo1:
002AC9  3  9D 8B 29     	sta score,x		; zeroise bonus.
002ACC  3  CA           	dex			; next digit.
002ACD  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002ACF  3  60           	rts
002AD0  3               
002AD0  3               ;------------------------------------
002AD0  3               ; Swap score and bonus.
002AD0  3               ;------------------------------------
002AD0  3               
002AD0  3               swpsb:
002AD0  3  A2 05        	ldx #5			; digits to add.
002AD2  3               swpsb0:
002AD2  3  BD 8B 29     	lda score,x 		; get score digits.
002AD5  3  48           	pha			; save digit
002AD6  3  BD 97 29     	lda bonus,x 		; get bonus digits.
002AD9  3  9D 8B 29     	sta score,x		; switch score-bonus
002ADC  3  68           	pla
002ADD  3  9D 97 29     	sta bonus,x
002AE0  3  CA           	dex 			; repeat for all 6 digits.
002AE1  3  10 EF        	bpl swpsb0
002AE3  3  60           	rts
002AE4  3               
002AE4  3               ;----------------------------------------------------
002AE4  3               ; Get print address.
002AE4  3               ;----------------------------------------------------
002AE4  3               
002AE4  3               gprad:
002AE4  3  A5 rr        	lda dispx		; get x
002AE6  3  85 rr        	sta scraddr		; store lb address
002AE8  3               
002AE8  3  2A           	rol a
002AE9  3  26 rr        	rol tmp
002AEB  3  2A           	rol a
002AEC  3  26 rr        	rol tmp
002AEE  3  2A           	rol a
002AEF  3  26 rr        	rol tmp
002AF1  3  A5 rr        	lda tmp
002AF3  3  29 07        	and #7
002AF5  3  85 rr        	sta tmp
002AF7  3  A5 rr        	lda prtmod
002AF9  3  F0 02        	beq :+
002AFB  3  06 rr        	asl tmp
002AFD  3               :
002AFD  3  A5 rr        	lda tmp
002AFF  3  18           	clc
002B00  3  65 rr        	adc dispy		; get y
002B02  3  69 E4        	adc #>ScreenAddr		; add $80
002B04  3  85 rr        	sta scraddr+1		; store hb address
002B06  3  60           	rts
002B07  3               
002B07  3               ;--------------------------------------------------------------
002B07  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002B07  3               ;
002B07  3               ; Output:
002B07  3               ;  bufaddr = MAP + dispy*32 + dispx
002B07  3               ;--------------------------------------------------------------
002B07  3               
002B07  3               pradd:
002B07  3  A5 rr        	lda dispy 		; y coordinate.
002B09  3  85 rr        	sta bufaddr
002B0B  3  A9 00        	lda #0
002B0D  3  85 rr        	sta bufaddr+1
002B0F  3  06 rr        	asl bufaddr  		; multiply char by 32
002B11  3  26 rr        	rol bufaddr+1
002B13  3  06 rr        	asl bufaddr
002B15  3  26 rr        	rol bufaddr+1
002B17  3  06 rr        	asl bufaddr
002B19  3  26 rr        	rol bufaddr+1
002B1B  3  06 rr        	asl bufaddr
002B1D  3  26 rr        	rol bufaddr+1
002B1F  3  06 rr        	asl bufaddr
002B21  3  26 rr        	rol bufaddr+1
002B23  3  18           	clc			; add address of MAP graphics.
002B24  3  A5 rr        	lda bufaddr
002B26  3  65 rr        	adc dispx
002B28  3  69 00        	adc #<MAP
002B2A  3  85 rr        	sta bufaddr
002B2C  3  A5 rr        	lda bufaddr+1
002B2E  3  69 DD        	adc #>MAP
002B30  3  85 rr        	sta bufaddr+1
002B32  3  60           	rts
002B33  3               
002B33  3               ;----------------------------------------------------
002B33  3               ; Display character in A at dispx,dispy.
002B33  3               ;
002B33  3               ; Input:
002B33  3               ;  A 	   = character to print
002B33  3               ;----------------------------------------------------
002B33  3               
002B33  3               pchar:
002B33  3  85 rr        	sta fntaddr
002B35  3  A9 00        	lda #0
002B37  3  85 rr        	sta fntaddr+1
002B39  3  06 rr        	asl fntaddr  		; multiply char by 8.
002B3B  3  26 rr        	rol fntaddr+1
002B3D  3  06 rr        	asl fntaddr
002B3F  3  26 rr        	rol fntaddr+1
002B41  3  06 rr        	asl fntaddr
002B43  3  26 rr        	rol fntaddr+1
002B45  3               
002B45  3  A5 rr        	lda fntaddr
002B47  3  18           	clc
002B48  3  69 F2        	adc #<(FONT-256)
002B4A  3  85 rr        	sta fntaddr		; that's the low byte.
002B4C  3  A5 rr        	lda fntaddr+1
002B4E  3  69 84        	adc #>(FONT-256)
002B50  3  85 rr        	sta fntaddr+1		; add displacement.
002B52  3               pchark:
002B52  3  20 E4 2A     	jsr gprad		; get screen address.
002B55  3  A2 07        	ldx #7			; lines to write.
002B57  3               pchar0:
002B57  3  A0 00        	ldy #0
002B59  3  B1 rr        	lda (fntaddr),y 	; get image byte.
002B5B  3  BC 6A 2B     	ldy scrtab,x		; Get rowoffset
002B5E  3               .if iflag
002B5E  3               	eor #$ff
002B5E  3               .endif
002B5E  3  91 rr        	sta (scraddr),y 	; copy to screen.
002B60  3  E6 rr        	inc fntaddr		; next image byte.
002B62  3  D0 02        	bne :+
002B64  3  E6 rr        	inc fntaddr+1
002B66  3               :
002B66  3  CA           	dex			; next screen row down.
002B67  3  10 EE        	bpl pchar0		; repeat.
002B69  3  60           	rts
002B6A  3               
002B6A  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002B6E  3  60 40 20 00  
002B72  3               
002B72  3               ;----------------------------------------------
002B72  3               
002B72  3               ; Print attributes, properties and pixels.
002B72  3               ;
002B72  3               ; Input:
002B72  3               ;  A	= tile number
002B72  3               ;----------------------------------------------
002B72  3               
002B72  3               ;.repeat 294
002B72  3               ;  .byte 0
002B72  3               ;.endrep
002B72  3               
002B72  3               pbpattr:			; entry PUTBLOCK command
002B72  3  A4 rr        	ldy charx
002B74  3  84 rr        	sty dispx
002B76  3  A4 rr        	ldy chary
002B78  3  84 rr        	sty dispy
002B7A  3               pattr:
002B7A  3               .if aflag
002B7A  3               	pha
002B7A  3               	jsr wbloc		; save blockinfo
002B7A  3               	pla
002B7A  3               .endif
002B7A  3               
002B7A  3               pattr2:
002B7A  3  85 63        	sta z80_b		; store cell in b register for now.
002B7C  3  AA           	tax
002B7D  3  BD 85 4D     	lda bprop,x 		; block properties.
002B80  3  85 62        	sta z80_c
002B82  3  C9 08        	cmp #COLECT
002B84  3  D0 05        	bne :+
002B86  3  A5 63        	lda z80_b
002B88  3  8D 99 2B     	sta colpatt
002B8B  3               :
002B8B  3  20 07 2B     	jsr pradd 		; get property buffer address.
002B8E  3  A5 62        	lda z80_c
002B90  3  A0 00        	ldy #0
002B92  3  91 rr        	sta (bufaddr),y 	; write property.
002B94  3  A5 63        	lda z80_b 		; restore cell.
002B96  3  4C 9A 2B     	jmp panp
002B99  3               ; Print attributes, no properties.
002B99  3               
002B99  3               ;.repeat 263
002B99  3               ; .byte 0
002B99  3               ;.endrep
002B99  3               
002B99  3  00           colpatt:	.byte 0
002B9A  3               
002B9A  3               panp:
002B9A  3  85 64        	sta z80_e		; displacement in e.
002B9C  3  A9 00        	lda #0
002B9E  3  85 65        	sta z80_d		; no high byte.
002BA0  3  06 64        	asl z80_e  		; multiply char by 8.
002BA2  3  26 65        	rol z80_d
002BA4  3  06 64        	asl z80_e
002BA6  3  26 65        	rol z80_d
002BA8  3  06 64        	asl z80_e
002BAA  3  26 65        	rol z80_d
002BAC  3  18           	clc
002BAD  3  A5 64        	lda z80_e
002BAF  3  69 8D        	adc #<chgfx 		; address of graphics.
002BB1  3  85 rr        	sta tileaddr
002BB3  3  A5 65        	lda z80_d
002BB5  3  69 4A        	adc #>chgfx
002BB7  3  85 rr        	sta tileaddr+1
002BB9  3  20 E4 2A     	jsr gprad 		; get screen address.
002BBC  3  A2 07        	ldx #7			; number of pixel rows to write.
002BBE  3               panp0:
002BBE  3  A0 00        	ldy #0
002BC0  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002BC2  3               .if iflag
002BC2  3               	eor #$ff		; Invert
002BC2  3               .endif
002BC2  3  BC 6A 2B     	ldy scrtab,x
002BC5  3  91 rr        	sta (scraddr),y 	; copy to screen.
002BC7  3  E6 rr        	inc tileaddr 		; next image byte.
002BC9  3  D0 02        	bne :+
002BCB  3  E6 rr        	inc tileaddr+1
002BCD  3               :
002BCD  3  CA           	dex	 		; repeat for 8 pixel rows.
002BCE  3  10 EE        	bpl panp0
002BD0  3  E6 rr        	inc dispx 		; move along one.
002BD2  3  E6 rr        	inc charx
002BD4  3  60           	rts
002BD5  3               
002BD5  3               ;----------------------------------------------
002BD5  3               ; Write block
002BD5  3               ;----------------------------------------------
002BD5  3               
002BD5  3               .if aflag
002BD5  3               wbloc:
002BD5  3               	ldy #3
002BD5  3               	sta (pbptr),y		; store block number
002BD5  3               	dey
002BD5  3               	lda dispx
002BD5  3               	sta (pbptr),y		; write x position of block.
002BD5  3               	dey
002BD5  3               	lda dispy
002BD5  3               	sta (pbptr),y		; write y position of block.
002BD5  3               	dey
002BD5  3               	lda scno
002BD5  3               	sta (pbptr),y		; write screen.
002BD5  3               	clc			; point to next free location
002BD5  3               	lda pbptr
002BD5  3               	adc #4
002BD5  3               	sta pbptr
002BD5  3               	bcc :+
002BD5  3               	inc pbptr+1
002BD5  3               :
002BD5  3               	rts
002BD5  3               .endif
002BD5  3               
002BD5  3               ;----------------------------------------------
002BD5  3               ; Print character pixels, no more.
002BD5  3               ;
002BD5  3               ; Input:
002BD5  3               ;  A	= character to print
002BD5  3               ;----------------------------------------------
002BD5  3               
002BD5  3               pchr:
002BD5  3  20 33 2B     	jsr pchar 		; show character in accumulator.
002BD8  3  E6 rr        	inc dispx		; move along one.
002BDA  3  60           	rts
002BDB  3               
002BDB  3               ;----------------------------------------------------
002BDB  3               ; Shifter sprite routine for objects.
002BDB  3               ;----------------------------------------------------
002BDB  3               
002BDB  3               .if oflag
002BDB  3               sprit7:
002BDB  3  A5 63        	lda z80_b
002BDD  3  F0 0F        	beq sprit0
002BDF  3  85 61        	sta z80_a
002BE1  3               sprit3:
002BE1  3  4E 6F 2C     	lsr spr			; shift into position.
002BE4  3  6E 70 2C     	ror spr+1
002BE7  3  6E 71 2C     	ror spr+2
002BEA  3  C6 61        	dec z80_a		; one less iteration.
002BEC  3  D0 F3        	bne sprit3
002BEE  3               sprit0:
002BEE  3  60           	rts 			; now apply to screen.
002BEF  3               
002BEF  3               ;----------------------------------------------------
002BEF  3               ; Draw sprite
002BEF  3               ;----------------------------------------------------
002BEF  3               
002BEF  3               sprite:
002BEF  3  86 rr        	stx xtmp		; Save X-reg
002BF1  3  20 90 33     	jsr scadd 		; get screen address in scraddr.
002BF4  3               
002BF4  3  A5 rr        	lda dispx 		; x position.
002BF6  3  29 07        	and #7 			; position straddling cells.
002BF8  3  85 63        	sta z80_b		; store in b register.
002BFA  3               
002BFA  3  A5 66        	lda z80_l		; store sprite graphic address.
002BFC  3  8D 0F 2C     	sta sprit1+1
002BFF  3  8D 16 2C     	sta sprit2+1
002C02  3  A5 67        	lda z80_h
002C04  3  8D 10 2C     	sta sprit1+2
002C07  3  8D 17 2C     	sta sprit2+2
002C0A  3               
002C0A  3  A2 00        	ldx #0			; pixel height.
002C0C  3  A0 00        	ldy #0
002C0E  3               sprit1:
002C0E  3  BD 02 80     	lda objdta,x		; fetch first byte.
002C11  3  8D 6F 2C     	sta spr
002C14  3  E8           	inx
002C15  3               sprit2:
002C15  3  BD 02 80     	lda objdta,x
002C18  3  8D 70 2C     	sta spr+1
002C1B  3               
002C1B  3  A9 00        	lda #0
002C1D  3  8D 71 2C     	sta spr+2
002C20  3  20 DB 2B     	jsr sprit7		; shift sprite
002C23  3               
002C23  3  CA           	dex
002C24  3  AD 6F 2C     	lda spr			; fetch graphic.
002C27  3  BC 4F 2C     	ldy spritetab,x
002C2A  3  51 rr        	eor (scraddr),y		; merge with screen image.
002C2C  3  91 rr        	sta (scraddr),y		; write to screen.
002C2E  3  E8           	inx			; next screen byte.
002C2F  3               
002C2F  3  AD 70 2C     	lda spr+1		; fetch graphic.
002C32  3  BC 4F 2C     	ldy spritetab,x
002C35  3  51 rr        	eor (scraddr),y		; merge with screen image.
002C37  3  91 rr        	sta (scraddr),y		; write to screen.
002C39  3  C8           	iny
002C3A  3               
002C3A  3  AD 71 2C     	lda spr+2		; fetch graphic.
002C3D  3  51 rr        	eor (scraddr),y		; merge with screen image.
002C3F  3  91 rr        	sta (scraddr),y		; write to screen.
002C41  3               
002C41  3  E8           	inx			; next source byte.
002C42  3  E0 10        	cpx #16
002C44  3  D0 02        	bne :+
002C46  3  E6 rr        	inc scraddr+1
002C48  3               :
002C48  3  E0 20        	cpx #32
002C4A  3  D0 C2        	bne sprit1		; repeat
002C4C  3               
002C4C  3  A6 rr        	ldx xtmp		; retreive X-reg
002C4E  3  60           	rts
002C4F  3               
002C4F  3               spritetab:
002C4F  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002C53  3  40 41 60 61  
002C57  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002C5B  3  C0 C1 E0 E1  
002C5F  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002C63  3  40 41 60 61  
002C67  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002C6B  3  C0 C1 E0 E1  
002C6F  3               
002C6F  3  00 00 00     spr:	.byte 0,0,0
002C72  3               
002C72  3               ;xtmp:	.byte 0
002C72  3               .endif
002C72  3               
002C72  3               ;-----------------------------------------------------------
002C72  3               ; Get room address.
002C72  3               ;-----------------------------------------------------------
002C72  3               
002C72  3               ;.repeat 273
002C72  3               ;  .byte 0
002C72  3               ;.endrep
002C72  3               
002C72  3               groom:
002C72  3  A6 rr        	ldx scno 		; screen number.
002C74  3  A0 00        	ldy #0
002C76  3               groomx:
002C76  3  A9 8A        	lda #<scdat 		; pointer to screens.
002C78  3  85 66        	sta z80_l
002C7A  3  A9 6A        	lda #>scdat
002C7C  3  85 67        	sta z80_h
002C7E  3               groom1:
002C7E  3  E0 00        	cpx #0			; is it the first one?
002C80  3  F0 15        	beq groom0 		; no more screens to skip.
002C82  3               
002C82  3  18           	clc
002C83  3  A5 66        	lda z80_l
002C85  3  79 8A 6A     	adc scdat,y 		; low byte of screen size.
002C88  3  85 66        	sta z80_l
002C8A  3  C8           	iny			; point to high byte.
002C8B  3  A5 67        	lda z80_h
002C8D  3  79 8A 6A     	adc scdat,y 		; high byte of screen size.
002C90  3  85 67        	sta z80_h
002C92  3  C8           	iny			; next address.
002C93  3               
002C93  3  CA           	dex 			; one less iteration.
002C94  3  4C 7E 2C     	jmp groom1 		; loop until we reach the end.
002C97  3               groom0:
002C97  3  AD 58 7E     	lda numsc 		; add displacement.
002C9A  3  0A           	asl a
002C9B  3  18           	clc			; add double displacement to address.
002C9C  3  65 66        	adc z80_l
002C9E  3  85 66        	sta z80_l
002CA0  3  A5 67        	lda z80_h
002CA2  3  69 00        	adc #0
002CA4  3  85 67        	sta z80_h
002CA6  3  60           	rts
002CA7  3               
002CA7  3               ;-----------------------------------------------------------
002CA7  3               ; Draw present room.
002CA7  3               ;-----------------------------------------------------------
002CA7  3               
002CA7  3               droom:
002CA7  3  AD 26 20     	lda wintop 		; window top.
002CAA  3  85 rr        	sta dispy		; set cursor y position.
002CAC  3               droom2:
002CAC  3  20 72 2C     	jsr groom 		; get address of current room.
002CAF  3  A9 00        	lda #0	 		; zero in accumulator.
002CB1  3  85 rr        	sta comcnt 		; reset compression counter.
002CB3  3  AD 28 20     	lda winhgt 		; height of window.
002CB6  3  85 rr        	sta rrow		; set row counter
002CB8  3               droom0:
002CB8  3  AD 27 20     	lda winlft 		; window left edge.
002CBB  3  85 rr        	sta dispx 		; set cursor x position.
002CBD  3  AD 29 20     	lda winwid 		; width of window.
002CC0  3  85 rr        	sta rcol		; set column counter
002CC2  3               droom1:
002CC2  3  20 D3 2C     	jsr flbyt 		; decompress next byte on the fly.
002CC5  3  20 7A 2B     	jsr pattr2 		; show attributes and block.
002CC8  3  C6 rr        	dec rcol		; one less column.
002CCA  3  D0 F6        	bne droom1 		; repeat for entire line.
002CCC  3  E6 rr        	inc dispy		; move down one line.
002CCE  3  C6 rr        	dec rrow 		; one less row.
002CD0  3  D0 E6        	bne droom0 		; repeat for all rows.
002CD2  3  60           	rts
002CD3  3               
002CD3  3               ;rcol:	.byte 0
002CD3  3               ;rrow:	.byte 0
002CD3  3               
002CD3  3               ;----------------------------------------------
002CD3  3               ; Decompress bytes on-the-fly.
002CD3  3               ;----------------------------------------------
002CD3  3               
002CD3  3               flbyt:
002CD3  3  A5 rr        	lda comcnt 		; compression counter.
002CD5  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002CD7  3               
002CD7  3  A0 00        	ldy #0
002CD9  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002CDB  3  E6 66        	inc z80_l 		; point to next cell.
002CDD  3  D0 02        	bne :+
002CDF  3  E6 67        	inc z80_h
002CE1  3               :
002CE1  3  C9 FF        	cmp #255 		; is this byte a control code?
002CE3  3  F0 01        	beq :+
002CE5  3  60           	rts 			; no, this byte is uncompressed.
002CE6  3               :
002CE6  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002CE8  3  85 rr        	sta combyt 		; set up the type.
002CEA  3  E6 66        	inc z80_l 		; point to quantity.
002CEC  3  D0 02        	bne :+
002CEE  3  E6 67        	inc z80_h
002CF0  3               :
002CF0  3  B1 66        	lda (z80_hl),y 		; get quantity.
002CF2  3  E6 66        	inc z80_l 		; point to next byte.
002CF4  3  D0 02        	bne :+
002CF6  3  E6 67        	inc z80_h
002CF8  3               :
002CF8  3               flbyt1:
002CF8  3  85 rr        	sta comcnt 		; store new quantity.
002CFA  3  C6 rr        	dec comcnt		; one less.
002CFC  3  A5 rr        	lda combyt 		; byte to expand.
002CFE  3  60           	rts
002CFF  3               
002CFF  3               ;combyt:	.byte 0			; byte type compressed.
002CFF  3               ;comcnt:	.byte 0			; compression counter.
002CFF  3               
002CFF  3               ;------------------------------------------
002CFF  3               ; Ladder down check.
002CFF  3               ;
002CFF  3               ; Input:
002CFF  3               ;  IX = sprite pointer
002CFF  3               ;------------------------------------------
002CFF  3               
002CFF  3               .if lflag
002CFF  3               laddd:
002CFF  3               	ldy #9
002CFF  3               	lda (z80_ix),y		; x coordinate.
002CFF  3               	sta dispx
002CFF  3               
002CFF  3               	ldy #8
002CFF  3               	lda (z80_ix),y		; y coordinate.
002CFF  3               	and #254		; make it even.
002CFF  3               	sta (z80_ix),y 		; reset it.
002CFF  3               	clc 			; look down 16 pixels.
002CFF  3               numsp5:
002CFF  3               	adc #SPR_HGT
002CFF  3               	sta dispy		; coords in dispx,dispy.
002CFF  3               	jmp laddv
002CFF  3               
002CFF  3               ;------------------------------------------
002CFF  3               ; Ladder up check.
002CFF  3               ;
002CFF  3               ; Input:
002CFF  3               ;  IX = sprite pointer
002CFF  3               ;
002CFF  3               ; Output:
002CFF  3               ;  A  = 0 is ok, A <>0 is not ok
002CFF  3               ;------------------------------------------
002CFF  3               
002CFF  3               laddu:
002CFF  3               	ldy #9
002CFF  3               	lda (z80_ix),y		; x coordinate.
002CFF  3               	sta dispx
002CFF  3               
002CFF  3               	ldy #8
002CFF  3               	lda (z80_ix),y		; y coordinate.
002CFF  3               	and #254 		; make it even.
002CFF  3               	sta (z80_ix),y		; reset it.
002CFF  3               	clc 			; look 2 pixels above feet.
002CFF  3               numsp6:
002CFF  3               	adc #SPR_HGT-2
002CFF  3               	sta dispy		; coords in dispx,dispy.
002CFF  3               laddv:
002CFF  3               	jsr tstbl 		; get map address.
002CFF  3               	jsr ldchk 		; standard ladder check.
002CFF  3               	beq :+
002CFF  3               	rts 			; no way through.
002CFF  3               :
002CFF  3               	inc bufaddr 		; look right one cell.
002CFF  3               	bne :+
002CFF  3               	inc bufaddr+1
002CFF  3               :
002CFF  3               	jsr ldchk 		; do the check.
002CFF  3               	beq :+
002CFF  3               	rts 			; impassable.
002CFF  3               :
002CFF  3               	lda dispx 		; y coordinate.
002CFF  3               	and #7 			; position straddling block cells.
002CFF  3               	bne :+
002CFF  3               	rts 			; no more checks needed.
002CFF  3               :
002CFF  3               	inc bufaddr 		; look to third cell.
002CFF  3               	bne :+
002CFF  3               	inc bufaddr+1
002CFF  3               :
002CFF  3               	jsr ldchk 		; do the check.
002CFF  3               	rts  			; return with zero flag set accordingly.
002CFF  3               .endif
002CFF  3               
002CFF  3               ;---------------------------------------------------------
002CFF  3               ; Can go up check.
002CFF  3               ;
002CFF  3               ; Input:
002CFF  3               ;  IX = sprite pointer
002CFF  3               ;
002CFF  3               ; Output:
002CFF  3               ;  A  = 0 is ok, A <>0 is not ok
002CFF  3               ;---------------------------------------------------------
002CFF  3               
002CFF  3               cangu:
002CFF  3  A0 09        	ldy #9
002D01  3  B1 68        	lda (z80_ix),y		; x coordinate.
002D03  3  85 rr        	sta dispx
002D05  3  A0 08        	ldy #8
002D07  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002D09  3  38           	sec
002D0A  3  E9 02        	sbc #2
002D0C  3  85 rr        	sta dispy		; coords in dispx,dispy.
002D0E  3  20 AD 2F     	jsr tstbl 		; get map address.
002D11  3  20 C1 2E     	jsr lrchk 		; standard left/right check.
002D14  3  F0 01        	beq :+
002D16  3  60           	rts			; no way through.
002D17  3               :
002D17  3  E6 rr        	inc bufaddr		; look right one cell.
002D19  3  D0 02        	bne :+
002D1B  3  E6 rr        	inc bufaddr+1
002D1D  3               :
002D1D  3  20 C1 2E     	jsr lrchk 		; do the check.
002D20  3  F0 01        	beq :+
002D22  3  60           	rts			; impassable.
002D23  3               :
002D23  3  A5 rr        	lda dispx		; x coordinate.
002D25  3  29 07        	and #7			; position straddling block cells.
002D27  3  D0 01        	bne :+
002D29  3  60           	rts			; no more checks needed.
002D2A  3               :
002D2A  3  E6 rr        	inc bufaddr		; look to third cell.
002D2C  3  D0 02        	bne :+
002D2E  3  E6 rr        	inc bufaddr+1
002D30  3               :
002D30  3  20 C1 2E     	jsr lrchk		; do the check.
002D33  3  60           	rts 			; return with zero flag set accordingly.
002D34  3               
002D34  3               ;---------------------------------------------------------
002D34  3               ; Can go down check.
002D34  3               ;
002D34  3               ; Input:
002D34  3               ;  IX = sprite pointer
002D34  3               ;
002D34  3               ; Output:
002D34  3               ;  A  = 0 is ok, A <>0 is not ok
002D34  3               ;---------------------------------------------------------
002D34  3               
002D34  3               ;.repeat 264
002D34  3               ;  .byte 0
002D34  3               ;.endrep
002D34  3               
002D34  3               cangd:
002D34  3  A0 09        	ldy #9
002D36  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002D38  3  85 rr        	sta dispx
002D3A  3  A0 08        	ldy #8
002D3C  3  B1 68        	lda (z80_ix),y		; y coordinate.
002D3E  3  18           	clc
002D3F  3               numsp3:
002D3F  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
002D41  3  85 rr        	sta dispy		; coords in dispx,dispy.
002D43  3  20 AD 2F     	jsr tstbl 		; get map address.
002D46  3  20 D6 2E     	jsr plchk 		; block, platform check.
002D49  3  F0 01        	beq :+
002D4B  3  60           	rts			; no way through.
002D4C  3               :
002D4C  3  E6 rr        	inc bufaddr		; look right one cell.
002D4E  3  D0 02        	bne :+
002D50  3  E6 rr        	inc bufaddr+1
002D52  3               :
002D52  3  20 D6 2E     	jsr plchk		; block, platform check.
002D55  3  F0 01        	beq :+
002D57  3  60           	rts			; impassable.
002D58  3               :
002D58  3  A5 rr        	lda dispx		; x coordinate.
002D5A  3  29 07        	and #7			; position straddling block cells.
002D5C  3  D0 01        	bne :+
002D5E  3  60           	rts			; no more checks needed.
002D5F  3               :
002D5F  3  E6 rr        	inc bufaddr		; look to third cell.
002D61  3  D0 02        	bne :+
002D63  3  E6 rr        	inc bufaddr+1
002D65  3               :
002D65  3  20 D6 2E     	jsr plchk		; block, platform check.
002D68  3  60           	rts			; return with zero flag set accordingly.
002D69  3               
002D69  3               ;---------------------------------------------------------
002D69  3               ; Can go left check.
002D69  3               ;
002D69  3               ; Input:
002D69  3               ;  IX = sprite pointer
002D69  3               ;
002D69  3               ; Output:
002D69  3               ;  A  = 0 is ok, A <>0 is not ok
002D69  3               ;---------------------------------------------------------
002D69  3               
002D69  3               cangl:
002D69  3  A0 08        	ldy #8
002D6B  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002D6D  3  85 rr        	sta dispy
002D6F  3  A0 09        	ldy #9
002D71  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002D73  3  38           	sec
002D74  3  E9 02        	sbc #2			; look left 2 pixels.
002D76  3  85 rr        	sta dispx		; coords in dispx,dispy.
002D78  3  4C 9A 2E     	jmp cangh		; test if we can go there.
002D7B  3               
002D7B  3               ;---------------------------------------------------------
002D7B  3               ; Can go right check.
002D7B  3               ;
002D7B  3               ; Input:
002D7B  3               ;  IX = sprite pointer
002D7B  3               ;
002D7B  3               ; Output:
002D7B  3               ;  A  = 0 is ok, A <>0 is not ok
002D7B  3               ;---------------------------------------------------------
002D7B  3               
002D7B  3  00 00 00 00  .repeat 272
002D7F  3  00 00 00 00  
002D83  3  00 00 00 00  
002E8B  3                 .byte 0
002E8B  3               .endrep
002E8B  3               
002E8B  3               cangr:
002E8B  3  A0 08        	ldy #8
002E8D  3  B1 68        	lda (z80_ix),y		; y coordinate.
002E8F  3  85 rr        	sta dispy
002E91  3  A0 09        	ldy #9
002E93  3  B1 68        	lda (z80_ix),y		; x coordinate.
002E95  3  18           	clc
002E96  3  69 10        	adc #16			; look right 16 pixels.
002E98  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E9A  3               cangh:
002E9A  3               cangh2:
002E9A  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
002E9C  3  85 63        	sta z80_b
002E9E  3  A5 rr        	lda dispy		; y position.
002EA0  3  29 07        	and #7			; does x straddle cells?
002EA2  3  D0 02        	bne cangh0		; yes, loop counter is good.
002EA4  3  C6 63        	dec z80_b		; one less row to write.
002EA6  3               cangh0:
002EA6  3  20 AD 2F     	jsr tstbl		; get map address.
002EA9  3               cangh1:
002EA9  3  20 C1 2E     	jsr lrchk		; standard left/right check.
002EAC  3  F0 01        	beq :+
002EAE  3  60           	rts			; no way through.
002EAF  3               :
002EAF  3  48           	pha
002EB0  3  18           	clc
002EB1  3  A5 rr        	lda bufaddr
002EB3  3  69 20        	adc #32			; look down.
002EB5  3  85 rr        	sta bufaddr
002EB7  3  90 02        	bcc :+
002EB9  3  E6 rr        	inc bufaddr+1
002EBB  3               :
002EBB  3  68           	pla
002EBC  3               
002EBC  3  C6 63        	dec z80_b
002EBE  3  D0 E9        	bne cangh1
002EC0  3  60           	rts
002EC1  3               
002EC1  3               ;-------------------------------------
002EC1  3               ; Check left/right movement is okay.
002EC1  3               ;
002EC1  3               ; Input:
002EC1  3               ;  bufaddr = MAP + x/8 + y/8*32
002EC1  3               ;
002EC1  3               ; Output:
002EC1  3               ;  A  = 0 is ok, A <>0 is not ok
002EC1  3               ;-------------------------------------
002EC1  3               
002EC1  3               lrchk:
002EC1  3  A0 00        	ldy #0
002EC3  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002EC5  3  C9 02        	cmp #WALL 		; is it passable?
002EC7  3  F0 0A        	beq lrchkx		; no.
002EC9  3               
002EC9  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002ECB  3  F0 06        	beq lrchkx		; not passable.
002ECD  3  A9 00        	lda #0
002ECF  3  60           	rts
002ED0  3               
002ED0  3               ;--------------------------------------------------------------
002ED0  3               ; Called by mmenu
002ED0  3               ;--------------------------------------------------------------
002ED0  3               
002ED0  3               always:
002ED0  3  A9 FF        	lda #255		; report it as okay.
002ED2  3  60           	rts
002ED3  3               
002ED3  3               lrchkx:
002ED3  3  A9 01        	lda #1 			; reset all bits.
002ED5  3  60           	rts
002ED6  3               
002ED6  3               
002ED6  3               ;--------------------------------------------------------------
002ED6  3               ; Check platform or solid item is not in way.
002ED6  3               ;
002ED6  3               ; Input:
002ED6  3               ;  bufaddr = MAP + x/8 + y/8*32
002ED6  3               ;
002ED6  3               ; Output:
002ED6  3               ;  A  = 0 is ok, A <>0 is not ok
002ED6  3               ;--------------------------------------------------------------
002ED6  3               
002ED6  3               plchk:
002ED6  3  A0 00        	ldy #0
002ED8  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002EDA  3  C9 02        	cmp #WALL 		; is it passable?
002EDC  3  F0 F5        	beq lrchkx		; no.
002EDE  3               .if pflag .or dflag
002EDE  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002EE0  3  F0 F1        	beq lrchkx		; not passable.
002EE2  3               .endif
002EE2  3  C9 01        	cmp #PLATFM		; platform is solid.
002EE4  3  F0 03        	beq plchkx		; not passable.
002EE6  3               .if lflag
002EE6  3               	cmp #LADDER		; is it a ladder?
002EE6  3               	beq lrchkx		; on ladder, deny movement.
002EE6  3               .endif
002EE6  3               plchk0:
002EE6  3  A9 00        	lda #0			; report as ok
002EE8  3  60           	rts
002EE9  3               plchkx:
002EE9  3  A5 rr        	lda dispy		; x coordinate.
002EEB  3  29 07        	and #7			; position straddling blocks.
002EED  3  F0 E4        	beq lrchkx		; on platform, deny movement.
002EEF  3  4C E6 2E     	jmp plchk0
002EF2  3               
002EF2  3               ;--------------------------------------------------------------
002EF2  3               ; Check ladder is available.
002EF2  3               ;
002EF2  3               ; Input:
002EF2  3               ;  bufaddr = MAP + x/8 + y/8*32
002EF2  3               ;
002EF2  3               ; Output:
002EF2  3               ;  A  = 0 is ok, A <>0 is not ok
002EF2  3               ;--------------------------------------------------------------
002EF2  3               
002EF2  3               .if lflag
002EF2  3               ldchk:
002EF2  3               	ldy #0
002EF2  3               	lda (bufaddr),y 	; fetch cell.
002EF2  3               	cmp #LADDER 		; is it a ladder?
002EF2  3               	beq :+
002EF2  3               	lda #1
002EF2  3               	rts  			; return with zero flag set accordingly.
002EF2  3               :
002EF2  3               	lda #0
002EF2  3               	rts
002EF2  3               .endif
002EF2  3               
002EF2  3               ;--------------------------------------------------------------
002EF2  3               ; Get collectables.
002EF2  3               ;--------------------------------------------------------------
002EF2  3               
002EF2  3               .if cflag
002EF2  3               getcol:
002EF2  3                       lda #COLECT             ; collectable blocks.
002EF2  3                       sta z80_b
002EF2  3                       jsr tded                ; test for collectable blocks.
002EF2  3                       cmp z80_b               ; did we find one?
002EF2  3                       beq :+
002EF2  3                       rts                     ; none were found, job done.
002EF2  3               :
002EF2  3                       jsr gtblk               ; get block.
002EF2  3                       jsr evnt20              ; collected block event.
002EF2  3                       jmp getcol              ; repeat until none left.
002EF2  3               
002EF2  3               ; Get collectable block.
002EF2  3               
002EF2  3               gtblk:
002EF2  3               	ldy #0
002EF2  3               	lda (bufaddr),y
002EF2  3               	sta z80_a
002EF2  3                       lda #0
002EF2  3                       sta (bufaddr),y		; make it empty now.
002EF2  3               
002EF2  3               	lda bufaddr		; set dispx
002EF2  3               	and #31
002EF2  3               	sta dispx
002EF2  3               
002EF2  3               	lda bufaddr+1		; Set dispy
002EF2  3               	sec
002EF2  3               	sbc #>MAP
002EF2  3               	sta bufaddr+1
002EF2  3               	asl bufaddr
002EF2  3               	rol bufaddr+1
002EF2  3               	asl bufaddr
002EF2  3               	rol bufaddr+1
002EF2  3               	asl bufaddr
002EF2  3               	rol bufaddr+1
002EF2  3               	lda bufaddr+1
002EF2  3               	sta dispy
002EF2  3               
002EF2  3               	lda colpatt		; get blocknr
002EF2  3               	sta z80_e		; displacement in e.
002EF2  3               	lda #0
002EF2  3               	sta z80_d		; no high byte.
002EF2  3               	asl z80_e  		; multiply char by 8.
002EF2  3               	rol z80_d
002EF2  3               	asl z80_e
002EF2  3               	rol z80_d
002EF2  3               	asl z80_e
002EF2  3               	rol z80_d
002EF2  3               	clc
002EF2  3               	lda z80_e
002EF2  3               	adc #<chgfx 		; address of graphics.
002EF2  3               	sta tileaddr
002EF2  3               	lda z80_d
002EF2  3               	adc #>chgfx
002EF2  3               	sta tileaddr+1
002EF2  3               	jsr gprad 		; get screen address.
002EF2  3               	ldx #7			; number of pixel rows to write.
002EF2  3               gtblk0:
002EF2  3               	ldy #0
002EF2  3               	lda (tileaddr),y 	; get image byte.
002EF2  3               	ldy scrtab,x
002EF2  3               	eor (scraddr),y 	; XOR tile on screen
002EF2  3               	sta (scraddr),y 	; copy to screen.
002EF2  3               	inc tileaddr 		; next image byte.
002EF2  3               	bne :+
002EF2  3               	inc tileaddr+1
002EF2  3               :
002EF2  3               	dex	 		; repeat for 8 pixel rows.
002EF2  3               	bpl gtblk0
002EF2  3               	rts
002EF2  3               .endif
002EF2  3               
002EF2  3               ;--------------------------------------------------------------
002EF2  3               ; Touched deadly block check.
002EF2  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002EF2  3               ;
002EF2  3               ; Input:
002EF2  3               ;  IX = sprite address
002EF2  3               ;
002EF2  3               ; Output:
002EF2  3               ;  A  = 0 is ok, A=5 is not ok
002EF2  3               ;--------------------------------------------------------------
002EF2  3               
002EF2  3               tded:
002EF2  3  A0 08        	ldy #8
002EF4  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002EF6  3  85 rr        	sta dispy
002EF8  3  C8           	iny
002EF9  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002EFB  3  85 rr        	sta dispx		; coords in dispx,dispy.
002EFD  3  20 AD 2F     	jsr tstbl		; get map address.
002F00  3  48           	pha
002F01  3  A9 1F        	lda #31			; default distance to next line down.
002F03  3  85 64        	sta z80_e
002F05  3  68           	pla
002F06  3  C5 63        	cmp z80_b		; is this the required block?
002F08  3  D0 01        	bne :+
002F0A  3  60           	rts			; yes.
002F0B  3               :
002F0B  3  E6 rr        	inc bufaddr 		; next cell.
002F0D  3  D0 02        	bne :+
002F0F  3  E6 rr        	inc bufaddr+1
002F11  3               :
002F11  3  A0 00        	ldy #0
002F13  3  B1 rr        	lda (bufaddr),y		; fetch type.
002F15  3  C5 63        	cmp z80_b 		; is this deadly/custom?
002F17  3  D0 01        	bne :+
002F19  3  60           	rts			; yes.
002F1A  3               :
002F1A  3  A5 rr        	lda dispx		; horizontal position.
002F1C  3  85 62        	sta z80_c 		; store column in c register.
002F1E  3  29 07        	and #7			; is it straddling cells?
002F20  3  D0 03        	bne :+
002F22  3  4C 36 2F     	jmp tded0		; no.
002F25  3               :
002F25  3  E6 rr        	inc bufaddr 		; last cell.
002F27  3  D0 02        	bne :+
002F29  3  E6 rr        	inc bufaddr+1
002F2B  3               :
002F2B  3  A0 00        	ldy #0
002F2D  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002F2F  3  C5 63        	cmp z80_b		; is this the block?
002F31  3  D0 01        	bne :+
002F33  3  60           	rts			; yes.
002F34  3               :
002F34  3  C6 64        	dec z80_e		; one less cell to next row down.
002F36  3               tded0:
002F36  3  18           	clc 			; point to next row.
002F37  3  A5 rr        	lda bufaddr
002F39  3  65 64        	adc z80_e
002F3B  3  85 rr        	sta bufaddr
002F3D  3  90 02        	bcc :+
002F3F  3  E6 rr        	inc bufaddr+1
002F41  3               :
002F41  3  A0 00        	ldy #0
002F43  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
002F45  3  C5 63        	cmp z80_b		; is this fatal?
002F47  3  D0 01        	bne :+
002F49  3  60           	rts			; yes.
002F4A  3               :
002F4A  3  E6 rr        	inc bufaddr 		; next cell.
002F4C  3  D0 02        	bne :+
002F4E  3  E6 rr        	inc bufaddr+1
002F50  3               :
002F50  3  A0 00        	ldy #0
002F52  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002F54  3  C5 63        	cmp z80_b		; is this fatal?
002F56  3  D0 01        	bne :+
002F58  3  60           	rts			; yes.
002F59  3               :
002F59  3  A5 62        	lda z80_c		; horizontal position.
002F5B  3  29 07        	and #7			; is it straddling cells?
002F5D  3  D0 03        	bne :+
002F5F  3  4C 71 2F     	jmp tded1 		; no.
002F62  3               :
002F62  3  E6 rr        	inc bufaddr		; last cell.
002F64  3  D0 02        	bne :+
002F66  3  E6 rr        	inc bufaddr+1
002F68  3               :
002F68  3  A0 00        	ldy #0
002F6A  3  B1 rr        	lda (bufaddr),y		; fetch type.
002F6C  3  C5 63        	cmp z80_b		; is this fatal?
002F6E  3  D0 01        	bne :+
002F70  3  60           	rts			; yes.
002F71  3               :
002F71  3               tded1:
002F71  3  A5 rr        	lda dispy		; vertical position.
002F73  3  29 07        	and #7 			; is it straddling cells?
002F75  3  D0 01        	bne :+
002F77  3  60           	rts			; no, job done.
002F78  3               :
002F78  3  18           	clc			; point to next row.
002F79  3  A5 rr        	lda bufaddr
002F7B  3  65 64        	adc z80_e
002F7D  3  85 rr        	sta bufaddr
002F7F  3  90 02        	bcc :+
002F81  3  E6 rr        	inc bufaddr+1
002F83  3               :
002F83  3  A0 00        	ldy #0
002F85  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
002F87  3  C5 63        	cmp z80_b		; is this fatal?
002F89  3  D0 01        	bne :+
002F8B  3  60           	rts			; yes.
002F8C  3               :
002F8C  3  E6 rr        	inc bufaddr		; next cell.
002F8E  3  D0 02        	bne :+
002F90  3  E6 rr        	inc bufaddr+1
002F92  3               :
002F92  3  A0 00        	ldy #0
002F94  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002F96  3  C5 63        	cmp z80_b		; is this fatal?
002F98  3  D0 01        	bne :+
002F9A  3  60           	rts			; yes.
002F9B  3               :
002F9B  3  A5 62        	lda z80_c		; horizontal position.
002F9D  3  29 07        	and #7			; is it straddling cells?
002F9F  3  D0 01        	bne :+
002FA1  3  60           	rts			; no.
002FA2  3               :
002FA2  3  E6 rr        	inc bufaddr		; last cell.
002FA4  3  D0 02        	bne :+
002FA6  3  E6 rr        	inc bufaddr+1
002FA8  3               :
002FA8  3  A0 00        	ldy #0
002FAA  3  B1 rr        	lda (bufaddr),y		; fetch final type.
002FAC  3  60           	rts 			; return with final type in accumulator.
002FAD  3               
002FAD  3               ;---------------------------------------------------
002FAD  3               ; Fetch block type at (dispx, dispy).
002FAD  3               ;
002FAD  3               ; Output:
002FAD  3               ;  A = block type
002FAD  3               ;---------------------------------------------------
002FAD  3               
002FAD  3               tstbl:
002FAD  3  A5 rr        	lda dispy 		; fetch y coord.
002FAF  3  4A           	lsr a			; bufaddr = y/8
002FB0  3  4A           	lsr a
002FB1  3  4A           	lsr a
002FB2  3  85 rr        	sta chary
002FB4  3               
002FB4  3  85 rr        	sta bufaddr
002FB6  3  A9 00        	lda #0
002FB8  3  85 rr        	sta bufaddr+1
002FBA  3               
002FBA  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
002FBC  3  26 rr        	rol bufaddr+1
002FBE  3  06 rr        	asl bufaddr
002FC0  3  26 rr        	rol bufaddr+1
002FC2  3  06 rr        	asl bufaddr
002FC4  3  26 rr        	rol bufaddr+1
002FC6  3  06 rr        	asl bufaddr
002FC8  3  26 rr        	rol bufaddr+1
002FCA  3  06 rr        	asl bufaddr
002FCC  3  26 rr        	rol bufaddr+1
002FCE  3               
002FCE  3  A5 rr        	lda dispx		; x/8
002FD0  3  4A           	lsr a
002FD1  3  4A           	lsr a
002FD2  3  4A           	lsr a
002FD3  3  85 rr        	sta charx
002FD5  3               
002FD5  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
002FD6  3  65 rr        	adc bufaddr
002FD8  3  69 00        	adc #<MAP
002FDA  3  85 rr        	sta bufaddr
002FDC  3  A5 rr        	lda bufaddr+1
002FDE  3  69 DD        	adc #>MAP
002FE0  3  85 rr        	sta bufaddr+1
002FE2  3               
002FE2  3  A0 00        	ldy #0
002FE4  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002FE6  3  60           	rts
002FE7  3               
002FE7  3               
002FE7  3               ;-------------------------------------------------------------------
002FE7  3               ; Jump - if we can.
002FE7  3               ; Requires initial speed to be set up in accumulator prior to call.
002FE7  3               ;
002FE7  3               ; Input:
002FE7  3               ;  IX = sprite address
002FE7  3               ;-------------------------------------------------------------------
002FE7  3               
002FE7  3               jump:
002FE7  3  A0 0D        	ldy #13
002FE9  3  B1 68        	lda (z80_ix),y		; jump table low.
002FEB  3  A0 0E        	ldy #14
002FED  3  11 68        	ora (z80_ix),y		; jump table high.
002FEF  3  F0 01        	beq :+
002FF1  3  60           	rts			; already in the air.
002FF2  3               :
002FF2  3  A9 88        	lda #>jtab
002FF4  3  A0 0E        	ldy #14
002FF6  3  91 68        	sta (z80_ix),y		; set jump high.
002FF8  3  A9 F2        	lda #<jtab		; jump table start.
002FFA  3  A0 0D        	ldy #13
002FFC  3  91 68        	sta (z80_ix),y		; set jump low.
002FFE  3  60           	rts
002FFF  3               
002FFF  3               ; Jump table.
002FFF  3               
002FFF  3               ;jtab:
002FFF  3               ;	.byte 248,250,252
002FFF  3               ;	.byte 254,254,255
002FFF  3               ;	.byte 255,255,0,0
002FFF  3               ;	.byte 0,1,1,1,2,2
002FFF  3               ;	.byte 4,6,8,8,8,99
002FFF  3               
002FFF  3               ;------------------------------------------------
002FFF  3               ; Random numbers code.
002FFF  3               ; Pseudo-random number generator, 8-bit.
002FFF  3               ;
002FFF  3               ; Output:
002FFF  3               ;  RND = random number
002FFF  3               ;------------------------------------------------
002FFF  3               
002FFF  3               random:
002FFF  3  A5 rr        	lda seed
003001  3  F0 05        	beq doEor
003003  3  0A           	asl a
003004  3  F0 04        	beq noEor
003006  3  90 02        	bcc noEor
003008  3  49 1D        doEor:	eor #$1d
00300A  3  85 rr        noEor:	sta seed
00300C  3  60           	rts
00300D  3               
00300D  3  A5 rr        	lda seed		; get last random number.
00300F  3  0A           	asl a
003010  3  0A           	asl a
003011  3  18           	clc
003012  3  65 rr        	adc seed
003014  3  18           	clc
003015  3  69 45        	adc #$45
003017  3  85 rr        	sta seed		; store new seed.
003019  3  85 rr        	sta varrnd		; return number in variable.
00301B  3  60           	rts
00301C  3               
00301C  3               ;--------------------------------------------------------
00301C  3               ; Keys
00301C  3               ;
00301C  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
00301C  3               ;             ||||||||
00301C  3               ;             |||||||+> Right    KEY 0  - X
00301C  3               ;             ||||||+-> Left     KEY 1  - Z
00301C  3               ;             |||||+--> Down     KEY 2  - .
00301C  3               ;             ||||+---> Up       KEY 3  - ;
00301C  3               ;             |||+----> Fire1    KEY 4  - SPC
00301C  3               ;             ||+-----> Fire2    KEY 5  - Q
00301C  3               ;             |+------> Fire3    KEY 6  - P
00301C  3               ;             +-------> Not used
00301C  3               ;
00301C  3               ;                       Option1  KEY 7  - 1
00301C  3               ;                       Option2  KEY 8  - 2
00301C  3               ;                       Option3  KEY 9  - 3
00301C  3               ;                       Option4  KEY 10 - 4
00301C  3               ;--------------------------------------------------------
00301C  3               
00301C  3               ;              X   Z   .   ;  SPC  Q   P
00301C  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
00301C  3               ;        .byte $21,$11,$01,$92                   ; menu options.
00301C  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
003020  3  00 04 14     
003023  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
003027  3               
003027  3               ;-------------------------------------------------------
003027  3               ; Joystick and keyboard reading routines.
003027  3               ;
003027  3               ; contrl = 0, Keyboard
003027  3               ;          1, JoyKeyb
003027  3               ;          2, JoyMMC
003027  3               ;-------------------------------------------------------
003027  3               
003027  3               joykey:
003027  3  A5 rr        	lda contrl 		; control flag.
003029  3  C9 01        	cmp #1
00302B  3  D0 03        	bne :+
00302D  3  4C A3 89     	jmp joy1 		; read keyboard joystick
003030  3               :
003030  3  C9 02        	cmp #2
003032  3  D0 03        	bne :+
003034  3  4C D3 89     	jmp joy2 		; read MMC joystick.
003037  3               :
003037  3               ; Keyboard controls.
003037  3               
003037  3  A9 00        	lda #0		 	; zero reading.
003039  3  85 64        	sta z80_e
00303B  3               
00303B  3  A0 06        	ldy #6	 		; address of last key.
00303D  3               joyke0:
00303D  3  B9 F3 88     	lda keys,y 		; get key from table.
003040  3  20 7A 89     	jsr ktest		; being pressed?
003043  3  26 64        	rol z80_e 		; rotate into reading.
003045  3               
003045  3  88           	dey		 	; next key.
003046  3  10 F5        	bpl joyke0 		; repeat for all keys.
003048  3  A5 64        	lda z80_e 		; copy e register to accumulator.
00304A  3  85 rr        	sta joyval		; remember value.
00304C  3  60           	rts
00304D  3               
00304D  3               ;---------------------------------------------------------------
00304D  3               ; Display message.
00304D  3               ;
00304D  3               ; Input:
00304D  3               ;  A = message number
00304D  3               ;---------------------------------------------------------------
00304D  3               
00304D  3               dmsg:
00304D  3  AA           	tax
00304E  3  A9 B4        	lda #<msgdat		; pointer to messages.
003050  3  85 66        	sta z80_l
003052  3  A9 49        	lda #>msgdat
003054  3  85 67        	sta z80_h
003056  3  20 68 31     	jsr getwrd		; get message number.
003059  3               dmsg3:
003059  3  20 55 31     	jsr preprt		; pre-printing stuff.
00305C  3  20 9F 29     	jsr checkx		; make sure we"re in a printable range.
00305F  3  A5 rr        	lda prtmod		; print mode.
003061  3  D0 47        	bne bmsg1		; no, double-height text.
003063  3               dmsg0:
003063  3  A5 67        	lda z80_h		; store string pointer.
003065  3  48           	pha
003066  3  A5 66        	lda z80_l
003068  3  48           	pha
003069  3               
003069  3  A0 00        	ldy #0
00306B  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
00306D  3  29 7F        	and #127		; remove any end marker.
00306F  3  C9 0D        	cmp #13
003071  3  F0 24        	beq dmsg1
003073  3  20 33 2B     	jsr pchar		; display character.
003076  3  20 42 31     	jsr nexpos 		; display position.
003079  3  D0 03        	bne dmsg2		; not on a new line.
00307B  3  20 47 31     	jsr nexlin		; next line down.
00307E  3               dmsg2:
00307E  3  68           	pla			; retrieve string pointer
00307F  3  85 66        	sta z80_l
003081  3  68           	pla
003082  3  85 67        	sta z80_h
003084  3               
003084  3  A0 00        	ldy #0
003086  3  B1 66        	lda (z80_hl),y		; fetch last character.
003088  3  0A           	asl a  			; was it the end?
003089  3  90 03        	bcc :+
00308B  3  4C F2 29     	jmp dscor2		; yes, job done.
00308E  3               :
00308E  3  E6 66        	inc z80_l		; next character to display.
003090  3  D0 02        	bne :+
003092  3  E6 67        	inc z80_h
003094  3               :
003094  3  4C 63 30     	jmp dmsg0
003097  3               dmsg1:
003097  3  E6 rr        	inc dispy
003099  3  A5 rr        	lda dispy
00309B  3  C9 18        	cmp #24
00309D  3  90 04        	bcc dmsg4
00309F  3  A9 00        	lda #0
0030A1  3  85 rr        	sta dispy
0030A3  3               dmsg4:
0030A3  3  A9 00        	lda #0
0030A5  3  85 rr        	sta dispx
0030A7  3  4C 7E 30     	jmp dmsg2
0030AA  3               
0030AA  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
0030AA  3               
0030AA  3               ;----------------------------------------------------------
0030AA  3               ; Display message in big text.
0030AA  3               ;
0030AA  3               ; Input:
0030AA  3               ;  HL = string pointer
0030AA  3               ;----------------------------------------------------------
0030AA  3               
0030AA  3               bmsg1:
0030AA  3  A0 00        	ldy #0
0030AC  3  B1 66        	lda (z80_hl),y 		; get character to display.
0030AE  3  29 7F        	and #127		; only want 7 bits.
0030B0  3  C9 0D        	cmp #13
0030B2  3  F0 13        	beq bmsg2
0030B4  3  20 DC 30     	jsr bchar 		; display big char.
0030B7  3               bmsg3:
0030B7  3  A0 00        	ldy #0
0030B9  3  B1 66        	lda (z80_hl),y 		; look at last character.
0030BB  3  48           	pha
0030BC  3  E6 66        	inc z80_l 		; next character in list.
0030BE  3  D0 02        	bne :+
0030C0  3  E6 67        	inc z80_h
0030C2  3               :
0030C2  3  68           	pla
0030C3  3  0A           	asl a  			; was terminator flag set?
0030C4  3  90 E4        	bcc bmsg1		; no, keep going.
0030C6  3  60           	rts
0030C7  3               bmsg2:
0030C7  3  A9 00        	lda #0
0030C9  3  85 rr        	sta dispx
0030CB  3  E6 rr        	inc dispy
0030CD  3  E6 rr        	inc dispy
0030CF  3  A5 rr        	lda dispy
0030D1  3  C9 17        	cmp #23
0030D3  3  90 E2        	bcc bmsg3
0030D5  3  A9 00        	lda #0
0030D7  3  85 rr        	sta dispy
0030D9  3  4C B7 30     	jmp bmsg3
0030DC  3               
0030DC  3               ;----------------------------------------------------------
0030DC  3               ; Big character display.
0030DC  3               ;
0030DC  3               ; Input:
0030DC  3               ;  A = character
0030DC  3               ;----------------------------------------------------------
0030DC  3               
0030DC  3               bchar:
0030DC  3  85 64        	sta z80_e		; save char in lb
0030DE  3  A9 00        	lda #0
0030E0  3  85 65        	sta z80_d		; reset hb
0030E2  3               
0030E2  3  06 64        	asl z80_e 		; multiply char by 8.
0030E4  3  26 65        	rol z80_d
0030E6  3  06 64        	asl z80_e
0030E8  3  26 65        	rol z80_d
0030EA  3  06 64        	asl z80_e
0030EC  3  26 65        	rol z80_d		; de = a*8
0030EE  3               
0030EE  3  18           	clc			; de = Fontpointer + a*8
0030EF  3  A5 64        	lda z80_e
0030F1  3  69 F2        	adc #<(FONT-256) 		; address of font.
0030F3  3  85 64        	sta z80_e
0030F5  3  A5 65        	lda z80_d
0030F7  3  69 84        	adc #>(FONT-256)
0030F9  3  85 65        	sta z80_d
0030FB  3               
0030FB  3  20 E4 2A     	jsr gprad 		; get screen address.
0030FE  3               
0030FE  3  A2 00        	ldx #0			; height of character in font.
003100  3               bchar0:
003100  3  A0 00        	ldy #0
003102  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
003104  3               
003104  3               .if iflag
003104  3               	eor #$ff
003104  3               .endif
003104  3               
003104  3  91 rr        	sta (scraddr),y
003106  3  48           	pha
003107  3  20 9C 34     	jsr nline 		; next line down.
00310A  3  68           	pla
00310B  3  91 rr        	sta (scraddr),y
00310D  3  20 9C 34     	jsr nline 		; next line down.
003110  3               
003110  3  18           	clc
003111  3  E6 64        	inc z80_e 		; next line of font.
003113  3  D0 02        	bne :+
003115  3  E6 65        	inc z80_d
003117  3               :
003117  3  E8           	inx
003118  3  E0 08        	cpx #8
00311A  3  D0 E4        	bne bchar0
00311C  3               
00311C  3  20 42 31     	jsr nexpos		; display position.
00311F  3  D0 05        	bne bchar2 		; not on a new line.
003121  3               bchar3:
003121  3  E6 rr        	inc dispy
003123  3  20 47 31     	jsr nexlin 		; next line check.
003126  3               bchar2:
003126  3  4C F2 29     	jmp dscor2		; tidy up line and column variables.
003129  3               
003129  3               
003129  3               ;-------------------------------------------------
003129  3               ; Display a character.
003129  3               ;
003129  3               ; Input:
003129  3               ;  A = character
003129  3               ;-------------------------------------------------
003129  3               
003129  3               achar:
003129  3  85 63        	sta z80_b 		; copy to b.
00312B  3  20 55 31     	jsr preprt 		; get ready to print.
00312E  3  A5 63        	lda z80_b		; character in accumulator.
003130  3  A6 rr        	ldx prtmod 		; print mode.
003132  3  F0 03        	beq :+
003134  3  4C DC 30     	jmp bchar 		; no, double-height text.
003137  3               :
003137  3  20 33 2B     	jsr pchar 		; display character.
00313A  3  20 42 31     	jsr nexpos 		; display position.
00313D  3  F0 E2        	beq bchar3		; next line down.
00313F  3  4C 26 31     	jmp bchar2 		; tidy up.
003142  3               
003142  3               
003142  3               ;-------------------------------------------------
003142  3               ; Get next print column position.
003142  3               ;-------------------------------------------------
003142  3               
003142  3               nexpos:
003142  3  E6 rr        	inc dispx		; move along one position.
003144  3  A5 rr        	lda dispx 		; get coordinate.
003146  3               ;	and #31
003146  3  60           	rts 			; return with status in zero flag.
003147  3               
003147  3               ;-------------------------------------------------
003147  3               ; Get next print line position.
003147  3               ;-------------------------------------------------
003147  3               
003147  3               nexlin:
003147  3  E6 rr        	inc dispy 		; newline.
003149  3  A5 rr        	lda dispy		; vertical position.
00314B  3  C9 18        	cmp #24			; past screen edge?
00314D  3  B0 01        	bcs :+
00314F  3  60           	rts			; no, still okay.
003150  3               :
003150  3  A9 00        	lda #0			; restart at top.
003152  3  85 rr        	sta dispy
003154  3  60           	rts
003155  3               
003155  3               ;--------------------------------------------------------
003155  3               ; Pre-print preliminaries.
003155  3               ;--------------------------------------------------------
003155  3               
003155  3               preprt:
003155  3  A9 F2        	lda #<(FONT-256)		; font pointer.
003157  3  8D 9D 29     	sta grbase		; set up graphics base.
00315A  3  A9 84        	lda #>(FONT-256)
00315C  3  8D 9E 29     	sta grbase+1
00315F  3               prescr:
00315F  3  A5 rr        	lda charx 		; display coordinates.
003161  3  85 rr        	sta dispx		; set up general coordinates.
003163  3  A5 rr        	lda chary
003165  3  85 rr        	sta dispy
003167  3  60           	rts
003168  3               
003168  3               ;--------------------------------------------------------------
003168  3               ; Get messagenr x in hl
003168  3               ;
003168  3               ; Input:
003168  3               ;  HL = pointer to message list
003168  3               ;  X  = message number.
003168  3               ;--------------------------------------------------------------
003168  3               
003168  3               getwrd:
003168  3  E0 00        	cpx #0
00316A  3  D0 01        	bne:+ 			; first word in list?
00316C  3  60           	rts 			; yep, don't search.
00316D  3               :
00316D  3  A0 00        	ldy #0
00316F  3               getwd0:
00316F  3  B1 66        	lda (z80_hl),y
003171  3  48           	pha
003172  3  E6 66        	inc z80_l
003174  3  D0 02        	bne :+
003176  3  E6 67        	inc z80_h
003178  3               :
003178  3  68           	pla
003179  3  C9 80        	cmp #128		; found end?
00317B  3  30 F2        	bmi getwd0		; no, carry on.
00317D  3  CA           	dex			; until we have right number.
00317E  3  D0 EF        	bne getwd0
003180  3  60           	rts
003181  3               
003181  3               ;-----------------------------------------------------------
003181  3               ; Bubble sort.
003181  3               ;-----------------------------------------------------------
003181  3               
003181  3               bsort:
003181  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
003183  3  85 rr        	sta qscnt
003185  3               
003185  3  A9 EA        	lda #<sprtab 		; sprite table.
003187  3  85 68        	sta z80_x
003189  3  A9 38        	lda #>sprtab
00318B  3  85 69        	sta z80_i
00318D  3               bsort0:
00318D  3  A0 00        	ldy #0
00318F  3  B1 68        	lda (z80_ix),y 		; first sprite type.
003191  3  C9 FF        	cmp #255 		; is it switched off?
003193  3  F0 30        	beq swemp		; yes, may need to switch another in here.
003195  3               
003195  3  A0 11        	ldy #TABSIZ
003197  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
003199  3  C9 FF        	cmp #255 		; is it enabled?
00319B  3  F0 0A        	beq bsort2 		; no, nothing to swap.
00319D  3               
00319D  3  A0 14        	ldy #TABSIZ+3
00319F  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
0031A1  3  A0 03        	ldy #3
0031A3  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
0031A5  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
0031A7  3               bsort2:
0031A7  3  18           	clc
0031A8  3  A5 68        	lda z80_x
0031AA  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0031AC  3  85 68        	sta z80_x
0031AE  3  90 02        	bcc :+
0031B0  3  E6 69        	inc z80_i
0031B2  3               :
0031B2  3  C6 rr        	dec qscnt
0031B4  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
0031B6  3  60           	rts
0031B7  3               
0031B7  3               ;qscnt:	.byte 0
0031B7  3               
0031B7  3               bsort1:
0031B7  3  A0 11        	ldy #TABSIZ
0031B9  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
0031BB  3  C9 FF        	cmp #255		; is it enabled?
0031BD  3  F0 E8        	beq bsort2		; no, nothing to swap.
0031BF  3  20 D3 31     	jsr swspr		; swap positions.
0031C2  3  4C A7 31     	jmp bsort2
0031C5  3               swemp:
0031C5  3  A0 11        	ldy #TABSIZ
0031C7  3  B1 68        	lda (z80_ix),y		; next table entry.
0031C9  3  C9 FF        	cmp #255		; is that one on?
0031CB  3  F0 DA        	beq bsort2		; no, nothing to swap.
0031CD  3  20 D3 31     	jsr swspr		; swap positions.
0031D0  3  4C A7 31     	jmp bsort2
0031D3  3               
0031D3  3               ; Swap sprites.
0031D3  3               
0031D3  3               swspr:
0031D3  3  A5 68        	lda z80_x		; table address
0031D5  3  85 64        	sta z80_e		; copy to de pair.
0031D7  3  85 66        	sta z80_l		; copy to hl pair.
0031D9  3  A5 69        	lda z80_i
0031DB  3  85 67        	sta z80_h
0031DD  3  85 65        	sta z80_d
0031DF  3               
0031DF  3  18           	clc
0031E0  3  A5 66        	lda z80_l
0031E2  3  69 11        	adc #TABSIZ		; distance to second entry.
0031E4  3  85 66        	sta z80_l
0031E6  3  90 02        	bcc :+
0031E8  3  E6 67        	inc z80_h
0031EA  3               :
0031EA  3  A9 11        	lda #TABSIZ		; bytes to swap.
0031EC  3  85 63        	sta z80_b
0031EE  3  A0 00        	ldy #0
0031F0  3               swspr0:
0031F0  3  B1 66        	lda (z80_hl),y		; fetch second byte.
0031F2  3  48           	pha
0031F3  3  B1 64        	lda (z80_de),y 		; fetch first byte.
0031F5  3  91 66        	sta (z80_hl),y 		; copy to second.
0031F7  3  68           	pla
0031F8  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
0031FA  3               
0031FA  3  E6 64        	inc z80_e 		; next byte.
0031FC  3  D0 02        	bne :+
0031FE  3  E6 65        	inc z80_d
003200  3               :
003200  3  E6 66        	inc z80_l 		; next byte.
003202  3  D0 02        	bne :+
003204  3  E6 67        	inc z80_h
003206  3               :
003206  3  C6 63        	dec z80_b
003208  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
00320A  3  60           	rts
00320B  3               
00320B  3               ;----------------------------------------------------
00320B  3               ; Process sprites.
00320B  3               ;----------------------------------------------------
00320B  3               
00320B  3               pspr:
00320B  3  A9 0C        	lda #NUMSPR		; sprites to process.
00320D  3  85 rr        	sta sprptr
00320F  3               
00320F  3  A9 EA        	lda #<sprtab 		; sprite table.
003211  3  85 68        	sta z80_x
003213  3  A9 38        	lda #>sprtab
003215  3  85 69        	sta z80_i
003217  3               pspr1:
003217  3  A0 00        	ldy #0
003219  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
00321B  3  C9 09        	cmp #9 			; within range of sprite types?
00321D  3  B0 03        	bcs :+
00321F  3  20 32 32     	jsr pspr2 		; yes, process this one.
003222  3               :
003222  3  18           	clc
003223  3  A5 68        	lda z80_x
003225  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
003227  3  85 68        	sta z80_x
003229  3  90 02        	bcc :+
00322B  3  E6 69        	inc z80_i		; next sprite.
00322D  3               :
00322D  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
00322F  3  D0 E6        	bne pspr1
003231  3  60           	rts
003232  3               
003232  3               ;sprptr:	.byte 0
003232  3               
003232  3               pspr2:
003232  3  A5 68        	lda z80_x 		; store original sprite pointer.
003234  3  85 rr        	sta ogptr
003236  3  A5 69        	lda z80_i
003238  3  85 rr        	sta ogptr+1
00323A  3  20 46 32     	jsr pspr3		; do the routine.
00323D  3               rtorg:
00323D  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
00323F  3  85 68        	sta z80_x
003241  3  A5 rr        	lda ogptr+1
003243  3  85 69        	sta z80_i
003245  3               rtorg0:
003245  3  60           	rts
003246  3               
003246  3               pspr3:
003246  3  A9 7B        	lda #<evtyp0		; sprite type events list.
003248  3  85 66        	sta z80_l
00324A  3  A9 32        	lda #>evtyp0
00324C  3  85 67        	sta z80_h
00324E  3               pspr4:
00324E  3  B1 68        	lda (z80_ix),y
003250  3  0A           	asl a			; double accumulator.
003251  3  18           	clc
003252  3  65 66        	adc z80_l
003254  3  85 66        	sta z80_l
003256  3  90 02        	bcc :+
003258  3  E6 67        	inc z80_h
00325A  3               :
00325A  3  B1 66        	lda (z80_hl),y
00325C  3  85 64        	sta z80_e 		; copy to de.
00325E  3  48           	pha
00325F  3               
00325F  3  E6 66        	inc z80_l 		; next byte of address.
003261  3  D0 02        	bne :+
003263  3  E6 67        	inc z80_h
003265  3               :
003265  3  B1 66        	lda (z80_hl),y 		; address high.
003267  3  85 65        	sta z80_d
003269  3               
003269  3  48           	pha	 		; swap address into hl.
00326A  3  A5 67        	lda z80_h
00326C  3  85 65        	sta z80_d
00326E  3  68           	pla
00326F  3  85 67        	sta z80_h
003271  3  68           	pla
003272  3  85 66        	sta z80_l
003274  3  A5 66        	lda z80_l
003276  3  85 64        	sta z80_e
003278  3               
003278  3  6C 66 00     	jmp (z80_hl) 		; go there.
00327B  3               
00327B  3               ;ogptr:	.word 0			; original sprite pointer.
00327B  3               
00327B  3               ; Address of each sprite type's routine.
00327B  3               
00327B  3  28 3A        evtyp0:	.word evnt00
00327D  3  1F 3D        evtyp1:	.word evnt01
00327F  3  A6 3D        evtyp2:	.word evnt02
003281  3  EE 3D        evtyp3:	.word evnt03
003283  3  2D 3E        evtyp4:	.word evnt04
003285  3  8F 3E        evtyp5:	.word evnt05
003287  3  F3 3E        evtyp6:	.word evnt06
003289  3  2C 3F        evtyp7:	.word evnt07
00328B  3  D0 43        evtyp8:	.word evnt08
00328D  3               
00328D  3               ;--------------------------------------------------------------
00328D  3               ; Display sprites.
00328D  3               ;
00328D  3               ; Input:
00328D  3               ;  IX = sprite table
00328D  3               ;--------------------------------------------------------------
00328D  3               
00328D  3               dspr:
00328D  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
00328F  3  85 rr        	sta sprcnt
003291  3               dspr0:
003291  3  A0 00        	ldy #0
003293  3  B1 68        	lda (z80_ix),y 		; get sprite type.
003295  3  C9 FF        	cmp #255 		; is it enabled?
003297  3  D0 42        	bne dspr1 		; yes, it needs deleting.
003299  3               dspr5:
003299  3  A0 05        	ldy #5
00329B  3  B1 68        	lda (z80_ix),y 		; new type.
00329D  3  C9 FF        	cmp #255		; is it enabled?
00329F  3  D0 77        	bne dspr3 		; yes, it needs drawing.
0032A1  3               dspr2:
0032A1  3  A0 05        	ldy #5
0032A3  3  B1 68        	lda (z80_ix),y 		; copy new type.
0032A5  3  A0 00        	ldy #0
0032A7  3  91 68        	sta (z80_ix),y
0032A9  3  A0 06        	ldy #6
0032AB  3  B1 68        	lda (z80_ix),y 		; copy new image number.
0032AD  3  A0 01        	ldy #1
0032AF  3  91 68        	sta (z80_ix),y
0032B1  3  A0 07        	ldy #7
0032B3  3  B1 68        	lda (z80_ix),y 		; copy new frame.
0032B5  3  A0 02        	ldy #2
0032B7  3  91 68        	sta (z80_ix),y
0032B9  3  A0 08        	ldy #8
0032BB  3  B1 68        	lda (z80_ix),y 		; copy new y.
0032BD  3  A0 03        	ldy #3
0032BF  3  91 68        	sta (z80_ix),y
0032C1  3  A0 09        	ldy #9
0032C3  3  B1 68        	lda (z80_ix),y 		; copy new x.
0032C5  3  A0 04        	ldy #4
0032C7  3  91 68        	sta (z80_ix),y
0032C9  3               
0032C9  3  18           	clc
0032CA  3  A5 68        	lda z80_x
0032CC  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
0032CE  3  85 68        	sta z80_x
0032D0  3  A5 69        	lda z80_i
0032D2  3  69 00        	adc #0
0032D4  3  85 69        	sta z80_i 		; next sprite.
0032D6  3  C6 rr        	dec sprcnt
0032D8  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
0032DA  3  60           	rts
0032DB  3               dspr1:
0032DB  3  A0 05        	ldy #5
0032DD  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
0032DF  3  C9 FF        	cmp #255		; is this enabled?
0032E1  3  D0 06        	bne dspr4 		; yes, display both.
0032E3  3               dspr6:
0032E3  3  20 B3 33     	jsr sspria 		; show single sprite.
0032E6  3  4C A1 32     	jmp dspr2
0032E9  3               
0032E9  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
0032E9  3               
0032E9  3               dspr4:
0032E9  3  A0 04        	ldy #4
0032EB  3  B1 68        	lda (z80_ix),y		; old x.
0032ED  3  A0 09        	ldy #9
0032EF  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
0032F1  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
0032F3  3               
0032F3  3  A0 03        	ldy #3
0032F5  3  B1 68        	lda (z80_ix),y		; old y.
0032F7  3  A0 08        	ldy #8
0032F9  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0032FB  3  D0 15        	bne dspr7		; they differ, need to redraw.
0032FD  3               
0032FD  3  A0 02        	ldy #2
0032FF  3  B1 68        	lda (z80_ix),y 		; old frame.
003301  3  A0 07        	ldy #7
003303  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003305  3  4C 12 33     	jmp dspr7 		; they differ, need to redraw.
003308  3               
003308  3  A0 01        	ldy #1
00330A  3  B1 68        	lda (z80_ix),y 		; old image.
00330C  3  A0 06        	ldy #6
00330E  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003310  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
003312  3               dspr7:
003312  3  20 E0 33     	jsr sspric 		; delete old sprite, draw new one simultaneously.
003315  3  4C A1 32     	jmp dspr2
003318  3               dspr3:
003318  3  20 DA 33     	jsr ssprib 		; show single sprite.
00331B  3  4C A1 32     	jmp dspr2
00331E  3               
00331E  3               ;sprcnt:	.byte 0
00331E  3               
00331E  3               ;-----------------------------------------
00331E  3               ; Get sprite address calculations.
00331E  3               ; gspran = new sprite, gsprad = old sprite.
00331E  3               ;
00331E  3               ; Input:
00331E  3               ;  IX = sprite address
00331E  3               ;-----------------------------------------
00331E  3               
00331E  3               gspran:
00331E  3  A0 08        	ldy #8
003320  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
003322  3  85 rr        	sta dispy
003324  3  A0 09        	ldy #9
003326  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
003328  3  85 rr        	sta dispx
00332A  3  A0 06        	ldy #6
00332C  3  B1 68        	lda (z80_ix),y 		; new sprite image.
00332E  3  20 0C 37     	jsr gfrm		; fetch start frame for this sprite.
003331  3               
003331  3  A0 00        	ldy #0
003333  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
003335  3  A0 07        	ldy #7
003337  3  18           	clc
003338  3  71 68        	adc (z80_ix),y 		; new add frame number.
00333A  3  4C 59 33     	jmp gspra0
00333D  3               
00333D  3               ;-----------------------------------------
00333D  3               ; Calculate old sprite address
00333D  3               ;
00333D  3               ; Input:
00333D  3               ;  IX = sprite address
00333D  3               ;
00333D  3               ; Output:
00333D  3               ;  B  = right byte mask
00333D  3               ;  C  = left byte mask
00333D  3               ;  DE = spriteframe address
00333D  3               ;  scraddr = screenaddress(dispx,dispy)
00333D  3               ;-----------------------------------------
00333D  3               
00333D  3               gsprad:
00333D  3  A0 03        	ldy #3
00333F  3  B1 68        	lda (z80_ix),y		; y coordinate.
003341  3  85 rr        	sta dispy
003343  3  A0 04        	ldy #4
003345  3  B1 68        	lda (z80_ix),y		; x coordinate.
003347  3  85 rr        	sta dispx
003349  3  A0 01        	ldy #1
00334B  3  B1 68        	lda (z80_ix),y 		; sprite image.
00334D  3  20 0C 37     	jsr gfrm 		; fetch start frame for this sprite.
003350  3               
003350  3  A0 00        	ldy #0
003352  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
003354  3  A0 02        	ldy #2
003356  3  18           	clc
003357  3  71 68        	adc (z80_ix),y 		; add frame number.
003359  3               gspra0:
003359  3  4A           	lsr a	  		; multiply by 128.
00335A  3  85 65        	sta z80_d 		; store in d.
00335C  3  8D B1 33     	sta tmp1
00335F  3  A9 00        	lda #0
003361  3  6A           	ror a
003362  3  85 64        	sta z80_e 		; got low byte.
003364  3  8D B2 33     	sta tmp2
003367  3               .if bflag
003367  3               	lsr tmp1
003367  3               	ror tmp2
003367  3               	clc
003367  3               	lda tmp2
003367  3               	adc z80_e
003367  3               	sta z80_e
003367  3               	lda tmp1
003367  3               	adc z80_d
003367  3               	sta z80_d
003367  3               .endif
003367  3  18           	clc 			; address of play sprites.
003368  3  A5 64        	lda z80_e
00336A  3  69 E4        	adc #<sprgfx
00336C  3  85 64        	sta z80_e
00336E  3  A5 65        	lda z80_d
003370  3  69 4D        	adc #>sprgfx
003372  3  85 65        	sta z80_d
003374  3               
003374  3  A5 rr        	lda dispx 		; y coordinate.
003376  3  29 06        	and #6 			; position within byte boundary.
003378  3  AA           	tax	 		; low byte of table displacement.
003379  3               
003379  3  0A           	asl a	  		; multiply by 32.
00337A  3  0A           	asl a  			; already a multiple
00337B  3  0A           	asl a  			; of 2, so just 4
00337C  3               .if bflag
00337C  3               	sta tmp1
00337C  3               	asl a  			; shifts needed.
00337C  3               	clc
00337C  3               	adc tmp1
00337C  3               .else
00337C  3  0A           	asl a  			; shifts needed.
00337D  3               .endif
00337D  3  18           	clc 			; add to sprite address.
00337E  3  65 64        	adc z80_e
003380  3  85 64        	sta z80_e
003382  3  90 02        	bcc :+
003384  3  E6 65        	inc z80_d
003386  3               :
003386  3  BD A9 33     	lda spmask,x		 ; pointer to mask table.
003389  3  85 62        	sta z80_c 		; left mask.
00338B  3  BD AA 33     	lda spmask+1,x
00338E  3  85 63        	sta z80_b 		; right mask.
003390  3               
003390  3               ;------------------------------------------------------------------
003390  3               ; Drop into screen address routine.
003390  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
003390  3               ;------------------------------------------------------------------
003390  3               
003390  3               scadd:
003390  3  A6 rr        	ldx dispy
003392  3  E0 C0        	cpx #192
003394  3  90 02        	bcc :+
003396  3  A2 C0        	ldx #192
003398  3               :
003398  3  A5 rr        	lda dispx
00339A  3  4A           	lsr a
00339B  3  4A           	lsr a
00339C  3  4A           	lsr a
00339D  3  18           	clc
00339E  3  7D 00 E0     	adc SCADTB_lb,x
0033A1  3  85 rr        	sta scraddr
0033A3  3  BD 00 E1     	lda SCADTB_hb,x
0033A6  3  85 rr        	sta scraddr+1
0033A8  3  60           	rts
0033A9  3               
0033A9  3  FF 00        spmask:	.byte $ff,$00
0033AB  3  3F C0        	.byte $3f,$c0
0033AD  3  0F F0        	.byte $0f,$f0
0033AF  3  03 FC        	.byte $03,$fc
0033B1  3               
0033B1  3  00           tmp1:	.byte 0
0033B2  3  00           tmp2:	.byte 0
0033B3  3               
0033B3  3               ;-----------------------------------------------------------------
0033B3  3               ; These are the sprite routines.
0033B3  3               ; sspria = single sprite, old (ix).
0033B3  3               ; ssprib = single sprite, new (ix+5).
0033B3  3               ; sspric = both sprites, old (ix) and new (ix+5).
0033B3  3               ;-----------------------------------------------------------------
0033B3  3               
0033B3  3               sspria:
0033B3  3  20 3D 33     	jsr gsprad		; get old sprite address.
0033B6  3               sspri2:
0033B6  3  A5 64        	lda z80_e
0033B8  3  8D 28 34     	sta dline1+1		; Set spritedata address
0033BB  3  8D 37 34     	sta dline2+1
0033BE  3  A5 65        	lda z80_d
0033C0  3  8D 29 34     	sta dline1+2
0033C3  3  8D 38 34     	sta dline2+2
0033C6  3  86 rr        	stx xtmp
0033C8  3  A2 00        	ldx #0			; vertical lines.
0033CA  3               sspri0:
0033CA  3  20 24 34     	jsr dline		; draw a line.
0033CD  3  E0 10        	cpx #16			; detect block boundery
0033CF  3  D0 02        	bne :+			; skip if not
0033D1  3  E6 rr        	inc scraddr+1		; jump to next blockline
0033D3  3               :
0033D3  3  E0 20        	cpx #32			; check finished
0033D5  3               .if bflag
0033D5  3               	bne :+			; skip if not
0033D5  3               	inc scraddr+1		; jump to next blockline
0033D5  3               	inc z80_hlp+1		; jump to next blockline
0033D5  3               :
0033D5  3               	cpx #48			; check finished
0033D5  3               .endif
0033D5  3  D0 F3        	bne sspri0		; no, repeat
0033D7  3  A6 rr        	ldx xtmp
0033D9  3  60           	rts
0033DA  3               
0033DA  3               ;-----------------------------------------------------------------
0033DA  3               
0033DA  3               ssprib:
0033DA  3  20 1E 33     	jsr gspran 		; get new sprite address.
0033DD  3  4C B6 33     	jmp sspri2
0033E0  3               
0033E0  3               ;-----------------------------------------------------------------
0033E0  3               
0033E0  3               sspric:
0033E0  3  20 3D 33     	jsr gsprad 		; get old sprite address.
0033E3  3  A5 64        	lda z80_e
0033E5  3  8D 4C 34     	sta ddline1+1		; Set spritedata address
0033E8  3  8D 5B 34     	sta ddline2+1
0033EB  3  A5 65        	lda z80_d
0033ED  3  8D 4D 34     	sta ddline1+2
0033F0  3  8D 5C 34     	sta ddline2+2
0033F3  3  20 C4 8B     	jsr exx  		; store addresses.
0033F6  3               
0033F6  3  20 1E 33     	jsr gspran 		; get new sprite addresses.
0033F9  3  A5 64        	lda z80_e
0033FB  3  8D 28 34     	sta dline1+1		; Set spritedata address
0033FE  3  8D 37 34     	sta dline2+1
003401  3  A5 65        	lda z80_d
003403  3  8D 29 34     	sta dline1+2
003406  3  8D 38 34     	sta dline2+2
003409  3               
003409  3  86 rr        	stx xtmp
00340B  3  A2 00        	ldx #0			; vertical lines.
00340D  3               lloop:
00340D  3  20 24 34     	jsr dline 		; draw a line.
003410  3  CA           	dex
003411  3  CA           	dex
003412  3  20 48 34     	jsr ddline 		; delete a line.
003415  3  E0 10        	cpx #16			; detect block boundery
003417  3  D0 04        	bne :+			; skip if not
003419  3  E6 rr        	inc scraddr+1		; jump to next blockline
00341B  3  E6 73        	inc z80_hlp+1		; jump to next blockline
00341D  3               :
00341D  3  E0 20        	cpx #32			; check finished
00341F  3               .if bflag
00341F  3               	bne :+			; skip if not
00341F  3               	inc scraddr+1		; jump to next blockline
00341F  3               	inc z80_hlp+1		; jump to next blockline
00341F  3               :
00341F  3               	cpx #48			; check finished
00341F  3               .endif
00341F  3  D0 EC        	bne lloop		; no, repeat
003421  3  A6 rr        	ldx xtmp
003423  3  60           	rts
003424  3               
003424  3               
003424  3               ;-----------------------------------------------------------------
003424  3               
003424  3               dline:
003424  3  BC 6C 34     	ldy sprline,x		; point to screenleft
003427  3               dline1:
003427  3  BD 02 80     	lda objdta,x		; fetch spriteleft byte
00342A  3  85 61        	sta z80_a		; save spriteright byte
00342C  3  A5 61        	lda z80_a
00342E  3  25 62        	and z80_c		; mask left
003430  3  51 rr        	eor (scraddr),y		; merge with screenleft
003432  3  91 rr        	sta (scraddr),y		; write screenleft
003434  3               sline:
003434  3  E8           	inx			; next spritebyte
003435  3  C8           	iny			; point to screenmiddle
003436  3               dline2:
003436  3  BD 02 80     	lda objdta,x		; fetch spritemiddle byte
003439  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
00343B  3  91 rr        	sta (scraddr),y		; write screenmiddle
00343D  3               sline2:
00343D  3  C8           	iny			; point to screenright
00343E  3  A5 61        	lda z80_a		; fetch spriteright byte
003440  3  25 63        	and z80_b		; mask right
003442  3  51 rr        	eor (scraddr),y		; merge with screenright
003444  3  91 rr        	sta (scraddr),y		; write screenright
003446  3               sline3:
003446  3  E8           	inx			; next spritebyte
003447  3               
003447  3  60           	rts
003448  3               
003448  3               ;-----------------------------------------------------------------
003448  3               
003448  3               ddline:
003448  3  BC 6C 34     	ldy sprline,x		; point to screenleft
00344B  3               ddline1:
00344B  3  BD 02 80     	lda objdta,x		; fetch spriteleft byte
00344E  3  85 61        	sta z80_a		; save spriteright byte
003450  3  A5 61        	lda z80_a
003452  3  25 6E        	and z80_cp		; mask left
003454  3  51 72        	eor (z80_hlp),y		; merge with screenleft
003456  3  91 72        	sta (z80_hlp),y		; write screenleft
003458  3               dsline:
003458  3  E8           	inx			; next spritebyte
003459  3  C8           	iny			; point to screenmiddle
00345A  3               ddline2:
00345A  3  BD 02 80     	lda objdta,x		; fetch spritemiddle byte
00345D  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
00345F  3  91 72        	sta (z80_hlp),y		; write screenmiddle
003461  3               dsline2:
003461  3  C8           	iny			; point to screenright
003462  3  A5 61        	lda z80_a		; fetch spriteright byte
003464  3  25 6F        	and z80_bp		; mask right
003466  3  51 72        	eor (z80_hlp),y		; merge with screenright
003468  3  91 72        	sta (z80_hlp),y		; write screenright
00346A  3               dsline3:
00346A  3  E8           	inx			; next spritebyte
00346B  3               
00346B  3  60           	rts
00346C  3               
00346C  3               sprline:
00346C  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
003470  3  40 41 60 61  
003474  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
003478  3  C0 C1 E0 E1  
00347C  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
003480  3  40 41 60 61  
003484  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
003488  3  C0 C1 E0 E1  
00348C  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
003490  3  40 41 60 61  
003494  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
003498  3  C0 C1 E0 E1  
00349C  3               
00349C  3               ;----------------------------------------------------------------------
00349C  3               ; Line drawn, now work out next target address.
00349C  3               ;----------------------------------------------------------------------
00349C  3               
00349C  3               nline:
00349C  3  18           	clc
00349D  3  A5 rr        	lda scraddr 		; get low byte of address.
00349F  3  69 20        	adc #$20
0034A1  3  85 rr        	sta scraddr 		; new low byte of address.
0034A3  3  90 02        	bcc :+
0034A5  3  E6 rr        	inc scraddr+1 		; new high byte of address.
0034A7  3               :
0034A7  3  60           	rts
0034A8  3               
0034A8  3               ;-------------------------------------------------------------
0034A8  3               ; Line drawn, now work out next target address.
0034A8  3               ;
0034A8  3               ; Input:
0034A8  3               ;  BP  = right mask
0034A8  3               ;  CP  = left mask
0034A8  3               ;  DEP = spriteaddress
0034A8  3               ;  z80_hlp = screen address
0034A8  3               ;-------------------------------------------------------------
0034A8  3               
0034A8  3               
0034A8  3               ;-----------------------------------------------------------
0034A8  3               ; Animates a sprite.
0034A8  3               ;
0034A8  3               ; Input:
0034A8  3               ;  IX = sprite address
0034A8  3               ;  HL = last sprite address
0034A8  3               ;-----------------------------------------------------------
0034A8  3               
0034A8  3               animsp:
0034A8  3  25 rr        	and frmno
0034AA  3  F0 01        	beq :+
0034AC  3  60           	rts
0034AD  3               :
0034AD  3  A0 06        	ldy #6
0034AF  3  B1 68        	lda (z80_ix),y		; sprite image
0034B1  3  20 0C 37     	jsr gfrm		; get frame data.
0034B4  3               
0034B4  3  E6 66        	inc z80_l		; point to frames.
0034B6  3  D0 02        	bne :+
0034B8  3  E6 67        	inc z80_h
0034BA  3               :
0034BA  3  A0 07        	ldy #7
0034BC  3  B1 68        	lda (z80_ix),y		; sprite frame.
0034BE  3  18           	clc
0034BF  3  69 01        	adc #1			; next one along.
0034C1  3  A0 00        	ldy #0
0034C3  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
0034C5  3  90 02        	bcc anims0		; no, not yet.
0034C7  3  A9 00        	lda #0			; start at first frame.
0034C9  3               anims0:
0034C9  3  A0 07        	ldy #7
0034CB  3  91 68        	sta (z80_ix),y		; new frame.
0034CD  3  60           	rts
0034CE  3               
0034CE  3               ;--------------------------------------------------------------
0034CE  3               ; Animate back
0034CE  3               ;
0034CE  3               ; Input:
0034CE  3               ;  IX = sprite address
0034CE  3               ;  HL = last sprite address
0034CE  3               ;--------------------------------------------------------------
0034CE  3               
0034CE  3               animbk:
0034CE  3  25 rr        	and frmno
0034D0  3  F0 01        	beq :+
0034D2  3  60           	rts
0034D3  3               :
0034D3  3  A0 06        	ldy #6
0034D5  3  B1 68        	lda (z80_ix),y		; sprite image.
0034D7  3  20 0C 37     	jsr gfrm		; get frame data.
0034DA  3               
0034DA  3  E6 66        	inc z80_l 		; point to frames.
0034DC  3  D0 02        	bne :+
0034DE  3  E6 67        	inc z80_h
0034E0  3               :
0034E0  3  A0 07        	ldy #7
0034E2  3  B1 68        	lda (z80_ix),y 		; sprite frame.
0034E4  3  F0 03        	beq :+
0034E6  3  4C ED 34     	jmp rtanb0 		; yes, start at end.
0034E9  3               :
0034E9  3  A0 00        	ldy #0
0034EB  3  B1 66        	lda (z80_hl),y 		; last sprite.
0034ED  3               rtanb0:
0034ED  3  38           	sec
0034EE  3  E9 01        	sbc #1			; next one along.
0034F0  3  4C C9 34     	jmp anims0		; set new frame.
0034F3  3               
0034F3  3               ;--------------------------------------------------------------
0034F3  3               ; Check for collision with other sprite, strict enforcement.
0034F3  3               ;
0034F3  3               ; Input:
0034F3  3               ;  b		= sprite to test for
0034F3  3               ;  ix		= current sprite pointer
0034F3  3               ;
0034F3  3               ; global:	b
0034F3  3               ; local:	x,y,hl,de,skptr
0034F3  3               ; calls:	-
0034F3  3               ;--------------------------------------------------------------
0034F3  3               
0034F3  3               sktyp:
0034F3  3  A9 EA        	lda #<sprtab				; sprite table.
0034F5  3  85 66        	sta z80_l
0034F7  3  A9 38        	lda #>sprtab
0034F9  3  85 67        	sta z80_h
0034FB  3               numsp2:
0034FB  3  A9 0C        	lda #NUMSPR				; number of sprites.
0034FD  3  85 rr        	sta sktptr
0034FF  3               sktyp0:
0034FF  3  A5 66        	lda z80_l 				; store pointer to sprite.
003501  3  85 rr        	sta skptr
003503  3  A5 67        	lda z80_h
003505  3  85 rr        	sta skptr+1
003507  3               
003507  3  A0 00        	ldy #0
003509  3  B1 66        	lda (z80_hl),y 				; get sprite type.
00350B  3  C5 63        	cmp z80_b				; is it the type we seek?
00350D  3  F0 1D        	beq coltyp				; yes, we can use this one.
00350F  3               sktyp1:
00350F  3  18           	clc
003510  3  A5 rr        	lda skptr				; retrieve sprite pointer.
003512  3  69 11        	adc #TABSIZ				; size of each entry.
003514  3  85 66        	sta z80_l
003516  3  A5 rr        	lda skptr+1
003518  3  69 00        	adc #0
00351A  3  85 67        	sta z80_h
00351C  3  C6 rr        	dec sktptr					; one less iteration.
00351E  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
003520  3  A9 00        	lda #0					; default to ROM address - no sprite.
003522  3  85 66        	sta z80_l
003524  3  85 67        	sta z80_h
003526  3  85 rr        	sta skptr				; store pointer to sprite.
003528  3  85 rr        	sta skptr+1
00352A  3               
00352A  3  18           	clc					; don't return with zero flag set.
00352B  3  60           	rts 					; didn't find one.
00352C  3               
00352C  3               ;skptr:	.word 0					; search pointer.
00352C  3               ;sktptr:	.byte 0
00352C  3               
00352C  3               coltyp:
00352C  3  A0 00        	ldy #0
00352E  3  B1 68        	lda (z80_ix),y				; current sprite type.
003530  3  C5 63        	cmp z80_b				; seeking sprite of same type?
003532  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
003534  3               colty0:
003534  3  A0 09        	ldy #9					; distance to x position in table.
003536  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
003538  3  85 64        	sta z80_e
00353A  3  88           	dey
00353B  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
00353D  3  85 65        	sta z80_d
00353F  3               
00353F  3               ; Drop into collision detection.
00353F  3               
00353F  3               colc16:
00353F  3  A0 09        	ldy #9
003541  3  B1 68        	lda (z80_ix),y			 	; x coord.
003543  3  38           	sec					; subtract x.
003544  3  E5 64        	sbc z80_e
003546  3  B0 05        	bcs  colc1a 				; result is positive.
003548  3  49 FF        	eor #$ff				; make negative positive.
00354A  3  18           	clc
00354B  3  69 01        	adc #1
00354D  3               colc1a:
00354D  3  C9 10        	cmp #16 				; within x range?
00354F  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
003551  3  85 62        	sta z80_c				; store difference.
003553  3               
003553  3  A0 08        	ldy #8
003555  3  B1 68        	lda (z80_ix),y				; y coord.
003557  3  38           	sec
003558  3  E5 65        	sbc z80_d				; subtract y.
00355A  3  B0 05        	bcs colc1b				; result is positive.
00355C  3  49 FF        	eor #$ff				; make negative positive.
00355E  3  18           	clc
00355F  3  69 01        	adc #1
003561  3               colc1b:
003561  3  C9 10        	cmp #16					; within y range?
003563  3  B0 AA        	bcs sktyp1 				; no - they've missed.
003565  3  18           	clc					; add x difference.
003566  3  65 62        	adc z80_c
003568  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
00356A  3  B0 02        	bcs :+
00356C  3  38           	sec
00356D  3  60           	rts 					; carry set if there's a collision.
00356E  3               :
00356E  3  4C 0F 35     	jmp sktyp1				; try next sprite in table.
003571  3               colty1:
003571  3  A5 68        	lda z80_x  				; compare the two.
003573  3  C5 66        	cmp z80_l
003575  3  D0 09        	bne end_col
003577  3  A5 69        	lda z80_i
003579  3  C5 67        	cmp z80_h
00357B  3  D0 03        	bne end_col
00357D  3  4C 0F 35     	jmp sktyp1 				; addresses are identical.
003580  3               end_col:
003580  3  4C 34 35     	jmp colty0
003583  3               
003583  3               ;-----------------------------------------------------------
003583  3               ; Display number, left aligned
003583  3               ;
003583  3               ; Input:
003583  3               ;  a		= number
003583  3               ;
003583  3               ; global:	-
003583  3               ; local:	a,y,bc,hl,displ0
003583  3               ; calls:	num2ch,dmsg3
003583  3               ;-----------------------------------------------------------
003583  3               
003583  3               disply:
003583  3  85 61        	sta z80_a
003585  3  A9 AB        	lda #<displ0				; display workspace.
003587  3  85 62        	sta z80_c
003589  3  A9 35        	lda #>displ0
00358B  3  85 63        	sta z80_b
00358D  3  A5 61        	lda z80_a
00358F  3  20 2C 27     	jsr num2ch				; convert accumulator to string.
003592  3               displ1:
003592  3  C6 62        	dec z80_c				; back one character.
003594  3  D0 02        	bne :+
003596  3  C6 63        	dec z80_b
003598  3               :
003598  3  A0 00        	ldy #0
00359A  3  B1 62        	lda (z80_bc),y				; fetch digit.
00359C  3  09 80        	ora #128				; insert end marker.
00359E  3  91 62        	sta (z80_bc),y				; new value.
0035A0  3               
0035A0  3  A9 AB        	lda #<displ0				; display space.
0035A2  3  85 66        	sta z80_l
0035A4  3  A9 35        	lda #>displ0
0035A6  3  85 67        	sta z80_h
0035A8  3  4C 59 30     	jmp dmsg3				; display the string.
0035AB  3               
0035AB  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
0035AF  3               
0035AF  3               ;----------------------------------------------------------------
0035AF  3               ; Initialise screen.
0035AF  3               ;
0035AF  3               ; global:	roomtb,scno
0035AF  3               ; local:	-
0035AF  3               ; calls:	tstcs
0035AF  3               ;----------------------------------------------------------------
0035AF  3               
0035AF  3               initsc:
0035AF  3  AD C7 39     	lda roomtb 			; whereabouts in the map are we?
0035B2  3  20 BC 35     	jsr tstsc 			; find displacement.
0035B5  3  C9 FF        	cmp #255 			; is it valid?
0035B7  3  F0 02        	beq init_end 			; no, it's rubbish.
0035B9  3  85 rr        	sta scno			; store new room number.
0035BB  3               init_end:
0035BB  3  60           	rts
0035BC  3               
0035BC  3               ;----------------------------------------------------------------
0035BC  3               ; Test screen.
0035BC  3               ;
0035BC  3               ; global:	-
0035BC  3               ; local:	x
0035BC  3               ; calls:	-
0035BC  3               ;----------------------------------------------------------------
0035BC  3               
0035BC  3               tstsc:
0035BC  3  85 rr        	sta tmproom
0035BE  3  18           	clc
0035BF  3  69 0D        	adc #MAPWID 			; add width in case we"re negative.
0035C1  3  AA           	tax 				; add displacement to map data.
0035C2  3  BD F3 39     	lda mapdat-MAPWID,x 		; find room number there.
0035C5  3  60           	rts
0035C6  3               
0035C6  3               ;tmproom:	.byte 0
0035C6  3               
0035C6  3               ;--------------------------
0035C6  3               ; Screen left.
0035C6  3               ;--------------------------
0035C6  3               
0035C6  3               scrl:
0035C6  3  AD C7 39     	lda roomtb 			; present room table pointer.
0035C9  3  38           	sec
0035CA  3  E9 01        	sbc #1				; room left.
0035CC  3               scrl0:
0035CC  3  20 BC 35     	jsr tstsc			; test screen.
0035CF  3  C9 FF        	cmp #255			; is there a screen this way?
0035D1  3  D0 01        	bne :+
0035D3  3  60           	rts				; no, return to loop.
0035D4  3               :
0035D4  3  A5 rr        	lda tmproom			; restore room displacement.
0035D6  3  8D C7 39     	sta roomtb			; new room table position.
0035D9  3               scrl1:
0035D9  3  20 AF 35     	jsr initsc 			; set new screen.
0035DC  3  A9 02        	lda #2
0035DE  3  85 rr        	sta restfl 			; set it.
0035E0  3  60           	rts
0035E1  3               scrr:
0035E1  3  AD C7 39     	lda roomtb 			; room table pointer.
0035E4  3  18           	clc
0035E5  3  69 01        	adc #1				; room right.
0035E7  3  4C CC 35     	jmp scrl0
0035EA  3               scru:
0035EA  3  AD C7 39     	lda roomtb 			; room table pointer.
0035ED  3  38           	sec
0035EE  3  E9 0D        	sbc #MAPWID 			; room up.
0035F0  3  4C CC 35     	jmp scrl0
0035F3  3               scrd:
0035F3  3  AD C7 39     	lda roomtb 			; room table pointer.
0035F6  3  18           	clc
0035F7  3  69 0D        	adc #MAPWID 			; room down.
0035F9  3  4C CC 35     	jmp scrl0
0035FC  3               
0035FC  3               ;-----------------------------------------
0035FC  3               ; Jump to new screen.
0035FC  3               ;-----------------------------------------
0035FC  3               
0035FC  3               nwscr:
0035FC  3  A2 00        	ldx #0				; start of map data.
0035FE  3               nwscr0:
0035FE  3  DD 00 3A     	cmp mapdat,x
003601  3  F0 06        	beq nwscr1			; have we found a match for screen?
003603  3  E8           	inx 				; next room.
003604  3  E0 50        	cpx #80				; zero room count, 80 to search.
003606  3  D0 F6        	bne nwscr0			; keep looking.
003608  3  60           	rts
003609  3               nwscr1:
003609  3  8E C7 39     	stx roomtb			; set the map position.
00360C  3  4C D9 35     	jmp scrl1			; draw new room.
00360F  3               
00360F  3               
00360F  3               ;----------------------------------------------------------
00360F  3               ; Gravity processing.
00360F  3               ;----------------------------------------------------------
00360F  3               
00360F  3               grav:
00360F  3  A0 0D        	ldy #13
003611  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003613  3  85 66        	sta z80_l
003615  3  A0 0E        	ldy #14
003617  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003619  3  85 67        	sta z80_h
00361B  3  05 66        	ora z80_l			; merge in low byte.
00361D  3  D0 01        	bne :+
00361F  3  60           	rts				; if neither is set, we're not in the air.
003620  3               :
003620  3  A0 00        	ldy #0
003622  3  B1 66        	lda (z80_hl),y			; pixels to move.
003624  3  85 61        	sta z80_a
003626  3  C9 63        	cmp #99				; reached the end?
003628  3  D0 0C        	bne grav0			; no, continue.
00362A  3               grav2:
00362A  3  C6 66        	dec z80_l			; go back to previous value.
00362C  3  C9 FF        	cmp #$ff
00362E  3  D0 02        	bne :+
003630  3  C6 67        	dec z80_h
003632  3               :
003632  3  B1 66        	lda (z80_hl),y			; fetch that from table.
003634  3  85 61        	sta z80_a
003636  3               grav0:
003636  3  E6 66        	inc z80_l			; point to next table entry.
003638  3  D0 02        	bne :+
00363A  3  E6 67        	inc z80_h
00363C  3               :
00363C  3  A5 66        	lda z80_l
00363E  3  A0 0D        	ldy #13
003640  3  91 68        	sta (z80_ix),y			; store new pointer low.
003642  3  A5 67        	lda z80_h
003644  3  A0 0E        	ldy #14
003646  3  91 68        	sta (z80_ix),y			; store new pointer high.
003648  3               grav1:
003648  3  A5 61        	lda z80_a
00364A  3  D0 01        	bne :+				; any movement required?
00364C  3  60           	rts				; no, not this time.
00364D  3               :
00364D  3  A5 61        	lda z80_a
00364F  3  C9 80        	cmp #128			; is it up or down?
003651  3  B0 15        	bcs gravu			; it's up.
003653  3               gravd:
003653  3  85 63        	sta z80_b			; set pixels to move.
003655  3               gravd0:
003655  3  20 34 2D     	jsr cangd			; can we go down?
003658  3  D0 28        	bne gravst			; can't move down, so stop.
00365A  3  A0 08        	ldy #8
00365C  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
00365E  3  18           	clc
00365F  3  69 01        	adc #1
003661  3  91 68        	sta (z80_ix),y
003663  3  C6 63        	dec z80_b
003665  3  D0 EE        	bne gravd0
003667  3  60           	rts
003668  3               gravu:
003668  3  49 FF        	eor #$ff			; flip the sign so it's positive.
00366A  3  18           	clc
00366B  3  69 01        	adc #1
00366D  3  85 63        	sta z80_b			; set pixels to move.
00366F  3               gravu0:
00366F  3  20 FF 2C     	jsr cangu			; can we go up?
003672  3  D0 6E        	bne ifalls			; can't move up, go down next.
003674  3  A0 08        	ldy #8
003676  3  B1 68        	lda (z80_ix),y
003678  3  38           	sec
003679  3  E9 01        	sbc #1
00367B  3  91 68        	sta (z80_ix),y			; adjust new x coord.
00367D  3  C6 63        	dec z80_b
00367F  3  D0 EE        	bne gravu0
003681  3  60           	rts
003682  3               gravst:
003682  3  A0 0D        	ldy #13
003684  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003686  3  85 66        	sta z80_l
003688  3  A0 0E        	ldy #14
00368A  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00368C  3  85 67        	sta z80_h
00368E  3               
00368E  3  A9 00        	lda #0				; null value in pointer.
003690  3  A0 0D        	ldy #13
003692  3  91 68        	sta (z80_ix),y			; store new pointer low.
003694  3  C8           	iny
003695  3  91 68        	sta (z80_ix),y			; store new pointer high.
003697  3               
003697  3  A0 00        	ldy #0
003699  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
00369B  3  C9 63        	cmp #99				; is it the end marker?
00369D  3               evftf:
00369D  3  F0 01        	beq :+				; yes, fallen too far.
00369F  3  60           	rts
0036A0  3               :
0036A0  3  4C 65 49     	jmp evnt15			; EVENT FELLTOOFAR
0036A3  3               
0036A3  3               ;------------------------------------------------
0036A3  3               ; Initiate fall check.
0036A3  3               ;------------------------------------------------
0036A3  3               
0036A3  3               ifall:
0036A3  3  A0 0D        	ldy #13
0036A5  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0036A7  3  85 66        	sta z80_l
0036A9  3  A0 0E        	ldy #14
0036AB  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0036AD  3  85 67        	sta z80_h			; high byte in accumulator.
0036AF  3  05 66        	ora z80_l			; merge in low byte.
0036B1  3  F0 01        	beq :+
0036B3  3  60           	rts				; if either is set, we're already in the air.
0036B4  3               :
0036B4  3  A0 09        	ldy #9
0036B6  3  B1 68        	lda (z80_ix),y			; y coordinate.
0036B8  3  85 rr        	sta dispx
0036BA  3  A0 08        	ldy #8
0036BC  3  B1 68        	lda (z80_ix),y			; look x coordinate.
0036BE  3  18           	clc
0036BF  3               numsp7:
0036BF  3  69 10        	adc #SPR_HGT			; add 16 pixels.
0036C1  3  85 rr        	sta dispy			; set up test coordinates.
0036C3  3  20 AD 2F     	jsr tstbl			; get map address.
0036C6  3  20 D6 2E     	jsr plchk			; block, platform check.
0036C9  3  F0 01        	beq :+
0036CB  3  60           	rts				; it's solid, don't fall.
0036CC  3               :
0036CC  3  E6 rr        	inc bufaddr			; look right one cell.
0036CE  3  20 D6 2E     	jsr plchk			; block, platform check.
0036D1  3  F0 01        	beq :+
0036D3  3  60           	rts				; it's solid, don't fall.
0036D4  3               :
0036D4  3  A5 rr        	lda dispx			; y coordinate.
0036D6  3  29 07        	and #7				; position straddling block cells.
0036D8  3  F0 08        	beq ifalls			; no more checks needed.
0036DA  3  E6 rr        	inc bufaddr			; look to third cell.
0036DC  3  20 D6 2E     	jsr plchk			; block, platform check.
0036DF  3  F0 01        	beq :+
0036E1  3  60           	rts				; it's solid, don't fall.
0036E2  3               :
0036E2  3               ifalls:
0036E2  3  A9 F2        	lda #<jtab			; jump table start.
0036E4  3  85 66        	sta z80_l
0036E6  3  A9 88        	lda #>jtab
0036E8  3  85 67        	sta z80_h
0036EA  3               ifal0:
0036EA  3  E6 66        	inc z80_l			; point to next value.
0036EC  3  D0 02        	bne :+
0036EE  3  E6 67        	inc z80_h
0036F0  3               :
0036F0  3  A0 00        	ldy #0
0036F2  3  B1 66        	lda (z80_hl),y			; fetch value.
0036F4  3  F0 F4        	beq ifal0			; no, get next value.
0036F6  3  C9 63        	cmp #99				; reached end of table?
0036F8  3  D0 01        	bne :+
0036FA  3  60           	rts				; yes, don't fall.
0036FB  3               :
0036FB  3  C9 80        	cmp #128			; is it going up?
0036FD  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
0036FF  3               
0036FF  3  A0 0D        	ldy #13
003701  3  A5 66        	lda z80_l
003703  3  91 68        	sta (z80_ix),y 			; set jump low.
003705  3  A0 0E        	ldy #14
003707  3  A5 67        	lda z80_h
003709  3  91 68        	sta (z80_ix),y 			; set jump high.
00370B  3  60           	rts
00370C  3               
00370C  3               
00370C  3               ;----------------------------------------------------
00370C  3               ; Get frame data for a particular sprite.
00370C  3               ; Input:
00370C  3               ;  a		= framenumer
00370C  3               ; Output:
00370C  3               ;  hl		= frame address
00370C  3               ;
00370C  3               ; global:	hl,frmptr
00370C  3               ; local:	-
00370C  3               ; calls:	-
00370C  3               ;----------------------------------------------------
00370C  3               
00370C  3               gfrm:
00370C  3  0A           	asl a	 		 	; multiple of 2.
00370D  3  18           	clc
00370E  3  6D 1A 20     	adc frmptr 			; frames used by game.
003711  3  85 66        	sta z80_l
003713  3  AD 1B 20     	lda frmptr+1
003716  3  69 00        	adc #0
003718  3  85 67        	sta z80_h 			; point to frame start.
00371A  3  60           	rts
00371B  3               
00371B  3               ;----------------------------------------------------
00371B  3               ; Find sprite list for current room.
00371B  3               ;
00371B  3               ; global:	hl
00371B  3               ; local:	x,y
00371B  3               ; calls:	-
00371B  3               ;----------------------------------------------------
00371B  3               
00371B  3               sprlst:
00371B  3  A9 59        	lda #<nmedat 			; list of enemy sprites.
00371D  3  85 66        	sta z80_l
00371F  3  A9 7E        	lda #>nmedat
003721  3  85 67        	sta z80_h
003723  3  A6 rr        	ldx scno 			; screen number.
003725  3  D0 01        	bne sprls2 			; is it the first screen?
003727  3  60           	rts 				; yes, don't need to search data.
003728  3               sprls2:
003728  3  A0 00        	ldy #0
00372A  3               sprls1:
00372A  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
00372C  3  C9 FF        	cmp #255			; is it an end marker?
00372E  3  F0 0E        	beq sprls0 			; yes, end of this room.
003730  3               
003730  3  18           	clc 				; point to next sprite in list.
003731  3  A5 66        	lda z80_l
003733  3  69 04        	adc #NMESIZ
003735  3  85 66        	sta z80_l
003737  3  90 02        	bcc :+
003739  3  E6 67        	inc z80_h
00373B  3               :
00373B  3  4C 2A 37     	jmp sprls1 			; continue until end of room.
00373E  3               sprls0:
00373E  3  E6 66        	inc z80_l 			; point to start of next screen.s
003740  3  D0 02        	bne :+
003742  3  E6 67        	inc z80_h
003744  3               :
003744  3  CA           	dex
003745  3  D0 E3        	bne sprls1 			; continue until room found.
003747  3  60           	rts
003748  3               
003748  3               
003748  3               ;----------------------------------------------------
003748  3               ; Clear all but a single player sprite.
003748  3               ;
003748  3               ; global:	-
003748  3               ; local:	x,y,ix
003748  3               ; calls:	-
003748  3               ;----------------------------------------------------
003748  3               
003748  3               nspr:
003748  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00374A  3  85 rr        	sta sprcnt
00374C  3  A9 EA        	lda #<sprtab 			; sprite table.
00374E  3  85 68        	sta z80_x
003750  3  A9 38        	lda #>sprtab
003752  3  85 69        	sta z80_i
003754  3               nspr0:
003754  3  A0 00        	ldy #0 				; fetch sprite type.
003756  3  B1 68        	lda (z80_ix),y 			; is it a player?
003758  3  F0 1A        	beq nspr1 			; yes, keep this one.
00375A  3               
00375A  3  A9 FF        	lda #255
00375C  3  A0 00        	ldy #0 				; fetch sprite type.
00375E  3  91 68        	sta (z80_ix),y 			; delete sprite.
003760  3  A0 05        	ldy #5
003762  3  91 68        	sta (z80_ix),y 			; remove next type.
003764  3               
003764  3  18           	clc	 			; next sprite.
003765  3  A5 68        	lda z80_x
003767  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003769  3  85 68        	sta z80_x
00376B  3  90 02        	bcc :+
00376D  3  E6 69        	inc z80_i
00376F  3               :
00376F  3  C6 rr        	dec sprcnt	 			; one less space in the table.
003771  3  D0 E1        	bne nspr0
003773  3  60           	rts
003774  3               nspr1:
003774  3  A9 FF        	lda #255
003776  3  A0 00        	ldy #0
003778  3  91 68        	sta (z80_ix),y 			; delete sprite.
00377A  3               
00377A  3  18           	clc	 			; point to next sprite.
00377B  3  A5 68        	lda z80_x
00377D  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00377F  3  85 68        	sta z80_x
003781  3  90 02        	bcc :+
003783  3  E6 69        	inc z80_i
003785  3               :
003785  3  C6 rr        	dec sprcnt	 			; one less to do.
003787  3  D0 01        	bne nspr2
003789  3  60           	rts
00378A  3               nspr2:
00378A  3  A9 FF        	lda #255
00378C  3  A0 00        	ldy #0
00378E  3  91 68        	sta (z80_ix),y 			; delete sprite.
003790  3  A0 05        	ldy #5
003792  3  91 68        	sta (z80_ix),y 			; remove next type.
003794  3               
003794  3  18           	clc	 			; next sprite.
003795  3  A5 68        	lda z80_x
003797  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003799  3  85 68        	sta z80_x
00379B  3  90 02        	bcc :+
00379D  3  E6 69        	inc z80_i
00379F  3               :
00379F  3  C6 rr        	dec sprcnt	 			; one less space in table.
0037A1  3  D0 E7        	bne nspr2
0037A3  3  60           	rts
0037A4  3               
0037A4  3               ;----------------------------------------------------------
0037A4  3               ; Two initialisation routines.
0037A4  3               ; Initialise sprites - copy everything from list to table.
0037A4  3               ;
0037A4  3               ; global:	-
0037A4  3               ; local:	x,y,ix
0037A4  3               ; calls:	cpsp
0037A4  3               ;----------------------------------------------------------
0037A4  3               
0037A4  3               ispr:
0037A4  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0037A6  3  85 rr        	sta sprcnt
0037A8  3  A9 EA        	lda #<sprtab			; sprite table.
0037AA  3  85 68        	sta z80_x
0037AC  3  A9 38        	lda #>sprtab
0037AE  3  85 69        	sta z80_i
0037B0  3               ispr2:
0037B0  3  A0 00        	ldy #0
0037B2  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0037B4  3  C9 FF        	cmp #255 			; is it an end marker?
0037B6  3  D0 01        	bne :+
0037B8  3  60           	rts 				; yes, no more to do.
0037B9  3               :
0037B9  3               ispr1:
0037B9  3  A0 00        	ldy #0
0037BB  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
0037BD  3  C9 FF        	cmp #255 			; is it enabled yet?
0037BF  3  D0 08        	bne ispr4			; yes, try another slot.
0037C1  3               
0037C1  3  A0 05        	ldy #5
0037C3  3  B1 68        	lda (z80_ix),y		 	; next type.
0037C5  3  C9 FF        	cmp #255 			; is it enabled yet?
0037C7  3  F0 10        	beq ispr3 			; no, process this one.
0037C9  3               ispr4:
0037C9  3  18           	clc 				; next sprite.
0037CA  3  A5 68        	lda z80_x
0037CC  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0037CE  3  85 68        	sta z80_x
0037D0  3  90 02        	bcc :+
0037D2  3  E6 69        	inc z80_i
0037D4  3               :
0037D4  3  C6 rr        	dec sprcnt
0037D6  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0037D8  3  60           	rts  				; no more room in table.
0037D9  3               ispr3:
0037D9  3  20 2C 38     	jsr cpsp			; initialise a sprite.
0037DC  3  C6 rr        	dec sprcnt			; one less space in the table.
0037DE  3  D0 D0        	bne ispr2
0037E0  3  60           	rts
0037E1  3               
0037E1  3               
0037E1  3               ;-----------------------------------------------------------------------
0037E1  3               ; Initialise sprites - but not player, we're keeping the old one.
0037E1  3               ;
0037E1  3               ; global:	-
0037E1  3               ; local:	x,y,ix
0037E1  3               ; calls:	cpsp
0037E1  3               ;-----------------------------------------------------------------------
0037E1  3               
0037E1  3               kspr:
0037E1  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0037E3  3  A9 EA        	lda #<sprtab 			; sprite table.
0037E5  3  85 68        	sta z80_x
0037E7  3  A9 38        	lda #>sprtab
0037E9  3  85 69        	sta z80_i
0037EB  3               kspr2:
0037EB  3  A0 00        	ldy #0
0037ED  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0037EF  3  C9 FF        	cmp #255 			; is it an end marker?
0037F1  3  D0 01        	bne :+
0037F3  3  60           	rts 				; yes, no more to do.
0037F4  3               :
0037F4  3  C9 00        	cmp #0
0037F6  3  D0 0E        	bne kspr1 			; no, add to table as normal.
0037F8  3               
0037F8  3  18           	clc 				; next sprite.
0037F9  3  A5 66        	lda z80_l
0037FB  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0037FD  3  85 66        	sta z80_l
0037FF  3  90 02        	bcc :+
003801  3  E6 67        	inc z80_h
003803  3               :
003803  3  4C EB 37     	jmp kspr2
003806  3               kspr1:
003806  3  A0 00        	ldy #0 				; fetch sprite type.
003808  3  B1 68        	lda (z80_ix),y
00380A  3  C9 FF        	cmp #255 			; is it enabled yet?
00380C  3  D0 08        	bne kspr4 			; yes, try another slot.
00380E  3               
00380E  3  A0 05        	ldy #5 				; next type.
003810  3  B1 68        	lda (z80_ix),y
003812  3  C9 FF        	cmp #255 			; is it enabled yet?
003814  3  F0 0F        	beq kspr3 			; no, process this one.
003816  3               kspr4:
003816  3  18           	clc 				; next sprite.
003817  3  A5 68        	lda z80_x
003819  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00381B  3  85 68        	sta z80_x
00381D  3  90 02        	bcc :+
00381F  3  E6 69        	inc z80_i
003821  3               :
003821  3  CA           	dex	 			; repeat for remaining sprites.
003822  3  D0 E2        	bne kspr1
003824  3  60           	rts  				; no more room in table.
003825  3               kspr3:
003825  3  20 2C 38     	jsr cpsp 			; copy sprite to table.
003828  3  CA           	dex	 			; one less space in the table.
003829  3  D0 C0        	bne kspr2
00382B  3  60           	rts
00382C  3               
00382C  3               ;----------------------------------------------
00382C  3               ; Copy sprite from list to table.
00382C  3               ;
00382C  3               ; global:	hl,ix
00382C  3               ; local:	y
00382C  3               ; calls:	evnt09
00382C  3               ;----------------------------------------------
00382C  3               
00382C  3               cpsp:
00382C  3  A0 00        	ldy #0				; fetch byte from table.
00382E  3  B1 66        	lda (z80_hl),y
003830  3  91 68        	sta (z80_ix),y			; set up type.
003832  3  A0 05        	ldy #PAM1ST
003834  3  91 68        	sta (z80_ix),y 			; set up type.
003836  3               
003836  3  E6 66        	inc z80_l 			; move to next byte.
003838  3  D0 02        	bne :+
00383A  3  E6 67        	inc z80_h
00383C  3               :
00383C  3  A0 00        	ldy #0 				; fetch byte from table.
00383E  3  B1 66        	lda (z80_hl),y
003840  3  A0 06        	ldy #6
003842  3  91 68        	sta (z80_ix),y			; set up image.
003844  3               
003844  3  E6 66        	inc z80_l 			; move to next byte.
003846  3  D0 02        	bne :+
003848  3  E6 67        	inc z80_h
00384A  3               :
00384A  3  A0 00        	ldy #0
00384C  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
00384E  3  A0 08        	ldy #8
003850  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003852  3               
003852  3  A9 C8        	lda #200 			; set initial coordinate off screen.
003854  3  A0 03        	ldy #3
003856  3  91 68        	sta (z80_ix),y
003858  3               
003858  3  E6 66        	inc z80_l 			; move to next byte.
00385A  3  D0 02        	bne :+
00385C  3  E6 67        	inc z80_h
00385E  3               :
00385E  3  A0 00        	ldy #0 				; fetch byte from table.
003860  3  B1 66        	lda (z80_hl),y
003862  3  A0 09        	ldy #9
003864  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003866  3               
003866  3  E6 66        	inc z80_l 			; move to next byte.
003868  3  D0 02        	bne :+
00386A  3  E6 67        	inc z80_h
00386C  3               :
00386C  3  A9 00        	lda #0				; zeroes in accumulator.
00386E  3  A0 07        	ldy #7 				; reset frame number.
003870  3  91 68        	sta (z80_ix),y
003872  3  A0 0A        	ldy #10 			; reset direction.
003874  3  91 68        	sta (z80_ix),y
003876  3  A0 0D        	ldy #13				; reset jump pointer low.
003878  3  91 68        	sta (z80_ix),y
00387A  3  A0 0E        	ldy #14	 			; reset jump pointer high.
00387C  3  91 68        	sta (z80_ix),y
00387E  3               
00387E  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
003880  3  A0 10        	ldy #16
003882  3  91 68        	sta (z80_ix),y
003884  3               evis0:
003884  3  A5 69        	lda z80_i
003886  3  48           	pha
003887  3  A5 68        	lda z80_x
003889  3  48           	pha
00388A  3  A5 67        	lda z80_h
00388C  3  48           	pha
00388D  3  A5 66        	lda z80_l
00388F  3  48           	pha
003890  3               
003890  3  20 51 47     	jsr evnt09 			; perform event.
003893  3               
003893  3  68           	pla
003894  3  85 66        	sta z80_l
003896  3  68           	pla
003897  3  85 67        	sta z80_h
003899  3  68           	pla
00389A  3  85 68        	sta z80_x
00389C  3  68           	pla
00389D  3  85 69        	sta z80_i
00389F  3               
00389F  3  18           	clc
0038A0  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0038A2  3  69 11        	adc #TABSIZ		 	; next sprite.
0038A4  3  85 68        	sta z80_x
0038A6  3  90 02        	bcc :+
0038A8  3  E6 69        	inc z80_i
0038AA  3               :
0038AA  3  60           	rts
0038AB  3               
0038AB  3               
0038AB  3               ;-------------------------------------
0038AB  3               ; Clear the play area window.
0038AB  3               ;-------------------------------------
0038AB  3               
0038AB  3               clw:
0038AB  3  AD 26 20     	lda wintop			; get coordinates of window.
0038AE  3  85 rr        	sta dispy			; put into dispx for calculation.
0038B0  3  AD 27 20     	lda winlft
0038B3  3  85 rr        	sta dispx
0038B5  3               
0038B5  3  AD 28 20     	lda winhgt			; height of window.
0038B8  3  85 rr        	sta rrow			; copy to b register.
0038BA  3               clw3:
0038BA  3  AD 29 20     	lda winwid 			; width of window.
0038BD  3  85 rr        	sta rcol
0038BF  3               clw2:
0038BF  3  20 E4 2A     	jsr gprad 			; get print address.
0038C2  3  A9 00        	lda #0				; zero byte to write.
0038C4  3  A2 07        	ldx #7				; pixel height of each cell.
0038C6  3               clw1:
0038C6  3  BC 6A 2B     	ldy scrtab,x
0038C9  3  91 rr        	sta (scraddr),y 			; copy to screen.
0038CB  3  CA           	dex				; next screen row down.
0038CC  3  10 F8        	bpl clw1
0038CE  3               
0038CE  3  E6 rr        	inc dispx			; next column.
0038D0  3  C6 rr        	dec rcol			; one less to do.
0038D2  3  D0 EB        	bne clw2			; repeat for remaining columns.
0038D4  3               
0038D4  3  AD 27 20     	lda winlft			; get left edge.
0038D7  3  85 rr        	sta dispx 			; reset x.
0038D9  3  E6 rr        	inc dispy 			; next line down.
0038DB  3               
0038DB  3  C6 rr        	dec rrow
0038DD  3  D0 DB        	bne clw3			; repeat down the screen.
0038DF  3               
0038DF  3  AD 26 20     	lda wintop			; get coordinates of window.
0038E2  3  85 rr        	sta chary			; put into display position.
0038E4  3  AD 27 20     	lda winlft
0038E7  3  85 rr        	sta charx
0038E9  3  60           	rts
0038EA  3               
0038EA  3               
0038EA  3               ;----------------------------------------------------------
0038EA  3               ; Effects code.
0038EA  3               ; Ticker routine is called 25 times per second.
0038EA  3               ;
0038EA  3               ; HL = txtscr = left text screen address
0038EA  3               ; DE = txtscr+txtwid-1 = right text screen address
0038EA  3               ; BC = txtpos = text scroller position
0038EA  3               ;
0038EA  3               ;----------------------------------------------------------
0038EA  3               
0038EA  3               .if sflag
0038EA  3               scrly:
0038EA  3               	rts
0038EA  3               	.word txtscr         	; get left screen address.
0038EA  3               	sta scr_l
0038EA  3               	lda txtscr+1
0038EA  3               	sta scr_l+1
0038EA  3               	sta scr_r+1
0038EA  3               
0038EA  3               	stx xtmp
0038EA  3               
0038EA  3               	clc         		; get right screen address.
0038EA  3               	lda scr_l
0038EA  3               	adc txtwid
0038EA  3               	sta scr_r
0038EA  3               	dec scr_r
0038EA  3               scrly1:
0038EA  3               	ldy txtwid		; set txtwide
0038EA  3               	dey
0038EA  3               	clc
0038EA  3               scrly0:
0038EA  3               	lda (scr_l),y		; scroll 1 line
0038EA  3               	rol a
0038EA  3               	sta (scr_l),y
0038EA  3               	dey
0038EA  3               	bpl scrly0
0038EA  3               
0038EA  3               	clc			; point to next line
0038EA  3               	lda scr_l
0038EA  3               	adc #32
0038EA  3               	sta scr_l
0038EA  3               	bcc scrly1		; repeat 8 times
0038EA  3               
0038EA  3               	lda txtpos 		; get text pointer.
0038EA  3               	sta scr_txt
0038EA  3               	lda txtpos+1
0038EA  3               	sta scr_txt+1
0038EA  3               
0038EA  3               	ldy #0
0038EA  3               	lda (scr_txt),y 		; find character we're displaying.
0038EA  3               	and #127 		; remove end marker bit if applicable.
0038EA  3               	cmp #13			; is it newline?
0038EA  3               	bne scrly5 		; no, it's okay.
0038EA  3               	lda #32			; convert to a space instead.
0038EA  3               scrly5:
0038EA  3               	sta fntaddr		; calculate char address
0038EA  3               	lda #0
0038EA  3               	sta fntaddr+1
0038EA  3               	asl fntaddr  		; multiply char by 8.
0038EA  3               	rol fntaddr+1
0038EA  3               	asl fntaddr
0038EA  3               	rol fntaddr+1
0038EA  3               	asl fntaddr
0038EA  3               	rol fntaddr+1
0038EA  3               	lda fntaddr
0038EA  3               	clc
0038EA  3               	adc #<(FONT-256)
0038EA  3               	sta scrly3+1		; that's the low byte.
0038EA  3               	lda fntaddr+1
0038EA  3               	adc #>(FONT-256)
0038EA  3               	sta scrly3+2		; add displacement.
0038EA  3               
0038EA  3               	ldx #0
0038EA  3               scrly3:
0038EA  3               	lda $3333,x		; get image of char line.
0038EA  3               	and txtbit
0038EA  3               	beq scrly2		; don't plot pixel
0038EA  3               	ldy scrline,x
0038EA  3               	lda (scr_r),y
0038EA  3               	clc
0038EA  3               	ora #1
0038EA  3               	sta (scr_r),y		; plot pixel
0038EA  3               scrly2:
0038EA  3               	inx			; next line of char.
0038EA  3               	cpx #8
0038EA  3               	bne scrly3
0038EA  3               
0038EA  3               	lsr txtbit		; bit of text to display.
0038EA  3               	bcs :+
0038EA  3               	rts
0038EA  3               :
0038EA  3               	ldy #0
0038EA  3               	lda (scr_txt),y 	; what was the character?
0038EA  3               	asl a	  		; end of message?
0038EA  3               	bcs scrly4
0038EA  3               	inc txtpos
0038EA  3               	bne :+
0038EA  3               	inc txtpos+1
0038EA  3               :
0038EA  3               	jmp scrly6 		; not yet - continue.
0038EA  3               scrly4:
0038EA  3               	lda txtini 		; start of scrolling message.
0038EA  3               	sta txtpos
0038EA  3               	lda txtini+1
0038EA  3               	sta txtpos+1
0038EA  3               scrly6:
0038EA  3               	lda #128
0038EA  3               	sta txtbit
0038EA  3               	ldx xtmp
0038EA  3               	rts
0038EA  3               
0038EA  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0038EA  3               
0038EA  3               ;-------------------------------------------------------
0038EA  3               ; Entry TICKER command
0038EA  3               ;
0038EA  3               ; Entry:
0038EA  3               ;  z80_b = message nr
0038EA  3               ;  z80_c = width
0038EA  3               ;-------------------------------------------------------
0038EA  3               
0038EA  3               iscrly:
0038EA  3               	jsr prescr 		; set up display position.
0038EA  3               
0038EA  3               	lda #<msgdat 		; text messages.
0038EA  3               	sta z80_l
0038EA  3               	lda #>msgdat
0038EA  3               	sta z80_h
0038EA  3               
0038EA  3               	lda z80_c 		; width.
0038EA  3               	sec
0038EA  3               	sbc #1			; subtract one.
0038EA  3               	cmp #32 		; is it between 1 and 32?
0038EA  3               	bcc :+
0038EA  3               	lda #$60
0038EA  3               	jmp iscrl0		; no, disable messages.
0038EA  3               :
0038EA  3               	ldx z80_b		; message number.
0038EA  3               	jsr getwrd 		; find message start.
0038EA  3               
0038EA  3               	lda z80_l		; set initial text position.
0038EA  3               	sta txtini
0038EA  3               	lda z80_h
0038EA  3               	sta txtini+1
0038EA  3               
0038EA  3               	lda #$ad		; code for lda adrr
0038EA  3               iscrl0:
0038EA  3               	sta scrly		; enable/disable scrolling routine.
0038EA  3               
0038EA  3               	jsr prescr 		; set up display position.
0038EA  3               	jsr gprad 		; get print address.
0038EA  3               
0038EA  3               	lda scraddr 		; set text screen address.
0038EA  3               	sta txtscr
0038EA  3               	lda scraddr+1
0038EA  3               	sta txtscr+1
0038EA  3               
0038EA  3               	lda z80_c		; width.
0038EA  3               	sta txtwid		; set width in working storage.
0038EA  3               
0038EA  3               	lda #128 		; start with leftmost bit.
0038EA  3               	sta txtbit
0038EA  3               
0038EA  3               	jmp scrly4
0038EA  3               .endif
0038EA  3               
0038EA  3               ;------------------------------------------------------------------
0038EA  3               ; Dig routine, conditional assembly depending on dflag
0038EA  3               ;------------------------------------------------------------------
0038EA  3               .if dflag
0038EA  3               dig:
0038EA  3               	and #3
0038EA  3               	beq digr		; dig right
0038EA  3               	cmp #1
0038EA  3               	beq digl		; dig left
0038EA  3               	cmp #2
0038EA  3               	beq digd		; dig down
0038EA  3               
0038EA  3               ; Dig up.
0038EA  3               
0038EA  3               digu:				; dig up
0038EA  3               	ldy #8
0038EA  3               	lda (z80_ix),y
0038EA  3               	sec
0038EA  3               	sbc #2
0038EA  3               	sta dispy		; set y
0038EA  3               
0038EA  3               	iny
0038EA  3               	lda (z80_ix),y
0038EA  3               	sta dispx		; set x
0038EA  3               	jmp digv
0038EA  3               
0038EA  3               ; Dig down.
0038EA  3               
0038EA  3               digd:
0038EA  3               	ldy #9
0038EA  3               	lda (z80_ix),y
0038EA  3               	sta dispx		; set y
0038EA  3               
0038EA  3               	dey
0038EA  3               	clc
0038EA  3               	lda (z80_ix),y
0038EA  3               	adc #16
0038EA  3               	sta dispy		; set y
0038EA  3               	jmp digv
0038EA  3               
0038EA  3               ; Dig left.
0038EA  3               
0038EA  3               digl:
0038EA  3               	ldy #8
0038EA  3               	lda (z80_ix),y
0038EA  3               	sta dispy		; set y
0038EA  3               
0038EA  3               	iny
0038EA  3               	lda (z80_ix),y
0038EA  3               	sec
0038EA  3               	sbc #2			; x=x-2
0038EA  3               	sta dispx		; set x
0038EA  3               	jmp digh
0038EA  3               
0038EA  3               ; Dig right.
0038EA  3               
0038EA  3               digr:
0038EA  3               	ldy #8
0038EA  3               	lda (z80_ix),y
0038EA  3               	sta dispy		; set y
0038EA  3               
0038EA  3               	iny
0038EA  3               	lda (z80_ix),y
0038EA  3               	clc
0038EA  3               	adc #16
0038EA  3               	sta dispx		; set x+16
0038EA  3               	jmp digh
0038EA  3               
0038EA  3               ; Vertical digging
0038EA  3               
0038EA  3               digv:
0038EA  3               	jsr tstbl		; check blocktype in MAP
0038EA  3               	jsr fdchk		; test if FODDER
0038EA  3               
0038EA  3               	clc
0038EA  3               	lda dispx		; look 1 cell down
0038EA  3               	adc #8
0038EA  3               	sta dispx
0038EA  3               	jsr tstbl		; check blocktype in MAP
0038EA  3               	jsr fdchk
0038EA  3               	lda dispx
0038EA  3               	and #7
0038EA  3               	bne :+
0038EA  3               	rts
0038EA  3               :
0038EA  3               	clc
0038EA  3               	lda dispx		; look 1 cell down
0038EA  3               	adc #8
0038EA  3               	sta dispx
0038EA  3               	jsr tstbl		; check blocktype in MAP
0038EA  3               	jmp fdchk
0038EA  3               
0038EA  3               ; Horizontal digging
0038EA  3               
0038EA  3               digh:
0038EA  3               	jsr tstbl		; check blocktype in MAP
0038EA  3               	jsr fdchk		; test if FODDER
0038EA  3               
0038EA  3               	clc
0038EA  3               	lda dispy		; look 1 cell down
0038EA  3               	adc #8
0038EA  3               	sta dispy
0038EA  3               	jsr tstbl		; check blocktype in MAP
0038EA  3               	jsr fdchk
0038EA  3               	lda dispy
0038EA  3               	and #7
0038EA  3               	bne :+
0038EA  3               	rts
0038EA  3               :
0038EA  3               	clc
0038EA  3               	lda dispy		; look 1 cell down
0038EA  3               	adc #8
0038EA  3               	sta dispy
0038EA  3               	jsr tstbl		; check blocktype in MAP
0038EA  3               	jmp fdchk
0038EA  3               
0038EA  3               digcnt:	.byte 0
0038EA  3               
0038EA  3               .endif
0038EA  3               
0038EA  3               ;------------------------------------------------------------------
0038EA  3               ; Sprite table
0038EA  3               ;------------------------------------------------------------------
0038EA  3               
0038EA  3               
0038EA  3               ; ix+0  = type.
0038EA  3               ; ix+1  = sprite image number.
0038EA  3               ; ix+2  = frame.
0038EA  3               ; ix+3  = y coord.
0038EA  3               ; ix+4  = x coord.
0038EA  3               
0038EA  3               ; ix+5  = new type.
0038EA  3               ; ix+6  = new image number.
0038EA  3               ; ix+7  = new frame.
0038EA  3               ; ix+8  = new y coord.
0038EA  3               ; ix+9  = new x coord.
0038EA  3               
0038EA  3               ; ix+10 = direction.
0038EA  3               ; ix+11 = parameter 1.
0038EA  3               ; ix+12 = parameter 2.
0038EA  3               ; ix+13 = jump pointer low.
0038EA  3               ; ix+14 = jump pointer high.
0038EA  3               ; ix+15 = data pointer low.
0038EA  3               ; ix+16 = data pointer high.
0038EA  3               
0038EA  3               ; block NUMSPR * TABSIZ,255
0038EA  3               
0038EA  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0038EE  3  FF FF FF FF  
0038F2  3  FF FF FF FF  
0039B6  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0039BA  3  FF FF FF 00  
0039BE  3  C0 78 00 00  
0039C7  3  07           roomtb:	.byte 7                      ; start room map offset.
0039C8  3               
0039C8  3               ; User routine.  Put your own code in here to be called with USER instruction.
0039C8  3               ; if USER has an argument it will be passed in the accumulator.
0039C8  3               
0039C8  3               user:
0039C8  3               	.include "user.inc"
0039C8  4  60           	rts
0039C9  4               
0039C9  3               
0039C9  3               setfgcol:
0039C9  3  29 03        	and #3
0039CB  3  A8           	tay
0039CC  3  B9 EE 39     	lda codcol,y
0039CF  3  4C E5 39     	jmp calfgc
0039D2  3               
0039D2  3               setbgcol:
0039D2  3  29 03        	and #3
0039D4  3               calbgc:
0039D4  3  A8           	tay
0039D5  3  B9 EE 39     	lda codcol,y
0039D8  3  48           	pha
0039D9  3  AD EC 39     	lda andeor
0039DC  3  4D ED 39     	eor andeor+1
0039DF  3  AA           	tax
0039E0  3  68           	pla
0039E1  3  8D ED 39     	sta andeor+1
0039E4  3  8A           	txa
0039E5  3               calfgc:
0039E5  3  4D ED 39     	eor andeor+1
0039E8  3  8D EC 39     	sta andeor
0039EB  3               calex1:
0039EB  3  60           	rts
0039EC  3               
0039EC  3  00 00        andeor:	.byte 0,0
0039EE  3  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
0039F2  3               
0039F2  3               ; Everything below here will be generated by the editors.
0039F2  3               
0039F2  3  60                   rts
0039F3  3               WINDOWTOP = 1
0039F3  3               WINDOWLFT = 1
0039F3  3               WINDOWHGT = 20
0039F3  3               WINDOWWID = 30 ;a
0039F3  3               MAPWID = 13
0039F3  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
0039F7  3  FF FF FF FF  
0039FB  3  FF FF FF FF  
003A00  3               mapdat:
003A00  3  FF 00 01 02          .byte 255,0,1,2,3,4,5,6,7,8,9,10,255,255,11,12,13,14,15,16,17,18,19,20,255,255
003A04  3  03 04 05 06  
003A08  3  07 08 09 0A  
003A1A  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
003A1E  3  FF FF FF FF  
003A22  3  FF FF FF FF  
003A27  3  01           stmap:  .byte 1
003A28  3               
003A28  3               evnt00:
003A28  3  20 9F 28             jsr skobj	; DETECTOBJECT
003A2B  3  85 rr                sta varobj
003A2D  3  A9 FF                lda #255
003A2F  3  C5 rr                cmp varobj
003A31  3  D0 03                bne *+5
003A33  3  4C 3A 3A             jmp a00040
003A36  3  A9 02                lda #2
003A38  3  85 rr                sta varg
003A3A  3  A9 02        a00040: lda #2
003A3C  3  C5 rr                cmp varg
003A3E  3  F0 03                beq *+5
003A40  3  4C 84 3A             jmp a00206
003A43  3  A0 08                ldy #8
003A45  3  B1 68                lda (z80_ix),y
003A47  3  85 rr                sta varj
003A49  3  A5 rr                lda varj
003A4B  3  4A                   lsr a
003A4C  3  4A                   lsr a
003A4D  3  85 rr                sta varj
003A4F  3  A5 rr                lda varj	; BEEP
003A51  3  0A                   asl a
003A52  3  8D B5 20             sta sndtyp
003A55  3  A9 10                lda #16
003A57  3  A0 06                ldy #6
003A59  3  91 68                sta (z80_ix),y
003A5B  3  A9 A0                lda #160
003A5D  3  A0 08                ldy #8
003A5F  3  D1 68                cmp (z80_ix),y
003A61  3  B0 03                bcs *+5
003A63  3  4C 80 3A             jmp a00195
003A66  3  A9 00                lda #0
003A68  3  C5 rr                cmp varc
003A6A  3  F0 03                beq *+5
003A6C  3  4C 74 3A             jmp a00165
003A6F  3  A9 00                lda #0		; ANIMATE
003A71  3  20 A8 34             jsr animsp
003A74  3  A0 08        a00165: ldy #8 		; SPRITEDOWN
003A76  3  B1 68                lda (z80_ix),y
003A78  3  18                   clc
003A79  3  69 02                adc #2
003A7B  3  91 68                sta (z80_ix),y
003A7D  3  4C 84 3A             jmp a00206
003A80  3  A9 01        a00195: lda #1 		; KILL
003A82  3  85 rr                sta deadf
003A84  3  A9 00        a00206: lda #0
003A86  3  C5 rr                cmp varg
003A88  3  F0 03                beq *+5
003A8A  3  4C D5 3C             jmp a01482
003A8D  3  A9 00                lda #0
003A8F  3  C5 rr                cmp varl
003A91  3  F0 03                beq *+5
003A93  3  4C CC 3B             jmp a00896
003A96  3  A5 rr                lda joyval	; KEY
003A98  3  29 01                and #1
003A9A  3  F0 03                beq :+
003A9C  3  4C FD 3A             jmp a00459
003A9F  3               :
003A9F  3  A9 01                lda #1
003AA1  3  C5 rr                cmp vare
003AA3  3  F0 03                beq *+5
003AA5  3  4C BB 3A             jmp a00318
003AA8  3  A9 00                lda #0
003AAA  3  85 rr                sta vare
003AAC  3  A9 08                lda #8
003AAE  3  85 62                sta z80_c
003AB0  3  A0 08                ldy #8
003AB2  3  B1 68                lda (z80_ix),y
003AB4  3  38                   sec
003AB5  3  E5 62                sbc z80_c
003AB7  3  A0 08                ldy #8
003AB9  3  91 68                sta (z80_ix),y
003ABB  3  A9 DA        a00318: lda #218
003ABD  3  A0 09                ldy #9
003ABF  3  D1 68                cmp (z80_ix),y
003AC1  3  B0 03                bcs *+5
003AC3  3  4C FD 3A             jmp a00459
003AC6  3  A9 00                lda #0
003AC8  3  C5 rr                cmp vark
003ACA  3  F0 03                beq *+5
003ACC  3  4C FD 3A             jmp a00459
003ACF  3  A0 09                ldy #9
003AD1  3  B1 68                lda (z80_ix),y
003AD3  3  85 rr                sta vara
003AD5  3  A9 1E                lda #30
003AD7  3  85 62                sta z80_c
003AD9  3  A5 rr                lda vara
003ADB  3  18                   clc
003ADC  3  65 62                adc z80_c
003ADE  3  85 rr                sta vara
003AE0  3  A9 04                lda #4
003AE2  3  85 62                sta z80_c
003AE4  3  A0 08                ldy #8
003AE6  3  B1 68                lda (z80_ix),y
003AE8  3  38                   sec
003AE9  3  E5 62                sbc z80_c
003AEB  3  A0 08                ldy #8
003AED  3  91 68                sta (z80_ix),y
003AEF  3  A9 01                lda #1
003AF1  3  85 rr                sta vard
003AF3  3  A9 01                lda #1
003AF5  3  85 rr                sta vark
003AF7  3  A9 01                lda #1
003AF9  3  A0 06                ldy #6
003AFB  3  91 68                sta (z80_ix),y
003AFD  3  A5 rr        a00459: lda joyval	; KEY
003AFF  3  29 02                and #2
003B01  3  F0 03                beq :+
003B03  3  4C 64 3B             jmp a00679
003B06  3               :
003B06  3  A9 01                lda #1
003B08  3  C5 rr                cmp vare
003B0A  3  F0 03                beq *+5
003B0C  3  4C 22 3B             jmp a00538
003B0F  3  A9 00                lda #0
003B11  3  85 rr                sta vare
003B13  3  A9 08                lda #8
003B15  3  85 62                sta z80_c
003B17  3  A0 08                ldy #8
003B19  3  B1 68                lda (z80_ix),y
003B1B  3  38                   sec
003B1C  3  E5 62                sbc z80_c
003B1E  3  A0 08                ldy #8
003B20  3  91 68                sta (z80_ix),y
003B22  3  A9 1E        a00538: lda #30
003B24  3  A0 09                ldy #9
003B26  3  D1 68                cmp (z80_ix),y
003B28  3  90 03                bcc *+5
003B2A  3  4C 64 3B             jmp a00679
003B2D  3  A9 00                lda #0
003B2F  3  C5 rr                cmp vark
003B31  3  F0 03                beq *+5
003B33  3  4C 64 3B             jmp a00679
003B36  3  A0 09                ldy #9
003B38  3  B1 68                lda (z80_ix),y
003B3A  3  85 rr                sta vara
003B3C  3  A9 24                lda #36
003B3E  3  85 62                sta z80_c
003B40  3  A5 rr                lda vara
003B42  3  38                   sec
003B43  3  E5 62                sbc z80_c
003B45  3  85 rr                sta vara
003B47  3  A9 04                lda #4
003B49  3  85 62                sta z80_c
003B4B  3  A0 08                ldy #8
003B4D  3  B1 68                lda (z80_ix),y
003B4F  3  38                   sec
003B50  3  E5 62                sbc z80_c
003B52  3  A0 08                ldy #8
003B54  3  91 68                sta (z80_ix),y
003B56  3  A9 02                lda #2
003B58  3  85 rr                sta vard
003B5A  3  A9 01                lda #1
003B5C  3  85 rr                sta vark
003B5E  3  A9 03                lda #3
003B60  3  A0 06                ldy #6
003B62  3  91 68                sta (z80_ix),y
003B64  3  A5 rr        a00679: lda joyval	; KEY
003B66  3  29 04                and #4
003B68  3  F0 03                beq :+
003B6A  3  4C 98 3B             jmp a00787
003B6D  3               :
003B6D  3  A9 00                lda #0
003B6F  3  C5 rr                cmp vark
003B71  3  F0 03                beq *+5
003B73  3  4C 98 3B             jmp a00787
003B76  3  A9 00                lda #0
003B78  3  C5 rr                cmp vare
003B7A  3  F0 03                beq *+5
003B7C  3  4C 98 3B             jmp a00787
003B7F  3  A9 01                lda #1
003B81  3  85 rr                sta vare
003B83  3  A9 04                lda #4
003B85  3  A0 06                ldy #6
003B87  3  91 68                sta (z80_ix),y
003B89  3  A9 08                lda #8
003B8B  3  85 62                sta z80_c
003B8D  3  A0 08                ldy #8
003B8F  3  B1 68                lda (z80_ix),y
003B91  3  18                   clc
003B92  3  65 62                adc z80_c
003B94  3  A0 08                ldy #8
003B96  3  91 68                sta (z80_ix),y
003B98  3  A5 rr        a00787: lda joyval	; KEY
003B9A  3  29 08                and #8
003B9C  3  F0 03                beq :+
003B9E  3  4C CC 3B             jmp a00896
003BA1  3               :
003BA1  3  A9 00                lda #0
003BA3  3  C5 rr                cmp vark
003BA5  3  F0 03                beq *+5
003BA7  3  4C CC 3B             jmp a00896
003BAA  3  A9 01                lda #1
003BAC  3  C5 rr                cmp vare
003BAE  3  F0 03                beq *+5
003BB0  3  4C CC 3B             jmp a00896
003BB3  3  A9 00                lda #0
003BB5  3  85 rr                sta vare
003BB7  3  A9 00                lda #0
003BB9  3  A0 06                ldy #6
003BBB  3  91 68                sta (z80_ix),y
003BBD  3  A9 08                lda #8
003BBF  3  85 62                sta z80_c
003BC1  3  A0 08                ldy #8
003BC3  3  B1 68                lda (z80_ix),y
003BC5  3  38                   sec
003BC6  3  E5 62                sbc z80_c
003BC8  3  A0 08                ldy #8
003BCA  3  91 68                sta (z80_ix),y
003BCC  3  A9 01        a00896: lda #1
003BCE  3  C5 rr                cmp vard
003BD0  3  F0 03                beq *+5
003BD2  3  4C 0A 3C             jmp a01036
003BD5  3  A0 09                ldy #9
003BD7  3  B1 68                lda (z80_ix),y
003BD9  3  C5 rr                cmp vara
003BDB  3  90 03                bcc *+5
003BDD  3  4C FC 3B             jmp a01007
003BE0  3  A0 09                ldy #9 		; SPRITERIGHT
003BE2  3  B1 68                lda (z80_ix),y
003BE4  3  18                   clc
003BE5  3  69 02                adc #2
003BE7  3  91 68                sta (z80_ix),y
003BE9  3  A0 09                ldy #9 		; SPRITERIGHT
003BEB  3  B1 68                lda (z80_ix),y
003BED  3  18                   clc
003BEE  3  69 02                adc #2
003BF0  3  91 68                sta (z80_ix),y
003BF2  3  A5 rr                lda vara
003BF4  3  18                   clc
003BF5  3  69 01                adc #1
003BF7  3  85 rr                sta vara
003BF9  3  4C 0A 3C             jmp a01036
003BFC  3  A9 00        a01007: lda #0
003BFE  3  85 rr                sta vard
003C00  3  A9 00                lda #0
003C02  3  85 rr                sta vark
003C04  3  A9 00                lda #0
003C06  3  A0 06                ldy #6
003C08  3  91 68                sta (z80_ix),y
003C0A  3  A5 rr        a01036: lda joyval	; KEY
003C0C  3  29 10                and #16
003C0E  3  F0 03                beq :+
003C10  3  4C 67 3C             jmp a01235
003C13  3               :
003C13  3  A9 00                lda #0
003C15  3  C5 rr                cmp varb
003C17  3  F0 03                beq *+5
003C19  3  4C 3D 3C             jmp a01145
003C1C  3  A9 05                lda #DEADLY	; DEADLY
003C1E  3  85 63                sta z80_b
003C20  3  20 F2 2E             jsr tded
003C23  3  C5 63                cmp z80_b
003C25  3  F0 03                beq :+
003C27  3  4C 3D 3C             jmp a01145
003C2A  3               :
003C2A  3  A9 28                lda #40
003C2C  3  85 62                sta z80_c
003C2E  3  A0 08                ldy #8
003C30  3  B1 68                lda (z80_ix),y
003C32  3  18                   clc
003C33  3  65 62                adc z80_c
003C35  3  A0 08                ldy #8
003C37  3  91 68                sta (z80_ix),y
003C39  3  A9 0A                lda #10
003C3B  3  85 rr                sta varb
003C3D  3  A9 00        a01145: lda #0
003C3F  3  C5 rr                cmp varb
003C41  3  F0 03                beq *+5
003C43  3  4C 67 3C             jmp a01235
003C46  3  A9 06                lda #CUSTOM	; CUSTOM
003C48  3  85 63                sta z80_b
003C4A  3  20 F2 2E             jsr tded
003C4D  3  C5 63                cmp z80_b
003C4F  3  F0 03                beq :+
003C51  3  4C 67 3C             jmp a01235
003C54  3               :
003C54  3  A9 28                lda #40
003C56  3  85 62                sta z80_c
003C58  3  A0 08                ldy #8
003C5A  3  B1 68                lda (z80_ix),y
003C5C  3  38                   sec
003C5D  3  E5 62                sbc z80_c
003C5F  3  A0 08                ldy #8
003C61  3  91 68                sta (z80_ix),y
003C63  3  A9 0A                lda #10
003C65  3  85 rr                sta varb
003C67  3  A9 02        a01235: lda #2
003C69  3  C5 rr                cmp vard
003C6B  3  F0 03                beq *+5
003C6D  3  4C 9E 3C             jmp a01359
003C70  3  A0 09                ldy #9
003C72  3  B1 68                lda (z80_ix),y
003C74  3  C5 rr                cmp vara
003C76  3  B0 03                bcs *+5
003C78  3  4C 90 3C             jmp a01330
003C7B  3  A0 09                ldy #9 		; SPRITELEFT
003C7D  3  B1 68                lda (z80_ix),y
003C7F  3  38                   sec
003C80  3  E9 02                sbc #2
003C82  3  91 68                sta (z80_ix),y
003C84  3  A0 09                ldy #9 		; SPRITELEFT
003C86  3  B1 68                lda (z80_ix),y
003C88  3  38                   sec
003C89  3  E9 02                sbc #2
003C8B  3  91 68                sta (z80_ix),y
003C8D  3  4C 9E 3C             jmp a01359
003C90  3  A9 00        a01330: lda #0
003C92  3  85 rr                sta vard
003C94  3  A9 00                lda #0
003C96  3  85 rr                sta vark
003C98  3  A9 02                lda #2
003C9A  3  A0 06                ldy #6
003C9C  3  91 68                sta (z80_ix),y
003C9E  3  A9 00        a01359: lda #0
003CA0  3  C5 rr                cmp vard
003CA2  3  F0 03                beq *+5
003CA4  3  4C D5 3C             jmp a01482
003CA7  3  A9 00                lda #0
003CA9  3  C5 rr                cmp vare
003CAB  3  F0 03                beq *+5
003CAD  3  4C D5 3C             jmp a01482
003CB0  3  20 34 2D             jsr cangd	; CANGODOWN
003CB3  3  F0 03                beq :+
003CB5  3  4C D1 3C             jmp a01474
003CB8  3               :
003CB8  3  A0 08                ldy #8 		; SPRITEDOWN
003CBA  3  B1 68                lda (z80_ix),y
003CBC  3  18                   clc
003CBD  3  69 02                adc #2
003CBF  3  91 68                sta (z80_ix),y
003CC1  3  A0 08                ldy #8 		; SPRITEDOWN
003CC3  3  B1 68                lda (z80_ix),y
003CC5  3  18                   clc
003CC6  3  69 02                adc #2
003CC8  3  91 68                sta (z80_ix),y
003CCA  3  A9 01                lda #1
003CCC  3  85 rr                sta varl
003CCE  3  4C D5 3C             jmp a01482
003CD1  3  A9 00        a01474: lda #0
003CD3  3  85 rr                sta varl
003CD5  3  A9 01        a01482: lda #1
003CD7  3  C5 rr                cmp varg
003CD9  3  F0 03                beq *+5
003CDB  3  4C 1E 3D             jmp a01639
003CDE  3  A9 72                lda #114
003CE0  3  C5 rr                cmp varf
003CE2  3  90 03                bcc *+5
003CE4  3  4C F1 3C             jmp a01538
003CE7  3  20 F7 20             jsr cls		; CLS
003CEA  3  A9 01                lda #1	; NEXTLEVEL
003CEC  3  85 rr                sta nexlev
003CEE  3  4C 1E 3D             jmp a01639
003CF1  3  A9 0B        a01538: lda #11
003CF3  3  85 rr                sta chary
003CF5  3  A9 0A                lda #10
003CF7  3  85 rr                sta charx
003CF9  3  A9 02                lda #2  	; MESSAGE
003CFB  3  20 4D 30             jsr dmsg
003CFE  3  A9 04                lda #4 	; REPEAT
003D00  3  85 rr                sta loopa
003D02  3  C6 rr        a01576: dec loopa	; ENDREPEAT
003D04  3  F0 03                beq :+
003D06  3  4C 02 3D             jmp a01576
003D09  3               :
003D09  3  A9 64                lda #100 	; DELAY
003D0B  3  20 2F 20             jsr delay
003D0E  3  A9 00                lda #0
003D10  3  85 rr                sta varg
003D12  3  A9 00                lda #0
003D14  3  85 rr                sta vark
003D16  3  A9 00                lda #0
003D18  3  85 rr                sta vard
003D1A  3  A9 01                lda #1	; NEXTLEVEL
003D1C  3  85 rr                sta nexlev
003D1E  3  60           a01639: rts
003D1F  3               evnt01:
003D1F  3  A9 00                lda #0 	; COLLISION
003D21  3  85 63                sta z80_b
003D23  3  20 F3 34             jsr sktyp
003D26  3  B0 03                bcs :+
003D28  3  4C 2F 3D             jmp b00035
003D2B  3               :
003D2B  3  A9 02                lda #2
003D2D  3  85 rr                sta varg
003D2F  3  20 8B 2E     b00035: jsr cangr	; CANGORIGHT
003D32  3  F0 03                beq :+
003D34  3  4C 99 3D             jmp b00244
003D37  3               :
003D37  3  A9 05                lda #5
003D39  3  C5 rr                cmp scno
003D3B  3  F0 03                beq *+5
003D3D  3  4C 40 3D             jmp b00068
003D40  3  A9 06        b00068: lda #6
003D42  3  C5 rr                cmp scno
003D44  3  F0 03                beq *+5
003D46  3  4C 49 3D             jmp b00085
003D49  3  A9 07        b00085: lda #7
003D4B  3  C5 rr                cmp scno
003D4D  3  F0 03                beq *+5
003D4F  3  4C 52 3D             jmp b00102
003D52  3  A9 09        b00102: lda #9
003D54  3  C5 rr                cmp scno
003D56  3  90 03                bcc *+5
003D58  3  4C 5B 3D             jmp b00118
003D5B  3  A0 09        b00118: ldy #9 		; SPRITERIGHT
003D5D  3  B1 68                lda (z80_ix),y
003D5F  3  18                   clc
003D60  3  69 02                adc #2
003D62  3  91 68                sta (z80_ix),y
003D64  3  A9 05                lda #5
003D66  3  C5 rr                cmp scno
003D68  3  F0 03                beq *+5
003D6A  3  4C 6D 3D             jmp b00161
003D6D  3  A9 06        b00161: lda #6
003D6F  3  C5 rr                cmp scno
003D71  3  F0 03                beq *+5
003D73  3  4C 76 3D             jmp b00178
003D76  3  A9 07        b00178: lda #7
003D78  3  C5 rr                cmp scno
003D7A  3  F0 03                beq *+5
003D7C  3  4C 7F 3D             jmp b00195
003D7F  3  A9 09        b00195: lda #9
003D81  3  C5 rr                cmp scno
003D83  3  90 03                bcc *+5
003D85  3  4C 88 3D             jmp b00211
003D88  3  A9 00        b00211: lda #0
003D8A  3  C5 rr                cmp varc
003D8C  3  F0 03                beq *+5
003D8E  3  4C 96 3D             jmp b00239
003D91  3  A9 00                lda #0		; ANIMATE
003D93  3  20 A8 34             jsr animsp
003D96  3  4C A5 3D     b00239: jmp b00271
003D99  3  A9 00        b00244: lda #0
003D9B  3  A0 09                ldy #9
003D9D  3  91 68                sta (z80_ix),y
003D9F  3  A9 04                lda #4		; BEEP
003DA1  3  0A                   asl a
003DA2  3  8D B5 20             sta sndtyp
003DA5  3  60           b00271: rts
003DA6  3               evnt02:
003DA6  3  A9 00                lda #0 	; COLLISION
003DA8  3  85 63                sta z80_b
003DAA  3  20 F3 34             jsr sktyp
003DAD  3  B0 03                bcs :+
003DAF  3  4C B6 3D             jmp c00035
003DB2  3               :
003DB2  3  A9 02                lda #2
003DB4  3  85 rr                sta varg
003DB6  3  20 8B 2E     c00035: jsr cangr	; CANGORIGHT
003DB9  3  F0 03                beq :+
003DBB  3  4C E1 3D             jmp c00136
003DBE  3               :
003DBE  3  A0 09                ldy #9 		; SPRITERIGHT
003DC0  3  B1 68                lda (z80_ix),y
003DC2  3  18                   clc
003DC3  3  69 02                adc #2
003DC5  3  91 68                sta (z80_ix),y
003DC7  3  A0 09                ldy #9 		; SPRITERIGHT
003DC9  3  B1 68                lda (z80_ix),y
003DCB  3  18                   clc
003DCC  3  69 02                adc #2
003DCE  3  91 68                sta (z80_ix),y
003DD0  3  A9 00                lda #0
003DD2  3  C5 rr                cmp varc
003DD4  3  F0 03                beq *+5
003DD6  3  4C DE 3D             jmp c00131
003DD9  3  A9 00                lda #0		; ANIMATE
003DDB  3  20 A8 34             jsr animsp
003DDE  3  4C ED 3D     c00131: jmp c00163
003DE1  3  A9 00        c00136: lda #0
003DE3  3  A0 09                ldy #9
003DE5  3  91 68                sta (z80_ix),y
003DE7  3  A9 04                lda #4		; BEEP
003DE9  3  0A                   asl a
003DEA  3  8D B5 20             sta sndtyp
003DED  3  60           c00163: rts
003DEE  3               evnt03:
003DEE  3  A9 00                lda #0 	; COLLISION
003DF0  3  85 63                sta z80_b
003DF2  3  20 F3 34             jsr sktyp
003DF5  3  B0 03                bcs :+
003DF7  3  4C FE 3D             jmp d00035
003DFA  3               :
003DFA  3  A9 02                lda #2
003DFC  3  85 rr                sta varg
003DFE  3  20 69 2D     d00035: jsr cangl	; CANGOLEFT
003E01  3  F0 03                beq :+
003E03  3  4C 20 3E             jmp d00110
003E06  3               :
003E06  3  A0 09                ldy #9 		; SPRITELEFT
003E08  3  B1 68                lda (z80_ix),y
003E0A  3  38                   sec
003E0B  3  E9 02                sbc #2
003E0D  3  91 68                sta (z80_ix),y
003E0F  3  A9 00                lda #0
003E11  3  C5 rr                cmp varc
003E13  3  F0 03                beq *+5
003E15  3  4C 1D 3E             jmp d00105
003E18  3  A9 00                lda #0		; ANIMATE
003E1A  3  20 A8 34             jsr animsp
003E1D  3  4C 2C 3E     d00105: jmp d00137
003E20  3  A9 04        d00110: lda #4		; BEEP
003E22  3  0A                   asl a
003E23  3  8D B5 20             sta sndtyp
003E26  3  A9 F0                lda #240
003E28  3  A0 09                ldy #9
003E2A  3  91 68                sta (z80_ix),y
003E2C  3  60           d00137: rts
003E2D  3               evnt04:
003E2D  3  A9 00                lda #0 	; COLLISION
003E2F  3  85 63                sta z80_b
003E31  3  20 F3 34             jsr sktyp
003E34  3  B0 03                bcs :+
003E36  3  4C 3D 3E             jmp e00035
003E39  3               :
003E39  3  A9 02                lda #2
003E3B  3  85 rr                sta varg
003E3D  3  A9 14        e00035: lda #20
003E3F  3  C5 rr                cmp scno
003E41  3  F0 03                beq *+5
003E43  3  4C 57 3E             jmp e00084
003E46  3  A9 00                lda #0
003E48  3  C5 rr                cmp varc
003E4A  3  F0 03                beq *+5
003E4C  3  4C 54 3E             jmp e00080
003E4F  3  A9 00                lda #0		; ANIMATE
003E51  3  20 A8 34             jsr animsp
003E54  3  4C 8E 3E     e00080: jmp e00213
003E57  3  20 69 2D     e00084: jsr cangl	; CANGOLEFT
003E5A  3  F0 03                beq :+
003E5C  3  4C 82 3E             jmp e00185
003E5F  3               :
003E5F  3  A0 09                ldy #9 		; SPRITELEFT
003E61  3  B1 68                lda (z80_ix),y
003E63  3  38                   sec
003E64  3  E9 02                sbc #2
003E66  3  91 68                sta (z80_ix),y
003E68  3  A0 09                ldy #9 		; SPRITELEFT
003E6A  3  B1 68                lda (z80_ix),y
003E6C  3  38                   sec
003E6D  3  E9 02                sbc #2
003E6F  3  91 68                sta (z80_ix),y
003E71  3  A9 00                lda #0
003E73  3  C5 rr                cmp varc
003E75  3  F0 03                beq *+5
003E77  3  4C 7F 3E             jmp e00180
003E7A  3  A9 00                lda #0		; ANIMATE
003E7C  3  20 A8 34             jsr animsp
003E7F  3  4C 8E 3E     e00180: jmp e00213
003E82  3  A9 04        e00185: lda #4		; BEEP
003E84  3  0A                   asl a
003E85  3  8D B5 20             sta sndtyp
003E88  3  A9 F0                lda #240
003E8A  3  A0 09                ldy #9
003E8C  3  91 68                sta (z80_ix),y
003E8E  3  60           e00213: rts
003E8F  3               evnt05:
003E8F  3  A9 00                lda #0 	; COLLISION
003E91  3  85 63                sta z80_b
003E93  3  20 F3 34             jsr sktyp
003E96  3  B0 03                bcs :+
003E98  3  4C 9F 3E             jmp f00035
003E9B  3               :
003E9B  3  A9 02                lda #2
003E9D  3  85 rr                sta varg
003E9F  3  A9 96        f00035: lda #150
003EA1  3  A0 08                ldy #8
003EA3  3  D1 68                cmp (z80_ix),y
003EA5  3  B0 03                bcs *+5
003EA7  3  4C C4 3E             jmp f00116
003EAA  3  A0 08                ldy #8 		; SPRITEDOWN
003EAC  3  B1 68                lda (z80_ix),y
003EAE  3  18                   clc
003EAF  3  69 02                adc #2
003EB1  3  91 68                sta (z80_ix),y
003EB3  3  A9 00                lda #0
003EB5  3  C5 rr                cmp varc
003EB7  3  F0 03                beq *+5
003EB9  3  4C C1 3E             jmp f00111
003EBC  3  A9 00                lda #0		; ANIMATE
003EBE  3  20 A8 34             jsr animsp
003EC1  3  4C F2 3E     f00111: jmp f00217
003EC4  3  A9 00        f00116: lda #0
003EC6  3  A0 08                ldy #8
003EC8  3  91 68                sta (z80_ix),y
003ECA  3  A9 A0                lda #160
003ECC  3  85 65                sta z80_d	; GETRANDOM
003ECE  3  20 FF 2F             jsr random
003ED1  3  85 67                sta z80_h
003ED3  3  20 8C 27             jsr imul
003ED6  3  A5 67                lda z80_h
003ED8  3  85 rr                sta varrnd
003EDA  3  A5 rr                lda varrnd
003EDC  3  A0 09                ldy #9
003EDE  3  91 68                sta (z80_ix),y
003EE0  3  A9 3C                lda #60
003EE2  3  85 62                sta z80_c
003EE4  3  A0 09                ldy #9
003EE6  3  B1 68                lda (z80_ix),y
003EE8  3  18                   clc
003EE9  3  65 62                adc z80_c
003EEB  3  A0 09                ldy #9
003EED  3  91 68                sta (z80_ix),y
003EEF  3  4C F2 3E             jmp f00217
003EF2  3  60           f00217: rts
003EF3  3               evnt06:
003EF3  3  A9 00                lda #0 	; COLLISION
003EF5  3  85 63                sta z80_b
003EF7  3  20 F3 34             jsr sktyp
003EFA  3  B0 03                bcs :+
003EFC  3  4C 03 3F             jmp g00035
003EFF  3               :
003EFF  3  A9 02                lda #2
003F01  3  85 rr                sta varg
003F03  3  A9 00        g00035: lda #0
003F05  3  C5 rr                cmp varc
003F07  3  F0 03                beq *+5
003F09  3  4C 2B 3F             jmp g00123
003F0C  3  A9 00                lda #0		; ANIMATE
003F0E  3  20 A8 34             jsr animsp
003F11  3  20 8B 2E             jsr cangr	; CANGORIGHT
003F14  3  F0 03                beq :+
003F16  3  4C 25 3F             jmp g00110
003F19  3               :
003F19  3  A0 09                ldy #9 		; SPRITERIGHT
003F1B  3  B1 68                lda (z80_ix),y
003F1D  3  18                   clc
003F1E  3  69 02                adc #2
003F20  3  91 68                sta (z80_ix),y
003F22  3  4C 2B 3F             jmp g00123
003F25  3  A9 00        g00110: lda #0
003F27  3  A0 09                ldy #9
003F29  3  91 68                sta (z80_ix),y
003F2B  3  60           g00123: rts
003F2C  3               evnt07:
003F2C  3  A9 00                lda #0
003F2E  3  C5 rr                cmp varc
003F30  3  F0 03                beq *+5
003F32  3  4C 3A 3F             jmp h00030
003F35  3  A9 00                lda #0		; ANIMATE
003F37  3  20 A8 34             jsr animsp
003F3A  3  A9 00        h00030: lda #0 	; COLLISION
003F3C  3  85 63                sta z80_b
003F3E  3  20 F3 34             jsr sktyp
003F41  3  B0 03                bcs :+
003F43  3  4C 52 3F             jmp h00081
003F46  3               :
003F46  3  A9 04                lda #4	; EXPLODE
003F48  3  20 D8 24             jsr explod
003F4B  3  A5 rr                lda varf
003F4D  3  18                   clc
003F4E  3  69 01                adc #1
003F50  3  85 rr                sta varf
003F52  3  A9 72        h00081: lda #114
003F54  3  C5 rr                cmp varf
003F56  3  F0 03                beq *+5
003F58  3  4C 6A 3F             jmp h00129
003F5B  3  20 F7 20             jsr cls		; CLS
003F5E  3  A9 FA                lda #250
003F60  3  85 rr                sta varb
003F62  3  A9 73                lda #115
003F64  3  85 rr                sta varf
003F66  3  A9 01                lda #1
003F68  3  85 rr                sta varg
003F6A  3  A9 70        h00129: lda #112
003F6C  3  C5 rr                cmp varf
003F6E  3  F0 03                beq *+5
003F70  3  4C 85 3F             jmp h00187
003F73  3  A9 FF                lda #255	; REMOVE
003F75  3  A0 05                ldy #5
003F77  3  91 68                sta (z80_ix),y
003F79  3  A9 71                lda #113
003F7B  3  85 rr                sta varf
003F7D  3  A9 01                lda #1
003F7F  3  85 rr                sta varg
003F81  3  A9 14                lda #20
003F83  3  85 rr                sta varh
003F85  3  A9 6F        h00187: lda #111
003F87  3  C5 rr                cmp varf
003F89  3  F0 03                beq *+5
003F8B  3  4C 94 3F             jmp h00218
003F8E  3  A9 88                lda #136
003F90  3  A0 08                ldy #8
003F92  3  91 68                sta (z80_ix),y
003F94  3  A9 6E        h00218: lda #110
003F96  3  C5 rr                cmp varf
003F98  3  F0 03                beq *+5
003F9A  3  4C A3 3F             jmp h00249
003F9D  3  A9 36                lda #54
003F9F  3  A0 08                ldy #8
003FA1  3  91 68                sta (z80_ix),y
003FA3  3  A9 6D        h00249: lda #109
003FA5  3  C5 rr                cmp varf
003FA7  3  F0 03                beq *+5
003FA9  3  4C B2 3F             jmp h00279
003FAC  3  A9 10                lda #16
003FAE  3  A0 08                ldy #8
003FB0  3  91 68                sta (z80_ix),y
003FB2  3  A9 6C        h00279: lda #108
003FB4  3  C5 rr                cmp varf
003FB6  3  F0 03                beq *+5
003FB8  3  4C C7 3F             jmp h00324
003FBB  3  A9 3C                lda #60
003FBD  3  A0 09                ldy #9
003FBF  3  91 68                sta (z80_ix),y
003FC1  3  A9 36                lda #54
003FC3  3  A0 08                ldy #8
003FC5  3  91 68                sta (z80_ix),y
003FC7  3  A9 6A        h00324: lda #106
003FC9  3  C5 rr                cmp varf
003FCB  3  F0 03                beq *+5
003FCD  3  4C E2 3F             jmp h00382
003FD0  3  A9 FF                lda #255	; REMOVE
003FD2  3  A0 05                ldy #5
003FD4  3  91 68                sta (z80_ix),y
003FD6  3  A9 6B                lda #107
003FD8  3  85 rr                sta varf
003FDA  3  A9 01                lda #1
003FDC  3  85 rr                sta varg
003FDE  3  A9 13                lda #19
003FE0  3  85 rr                sta varh
003FE2  3  A9 69        h00382: lda #105
003FE4  3  C5 rr                cmp varf
003FE6  3  F0 03                beq *+5
003FE8  3  4C F7 3F             jmp h00426
003FEB  3  A9 DC                lda #220
003FED  3  A0 09                ldy #9
003FEF  3  91 68                sta (z80_ix),y
003FF1  3  A9 10                lda #16
003FF3  3  A0 08                ldy #8
003FF5  3  91 68                sta (z80_ix),y
003FF7  3  A9 68        h00426: lda #104
003FF9  3  C5 rr                cmp varf
003FFB  3  F0 03                beq *+5
003FFD  3  4C 0C 40             jmp h00471
004000  3  A9 3C                lda #60
004002  3  A0 09                ldy #9
004004  3  91 68                sta (z80_ix),y
004006  3  A9 86                lda #134
004008  3  A0 08                ldy #8
00400A  3  91 68                sta (z80_ix),y
00400C  3  A9 67        h00471: lda #103
00400E  3  C5 rr                cmp varf
004010  3  F0 03                beq *+5
004012  3  4C 21 40             jmp h00515
004015  3  A9 DC                lda #220
004017  3  A0 09                ldy #9
004019  3  91 68                sta (z80_ix),y
00401B  3  A9 36                lda #54
00401D  3  A0 08                ldy #8
00401F  3  91 68                sta (z80_ix),y
004021  3  A9 66        h00515: lda #102
004023  3  C5 rr                cmp varf
004025  3  F0 03                beq *+5
004027  3  4C 36 40             jmp h00560
00402A  3  A9 B4                lda #180
00402C  3  A0 09                ldy #9
00402E  3  91 68                sta (z80_ix),y
004030  3  A9 5C                lda #92
004032  3  A0 08                ldy #8
004034  3  91 68                sta (z80_ix),y
004036  3  A9 65        h00560: lda #101
004038  3  C5 rr                cmp varf
00403A  3  F0 03                beq *+5
00403C  3  4C 4B 40             jmp h00604
00403F  3  A9 DC                lda #220
004041  3  A0 09                ldy #9
004043  3  91 68                sta (z80_ix),y
004045  3  A9 10                lda #16
004047  3  A0 08                ldy #8
004049  3  91 68                sta (z80_ix),y
00404B  3  A9 63        h00604: lda #99
00404D  3  C5 rr                cmp varf
00404F  3  F0 03                beq *+5
004051  3  4C 66 40             jmp h00662
004054  3  A9 FF                lda #255	; REMOVE
004056  3  A0 05                ldy #5
004058  3  91 68                sta (z80_ix),y
00405A  3  A9 64                lda #100
00405C  3  85 rr                sta varf
00405E  3  A9 01                lda #1
004060  3  85 rr                sta varg
004062  3  A9 12                lda #18
004064  3  85 rr                sta varh
004066  3  A9 62        h00662: lda #98
004068  3  C5 rr                cmp varf
00406A  3  F0 03                beq *+5
00406C  3  4C 75 40             jmp h00692
00406F  3  A9 36                lda #54
004071  3  A0 08                ldy #8
004073  3  91 68                sta (z80_ix),y
004075  3  A9 61        h00692: lda #97
004077  3  C5 rr                cmp varf
004079  3  F0 03                beq *+5
00407B  3  4C 84 40             jmp h00723
00407E  3  A9 14                lda #20
004080  3  A0 09                ldy #9
004082  3  91 68                sta (z80_ix),y
004084  3  A9 60        h00723: lda #96
004086  3  C5 rr                cmp varf
004088  3  F0 03                beq *+5
00408A  3  4C 93 40             jmp h00754
00408D  3  A9 86                lda #134
00408F  3  A0 08                ldy #8
004091  3  91 68                sta (z80_ix),y
004093  3  A9 5F        h00754: lda #95
004095  3  C5 rr                cmp varf
004097  3  F0 03                beq *+5
004099  3  4C A2 40             jmp h00784
00409C  3  A9 10                lda #16
00409E  3  A0 08                ldy #8
0040A0  3  91 68                sta (z80_ix),y
0040A2  3  A9 5D        h00784: lda #93
0040A4  3  C5 rr                cmp varf
0040A6  3  F0 03                beq *+5
0040A8  3  4C BD 40             jmp h00842
0040AB  3  A9 FF                lda #255	; REMOVE
0040AD  3  A0 05                ldy #5
0040AF  3  91 68                sta (z80_ix),y
0040B1  3  A9 5E                lda #94
0040B3  3  85 rr                sta varf
0040B5  3  A9 01                lda #1
0040B7  3  85 rr                sta varg
0040B9  3  A9 11                lda #17
0040BB  3  85 rr                sta varh
0040BD  3  A9 5C        h00842: lda #92
0040BF  3  C5 rr                cmp varf
0040C1  3  F0 03                beq *+5
0040C3  3  4C D2 40             jmp h00886
0040C6  3  A9 14                lda #20
0040C8  3  A0 09                ldy #9
0040CA  3  91 68                sta (z80_ix),y
0040CC  3  A9 10                lda #16
0040CE  3  A0 08                ldy #8
0040D0  3  91 68                sta (z80_ix),y
0040D2  3  A9 5B        h00886: lda #91
0040D4  3  C5 rr                cmp varf
0040D6  3  F0 03                beq *+5
0040D8  3  4C E7 40             jmp h00930
0040DB  3  A9 B4                lda #180
0040DD  3  A0 09                ldy #9
0040DF  3  91 68                sta (z80_ix),y
0040E1  3  A9 86                lda #134
0040E3  3  A0 08                ldy #8
0040E5  3  91 68                sta (z80_ix),y
0040E7  3  A9 5A        h00930: lda #90
0040E9  3  C5 rr                cmp varf
0040EB  3  F0 03                beq *+5
0040ED  3  4C FC 40             jmp h00974
0040F0  3  A9 DC                lda #220
0040F2  3  A0 09                ldy #9
0040F4  3  91 68                sta (z80_ix),y
0040F6  3  A9 10                lda #16
0040F8  3  A0 08                ldy #8
0040FA  3  91 68                sta (z80_ix),y
0040FC  3  A9 59        h00974: lda #89
0040FE  3  C5 rr                cmp varf
004100  3  F0 03                beq *+5
004102  3  4C 0B 41             jmp h01005
004105  3  A9 B4                lda #180
004107  3  A0 09                ldy #9
004109  3  91 68                sta (z80_ix),y
00410B  3  A9 57        h01005: lda #87
00410D  3  C5 rr                cmp varf
00410F  3  F0 03                beq *+5
004111  3  4C 26 41             jmp h01063
004114  3  A9 FF                lda #255	; REMOVE
004116  3  A0 05                ldy #5
004118  3  91 68                sta (z80_ix),y
00411A  3  A9 58                lda #88
00411C  3  85 rr                sta varf
00411E  3  A9 01                lda #1
004120  3  85 rr                sta varg
004122  3  A9 10                lda #16
004124  3  85 rr                sta varh
004126  3  A9 56        h01063: lda #86
004128  3  C5 rr                cmp varf
00412A  3  F0 03                beq *+5
00412C  3  4C 3B 41             jmp h01107
00412F  3  A9 14                lda #20
004131  3  A0 09                ldy #9
004133  3  91 68                sta (z80_ix),y
004135  3  A9 5C                lda #92
004137  3  A0 08                ldy #8
004139  3  91 68                sta (z80_ix),y
00413B  3  A9 55        h01107: lda #85
00413D  3  C5 rr                cmp varf
00413F  3  F0 03                beq *+5
004141  3  4C 50 41             jmp h01151
004144  3  A9 64                lda #100
004146  3  A0 09                ldy #9
004148  3  91 68                sta (z80_ix),y
00414A  3  A9 88                lda #136
00414C  3  A0 08                ldy #8
00414E  3  91 68                sta (z80_ix),y
004150  3  A9 54        h01151: lda #84
004152  3  C5 rr                cmp varf
004154  3  F0 03                beq *+5
004156  3  4C 65 41             jmp h01195
004159  3  A9 DC                lda #220
00415B  3  A0 09                ldy #9
00415D  3  91 68                sta (z80_ix),y
00415F  3  A9 10                lda #16
004161  3  A0 08                ldy #8
004163  3  91 68                sta (z80_ix),y
004165  3  A9 53        h01195: lda #83
004167  3  C5 rr                cmp varf
004169  3  F0 03                beq *+5
00416B  3  4C 7A 41             jmp h01239
00416E  3  A9 14                lda #20
004170  3  A0 09                ldy #9
004172  3  91 68                sta (z80_ix),y
004174  3  A9 5C                lda #92
004176  3  A0 08                ldy #8
004178  3  91 68                sta (z80_ix),y
00417A  3  A9 52        h01239: lda #82
00417C  3  C5 rr                cmp varf
00417E  3  F0 03                beq *+5
004180  3  4C 89 41             jmp h01270
004183  3  A9 10                lda #16
004185  3  A0 08                ldy #8
004187  3  91 68                sta (z80_ix),y
004189  3  A9 50        h01270: lda #80
00418B  3  C5 rr                cmp varf
00418D  3  F0 03                beq *+5
00418F  3  4C A4 41             jmp h01327
004192  3  A9 FF                lda #255	; REMOVE
004194  3  A0 05                ldy #5
004196  3  91 68                sta (z80_ix),y
004198  3  A9 51                lda #81
00419A  3  85 rr                sta varf
00419C  3  A9 01                lda #1
00419E  3  85 rr                sta varg
0041A0  3  A9 0F                lda #15
0041A2  3  85 rr                sta varh
0041A4  3  A9 4F        h01327: lda #79
0041A6  3  C5 rr                cmp varf
0041A8  3  F0 03                beq *+5
0041AA  3  4C B9 41             jmp h01372
0041AD  3  A9 B4                lda #180
0041AF  3  A0 09                ldy #9
0041B1  3  91 68                sta (z80_ix),y
0041B3  3  A9 86                lda #134
0041B5  3  A0 08                ldy #8
0041B7  3  91 68                sta (z80_ix),y
0041B9  3  A9 4E        h01372: lda #78
0041BB  3  C5 rr                cmp varf
0041BD  3  F0 03                beq *+5
0041BF  3  4C CE 41             jmp h01416
0041C2  3  A9 DC                lda #220
0041C4  3  A0 09                ldy #9
0041C6  3  91 68                sta (z80_ix),y
0041C8  3  A9 10                lda #16
0041CA  3  A0 08                ldy #8
0041CC  3  91 68                sta (z80_ix),y
0041CE  3  A9 4D        h01416: lda #77
0041D0  3  C5 rr                cmp varf
0041D2  3  F0 03                beq *+5
0041D4  3  4C E3 41             jmp h01460
0041D7  3  A9 14                lda #20
0041D9  3  A0 09                ldy #9
0041DB  3  91 68                sta (z80_ix),y
0041DD  3  A9 86                lda #134
0041DF  3  A0 08                ldy #8
0041E1  3  91 68                sta (z80_ix),y
0041E3  3  A9 4C        h01460: lda #76
0041E5  3  C5 rr                cmp varf
0041E7  3  F0 03                beq *+5
0041E9  3  4C F2 41             jmp h01491
0041EC  3  A9 DC                lda #220
0041EE  3  A0 09                ldy #9
0041F0  3  91 68                sta (z80_ix),y
0041F2  3  A9 4B        h01491: lda #75
0041F4  3  C5 rr                cmp varf
0041F6  3  F0 03                beq *+5
0041F8  3  4C 07 42             jmp h01535
0041FB  3  A9 14                lda #20
0041FD  3  A0 09                ldy #9
0041FF  3  91 68                sta (z80_ix),y
004201  3  A9 36                lda #54
004203  3  A0 08                ldy #8
004205  3  91 68                sta (z80_ix),y
004207  3  A9 49        h01535: lda #73
004209  3  C5 rr                cmp varf
00420B  3  F0 03                beq *+5
00420D  3  4C 22 42             jmp h01593
004210  3  A9 FF                lda #255	; REMOVE
004212  3  A0 05                ldy #5
004214  3  91 68                sta (z80_ix),y
004216  3  A9 4A                lda #74
004218  3  85 rr                sta varf
00421A  3  A9 01                lda #1
00421C  3  85 rr                sta varg
00421E  3  A9 0E                lda #14
004220  3  85 rr                sta varh
004222  3  A9 48        h01593: lda #72
004224  3  C5 rr                cmp varf
004226  3  F0 03                beq *+5
004228  3  4C 31 42             jmp h01623
00422B  3  A9 10                lda #16
00422D  3  A0 08                ldy #8
00422F  3  91 68                sta (z80_ix),y
004231  3  A9 47        h01623: lda #71
004233  3  C5 rr                cmp varf
004235  3  F0 03                beq *+5
004237  3  4C 46 42             jmp h01667
00423A  3  A9 14                lda #20
00423C  3  A0 09                ldy #9
00423E  3  91 68                sta (z80_ix),y
004240  3  A9 88                lda #136
004242  3  A0 08                ldy #8
004244  3  91 68                sta (z80_ix),y
004246  3  A9 46        h01667: lda #70
004248  3  C5 rr                cmp varf
00424A  3  F0 03                beq *+5
00424C  3  4C 55 42             jmp h01698
00424F  3  A9 36                lda #54
004251  3  A0 08                ldy #8
004253  3  91 68                sta (z80_ix),y
004255  3  A9 45        h01698: lda #69
004257  3  C5 rr                cmp varf
004259  3  F0 03                beq *+5
00425B  3  4C 6A 42             jmp h01742
00425E  3  A9 B4                lda #180
004260  3  A0 09                ldy #9
004262  3  91 68                sta (z80_ix),y
004264  3  A9 5C                lda #92
004266  3  A0 08                ldy #8
004268  3  91 68                sta (z80_ix),y
00426A  3  A9 43        h01742: lda #67
00426C  3  C5 rr                cmp varf
00426E  3  F0 03                beq *+5
004270  3  4C 85 42             jmp h01800
004273  3  A9 FF                lda #255	; REMOVE
004275  3  A0 05                ldy #5
004277  3  91 68                sta (z80_ix),y
004279  3  A9 44                lda #68
00427B  3  85 rr                sta varf
00427D  3  A9 01                lda #1
00427F  3  85 rr                sta varg
004281  3  A9 0D                lda #13
004283  3  85 rr                sta varh
004285  3  A9 42        h01800: lda #66
004287  3  C5 rr                cmp varf
004289  3  F0 03                beq *+5
00428B  3  4C 9A 42             jmp h01844
00428E  3  A9 14                lda #20
004290  3  A0 09                ldy #9
004292  3  91 68                sta (z80_ix),y
004294  3  A9 10                lda #16
004296  3  A0 08                ldy #8
004298  3  91 68                sta (z80_ix),y
00429A  3  A9 41        h01844: lda #65
00429C  3  C5 rr                cmp varf
00429E  3  F0 03                beq *+5
0042A0  3  4C AF 42             jmp h01888
0042A3  3  A9 8C                lda #140
0042A5  3  A0 09                ldy #9
0042A7  3  91 68                sta (z80_ix),y
0042A9  3  A9 36                lda #54
0042AB  3  A0 08                ldy #8
0042AD  3  91 68                sta (z80_ix),y
0042AF  3  A9 40        h01888: lda #64
0042B1  3  C5 rr                cmp varf
0042B3  3  F0 03                beq *+5
0042B5  3  4C C4 42             jmp h01932
0042B8  3  A9 3C                lda #60
0042BA  3  A0 09                ldy #9
0042BC  3  91 68                sta (z80_ix),y
0042BE  3  A9 88                lda #136
0042C0  3  A0 08                ldy #8
0042C2  3  91 68                sta (z80_ix),y
0042C4  3  A9 3F        h01932: lda #63
0042C6  3  C5 rr                cmp varf
0042C8  3  F0 03                beq *+5
0042CA  3  4C D9 42             jmp h01976
0042CD  3  A9 14                lda #20
0042CF  3  A0 09                ldy #9
0042D1  3  91 68                sta (z80_ix),y
0042D3  3  A9 36                lda #54
0042D5  3  A0 08                ldy #8
0042D7  3  91 68                sta (z80_ix),y
0042D9  3  A9 3D        h01976: lda #61
0042DB  3  C5 rr                cmp varf
0042DD  3  F0 03                beq *+5
0042DF  3  4C F4 42             jmp h02034
0042E2  3  A9 FF                lda #255	; REMOVE
0042E4  3  A0 05                ldy #5
0042E6  3  91 68                sta (z80_ix),y
0042E8  3  A9 3E                lda #62
0042EA  3  85 rr                sta varf
0042EC  3  A9 01                lda #1
0042EE  3  85 rr                sta varg
0042F0  3  A9 0C                lda #12
0042F2  3  85 rr                sta varh
0042F4  3  A9 3C        h02034: lda #60
0042F6  3  C5 rr                cmp varf
0042F8  3  F0 03                beq *+5
0042FA  3  4C 09 43             jmp h02078
0042FD  3  A9 14                lda #20
0042FF  3  A0 09                ldy #9
004301  3  91 68                sta (z80_ix),y
004303  3  A9 10                lda #16
004305  3  A0 08                ldy #8
004307  3  91 68                sta (z80_ix),y
004309  3  A9 3B        h02078: lda #59
00430B  3  C5 rr                cmp varf
00430D  3  F0 03                beq *+5
00430F  3  4C 1E 43             jmp h02122
004312  3  A9 3C                lda #60
004314  3  A0 09                ldy #9
004316  3  91 68                sta (z80_ix),y
004318  3  A9 88                lda #136
00431A  3  A0 08                ldy #8
00431C  3  91 68                sta (z80_ix),y
00431E  3  A9 3A        h02122: lda #58
004320  3  C5 rr                cmp varf
004322  3  F0 03                beq *+5
004324  3  4C 2D 43             jmp h02152
004327  3  A9 10                lda #16
004329  3  A0 08                ldy #8
00432B  3  91 68                sta (z80_ix),y
00432D  3  A9 39        h02152: lda #57
00432F  3  C5 rr                cmp varf
004331  3  F0 03                beq *+5
004333  3  4C 42 43             jmp h02196
004336  3  A9 3C                lda #60
004338  3  A0 09                ldy #9
00433A  3  91 68                sta (z80_ix),y
00433C  3  A9 5C                lda #92
00433E  3  A0 08                ldy #8
004340  3  91 68                sta (z80_ix),y
004342  3  A9 38        h02196: lda #56
004344  3  C5 rr                cmp varf
004346  3  F0 03                beq *+5
004348  3  4C 51 43             jmp h02227
00434B  3  A9 10                lda #16
00434D  3  A0 08                ldy #8
00434F  3  91 68                sta (z80_ix),y
004351  3  A9 36        h02227: lda #54
004353  3  C5 rr                cmp varf
004355  3  F0 03                beq *+5
004357  3  4C 6C 43             jmp h02284
00435A  3  A9 FF                lda #255	; REMOVE
00435C  3  A0 05                ldy #5
00435E  3  91 68                sta (z80_ix),y
004360  3  A9 01                lda #1
004362  3  85 rr                sta varg
004364  3  A9 37                lda #55
004366  3  85 rr                sta varf
004368  3  A9 0B                lda #11
00436A  3  85 rr                sta varh
00436C  3  A9 35        h02284: lda #53
00436E  3  C5 rr                cmp varf
004370  3  F0 03                beq *+5
004372  3  4C 81 43             jmp h02328
004375  3  A9 14                lda #20
004377  3  A0 09                ldy #9
004379  3  91 68                sta (z80_ix),y
00437B  3  A9 10                lda #16
00437D  3  A0 08                ldy #8
00437F  3  91 68                sta (z80_ix),y
004381  3  A9 34        h02328: lda #52
004383  3  C5 rr                cmp varf
004385  3  F0 03                beq *+5
004387  3  4C 96 43             jmp h02373
00438A  3  A9 64                lda #100
00438C  3  A0 09                ldy #9
00438E  3  91 68                sta (z80_ix),y
004390  3  A9 88                lda #136
004392  3  A0 08                ldy #8
004394  3  91 68                sta (z80_ix),y
004396  3  A9 33        h02373: lda #51
004398  3  C5 rr                cmp varf
00439A  3  F0 03                beq *+5
00439C  3  4C A5 43             jmp h02403
00439F  3  A9 10                lda #16
0043A1  3  A0 08                ldy #8
0043A3  3  91 68                sta (z80_ix),y
0043A5  3  A9 32        h02403: lda #50
0043A7  3  C5 rr                cmp varf
0043A9  3  F0 03                beq *+5
0043AB  3  4C BA 43             jmp h02447
0043AE  3  A9 3C                lda #60
0043B0  3  A0 09                ldy #9
0043B2  3  91 68                sta (z80_ix),y
0043B4  3  A9 5C                lda #92
0043B6  3  A0 08                ldy #8
0043B8  3  91 68                sta (z80_ix),y
0043BA  3  A9 31        h02447: lda #49
0043BC  3  C5 rr                cmp varf
0043BE  3  F0 03                beq *+5
0043C0  3  4C CF 43             jmp h02492
0043C3  3  A9 DC                lda #220
0043C5  3  A0 09                ldy #9
0043C7  3  91 68                sta (z80_ix),y
0043C9  3  A9 10                lda #16
0043CB  3  A0 08                ldy #8
0043CD  3  91 68                sta (z80_ix),y
0043CF  3  60           h02492: rts
0043D0  3               evnt08:
0043D0  3  A9 00                lda #0
0043D2  3  C5 rr                cmp varc
0043D4  3  F0 03                beq *+5
0043D6  3  4C DE 43             jmp i00030
0043D9  3  A9 00                lda #0		; ANIMATE
0043DB  3  20 A8 34             jsr animsp
0043DE  3  A9 00        i00030: lda #0 	; COLLISION
0043E0  3  85 63                sta z80_b
0043E2  3  20 F3 34             jsr sktyp
0043E5  3  B0 03                bcs :+
0043E7  3  4C F6 43             jmp i00081
0043EA  3               :
0043EA  3  A9 04                lda #4	; EXPLODE
0043EC  3  20 D8 24             jsr explod
0043EF  3  A5 rr                lda varf
0043F1  3  18                   clc
0043F2  3  69 01                adc #1
0043F4  3  85 rr                sta varf
0043F6  3  A9 30        i00081: lda #48
0043F8  3  C5 rr                cmp varf
0043FA  3  F0 03                beq *+5
0043FC  3  4C 11 44             jmp i00138
0043FF  3  A9 FF                lda #255	; REMOVE
004401  3  A0 05                ldy #5
004403  3  91 68                sta (z80_ix),y
004405  3  A9 31                lda #49
004407  3  85 rr                sta varf
004409  3  A9 01                lda #1
00440B  3  85 rr                sta varg
00440D  3  A9 0A                lda #10
00440F  3  85 rr                sta varh
004411  3  A9 2F        i00138: lda #47
004413  3  C5 rr                cmp varf
004415  3  F0 03                beq *+5
004417  3  4C 26 44             jmp i00183
00441A  3  A9 DC                lda #220
00441C  3  A0 09                ldy #9
00441E  3  91 68                sta (z80_ix),y
004420  3  A9 5C                lda #92
004422  3  A0 08                ldy #8
004424  3  91 68                sta (z80_ix),y
004426  3  A9 2E        i00183: lda #46
004428  3  C5 rr                cmp varf
00442A  3  F0 03                beq *+5
00442C  3  4C 3B 44             jmp i00227
00442F  3  A9 3C                lda #60
004431  3  A0 09                ldy #9
004433  3  91 68                sta (z80_ix),y
004435  3  A9 10                lda #16
004437  3  A0 08                ldy #8
004439  3  91 68                sta (z80_ix),y
00443B  3  A9 2D        i00227: lda #45
00443D  3  C5 rr                cmp varf
00443F  3  F0 03                beq *+5
004441  3  4C 50 44             jmp i00271
004444  3  A9 DC                lda #220
004446  3  A0 09                ldy #9
004448  3  91 68                sta (z80_ix),y
00444A  3  A9 36                lda #54
00444C  3  A0 08                ldy #8
00444E  3  91 68                sta (z80_ix),y
004450  3  A9 2C        i00271: lda #44
004452  3  C5 rr                cmp varf
004454  3  F0 03                beq *+5
004456  3  4C 65 44             jmp i00315
004459  3  A9 14                lda #20
00445B  3  A0 09                ldy #9
00445D  3  91 68                sta (z80_ix),y
00445F  3  A9 10                lda #16
004461  3  A0 08                ldy #8
004463  3  91 68                sta (z80_ix),y
004465  3  A9 2A        i00315: lda #42
004467  3  C5 rr                cmp varf
004469  3  F0 03                beq *+5
00446B  3  4C 80 44             jmp i00372
00446E  3  A9 FF                lda #255	; REMOVE
004470  3  A0 05                ldy #5
004472  3  91 68                sta (z80_ix),y
004474  3  A9 2B                lda #43
004476  3  85 rr                sta varf
004478  3  A9 01                lda #1
00447A  3  85 rr                sta varg
00447C  3  A9 09                lda #9
00447E  3  85 rr                sta varh
004480  3  A9 29        i00372: lda #41
004482  3  C5 rr                cmp varf
004484  3  F0 03                beq *+5
004486  3  4C 95 44             jmp i00416
004489  3  A9 DC                lda #220
00448B  3  A0 09                ldy #9
00448D  3  91 68                sta (z80_ix),y
00448F  3  A9 5C                lda #92
004491  3  A0 08                ldy #8
004493  3  91 68                sta (z80_ix),y
004495  3  A9 28        i00416: lda #40
004497  3  C5 rr                cmp varf
004499  3  F0 03                beq *+5
00449B  3  4C AA 44             jmp i00461
00449E  3  A9 64                lda #100
0044A0  3  A0 09                ldy #9
0044A2  3  91 68                sta (z80_ix),y
0044A4  3  A9 88                lda #136
0044A6  3  A0 08                ldy #8
0044A8  3  91 68                sta (z80_ix),y
0044AA  3  A9 27        i00461: lda #39
0044AC  3  C5 rr                cmp varf
0044AE  3  F0 03                beq *+5
0044B0  3  4C BF 44             jmp i00505
0044B3  3  A9 8C                lda #140
0044B5  3  A0 09                ldy #9
0044B7  3  91 68                sta (z80_ix),y
0044B9  3  A9 10                lda #16
0044BB  3  A0 08                ldy #8
0044BD  3  91 68                sta (z80_ix),y
0044BF  3  A9 26        i00505: lda #38
0044C1  3  C5 rr                cmp varf
0044C3  3  F0 03                beq *+5
0044C5  3  4C CE 44             jmp i00536
0044C8  3  A9 14                lda #20
0044CA  3  A0 09                ldy #9
0044CC  3  91 68                sta (z80_ix),y
0044CE  3  A9 24        i00536: lda #36
0044D0  3  C5 rr                cmp varf
0044D2  3  F0 03                beq *+5
0044D4  3  4C E9 44             jmp i00593
0044D7  3  A9 FF                lda #255	; REMOVE
0044D9  3  A0 05                ldy #5
0044DB  3  91 68                sta (z80_ix),y
0044DD  3  A9 25                lda #37
0044DF  3  85 rr                sta varf
0044E1  3  A9 01                lda #1
0044E3  3  85 rr                sta varg
0044E5  3  A9 08                lda #8
0044E7  3  85 rr                sta varh
0044E9  3  A9 23        i00593: lda #35
0044EB  3  C5 rr                cmp varf
0044ED  3  F0 03                beq *+5
0044EF  3  4C FE 44             jmp i00637
0044F2  3  A9 DC                lda #220
0044F4  3  A0 09                ldy #9
0044F6  3  91 68                sta (z80_ix),y
0044F8  3  A9 10                lda #16
0044FA  3  A0 08                ldy #8
0044FC  3  91 68                sta (z80_ix),y
0044FE  3  A9 22        i00637: lda #34
004500  3  C5 rr                cmp varf
004502  3  F0 03                beq *+5
004504  3  4C 0D 45             jmp i00668
004507  3  A9 3C                lda #60
004509  3  A0 09                ldy #9
00450B  3  91 68                sta (z80_ix),y
00450D  3  A9 21        i00668: lda #33
00450F  3  C5 rr                cmp varf
004511  3  F0 03                beq *+5
004513  3  4C 22 45             jmp i00712
004516  3  A9 8C                lda #140
004518  3  A0 09                ldy #9
00451A  3  91 68                sta (z80_ix),y
00451C  3  A9 88                lda #136
00451E  3  A0 08                ldy #8
004520  3  91 68                sta (z80_ix),y
004522  3  A9 20        i00712: lda #32
004524  3  C5 rr                cmp varf
004526  3  F0 03                beq *+5
004528  3  4C 37 45             jmp i00756
00452B  3  A9 64                lda #100
00452D  3  A0 09                ldy #9
00452F  3  91 68                sta (z80_ix),y
004531  3  A9 5C                lda #92
004533  3  A0 08                ldy #8
004535  3  91 68                sta (z80_ix),y
004537  3  A9 1E        i00756: lda #30
004539  3  C5 rr                cmp varf
00453B  3  F0 03                beq *+5
00453D  3  4C 52 45             jmp i00814
004540  3  A9 FF                lda #255	; REMOVE
004542  3  A0 05                ldy #5
004544  3  91 68                sta (z80_ix),y
004546  3  A9 1F                lda #31
004548  3  85 rr                sta varf
00454A  3  A9 01                lda #1
00454C  3  85 rr                sta varg
00454E  3  A9 07                lda #7
004550  3  85 rr                sta varh
004552  3  A9 1D        i00814: lda #29
004554  3  C5 rr                cmp varf
004556  3  F0 03                beq *+5
004558  3  4C 67 45             jmp i00858
00455B  3  A9 DC                lda #220
00455D  3  A0 09                ldy #9
00455F  3  91 68                sta (z80_ix),y
004561  3  A9 10                lda #16
004563  3  A0 08                ldy #8
004565  3  91 68                sta (z80_ix),y
004567  3  A9 1C        i00858: lda #28
004569  3  C5 rr                cmp varf
00456B  3  F0 03                beq *+5
00456D  3  4C 7C 45             jmp i00902
004570  3  A9 3C                lda #60
004572  3  A0 09                ldy #9
004574  3  91 68                sta (z80_ix),y
004576  3  A9 36                lda #54
004578  3  A0 08                ldy #8
00457A  3  91 68                sta (z80_ix),y
00457C  3  A9 1B        i00902: lda #27
00457E  3  C5 rr                cmp varf
004580  3  F0 03                beq *+5
004582  3  4C 91 45             jmp i00946
004585  3  A9 DC                lda #220
004587  3  A0 09                ldy #9
004589  3  91 68                sta (z80_ix),y
00458B  3  A9 88                lda #136
00458D  3  A0 08                ldy #8
00458F  3  91 68                sta (z80_ix),y
004591  3  A9 1A        i00946: lda #26
004593  3  C5 rr                cmp varf
004595  3  F0 03                beq *+5
004597  3  4C A6 45             jmp i00990
00459A  3  A9 14                lda #20
00459C  3  A0 09                ldy #9
00459E  3  91 68                sta (z80_ix),y
0045A0  3  A9 10                lda #16
0045A2  3  A0 08                ldy #8
0045A4  3  91 68                sta (z80_ix),y
0045A6  3  A9 18        i00990: lda #24
0045A8  3  C5 rr                cmp varf
0045AA  3  F0 03                beq *+5
0045AC  3  4C C1 45             jmp i01048
0045AF  3  A9 FF                lda #255	; REMOVE
0045B1  3  A0 05                ldy #5
0045B3  3  91 68                sta (z80_ix),y
0045B5  3  A9 19                lda #25
0045B7  3  85 rr                sta varf
0045B9  3  A9 01                lda #1
0045BB  3  85 rr                sta varg
0045BD  3  A9 06                lda #6
0045BF  3  85 rr                sta varh
0045C1  3  A9 17        i01048: lda #23
0045C3  3  C5 rr                cmp varf
0045C5  3  F0 03                beq *+5
0045C7  3  4C D6 45             jmp i01092
0045CA  3  A9 14                lda #20
0045CC  3  A0 09                ldy #9
0045CE  3  91 68                sta (z80_ix),y
0045D0  3  A9 10                lda #16
0045D2  3  A0 08                ldy #8
0045D4  3  91 68                sta (z80_ix),y
0045D6  3  A9 16        i01092: lda #22
0045D8  3  C5 rr                cmp varf
0045DA  3  F0 03                beq *+5
0045DC  3  4C EB 45             jmp i01136
0045DF  3  A9 DC                lda #220
0045E1  3  A0 09                ldy #9
0045E3  3  91 68                sta (z80_ix),y
0045E5  3  A9 5C                lda #92
0045E7  3  A0 08                ldy #8
0045E9  3  91 68                sta (z80_ix),y
0045EB  3  A9 15        i01136: lda #21
0045ED  3  C5 rr                cmp varf
0045EF  3  F0 03                beq *+5
0045F1  3  4C 00 46             jmp i01180
0045F4  3  A9 14                lda #20
0045F6  3  A0 09                ldy #9
0045F8  3  91 68                sta (z80_ix),y
0045FA  3  A9 88                lda #136
0045FC  3  A0 08                ldy #8
0045FE  3  91 68                sta (z80_ix),y
004600  3  A9 13        i01180: lda #19
004602  3  C5 rr                cmp varf
004604  3  F0 03                beq *+5
004606  3  4C 1B 46             jmp i01237
004609  3  A9 FF                lda #255	; REMOVE
00460B  3  A0 05                ldy #5
00460D  3  91 68                sta (z80_ix),y
00460F  3  A9 14                lda #20
004611  3  85 rr                sta varf
004613  3  A9 01                lda #1
004615  3  85 rr                sta varg
004617  3  A9 05                lda #5
004619  3  85 rr                sta varh
00461B  3  A9 12        i01237: lda #18
00461D  3  C5 rr                cmp varf
00461F  3  F0 03                beq *+5
004621  3  4C 30 46             jmp i01281
004624  3  A9 3C                lda #60
004626  3  A0 09                ldy #9
004628  3  91 68                sta (z80_ix),y
00462A  3  A9 5C                lda #92
00462C  3  A0 08                ldy #8
00462E  3  91 68                sta (z80_ix),y
004630  3  A9 11        i01281: lda #17
004632  3  C5 rr                cmp varf
004634  3  F0 03                beq *+5
004636  3  4C 45 46             jmp i01326
004639  3  A9 DC                lda #220
00463B  3  A0 09                ldy #9
00463D  3  91 68                sta (z80_ix),y
00463F  3  A9 10                lda #16
004641  3  A0 08                ldy #8
004643  3  91 68                sta (z80_ix),y
004645  3  A9 01        i01326: lda #1
004647  3  C5 rr                cmp varf
004649  3  F0 03                beq *+5
00464B  3  4C 5A 46             jmp i01369
00464E  3  A9 3C                lda #60
004650  3  A0 09                ldy #9
004652  3  91 68                sta (z80_ix),y
004654  3  A9 36                lda #54
004656  3  A0 08                ldy #8
004658  3  91 68                sta (z80_ix),y
00465A  3  A9 02        i01369: lda #2
00465C  3  C5 rr                cmp varf
00465E  3  F0 03                beq *+5
004660  3  4C 69 46             jmp i01400
004663  3  A9 DC                lda #220
004665  3  A0 09                ldy #9
004667  3  91 68                sta (z80_ix),y
004669  3  A9 03        i01400: lda #3
00466B  3  C5 rr                cmp varf
00466D  3  F0 03                beq *+5
00466F  3  4C 7E 46             jmp i01444
004672  3  A9 14                lda #20
004674  3  A0 09                ldy #9
004676  3  91 68                sta (z80_ix),y
004678  3  A9 10                lda #16
00467A  3  A0 08                ldy #8
00467C  3  91 68                sta (z80_ix),y
00467E  3  A9 04        i01444: lda #4
004680  3  C5 rr                cmp varf
004682  3  F0 03                beq *+5
004684  3  4C 99 46             jmp i01500
004687  3  A9 FF                lda #255	; REMOVE
004689  3  A0 05                ldy #5
00468B  3  91 68                sta (z80_ix),y
00468D  3  A9 01                lda #1
00468F  3  85 rr                sta varg
004691  3  A9 05                lda #5
004693  3  85 rr                sta varf
004695  3  A9 02                lda #2
004697  3  85 rr                sta varh
004699  3  A9 06        i01500: lda #6
00469B  3  C5 rr                cmp varf
00469D  3  F0 03                beq *+5
00469F  3  4C AE 46             jmp i01545
0046A2  3  A9 64                lda #100
0046A4  3  A0 09                ldy #9
0046A6  3  91 68                sta (z80_ix),y
0046A8  3  A9 88                lda #136
0046AA  3  A0 08                ldy #8
0046AC  3  91 68                sta (z80_ix),y
0046AE  3  A9 07        i01545: lda #7
0046B0  3  C5 rr                cmp varf
0046B2  3  F0 03                beq *+5
0046B4  3  4C BD 46             jmp i01575
0046B7  3  A9 DC                lda #220
0046B9  3  A0 09                ldy #9
0046BB  3  91 68                sta (z80_ix),y
0046BD  3  A9 08        i01575: lda #8
0046BF  3  C5 rr                cmp varf
0046C1  3  F0 03                beq *+5
0046C3  3  4C CC 46             jmp i01605
0046C6  3  A9 14                lda #20
0046C8  3  A0 09                ldy #9
0046CA  3  91 68                sta (z80_ix),y
0046CC  3  A9 09        i01605: lda #9
0046CE  3  C5 rr                cmp varf
0046D0  3  F0 03                beq *+5
0046D2  3  4C E7 46             jmp i01662
0046D5  3  A9 FF                lda #255	; REMOVE
0046D7  3  A0 05                ldy #5
0046D9  3  91 68                sta (z80_ix),y
0046DB  3  A9 0A                lda #10
0046DD  3  85 rr                sta varf
0046DF  3  A9 01                lda #1
0046E1  3  85 rr                sta varg
0046E3  3  A9 03                lda #3
0046E5  3  85 rr                sta varh
0046E7  3  A9 0B        i01662: lda #11
0046E9  3  C5 rr                cmp varf
0046EB  3  F0 03                beq *+5
0046ED  3  4C FC 46             jmp i01706
0046F0  3  A9 14                lda #20
0046F2  3  A0 09                ldy #9
0046F4  3  91 68                sta (z80_ix),y
0046F6  3  A9 36                lda #54
0046F8  3  A0 08                ldy #8
0046FA  3  91 68                sta (z80_ix),y
0046FC  3  A9 0C        i01706: lda #12
0046FE  3  C5 rr                cmp varf
004700  3  F0 03                beq *+5
004702  3  4C 11 47             jmp i01751
004705  3  A9 B4                lda #180
004707  3  A0 09                ldy #9
004709  3  91 68                sta (z80_ix),y
00470B  3  A9 5C                lda #92
00470D  3  A0 08                ldy #8
00470F  3  91 68                sta (z80_ix),y
004711  3  A9 0D        i01751: lda #13
004713  3  C5 rr                cmp varf
004715  3  F0 03                beq *+5
004717  3  4C 26 47             jmp i01795
00471A  3  A9 14                lda #20
00471C  3  A0 09                ldy #9
00471E  3  91 68                sta (z80_ix),y
004720  3  A9 88                lda #136
004722  3  A0 08                ldy #8
004724  3  91 68                sta (z80_ix),y
004726  3  A9 0E        i01795: lda #14
004728  3  C5 rr                cmp varf
00472A  3  F0 03                beq *+5
00472C  3  4C 41 47             jmp i01852
00472F  3  A9 FF                lda #255	; REMOVE
004731  3  A0 05                ldy #5
004733  3  91 68                sta (z80_ix),y
004735  3  A9 0F                lda #15
004737  3  85 rr                sta varf
004739  3  A9 01                lda #1
00473B  3  85 rr                sta varg
00473D  3  A9 04                lda #4
00473F  3  85 rr                sta varh
004741  3  A9 10        i01852: lda #16
004743  3  C5 rr                cmp varf
004745  3  F0 03                beq *+5
004747  3  4C 50 47             jmp i01883
00474A  3  A9 14                lda #20
00474C  3  A0 09                ldy #9
00474E  3  91 68                sta (z80_ix),y
004750  3  60           i01883: rts
004751  3               evnt09:
004751  3  A9 00                lda #0
004753  3  A0 05                ldy #5
004755  3  D1 68                cmp (z80_ix),y
004757  3  F0 03                beq *+5
004759  3  4C 62 47             jmp j00037
00475C  3  A9 14                lda #20
00475E  3  A0 09                ldy #9
004760  3  91 68                sta (z80_ix),y
004762  3  A9 01        j00037: lda #1
004764  3  A0 05                ldy #5
004766  3  D1 68                cmp (z80_ix),y
004768  3  F0 03                beq *+5
00476A  3  4C 7C 47             jmp j00094
00476D  3  A9 04                lda #4
00476F  3  85 62                sta z80_c
004771  3  A0 08                ldy #8
004773  3  B1 68                lda (z80_ix),y
004775  3  18                   clc
004776  3  65 62                adc z80_c
004778  3  A0 08                ldy #8
00477A  3  91 68                sta (z80_ix),y
00477C  3  A9 02        j00094: lda #2
00477E  3  A0 05                ldy #5
004780  3  D1 68                cmp (z80_ix),y
004782  3  F0 03                beq *+5
004784  3  4C 96 47             jmp j00151
004787  3  A9 04                lda #4
004789  3  85 62                sta z80_c
00478B  3  A0 08                ldy #8
00478D  3  B1 68                lda (z80_ix),y
00478F  3  18                   clc
004790  3  65 62                adc z80_c
004792  3  A0 08                ldy #8
004794  3  91 68                sta (z80_ix),y
004796  3  A9 03        j00151: lda #3
004798  3  A0 05                ldy #5
00479A  3  D1 68                cmp (z80_ix),y
00479C  3  F0 03                beq *+5
00479E  3  4C B0 47             jmp j00207
0047A1  3  A9 02                lda #2
0047A3  3  85 62                sta z80_c
0047A5  3  A0 08                ldy #8
0047A7  3  B1 68                lda (z80_ix),y
0047A9  3  18                   clc
0047AA  3  65 62                adc z80_c
0047AC  3  A0 08                ldy #8
0047AE  3  91 68                sta (z80_ix),y
0047B0  3  A9 04        j00207: lda #4
0047B2  3  A0 05                ldy #5
0047B4  3  D1 68                cmp (z80_ix),y
0047B6  3  F0 03                beq *+5
0047B8  3  4C CA 47             jmp j00264
0047BB  3  A9 04                lda #4
0047BD  3  85 62                sta z80_c
0047BF  3  A0 08                ldy #8
0047C1  3  B1 68                lda (z80_ix),y
0047C3  3  18                   clc
0047C4  3  65 62                adc z80_c
0047C6  3  A0 08                ldy #8
0047C8  3  91 68                sta (z80_ix),y
0047CA  3  60           j00264: rts
0047CB  3               evnt10:
0047CB  3  A9 00                lda #0
0047CD  3  85 rr                sta chary
0047CF  3  A9 07                lda #7
0047D1  3  85 rr                sta charx
0047D3  3  A5 rr                lda varh	; DISPLAY
0047D5  3  20 83 35             jsr disply
0047D8  3  A9 00                lda #0
0047DA  3  85 rr                sta chary
0047DC  3  A9 1E                lda #30
0047DE  3  85 rr                sta charx
0047E0  3  A5 rr                lda numlif	; DISPLAY
0047E2  3  20 83 35             jsr disply
0047E5  3  60                   rts
0047E6  3               evnt11:
0047E6  3  A9 02                lda #2
0047E8  3  C5 rr                cmp varc
0047EA  3  F0 03                beq *+5
0047EC  3  4C F6 47             jmp l00031
0047EF  3  A9 00                lda #0
0047F1  3  85 rr                sta varc
0047F3  3  4C FD 47             jmp l00046
0047F6  3  A5 rr        l00031: lda varc
0047F8  3  18                   clc
0047F9  3  69 01                adc #1
0047FB  3  85 rr                sta varc
0047FD  3  A9 00        l00046: lda #0
0047FF  3  C5 rr                cmp varb
004801  3  F0 03                beq *+5
004803  3  4C 09 48             jmp l00068
004806  3  4C 10 48             jmp l00083
004809  3  A5 rr        l00068: lda varb
00480B  3  38                   sec
00480C  3  E9 01                sbc #1
00480E  3  85 rr                sta varb
004810  3  A9 14        l00083: lda #20
004812  3  C5 rr                cmp scno
004814  3  F0 03                beq *+5
004816  3  4C 64 48             jmp l00262
004819  3  A9 0A                lda #10
00481B  3  85 rr                sta chary
00481D  3  A9 05                lda #5
00481F  3  85 rr                sta charx
004821  3  A9 0B                lda #11  	; MESSAGE
004823  3  20 4D 30             jsr dmsg
004826  3  A9 0C                lda #12
004828  3  85 rr                sta chary
00482A  3  A9 0A                lda #10
00482C  3  85 rr                sta charx
00482E  3  A9 0C                lda #12  	; MESSAGE
004830  3  20 4D 30             jsr dmsg
004833  3  A9 03                lda #3
004835  3  85 65                sta z80_d	; GETRANDOM
004837  3  20 FF 2F             jsr random
00483A  3  85 67                sta z80_h
00483C  3  20 8C 27             jsr imul
00483F  3  A5 67                lda z80_h
004841  3  85 rr                sta varrnd
004843  3  A5 rr                lda varrnd
004845  3  18                   clc
004846  3  69 01                adc #1
004848  3  85 rr                sta varrnd
00484A  3  A9 07                lda #7
00484C  3  85 rr                sta chary
00484E  3  A9 09                lda #9
004850  3  85 rr                sta charx
004852  3  A9 0A                lda #10  	; MESSAGE
004854  3  20 4D 30             jsr dmsg
004857  3  A9 00                lda #0
004859  3  C5 rr                cmp varb
00485B  3  F0 03                beq *+5
00485D  3  4C 64 48             jmp l00262
004860  3  A9 01                lda #1		; ENDGAME
004862  3  85 rr                sta gamwon
004864  3  60           l00262: rts
004865  3               evnt12:
004865  3  20 F7 20             jsr cls		; CLS
004868  3  A9 03                lda #3
00486A  3  85 rr                sta chary
00486C  3  A9 0B                lda #11
00486E  3  85 rr                sta charx
004870  3  A9 01                lda #1  	; MESSAGE
004872  3  20 4D 30             jsr dmsg
004875  3  A9 05                lda #5
004877  3  85 rr                sta chary
004879  3  A9 08                lda #8
00487B  3  85 rr                sta charx
00487D  3  A9 05                lda #5  	; MESSAGE
00487F  3  20 4D 30             jsr dmsg
004882  3  A9 08                lda #8
004884  3  85 rr                sta chary
004886  3  A9 04                lda #4
004888  3  85 rr                sta charx
00488A  3  A9 06                lda #6  	; MESSAGE
00488C  3  20 4D 30             jsr dmsg
00488F  3  A9 09                lda #9
004891  3  85 rr                sta chary
004893  3  A9 04                lda #4
004895  3  85 rr                sta charx
004897  3  A9 07                lda #7  	; MESSAGE
004899  3  20 4D 30             jsr dmsg
00489C  3  A9 0A                lda #10
00489E  3  85 rr                sta chary
0048A0  3  A9 04                lda #4
0048A2  3  85 rr                sta charx
0048A4  3  A9 08                lda #8  	; MESSAGE
0048A6  3  20 4D 30             jsr dmsg
0048A9  3  A9 13                lda #19
0048AB  3  85 rr                sta chary
0048AD  3  A9 05                lda #5
0048AF  3  85 rr                sta charx
0048B1  3  A9 09                lda #9  	; MESSAGE
0048B3  3  20 4D 30             jsr dmsg
0048B6  3               
0048B6  3               rtcon:			; CONTROLMENU
0048B6  3  20 84 20             jsr vsync
0048B9  3  A9 00                lda #0
0048BB  3  85 rr                sta contrl
0048BD  3  AD FA 88             lda keys+7
0048C0  3  20 7A 89             jsr ktest
0048C3  3  90 18                bcc rtcon1
0048C5  3  A9 01                lda #1
0048C7  3  85 rr                sta contrl
0048C9  3  AD FB 88             lda keys+8
0048CC  3  20 7A 89             jsr ktest
0048CF  3  90 0C                bcc rtcon1
0048D1  3  A9 02                lda #2
0048D3  3  85 rr                sta contrl
0048D5  3  AD FC 88             lda keys+9
0048D8  3  20 7A 89             jsr ktest
0048DB  3  B0 D9                bcs rtcon
0048DD  3                       rtcon1:
0048DD  3  60                   rts
0048DE  3               evnt13:
0048DE  3  A9 03                lda #3
0048E0  3  85 rr                sta numlif
0048E2  3  20 F7 20             jsr cls		; CLS
0048E5  3  A9 18                lda #24
0048E7  3  85 rr                sta vara
0048E9  3  A9 00                lda #0
0048EB  3  85 rr                sta varb
0048ED  3  A9 00                lda #0
0048EF  3  85 rr                sta varc
0048F1  3  A9 00                lda #0
0048F3  3  85 rr                sta vard
0048F5  3  A9 00                lda #0
0048F7  3  85 rr                sta vare
0048F9  3  A9 00                lda #0
0048FB  3  85 rr                sta varf
0048FD  3  A9 00                lda #0
0048FF  3  85 rr                sta varg
004901  3  A9 01                lda #1
004903  3  85 rr                sta varh
004905  3  A9 00                lda #0
004907  3  85 rr                sta vari
004909  3  A9 00                lda #0
00490B  3  85 rr                sta varj
00490D  3  A9 00                lda #0
00490F  3  85 rr                sta vark
004911  3  A9 00                lda #0
004913  3  85 rr                sta varl
004915  3  A9 00                lda #0
004917  3  85 rr                sta varm
004919  3  60                   rts
00491A  3               evnt14:
00491A  3  20 F7 20             jsr cls		; CLS
00491D  3  A9 00                lda #0
00491F  3  85 rr                sta vara
004921  3  A9 00                lda #0
004923  3  85 rr                sta varg
004925  3  A9 00                lda #0
004927  3  85 rr                sta vard
004929  3  A9 00                lda #0
00492B  3  85 rr                sta varj
00492D  3  A9 00                lda #0
00492F  3  85 rr                sta vark
004931  3  A9 72                lda #114
004933  3  C5 rr                cmp varf
004935  3  F0 03                beq *+5
004937  3  4C 3D 49             jmp o00069
00493A  3  4C 64 49             jmp o00152
00493D  3  A9 00        o00069: lda #0
00493F  3  85 rr                sta chary
004941  3  A9 01                lda #1
004943  3  85 rr                sta charx
004945  3  A9 03                lda #3  	; MESSAGE
004947  3  20 4D 30             jsr dmsg
00494A  3  A9 00                lda #0
00494C  3  85 rr                sta chary
00494E  3  A9 0C                lda #12
004950  3  85 rr                sta charx
004952  3  A9 01                lda #1  	; MESSAGE
004954  3  20 4D 30             jsr dmsg
004957  3  A9 00                lda #0
004959  3  85 rr                sta chary
00495B  3  A9 18                lda #24
00495D  3  85 rr                sta charx
00495F  3  A9 04                lda #4  	; MESSAGE
004961  3  20 4D 30             jsr dmsg
004964  3  60           o00152: rts
004965  3               evnt15:
004965  3  A9 00                lda #0
004967  3  A0 05                ldy #5
004969  3  D1 68                cmp (z80_ix),y
00496B  3  F0 03                beq *+5
00496D  3  4C 74 49             jmp p00034
004970  3  A9 01                lda #1 		; KILL
004972  3  85 rr                sta deadf
004974  3  60           p00034: rts
004975  3               evnt16:
004975  3  A5 rr                lda numlif
004977  3  38                   sec
004978  3  E9 01                sbc #1
00497A  3  85 rr                sta numlif
00497C  3  A9 FF                lda #255	; REMOVE
00497E  3  A0 05                ldy #5
004980  3  91 68                sta (z80_ix),y
004982  3  A9 00                lda #0
004984  3  85 rr                sta varg
004986  3  20 F7 20             jsr cls		; CLS
004989  3  60                   rts
00498A  3               evnt17:
00498A  3  A9 0A                lda #10
00498C  3  85 rr                sta chary
00498E  3  A9 0C                lda #12
004990  3  85 rr                sta charx
004992  3  20 F7 20             jsr cls		; CLS
004995  3  A9 00                lda #0  	; MESSAGE
004997  3  20 4D 30             jsr dmsg
00499A  3  A9 0C                lda #12
00499C  3  85 rr                sta chary
00499E  3  A9 04                lda #4
0049A0  3  85 rr                sta charx
0049A2  3  A9 0D                lda #13  	; MESSAGE
0049A4  3  20 4D 30             jsr dmsg
0049A7  3  20 68 89             jsr prskey	; WAITKEY
0049AA  3  60                   rts
0049AB  3               evnt18:
0049AB  3  A9 32                lda #50 	; DELAY
0049AD  3  20 2F 20             jsr delay
0049B0  3  60                   rts
0049B1  3               evnt19:
0049B1  3  60                   rts
0049B2  3               evnt20:
0049B2  3  60                   rts
0049B3  3  60           ptcusr: rts
0049B4  3               msgdat:
0049B4  3  47 41 4D 45          .byte "GAME OVE",210
0049B8  3  20 4F 56 45  
0049BC  3  D2           
0049BD  3  42 41 4C 44          .byte "BALDY Z",216
0049C1  3  59 20 5A D8  
0049C5  3  2D 4E 45 58          .byte "-NEXT LEVEL",173
0049C9  3  54 20 4C 45  
0049CD  3  56 45 4C AD  
0049D1  3  4C 45 56 45          .byte "LEVEL",186
0049D5  3  4C BA        
0049D7  3  4C 49 56 45          .byte "LIVES",186
0049DB  3  53 BA        
0049DD  3  53 45 4C 45          .byte "SELECT CONTRO",204
0049E1  3  43 54 20 43  
0049E5  3  4F 4E 54 52  
0049EB  3  31 2E 2E 2E          .byte "1.............KEYBOAR",196
0049EF  3  2E 2E 2E 2E  
0049F3  3  2E 2E 2E 2E  
004A01  3  32 2E 2E 2E          .byte "2....KEMPSTON JOYSTIC",203
004A05  3  2E 4B 45 4D  
004A09  3  50 53 54 4F  
004A17  3  33 2E 2E 2E          .byte "3....SINCLAIR JOYSTIC",203
004A1B  3  2E 53 49 4E  
004A1F  3  43 4C 41 49  
004A2D  3  3B 50 41 55          .byte ";PAUL JENKINSON 201",181
004A31  3  4C 20 4A 45  
004A35  3  4E 4B 49 4E  
004A41  3  43 4F 4E 47          .byte "CONGRATULATION",211
004A45  3  52 41 54 55  
004A49  3  4C 41 54 49  
004A50  3  42 41 4C 44          .byte "BALDY HAS COLLECTED AL",204
004A54  3  59 20 48 41  
004A58  3  53 20 43 4F  
004A67  3  4F 46 20 48          .byte "OF HIS GAME",211
004A6B  3  49 53 20 47  
004A6F  3  41 4D 45 D3  
004A73  3  42 41 4C 44          .byte "BALDY IS IN NEED OF WINE",161
004A77  3  59 20 49 53  
004A7B  3  20 49 4E 20  
004A8C  3               nummsg:
004A8C  3  0E                   .byte 14
004A8D  3               chgfx:
004A8D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004A91  3  00 00 00 00  
004A95  3  00 AF BF 00          .byte 0,175,191,0,183,181,0,91
004A99  3  B7 B5 00 5B  
004A9D  3  00 FD BD 00          .byte 0,253,189,0,211,219,0,246
004AA1  3  D3 DB 00 F6  
004AA5  3  57 00 17 17          .byte 87,0,23,23,0,0,0,0
004AA9  3  00 00 00 00  
004AAD  3  FA 00 D4 D4          .byte 250,0,212,212,0,0,0,0
004AB1  3  00 00 00 00  
004AB5  3  F7 00 EF EF          .byte 247,0,239,239,0,0,0,0
004AB9  3  00 00 00 00  
004ABD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004AC1  3  00 00 00 00  
004AC5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004AC9  3  00 00 00 00  
004ACD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,170
004AD1  3  00 00 00 AA  
004AD5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,170
004AD9  3  00 00 00 AA  
004ADD  3  00 FF A5 E7          .byte 0,255,165,231,165,231,165,255
004AE1  3  A5 E7 A5 FF  
004AE5  3  00 DF DF B5          .byte 0,223,223,181,191,177,191,181
004AE9  3  BF B1 BF B5  
004AED  3  00 FF FB F5          .byte 0,255,251,245,245,59,223,223
004AF1  3  F5 3B DF DF  
004AF5  3  00 7F 31 1F          .byte 0,127,49,31,0,0,0,0
004AF9  3  00 00 00 00  
004AFD  3  00 FD C3 DF          .byte 0,253,195,223,0,0,0,0
004B01  3  00 00 00 00  
004B05  3  00 DE 8C 88          .byte 0,222,140,136,0,0,0,0
004B09  3  00 00 00 00  
004B0D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004B11  3  00 00 00 00  
004B15  3  00 DF C1 FD          .byte 0,223,193,253,165,228,167,255
004B19  3  A5 E4 A7 FF  
004B1D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004B21  3  00 00 00 00  
004B25  3  00 EF EB 00          .byte 0,239,235,0,253,237,0,191
004B29  3  FD ED 00 BF  
004B2D  3  00 7D BB BC          .byte 0,125,187,188,81,43,21,29
004B31  3  51 2B 15 1D  
004B35  3  00 F6 B5 6F          .byte 0,246,181,111,143,70,216,181
004B39  3  8F 46 D8 B5  
004B3D  3  00 F2 55 2F          .byte 0,242,85,47,15,70,240,184
004B41  3  0F 46 F0 B8  
004B45  3  08 03 02 01          .byte 8,3,2,1,0,0,0,0
004B49  3  00 00 00 00  
004B4D  3  BA 30 00 00          .byte 186,48,0,0,0,0,0,0
004B51  3  00 00 00 00  
004B55  3  F0 60 00 00          .byte 240,96,0,0,0,0,0,0
004B59  3  00 00 00 00  
004B5D  3  00 F7 6F 6D          .byte 0,247,111,109,143,70,216,181
004B61  3  8F 46 D8 B5  
004B65  3  00 DE DA 4C          .byte 0,222,218,76,49,61,24,0
004B69  3  31 3D 18 00  
004B6D  3  00 F7 D7 63          .byte 0,247,215,99,156,239,198,56
004B71  3  9C EF C6 38  
004B75  3  00 DF 5D 8E          .byte 0,223,93,142,112,118,44,0
004B79  3  70 76 2C 00  
004B7D  3  3C 5A 5A 7E          .byte 60,90,90,126,44,0,52,24
004B81  3  2C 00 34 18  
004B85  3  00 00 00 00          .byte 0,0,0,0,0,0,0,170
004B89  3  00 00 00 AA  
004B8D  3  00 D5 7A D5          .byte 0,213,122,213,171,101,188,104
004B91  3  AB 65 BC 68  
004B95  3  00 6A BF 75          .byte 0,106,191,117,174,85,170,5
004B99  3  AE 55 AA 05  
004B9D  3  00 AE 75 AE          .byte 0,174,117,174,117,170,85,160
004BA1  3  75 AA 55 A0  
004BA5  3  0E ED A7 D8          .byte 14,237,167,216,21,10,1,0
004BA9  3  15 0A 01 00  
004BAD  3  71 77 A5 5A          .byte 113,119,165,90,21,170,145,0
004BB1  3  15 AA 91 00  
004BB5  3  06 EA A4 5A          .byte 6,234,164,90,52,168,0,0
004BB9  3  34 A8 00 00  
004BBD  3  00 FF FF 00          .byte 0,255,255,0,118,118,6,22
004BC1  3  76 76 06 16  
004BC5  3  00 FF FF 00          .byte 0,255,255,0,222,222,0,123
004BC9  3  DE DE 00 7B  
004BCD  3  00 FF FF 00          .byte 0,255,255,0,222,222,0,246
004BD1  3  DE DE 00 F6  
004BD5  3  06 00 00 00          .byte 6,0,0,0,0,0,0,0
004BD9  3  00 00 00 00  
004BDD  3  7B 78 78 00          .byte 123,120,120,0,0,0,0,0
004BE1  3  00 00 00 00  
004BE5  3  F6 06 00 00          .byte 246,6,0,0,0,0,0,0
004BE9  3  00 00 00 00  
004BED  3  00 DE DE DE          .byte 0,222,222,222,0,189,189,189
004BF1  3  00 BD BD BD  
004BF5  3  00 F7 F7 F7          .byte 0,247,247,247,0,253,253,253
004BF9  3  00 FD FD FD  
004BFD  3  00 F7 F7 F7          .byte 0,247,247,247,0,221,221,221
004C01  3  00 DD DD DD  
004C05  3  00 6F A5 42          .byte 0,111,165,66,24,53,25,3
004C09  3  18 35 19 03  
004C0D  3  00 6F A5 42          .byte 0,111,165,66,24,53,153,195
004C11  3  18 35 99 C3  
004C15  3  00 6F A5 42          .byte 0,111,165,66,24,52,152,192
004C19  3  18 34 98 C0  
004C1D  3  00 6F B5 FE          .byte 0,111,181,254,54,164,4,32
004C21  3  36 A4 04 20  
004C25  3  00 BD BD 59          .byte 0,189,189,89,32,14,23,11
004C29  3  20 0E 17 0B  
004C2D  3  00 AD EF E7          .byte 0,173,239,231,200,158,54,92
004C31  3  C8 9E 36 5C  
004C35  3  00 D7 DE 8C          .byte 0,215,222,140,32,92,116,120
004C39  3  20 5C 74 78  
004C3D  3  00 FF FF A9          .byte 0,255,255,169,175,169,255,255
004C41  3  AF A9 FF FF  
004C45  3  00 FF D7 83          .byte 0,255,215,131,131,131,215,255
004C49  3  83 83 D7 FF  
004C4D  3  00 FF A5 BF          .byte 0,255,165,191,161,161,191,255
004C51  3  A1 A1 BF FF  
004C55  3  06 D6 D1 2C          .byte 6,214,209,44,0,0,0,0
004C59  3  00 00 00 00  
004C5D  3  D0 D6 26 01          .byte 208,214,38,1,0,0,0,0
004C61  3  00 00 00 00  
004C65  3  DA DA 04 40          .byte 218,218,4,64,0,0,0,0
004C69  3  00 00 00 00  
004C6D  3  00 FF 00 55          .byte 0,255,0,85,74,85,74,85
004C71  3  4A 55 4A 55  
004C75  3  00 FF 00 3D          .byte 0,255,0,61,188,65,170,85
004C79  3  BC 41 AA 55  
004C7D  3  00 FF 00 52          .byte 0,255,0,82,170,82,170,82
004C81  3  AA 52 AA 52  
004C85  3  00 FF 00 00          .byte 0,255,0,0,0,0,0,0
004C89  3  00 00 00 00  
004C8D  3  44 20 44 40          .byte 68,32,68,64,0,0,0,0
004C91  3  00 00 00 00  
004C95  3  28 04 24 00          .byte 40,4,36,0,4,0,0,0
004C99  3  04 00 00 00  
004C9D  3  00 FF 00 6F          .byte 0,255,0,111,111,55,27,13
004CA1  3  6F 37 1B 0D  
004CA5  3  00 FF 00 E8          .byte 0,255,0,232,244,232,244,232
004CA9  3  F4 E8 F4 E8  
004CAD  3  00 FF 00 5E          .byte 0,255,0,94,190,92,188,88
004CB1  3  BE 5C BC 58  
004CB5  3  FF 98 AA A8          .byte 255,152,170,168,170,154,255,0
004CB9  3  AA 9A FF 00  
004CBD  3  FF 88 AB AA          .byte 255,136,171,170,170,168,255,0
004CC1  3  AA A8 FF 00  
004CC5  3  FF 93 B5 93          .byte 255,147,181,147,181,149,255,0
004CC9  3  B5 95 FF 00  
004CCD  3  00 08 00 08          .byte 0,8,0,8,42,8,42,42
004CD1  3  2A 08 2A 2A  
004CD5  3  00 F6 F6 06          .byte 0,246,246,6,174,174,32,0
004CD9  3  AE AE 20 00  
004CDD  3  00 DD DD 00          .byte 0,221,221,0,247,247,3,0
004CE1  3  F7 F7 03 00  
004CE5  3  00 6F 6F 63          .byte 0,111,111,99,11,120,123,3
004CE9  3  0B 78 7B 03  
004CED  3  60 93 94 64          .byte 96,147,148,100,3,8,20,8
004CF1  3  03 08 14 08  
004CF5  3  18 24 A5 99          .byte 24,36,165,153,64,164,74,4
004CF9  3  40 A4 4A 04  
004CFD  3  06 C9 29 26          .byte 6,201,41,38,200,20,8,0
004D01  3  C8 14 08 00  
004D05  3  00 FF 00 B7          .byte 0,255,0,183,170,157,174,4
004D09  3  AA 9D AE 04  
004D0D  3  00 FF 00 77          .byte 0,255,0,119,187,85,238,68
004D11  3  BB 55 EE 44  
004D15  3  00 FF 00 75          .byte 0,255,0,117,169,93,237,68
004D19  3  A9 5D ED 44  
004D1D  3  00 00 10 19          .byte 0,0,16,25,141,77,38,22
004D21  3  8D 4D 26 16  
004D25  3  04 80 94 85          .byte 4,128,148,133,147,214,206,220
004D29  3  93 D6 CE DC  
004D2D  3  08 00 10 32          .byte 8,0,16,50,36,101,234,212
004D31  3  24 65 EA D4  
004D35  3  00 DA 55 6D          .byte 0,218,85,109,42,41,68,4
004D39  3  2A 29 44 04  
004D3D  3  00 9A 51 4D          .byte 0,154,81,77,21,84,4,16
004D41  3  15 54 04 10  
004D45  3  00 FF 00 66          .byte 0,255,0,102,102,102,0,255
004D49  3  66 66 00 FF  
004D4D  3  00 FF 00 7E          .byte 0,255,0,126,126,126,0,255
004D51  3  7E 7E 00 FF  
004D55  3  00 85 56 BB          .byte 0,133,86,187,237,183,93,10
004D59  3  ED B7 5D 0A  
004D5D  3  00 A2 D5 6A          .byte 0,162,213,106,221,115,88,160
004D61  3  DD 73 58 A0  
004D65  3  06 D5 6C 08          .byte 6,213,108,8,0,0,0,0
004D69  3  00 00 00 00  
004D6D  3  D0 6A B5 28          .byte 208,106,181,40,8,0,0,0
004D71  3  08 00 00 00  
004D75  3  5E 9D 5E 4D          .byte 94,157,94,77,86,89,92,94
004D79  3  56 59 5C 5E  
004D7D  3  1E 0E 0E 26          .byte 30,14,14,38,26,45,30,46
004D81  3  1A 2D 1E 2E  
004D85  3               bprop:
004D85  3  00                   .byte 0
004D86  3  02                   .byte 2
004D87  3  02                   .byte 2
004D88  3  00                   .byte 0
004D89  3  00                   .byte 0
004D8A  3  00                   .byte 0
004D8B  3  00                   .byte 0
004D8C  3  00                   .byte 0
004D8D  3  05                   .byte 5
004D8E  3  06                   .byte 6
004D8F  3  02                   .byte 2
004D90  3  02                   .byte 2
004D91  3  02                   .byte 2
004D92  3  00                   .byte 0
004D93  3  00                   .byte 0
004D94  3  00                   .byte 0
004D95  3  00                   .byte 0
004D96  3  00                   .byte 0
004D97  3  00                   .byte 0
004D98  3  00                   .byte 0
004D99  3  02                   .byte 2
004D9A  3  02                   .byte 2
004D9B  3  02                   .byte 2
004D9C  3  00                   .byte 0
004D9D  3  00                   .byte 0
004D9E  3  00                   .byte 0
004D9F  3  02                   .byte 2
004DA0  3  01                   .byte 1
004DA1  3  01                   .byte 1
004DA2  3  01                   .byte 1
004DA3  3  00                   .byte 0
004DA4  3  00                   .byte 0
004DA5  3  01                   .byte 1
004DA6  3  01                   .byte 1
004DA7  3  01                   .byte 1
004DA8  3  00                   .byte 0
004DA9  3  00                   .byte 0
004DAA  3  00                   .byte 0
004DAB  3  01                   .byte 1
004DAC  3  01                   .byte 1
004DAD  3  01                   .byte 1
004DAE  3  00                   .byte 0
004DAF  3  00                   .byte 0
004DB0  3  00                   .byte 0
004DB1  3  01                   .byte 1
004DB2  3  01                   .byte 1
004DB3  3  01                   .byte 1
004DB4  3  01                   .byte 1
004DB5  3  01                   .byte 1
004DB6  3  01                   .byte 1
004DB7  3  01                   .byte 1
004DB8  3  01                   .byte 1
004DB9  3  01                   .byte 1
004DBA  3  01                   .byte 1
004DBB  3  01                   .byte 1
004DBC  3  01                   .byte 1
004DBD  3  01                   .byte 1
004DBE  3  00                   .byte 0
004DBF  3  00                   .byte 0
004DC0  3  00                   .byte 0
004DC1  3  01                   .byte 1
004DC2  3  01                   .byte 1
004DC3  3  01                   .byte 1
004DC4  3  00                   .byte 0
004DC5  3  00                   .byte 0
004DC6  3  00                   .byte 0
004DC7  3  01                   .byte 1
004DC8  3  01                   .byte 1
004DC9  3  01                   .byte 1
004DCA  3  00                   .byte 0
004DCB  3  00                   .byte 0
004DCC  3  00                   .byte 0
004DCD  3  00                   .byte 0
004DCE  3  01                   .byte 1
004DCF  3  00                   .byte 0
004DD0  3  01                   .byte 1
004DD1  3  01                   .byte 1
004DD2  3  01                   .byte 1
004DD3  3  01                   .byte 1
004DD4  3  01                   .byte 1
004DD5  3  01                   .byte 1
004DD6  3  01                   .byte 1
004DD7  3  00                   .byte 0
004DD8  3  00                   .byte 0
004DD9  3  00                   .byte 0
004DDA  3  01                   .byte 1
004DDB  3  01                   .byte 1
004DDC  3  01                   .byte 1
004DDD  3  01                   .byte 1
004DDE  3  01                   .byte 1
004DDF  3  01                   .byte 1
004DE0  3  00                   .byte 0
004DE1  3  00                   .byte 0
004DE2  3  00                   .byte 0
004DE3  3  00                   .byte 0
004DE4  3               sprgfx:
004DE4  3  0F C0 1E A0          .byte 15,192,30,160,3,96,7,224,30,32,15,192,0,0,30,208,53,224,43,232,29,220,24,8,37,224,88,192,60,184,116,116
004DE8  3  03 60 07 E0  
004DEC  3  1E 20 0F C0  
004E04  3  03 F0 07 A8          .byte 3,240,7,168,0,216,1,248,7,136,3,240,0,0,7,180,13,120,10,250,7,119,6,2,9,120,22,48,15,46,29,29
004E08  3  00 D8 01 F8  
004E0C  3  07 88 03 F0  
004E24  3  00 FC 01 EA          .byte 0,252,1,234,0,54,0,126,1,226,0,252,0,0,1,237,3,94,130,190,193,221,129,128,2,94,5,140,131,203,71,71
004E28  3  00 36 00 7E  
004E2C  3  01 E2 00 FC  
004E44  3  00 3F 80 7A          .byte 0,63,128,122,128,13,128,31,128,120,0,63,0,0,64,123,128,215,160,175,112,119,32,96,128,151,1,99,224,242,209,209
004E48  3  80 0D 80 1F  
004E4C  3  80 78 00 3F  
004E64  3  0F C0 1E A0          .byte 15,192,30,160,3,96,7,224,30,32,15,194,0,7,62,218,93,236,235,224,65,192,0,48,237,251,232,119,168,10,192,28
004E68  3  03 60 07 E0  
004E6C  3  1E 20 0F C2  
004E84  3  03 F0 07 A8          .byte 3,240,7,168,0,216,1,248,7,136,131,240,192,1,143,182,23,123,58,248,16,112,0,12,251,126,250,29,170,2,48,7
004E88  3  00 D8 01 F8  
004E8C  3  07 88 83 F0  
004EA4  3  00 FC 01 EA          .byte 0,252,1,234,0,54,0,126,1,226,32,252,112,0,163,237,197,222,14,190,4,28,0,3,190,223,126,135,170,128,204,1
004EA8  3  00 36 00 7E  
004EAC  3  01 E2 20 FC  
004EC4  3  00 3F 80 7A          .byte 0,63,128,122,128,13,128,31,128,120,8,63,28,0,104,251,177,119,131,175,1,7,192,0,239,183,223,161,42,160,115,0
004EC8  3  80 0D 80 1F  
004ECC  3  80 78 08 3F  
004EE4  3  03 F0 05 78          .byte 3,240,5,120,6,192,7,224,4,120,3,240,0,0,11,120,7,172,23,212,59,184,16,24,7,164,3,26,29,60,46,46
004EE8  3  06 C0 07 E0  
004EEC  3  04 78 03 F0  
004F04  3  00 FC 01 5E          .byte 0,252,1,94,1,176,1,248,1,30,0,252,0,0,2,222,1,235,5,245,14,238,4,6,1,233,128,198,7,79,139,139
004F08  3  01 B0 01 F8  
004F0C  3  01 1E 00 FC  
004F24  3  00 3F 80 57          .byte 0,63,128,87,0,108,0,126,128,71,0,63,0,0,128,183,192,122,65,125,131,187,129,1,64,122,160,49,193,211,226,226
004F28  3  00 6C 00 7E  
004F2C  3  80 47 00 3F  
004F44  3  C0 0F E0 15          .byte 192,15,224,21,0,27,128,31,224,17,192,15,0,0,224,45,176,30,80,95,224,238,96,64,144,30,104,12,240,116,184,184
004F48  3  00 1B 80 1F  
004F4C  3  E0 11 C0 0F  
004F64  3  03 F0 05 78          .byte 3,240,5,120,6,192,7,224,4,120,67,240,224,0,91,124,55,186,7,215,3,130,12,0,223,183,238,23,80,21,56,3
004F68  3  06 C0 07 E0  
004F6C  3  04 78 43 F0  
004F84  3  00 FC 01 5E          .byte 0,252,1,94,1,176,1,248,1,30,16,252,56,0,22,223,141,238,193,245,128,224,3,0,247,237,251,133,84,5,206,0
004F88  3  01 B0 01 F8  
004F8C  3  01 1E 10 FC  
004FA4  3  00 3F 80 57          .byte 0,63,128,87,0,108,0,126,128,71,4,63,14,0,197,183,163,123,112,125,32,56,0,192,125,251,126,225,85,1,51,128
004FA8  3  00 6C 00 7E  
004FAC  3  80 47 04 3F  
004FC4  3  C0 0F E0 15          .byte 192,15,224,21,0,27,128,31,224,17,193,15,3,128,241,109,232,222,92,31,8,14,0,48,223,126,95,184,85,64,12,224
004FC8  3  00 1B 80 1F  
004FCC  3  E0 11 C1 0F  
004FE4  3  05 A0 0F F0          .byte 5,160,15,240,14,112,15,240,183,237,219,219,76,50,218,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004FE8  3  0E 70 0F F0  
004FEC  3  B7 ED DB DB  
005004  3  01 68 03 FC          .byte 1,104,3,252,3,156,3,252,109,251,246,246,147,12,246,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005008  3  03 9C 03 FC  
00500C  3  6D FB F6 F6  
005024  3  00 5A 00 FF          .byte 0,90,0,255,0,231,0,255,219,126,189,189,36,195,189,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005028  3  00 E7 00 FF  
00502C  3  DB 7E BD BD  
005044  3  80 16 C0 3F          .byte 128,22,192,63,192,57,192,63,182,223,111,111,201,48,111,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005048  3  C0 39 C0 3F  
00504C  3  B6 DF 6F 6F  
005064  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,8,2,255,253,8,2,0,4
005068  3  00 00 00 00  
00506C  3  00 00 00 00  
005084  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,130,0,127,255,130,0,0,1
005088  3  00 00 00 00  
00508C  3  00 00 00 00  
0050A4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,32,128,223,255,32,128,64,0
0050A8  3  00 00 00 00  
0050AC  3  00 00 00 00  
0050C4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,8,32,247,255,8,32,16,0
0050C8  3  00 00 00 00  
0050CC  3  00 00 00 00  
0050E4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,6,15,253,248,6,0,0
0050E8  3  00 00 00 00  
0050EC  3  00 00 00 00  
005104  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,1,67,255,190,1,0,0
005108  3  00 00 00 00  
00510C  3  00 00 00 00  
005124  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,128,208,255,111,128,0,0
005128  3  00 00 00 00  
00512C  3  00 00 00 00  
005144  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,224,244,63,27,224,0,0
005148  3  00 00 00 00  
00514C  3  00 00 00 00  
005164  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,8,0,15,255,8,0,240,0
005168  3  00 00 00 00  
00516C  3  00 00 00 00  
005184  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,2,0,195,255,2,0,60,0
005188  3  00 00 00 00  
00518C  3  00 00 00 00  
0051A4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,128,240,255,0,128,15,0
0051A8  3  00 00 00 00  
0051AC  3  00 00 00 00  
0051C4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,192,0,32,252,63,0,32,3,192
0051C8  3  00 00 00 00  
0051CC  3  00 00 00 00  
0051E4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,6,15,253,248,6,0,0
0051E8  3  00 00 00 00  
0051EC  3  00 00 00 00  
005204  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,1,67,255,190,1,0,0
005208  3  00 00 00 00  
00520C  3  00 00 00 00  
005224  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,128,208,255,111,128,0,0
005228  3  00 00 00 00  
00522C  3  00 00 00 00  
005244  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,224,244,63,27,224,0,0
005248  3  00 00 00 00  
00524C  3  00 00 00 00  
005264  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,127,254,231,231,195,195,231,231,255,255,128,1,191,253,182,109,63,252,0,0
005268  3  00 00 00 00  
00526C  3  00 00 00 00  
005284  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,159,255,249,249,240,240,249,249,255,255,96,0,111,255,109,155,15,255,0,0
005288  3  00 00 00 00  
00528C  3  00 00 00 00  
0052A4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,231,255,126,126,60,60,126,126,255,255,24,0,219,255,219,102,195,255,0,0
0052A8  3  00 00 00 00  
0052AC  3  00 00 00 00  
0052C4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,249,255,159,159,15,15,159,159,255,255,6,0,246,255,182,217,240,255,0,0
0052C8  3  00 00 00 00  
0052CC  3  00 00 00 00  
0052E4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,29,240,43,88,42,72,43,88,43,248,42,8,42,232,42,168,42,232,0,0
0052E8  3  00 00 00 00  
0052EC  3  00 00 00 00  
005304  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,7,124,10,214,10,146,10,214,10,254,10,130,10,186,10,170,10,186,0,0
005308  3  00 00 00 00  
00530C  3  00 00 00 00  
005324  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,223,130,181,130,164,130,181,130,191,130,160,130,174,130,170,130,174,0,0
005328  3  00 00 00 00  
00532C  3  00 00 00 00  
005344  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,192,119,96,173,32,169,96,173,224,175,32,168,160,171,160,170,160,171,0,0
005348  3  00 00 00 00  
00534C  3  00 00 00 00  
005364  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,3,64,3,192,3,192,3,192,0,0,3,192,3,192,3,192,0,0
005368  3  00 00 00 00  
00536C  3  00 00 00 00  
005384  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,208,0,240,0,240,0,240,0,0,0,240,0,240,0,240,0,0
005388  3  00 00 00 00  
00538C  3  00 00 00 00  
0053A4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,52,0,60,0,60,0,60,0,0,0,60,0,60,0,60,0,0
0053A8  3  00 00 00 00  
0053AC  3  00 00 00 00  
0053C4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,13,0,15,0,15,0,15,0,0,0,15,0,15,0,15,0,0
0053C8  3  00 00 00 00  
0053CC  3  00 00 00 00  
0053E4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,31,112,53,168,36,168,53,168,63,168,32,168,46,168,42,168,46,168,0,0
0053E8  3  00 00 00 00  
0053EC  3  00 00 00 00  
005404  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,7,220,13,106,9,42,13,106,15,234,8,42,11,170,10,170,11,170,0,0
005408  3  00 00 00 00  
00540C  3  00 00 00 00  
005424  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,247,131,90,130,74,131,90,131,250,130,10,130,234,130,170,130,234,0,0
005428  3  00 00 00 00  
00542C  3  00 00 00 00  
005444  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,192,125,160,214,160,146,160,214,160,254,160,130,160,186,160,170,160,186,0,0
005448  3  00 00 00 00  
00544C  3  00 00 00 00  
005464  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,177,240,83,88,173,85,83,88,177,240,224,0
005468  3  00 00 00 00  
00546C  3  00 00 00 00  
005484  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,44,124,20,214,107,85,20,214,44,124,56,0
005488  3  00 00 00 00  
00548C  3  00 00 00 00  
0054A4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,11,31,133,53,90,213,133,53,11,31,14,0
0054A8  3  00 00 00 00  
0054AC  3  00 00 00 00  
0054C4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,128,194,199,97,77,86,181,97,77,194,199,3,128
0054C8  3  00 00 00 00  
0054CC  3  00 00 00 00  
0054E4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,224,243,240,86,184,170,170,86,184,243,240,1,224
0054E8  3  00 00 00 00  
0054EC  3  00 00 00 00  
005504  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,60,252,21,174,170,170,21,174,60,252,0,120
005508  3  00 00 00 00  
00550C  3  00 00 00 00  
005524  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,15,63,133,107,170,170,133,107,15,63,0,30
005528  3  00 00 00 00  
00552C  3  00 00 00 00  
005544  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,195,207,225,90,170,170,225,90,195,207,128,7
005548  3  00 00 00 00  
00554C  3  00 00 00 00  
005564  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,224,3,240,5,120,253,108,5,120,3,240,1,224
005568  3  00 00 00 00  
00556C  3  00 00 00 00  
005584  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,252,1,94,63,91,1,94,0,252,0,120
005588  3  00 00 00 00  
00558C  3  00 00 00 00  
0055A4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,63,128,87,207,214,128,87,0,63,0,30
0055A8  3  00 00 00 00  
0055AC  3  00 00 00 00  
0055C4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,192,15,224,21,179,245,224,21,192,15,128,7
0055C8  3  00 00 00 00  
0055CC  3  00 00 00 00  
0055E4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,240,83,88,173,85,83,88,241,240,0,0
0055E8  3  00 00 00 00  
0055EC  3  00 00 00 00  
005604  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,124,20,214,107,85,20,214,60,124,0,0
005608  3  00 00 00 00  
00560C  3  00 00 00 00  
005624  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,31,133,53,90,213,133,53,15,31,0,0
005628  3  00 00 00 00  
00562C  3  00 00 00 00  
005644  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,199,97,77,86,181,97,77,195,199,0,0
005648  3  00 00 00 00  
00564C  3  00 00 00 00  
005664  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,135,32,205,223,186,63,205,31,135
005668  3  00 00 00 00  
00566C  3  00 00 00 00  
005684  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,225,72,51,183,238,79,243,199,225
005688  3  00 00 00 00  
00568C  3  00 00 00 00  
0056A4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,248,210,12,173,251,211,252,113,248
0056A8  3  00 00 00 00  
0056AC  3  00 00 00 00  
0056C4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,126,52,131,235,126,52,255,28,126
0056C8  3  00 00 00 00  
0056CC  3  00 00 00 00  
0056E4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,128,63,207,255,186,63,207,31,128
0056E8  3  00 00 00 00  
0056EC  3  00 00 00 00  
005704  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,207,243,191,238,207,243,7,224
005708  3  00 00 00 00  
00570C  3  00 00 00 00  
005724  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,248,243,252,175,251,243,252,1,248
005728  3  00 00 00 00  
00572C  3  00 00 00 00  
005744  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,60,255,235,254,60,255,0,126
005748  3  00 00 00 00  
00574C  3  00 00 00 00  
005764  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,128,63,192,223,191,32,192,31,128
005768  3  00 00 00 00  
00576C  3  00 00 00 00  
005784  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,15,240,247,239,8,48,7,224
005788  3  00 00 00 00  
00578C  3  00 00 00 00  
0057A4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,248,3,252,253,251,2,12,1,248
0057A8  3  00 00 00 00  
0057AC  3  00 00 00 00  
0057C4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,255,255,126,0,131,0,126
0057C8  3  00 00 00 00  
0057CC  3  00 00 00 00  
0057E4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,128,63,207,192,186,63,207,31,128
0057E8  3  00 00 00 00  
0057EC  3  00 00 00 00  
005804  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,207,243,176,46,207,243,7,224
005808  3  00 00 00 00  
00580C  3  00 00 00 00  
005824  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,248,243,252,172,11,243,252,1,248
005828  3  00 00 00 00  
00582C  3  00 00 00 00  
005844  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,60,255,235,2,60,255,0,126
005848  3  00 00 00 00  
00584C  3  00 00 00 00  
005864  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,6,79,248,32,6
005868  3  00 00 00 00  
00586C  3  00 00 00 00  
005884  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,1,19,254,136,1
005888  3  00 00 00 00  
00588C  3  00 00 00 00  
0058A4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,132,255,98,0
0058A8  3  00 00 00 00  
0058AC  3  00 00 00 00  
0058C4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,128,225,63,24,128
0058C8  3  00 00 00 00  
0058CC  3  00 00 00 00  
0058E4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,111,240,0,12
0058E8  3  00 00 00 00  
0058EC  3  00 00 00 00  
005904  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,27,252,0,3
005908  3  00 00 00 00  
00590C  3  00 00 00 00  
005924  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,6,255,192,0
005928  3  00 00 00 00  
00592C  3  00 00 00 00  
005944  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,193,191,48,0
005948  3  00 00 00 00  
00594C  3  00 00 00 00  
005964  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,111,224,0,24
005968  3  00 00 00 00  
00596C  3  00 00 00 00  
005984  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,27,248,0,6
005988  3  00 00 00 00  
00598C  3  00 00 00 00  
0059A4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,6,254,128,1
0059A8  3  00 00 00 00  
0059AC  3  00 00 00 00  
0059C4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,129,191,96,0
0059C8  3  00 00 00 00  
0059CC  3  00 00 00 00  
0059E4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,12,79,240,32,12
0059E8  3  00 00 00 00  
0059EC  3  00 00 00 00  
005A04  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,3,19,252,8,3
005A08  3  00 00 00 00  
005A0C  3  00 00 00 00  
005A24  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,0,4,255,194,0
005A28  3  00 00 00 00  
005A2C  3  00 00 00 00  
005A44  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,128,193,63,48,128
005A48  3  00 00 00 00  
005A4C  3  00 00 00 00  
005A64  3  03 80 1D 70          .byte 3,128,29,112,114,156,110,236,64,4,9,0,29,0,45,64,125,0,0,64,15,128,22,0,46,0,14,0,0,0,27,0
005A68  3  72 9C 6E EC  
005A6C  3  40 04 09 00  
005A84  3  00 E0 07 5C          .byte 0,224,7,92,28,167,27,187,16,1,2,64,7,64,11,80,31,64,0,16,3,224,5,128,11,128,3,128,0,0,6,192
005A88  3  1C A7 1B BB  
005A8C  3  10 01 02 40  
005AA4  3  00 38 01 D7          .byte 0,56,1,215,199,41,198,238,68,0,0,144,1,208,2,212,7,208,0,4,0,248,1,96,2,224,0,224,0,0,1,176
005AA8  3  C7 29 C6 EE  
005AAC  3  44 00 00 90  
005AC4  3  00 0E C0 75          .byte 0,14,192,117,113,202,177,187,17,0,0,36,0,116,0,181,1,244,0,1,0,62,0,88,0,184,0,56,0,0,0,108
005AC8  3  71 CA B1 BB  
005ACC  3  11 00 00 24  
005AE4  3  03 80 1D 70          .byte 3,128,29,112,114,156,110,236,64,4,9,0,29,0,45,64,125,0,0,64,15,128,22,0,39,0,3,0,0,64,6,128
005AE8  3  72 9C 6E EC  
005AEC  3  40 04 09 00  
005B04  3  00 E0 07 5C          .byte 0,224,7,92,28,167,27,187,16,1,2,64,7,64,11,80,31,64,0,16,3,224,5,128,9,192,0,192,0,16,1,160
005B08  3  1C A7 1B BB  
005B0C  3  10 01 02 40  
005B24  3  00 38 01 D7          .byte 0,56,1,215,199,41,198,238,68,0,0,144,1,208,2,212,7,208,0,4,0,248,1,96,2,112,0,48,0,4,0,104
005B28  3  C7 29 C6 EE  
005B2C  3  44 00 00 90  
005B44  3  00 0E C0 75          .byte 0,14,192,117,113,202,177,187,17,0,0,36,0,116,0,181,1,244,0,1,0,62,0,88,0,156,0,12,0,1,0,26
005B48  3  71 CA B1 BB  
005B4C  3  11 00 00 24  
005B64  3  03 80 1D 70          .byte 3,128,29,112,114,156,110,236,64,4,9,0,29,0,45,64,125,0,0,64,15,128,22,0,46,0,14,0,0,0,27,0
005B68  3  72 9C 6E EC  
005B6C  3  40 04 09 00  
005B84  3  00 E0 07 5C          .byte 0,224,7,92,28,167,27,187,16,1,2,64,7,64,11,80,31,64,0,16,3,224,5,128,11,128,3,128,0,0,6,192
005B88  3  1C A7 1B BB  
005B8C  3  10 01 02 40  
005BA4  3  00 38 01 D7          .byte 0,56,1,215,199,41,198,238,68,0,0,144,1,208,2,212,7,208,0,4,0,248,1,96,2,224,0,224,0,0,1,176
005BA8  3  C7 29 C6 EE  
005BAC  3  44 00 00 90  
005BC4  3  00 0E C0 75          .byte 0,14,192,117,113,202,177,187,17,0,0,36,0,116,0,181,1,244,0,1,0,62,0,88,0,184,0,56,0,0,0,108
005BC8  3  71 CA B1 BB  
005BCC  3  11 00 00 24  
005BE4  3  03 80 1D 70          .byte 3,128,29,112,114,156,110,236,64,4,9,0,29,0,45,64,125,0,0,64,15,128,54,0,12,0,24,0,64,0,44,0
005BE8  3  72 9C 6E EC  
005BEC  3  40 04 09 00  
005C04  3  00 E0 07 5C          .byte 0,224,7,92,28,167,27,187,16,1,2,64,7,64,11,80,31,64,0,16,3,224,13,128,3,0,6,0,16,0,11,0
005C08  3  1C A7 1B BB  
005C0C  3  10 01 02 40  
005C24  3  00 38 01 D7          .byte 0,56,1,215,199,41,198,238,68,0,0,144,1,208,2,212,7,208,0,4,0,248,3,96,0,192,1,128,4,0,2,192
005C28  3  C7 29 C6 EE  
005C2C  3  44 00 00 90  
005C44  3  00 0E C0 75          .byte 0,14,192,117,113,202,177,187,17,0,0,36,0,116,0,181,1,244,0,1,0,62,0,216,0,48,0,96,1,0,0,176
005C48  3  71 CA B1 BB  
005C4C  3  11 00 00 24  
005C64  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,116,109,174,0,0,222,219,0,0,122,238,45,188
005C68  3  00 00 00 00  
005C6C  3  00 00 00 00  
005C84  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,221,155,107,0,0,247,182,0,0,158,187,11,111
005C88  3  00 00 00 00  
005C8C  3  00 00 00 00  
005CA4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,119,230,218,0,0,189,237,0,0,231,174,194,219
005CA8  3  00 00 00 00  
005CAC  3  00 00 00 00  
005CC4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,221,185,182,0,0,111,123,0,0,185,235,240,182
005CC8  3  00 00 00 00  
005CCC  3  00 00 00 00  
005CE4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,116,109,174,0,0,183,119,222,219,0,0,122,238,45,188
005CE8  3  00 00 00 00  
005CEC  3  00 00 00 00  
005D04  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,221,155,107,0,0,237,221,247,182,0,0,158,187,11,111
005D08  3  00 00 00 00  
005D0C  3  00 00 00 00  
005D24  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,119,230,218,0,0,123,119,189,237,0,0,231,174,194,219
005D28  3  00 00 00 00  
005D2C  3  00 00 00 00  
005D44  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,221,185,182,0,0,222,221,111,123,0,0,185,235,240,182
005D48  3  00 00 00 00  
005D4C  3  00 00 00 00  
005D64  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,116,109,174,0,0,183,119,222,219,0,0,122,238,45,188
005D68  3  00 00 00 00  
005D6C  3  00 00 00 00  
005D84  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,221,155,107,0,0,237,221,247,182,0,0,158,187,11,111
005D88  3  00 00 00 00  
005D8C  3  00 00 00 00  
005DA4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,119,230,218,0,0,123,119,189,237,0,0,231,174,194,219
005DA8  3  00 00 00 00  
005DAC  3  00 00 00 00  
005DC4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,221,185,182,0,0,222,221,111,123,0,0,185,235,240,182
005DC8  3  00 00 00 00  
005DCC  3  00 00 00 00  
005DE4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,116,109,174,0,0,222,219,0,0,122,238,45,188
005DE8  3  00 00 00 00  
005DEC  3  00 00 00 00  
005E04  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,221,155,107,0,0,247,182,0,0,158,187,11,111
005E08  3  00 00 00 00  
005E0C  3  00 00 00 00  
005E24  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,119,230,218,0,0,189,237,0,0,231,174,194,219
005E28  3  00 00 00 00  
005E2C  3  00 00 00 00  
005E44  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,221,185,182,0,0,111,123,0,0,185,235,240,182
005E48  3  00 00 00 00  
005E4C  3  00 00 00 00  
005E64  3  03 E0 0F F8          .byte 3,224,15,248,24,140,48,130,50,164,56,138,63,116,62,42,30,52,15,232,2,160,0,0,4,16,6,176,7,240,3,224
005E68  3  18 8C 30 82  
005E6C  3  32 A4 38 8A  
005E84  3  00 F8 03 FE          .byte 0,248,3,254,6,35,140,32,12,169,142,34,15,221,143,138,7,141,3,250,0,168,0,0,1,4,1,172,1,252,0,248
005E88  3  06 23 8C 20  
005E8C  3  0C A9 8E 22  
005EA4  3  00 3E 80 FF          .byte 0,62,128,255,193,136,35,8,67,42,163,136,67,247,163,226,65,227,128,254,0,42,0,0,0,65,0,107,0,127,0,62
005EA8  3  C1 88 23 08  
005EAC  3  43 2A A3 88  
005EC4  3  80 0F E0 3F          .byte 128,15,224,63,48,98,8,194,144,202,40,226,208,253,168,248,208,120,160,63,128,10,0,0,64,16,192,26,192,31,128,15
005EC8  3  30 62 08 C2  
005ECC  3  90 CA 28 E2  
005EE4  3  03 E0 0F F8          .byte 3,224,15,248,24,140,49,194,48,132,56,138,63,116,62,42,30,52,15,232,2,160,4,16,6,176,7,240,3,224,0,0
005EE8  3  18 8C 31 C2  
005EEC  3  30 84 38 8A  
005F04  3  00 F8 03 FE          .byte 0,248,3,254,6,35,140,112,12,33,142,34,15,221,143,138,7,141,3,250,0,168,1,4,1,172,1,252,0,248,0,0
005F08  3  06 23 8C 70  
005F0C  3  0C 21 8E 22  
005F24  3  00 3E 80 FF          .byte 0,62,128,255,193,136,35,28,67,8,163,136,67,247,163,226,65,227,128,254,0,42,0,65,0,107,0,127,0,62,0,0
005F28  3  C1 88 23 1C  
005F2C  3  43 08 A3 88  
005F44  3  80 0F E0 3F          .byte 128,15,224,63,48,98,8,199,16,194,40,226,208,253,168,248,208,120,160,63,128,10,64,16,192,26,192,31,128,15,0,0
005F48  3  30 62 08 C7  
005F4C  3  10 C2 28 E2  
005F64  3  03 E0 0F F8          .byte 3,224,15,248,24,140,52,146,48,132,56,138,63,116,62,42,30,52,15,232,6,176,6,176,7,240,3,224,0,0,0,0
005F68  3  18 8C 34 92  
005F6C  3  30 84 38 8A  
005F84  3  00 F8 03 FE          .byte 0,248,3,254,6,35,141,36,12,33,142,34,15,221,143,138,7,141,3,250,1,172,1,172,1,252,0,248,0,0,0,0
005F88  3  06 23 8D 24  
005F8C  3  0C 21 8E 22  
005FA4  3  00 3E 80 FF          .byte 0,62,128,255,193,136,35,73,67,8,163,136,67,247,163,226,65,227,128,254,0,107,0,107,0,127,0,62,0,0,0,0
005FA8  3  C1 88 23 49  
005FAC  3  43 08 A3 88  
005FC4  3  80 0F E0 3F          .byte 128,15,224,63,48,98,72,210,16,194,40,226,208,253,168,248,208,120,160,63,192,26,192,26,192,31,128,15,0,0,0,0
005FC8  3  30 62 48 D2  
005FCC  3  10 C2 28 E2  
005FE4  3  03 E0 0F F8          .byte 3,224,15,248,24,140,48,130,52,148,56,138,63,116,62,42,30,52,15,232,2,160,4,16,6,176,7,240,3,224,0,0
005FE8  3  18 8C 30 82  
005FEC  3  34 94 38 8A  
006004  3  00 F8 03 FE          .byte 0,248,3,254,6,35,140,32,13,37,142,34,15,221,143,138,7,141,3,250,0,168,1,4,1,172,1,252,0,248,0,0
006008  3  06 23 8C 20  
00600C  3  0D 25 8E 22  
006024  3  00 3E 80 FF          .byte 0,62,128,255,193,136,35,8,67,73,163,136,67,247,163,226,65,227,128,254,0,42,0,65,0,107,0,127,0,62,0,0
006028  3  C1 88 23 08  
00602C  3  43 49 A3 88  
006044  3  80 0F E0 3F          .byte 128,15,224,63,48,98,8,194,80,210,40,226,208,253,168,248,208,120,160,63,128,10,64,16,192,26,192,31,128,15,0,0
006048  3  30 62 08 C2  
00604C  3  50 D2 28 E2  
006064  3  00 00 0C 00          .byte 0,0,12,0,82,24,33,36,81,78,0,132,0,128,0,0,15,232,15,232,15,232,15,232,15,232,0,0,7,208,0,0
006068  3  52 18 21 24  
00606C  3  51 4E 00 84  
006084  3  00 00 03 00          .byte 0,0,3,0,20,134,8,73,148,83,0,33,0,32,0,0,3,250,3,250,3,250,3,250,3,250,0,0,1,244,0,0
006088  3  14 86 08 49  
00608C  3  94 53 00 21  
0060A4  3  00 00 00 C0          .byte 0,0,0,192,133,33,66,18,229,20,64,8,0,8,0,0,128,254,128,254,128,254,128,254,128,254,0,0,0,125,0,0
0060A8  3  85 21 42 12  
0060AC  3  E5 14 40 08  
0060C4  3  00 00 00 30          .byte 0,0,0,48,97,72,144,132,57,69,16,2,0,2,0,0,160,63,160,63,160,63,160,63,160,63,0,0,64,31,0,0
0060C8  3  61 48 90 84  
0060CC  3  39 45 10 02  
0060E4  3  00 00 00 00          .byte 0,0,0,0,22,0,9,48,21,120,0,144,0,128,0,0,15,248,15,248,15,248,15,248,15,248,0,0,7,240,0,0
0060E8  3  16 00 09 30  
0060EC  3  15 78 00 90  
006104  3  00 00 00 00          .byte 0,0,0,0,5,128,2,76,5,94,0,36,0,32,0,0,3,254,3,254,3,254,3,254,3,254,0,0,1,252,0,0
006108  3  05 80 02 4C  
00610C  3  05 5E 00 24  
006124  3  00 00 00 00          .byte 0,0,0,0,1,96,0,147,129,87,0,9,0,8,0,0,128,255,128,255,128,255,128,255,128,255,0,0,0,127,0,0
006128  3  01 60 00 93  
00612C  3  81 57 00 09  
006144  3  00 00 00 00          .byte 0,0,0,0,0,88,192,36,224,85,64,2,0,2,0,0,224,63,224,63,224,63,224,63,224,63,0,0,192,31,0,0
006148  3  00 58 C0 24  
00614C  3  E0 55 40 02  
006164  3  00 00 00 00          .byte 0,0,0,0,6,128,3,160,5,96,0,192,0,128,0,0,11,248,11,248,11,248,11,248,11,248,0,0,5,240,0,0
006168  3  06 80 03 A0  
00616C  3  05 60 00 C0  
006184  3  00 00 00 00          .byte 0,0,0,0,1,160,0,232,1,88,0,48,0,32,0,0,2,254,2,254,2,254,2,254,2,254,0,0,1,124,0,0
006188  3  01 A0 00 E8  
00618C  3  01 58 00 30  
0061A4  3  00 00 00 00          .byte 0,0,0,0,0,104,0,58,0,86,0,12,0,8,0,0,128,191,128,191,128,191,128,191,128,191,0,0,0,95,0,0
0061A8  3  00 68 00 3A  
0061AC  3  00 56 00 0C  
0061C4  3  00 00 00 00          .byte 0,0,0,0,0,26,128,14,128,21,0,3,0,2,0,0,224,47,224,47,224,47,224,47,224,47,0,0,192,23,0,0
0061C8  3  00 1A 80 0E  
0061CC  3  80 15 00 03  
0061E4  3  00 00 00 00          .byte 0,0,0,0,2,32,13,80,21,120,0,144,0,128,0,0,15,120,15,120,15,120,15,120,15,120,0,0,7,112,0,0
0061E8  3  02 20 0D 50  
0061EC  3  15 78 00 90  
006204  3  00 00 00 00          .byte 0,0,0,0,0,136,3,84,5,94,0,36,0,32,0,0,3,222,3,222,3,222,3,222,3,222,0,0,1,220,0,0
006208  3  00 88 03 54  
00620C  3  05 5E 00 24  
006224  3  00 00 00 00          .byte 0,0,0,0,0,34,0,213,129,87,0,9,0,8,0,0,128,247,128,247,128,247,128,247,128,247,0,0,0,119,0,0
006228  3  00 22 00 D5  
00622C  3  81 57 00 09  
006244  3  00 00 00 00          .byte 0,0,0,0,128,8,64,53,224,85,64,2,0,2,0,0,224,61,224,61,224,61,224,61,224,61,0,0,192,29,0,0
006248  3  80 08 40 35  
00624C  3  E0 55 40 02  
006264  3  78 1E 78 1E          .byte 120,30,120,30,120,30,123,222,123,222,61,188,30,120,0,0,31,232,0,0,15,208,15,208,15,208,15,208,7,160,3,64
006268  3  78 1E 7B DE  
00626C  3  7B DE 3D BC  
006284  3  9E 07 9E 07          .byte 158,7,158,7,158,7,158,247,158,247,15,111,7,158,0,0,7,250,0,0,3,244,3,244,3,244,3,244,1,232,0,208
006288  3  9E 07 9E F7  
00628C  3  9E F7 0F 6F  
0062A4  3  E7 81 E7 81          .byte 231,129,231,129,231,129,231,189,231,189,195,219,129,231,0,0,129,254,0,0,0,253,0,253,0,253,0,253,0,122,0,52
0062A8  3  E7 81 E7 BD  
0062AC  3  E7 BD C3 DB  
0062C4  3  79 E0 79 E0          .byte 121,224,121,224,121,224,121,239,121,239,240,246,224,121,0,0,160,127,0,0,64,63,64,63,64,63,64,63,128,30,0,13
0062C8  3  79 E0 79 EF  
0062CC  3  79 EF F0 F6  
0062E4  3  1E 78 1E 78          .byte 30,120,30,120,30,56,30,216,30,216,30,184,14,112,0,0,31,232,0,0,15,208,15,208,15,208,15,208,7,160,3,64
0062E8  3  1E 38 1E D8  
0062EC  3  1E D8 1E B8  
006304  3  07 9E 07 9E          .byte 7,158,7,158,7,142,7,182,7,182,7,174,3,156,0,0,7,250,0,0,3,244,3,244,3,244,3,244,1,232,0,208
006308  3  07 8E 07 B6  
00630C  3  07 B6 07 AE  
006324  3  81 E7 81 E7          .byte 129,231,129,231,129,227,129,237,129,237,129,235,0,231,0,0,129,254,0,0,0,253,0,253,0,253,0,253,0,122,0,52
006328  3  81 E3 81 ED  
00632C  3  81 ED 81 EB  
006344  3  E0 79 E0 79          .byte 224,121,224,121,224,120,96,123,96,123,224,122,192,57,0,0,160,127,0,0,64,63,64,63,64,63,64,63,128,30,0,13
006348  3  E0 78 60 7B  
00634C  3  60 7B E0 7A  
006364  3  03 C0 03 C0          .byte 3,192,3,192,3,192,3,192,3,192,3,192,3,192,0,0,31,232,0,0,15,208,15,208,15,208,15,208,7,160,3,64
006368  3  03 C0 03 C0  
00636C  3  03 C0 03 C0  
006384  3  00 F0 00 F0          .byte 0,240,0,240,0,240,0,240,0,240,0,240,0,240,0,0,7,250,0,0,3,244,3,244,3,244,3,244,1,232,0,208
006388  3  00 F0 00 F0  
00638C  3  00 F0 00 F0  
0063A4  3  00 3C 00 3C          .byte 0,60,0,60,0,60,0,60,0,60,0,60,0,60,0,0,129,254,0,0,0,253,0,253,0,253,0,253,0,122,0,52
0063A8  3  00 3C 00 3C  
0063AC  3  00 3C 00 3C  
0063C4  3  00 0F 00 0F          .byte 0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,0,160,127,0,0,64,63,64,63,64,63,64,63,128,30,0,13
0063C8  3  00 0F 00 0F  
0063CC  3  00 0F 00 0F  
0063E4  3  1E 78 1E 78          .byte 30,120,30,120,28,120,27,120,27,120,29,120,14,112,0,0,31,232,0,0,15,208,15,208,15,208,15,208,7,160,3,64
0063E8  3  1C 78 1B 78  
0063EC  3  1B 78 1D 78  
006404  3  07 9E 07 9E          .byte 7,158,7,158,7,30,6,222,6,222,7,94,3,156,0,0,7,250,0,0,3,244,3,244,3,244,3,244,1,232,0,208
006408  3  07 1E 06 DE  
00640C  3  06 DE 07 5E  
006424  3  81 E7 81 E7          .byte 129,231,129,231,129,199,129,183,129,183,129,215,0,231,0,0,129,254,0,0,0,253,0,253,0,253,0,253,0,122,0,52
006428  3  81 C7 81 B7  
00642C  3  81 B7 81 D7  
006444  3  E0 79 E0 79          .byte 224,121,224,121,224,113,224,109,224,109,224,117,192,57,0,0,160,127,0,0,64,63,64,63,64,63,64,63,128,30,0,13
006448  3  E0 71 E0 6D  
00644C  3  E0 6D E0 75  
006464  3  10 00 30 F8          .byte 16,0,48,248,81,116,83,240,240,0,240,96,157,224,144,96,240,224,113,192,85,128,51,0,18,0,0,0,0,0,0,0
006468  3  51 74 53 F0  
00646C  3  F0 00 F0 60  
006484  3  04 00 0C 3E          .byte 4,0,12,62,20,93,20,252,60,0,60,24,39,120,36,24,60,56,28,112,21,96,12,192,4,128,0,0,0,0,0,0
006488  3  14 5D 14 FC  
00648C  3  3C 00 3C 18  
0064A4  3  01 00 83 0F          .byte 1,0,131,15,69,23,5,63,15,0,15,6,9,222,9,6,15,14,7,28,5,88,3,48,1,32,0,0,0,0,0,0
0064A8  3  45 17 05 3F  
0064AC  3  0F 00 0F 06  
0064C4  3  00 40 E0 C3          .byte 0,64,224,195,209,69,193,79,3,192,131,193,130,119,130,65,131,195,1,199,1,86,0,204,0,72,0,0,0,0,0,0
0064C8  3  D1 45 C1 4F  
0064CC  3  03 C0 83 C1  
0064E4  3  10 00 30 F4          .byte 16,0,48,244,81,120,83,240,240,0,240,96,157,224,144,96,240,224,113,192,85,128,51,0,18,0,0,0,0,0,0,0
0064E8  3  51 78 53 F0  
0064EC  3  F0 00 F0 60  
006504  3  04 00 0C 3D          .byte 4,0,12,61,20,94,20,252,60,0,60,24,39,120,36,24,60,56,28,112,21,96,12,192,4,128,0,0,0,0,0,0
006508  3  14 5E 14 FC  
00650C  3  3C 00 3C 18  
006524  3  01 00 43 0F          .byte 1,0,67,15,133,23,5,63,15,0,15,6,9,222,9,6,15,14,7,28,5,88,3,48,1,32,0,0,0,0,0,0
006528  3  85 17 05 3F  
00652C  3  0F 00 0F 06  
006544  3  00 40 D0 C3          .byte 0,64,208,195,225,69,193,79,3,192,131,193,130,119,130,65,131,195,1,199,1,86,0,204,0,72,0,0,0,0,0,0
006548  3  E1 45 C1 4F  
00654C  3  03 C0 83 C1  
006564  3  10 00 30 F0          .byte 16,0,48,240,81,112,83,252,240,0,240,96,157,224,144,96,240,224,113,192,85,128,51,0,18,0,0,0,0,0,0,0
006568  3  51 70 53 FC  
00656C  3  F0 00 F0 60  
006584  3  04 00 0C 3C          .byte 4,0,12,60,20,92,20,255,60,0,60,24,39,120,36,24,60,56,28,112,21,96,12,192,4,128,0,0,0,0,0,0
006588  3  14 5C 14 FF  
00658C  3  3C 00 3C 18  
0065A4  3  01 00 03 0F          .byte 1,0,3,15,5,23,197,63,15,0,15,6,9,222,9,6,15,14,7,28,5,88,3,48,1,32,0,0,0,0,0,0
0065A8  3  05 17 C5 3F  
0065AC  3  0F 00 0F 06  
0065C4  3  00 40 C0 C3          .byte 0,64,192,195,193,69,241,79,3,192,131,193,130,119,130,65,131,195,1,199,1,86,0,204,0,72,0,0,0,0,0,0
0065C8  3  C1 45 F1 4F  
0065CC  3  03 C0 83 C1  
0065E4  3  10 00 30 F0          .byte 16,0,48,240,81,124,83,240,240,0,240,96,157,224,144,96,240,224,113,192,85,128,51,0,18,0,0,0,0,0,0,0
0065E8  3  51 7C 53 F0  
0065EC  3  F0 00 F0 60  
006604  3  04 00 0C 3C          .byte 4,0,12,60,20,95,20,252,60,0,60,24,39,120,36,24,60,56,28,112,21,96,12,192,4,128,0,0,0,0,0,0
006608  3  14 5F 14 FC  
00660C  3  3C 00 3C 18  
006624  3  01 00 03 0F          .byte 1,0,3,15,197,23,5,63,15,0,15,6,9,222,9,6,15,14,7,28,5,88,3,48,1,32,0,0,0,0,0,0
006628  3  C5 17 05 3F  
00662C  3  0F 00 0F 06  
006644  3  00 40 C0 C3          .byte 0,64,192,195,241,69,193,79,3,192,131,193,130,119,130,65,131,195,1,199,1,86,0,204,0,72,0,0,0,0,0,0
006648  3  F1 45 C1 4F  
00664C  3  03 C0 83 C1  
006664  3  07 E0 09 B0          .byte 7,224,9,176,11,144,14,112,8,16,70,98,225,135,90,90,55,236,7,224,3,192,12,48,223,251,238,119,80,10,56,28
006668  3  0B 90 0E 70  
00666C  3  08 10 46 62  
006684  3  01 F8 02 6C          .byte 1,248,2,108,2,228,3,156,2,4,145,152,248,97,150,150,13,251,1,248,0,240,3,12,247,254,251,157,148,2,14,7
006688  3  02 E4 03 9C  
00668C  3  02 04 91 98  
0066A4  3  00 7E 00 9B          .byte 0,126,0,155,0,185,0,231,0,129,36,102,126,24,165,165,195,126,0,126,0,60,0,195,189,255,126,231,165,0,195,129
0066A8  3  00 B9 00 E7  
0066AC  3  00 81 24 66  
0066C4  3  80 1F C0 26          .byte 128,31,192,38,64,46,192,57,64,32,137,25,31,134,105,105,176,223,128,31,0,15,192,48,239,127,223,185,41,64,112,224
0066C8  3  40 2E C0 39  
0066CC  3  40 20 89 19  
0066E4  3  07 E0 09 90          .byte 7,224,9,144,11,208,14,112,8,16,6,98,1,135,90,90,247,236,75,224,3,195,4,59,15,251,14,119,112,2,62,0
0066E8  3  0B D0 0E 70  
0066EC  3  08 10 06 62  
006704  3  01 F8 02 64          .byte 1,248,2,100,2,244,3,156,2,4,129,152,192,97,150,150,61,251,18,248,192,240,193,14,195,254,195,157,156,0,15,128
006708  3  02 F4 03 9C  
00670C  3  02 04 81 98  
006724  3  00 7E 00 99          .byte 0,126,0,153,0,189,0,231,0,129,32,102,112,24,165,165,207,126,4,190,48,60,176,67,176,255,112,231,39,0,3,224
006728  3  00 BD 00 E7  
00672C  3  00 81 20 66  
006744  3  80 1F 40 26          .byte 128,31,64,38,64,47,192,57,64,32,136,25,28,6,105,105,179,223,129,47,12,15,236,16,236,63,220,57,9,192,0,248
006748  3  40 2F C0 39  
00674C  3  40 20 88 19  
006764  3  07 E0 09 B0          .byte 7,224,9,176,13,144,15,240,8,16,71,226,225,135,90,90,55,236,7,224,3,192,12,48,223,251,238,119,80,10,56,28
006768  3  0D 90 0F F0  
00676C  3  08 10 47 E2  
006784  3  01 F8 02 6C          .byte 1,248,2,108,3,100,3,252,2,4,145,248,248,97,150,150,13,251,1,248,0,240,3,12,247,254,251,157,148,2,14,7
006788  3  03 64 03 FC  
00678C  3  02 04 91 F8  
0067A4  3  00 7E 00 9B          .byte 0,126,0,155,0,217,0,255,0,129,36,126,126,24,165,165,195,126,0,126,0,60,0,195,189,255,126,231,165,0,195,129
0067A8  3  00 D9 00 FF  
0067AC  3  00 81 24 7E  
0067C4  3  80 1F C0 26          .byte 128,31,192,38,64,54,192,63,64,32,137,31,31,134,105,105,176,223,128,31,0,15,192,48,239,127,223,185,41,64,112,224
0067C8  3  40 36 C0 3F  
0067CC  3  40 20 89 1F  
0067E4  3  07 E0 09 90          .byte 7,224,9,144,13,176,15,240,8,16,70,96,225,128,90,90,55,239,7,242,131,192,204,32,223,240,238,118,0,14,0,62
0067E8  3  0D B0 0F F0  
0067EC  3  08 10 46 60  
006804  3  01 F8 02 64          .byte 1,248,2,100,3,108,3,252,2,4,17,152,56,96,150,150,205,251,129,252,32,240,51,8,55,252,187,157,128,3,128,15
006808  3  03 6C 03 FC  
00680C  3  02 04 11 98  
006824  3  00 7E 00 99          .byte 0,126,0,153,0,219,0,255,0,129,4,102,14,24,165,165,243,126,32,127,8,60,12,194,13,255,110,231,224,0,224,3
006828  3  00 DB 00 FF  
00682C  3  00 81 04 66  
006844  3  80 1F 40 26          .byte 128,31,64,38,192,54,192,63,64,32,129,25,3,134,105,105,188,223,200,31,2,15,131,48,195,127,219,185,56,0,248,0
006848  3  C0 36 C0 3F  
00684C  3  40 20 81 19  
006864  3  00 00 00 00          .byte 0,0,0,0,0,16,1,239,0,16,1,208,2,208,7,216,0,24,3,216,4,24,11,224,0,0,0,216,0,48,0,96
006868  3  00 10 01 EF  
00686C  3  00 10 01 D0  
006884  3  00 00 00 00          .byte 0,0,0,0,0,4,192,123,0,4,0,116,0,180,1,246,0,6,0,246,1,6,2,248,0,0,0,54,0,12,0,24
006888  3  00 04 C0 7B  
00688C  3  00 04 00 74  
0068A4  3  00 00 00 00          .byte 0,0,0,0,0,1,240,30,0,1,0,29,0,45,128,125,128,1,128,61,128,65,0,190,0,0,128,13,0,3,0,6
0068A8  3  00 01 F0 1E  
0068AC  3  00 01 00 1D  
0068C4  3  00 00 00 00          .byte 0,0,0,0,64,0,188,7,64,0,64,7,64,11,96,31,96,0,96,15,96,16,128,47,0,0,96,3,192,0,128,1
0068C8  3  40 00 BC 07  
0068CC  3  40 00 40 07  
0068E4  3  00 00 00 00          .byte 0,0,0,0,0,16,0,108,0,16,1,208,2,208,7,216,0,24,3,216,4,24,11,224,0,0,0,216,0,24,0,48
0068E8  3  00 10 00 6C  
0068EC  3  00 10 01 D0  
006904  3  00 00 00 00          .byte 0,0,0,0,0,4,0,27,0,4,0,116,0,180,1,246,0,6,0,246,1,6,2,248,0,0,0,54,0,6,0,12
006908  3  00 04 00 1B  
00690C  3  00 04 00 74  
006924  3  00 00 00 00          .byte 0,0,0,0,0,1,192,6,0,1,0,29,0,45,128,125,128,1,128,61,128,65,0,190,0,0,128,13,128,1,0,3
006928  3  00 01 C0 06  
00692C  3  00 01 00 1D  
006944  3  00 00 00 00          .byte 0,0,0,0,64,0,176,1,64,0,64,7,64,11,96,31,96,0,96,15,96,16,128,47,0,0,96,3,96,0,192,0
006948  3  40 00 B0 01  
00694C  3  40 00 40 07  
006964  3  00 00 00 00          .byte 0,0,0,0,0,16,0,16,0,16,1,208,2,208,7,216,0,24,3,216,4,24,11,224,0,0,0,216,0,28,0,8
006968  3  00 10 00 10  
00696C  3  00 10 01 D0  
006984  3  00 00 00 00          .byte 0,0,0,0,0,4,0,4,0,4,0,116,0,180,1,246,0,6,0,246,1,6,2,248,0,0,0,54,0,7,0,2
006988  3  00 04 00 04  
00698C  3  00 04 00 74  
0069A4  3  00 00 00 00          .byte 0,0,0,0,0,1,0,1,0,1,0,29,0,45,128,125,128,1,128,61,128,65,0,190,0,0,128,13,192,1,128,0
0069A8  3  00 01 00 01  
0069AC  3  00 01 00 1D  
0069C4  3  00 00 00 00          .byte 0,0,0,0,64,0,64,0,64,0,64,7,64,11,96,31,96,0,96,15,96,16,128,47,0,0,96,3,112,0,32,0
0069C8  3  40 00 40 00  
0069CC  3  40 00 40 07  
0069E4  3  00 00 00 00          .byte 0,0,0,0,0,16,0,108,0,16,1,208,2,208,7,216,0,24,3,216,4,24,11,224,0,0,0,216,0,24,0,48
0069E8  3  00 10 00 6C  
0069EC  3  00 10 01 D0  
006A04  3  00 00 00 00          .byte 0,0,0,0,0,4,0,27,0,4,0,116,0,180,1,246,0,6,0,246,1,6,2,248,0,0,0,54,0,6,0,12
006A08  3  00 04 00 1B  
006A0C  3  00 04 00 74  
006A24  3  00 00 00 00          .byte 0,0,0,0,0,1,192,6,0,1,0,29,0,45,128,125,128,1,128,61,128,65,0,190,0,0,128,13,128,1,0,3
006A28  3  00 01 C0 06  
006A2C  3  00 01 00 1D  
006A44  3  00 00 00 00          .byte 0,0,0,0,64,0,176,1,64,0,64,7,64,11,96,31,96,0,96,15,96,16,128,47,0,0,96,3,96,0,192,0
006A48  3  40 00 B0 01  
006A4C  3  40 00 40 07  
006A64  3               frmlst:
006A64  3  00 01                .byte 0,1
006A66  3  01 01                .byte 1,1
006A68  3  02 01                .byte 2,1
006A6A  3  03 01                .byte 3,1
006A6C  3  04 01                .byte 4,1
006A6E  3  05 04                .byte 5,4
006A70  3  09 04                .byte 9,4
006A72  3  0D 04                .byte 13,4
006A74  3  11 04                .byte 17,4
006A76  3  15 04                .byte 21,4
006A78  3  19 04                .byte 25,4
006A7A  3  1D 04                .byte 29,4
006A7C  3  21 04                .byte 33,4
006A7E  3  25 04                .byte 37,4
006A80  3  29 04                .byte 41,4
006A82  3  2D 04                .byte 45,4
006A84  3  31 04                .byte 49,4
006A86  3  35 04 39 00          .byte 53,4,57,0
006A8A  3               scdat:
006A8A  3  4B 01 44 01          .word 331,324,312,207,312,324,208,194,207,317,297,279,201,202,181,326,166,147,143,218,132
006A8E  3  38 01 CF 00  
006A92  3  38 01 44 01  
006AB4  3  FF 00 33 06          .byte 255,0,51,6,6,6,255,0,22,31,8,31,0,0,0,7,255,0,8,1,1,2,0,0,1,1,2,0,0,1,1,2,0,0
006AB8  3  06 06 FF 00  
006ABC  3  16 1F 08 1F  
006AD6  3  01 13 02 00          .byte 1,19,2,0,0,1,1,2,0,0,1,1,2,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4
006ADA  3  00 01 01 02  
006ADE  3  00 00 01 01  
006AF7  3  00 00 03 05          .byte 0,0,3,5,4,0,0,3,5,4,255,0,42,6,6,6,255,0,17,31,8,31,255,0,8,7,0,0,0,31,9,31,0,0
006AFB  3  04 00 00 03  
006AFF  3  05 04 FF 00  
006B19  3  1F 08 1F FF          .byte 31,8,31,255,0,7,1,19,2,0,0,1,1,2,0,0,1,1,2,0,0,1,19,2,0,0,1,19,2,0,0,1,1
006B1D  3  00 07 01 13  
006B21  3  02 00 00 01  
006B3A  3  02 00 00 03          .byte 2,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,255,0,47
006B3E  3  05 04 00 00  
006B42  3  03 05 04 00  
006B5C  3  06 06 06 FF          .byte 6,6,6,255,0,12,31,9,31,255,0,7,31,8,31,0,0,0,7,0,0,0,31,9,31,0,0,31,8,31,0,0,1
006B60  3  00 0C 1F 09  
006B64  3  1F FF 00 07  
006B7D  3  13 02 00 00          .byte 19,2,0,0,1,1,2,0,0,1,19,2,0,0,1,1,2,0,0,1,19,2,0,0,1,19,2,0,0,3,5,4,0,0
006B81  3  01 01 02 00  
006B85  3  00 01 13 02  
006B9F  3  03 05 04 00          .byte 3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,255,0,72,31,9,31,255,0,12,31
006BA3  3  00 03 05 04  
006BA7  3  00 00 03 05  
006BC0  3  09 1F 00 00          .byte 9,31,0,0,1,1,2,0,0,1,1,2,0,0,1,19,2,0,0,1,1,2,0,0,1,1,2,0,0,1,19,2,0,0
006BC4  3  01 01 02 00  
006BC8  3  00 01 01 02  
006BE2  3  03 05 04 00          .byte 3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0
006BE6  3  00 03 05 04  
006BEA  3  00 00 03 05  
006BFF  3  FF 00 47 1F          .byte 255,0,71,31,8,31,255,0,7,31,8,31,255,0,7,10,11,12,0,0,10,11,12,0,0,10,17,12,0,0,10,11,12
006C03  3  08 1F FF 00  
006C07  3  07 1F 08 1F  
006C20  3  00 00 0A 11          .byte 0,0,10,17,12,0,0,10,11,12,0,0,13,14,15,0,0,13,14,15,0,0,13,14,15,0,0,13,14,15,0,0,13
006C24  3  0C 00 00 0A  
006C28  3  0B 0C 00 00  
006C41  3  0E 0F 00 00          .byte 14,15,0,0,13,14,15,255,0,62,31,8,31,255,0,7,31,9,31,0,0,0,16,0,0,0,31,9,31,0,0,31,8
006C45  3  0D 0E 0F FF  
006C49  3  00 3E 1F 08  
006C62  3  1F 00 00 0A          .byte 31,0,0,10,17,12,0,0,10,11,12,0,0,10,17,12,0,0,10,11,12,0,0,10,17,12,0,0,10,17,12,0,0
006C66  3  11 0C 00 00  
006C6A  3  0A 0B 0C 00  
006C83  3  0D 0E 0F 00          .byte 13,14,15,0,0,13,14,15,0,0,13,14,15,0,0,13,14,15,0,0,13,14,15,0,0,13,14,15,255,0,62,31,9
006C87  3  00 0D 0E 0F  
006C8B  3  00 00 0D 0E  
006CA4  3  1F 00 00 1F          .byte 31,0,0,31,8,31,0,0,0,16,255,0,8,31,8,31,0,0,31,9,31,0,0,10,17,12,0,0,10,17,12,0,0
006CA8  3  08 1F 00 00  
006CAC  3  00 10 FF 00  
006CC5  3  0A 0B 0C 00          .byte 10,11,12,0,0,10,11,12,0,0,10,17,12,0,0,10,17,12,0,0,13,14,15,0,0,13,14,15,0,0,13,14,15
006CC9  3  00 0A 0B 0C  
006CCD  3  00 00 0A 11  
006CE6  3  00 00 0D 0E          .byte 0,0,13,14,15,0,0,13,14,15,0,0,13,14,15,255,0,67,31,9,31,255,0,8,16,0,0,0,31,9,31,255,0,7
006CEA  3  0F 00 00 0D  
006CEE  3  0E 0F 00 00  
006D08  3  0A 0B 0C 00          .byte 10,11,12,0,0,10,17,12,0,0,10,11,12,0,0,10,11,12,0,0,10,17,12,0,0,10,11,12,0,0,13,14,15
006D0C  3  00 0A 11 0C  
006D10  3  00 00 0A 0B  
006D29  3  00 00 0D 0E          .byte 0,0,13,14,15,0,0,13,14,15,0,0,13,14,15,0,0,13,14,15,0,0,13,14,15,0
006D2D  3  0F 00 00 0D  
006D31  3  0E 0F 00 00  
006D43  3  FF 00 47 1F          .byte 255,0,71,31,8,31,255,0,12,31,8,31,0,0,20,21,22,0,0,20,21,22,0,0,20,26,22,0,0,20,21,22,0,0
006D47  3  08 1F FF 00  
006D4B  3  0C 1F 08 1F  
006D65  3  14 15 16 00          .byte 20,21,22,0,0,20,26,22,0,0,23,24,25,0,0,23,24,25,0,0,23,24,25,0,0,23,24,25,0,0,23,24,25
006D69  3  00 14 1A 16  
006D6D  3  00 00 17 18  
006D86  3  00 00 17 18          .byte 0,0,23,24,25,255,0,62,31,8,31,255,0,7,31,9,31,255,0,7,31,8,31,0,0,31,9,31,0,0,20,26,22
006D8A  3  19 FF 00 3E  
006D8E  3  1F 08 1F FF  
006DA7  3  00 00 14 15          .byte 0,0,20,21,22,0,0,20,26,22,0,0,20,21,22,0,0,20,26,22,0,0,20,26,22,0,0,23,24,25,0,0,23
006DAB  3  16 00 00 14  
006DAF  3  1A 16 00 00  
006DC8  3  18 19 00 00          .byte 24,25,0,0,23,24,25,0,0,23,24,25,0,0,23,24,25,0,0,23,24,25,255,0,62,31,9,31,0,0,31,8,31
006DCC  3  17 18 19 00  
006DD0  3  00 17 18 19  
006DE9  3  FF 00 07 1F          .byte 255,0,7,31,8,31,0,0,31,9,31,255,0,7,20,26,22,0,0,20,26,22,0,0,20,21,22,0,0,20,26,22,0,0
006DED  3  08 1F 00 00  
006DF1  3  1F 09 1F FF  
006E0B  3  14 1A 16 00          .byte 20,26,22,0,0,20,21,22,0,0,23,24,25,0,0,23,24,25,0,0,23,24,25,0,0,23,24,25,0,0,23,24,25
006E0F  3  00 14 15 16  
006E13  3  00 00 17 18  
006E2C  3  00 00 17 18          .byte 0,0,23,24,25,255,0,67,31,9,31,255,0,7,31,9,31,255,0,12,20,21,22,0,0,20,26,22,0,0,20,21,22
006E30  3  19 FF 00 43  
006E34  3  1F 09 1F FF  
006E4D  3  00 00 14 1A          .byte 0,0,20,26,22,0,0,20,21,22,0,0,20,21,22,0,0,23,24,25,0,0,23,24,25,0,0,23,24,25,0,0,23
006E51  3  16 00 00 14  
006E55  3  15 16 00 00  
006E6E  3  18 19 00 00          .byte 24,25,0,0,23,24,25,0,0,23,24,25,0
006E72  3  17 18 19 00  
006E76  3  00 17 18 19  
006E7B  3  FF 00 42 1F          .byte 255,0,66,31,8,31,0,0,18,18,0,0,0,31,8,31,255,0,12,27,28,29,0,0,27,28,29,0,0,27,28,29,0,0
006E7F  3  08 1F 00 00  
006E83  3  12 12 00 00  
006E9D  3  1B 1C 1D 00          .byte 27,28,29,0,0,27,28,29,0,0,27,28,29,255,0,92,31,8,31,0,0,31,9,31,255,0,7,31,9,31,255,0,7
006EA1  3  00 1B 1C 1D  
006EA5  3  00 00 1B 1C  
006EBE  3  1F 08 1F 00          .byte 31,8,31,0,0,27,28,29,0,0,27,28,29,0,0,27,28,29,0,0,27,28,29,0,0,27,28,29,0,0,27,28,29
006EC2  3  00 1B 1C 1D  
006EC6  3  00 00 1B 1C  
006EDF  3  FF 00 5C 1F          .byte 255,0,92,31,9,31,0,0,31,8,31,0,0,18,18,0,0,0,31,8,31,255,0,7,31,9,31,0,0,27,28,29,0,0
006EE3  3  09 1F 00 00  
006EE7  3  1F 08 1F 00  
006F01  3  1B 1C 1D 00          .byte 27,28,29,0,0,27,28,29,0,0,27,28,29,0,0,27,28,29,0,0,27,28,29,255,0,97,31,9,31,0,0,18,18
006F05  3  00 1B 1C 1D  
006F09  3  00 00 1B 1C  
006F22  3  00 00 00 1F          .byte 0,0,0,31,9,31,255,0,12,27,28,29,0,0,27,28,29,0,0,27,28,29,0,0,27,28,29,0,0,27,28,29,0,0
006F26  3  09 1F FF 00  
006F2A  3  0C 1B 1C 1D  
006F44  3  1B 1C 1D FF          .byte 27,28,29,255,0,31
006F48  3  00 1F        
006F4A  3  FF 00 42 1F          .byte 255,0,66,31,8,31,255,0,12,31,8,31,255,0,7,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34
006F4E  3  08 1F FF 00  
006F52  3  0C 1F 08 1F  
006F6B  3  00 00 20 21          .byte 0,0,32,33,34,0,0,32,33,34,0,0,35,36,37,0,0,35,36,37,0,0,35,36,37,0,0,35,30,37,0,0,35
006F6F  3  22 00 00 20  
006F73  3  21 22 00 00  
006F8C  3  24 25 00 00          .byte 36,37,0,0,35,36,37,255,0,62,31,8,31,0,0,31,9,31,255,0,7,31,8,31,0,0,31,9,31,255,0,7,32
006F90  3  23 24 25 FF  
006F94  3  00 3E 1F 08  
006FAD  3  21 22 00 00          .byte 33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,35,36,37,0,0
006FB1  3  20 21 22 00  
006FB5  3  00 20 21 22  
006FCF  3  23 24 25 00          .byte 35,36,37,0,0,35,30,37,0,0,35,36,37,0,0,35,36,37,0,0,35,36,37,255,0,62,31,9,31,255,0,7,31
006FD3  3  00 23 1E 25  
006FD7  3  00 00 23 24  
006FF0  3  08 1F 00 00          .byte 8,31,0,0,31,9,31,255,0,7,31,8,31,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34
006FF4  3  1F 09 1F FF  
006FF8  3  00 07 1F 08  
007011  3  00 00 20 21          .byte 0,0,32,33,34,0,0,32,33,34,0,0,35,36,37,0,0,35,36,37,0,0,35,36,37,0,0,35,36,37,0,0,35
007015  3  22 00 00 20  
007019  3  21 22 00 00  
007032  3  1E 25 00 00          .byte 30,37,0,0,35,36,37,255,0,72,31,9,31,255,0,12,31,9,31,0,0,32,33,34,0,0,32,33,34,0,0,32,33
007036  3  23 24 25 FF  
00703A  3  00 48 1F 09  
007053  3  22 00 00 20          .byte 34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,35,36,37,0,0,35,36,37,0,0,35,36,37,0,0
007057  3  21 22 00 00  
00705B  3  20 21 22 00  
007074  3  23 24 25 00          .byte 35,36,37,0,0,35,36,37,0,0,35,36,37,0
007078  3  00 23 24 25  
00707C  3  00 00 23 24  
007082  3  FF 00 3D 1F          .byte 255,0,61,31,8,31,0,0,0,18,255,0,13,31,8,31,255,0,7,38,39,40,0,0,38,39,40,0,0,38,39,40,0,0
007086  3  08 1F 00 00  
00708A  3  00 12 FF 00  
0070A4  3  26 27 28 00          .byte 38,39,40,0,0,38,39,40,0,0,38,39,40,0,0,41,42,43,0,0,41,42,43,0,0,41,42,43,0,0,41,42,43
0070A8  3  00 26 27 28  
0070AC  3  00 00 26 27  
0070C5  3  00 00 29 2A          .byte 0,0,41,42,43,0,0,41,42,43,255,0,62,31,9,31,255,0,7,31,8,31,0,0,0,18,0,0,0,31,9,31,0,0
0070C9  3  2B 00 00 29  
0070CD  3  2A 2B FF 00  
0070E7  3  1F 08 1F 00          .byte 31,8,31,0,0,38,39,40,0,0,38,39,40,0,0,38,39,40,0,0,38,39,40,0,0,38,39,40,0,0,38,39,40
0070EB  3  00 26 27 28  
0070EF  3  00 00 26 27  
007108  3  00 00 29 2A          .byte 0,0,41,42,43,0,0,41,42,43,0,0,41,42,43,0,0,41,42,43,0,0,41,42,43,0,0,41,42,43,255,0,67
00710C  3  2B 00 00 29  
007110  3  2A 2B 00 00  
007129  3  1F 08 1F 00          .byte 31,8,31,0,0,31,9,31,0,0,0,18,0,0,0,31,8,31,0,0,31,9,31,0,0,38,39,40,0,0,38,39,40
00712D  3  00 1F 09 1F  
007131  3  00 00 00 12  
00714A  3  00 00 26 27          .byte 0,0,38,39,40,0,0,38,39,40,0,0,38,39,40,0,0,38,39,40,0,0,41,42,43,0,0,41,42,43,0,0,41
00714E  3  28 00 00 26  
007152  3  27 28 00 00  
00716B  3  2A 2B 00 00          .byte 42,43,0,0,41,42,43,0,0,41,42,43,0,0,41,42,43,255,0,67,31,9,31,255,0,12,31,9,31,255,0,7,38
00716F  3  29 2A 2B 00  
007173  3  00 29 2A 2B  
00718C  3  27 28 00 00          .byte 39,40,0,0,38,39,40,0,0,38,39,40,0,0,38,39,40,0,0,38,39,40,0,0,38,39,40,0,0,41,42,43,0,0
007190  3  26 27 28 00  
007194  3  00 26 27 28  
0071AE  3  29 2A 2B 00          .byte 41,42,43,0,0,41,42,43,0,0,41,42,43,0,0,41,42,43,0,0,41,42,43,0
0071B2  3  00 29 2A 2B  
0071B6  3  00 00 29 2A  
0071C6  3  FF 00 3D 1F          .byte 255,0,61,31,8,31,255,0,12,31,8,31,255,0,12,44,45,46,0,0,44,45,46,0,0,44,45,46,0,0,44,45,46
0071CA  3  08 1F FF 00  
0071CE  3  0C 1F 08 1F  
0071E7  3  00 00 2C 2D          .byte 0,0,44,45,46,0,0,44,45,46,255,0,92,31,9,31,0,0,31,8,31,0,0,6,6,0,0,0,31,9,31,255,0,7
0071EB  3  2E 00 00 2C  
0071EF  3  2D 2E FF 00  
007209  3  1F 08 1F 00          .byte 31,8,31,0,0,44,45,46,0,0,44,45,46,0,0,44,45,46,0,0,44,45,46,0,0,44,45,46,0,0,44,45,46
00720D  3  00 2C 2D 2E  
007211  3  00 00 2C 2D  
00722A  3  FF 00 5C 1F          .byte 255,0,92,31,8,31,0,0,31,9,31,255,0,7,6,6,0,0,0,31,8,31,0,0,31,9,31,0,0,44,45,46,0,0
00722E  3  08 1F 00 00  
007232  3  1F 09 1F FF  
00724C  3  2C 2D 2E 00          .byte 44,45,46,0,0,44,45,46,0,0,44,45,46,0,0,44,45,46,0,0,44,45,46,255,0,92,31,9,31,255,0,7,6,6
007250  3  00 2C 2D 2E  
007254  3  00 00 2C 2D  
00726E  3  FF 00 08 1F          .byte 255,0,8,31,9,31,255,0,7,44,45,46,0,0,44,45,46,0,0,44,45,46,0,0,44,45,46,0,0,44,45,46,0,0
007272  3  09 1F FF 00  
007276  3  07 2C 2D 2E  
007290  3  2C 2D 2E FF          .byte 44,45,46,255,0,31
007294  3  00 1F        
007296  3  FF 00 42 1F          .byte 255,0,66,31,8,31,255,0,17,31,8,31,0,0,47,48,49,0,0,47,48,49,0,0,47,50,49,0,0,47,48,49,0,0
00729A  3  08 1F FF 00  
00729E  3  11 1F 08 1F  
0072B8  3  2F 30 31 00          .byte 47,48,49,0,0,47,48,49,255,0,92,31,8,31,0,0,31,9,31,255,0,7,31,8,31,255,0,7,31,9,31,0,0
0072BC  3  00 2F 30 31  
0072C0  3  FF 00 5C 1F  
0072D9  3  2F 30 31 00          .byte 47,48,49,0,0,47,48,49,0,0,47,48,49,0,0,47,48,49,0,0,47,48,49,0,0,47,48,49,255,0,92,31,9
0072DD  3  00 2F 30 31  
0072E1  3  00 00 2F 30  
0072FA  3  1F 00 00 1F          .byte 31,0,0,31,8,31,255,0,7,31,9,31,0,0,31,8,31,255,0,7,47,48,49,0,0,47,48,49,0,0,47,50,49
0072FE  3  08 1F FF 00  
007302  3  07 1F 09 1F  
00731B  3  00 00 2F 30          .byte 0,0,47,48,49,0,0,47,48,49,0,0,47,48,49,255,0,97,31,9,31,255,0,12,31,9,31,255,0,7,47,48,49
00731F  3  31 00 00 2F  
007323  3  30 31 00 00  
00733C  3  00 00 2F 30          .byte 0,0,47,48,49,0,0,47,48,49,0,0,47,50,49,0,0,47,48,49,0,0,47,48,49,255,0,31
007340  3  31 00 00 2F  
007344  3  30 31 00 00  
007358  3  FF 00 3D 1F          .byte 255,0,61,31,8,31,255,0,12,18,18,255,0,8,31,8,31,0,0,51,52,53,0,0,51,52,53,0,0,51,52,53,0,0
00735C  3  08 1F FF 00  
007360  3  0C 12 12 FF  
00737A  3  33 34 35 00          .byte 51,52,53,0,0,51,52,53,0,0,51,52,53,255,0,92,31,9,31,0,0,31,8,31,255,0,7,18,18,0,0,0,31
00737E  3  00 33 34 35  
007382  3  00 00 33 34  
00739B  3  08 1F 00 00          .byte 8,31,0,0,31,9,31,0,0,51,52,53,0,0,51,52,53,0,0,51,52,53,0,0,51,52,53,0,0,51,52,53,0,0
00739F  3  1F 09 1F 00  
0073A3  3  00 33 34 35  
0073BD  3  33 34 35 FF          .byte 51,52,53,255,0,92,31,8,31,0,0,31,9,31,0,0,18,18,0,0,0,31,8,31,0,0,31,9,31,255,0,7,51
0073C1  3  00 5C 1F 08  
0073C5  3  1F 00 00 1F  
0073DE  3  34 35 00 00          .byte 52,53,0,0,51,52,53,0,0,51,52,53,0,0,51,52,53,0,0,51,52,53,0,0,51,52,53,255,0,92,31,9,31
0073E2  3  33 34 35 00  
0073E6  3  00 33 34 35  
0073FF  3  FF 00 0C 1F          .byte 255,0,12,31,9,31,255,0,12,51,52,53,0,0,51,52,53,0,0,51,52,53,0,0,51,52,53,0,0,51,52,53,0,0
007403  3  09 1F FF 00  
007407  3  0C 33 34 35  
007421  3  33 34 35 FF          .byte 51,52,53,255,0,31
007425  3  00 1F        
007427  3  FF 00 47 1F          .byte 255,0,71,31,8,31,0,0,0,6,0,0,0,31,8,31,255,0,7,54,55,56,0,0,54,55,56,0,0,54,55,56,0,0
00742B  3  08 1F 00 00  
00742F  3  00 06 00 00  
007449  3  36 32 38 00          .byte 54,50,56,0,0,54,55,56,0,0,54,55,56,0,0,65,64,65,0,0,0,65,64,0,0,65,64,0,0,0,65,64,255,0,4
00744D  3  00 36 37 38  
007451  3  00 00 36 37  
00746C  3  40 41 00 00          .byte 64,65,0,0,64,65,64,255,0,67,31,8,31,0,0,31,9,31,255,0,7,31,9,31,0,0,31,8,31,0,0,54,55
007470  3  40 41 40 FF  
007474  3  00 43 1F 08  
00748D  3  38 00 00 36          .byte 56,0,0,54,55,56,0,0,54,55,56,0,0,54,55,56,0,0,54,55,56,0,0,54,55,56,0,0,0,64,65,0,0
007491  3  37 38 00 00  
007495  3  36 37 38 00  
0074AE  3  40 41 FF 00          .byte 64,65,255,0,4,64,64,0,0,0,65,64,0,0,0,64,65,0,0,0,64,64,255,0,62,31,8,31,0,0,31,9,31
0074B2  3  04 40 40 00  
0074B6  3  00 00 41 40  
0074CF  3  00 00 00 06          .byte 0,0,0,6,0,0,0,31,8,31,255,0,7,31,9,31,0,0,54,55,56,0,0,54,55,56,0,0,54,50,56,0,0
0074D3  3  00 00 00 1F  
0074D7  3  08 1F FF 00  
0074F0  3  36 37 38 00          .byte 54,55,56,0,0,54,55,56,0,0,54,55,56,0,0,64,65,64,0,0,65,64,0,0,0,64,0,64,0,0,0,65,65
0074F4  3  00 36 37 38  
0074F8  3  00 00 36 37  
007511  3  00 00 00 40          .byte 0,0,0,64,65,0,0,64,65,64,255,0,62,31,9,31,255,0,12,31,9,31,255,0,12,54,55,56,0,0,54,55,56
007515  3  41 00 00 40  
007519  3  41 40 FF 00  
007532  3  00 00 36 37          .byte 0,0,54,55,56,0,0,54,55,56,0,0,54,55,56,0,0,54,55,56,0,0,65,64,255,0,4,65,64,0,0,64,0
007536  3  38 00 00 36  
00753A  3  37 38 00 00  
007553  3  40 00 00 00          .byte 64,0,0,0,65,0,0,0,65,65,65,0,0,0,64,65,0
007557  3  41 00 00 00  
00755B  3  41 41 41 00  
007564  3  FF 00 51 1F          .byte 255,0,81,31,8,31,255,0,7,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0
007568  3  08 1F FF 00  
00756C  3  07 20 21 22  
007586  3  20 21 22 00          .byte 32,33,34,0,0,57,58,59,0,0,57,58,59,0,0,57,58,59,0,0,57,58,59,0,0,57,58,59,0,0,57,58,59
00758A  3  00 39 3A 3B  
00758E  3  00 00 39 3A  
0075A7  3  FF 00 43 1F          .byte 255,0,67,31,8,31,255,0,12,31,9,31,255,0,7,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34
0075AB  3  08 1F FF 00  
0075AF  3  0C 1F 09 1F  
0075C8  3  00 00 20 21          .byte 0,0,32,33,34,0,0,32,33,34,0,0,57,58,59,0,0,57,58,59,0,0,58,58,59,0,0,57,58,59,0,0,57
0075CC  3  22 00 00 20  
0075D0  3  21 22 00 00  
0075E9  3  3A 3B 00 00          .byte 58,59,0,0,57,58,59,255,0,62,31,8,31,0,0,31,9,31,255,0,7,31,8,31,255,0,12,32,33,34,0,0,32
0075ED  3  39 3A 3B FF  
0075F1  3  00 3E 1F 08  
00760A  3  21 22 00 00          .byte 33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,57,58,59,0,0,57,58,59,0,0
00760E  3  20 21 22 00  
007612  3  00 20 21 22  
00762C  3  39 3A 3B 00          .byte 57,58,59,0,0,57,58,59,0,0,57,58,59,0,0,57,58,59,255,0,62,31,9,31,255,0,7,18,18,18,0,0,31
007630  3  00 39 3A 3B  
007634  3  00 00 39 3A  
00764D  3  09 1F FF 00          .byte 9,31,255,0,12,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34,0,0,32,33,34
007651  3  0C 20 21 22  
007655  3  00 00 20 21  
00766E  3  00 00 39 3A          .byte 0,0,57,58,59,0,0,57,58,59,0,0,57,58,59,0,0,57,58,59,0,0,57,58,59,0,0,57,58,59,0
007672  3  3B 00 00 39  
007676  3  3A 3B 00 00  
00768D  3  FF 00 56 1F          .byte 255,0,86,31,8,31,0,0,60,61,62,0,0,60,61,62,0,0,60,61,62,0,0,60,61,62,0,0,60,61,62,0,0
007691  3  08 1F 00 00  
007695  3  3C 3D 3E 00  
0076AE  3  3C 3D 3E 00          .byte 60,61,62,0,0,63,63,63,0,0,63,63,63,0,0,63,63,63,0,0,63,63,63,0,0,63,63,63,0,0,63,63,63
0076B2  3  00 3F 3F 3F  
0076B6  3  00 00 3F 3F  
0076CF  3  FF 00 3E 1F          .byte 255,0,62,31,8,31,255,0,22,31,9,31,0,0,60,61,62,0,0,60,61,62,0,0,60,61,62,0,0,60,61,62,0,0
0076D3  3  08 1F FF 00  
0076D7  3  16 1F 09 1F  
0076F1  3  3C 3D 3E 00          .byte 60,61,62,0,0,60,61,62,0,0,63,63,63,0,0,63,63,63,0,0,63,63,63,0,0,63,63,63,0,0,63,63,63
0076F5  3  00 3C 3D 3E  
0076F9  3  00 00 3F 3F  
007712  3  00 00 3F 3F          .byte 0,0,63,63,63,255,0,62,31,9,31,255,0,7,31,8,31,255,0,17,60,61,62,0,0,60,61,62,0,0,60,61,62
007716  3  3F FF 00 3E  
00771A  3  1F 09 1F FF  
007733  3  00 00 3C 3D          .byte 0,0,60,61,62,0,0,60,61,62,0,0,60,61,62,0,0,63,63,63,0,0,63,63,63,0,0,63,63,63,0,0,63,63,63
007737  3  3E 00 00 3C  
00773B  3  3D 3E 00 00  
007756  3  00 00 3F 3F          .byte 0,0,63,63,63,0,0,63,63,63,255,0,72,31,9,31,255,0,17,60,61,62,0,0,60,61,62,0,0,60,61,62,0,0
00775A  3  3F 00 00 3F  
00775E  3  3F 3F FF 00  
007778  3  3C 3D 3E 00          .byte 60,61,62,0,0,60,61,62,0,0,60,61,62,0,0,63,63,63,0,0,63,63,63,0,0,63,63,63,0,0,63,63,63
00777C  3  00 3C 3D 3E  
007780  3  00 00 3C 3D  
007799  3  00 00 3F 3F          .byte 0,0,63,63,63,0,0,63,63,63,0
00779D  3  3F 00 00 3F  
0077A1  3  3F 3F 00     
0077A4  3  FF 00 47 1F          .byte 255,0,71,31,8,31,255,0,17,66,67,68,0,0,66,67,68,0,0,66,67,68,0,0,66,67,68,0,0,66,67,68,0,0
0077A8  3  08 1F FF 00  
0077AC  3  11 42 43 44  
0077C6  3  42 43 44 FF          .byte 66,67,68,255,0,68,72,255,0,23,31,8,31,0,0,69,70,71,0,0,31,9,31,0,0,31,8,31,255,0,12,66,67
0077CA  3  00 44 48 FF  
0077CE  3  00 17 1F 08  
0077E7  3  44 00 00 42          .byte 68,0,0,66,67,68,0,0,66,67,68,0,0,66,67,68,0,0,66,67,68,0,0,66,67,68,255,0,92,31,9,31,0,0
0077EB  3  43 44 00 00  
0077EF  3  42 43 44 00  
007809  3  1F 08 1F FF          .byte 31,8,31,255,0,7,31,9,31,255,0,7,31,8,31,0,0,66,67,68,0,0,66,67,68,0,0,66,67,68,0,0,66
00780D  3  00 07 1F 09  
007811  3  1F FF 00 07  
00782A  3  43 44 00 00          .byte 67,68,0,0,66,67,68,0,0,66,67,68,255,0,78,72,255,0,18,31,9,31,255,0,7,69,70,71,255,0,7,31,9
00782E  3  42 43 44 00  
007832  3  00 42 43 44  
00784B  3  1F 00 00 42          .byte 31,0,0,66,67,68,0,0,66,67,68,0,0,66,67,68,0,0,66,67,68,0,0,66,67,68,0,0,66,67,68,255,0,31
00784F  3  43 44 00 00  
007853  3  42 43 44 00  
00786D  3  FF 00 47 1F          .byte 255,0,71,31,8,31,255,0,17,73,74,75,0,0,73,74,75,0,0,73,74,75,0,0,73,74,75,0,0,73,74,75,0,0
007871  3  08 1F FF 00  
007875  3  11 49 4A 4B  
00788F  3  49 4A 4B FF          .byte 73,74,75,255,0,24,64,255,0,77,31,9,31,255,0,7,31,8,31,255,0,7,73,74,75,0,0,73,74,75,0,0,73
007893  3  00 18 40 FF  
007897  3  00 4D 1F 09  
0078B0  3  4A 4B 00 00          .byte 74,75,0,0,73,74,75,0,0,73,74,75,0,0,73,74,75,255,0,19,65,255,0,77,31,8,31,255,0,12,31,9,31
0078B4  3  49 4A 4B 00  
0078B8  3  00 49 4A 4B  
0078D1  3  00 00 1F 08          .byte 0,0,31,8,31,0,0,73,74,75,0,0,73,74,75,0,0,73,74,75,0,0,73,74,75,0,0,73,74,75,0,0,73
0078D5  3  1F 00 00 49  
0078D9  3  4A 4B 00 00  
0078F2  3  4A 4B FF 00          .byte 74,75,255,0,4,64,255,0,92,31,9,31,255,0,7,69,30,71,255,0,7,31,9,31,0,0,73,74,75,0,0,73,74
0078F6  3  04 40 FF 00  
0078FA  3  5C 1F 09 1F  
007913  3  4B 00 00 49          .byte 75,0,0,73,74,75,0,0,73,1,75,0,0,73,74,75,0,0,73,74,75,255,0,4,65,255,0,9,65,0,0,0,59
007917  3  4A 4B 00 00  
00791B  3  49 01 4B 00  
007934  3  FF 00 0C             .byte 255,0,12
007937  3  FF 00 3D 1F          .byte 255,0,61,31,8,31,255,0,27,76,77,78,0,0,76,77,78,0,0,76,77,78,0,0,76,77,78,0,0,76,77,78,0,0
00793B  3  08 1F FF 00  
00793F  3  1B 4C 4D 4E  
007959  3  4C 4D 4E FF          .byte 76,77,78,255,0,92,31,9,31,255,0,22,31,8,31,0,0,76,77,78,0,0,76,77,78,0,0,76,77,78,0,0,76
00795D  3  00 5C 1F 09  
007961  3  1F FF 00 16  
00797A  3  4D 4E 00 00          .byte 77,78,0,0,76,77,78,0,0,76,77,78,255,0,97,31,8,31,0,0,69,70,71,0,0,69,70,71,0,0,31,8,31
00797E  3  4C 4D 4E 00  
007982  3  00 4C 4D 4E  
00799B  3  00 00 1F 09          .byte 0,0,31,9,31,0,0,76,77,78,0,0,76,77,78,0,0,76,77,78,0,0,76,77,78,0,0,76,77,78,0,0,76
00799F  3  1F 00 00 4C  
0079A3  3  4D 4E 00 00  
0079BC  3  4D 4E FF 00          .byte 77,78,255,0,97,31,9,31,255,0,12,31,9,31,255,0,7,76,77,78,0,0,76,77,78,0,0,76,77,78,0,0,76
0079C0  3  61 1F 09 1F  
0079C4  3  FF 00 0C 1F  
0079DD  3  4D 4E 00 00          .byte 77,78,0,0,76,77,78,0,0,76,77,78,255,0,31
0079E1  3  4C 4D 4E 00  
0079E5  3  00 4C 4D 4E  
0079EC  3  FF 00 47 1F          .byte 255,0,71,31,8,31,0,0,82,83,84,0,0,31,8,31,255,0,7,79,80,81,0,0,79,80,81,0,0,79,80,81,0,0
0079F0  3  08 1F 00 00  
0079F4  3  52 53 54 00  
007A0E  3  4F 50 51 00          .byte 79,80,81,0,0,79,80,81,0,0,79,80,81,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4
007A12  3  00 4F 50 51  
007A16  3  00 00 4F 50  
007A2F  3  00 00 03 05          .byte 0,0,3,5,4,0,0,3,5,4,255,0,62,31,8,31,255,0,7,31,9,31,0,0,31,8,31,0,0,31,9,31,255,0,7
007A33  3  04 00 00 03  
007A37  3  05 04 FF 00  
007A52  3  4F 50 51 00          .byte 79,80,81,0,0,79,80,81,0,0,79,80,81,0,0,79,80,81,0,0,79,80,81,0,0,79,80,81,0,0,3,5,4
007A56  3  00 4F 50 51  
007A5A  3  00 00 4F 50  
007A73  3  00 00 03 05          .byte 0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,255,0,62,31,9,31,0,0
007A77  3  04 00 00 03  
007A7B  3  05 04 00 00  
007A94  3  1F 08 1F 00          .byte 31,8,31,0,0,82,83,84,0,0,31,9,31,255,0,7,31,8,31,0,0,79,80,81,0,0,79,80,81,0,0,79,80
007A98  3  00 52 53 54  
007A9C  3  00 00 1F 09  
007AB5  3  51 00 00 4F          .byte 81,0,0,79,80,81,0,0,79,80,81,0,0,79,80,81,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0
007AB9  3  50 51 00 00  
007ABD  3  4F 50 51 00  
007AD6  3  03 05 04 00          .byte 3,5,4,0,0,3,5,4,0,0,3,5,4,255,0,67,31,9,31,255,0,7,82,83,84,255,0,7,31,9,31,0,0
007ADA  3  00 03 05 04  
007ADE  3  00 00 03 05  
007AF7  3  4F 50 51 00          .byte 79,80,81,0,0,79,80,81,0,0,79,80,81,0,0,79,80,81,0,0,79,80,81,0,0,79,80,81,0,0,3,5,4
007AFB  3  00 4F 50 51  
007AFF  3  00 00 4F 50  
007B18  3  00 00 03 05          .byte 0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0,0,3,5,4,0
007B1C  3  04 00 00 03  
007B20  3  05 04 00 00  
007B32  3  FF 00 42 1F          .byte 255,0,66,31,8,31,255,0,22,85,86,85,0,0,85,86,85,0,0,85,86,85,0,0,85,86,85,0,0,85,86,85,0,0
007B36  3  08 1F FF 00  
007B3A  3  16 55 56 55  
007B54  3  55 56 55 FF          .byte 85,86,85,255,0,97,31,9,31,255,0,17,31,8,31,0,0,85,86,85,0,0,85,86,85,0,0,85,86,85,0,0,85
007B58  3  00 61 1F 09  
007B5C  3  1F FF 00 11  
007B75  3  56 55 00 00          .byte 86,85,0,0,85,86,85,0,0,85,86,85,255,0,92,82,83,84,0,0,31,8,31,255,0,17,31,9,31,0,0,85,50
007B79  3  55 56 55 00  
007B7D  3  00 55 56 55  
007B96  3  55 00 00 55          .byte 85,0,0,85,86,85,0,0,85,86,85,0,0,85,86,85,0,0,85,86,85,0,0,85,86,85,255,0,97,31,9,31,255,0,22
007B9A  3  56 55 00 00  
007B9E  3  55 56 55 00  
007BB9  3  55 56 55 00          .byte 85,86,85,0,0,85,86,85,0,0,85,86,85,0,0,85,86,85,0,0,85,86,85,0,0,85,86,85,255,0,31
007BBD  3  00 55 56 55  
007BC1  3  00 00 55 56  
007BD8  3  FF 00 42 1F          .byte 255,0,66,31,8,31,255,0,12,31,8,31,255,0,7,51,48,49,0,0,51,48,49,0,0,51,48,49,255,0,7,51,48
007BDC  3  08 1F FF 00  
007BE0  3  0C 1F 08 1F  
007BF9  3  31 00 00 33          .byte 49,0,0,51,48,49,255,0,112,31,9,31,255,0,7,51,48,49,255,0,7,51,48,49,0,0,51,48,49,0,0,51,48
007BFD  3  30 31 FF 00  
007C01  3  70 1F 09 1F  
007C1A  3  31 00 00 33          .byte 49,0,0,51,48,49,255,0,103,9,255,0,18,51,48,49,0,0,51,48,49,0,0,51,48,49,255,0,7,51,48,49,0,0
007C1E  3  30 31 FF 00  
007C22  3  67 09 FF 00  
007C3C  3  33 30 31 FF          .byte 51,48,49,255,0,92,31,9,31,255,0,23,9,0,0,0,51,48,49,0,0,51,48,49,0,0,51,48,49,0,0,51,48
007C40  3  00 5C 1F 09  
007C44  3  1F FF 00 17  
007C5D  3  31 00 00 33          .byte 49,0,0,51,48,49,0,0,51,48,49,255,0,31
007C61  3  30 31 00 00  
007C65  3  33 30 31 FF  
007C6B  3  FF 00 5B 57          .byte 255,0,91,87,88,87,0,0,87,88,87,0,0,87,88,87,0,0,87,88,87,255,0,7,87,88,87,255,0,107,31,9,31
007C6F  3  58 57 00 00  
007C73  3  57 58 57 00  
007C8C  3  FF 00 0C 57          .byte 255,0,12,87,88,87,0,0,87,88,87,255,0,7,87,88,87,0,0,87,88,87,0,0,87,88,87,255,0,92,31,9,31
007C90  3  58 57 00 00  
007C94  3  57 58 57 FF  
007CAD  3  FF 00 16 1F          .byte 255,0,22,31,9,31,0,0,87,88,87,0,0,87,88,87,0,0,87,88,87,0,0,87,88,87,255,0,7,87,88,87,255,0,92
007CB1  3  09 1F 00 00  
007CB5  3  57 58 57 00  
007CD0  3  1F 09 1F FF          .byte 31,9,31,255,0,22,31,9,31,0,0,87,88,87,0,0,87,88,87,0,0,87,88,87,0,0,87,88,87,0,0,87,88
007CD4  3  00 16 1F 09  
007CD8  3  1F 00 00 57  
007CF1  3  57 00 00 57          .byte 87,0,0,87,88,87,255,0,31
007CF5  3  58 57 FF 00  
007CF9  3  1F           
007CFA  3  FF 00 5B 5A          .byte 255,0,91,90,89,90,0,0,90,89,90,0,0,90,89,90,0,0,90,89,90,0,0,90,89,90,255,0,7,91,92,91,0,0
007CFE  3  59 5A 00 00  
007D02  3  5A 59 5A 00  
007D1C  3  5B 5C 5B 00          .byte 91,92,91,0,0,91,92,91,0,0,91,92,91,0,0,91,92,91,255,0,102,90,89,90,0,0,90,89,90,0,0,90,89
007D20  3  00 5B 5C 5B  
007D24  3  00 00 5B 5C  
007D3D  3  5A 00 00 5A          .byte 90,0,0,90,89,90,0,0,90,89,90,255,0,7,91,92,91,0,0,91,92,91,0,0,91,92,91,0,0,91,92,91,0,0
007D41  3  59 5A 00 00  
007D45  3  5A 59 5A FF  
007D5F  3  5B 5C 5B FF          .byte 91,92,91,255,0,92,90,89,90,0,0,90,89,90,0,0,90,89,90,0,0,90,89,90,0,0,90,89,90,255,0,7,91
007D63  3  00 5C 5A 59  
007D67  3  5A 00 00 5A  
007D80  3  5C 5B 00 00          .byte 92,91,0,0,91,92,91,0,0,91,92,91,0,0,91,92,91,0,0,91,92,91,255,0,97,90,89,90,0,0,90,89,90
007D84  3  5B 5C 5B 00  
007D88  3  00 5B 5C 5B  
007DA1  3  00 00 5A 59          .byte 0,0,90,89,90,0,0,90,89,90,0,0,90,89,90,0,0,90,89,90,0,0,91,92,91,0,0,91,92,91,0,0,91
007DA5  3  5A 00 00 5A  
007DA9  3  59 5A 00 00  
007DC2  3  5C 5B 00 00          .byte 92,91,0,0,91,92,91,0,0,91,92,91,0,0,91,92,91,0
007DC6  3  5B 5C 5B 00  
007DCA  3  00 5B 5C 5B  
007DD4  3  FF 57 1E 5D          .byte 255,87,30,93,94,255,0,26,93,94,93,94,255,0,26,93,94,93,94,255,0,26,93,94,93,94,255,0,26,93,94,93,94
007DD8  3  5E FF 00 1A  
007DDC  3  5D 5E 5D 5E  
007DF5  3  FF 00 1A 5D          .byte 255,0,26,93,94,93,94,255,0,26,93,94,93,94,255,0,26,93,94,93,94,255,0,26,93,94,93,94,255,0,26,93,94
007DF9  3  5E 5D 5E FF  
007DFD  3  00 1A 5D 5E  
007E16  3  5D 5E FF 00          .byte 93,94,255,0,26,93,94,93,94,255,0,26,93,94,93,94,255,0,26,93,94,93,94,255,0,26,93,94,93,94,255,0,26
007E1A  3  1A 5D 5E 5D  
007E1E  3  5E FF 00 1A  
007E37  3  5D 5E 5D 5E          .byte 93,94,93,94,255,0,26,93,94,93,94,255,0,26,93,94,93,94,255,0,26,93,94,93,94,255,0,26,93,94,255,87,30
007E3B  3  FF 00 1A 5D  
007E3F  3  5E 5D 5E FF  
007E58  3               numsc:
007E58  3  15                   .byte 21
007E59  3               nmedat:
007E59  3  00 00 10 10          .byte 0,0,16,16,1,5,80,16,8,6,136,16,255
007E5D  3  01 05 50 10  
007E61  3  08 06 88 10  
007E66  3  00 00 10 10          .byte 0,0,16,16,2,5,40,120,1,5,120,24,8,6,96,136,255
007E6A  3  02 05 28 78  
007E6E  3  01 05 78 18  
007E77  3  00 00 10 10          .byte 0,0,16,16,2,7,48,64,1,5,80,192,8,6,136,216,255
007E7B  3  02 07 30 40  
007E7F  3  01 05 50 C0  
007E88  3  00 00 10 10          .byte 0,0,16,16,8,6,136,216,2,7,40,40,1,5,80,112,3,8,120,184,255
007E8C  3  08 06 88 D8  
007E90  3  02 07 28 28  
007E9D  3  00 00 10 10          .byte 0,0,16,16,8,6,16,216,3,8,8,192,1,7,120,48,4,9,80,120,255
007EA1  3  08 06 10 D8  
007EA5  3  03 08 08 C0  
007EB2  3  00 00 10 10          .byte 0,0,16,16,8,6,16,96,5,10,24,120,1,11,128,104,255
007EB6  3  08 06 10 60  
007EBA  3  05 0A 18 78  
007EC3  3  00 00 10 10          .byte 0,0,16,16,8,6,136,216,3,8,8,208,1,11,120,80,5,12,48,120,255
007EC7  3  08 06 88 D8  
007ECB  3  03 08 08 D0  
007ED8  3  00 00 10 10          .byte 0,0,16,16,8,6,136,216,5,13,8,120,5,13,56,80,255
007EDC  3  08 06 88 D8  
007EE0  3  05 0D 08 78  
007EE9  3  00 00 10 10          .byte 0,0,16,16,4,8,8,232,3,8,128,112,1,5,40,96,8,6,16,176,255
007EED  3  04 08 08 E8  
007EF1  3  03 08 80 70  
007EFE  3  00 00 10 10          .byte 0,0,16,16,7,6,136,216,5,13,48,80,6,7,120,16,5,10,72,160,255
007F02  3  07 06 88 D8  
007F06  3  05 0D 30 50  
007F13  3  00 00 10 10          .byte 0,0,16,16,5,14,48,120,5,14,64,160,3,17,120,120,1,5,40,24,7,6,136,216,255
007F17  3  05 0E 30 78  
007F1B  3  05 0E 40 A0  
007F2C  3  00 00 10 10          .byte 0,0,16,16,5,10,16,160,7,6,136,216,4,15,88,144,255
007F30  3  05 0A 10 A0  
007F34  3  07 06 88 D8  
007F3D  3  00 00 10 10          .byte 0,0,16,16,5,13,16,120,1,5,80,104,3,8,88,184,7,6,136,176,255
007F41  3  05 0D 10 78  
007F45  3  01 05 50 68  
007F52  3  00 00 10 10          .byte 0,0,16,16,7,6,136,16,5,12,64,80,1,11,40,16,3,11,80,184,255
007F56  3  07 06 88 10  
007F5A  3  05 0C 40 50  
007F67  3  00 00 10 10          .byte 0,0,16,16,7,6,136,224,5,10,48,80,3,17,128,160,4,8,40,120,255
007F6B  3  07 06 88 E0  
007F6F  3  05 0A 30 50  
007F7C  3  00 00 10 10          .byte 0,0,16,16,7,6,136,16,6,11,48,32,2,5,40,152,3,8,88,152,255
007F80  3  07 06 88 10  
007F84  3  06 0B 30 20  
007F91  3  00 00 10 10          .byte 0,0,16,16,7,6,136,216,6,11,48,72,5,14,16,120,6,7,128,152,3,17,80,144,255
007F95  3  07 06 88 D8  
007F99  3  06 0B 30 48  
007FAA  3  00 00 10 10          .byte 0,0,16,16,7,6,136,144,3,17,40,160,1,7,88,40,3,17,120,64,255
007FAE  3  07 06 88 90  
007FB2  3  03 11 28 A0  
007FBF  3  00 00 10 10          .byte 0,0,16,16,7,6,136,64,3,8,120,144,3,8,128,40,1,11,88,56,255
007FC3  3  07 06 88 40  
007FC7  3  03 08 78 90  
007FD4  3  00 00 10 10          .byte 0,0,16,16,3,8,48,200,2,5,40,40,3,9,80,120,7,6,136,24,3,17,128,152,3,11,128,72,255
007FD8  3  03 08 30 C8  
007FDC  3  02 05 28 28  
007FF1  3  04 06 30 20          .byte 4,6,48,32,4,6,48,208,4,13,136,32,4,13,136,208,255
007FF5  3  04 06 30 D0  
007FF9  3  04 0D 88 20  
008002  3               NUMOBJ = 40
008002  3               objdta:
008002  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,4,4,4,68,2,68,2,100,3,108,1,173,1,194,0,246,4,236,3,21,1,187,0,16,176,0,16,176
008006  3  00 00 00 00  
00800A  3  00 00 04 04  
008028  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,4,4,4,68,2,68,2,100,3,108,1,173,1,194,0,246,4,236,3,21,1,187,0,56,96,0,56,96
00802C  3  00 00 00 00  
008030  3  00 00 04 04  
00804E  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,4,4,4,68,2,68,2,100,3,108,1,173,1,194,0,246,4,236,3,21,1,187,0,96,136,0,96,136
008052  3  00 00 00 00  
008056  3  00 00 04 04  
008074  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,66,0,231,0,231,0,66,0,0,0,189,0,60,0,189,0,60,0,189,0,60,0,189,1,56,136,1,56,136
008078  3  00 00 00 00  
00807C  3  00 42 00 E7  
00809A  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,66,0,231,0,231,0,66,0,0,0,189,0,60,0,189,0,60,0,189,0,60,0,189,1,96,96,1,96,96
00809E  3  00 00 00 00  
0080A2  3  00 42 00 E7  
0080C0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,66,0,231,0,231,0,66,0,0,0,189,0,60,0,189,0,60,0,189,0,60,0,189,1,136,136,1,136,136
0080C4  3  00 00 00 00  
0080C8  3  00 42 00 E7  
0080E6  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,84,0,84,0,68,0,40,1,41,0,170,2,16,136,2,16,136
0080EA  3  00 00 00 00  
0080EE  3  00 00 00 00  
00810C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,84,0,84,0,68,0,40,1,41,0,170,2,56,56,2,56,56
008110  3  00 00 00 00  
008114  3  00 00 00 00  
008132  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,84,0,84,0,68,0,40,1,41,0,170,2,136,96,2,136,96
008136  3  00 00 00 00  
00813A  3  00 00 00 00  
008158  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,68,0,40,0,146,1,85,0,186,3,16,96,3,16,96
00815C  3  00 00 00 00  
008160  3  00 00 00 00  
00817E  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,68,0,40,0,146,1,85,0,186,3,96,96,3,96,96
008182  3  00 00 00 00  
008186  3  00 00 00 00  
0081A4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,68,0,40,0,146,1,85,0,186,3,136,96,3,136,96
0081A8  3  00 00 00 00  
0081AC  3  00 00 00 00  
0081CA  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,4,4,4,68,2,68,2,100,3,108,1,173,1,194,0,246,4,236,3,21,1,187,4,16,136,4,16,136
0081CE  3  00 00 00 00  
0081D2  3  00 00 04 04  
0081F0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,4,4,4,68,2,68,2,100,3,108,1,173,1,194,0,246,4,236,3,21,1,187,4,56,96,4,56,96
0081F4  3  00 00 00 00  
0081F8  3  00 00 04 04  
008216  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,4,4,4,68,2,68,2,100,3,108,1,173,1,194,0,246,4,236,3,21,1,187,4,96,176,4,96,176
00821A  3  00 00 00 00  
00821E  3  00 00 04 04  
00823C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,68,0,40,0,146,1,85,0,186,5,16,56,5,16,56
008240  3  00 00 00 00  
008244  3  00 00 00 00  
008262  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,68,0,40,0,146,1,85,0,186,5,56,136,5,56,136
008266  3  00 00 00 00  
00826A  3  00 00 00 00  
008288  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,68,0,40,0,146,1,85,0,186,5,96,136,5,96,136
00828C  3  00 00 00 00  
008290  3  00 00 00 00  
0082AE  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,56,0,56,0,56,0,186,1,215,0,238,6,56,96,6,56,96
0082B2  3  00 00 00 00  
0082B6  3  00 00 00 00  
0082D4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,56,0,56,0,56,0,186,1,215,0,238,6,96,136,6,96,136
0082D8  3  00 00 00 00  
0082DC  3  00 00 00 00  
0082FA  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,56,0,56,0,56,0,186,1,215,0,238,6,136,96,6,136,96
0082FE  3  00 00 00 00  
008302  3  00 00 00 00  
008320  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,73,0,73,0,127,0,54,0,62,0,20,0,42,0,28,7,16,96,7,16,96
008324  3  00 00 00 00  
008328  3  00 00 00 00  
008346  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,73,0,73,0,127,0,54,0,62,0,20,0,42,0,28,7,96,96,7,96,96
00834A  3  00 00 00 00  
00834E  3  00 00 00 00  
00836C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,73,0,73,0,127,0,54,0,62,0,20,0,42,0,28,7,136,136,7,136,136
008370  3  00 00 00 00  
008374  3  00 00 00 00  
008392  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,4,4,4,68,2,68,2,100,3,108,1,173,1,194,0,246,4,236,3,21,1,187,8,16,136,8,16,136
008396  3  00 00 00 00  
00839A  3  00 00 04 04  
0083B8  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,4,4,4,68,2,68,2,100,3,108,1,173,1,194,0,246,4,236,3,21,1,187,8,56,136,8,56,136
0083BC  3  00 00 00 00  
0083C0  3  00 00 04 04  
0083DE  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,4,4,4,68,2,68,2,100,3,108,1,173,1,194,0,246,4,236,3,21,1,187,8,96,96,8,96,96
0083E2  3  00 00 00 00  
0083E6  3  00 00 04 04  
008404  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,84,0,84,0,68,0,40,1,41,0,170,9,16,136,9,16,136
008408  3  00 00 00 00  
00840C  3  00 00 00 00  
00842A  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,84,0,84,0,68,0,40,1,41,0,170,9,96,96,9,96,96
00842E  3  00 00 00 00  
008432  3  00 00 00 00  
008450  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,68,0,40,0,146,1,85,0,186,10,136,96,10,136,96
008454  3  00 00 00 00  
008458  3  00 00 00 00  
008476  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,4,4,4,68,2,68,2,100,3,108,1,173,1,194,0,246,4,236,3,21,1,187,10,136,96,10,136,96
00847A  3  00 00 00 00  
00847E  3  00 00 04 04  
00849C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,12,56,56,12,56,56
0084A0  3  00 00 00 00  
0084A4  3  00 00 00 00  
0084C2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,12,136,136,12,136,136
0084C6  3  00 00 00 00  
0084CA  3  00 00 00 00  
0084E8  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,13,136,136,13,136,136
0084EC  3  00 00 00 00  
0084F0  3  00 00 00 00  
00850E  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,14,96,96,14,96,96
008512  3  00 00 00 00  
008516  3  00 00 00 00  
008534  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,14,96,136,14,96,136
008538  3  00 00 00 00  
00853C  3  00 00 00 00  
00855A  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,15,16,136,15,16,136
00855E  3  00 00 00 00  
008562  3  00 00 00 00  
008580  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,15,96,96,15,96,96
008584  3  00 00 00 00  
008588  3  00 00 00 00  
0085A6  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,15,136,136,15,136,136
0085AA  3  00 00 00 00  
0085AE  3  00 00 00 00  
0085CC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,16,96,16,16,96,16
0085D0  3  00 00 00 00  
0085D4  3  00 00 00 00  
0085F2  3               font:
0085F2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0085F6  3  00 00 00 00  
0085FA  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
0085FE  3  30 00 30 00  
008602  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
008606  3  00 00 00 00  
00860A  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
00860E  3  6C FE 6C 00  
008612  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
008616  3  7E 1E 7E 18  
00861A  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
00861E  3  30 6E CE 00  
008622  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
008626  3  7E CC 7E 00  
00862A  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
00862E  3  00 00 00 00  
008632  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
008636  3  18 18 0C 00  
00863A  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
00863E  3  30 30 60 00  
008642  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
008646  3  7E 18 3C 00  
00864A  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
00864E  3  7E 18 18 00  
008652  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
008656  3  00 18 18 30  
00865A  3  00 00 00 18          .byte 0,0,0,24,36,24,0,0
00865E  3  24 18 00 00  
008662  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
008666  3  00 38 38 00  
00866A  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
00866E  3  18 30 60 00  
008672  3  00 7C EE EE          .byte 0,124,238,238,238,238,124,0
008676  3  EE EE 7C 00  
00867A  3  00 38 3C 1C          .byte 0,56,60,28,28,126,126,0
00867E  3  1C 7E 7E 00  
008682  3  00 7C FE 1E          .byte 0,124,254,30,248,246,254,0
008686  3  F8 F6 FE 00  
00868A  3  00 7C DE 3C          .byte 0,124,222,60,30,254,124,0
00868E  3  1E FE 7C 00  
008692  3  00 1C 3C 7C          .byte 0,28,60,124,220,254,60,0
008696  3  DC FE 3C 00  
00869A  3  00 FE F6 F8          .byte 0,254,246,248,62,222,124,0
00869E  3  3E DE 7C 00  
0086A2  3  00 7C EC F2          .byte 0,124,236,242,254,238,124,0
0086A6  3  FE EE 7C 00  
0086AA  3  00 FE FE 0E          .byte 0,254,254,14,60,120,120,0
0086AE  3  3C 78 78 00  
0086B2  3  00 7C EE 7C          .byte 0,124,238,124,238,238,124,0
0086B6  3  EE EE 7C 00  
0086BA  3  00 7C FE F6          .byte 0,124,254,246,222,62,124,0
0086BE  3  DE 3E 7C 00  
0086C2  3  00 00 30 30          .byte 0,0,48,48,0,48,48,0
0086C6  3  00 30 30 00  
0086CA  3  00 7C 82 BA          .byte 0,124,130,186,162,186,130,124
0086CE  3  A2 BA 82 7C  
0086D2  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
0086D6  3  30 18 0C 00  
0086DA  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
0086DE  3  00 7E 00 00  
0086E2  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
0086E6  3  0C 18 30 00  
0086EA  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
0086EE  3  18 00 18 00  
0086F2  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
0086F6  3  FE C0 7C 00  
0086FA  3  00 7C EE FE          .byte 0,124,238,254,238,238,108,0
0086FE  3  EE EE 6C 00  
008702  3  00 7C EE FC          .byte 0,124,238,252,238,254,124,0
008706  3  EE FE 7C 00  
00870A  3  00 7C FE E0          .byte 0,124,254,224,254,254,124,0
00870E  3  FE FE 7C 00  
008712  3  00 FC EE EE          .byte 0,252,238,238,254,254,252,0
008716  3  FE FE FC 00  
00871A  3  00 7E F0 FC          .byte 0,126,240,252,240,254,126,0
00871E  3  F0 FE 7E 00  
008722  3  00 7E F0 FC          .byte 0,126,240,252,240,240,240,0
008726  3  F0 F0 F0 00  
00872A  3  00 7C FE F0          .byte 0,124,254,240,238,246,124,0
00872E  3  EE F6 7C 00  
008732  3  00 EE EE FE          .byte 0,238,238,254,254,238,238,0
008736  3  FE EE EE 00  
00873A  3  00 7E 7E 3C          .byte 0,126,126,60,60,126,126,0
00873E  3  3C 7E 7E 00  
008742  3  00 1E 1E 1E          .byte 0,30,30,30,222,254,124,0
008746  3  DE FE 7C 00  
00874A  3  00 EE FC F8          .byte 0,238,252,248,248,252,238,0
00874E  3  F8 FC EE 00  
008752  3  00 70 F0 F0          .byte 0,112,240,240,252,254,126,0
008756  3  FC FE 7E 00  
00875A  3  00 D6 FE FE          .byte 0,214,254,254,238,238,238,0
00875E  3  EE EE EE 00  
008762  3  00 CE EE FE          .byte 0,206,238,254,254,238,230,0
008766  3  FE EE E6 00  
00876A  3  00 7C FE EE          .byte 0,124,254,238,238,254,124,0
00876E  3  EE FE 7C 00  
008772  3  00 FC EE EE          .byte 0,252,238,238,252,240,240,0
008776  3  FC F0 F0 00  
00877A  3  00 7C FE FE          .byte 0,124,254,254,238,242,124,0
00877E  3  EE F2 7C 00  
008782  3  00 FC FE EE          .byte 0,252,254,238,252,238,238,0
008786  3  FC EE EE 00  
00878A  3  00 7C F0 FC          .byte 0,124,240,252,30,254,124,0
00878E  3  1E FE 7C 00  
008792  3  00 FE FE 38          .byte 0,254,254,56,124,124,124,0
008796  3  7C 7C 7C 00  
00879A  3  00 EE EE EE          .byte 0,238,238,238,238,254,124,0
00879E  3  EE FE 7C 00  
0087A2  3  00 EE EE EE          .byte 0,238,238,238,238,124,56,0
0087A6  3  EE 7C 38 00  
0087AA  3  00 EE EE EE          .byte 0,238,238,238,254,254,108,0
0087AE  3  FE FE 6C 00  
0087B2  3  00 EE FE 7C          .byte 0,238,254,124,254,254,238,0
0087B6  3  FE FE EE 00  
0087BA  3  00 EE EE FE          .byte 0,238,238,254,62,254,252,0
0087BE  3  3E FE FC 00  
0087C2  3  00 FE FE B8          .byte 0,254,254,184,118,254,254,0
0087C6  3  76 FE FE 00  
0087CA  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
0087CE  3  18 18 1E 00  
0087D2  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
0087D6  3  30 18 0C 00  
0087DA  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
0087DE  3  30 30 F0 00  
0087E2  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
0087E6  3  30 30 30 00  
0087EA  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
0087EE  3  00 00 00 FF  
0087F2  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
0087F6  3  60 60 FE 00  
0087FA  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
0087FE  3  7C CC 7C 00  
008802  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
008806  3  66 66 7C 00  
00880A  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
00880E  3  60 60 3C 00  
008812  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
008816  3  CC CC 7C 00  
00881A  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
00881E  3  F8 C0 7C 00  
008822  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
008826  3  30 30 30 00  
00882A  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
00882E  3  CC 7C 0C 78  
008832  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
008836  3  CC CC CC 00  
00883A  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
00883E  3  30 30 78 00  
008842  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
008846  3  0C 0C 6C 38  
00884A  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
00884E  3  70 78 6C 00  
008852  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
008856  3  30 30 1C 00  
00885A  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
00885E  3  FC FC FC 00  
008862  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
008866  3  CC CC CC 00  
00886A  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
00886E  3  CC CC 78 00  
008872  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
008876  3  CC F8 C0 C0  
00887A  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
00887E  3  CC 7C 0C 0E  
008882  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
008886  3  60 60 60 00  
00888A  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
00888E  3  78 0C F8 00  
008892  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
008896  3  30 30 1C 00  
00889A  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
00889E  3  CC CC 78 00  
0088A2  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
0088A6  3  78 78 30 00  
0088AA  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
0088AE  3  FC FC 78 00  
0088B2  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
0088B6  3  30 78 CC 00  
0088BA  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
0088BE  3  CC 7C 0C 78  
0088C2  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
0088C6  3  30 60 FC 00  
0088CA  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
0088CE  3  18 18 1E 00  
0088D2  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
0088D6  3  18 18 18 00  
0088DA  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
0088DE  3  30 30 F0 00  
0088E2  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
0088E6  3  00 00 00 00  
0088EA  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
0088EE  3  E3 BB C6 7C  
0088F2  3               jtab:
0088F2  3  63                   .byte 99
0088F3  3  0A 08 3F 2F  keys:   .byte 10,8,63,47,33,1,57,31,30,26,24
0088F7  3  21 01 39 1F  
0088FB  3  1E 1A 18     
0088FE  3               
0088FE  2               
0088FE  1               	.include "lib.inc"
0088FE  2               ;----------------------------------------------------------------------
0088FE  2               ; Atari 800 Platform Specific functions
0088FE  2               ;----------------------------------------------------------------------
0088FE  2               
0088FE  2               ;============================================================
0088FE  2               ; PLATFORM VARIABLES
0088FE  2               ;============================================================
0088FE  2               ;
0088FE  2               ; Memory map:
0088FE  2               ;
0088FE  2               ;	$0000-$01ff	 0.50kB	CPU WS
0088FE  2               ;	$0200-$05ff	 1,00kB	IOCB/Printer/Cassette RAM
0088FE  2               ;	$0600-$06ff	 0,25kB	User RAM
0088FE  2               ;	$0700-$1fff	 6,25kB
0088FE  2               ;	$2000-$ffff	56,00kB	User RAM
0088FE  2               ;
0088FE  2               ; Keyboard matrix:
0088FE  2               ;
0088FE  2               ;		0	1	2	3	4	5	6	7
0088FE  2               ;       ----------------------------------------------------------------------
0088FE  2               ;	$00:	L	J	;:	F1	F2	K	+\	*^
0088FE  2               ;	$08:	O		P	U	Ret	I	-_	=|
0088FE  2               ;	$10:	V	Help	C	F3	F4	B	X	Z
0088FE  2               ;	$18:	4$		3#	6&	Esc	5%	2"	1!
0088FE  2               ;	$20:	,[	Space	.]	N		M	/?	Invert
0088FE  2               ;	$28:	R		E	Y	Tab	T	W	Q
0088FE  2               ;	$30:	9(		0)	7'	Bksp	8@	<	>
0088FE  2               ;	$38:	F	H	D		Caps	G	S	A
0088FE  2               ;
0088FE  2               ; Atari 800 constants:
0088FE  2               
0088FE  2               	LMS		= 64
0088FE  2               	HS		= 16
0088FE  2               	VS		= 32
0088FE  2               	MODE2		= 2
0088FE  2               	MODE3		= 3
0088FE  2               	MODE4		= 4
0088FE  2               	MODE5		= 5
0088FE  2               	MODEB		= $0B
0088FE  2               	MODED		= $0D
0088FE  2               	MODEE		= $0E
0088FE  2               	MODEF		= $0F
0088FE  2               
0088FE  2               	BLANK1		= $00
0088FE  2               	BLANK2		= $10
0088FE  2               	BLANK3		= $20
0088FE  2               	BLANK4		= $30
0088FE  2               	BLANK5		= $40
0088FE  2               	BLANK6		= $50
0088FE  2               	BLANK7		= $60
0088FE  2               	BLANK8		= $70
0088FE  2               
0088FE  2               	DLISTENDJUMP	= $41
0088FE  2               
0088FE  2               ; Atari 800 Addresses
0088FE  2               
0088FE  2               	HPOSP0	= $D000		; HORIZONTAL POSITION P0
0088FE  2               	HPOSP1	= $D001		; HORIZONTAL POSITION P1
0088FE  2               	HPOSP2	= $D002		; HORIZONTAL POSITION P2
0088FE  2               	HPOSP3	= $D003		; HORIZONTAL POSITION P3
0088FE  2               	HPOSM0	= $D004		; HORIZONTAL POSITION M0
0088FE  2               	HPOSM1	= $D005		; HORIZONTAL POSITION M1
0088FE  2               	HPOSM2	= $D006		; HORIZONTAL POSITION M2
0088FE  2               	HPOSM3	= $D007		; HORIZONTAL POSITION M3
0088FE  2               
0088FE  2               	SIZEP0	= $D008		; SIZE P0
0088FE  2               	SIZEP1	= $D009		; SIZE P0
0088FE  2               	SIZEP2	= $D00A		; SIZE P0
0088FE  2               	SIZEP3	= $D00B		; SIZE P0
0088FE  2               	SIZEM	= $D00C		; SIZE M
0088FE  2               
0088FE  2               	GRAFP0	= $D00D
0088FE  2               	GRAFP1	= $D00E
0088FE  2               	GRAFP2	= $D00F
0088FE  2               	GRAFP3	= $D010
0088FE  2               	GRAFM	= $D011
0088FE  2               
0088FE  2               	TRIG0	= $D010
0088FE  2               	TRIG1	= $D011
0088FE  2               
0088FE  2               	COLPM0	= $D012		; COLOR P0/M0
0088FE  2               	COLPM1	= $D013		; COLOR P1/M1
0088FE  2               	COLPM2	= $D014		; COLOR P2/M2
0088FE  2               	COLPM3	= $D015		; COLOR P3/M3
0088FE  2               
0088FE  2               	COLPF0	= $D016
0088FE  2               	COLPF1	= $D017
0088FE  2               	COLPF2	= $D018
0088FE  2               	COLPF3	= $D019
0088FE  2               	COLBK	= $D01A
0088FE  2               
0088FE  2               	KBCODE	= $D209
0088FE  2               	RANDOM	= $D20A
0088FE  2               	IRQEN	= $D20E
0088FE  2               	IRQST	= $D20E
0088FE  2               	SKSTAT	= $D20F
0088FE  2               
0088FE  2               	STICK	= $D300
0088FE  2               	PORTB	= $D301
0088FE  2               	PBCTL	= $D303
0088FE  2               
0088FE  2               	DMACTL	= $D400
0088FE  2               	DLISTL	= $D402
0088FE  2               	DLISTH	= $D403
0088FE  2               	WSYNC	= $D40A
0088FE  2               	VCOUNT	= $D40B
0088FE  2               	NMIEN	= $D40E
0088FE  2               	NMIST	= $D40F
0088FE  2               	NMIRES	= $D40F
0088FE  2               
0088FE  2               	NMI	= $FFFA
0088FE  2               	RESET	= $FFFC
0088FE  2               	IRQ	= $FFFE
0088FE  2               
0088FE  2               ;----------------------------------------------------------------------
0088FE  2               ; Atari 800 hardware fns
0088FE  2               ;----------------------------------------------------------------------
0088FE  2               
0088FE  2               init:
0088FE  2               
0088FE  2               ; Disable interrupts
0088FE  2               
0088FE  2  78           	sei
0088FF  2  A9 00        	lda #0
008901  2  8D 0E D2     	sta IRQEN		; Disable IRQ
008904  2  8D 0E D4     	sta NMIEN		; Disable NMI
008907  2               
008907  2               ; Switch BASIC + OS ROMS off
008907  2               
008907  2  AD 03 D3     	lda PBCTL
00890A  2  09 02        	ora #%00000010
00890C  2  8D 03 D3     	sta PBCTL
00890F  2  AD 01 D3     	lda PORTB
008912  2  29 7C        	and #%01111100
008914  2  09 82        	ora #%10000010
008916  2  8D 01 D3     	sta PORTB
008919  2               
008919  2               ; Setup new NMI handler
008919  2               
008919  2  A9 3E        	lda #<nmi_handler
00891B  2  8D FA FF     	sta NMI
00891E  2  A9 89        	lda #>nmi_handler
008920  2  8D FB FF     	sta NMI+1
008923  2  A9 C0        	lda #%11000000
008925  2  8D 0E D4     	sta NMIEN
008928  2               
008928  2               ; Init video registers
008928  2               
008928  2  A9 FA        	lda #<BITMAP_DLIST
00892A  2  8D 02 D4     	sta DLISTL
00892D  2  A9 8A        	lda #>BITMAP_DLIST
00892F  2  8D 03 D4     	sta DLISTH
008932  2               
008932  2               ; Screenwidth 32 bytes
008932  2               
008932  2  A9 31        	lda #%00110001
008934  2  8D 00 D4     	sta DMACTL
008937  2               
008937  2  20 F7 20     	jsr cls
00893A  2               
00893A  2  60           	rts
00893B  2               
00893B  2               ; NMI interrupt handler
00893B  2               
00893B  2  00 00        frame_counter:	.byte 0,0
00893D  2  00           frame_edge:	.byte 0
00893E  2               
00893E  2               nmi_handler:
00893E  2  2C 0F D4     	bit NMIST
008941  2  30 24        	bmi dli_handler
008943  2  10 0D        	bpl nmi_not_dli
008945  2               nmi_not_vbi:
008945  2  A9 20        	lda #%00100000
008947  2  2C 0F D4     	bit NMIST
00894A  2  D0 04        	bne nmi_not_reset
00894C  2  8D 0F D4     	sta NMIRES
00894F  2  40           	rti
008950  2               nmi_not_reset:
008950  2  68           	pla
008951  2  40           	rti
008952  2               nmi_not_dli:
008952  2  48           	pha
008953  2  50 F0        	bvc nmi_not_vbi
008955  2  8A           	txa
008956  2  48           	pha
008957  2  98           	tya
008958  2  48           	pha
008959  2               
008959  2               ; Used for syncing to 25 Hz
008959  2               
008959  2  EE 3B 89     	inc frame_counter
00895C  2  D0 03        	bne skip_inc_frame_counter
00895E  2  EE 3C 89     	inc frame_counter+1
008961  2               skip_inc_frame_counter:
008961  2               
008961  2               ; Restore registers
008961  2               
008961  2  68           	pla
008962  2  A8           	tay
008963  2  68           	pla
008964  2  AA           	tax
008965  2  68           	pla
008966  2  40           	rti
008967  2               
008967  2               dli_handler:
008967  2  40           	rti
008968  2               
008968  2               ;========================================================
008968  2               ; KEY AND JOYSTICK ROUTINES
008968  2               ;--------------------------------------------------------
008968  2               ; Keys
008968  2               ;
008968  2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
008968  2               ;             ||||||||
008968  2               ;             |||||||+> Right    KEY 0  - X
008968  2               ;             ||||||+-> Left     KEY 1  - Z
008968  2               ;             |||||+--> Down     KEY 2  - .
008968  2               ;             ||||+---> Up       KEY 3  - ;
008968  2               ;             |||+----> Fire1    KEY 4  - SPC
008968  2               ;             ||+-----> Fire2    KEY 5  - Q
008968  2               ;             |+------> Fire3    KEY 6  - P
008968  2               ;             +-------> Not used
008968  2               ;
008968  2               ;                       Option1  KEY 7  - 1
008968  2               ;                       Option2  KEY 8  - 2
008968  2               ;                       Option3  KEY 9  - 3
008968  2               ;                       Option4  KEY 10 - 4
008968  2               ;--------------------------------------------------------
008968  2               ;----------------------------------------------------
008968  2               ; PRSKEY
008968  2               ; Wait for keypress.
008968  2               ;----------------------------------------------------
008968  2               
008968  2               prskey:
008968  2  AD 0F D2     	lda SKSTAT		; Check keypress
00896B  2  C9 FF        	cmp #255
00896D  2  F0 03        	beq :+
00896F  2  4C 79 89     	jmp prsend
008972  2               :
008972  2  20 27 30     	jsr joykey		; Check joystick move
008975  2  C9 FF        	cmp #255
008977  2  F0 EF        	beq prskey
008979  2               prsend:
008979  2  60           	rts
00897A  2               
00897A  2               ;--------------------------------------------------------
00897A  2               ; KTEST
00897A  2               ; Check if key in A is pressed,
00897A  2               ;  carry clr = key pressed
00897A  2               ;  carry set = key not pressed
00897A  2               ;--------------------------------------------------------
00897A  2               
00897A  2               ktest:
00897A  2  85 rr        	sta tmp
00897C  2  AD 0F D2     	lda SKSTAT		; Check keypress
00897F  2  29 04        	and #4
008981  2  D0 07        	bne notpressed
008983  2  A5 rr        	lda tmp
008985  2  CD 09 D2     	cmp KBCODE
008988  2  F0 02        	beq pressed
00898A  2               notpressed:
00898A  2  38           	sec
00898B  2  60           	rts
00898C  2               pressed:
00898C  2  18           	clc			; key pressed
00898D  2  60           	rts
00898E  2               
00898E  2               ;---------------------------------------------------------------
00898E  2               ; KGET
00898E  2               ; Return keycode when a key is pressed and released
00898E  2               ;---------------------------------------------------------------
00898E  2               
00898E  2               kget:
00898E  2  AD 0F D2     	lda SKSTAT		; Check keypress
008991  2  29 04        	and #4
008993  2  D0 F9        	bne kget
008995  2  AD 09 D2     	lda KBCODE		; If pressed, get keycode
008998  2  48           	pha			; Save keycode pressed
008999  2               kget2:
008999  2  AD 0F D2     	lda SKSTAT		; Check keypress
00899C  2  29 04        	and #4
00899E  2  F0 F9        	beq kget2
0089A0  2  68           	pla
0089A1  2  60           	rts
0089A2  2               
0089A2  2               ;-------------------------------------------------------
0089A2  2               ; Joystick routines.
0089A2  2               ;
0089A2  2               ; contrl = 1, Joystick1
0089A2  2               ;          2, Joystick2
0089A2  2               ;-------------------------------------------------------
0089A2  2               
0089A2  2               ; Iitialize joysticks
0089A2  2               
0089A2  2               joyinit:
0089A2  2  60           	rts
0089A3  2               
0089A3  2               ; Joystick1 controls.
0089A3  2               
0089A3  2               joy1:
0089A3  2  A9 00        	lda #0		 	; zero reading.
0089A5  2  85 rr        	sta joyval
0089A7  2               
0089A7  2  AD F9 88     	lda keys+6		; Check Fire3
0089AA  2  20 7A 89     	jsr ktest
0089AD  2  26 rr        	rol joyval
0089AF  2  AD F8 88     	lda keys+5		; Check Fire2
0089B2  2  20 7A 89     	jsr ktest
0089B5  2  26 rr        	rol joyval
0089B7  2  AD 10 D0     	lda TRIG0		; Check Fire
0089BA  2  4A           	lsr
0089BB  2  26 rr        	rol joyval
0089BD  2               
0089BD  2  AD 00 D3     	lda STICK
0089C0  2  85 rr        	sta tmp
0089C2  2  46 rr        	lsr tmp			; Check up
0089C4  2  26 rr        	rol joyval
0089C6  2  46 rr        	lsr tmp			; Check dwon
0089C8  2  26 rr        	rol joyval
0089CA  2  46 rr        	lsr tmp			; Check left
0089CC  2  26 rr        	rol joyval
0089CE  2  46 rr        	lsr tmp			; Check right
0089D0  2  26 rr        	rol joyval
0089D2  2               
0089D2  2  60           	rts
0089D3  2               
0089D3  2               ; Joystick2 controls.
0089D3  2               
0089D3  2               joy2:
0089D3  2  A9 00        	lda #0		 	; zero reading.
0089D5  2  85 rr        	sta joyval
0089D7  2               
0089D7  2  AD F9 88     	lda keys+6		; Check Fire3
0089DA  2  20 7A 89     	jsr ktest
0089DD  2  26 rr        	rol joyval
0089DF  2  AD F8 88     	lda keys+5		; Check Fire2
0089E2  2  20 7A 89     	jsr ktest
0089E5  2  26 rr        	rol joyval
0089E7  2  AD 11 D0     	lda TRIG1		; Check Fire
0089EA  2  4A           	lsr
0089EB  2  26 rr        	rol joyval
0089ED  2               
0089ED  2  AD 00 D3     	lda STICK
0089F0  2  4A           	lsr a
0089F1  2  4A           	lsr a
0089F2  2  4A           	lsr a
0089F3  2  4A           	lsr a
0089F4  2  85 rr        	sta tmp
0089F6  2  46 rr        	lsr tmp			; Check up
0089F8  2  26 rr        	rol joyval
0089FA  2  46 rr        	lsr tmp			; Check dwon
0089FC  2  26 rr        	rol joyval
0089FE  2  46 rr        	lsr tmp			; Check left
008A00  2  26 rr        	rol joyval
008A02  2  46 rr        	lsr tmp			; Check right
008A04  2  26 rr        	rol joyval
008A06  2               
008A06  2  60           	rts
008A07  2  60           	rts
008A08  2               
008A08  2               ;---------------------------------------------------------------
008A08  2               ; Bitmap display list must be aligned at $100
008A08  2               ;---------------------------------------------------------------
008A08  2               
008A08  2  xx xx xx xx  .align $100
008A0C  2  xx xx xx xx  
008A10  2  xx xx xx xx  
008AFA  2               
008AFA  2               .if gflag
008AFA  2               	GFXMODE = MODEE
008AFA  2               .else
008AFA  2               	GFXMODE = MODEF
008AFA  2               .endif
008AFA  2               
008AFA  2               BITMAP_DLIST:
008AFA  2  70           	.byte BLANK8
008AFB  2  70           	.byte BLANK8
008AFC  2  70           	.byte BLANK8
008AFD  2               
008AFD  2  4F           	.byte LMS+GFXMODE
008AFE  2  00 E4        	.word ScreenAddr
008B00  2  0F 0F 0F 0F  	.res 95,GFXMODE
008B04  2  0F 0F 0F 0F  
008B08  2  0F 0F 0F 0F  
008B5F  2               
008B5F  2  4F            	.byte LMS+GFXMODE
008B60  2  00 F0        	.word ScreenAddr+96*32
008B62  2  0F 0F 0F 0F  	.res 95,GFXMODE
008B66  2  0F 0F 0F 0F  
008B6A  2  0F 0F 0F 0F  
008BC1  2               
008BC1  2  41           	.byte DLISTENDJUMP
008BC2  2  FA 8A        	.word BITMAP_DLIST
008BC4  2               
008BC4  2               
008BC4  1               	.include "z80.asm"
008BC4  2               ;------------------------------------------------------
008BC4  2               ; z80.asm
008BC4  2               ; spectrum stuff
008BC4  2               ; adresses
008BC4  2               
008BC4  2               
008BC4  2               ; Contains seperatly 1 bit set
008BC4  2               
008BC4  2               _bitmem0	= $f8
008BC4  2               _bitmem1	= $f9
008BC4  2               _bitmem2	= $fa
008BC4  2               _bitmem3	= $fb
008BC4  2               _bitmem4	= $fc
008BC4  2               _bitmem5	= $fd
008BC4  2               _bitmem6	= $fe
008BC4  2               _bitmem7	= $ff
008BC4  2               
008BC4  2               ; constants
008BC4  2               _bitvalue0	= $01
008BC4  2               _bitvalue1	= $02
008BC4  2               _bitvalue2	= $04
008BC4  2               _bitvalue3	= $08
008BC4  2               _bitvalue4	= $10
008BC4  2               _bitvalue5	= $20
008BC4  2               _bitvalue6	= $40
008BC4  2               _bitvalue7	= $80
008BC4  2               
008BC4  2               _notbitvalue0	= $fe
008BC4  2               _notbitvalue1	= $fd
008BC4  2               _notbitvalue2	= $fb
008BC4  2               _notbitvalue3	= $f7
008BC4  2               _notbitvalue4	= $ef
008BC4  2               _notbitvalue5	= $df
008BC4  2               _notbitvalue6	= $bf
008BC4  2               _notbitvalue7	= $7f
008BC4  2               
008BC4  2               
008BC4  2               exx:
008BC4  2  A5 62        		lda z80_c
008BC6  2  A4 6E        		ldy z80_cp
008BC8  2  84 62        		sty z80_c
008BCA  2  85 6E        		sta z80_cp
008BCC  2  A5 63        		lda z80_b
008BCE  2  A4 6F        		ldy z80_bp
008BD0  2  84 63        		sty z80_b
008BD2  2  85 6F        		sta z80_bp
008BD4  2  A5 64        		lda z80_e
008BD6  2  A4 70        		ldy z80_ep
008BD8  2  84 64        		sty z80_e
008BDA  2  85 70        		sta z80_ep
008BDC  2  A5 65        		lda z80_d
008BDE  2  A4 71        		ldy z80_dp
008BE0  2  84 65        		sty z80_d
008BE2  2  85 71        		sta z80_dp
008BE4  2  A5 rr        		lda scraddr
008BE6  2  A4 72        		ldy z80_lp
008BE8  2  84 rr        		sty scraddr
008BEA  2  85 72        		sta z80_lp
008BEC  2  A5 rr        		lda scraddr+1
008BEE  2  A4 73        		ldy z80_hp
008BF0  2  84 rr        		sty scraddr+1
008BF2  2  85 73        		sta z80_hp
008BF4  2  60           		rts
008BF5  2               
008BF5  2               
008BF5  1               eind_asm:
008BF5  1               eop:					; End Of Program
008BF5  1               
008BF5  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(48384-eind_asm + start_asm))
008BF5  1               
