ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2000
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 1 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2  xx           shrctr:	    .res 1
000058r 2               .endif
000058r 2               .if pflag
000058r 2               explcnt:    .res 1
000058r 2               seed3:	    .res 1
000058r 2               .endif
000058r 2               
000058r 2               .if aflag
000058r 2               pbptr:       .res 2
000058r 2               pbbuf:	     .res 2
000058r 2               .endif
000058r 2               
000058r 2               ;sndtyp:     .res 1
000058r 2               
000058r 2               .if rflag
000058r 2               sprshft:     .res 1
000058r 2               .endif
000058r 2               
000058r 1               
000058r 1               .segment "CODE"
000000r 1               .org asm_code-6
001FFA  1  FF FF        	.word $ffff
001FFC  1  00 20        	.word start_asm
001FFE  1  FB 3A        	.word eind_asm
002000  1               
002000  1               start_asm:
002000  1               	.include "game.inc"
002000  2               .include "testticker.inc"
002000  3               ;--------------------------------------------------------------
002000  3               ; Arcade Game Designer.
002000  3               ; (C) 2008 Jonathan Cauldwell.
002000  3               ; ZX Spectrum Next Engine v0.7.
002000  3               ; Acorn Atom port by K.v.Oss 2018
002000  3               ;--------------------------------------------------------------
002000  3               
002000  3               ; Conditional compilation flags
002000  3               ; Code is installed if flag is set
002000  3               ; Flags are set in commandline assembly or by the compiler
002000  3               
002000  3               ; Flags set by AGD compiler
002000  3               ;	mflag  			; MENU + INV
002000  3               ;	pflag 			; particle engine
002000  3               ;	sflag 			; scrollytext
002000  3               ;	dflag 			; digging mode
002000  3               ;	cflag			; collectable blocks
002000  3               ;	oflag			; objects
002000  3               ;	lflag			; ladders
002000  3               ;
002000  3               ; Flags set manually
002000  3               ;	aflag			; adventure mode
002000  3               ;	bflag			; big sprites (16x24)
002000  3               ;	iflag			; invert mode
002000  3               
002000  3               .if mflag
002000  3               	.out "- MEN/INV enabled"
002000  3               .endif
002000  3               .if pflag
002000  3               	.out "- Particles enabled"
002000  3               .endif
002000  3               .if sflag
002000  3               	.out "- Scrolling enabled"
002000  3               .endif
002000  3               .if dflag
002000  3               	.out "- Digging enabled"
002000  3               .endif
002000  3               .if cflag
002000  3               	.out "- Collectable blocks enabled"
002000  3               .endif
002000  3               .if oflag
002000  3               	.out "- Objects enabled"
002000  3               .endif
002000  3               .if lflag
002000  3               	.out "- Ladders enabled"
002000  3               .endif
002000  3               .if aflag
002000  3               	.out "- Adventure mode enabled"
002000  3               .endif
002000  3               .if bflag
002000  3               	.out "- Big Sprites (16x24) enabled"
002000  3               .endif
002000  3               .if iflag
002000  3               	.out "- Invert mode enabled"
002000  3               .endif
002000  3               .if gflag
002000  3               	.out "- Colour mode enabled"
002000  3               .endif
002000  3               .if rflag
002000  3               	.out "- RAM saving mode enabled"
002000  3               .endif
002000  3               
002000  3               ; Global definitions ------------------------------------------------------------
002000  3               
002000  3               	FONT = font		; Font address
002000  3               
002000  3               	green	= $00		; Colour definition filters
002000  3               	yellow	= $55
002000  3               	blue	= $aa
002000  3               	red	= $ff
002000  3               
002000  3               ; Block characteristics.
002000  3               
002000  3               	PLATFM	= 1		; platform.
002000  3               	WALL	= PLATFM + 1	; solid wall.
002000  3               	LADDER	= WALL + 1	; ladder.
002000  3               	FODDER	= LADDER + 1	; fodder block.
002000  3               	DEADLY	= FODDER + 1	; deadly block.
002000  3               	CUSTOM	= DEADLY + 1	; custom block.
002000  3               	WATER	= CUSTOM + 1	; water block.
002000  3                       COLECT	= WATER + 1	; collectable block.
002000  3                       NUMTYP	= COLECT + 1	; number of types.
002000  3               
002000  3               ; Sprites.
002000  3               
002000  3               .if bflag
002000  3               	SPR_HGT	= 24		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 8		; number of sprites.
002000  3               .else				; 16x16 sprites
002000  3               	SPR_HGT = 16		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 12		; number of sprites.
002000  3               .endif
002000  3               
002000  3               	TABSIZ = 17		; size of each entry.
002000  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002000  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002000  3               	var_X  = 8		; new x coordinate of sprite.
002000  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002000  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002000  3               
002000  3               ; Particle engine.
002000  3               
002000  3               	NUMSHR = 55		; pieces of shrapnel.
002000  3               	SHRSIZ = 6		; bytes per particle.
002000  3               
002000  3               ; System constants
002000  3               
002000  3               	ScrSelAddr  = $b000	; Screen selection address
002000  3               	KeyRowAddr  = $b000	; PIA key matrix row
002000  3               	KeyColAddr  = $b001	; PIA key matrix column
002000  3               	SpeakerBit  = $b002	; Speaker bit
002000  3               	CmdReg      = $b400	; Command register AtoMMC
002000  3               	DatReg      = $b401	; Data register AtoMMC
002000  3               	Timer2_Low  = $b808	; Timer 2 low byte
002000  3               	Timer2_High = $b809	; Timer 2 high byte
002000  3               	ScreenAddr  = $e400	; Startaddress video RAM
002000  3               
002000  3               	MAP 	    = $dd00		; properties map buffer (3x256 bytes)
002000  3               	SCADTB_lb   = MAP+3*256		; screen address table lo-byte (256 bytes)
002000  3               	SCADTB_hb   = SCADTB_lb+256	; screen address table hi-byte (256 bytes)
002000  3               	SHRAPN      = SCADTB_hb+256	; shrapnel table (55x6 bytes)
002000  3               
002000  3               ; System calls
002000  3               
002000  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
002000  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
002000  3               	OSRDCH   = $fe94	; get key subroutine
002000  3                       READKEY  = $fe71	; scan key matrix subroutine
002000  3               	OSWRCH	 = $fff4	; write character
002000  3               
002000  3               
002000  3               .if iflag
002000  3               	TxtInvert   = $ff	; Invert byte for character printing
002000  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002000  3               .else
002000  3               	TxtInvert   = $00	; Invert byte for character printing
002000  3               	ScrFillByte = $00	; Screen fill byte for CLS
002000  3               .endif
002000  3               
002000  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002000  3               
002000  3               ;===============================================================
002000  3               ; Game starts here
002000  3               ;===============================================================
002000  3               
002000  3               ;.segment "CODE"
002000  3               
002000  3  20 76 38     	jsr init
002003  3               
002003  3               ; Clear variables
002003  3               
002003  3  A9 00        	lda #0
002005  3  A2 00        	ldx #0
002007  3               clrloop:
002007  3  95 00        	sta 0,x
002009  3  E8           	inx
00200A  3  D0 FB        	bne clrloop
00200C  3               
00200C  3               gameloop:
00200C  3  20 D3 20     	jsr game	 	; start the game.
00200F  3  4C 0C 20     	jmp gameloop		; Start again
002012  3               
002012  3               ; Definition of variables
002012  3               ; Make sure pointers are arranged in the same order as the data itself.
002012  3               
002012  3  4C 34        msgptr:		.word msgdat	; messages
002014  3  A6 34        blkptr:		.word chgfx	; block graphics.
002016  3  AE 34        proptr:		.word bprop	; address of char properties.
002018  3  AF 34        sptptr:		.word sprgfx	; sprite graphics
00201A  3  2F 35        frmptr:		.word frmlst	; sprite frames.
00201C  3  33 35        scrptr:		.word scdat	; address of screens.
00201E  3  3F 35        nmeptr:		.word nmedat	; enemy start positions.
002020  3  44 35        objptr:		.word objdta	; object graphics
002022  3               
002022  3               ;TxtFilter:	.byte $ff
002022  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
002026  3               
002026  3               ; Don't change the order of these four.
002026  3               ; Menu routine relies on winlft following wintop.
002026  3               
002026  3  01           wintop:		.byte WINDOWTOP	; top of window.
002027  3  01           winlft:		.byte WINDOWLFT	; left edge.
002028  3  16           winhgt:		.byte WINDOWHGT	; window height.
002029  3  1E           winwid:		.byte WINDOWWID	; window width.
00202A  3  01           numob:		.byte NUMOBJ	; number of objects in game.
00202B  3               
00202B  3               ; Variables start here.
00202B  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00202B  3               
00202B  3  08           wntopx:		.byte (8 * WINDOWTOP)
00202C  3  08           wnlftx:		.byte (8 * WINDOWLFT)
00202D  3  A8           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00202E  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00202F  3               
00202F  3               ; Assorted game routines which can go in contended memory.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for inventory called by the INV command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with objects seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected objectnr of INV menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               .if mflag
00202F  3               minve:
00202F  3               .if gflag
00202F  3               	lda #$ff		; blue frontcolour
00202F  3               	sta andeor
00202F  3               	lda #$aa		; yellow backcoloour
00202F  3               	sta andeor+1
00202F  3               .endif
00202F  3               	lda #<(invdis)		; routine address.
00202F  3               	sta mod0+1		; set up menu routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(invdis)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               	lda #<(fopt)		; find option from available objects.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fopt)
00202F  3               	sta mod1+1+1
00202F  3               	jmp dbox		; do menu routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for menu called by the MENU command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with menu items seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected line nr of MENU menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               mmenu:
00202F  3               	lda #<(always)		; routine address.
00202F  3               	sta mod0+1		; set up routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(always)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               
00202F  3               	lda #<(fstd)		; standard option selection.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fstd)
00202F  3               	sta mod1+2
00202F  3               
00202F  3               ; Drop through into box routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Work out size of box for message or menu.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               dbox:
00202F  3               	lda #<(msgdat)		; pointer to messages.
00202F  3               	sta z80_l
00202F  3               	lda #>(msgdat)
00202F  3               	sta z80_h
00202F  3               
00202F  3               	jsr getwrd		; get message number.
00202F  3               
00202F  3               	lda z80_h		; store pointer to message.
00202F  3               	sta TmpAddr
00202F  3               	lda z80_l
00202F  3               	sta TmpAddr+1
00202F  3               
00202F  3               	lda #1			; height.
00202F  3               	sta z80_d
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               	sta z80_e		; maximum width.
00202F  3               dbox5:
00202F  3               	lda #0			; this line"s width.
00202F  3               	sta z80_b
00202F  3               mod2:
00202F  3               	jsr always		; item in player"s possession?
00202F  3               	cmp #255
00202F  3               	bne dbox6		; not in inventory, skip this line.
00202F  3               	inc z80_d		; add to tally.
00202F  3               dbox6:
00202F  3               	ldy #0			; get character.
00202F  3               	lda (z80_hl),y
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a		; reached end of line?
00202F  3               	cmp #','
00202F  3               	beq dbox3		; yes.
00202F  3               	cmp #13
00202F  3               	beq dbox3		; yes.
00202F  3               	inc z80_b		; add to this line"s width.
00202F  3               	lda z80_a
00202F  3               	bmi dbox4		; end of message? yes, end count.
00202F  3               	jmp dbox6		; repeat until we find the end.
00202F  3               dbox3:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox5		; no, carry on looking.
00202F  3               	lda z80_b		; make this the widest so far.
00202F  3               	sta z80_e
00202F  3               	jmp dbox5		; keep looking.
00202F  3               dbox4:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox8		; no, carry on looking.
00202F  3               	lda z80_b		; final line is the longest so far.
00202F  3               	sta z80_e
00202F  3               dbox8:
00202F  3               	dec z80_d		; decrement items found.
00202F  3               	bne :+			; total was zero.
00202F  3               	lda #255
00202F  3               	sta varopt
00202F  3               	jmp dbox15
00202F  3               :
00202F  3               	lda z80_e		; longest line.
00202F  3               	bne :+			; was it zero?
00202F  3               	jmp dbox15		; total was zero.
00202F  3               :
00202F  3               	sta bwid		; set up size.
00202F  3               	lda z80_d
00202F  3               	sta blen
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; That's set up our box size.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               	lda winhgt		; window height in characters.
00202F  3               	sec
00202F  3               	sbc z80_d		; subtract height of box.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc wintop		; add top edge of window.
00202F  3               	sta btop		; set up box top.
00202F  3               
00202F  3               	lda winwid		; window width in characters.
00202F  3               	sec
00202F  3               	sbc z80_e		; subtract box width.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc winlft		; add left edge of window.
00202F  3               	sta blft		; box left.
00202F  3               
00202F  3               	lda #<(FONT-256)		; font.
00202F  3               	sta grbase		; set up for text display.
00202F  3               	lda #>(FONT-256)
00202F  3               	sta grbase+1
00202F  3               
00202F  3               	lda TmpAddr+1		; restore message pointer.
00202F  3               	sta z80_l
00202F  3               	lda TmpAddr
00202F  3               	sta z80_h
00202F  3               
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set display coordinate.
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               dbox2:
00202F  3               	lda combyt		; get object number.
00202F  3               	sta z80_a
00202F  3               mod0:
00202F  3               	jsr always		; check inventory for display.
00202F  3               	cmp #255
00202F  3               	beq :+
00202F  3               	jmp dbox13		; not in inventory, skip this line.
00202F  3               :
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set left display position.
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_b		; store width.
00202F  3               dbox0:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	cmp #','		; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               	cmp #13			; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               
00202F  3               	cmp #141			; end of line?
00202F  3               	bne :+
00202F  3               	dec bwid
00202F  3               	jmp dbox7		; yes, next one.
00202F  3               :
00202F  3               	dec z80_b		; one less to display.
00202F  3               	and #127		; remove terminator.
00202F  3               
00202F  3               	jsr pchr		; display on screen.
00202F  3               
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a
00202F  3               	cmp #128		; end of message?
00202F  3               	bmi :+
00202F  3               	jmp dbox7		; yes, job done.
00202F  3               :
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	beq :+			; are any left?
00202F  3               	jmp dbox0		; yes, continue.
00202F  3               :
00202F  3               ;---------------------------------------------------
00202F  3               ; Reached limit of characters per line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dbox9:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #13			; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #128		; end of message?
00202F  3               	bcs :+
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox9
00202F  3               
00202F  3               ;---------------------------------------------------
00202F  3               ; Fill box to end of line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dboxf:
00202F  3               	lda #32			; space character.
00202F  3               	jsr pchr		; display character.
00202F  3               	dec z80_b
00202F  3               	beq :+
00202F  3               	jmp dboxf		; repeat for remaining chars on line.
00202F  3               :
00202F  3               	rts
00202F  3               dbox1:
00202F  3               	inc z80_l		; skip character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	jsr dboxf		; fill box out to right side.
00202F  3               dbox10:
00202F  3               	inc dispy		; y coordinate down a line next position.
00202F  3               	jmp dbox2		; next line.
00202F  3               dbox7:
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	bne :+			; are any left?
00202F  3               	jmp dbox11		; no, nothing to draw.
00202F  3               :
00202F  3               	jsr dboxf		; fill message to line.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Drawn the box menu, now select option.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox11:
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set bar position.
00202F  3               dbox14:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	bne dbox14		; yes, debounce it.
00202F  3               	jsr dbar		; draw bar.
00202F  3               dbox12:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	beq dbox12		; no, nothing.
00202F  3               	and #16			; fire button pressed?
00202F  3               	bne :+
00202F  3               mod1:
00202F  3               	jmp fstd		; yes, job done.
00202F  3               :
00202F  3               	jsr dbar		; delete bar.
00202F  3               
00202F  3               	lda joyval		; joystick reading.
00202F  3               	and #8			; going up?
00202F  3               	beq dboxu		; yes, go up.
00202F  3               
00202F  3               	ldx dispy		; vertical position of bar.
00202F  3               	inx			; look down.
00202F  3               	txa
00202F  3               	sec
00202F  3               	sbc btop		; find distance from top.
00202F  3               	cmp blen		; top of box.
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	inc dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               dboxu:
00202F  3               	lda dispy		; vertical position of bar.
00202F  3               	cmp btop		; are we at the top?
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	dec dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               fstd:
00202F  3               	lda dispy		; bar position.
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta varopt		; store the option.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Option not available.  Skip this line.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox13:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               	cmp #13			; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               
00202F  3               	bpl :+			; end of message?
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox13
00202F  3               dbox15:
00202F  3               	lda TmpAddr		; pop message pointer from the stack.
00202F  3               	sta z80_h
00202F  3               	lda TmpAddr+1
00202F  3               	sta z80_l
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Invert bar
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbar:
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set display coordinate.
00202F  3               	jsr gprad		; get printing address.
00202F  3               
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_c		; loop counter in c.
00202F  3               	lda z80_h
00202F  3               	sta z80_d		; store screen address high byte.
00202F  3               dbar1:
00202F  3               	ldx #7			; pixel height in b.
00202F  3               dbar0:
00202F  3               	ldy scrtab,x
00202F  3               	lda (scraddr),y		; get screen byte.
00202F  3               	eor #255		; reverse all bits.
00202F  3               	sta (scraddr),y		; write back to screen.
00202F  3               	dex			; next line down.
00202F  3               	bpl dbar0		; draw rest of character.
00202F  3               
00202F  3               	inc scraddr		; one char right.
00202F  3               	dec z80_c		; decrement character counter.
00202F  3               	bne dbar1		; repeat for whole line.
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Point to object
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  combyt
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  A = object number, A=255 if already in possession
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               invdis:
00202F  3               	lda z80_l		; store message text pointer.
00202F  3               	pha
00202F  3               	lda z80_h
00202F  3               	pha
00202F  3               	lda combyt		; object number.
00202F  3               	inc combyt		; ready for next one.
00202F  3               	jsr gotob		; check if we have object.
00202F  3               	tay
00202F  3               	pla
00202F  3               	sta z80_h
00202F  3               	pla
00202F  3               	sta z80_l
00202F  3               	tya
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Find option selected.
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  -
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected object
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               fopt:
00202F  3               	lda dispy
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta tmp+2		; option selected in b register.
00202F  3               	inc tmp+2
00202F  3               
00202F  3               	lda #0			; set to first item.
00202F  3               	sta combyt		; object number.
00202F  3               fopt0:
00202F  3               	jsr fobj		; find next object in inventory.
00202F  3               	dec tmp+2
00202F  3               	bne fopt0		; repeat for relevant steps down the list.
00202F  3               
00202F  3               	lda combyt		; get option.
00202F  3               	sta varopt		; store the option.
00202F  3               	dec varopt		; one less, due to where we increment combyt.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               fobj:
00202F  3               	ldy combyt		; object number.
00202F  3               	inc combyt		; ready for next item.
00202F  3               	tya
00202F  3               	jsr gotob		; do we have this item?
00202F  3               	cmp #255
00202F  3               	bne :+
00202F  3               	rts
00202F  3               :
00202F  3               	jmp fobj		; yes, it's on the list.
00202F  3               
00202F  3               ;bwid:	.byte 0              ; box/menu width.
00202F  3               ;blen:	.byte 0              ; box/menu height.
00202F  3               ;btop:	.byte 0              ; box coordinates.
00202F  3               ;blft:	.byte 0
00202F  3               .endif
00202F  3               
00202F  3               ;----------------------------------------------------
00202F  3               ; Delay routine 1/50 sec
00202F  3               ;----------------------------------------------------
00202F  3               
00202F  3               delay:
00202F  3  8D B6 38     	sta frames_delay
002032  3               del_loop:
002032  3  AD B6 38     	lda frames_delay
002035  3  D0 FB        	bne del_loop
002037  3  60           	rts
002038  3               
002038  3               ;----------------------------------------------------
002038  3               ; Clear sprite table.
002038  3               ;
002038  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002038  3               ;----------------------------------------------------
002038  3               
002038  3               xspr:
002038  3  A9 FF        	lda #255		; clear byte.
00203A  3  A2 00        	ldx #0			; length of table.
00203C  3               xspr0:
00203C  3  9D 27 33     	sta sprtab,x		; sprite table.
00203F  3  E8           	inx			; move to next byte.
002040  3  E0 CC        	cpx #SPRBUF
002042  3  D0 F8        	bne xspr0		; repeat for rest of table.
002044  3  60           	rts
002045  3               
002045  3               ;-------------------------------------------------------------
002045  3               ; Initialise all objects.
002045  3               ;
002045  3               ; Reset current room,y,x to start room,y,x for all objects
002045  3               ;-------------------------------------------------------------
002045  3               
002045  3               .if oflag
002045  3               iniob:
002045  3               	lda #<objdta 		; objects table.
002045  3               	sta z80_x
002045  3               	lda #>objdta
002045  3               	sta z80_i
002045  3               
002045  3               	ldx numob 		; number of objects in the game.
002045  3               iniob0:
002045  3               	ldy #35
002045  3               	lda (z80_ix),y 		; start screen.
002045  3               	ldy #32
002045  3               	sta (z80_ix),y 		; set start screen.
002045  3               
002045  3               	ldy #36
002045  3               	lda (z80_ix),y 		; find start y.
002045  3               	ldy #33
002045  3               	sta (z80_ix),y 		; set start y.
002045  3               
002045  3               	ldy #37
002045  3               	lda (z80_ix),y 		; get initial x.
002045  3               	ldy #34
002045  3               	sta (z80_ix),y 		; set x coord.
002045  3               
002045  3               	clc 			; point to next object.
002045  3               	lda z80_x
002045  3               	adc #38			; distance between objects.
002045  3               	sta z80_x
002045  3               	bcc :+
002045  3               	inc z80_i
002045  3               :
002045  3               	dex 			; repeat.
002045  3               	bne iniob0
002045  3               
002045  3               	rts
002045  3               .endif
002045  3               
002045  3               ;-------------------------------------------------------------
002045  3               ; Screen synchronisation.
002045  3               ;
002045  3               ;  - read joystick/keyboard
002045  3               ;  - handle sound
002045  3               ;  - handle shrapnel every even frame
002045  3               ;  - sync framerate to 25 Hz
002045  3               ;-------------------------------------------------------------
002045  3               
002045  3               vsync:
002045  3               
002045  3               ; Save registers
002045  3               
002045  3  48           	pha
002046  3  98           	tya
002047  3  48           	pha
002048  3  8A           	txa
002049  3  48           	pha
00204A  3               
00204A  3               ; Read joystick/keyboard
00204A  3               
00204A  3  20 68 29     	jsr joykey		; read joystick/keyboard.
00204D  3               
00204D  3               ; Handle shrapnel every even frame
00204D  3               
00204D  3  A5 rr        	lda clock
00204F  3  29 01        	and #1
002051  3  D0 03        	bne:+
002053  3  20 CF 20     	jsr proshr		; handle shrapnel every even frame
002056  3               :
002056  3               
002056  3               ; Handle sound
002056  3               
002056  3  AD 6D 20     	lda sndtyp
002059  3  F0 00        	beq sndskip
00205B  3               sndloop:
00205B  3               
00205B  3               sndskip:
00205B  3               
00205B  3               ; Sync framerate to 25 Hz
00205B  3               
00205B  3               check_if_enough_frames_passed:
00205B  3  AD B5 38     	lda frames_passed
00205E  3  C9 02        	cmp #2
002060  3  90 F9        	bcc check_if_enough_frames_passed
002062  3               
002062  3  A9 00        	lda #0			; sync framerate 25 Hz
002064  3  8D B5 38     	sta frames_passed
002067  3               
002067  3               ; Restore registers
002067  3               
002067  3  68           	pla
002068  3  AA           	tax
002069  3  68           	pla
00206A  3  A8           	tay
00206B  3  68           	pla
00206C  3  60           	rts
00206D  3               
00206D  3  00           sndtyp:	.byte 0
00206E  3               
00206E  3               ;-----------------------------------------------
00206E  3               ; Redraw the screen.
00206E  3               ;
00206E  3               ; Remove old copy of all sprites for redraw.
00206E  3               ;-----------------------------------------------
00206E  3               
00206E  3               redraw:
00206E  3               .if gflag
00206E  3               	lda #$ff
00206E  3               	sta andeor
00206E  3               	lda #$00
00206E  3               	sta andeor+1
00206E  3               .endif
00206E  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
002070  3  48           	pha
002071  3  A5 68        	lda z80_x
002073  3  48           	pha
002074  3               
002074  3  20 EC 25     	jsr droom		; show screen layout.
002077  3               .if oflag
002077  3               	jsr shwob		; draw objects.
002077  3               .endif
002077  3               numsp0:
002077  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002079  3  85 rr        	sta tmp
00207B  3               
00207B  3  A9 27        	lda #<sprtab		; sprite table.
00207D  3  85 68        	sta z80_x
00207F  3  A9 33        	lda #>sprtab
002081  3  85 69        	sta z80_i
002083  3               redrw0:
002083  3  A0 00        	ldy #0
002085  3  B1 68        	lda (z80_ix),y		; old sprite type.
002087  3  C9 FF        	cmp #255		; is it enabled?
002089  3  F0 0B        	beq redrw1 		; no, find next one.
00208B  3               
00208B  3  A0 03        	ldy #3
00208D  3  B1 68        	lda (z80_ix),y 		; sprite y.
00208F  3  C9 B1        	cmp #177		; beyond maximum?
002091  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002093  3               
002093  3  20 F4 2C     	jsr sspria		; show single sprite.
002096  3               redrw1:
002096  3  18           	clc			; next sprite.
002097  3  A5 68        	lda z80_x
002099  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00209B  3  85 68        	sta z80_x
00209D  3  90 02        	bcc :+
00209F  3  E6 69        	inc z80_i
0020A1  3               :
0020A1  3  C6 rr        	dec tmp			; repeat for remaining sprites.
0020A3  3  D0 DE        	bne redrw0
0020A5  3               rpblc1:
0020A5  3               ;	jsr dshrp		; redraw shrapnel.
0020A5  3               
0020A5  3               .if aflag
0020A5  3               	jsr rbloc		; draw blocks for this screen
0020A5  3               .endif
0020A5  3  68           	pla			; retrieve sprite pointer.
0020A6  3  85 68        	sta z80_x
0020A8  3  68           	pla
0020A9  3  85 69        	sta z80_i
0020AB  3               
0020AB  3  60           	rts
0020AC  3               
0020AC  3               ;----------------------------------------------------------------------
0020AC  3               ; Clear screen routine.
0020AC  3               ;
0020AC  3               ; Fill screenmem $e400-$fbff with ScrFillByte
0020AC  3               ;----------------------------------------------------------------------
0020AC  3               
0020AC  3               cls:
0020AC  3  A9 E4        	lda #>ScreenAddr		; screen address.
0020AE  3  8D B7 20     	sta clsloop+2
0020B1  3  A9 00        	lda #ScrFillByte
0020B3  3               .if gflag
0020B3  3               	lda andeor+1
0020B3  3               .endif
0020B3  3               .if iflag
0020B3  3               	eor #$ff
0020B3  3               .endif
0020B3  3  A0 00        	ldy #0
0020B5  3               clsloop:
0020B5  3  99 00 E4     	sta ScreenAddr,y
0020B8  3  C8           	iny
0020B9  3  D0 FA        	bne clsloop
0020BB  3  EE B7 20     	inc clsloop+2
0020BE  3  AE B7 20     	ldx clsloop+2
0020C1  3  E0 FC        	cpx #>(ScreenAddr+$1800)
0020C3  3  D0 F0        	bne clsloop
0020C5  3  60           	rts
0020C6  3               
0020C6  3               ;----------------------------------------------------------------------
0020C6  3               ; Atomic palette is static
0020C6  3               ;----------------------------------------------------------------------
0020C6  3               
0020C6  3               setpal:
0020C6  3  60           	rts
0020C7  3               
0020C7  3               ;----------------------------------------------------------------------
0020C7  3               ; FODDER check
0020C7  3               ;----------------------------------------------------------------------
0020C7  3               
0020C7  3               .if pflag .or dflag
0020C7  3               fdchk:
0020C7  3               	cmp #FODDER 		; is it fodder?
0020C7  3               	beq :+
0020C7  3               	rts 			; no.
0020C7  3               :
0020C7  3               	lda #0			; wipe fodder in MAP
0020C7  3               	ldy #0
0020C7  3               	sta (bufaddr),y 	; rewrite block type.
0020C7  3               
0020C7  3               	lda dispx		; x=x/8
0020C7  3               	pha
0020C7  3               	lsr a
0020C7  3               	lsr a
0020C7  3               	lsr a
0020C7  3               	sta dispx
0020C7  3               
0020C7  3               	lda dispy		; y=y/8
0020C7  3               	pha
0020C7  3               	lsr a
0020C7  3               	lsr a
0020C7  3               	lsr a
0020C7  3               	sta dispy
0020C7  3               
0020C7  3               	lda #0 			; block to write.
0020C7  3               	jsr pattr 		; write block.
0020C7  3               
0020C7  3               	pla
0020C7  3               	sta dispy
0020C7  3               	pla
0020C7  3               	sta dispx
0020C7  3               	rts
0020C7  3               .endif
0020C7  3               
0020C7  3               ;----------------------------------------------------
0020C7  3               ; Scrolly text and puzzle variables.
0020C7  3               ;----------------------------------------------------
0020C7  3               
0020C7  3               .if sflag
0020C7  3  80           txtbit:	.byte 128		; bit to write.
0020C8  3  10           txtwid:	.byte 16		; width of ticker message.
0020C9  3  4C 34        txtpos:	.word msgdat
0020CB  3  4C 34        txtini:	.word msgdat
0020CD  3  00 E4        txtscr:	.word ScreenAddr
0020CF  3               .endif
0020CF  3               
0020CF  3               ;----------------------------------------------------
0020CF  3               ; Specialist routines.
0020CF  3               ; Process shrapnel.
0020CF  3               ;----------------------------------------------------
0020CF  3               proshr:
0020CF  3               .if pflag
0020CF  3               	lda #<SHRAPN		; table.
0020CF  3               	sta z80_x
0020CF  3               	lda #>SHRAPN
0020CF  3               	sta z80_i
0020CF  3               
0020CF  3               	lda #NUMSHR		; shrapnel pieces to process.
0020CF  3               	sta shrctr
0020CF  3               prosh0:
0020CF  3               	ldy #0
0020CF  3               	lda (z80_ix),y		; on/off marker.
0020CF  3               	asl a
0020CF  3               proshx:
0020CF  3               	bcs :+
0020CF  3               	jsr prosh1 		; on, so process it.
0020CF  3               :
0020CF  3               	clc
0020CF  3               	lda z80_x
0020CF  3               	adc #SHRSIZ
0020CF  3               	sta z80_x
0020CF  3               	bcc :+
0020CF  3               	inc z80_i
0020CF  3               :
0020CF  3               	dec shrctr		; round again.
0020CF  3               	bne prosh0
0020CF  3               .endif
0020CF  3               .if sflag
0020CF  3  20 2B 32     	jsr scrly
0020D2  3               .endif
0020D2  3  60           	rts
0020D3  3               
0020D3  3               .if pflag
0020D3  3               ;shrctr:	.byte 0
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Proces shrapnel piece
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               prosh1:
0020D3  3               	jsr plot 		; delete the pixel.
0020D3  3               
0020D3  3               	lda #<shrptr		; shrapnel routine pointers.
0020D3  3               	sta z80_l
0020D3  3               	lda #>shrptr
0020D3  3               	sta z80_h
0020D3  3               
0020D3  3               	ldy #0
0020D3  3               	lda (z80_ix),y		; restore shrapnel type.
0020D3  3               	jsr prosh2 		; run the routine.
0020D3  3               	jsr chkxy		; check x and y are good before we redisplay.
0020D3  3               
0020D3  3               	lda #<SHRSIZ 		; distance to next.
0020D3  3               	sta z80_e
0020D3  3               	lda #>SHRSIZ
0020D3  3               	sta z80_d
0020D3  3               	rts
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Run the routine
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               prosh2:
0020D3  3               	asl a 			; 2 bytes per address.
0020D3  3               	tay
0020D3  3               	lda shrptr,y
0020D3  3               	sta z80_l
0020D3  3               	lda shrptr+1,y 		; fetch high byte from table.
0020D3  3               	sta z80_h
0020D3  3               	jmp (z80_hl) 		; jump to routine.
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Paricle routine table
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               shrptr:	.word laser		; laser.
0020D3  3               	.word trail		; vapour trail.
0020D3  3               	.word shrap		; shrapnel from explosion.
0020D3  3               	.word dotl		; horizontal starfield left.
0020D3  3               	.word dotr		; horizontal starfield right.
0020D3  3               	.word dotu		; vertical starfield up.
0020D3  3               	.word dotd		; vertical starfield down.
0020D3  3               	.word ptcusr		; user particle.
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Explosion shrapnel.
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               shrap:
0020D3  3               	ldy #1
0020D3  3               	lda (z80_ix),y 		; get the angle.
0020D3  3               	clc
0020D3  3               	adc #<shrsin		; shrapnel sine table.
0020D3  3               	sta z80_l
0020D3  3               	lda #>shrsin
0020D3  3               	adc #0
0020D3  3               	sta z80_h
0020D3  3               
0020D3  3               	ldy #0
0020D3  3               	lda (z80_hl),y 		; fetch value from table.
0020D3  3               	sta z80_e
0020D3  3               	inc z80_l 		; next byte of table.
0020D3  3               	bne :+
0020D3  3               	inc z80_h
0020D3  3               :
0020D3  3               	ldy #0
0020D3  3               	lda (z80_hl),y		; fetch value from table.
0020D3  3               	sta z80_d
0020D3  3               	inc z80_l		; next byte of table.
0020D3  3               	bne :+
0020D3  3               	inc z80_h
0020D3  3               :
0020D3  3               	ldy #0
0020D3  3               	lda (z80_hl),y 		; fetch value from table.
0020D3  3               	sta z80_c
0020D3  3               	inc z80_l 		; next byte of table.
0020D3  3               	bne :+
0020D3  3               	inc z80_h
0020D3  3               :
0020D3  3               	ldy #0
0020D3  3               	lda (z80_hl),y 		; fetch value from table.
0020D3  3               	sta z80_b
0020D3  3               
0020D3  3               	ldy #2
0020D3  3               	lda (z80_ix),y 		; x coordinate in hl.
0020D3  3               	clc
0020D3  3               	adc z80_e		; add sine lb
0020D3  3               	sta (z80_ix),y		; store new coordinate lb.
0020D3  3               	ldy #3
0020D3  3               	lda (z80_ix),y
0020D3  3               	adc z80_d		; add sine hb
0020D3  3               	sta (z80_ix),y		; store new coordinate hb.
0020D3  3               
0020D3  3               	ldy #4
0020D3  3               	lda (z80_ix),y	 	; y coordinate in hl.
0020D3  3               	clc
0020D3  3               	adc z80_c		; add cosine lb
0020D3  3               	sta (z80_ix),y		; store new coordinate lb.
0020D3  3               	ldy #5
0020D3  3               	lda (z80_ix),y
0020D3  3               	adc z80_b		; add cosine lb
0020D3  3               	sta (z80_ix),y		; store new coordinate hb.
0020D3  3               
0020D3  3               	rts
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Move dots
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               dotl:
0020D3  3               	ldy #5
0020D3  3               	lda (z80_ix),y
0020D3  3               	sec
0020D3  3               	sbc #1		 	; move left.
0020D3  3               	sta (z80_ix),y
0020D3  3               	rts
0020D3  3               dotr:
0020D3  3               	ldy #5
0020D3  3               	lda (z80_ix),y
0020D3  3               	clc
0020D3  3               	adc #1		 	; move left.
0020D3  3               	sta (z80_ix),y
0020D3  3               	rts
0020D3  3               dotu:
0020D3  3               	ldy #3
0020D3  3               	lda (z80_ix),y
0020D3  3               	sec
0020D3  3               	sbc #1		 	; move up.
0020D3  3               	sta (z80_ix),y
0020D3  3               	rts
0020D3  3               dotd:
0020D3  3               	ldy #3
0020D3  3               	lda (z80_ix),y
0020D3  3               	clc
0020D3  3               	adc #1			; move down.
0020D3  3               	sta (z80_ix),y
0020D3  3               	rts
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Check if coordinates are ok before redrawing at new position.
0020D3  3               ;
0020D3  3               ; left:   X>L		X=L	Ok
0020D3  3               ; right:  R+15>X	X=R	Ok
0020D3  3               ; top:    Y>T		Y=T	Ok
0020D3  3               ; bottom: B+15>Y	Y=B	Ok
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               chkxy:
0020D3  3               
0020D3  3               ; top:    Y>T		Y=T	Ok
0020D3  3               
0020D3  3               	ldy #3
0020D3  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0020D3  3               	cmp wntopx		; window top.
0020D3  3               	bcs :+			; compare with top window limit.
0020D3  3               	jmp kilshr		; out of window, kill shrapnel.
0020D3  3               :
0020D3  3               ; left:   X>L		X=L	Ok
0020D3  3               
0020D3  3               	ldy #5
0020D3  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0020D3  3               	cmp wnlftx		; left edge.
0020D3  3               	bcs :+			; compare with left window limit.
0020D3  3               	jmp kilshr		; out of window, kill shrapnel.
0020D3  3               :
0020D3  3               ; bottom: B+15>Y	Y=B	Ok
0020D3  3               
0020D3  3               	lda wnbotx		; point to bottom.
0020D3  3               	clc
0020D3  3               	adc #15
0020D3  3               	ldy #3
0020D3  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0020D3  3               	bcs :+			; compare with shrapnel x coordinate.
0020D3  3               	jmp kilshr		; off screen, kill shrapnel..
0020D3  3               :
0020D3  3               ; right:  R+15>X	X=R	Ok
0020D3  3               
0020D3  3               	lda wnrgtx		; point to right edge.
0020D3  3               	clc
0020D3  3               	adc #15
0020D3  3               	ldy #5
0020D3  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0020D3  3               	bcs :+			; compare with window limit.
0020D3  3               	jmp kilshr		; off screen, kill shrapnel.
0020D3  3               :
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Drop through.
0020D3  3               ; Display shrapnel.
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               plot:
0020D3  3               	ldy #3
0020D3  3               	lda (z80_ix),y		; y integer.
0020D3  3               	sta dispy	 	; workspace coordinates.
0020D3  3               	ldy #5
0020D3  3               	lda (z80_ix),y	 	; x integer.
0020D3  3               	sta dispx 		; workspace coordinates.
0020D3  3               
0020D3  3               	ldy #0
0020D3  3               	lda (z80_ix),y 		; type.
0020D3  3               	bne :+			; is it a laser?
0020D3  3               	jmp plot1 		; yes, draw laser instead.
0020D3  3               :
0020D3  3               plot0:
0020D3  3               	lda dispx		; which pixel within byte do we
0020D3  3               	and #7			; want to set first?
0020D3  3               	tay
0020D3  3               	lda dots,y 		; table of small pixel positions.
0020D3  3               	sta z80_e 		; get value.
0020D3  3               
0020D3  3               	jsr scadd 		; screen address.
0020D3  3               	ldy #0
0020D3  3               	lda (scraddr),y		; see what's already there.
0020D3  3               	eor z80_e
0020D3  3               	sta (scraddr),y 	; put back on screen.
0020D3  3               	rts
0020D3  3               
0020D3  3               plot1:
0020D3  3               	jsr scadd 		; screen address.
0020D3  3               	ldy #0
0020D3  3               	lda (scraddr),y 	; fetch byte there.
0020D3  3               	eor #255 		; toggle all bits.
0020D3  3               	sta (scraddr),y 	; new byte.
0020D3  3               	rts
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Switch off shrapnel
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               kilshr:
0020D3  3               	lda #128
0020D3  3               	ldy #0
0020D3  3               	sta (z80_ix),y	; switch off shrapnel.
0020D3  3               	rts
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Sine/cosine table
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               shrsin:	.word 0,1024,391,946,724,724,946,391
0020D3  3               	.word 1024,0,946,65144,724,64811,391,64589
0020D3  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0020D3  3               	.word 64512,0,64589,391,64811,724,65144,946
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Create trail
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               trail:
0020D3  3               	ldy #1
0020D3  3               	lda (z80_ix),y 	; time remaining.
0020D3  3               	sec
0020D3  3               	sbc #1
0020D3  3               	sta (z80_ix),y
0020D3  3               	bne :+
0020D3  3               	jmp trailk		; time to switch it off.
0020D3  3               :
0020D3  3               	jsr qrand		; get a random number.
0020D3  3               	lsr a 			; x or y axis?
0020D3  3               	bcc :+
0020D3  3               	jmp trailv		; use y.
0020D3  3               :
0020D3  3               ; Trail horizontal
0020D3  3               
0020D3  3               	lsr a 			; which direction?
0020D3  3               	bcc :+
0020D3  3               	jmp traill		; go left.
0020D3  3               :
0020D3  3               ; Trail right
0020D3  3               
0020D3  3               	ldy #5
0020D3  3               	lda (z80_ix),y
0020D3  3               	clc
0020D3  3               	adc #1	 		; go right.
0020D3  3               	sta (z80_ix),y
0020D3  3               	rts
0020D3  3               
0020D3  3               ; Trail left
0020D3  3               
0020D3  3               traill:
0020D3  3               	ldy #5
0020D3  3               	lda (z80_ix),y
0020D3  3               	sec
0020D3  3               	sbc #1 			; go left.
0020D3  3               	sta (z80_ix),y
0020D3  3               	rts
0020D3  3               
0020D3  3               ; Trail vertical
0020D3  3               
0020D3  3               trailv:
0020D3  3               	lsr a		 	; which direction?
0020D3  3               	bcc :+
0020D3  3               	jmp trailu		; go up.
0020D3  3               :
0020D3  3               ; Trail down
0020D3  3               
0020D3  3               	ldy #3
0020D3  3               	lda (z80_ix),y
0020D3  3               	clc
0020D3  3               	adc #1 			; go down.
0020D3  3               	sta (z80_ix),y
0020D3  3               	rts
0020D3  3               
0020D3  3               ; Trail up
0020D3  3               
0020D3  3               trailu:
0020D3  3               	ldy #3
0020D3  3               	lda (z80_ix),y
0020D3  3               	sec
0020D3  3               	sbc #1 			; go up.
0020D3  3               	sta (z80_ix),y
0020D3  3               	rts
0020D3  3               
0020D3  3               ; Kill trail
0020D3  3               
0020D3  3               trailk:
0020D3  3               	lda #200		; set off-screen to kill vapour trail.
0020D3  3               	ldy #3
0020D3  3               	sta (z80_ix),y
0020D3  3               	rts
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Create laser beam
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               laser:
0020D3  3               	ldy #1
0020D3  3               	lda (z80_ix),y 		; direction.
0020D3  3               	ror a 			; left or right?
0020D3  3               	bcc :+
0020D3  3               	jmp laserl		; move left.
0020D3  3               :
0020D3  3               ; Laser right
0020D3  3               
0020D3  3               	lda #8			; distance to travel.
0020D3  3               	sta z80_b
0020D3  3               	jmp laserm		; move laser.
0020D3  3               
0020D3  3               ; Laser left
0020D3  3               
0020D3  3               laserl:
0020D3  3               	lda #248		; distance to travel.
0020D3  3               	sta z80_b
0020D3  3               laserm:
0020D3  3               	ldy #5
0020D3  3               	lda (z80_ix),y		; x position.
0020D3  3               	clc
0020D3  3               	adc z80_b		; add distance.
0020D3  3               	sta (z80_ix),y		; set new x coordinate.
0020D3  3               
0020D3  3               ; Test new block.
0020D3  3               
0020D3  3               	sta dispx 		; set x for block collision detection purposes.
0020D3  3               	ldy #3
0020D3  3               	lda (z80_ix),y 		; get y.
0020D3  3               	sta dispy		; set coordinate for collision test.
0020D3  3               	jsr tstbl 		; get block type there.
0020D3  3               	cmp #WALL		; is it solid?
0020D3  3               	bne :+
0020D3  3               	jmp trailk		; yes, it cannot pass.
0020D3  3               :
0020D3  3               .if pflag .or dflag
0020D3  3                       cmp #FODDER             ; is it fodder?
0020D3  3                       bne :+
0020D3  3                       jsr fdchk               ; remove fodder block.
0020D3  3                       jmp trailk              ; destroy laser.
0020D3  3               :
0020D3  3               .endif
0020D3  3                       rts                     ; no, ignore it.
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Dots mask
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               dots:	.byte 128,64,32,16,8,4,2,1
0020D3  3               
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Plot, preserving de.
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               plotde:
0020D3  3               	lda z80_d 		; put de on stack.
0020D3  3               	pha
0020D3  3               	lda z80_e
0020D3  3               	pha
0020D3  3               
0020D3  3               	jsr plot 		; plot pixel.
0020D3  3               
0020D3  3               	pla			; restore de from stack.
0020D3  3               	sta z80_e
0020D3  3               	pla
0020D3  3               	sta z80_d
0020D3  3               
0020D3  3               	rts
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Shoot a laser.
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               shoot:
0020D3  3               	sta z80_c		; store direction in c register.
0020D3  3               	ldy #8
0020D3  3               	lda (z80_ix),y 		; y coordinate.
0020D3  3               	clc
0020D3  3               shoot1:
0020D3  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0020D3  3               	sta z80_l 		; puty y coordinate in l.
0020D3  3               
0020D3  3               	ldy #9
0020D3  3               	lda (z80_ix),y 		; x coordinate in h.
0020D3  3               	sta z80_h
0020D3  3               
0020D3  3               	lda z80_i		; store pointer to sprite.
0020D3  3               	pha
0020D3  3               	lda z80_x
0020D3  3               	pha
0020D3  3               
0020D3  3               	jsr fpslot 		; find particle slot.
0020D3  3               	bcs :+
0020D3  3               	jmp vapou2		; failed, restore ix.
0020D3  3               :
0020D3  3               	lda #0
0020D3  3               	ldy #0
0020D3  3               	sta (z80_ix),y 		; set up a laser.
0020D3  3               
0020D3  3               	lda z80_c
0020D3  3               	ldy #1
0020D3  3               	sta (z80_ix),y 		; set the direction.
0020D3  3               
0020D3  3               	lda z80_l
0020D3  3               	ldy #3
0020D3  3               	sta (z80_ix),y		; set y coordinate.
0020D3  3               
0020D3  3               	ror z80_c		; check direction we want.
0020D3  3               	bcc :+
0020D3  3               	jmp shootr		; shoot right.
0020D3  3               :
0020D3  3               	lda z80_h		; X position.
0020D3  3               shoot0:
0020D3  3               	and #248		; align on character boundary.
0020D3  3               	ldy #5
0020D3  3               	sta (z80_ix),y		; set x coordinate.
0020D3  3               	jmp vapou0 		; draw first image.
0020D3  3               shootr:
0020D3  3               	lda z80_h		; x position.
0020D3  3               	clc
0020D3  3               	adc #15			; look right.
0020D3  3               	jmp shoot0		; align and continue.
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Create a bit of vapour trail.
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               vapour:
0020D3  3               	lda z80_i		; store pointer to sprite.
0020D3  3               	pha
0020D3  3               	lda z80_x
0020D3  3               	pha
0020D3  3               
0020D3  3               	ldy #8
0020D3  3               	lda (z80_ix),y 		; y coordinate.
0020D3  3               	clc
0020D3  3               vapou3:
0020D3  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0020D3  3               	sta z80_l
0020D3  3               
0020D3  3               	ldy #9
0020D3  3               	lda (z80_ix),y 		; x coordinate.
0020D3  3               	adc #7
0020D3  3               	sta z80_h
0020D3  3               
0020D3  3               	jsr fpslot 		; find particle slot.
0020D3  3               	bcc :+
0020D3  3               	jmp vapou1		; no, we can use it.
0020D3  3               :
0020D3  3               vapou2:
0020D3  3               	pla
0020D3  3               	sta z80_x
0020D3  3               	pla
0020D3  3               	sta z80_i
0020D3  3               	rts
0020D3  3               vapou1:
0020D3  3               	lda z80_l
0020D3  3               	ldy #3
0020D3  3               	sta (z80_ix),y		; set up y.
0020D3  3               
0020D3  3               	lda z80_h
0020D3  3               	ldy #5
0020D3  3               	sta (z80_ix),y 		; set up x coordinate.
0020D3  3               
0020D3  3               	jsr qrand		; get quick random number.
0020D3  3               	and #15			; random time.
0020D3  3               	clc
0020D3  3               	adc #15			; minimum time on screen.
0020D3  3               	ldy #1
0020D3  3               	sta (z80_ix),y		; set time on screen.
0020D3  3               
0020D3  3               	lda #1
0020D3  3               	ldy #0
0020D3  3               	sta (z80_ix),y		; define particle as vapour trail.
0020D3  3               vapou0:
0020D3  3               	jsr chkxy		; plot first position.
0020D3  3               	jmp vapou2
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Create a user particle.
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               ptusr:
0020D3  3               	sta z80_f		; store timer.
0020D3  3               
0020D3  3               	ldy #8
0020D3  3               	lda (z80_ix),y 		; y coordinate.
0020D3  3               	clc
0020D3  3               	adc #7			; mid-point of sprite.
0020D3  3               	sta z80_l
0020D3  3               
0020D3  3               	ldy #9
0020D3  3               	lda (z80_ix),y 		; x coordinate.
0020D3  3               	clc
0020D3  3               	adc #7			; mid-point of sprite.
0020D3  3               	sta z80_h
0020D3  3               
0020D3  3               	jsr fpslot 		; find particle slot.
0020D3  3               	bcs ptusr1
0020D3  3               	rts 			; out of slots, can't generate anything.
0020D3  3               ptusr1:
0020D3  3               	lda z80_l
0020D3  3               	ldy #3
0020D3  3               	sta (z80_ix),y 		; set up y.
0020D3  3               
0020D3  3               	lda z80_h
0020D3  3               	ldy #5
0020D3  3               	sta (z80_ix),y		; set up x coordinate.
0020D3  3               
0020D3  3               	lda z80_f 		; restore timer.
0020D3  3               	ldy #1
0020D3  3               	sta (z80_ix),y		; set time on screen.
0020D3  3               
0020D3  3               	lda #7
0020D3  3               	ldy #0
0020D3  3               	sta (z80_ix),y		; define particle as user particle.
0020D3  3               
0020D3  3               	jmp chkxy		; plot first position.
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Create a vertical or horizontal star.
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               star:
0020D3  3               	lda z80_i		; store pointer to sprite.
0020D3  3               	pha
0020D3  3               	lda z80_x
0020D3  3               	pha
0020D3  3               
0020D3  3               	jsr fpslot 		; find particle slot.
0020D3  3               	bcs star7		; found one we can use.
0020D3  3               star0:
0020D3  3               	pla 			; restore sprite pointer.
0020D3  3               	sta z80_x
0020D3  3               	pla
0020D3  3               	sta z80_i
0020D3  3               	rts 			; out of slots, can't generate anything.
0020D3  3               star7:
0020D3  3               	lda z80_c		; direction.
0020D3  3               	and #3 			; is it left?
0020D3  3               	bne :+
0020D3  3               	jmp star1 		; yes, it's left.
0020D3  3               :
0020D3  3               	cmp #1 			; is it right?
0020D3  3               	bne :+
0020D3  3               	jmp star2 		; yes, it's right.
0020D3  3               :
0020D3  3               	cmp #2 			; is it up?
0020D3  3               	bne :+
0020D3  3               	jmp star3 		; yes, it's up.
0020D3  3               :
0020D3  3               	ldy wntopx 		; get edge of screen.
0020D3  3               	iny			; down one pixel.
0020D3  3               	tya
0020D3  3               star8:
0020D3  3               	ldy #3
0020D3  3               	sta (z80_ix),y 		; set y coord.
0020D3  3               	jsr qrand 		; get quick random number.
0020D3  3               star9:
0020D3  3               	ldy #5
0020D3  3               	sta (z80_ix),y		; set x position.
0020D3  3               
0020D3  3               	lda z80_c		; direction.
0020D3  3               	and #3			; zero to three.
0020D3  3               	clc
0020D3  3               	adc #3			; 3 to 6 for starfield.
0020D3  3               	ldy #0
0020D3  3               	sta (z80_ix),y		; define particle as star.
0020D3  3               	jsr chkxy		; plot first position.
0020D3  3               	jmp star0
0020D3  3               star1:
0020D3  3               	jsr qrand		; get quick random number.
0020D3  3               	ldy #3
0020D3  3               	sta (z80_ix),y 		; set y coord.
0020D3  3               
0020D3  3               	lda wnrgtx 		; get edge of screen.
0020D3  3               	clc
0020D3  3               	adc #15			; add width of sprite minus 1.
0020D3  3               	jmp star9
0020D3  3               star2:
0020D3  3               	jsr qrand 		; get quick random number.
0020D3  3               	ldy #3
0020D3  3               	sta (z80_ix),y		; set y coord.
0020D3  3               
0020D3  3               	lda wnlftx		; get edge of screen.
0020D3  3               	jmp star9
0020D3  3               star3:
0020D3  3               	lda wnbotx 		; get edge of screen.
0020D3  3               	clc
0020D3  3               	adc #15 		; height of sprite minus one pixel.
0020D3  3               	jmp star8
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Find particle slot for lasers or vapour trail.
0020D3  3               ; can't use alternate accumulator.
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               fpslot:
0020D3  3               	lda #<SHRAPN 		; shrapnel table.
0020D3  3               	sta z80_x
0020D3  3               	lda #>SHRAPN
0020D3  3               	sta z80_i
0020D3  3               
0020D3  3               	lda #NUMSHR		; number of pieces in table.
0020D3  3               	sta z80_b
0020D3  3               fpslt0:
0020D3  3               	ldy #0
0020D3  3               	lda (z80_ix),y		; get type.
0020D3  3               	asl a  			; is this slot in use?
0020D3  3               	bcc :+
0020D3  3               	rts			; no, we can use it.
0020D3  3               :
0020D3  3               	clc			; point to more shrapnel.
0020D3  3               	lda z80_x
0020D3  3               	adc #SHRSIZ
0020D3  3               	sta z80_x
0020D3  3               	bcc :+
0020D3  3               	inc z80_i
0020D3  3               :
0020D3  3               	dec z80_b		; repeat for all shrapnel.
0020D3  3               	bne fpslt0
0020D3  3               
0020D3  3               	clc
0020D3  3               	rts 			; out of slots, can't generate anything.
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Create an explosion at sprite position.
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               explod:
0020D3  3               	sta z80_c 		; particles to create.
0020D3  3               
0020D3  3               	lda z80_i 		; store pointer to sprite.
0020D3  3               	pha
0020D3  3               	lda z80_x
0020D3  3               	pha
0020D3  3               
0020D3  3               	ldy #8
0020D3  3               	lda (z80_ix),y 		; y coordinate.
0020D3  3               	sta z80_l
0020D3  3               	ldy #9
0020D3  3               	lda (z80_ix),y		; x coordinate.
0020D3  3               	sta z80_h
0020D3  3               
0020D3  3               	lda #<SHRAPN		; shrapnel table.
0020D3  3               	sta z80_x
0020D3  3               	lda #>SHRAPN
0020D3  3               	sta z80_i
0020D3  3               
0020D3  3               	lda #NUMSHR		; number of pieces in table.
0020D3  3               	sta explcnt
0020D3  3               expld0:
0020D3  3               	ldy #0
0020D3  3               	lda (z80_ix),y		; get type.
0020D3  3               	asl a 			; is this slot in use?
0020D3  3               	bcs expld1		; no, we can use it.
0020D3  3               expld2:
0020D3  3               	clc
0020D3  3               	lda z80_x
0020D3  3               	adc #SHRSIZ
0020D3  3               	sta z80_x
0020D3  3               	bcc :+
0020D3  3               	inc z80_i
0020D3  3               :
0020D3  3               	dec explcnt		; repeat for all shrapnel.
0020D3  3               	bne expld0
0020D3  3               expld3:
0020D3  3               	pla			; restore sprite pointer.
0020D3  3               	sta z80_x
0020D3  3               	pla
0020D3  3               	sta z80_i
0020D3  3               	rts 			; out of slots, can't generate any more.
0020D3  3               
0020D3  3               expld1:
0020D3  3               	lda z80_c		; shrapnel counter.
0020D3  3               	and #15			; 0 to 15.
0020D3  3               	clc			; add to x.
0020D3  3               	adc z80_l
0020D3  3               	ldy #3
0020D3  3               	sta (z80_ix),y		; y coord.
0020D3  3               
0020D3  3               	lda seed3 		; crap random number.
0020D3  3               	and #15			; 0 to 15.
0020D3  3               	clc 			; add to y.
0020D3  3               	adc z80_h
0020D3  3               	ldy #5
0020D3  3               	sta (z80_ix),y		; x coord.
0020D3  3               
0020D3  3               	lda #2
0020D3  3               	ldy #0
0020D3  3               	sta (z80_ix),y		; switch it on.
0020D3  3               
0020D3  3               	jsr chkxy		; plot first position.
0020D3  3               	jsr qrand		; quick random angle.
0020D3  3               	and #60 		; keep within range.
0020D3  3               	ldy #1
0020D3  3               	sta (z80_ix),y		; angle.
0020D3  3               
0020D3  3               	dec z80_c		; one less piece of shrapnel to generate.
0020D3  3               	bne expld2 		; back to main explosion loop.
0020D3  3               	jmp expld3 		; restore sprite pointer and exit.
0020D3  3               
0020D3  3               ;explcnt:	.byte 0
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Quick random
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               qrand:
0020D3  3               	jsr random		; r register.
0020D3  3               	eor seed3		; combine with seed.
0020D3  3               	sta seed3 		; new seed.
0020D3  3               	rts
0020D3  3               
0020D3  3               ;seed3:	.byte 0
0020D3  3               
0020D3  3               ;----------------------------------------------------
0020D3  3               ; Display all shrapnel.
0020D3  3               ;----------------------------------------------------
0020D3  3               
0020D3  3               dshrp:
0020D3  3               	lda #<plotde		; display routine.
0020D3  3               	sta proshx+1
0020D3  3               	lda #>plotde
0020D3  3               	sta proshx+2
0020D3  3               	jsr proshr		; process shrapnel.
0020D3  3               
0020D3  3               	lda #<prosh1		; processing routine.
0020D3  3               	sta proshx+1
0020D3  3               	lda #>prosh1
0020D3  3               	sta proshx+2
0020D3  3               	rts
0020D3  3               
0020D3  3               ;------------------------------------------------------
0020D3  3               ; Particle engine.
0020D3  3               ;
0020D3  3               ; Init particle data for 55 particles in SHRAPN table.
0020D3  3               ; Every particle has 6 bytes.
0020D3  3               ;
0020D3  3               ; global:	-
0020D3  3               ; local:	x,y,hl
0020D3  3               ; calls:	-
0020D3  3               ;------------------------------------------------------
0020D3  3               
0020D3  3               inishr:
0020D3  3               	lda #<SHRAPN 		; table.
0020D3  3               	sta z80_l
0020D3  3               	lda #>SHRAPN
0020D3  3               	sta z80_h
0020D3  3               
0020D3  3               	ldy #0
0020D3  3               	ldx #NUMSHR		; shrapnel pieces to process.
0020D3  3               inish0:
0020D3  3               	lda #255 		; kill the shrapnel.
0020D3  3               	sta (z80_hl),y
0020D3  3               
0020D3  3               	clc 			; point there.
0020D3  3               	lda z80_l
0020D3  3               	adc #SHRSIZ		; distance to next.
0020D3  3               	sta z80_l
0020D3  3               	bcc :+
0020D3  3               	inc z80_h
0020D3  3               :
0020D3  3               	dex
0020D3  3               	bne inish0 		; round again.
0020D3  3               	rts
0020D3  3               
0020D3  3               ;------------------------------------------------------
0020D3  3               ; Check for collision between laser and sprite.
0020D3  3               ;------------------------------------------------------
0020D3  3               
0020D3  3               lcol:
0020D3  3               	lda #<SHRAPN		; shrapnel table.
0020D3  3               	sta z80_l
0020D3  3               	lda #>SHRAPN
0020D3  3               	sta z80_h
0020D3  3               
0020D3  3               	lda #NUMSHR		; number of pieces in table.
0020D3  3               	sta z80_b
0020D3  3               lcol0:
0020D3  3               	ldy #0
0020D3  3               	lda (z80_hl),y 		; get type.
0020D3  3               	beq lcol1		; yes, check collision.
0020D3  3               lcol3:
0020D3  3               	clc			; point to more shrapnel.
0020D3  3               	lda z80_l
0020D3  3               	adc #SHRSIZ
0020D3  3               	sta z80_l
0020D3  3               	bcc :+
0020D3  3               	inc z80_h
0020D3  3               :
0020D3  3               	dec z80_b		; repeat for all shrapnel.
0020D3  3               	bne lcol0
0020D3  3               	rts 			; no collision, carry not set.
0020D3  3               lcol1:
0020D3  3               	ldy #3
0020D3  3               	lda (z80_hl),y		; get y.
0020D3  3               	sec
0020D3  3               	ldy #8
0020D3  3               	sbc (z80_ix),y		; subtract sprite y.
0020D3  3               lcolh:
0020D3  3               	cmp #SPR_HGT 		; within range?
0020D3  3               	bcc :+
0020D3  3               	jmp lcol2		; no, missed.
0020D3  3               :
0020D3  3               	ldy #5
0020D3  3               	lda (z80_hl),y 		; get x.
0020D3  3               	sec
0020D3  3               	ldy #9
0020D3  3               	sbc (z80_ix),y 		; subtract sprite y.
0020D3  3               	cmp #16			; within range?
0020D3  3               	bcs :+
0020D3  3               	jmp lcol4 		; yes, collision occurred.
0020D3  3               :
0020D3  3               lcol2:
0020D3  3               	jmp lcol3
0020D3  3               lcol4:
0020D3  3               	sec
0020D3  3               	rts 			; return with carry set for collision.
0020D3  3               .endif
0020D3  3               
0020D3  3               ;------------------------------------------------------
0020D3  3               ; Main game engine code starts here.
0020D3  3               ; After initialisation, mloop is the main loop
0020D3  3               ;------------------------------------------------------
0020D3  3               
0020D3  3               game:
0020D3  3               
0020D3  3               ; Set up screen address table.
0020D3  3               
0020D3  3               setsat:
0020D3  3  A9 00        	lda #<ScreenAddr		; start of screen.
0020D5  3  85 rr        	sta scraddr
0020D7  3  A9 E4        	lda #>ScreenAddr
0020D9  3  85 rr        	sta scraddr+1
0020DB  3               
0020DB  3  A0 00        	ldy #0			; vertical lines on screen.
0020DD  3               setsa0:
0020DD  3  A5 rr        	lda scraddr
0020DF  3  99 00 E0     	sta SCADTB_lb,y		; write low byte.
0020E2  3  A5 rr        	lda scraddr+1
0020E4  3  C0 C0        	cpy #192		; vertical lines on screen.
0020E6  3  90 02        	bcc :+
0020E8  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
0020EA  3               :
0020EA  3  99 00 E1     	sta SCADTB_hb,y		; write high byte.
0020ED  3  20 DD 2D     	jsr nline		; next line down.
0020F0  3  C8           	iny			; next position in table.
0020F1  3  D0 EA        	bne setsa0
0020F3  3               
0020F3  3               ; Init graphics mode
0020F3  3               
0020F3  3  A9 F0        	lda #ScrMode		; graphics mode
0020F5  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
0020F8  3  20 C6 20     	jsr setpal 		; set up palette.
0020FB  3               
0020FB  3               ; Init AtoMMC joystick
0020FB  3  20 2E 39     	jsr joyinit		; AtoMMC joystick on PORT B
0020FE  3               
0020FE  3               rpblc2:
0020FE  3               .if pflag
0020FE  3               	jsr inishr 		; initialise particle engine.
0020FE  3               .endif
0020FE  3               evintr:
0020FE  3  20 2F 34     	jsr evnt12 		; call intro/menu event.
002101  3               
002101  3  A9 02        	lda #WALL 		; write default property.
002103  3  A2 00        	ldx #0
002105  3               clrmap:
002105  3  9D 00 DD     	sta MAP,x 		; block properties.
002108  3  9D 00 DE     	sta MAP+256,x
00210B  3  9D 00 DF     	sta MAP+512,x
00210E  3  E8           	inx			; next byte.
00210F  3  D0 F4        	bne clrmap
002111  3               .if oflag
002111  3               	jsr iniob 		; initialise objects.
002111  3               .endif
002111  3  A9 00        	lda #0			; put zero in accumulator.
002113  3  85 rr        	sta gamwon		; reset game won flag.
002115  3               
002115  3  20 7E 22     	jsr inisc 		; init the score.
002118  3               mapst:
002118  3  AD 10 34     	lda stmap 		; start position on map.
00211B  3  8D 04 34     	sta roomtb		; set up position in table, if there is one.
00211E  3               
00211E  3               inipbl:
00211E  3               .if aflag
00211E  3               	lda #<eop		; reset blockpointer
00211E  3               	sta pbptr
00211E  3               	lda #>eop
00211E  3               	sta pbptr+1
00211E  3               .endif
00211E  3  20 F0 2E     	jsr initsc 		; set up first screen.
002121  3               
002121  3  A9 F3        	lda #<ssprit 		; default to spare sprite in table.
002123  3  85 68        	sta z80_x
002125  3  A9 33        	lda #>ssprit
002127  3  85 69        	sta z80_i
002129  3               evini:
002129  3  20 30 34     	jsr evnt13 		; initialisation.
00212C  3               
00212C  3               ; Two restarts.
00212C  3               ; First restart - clear all sprites and initialise everything.
00212C  3               
00212C  3               rstrt:
00212C  3  20 1E 22     	jsr rsevt 		; restart events.
00212F  3  20 38 20     	jsr xspr 		; clear sprite table.
002132  3  20 5C 30     	jsr sprlst 		; fetch pointer to screen sprites.
002135  3  20 E5 30     	jsr ispr 		; initialise sprite table.
002138  3               
002138  3  4C 47 21     	jmp rstrt0
00213B  3               
00213B  3               ; Second restart - clear all but player, and don't initialise him.
00213B  3               
00213B  3               rstrtn:
00213B  3  20 1E 22     	jsr rsevt		; restart events.
00213E  3  20 89 30     	jsr nspr 		; clear all non-player sprites.
002141  3  20 5C 30     	jsr sprlst 		; fetch pointer to screen sprites.
002144  3  20 22 31     	jsr kspr 		; initialise sprite table, no more players.
002147  3               
002147  3               ; Set up the player and/or enemy sprites.
002147  3               
002147  3               rstrt0:
002147  3  A9 00        	lda #0 			; zero in accumulator.
002149  3  85 rr        	sta nexlev 		; reset next level flag.
00214B  3  85 rr        	sta restfl 		; reset restart flag.
00214D  3  85 rr        	sta deadf 		; reset dead flag.
00214F  3  20 EC 25     	jsr droom 		; show screen layout.
002152  3               rpblc0:
002152  3               .if pflag
002152  3               	jsr inishr 		; initialise particle engine.
002152  3               .endif
002152  3               .if aflag
002152  3               	jsr rbloc		; draw blocks for this screen
002152  3               .endif
002152  3               .if oflag
002152  3               	jsr shwob		; draw objects.
002152  3               .endif
002152  3               
002152  3  A9 27        	lda #<sprtab 		; address of sprite table, even sprites.
002154  3  85 68        	sta z80_x
002156  3  A9 33        	lda #>sprtab
002158  3  85 69        	sta z80_i
00215A  3  20 CE 2B     	jsr dspr 		; display sprites.
00215D  3               
00215D  3  A9 38        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00215F  3  85 68        	sta z80_x
002161  3  A9 33        	lda #>(sprtab+TABSIZ)
002163  3  85 69        	sta z80_i
002165  3  20 CE 2B     	jsr dspr 		; display sprites.
002168  3               mloop:
002168  3  20 45 20     	jsr vsync 		; synchronise with display.
00216B  3  A9 27        	lda #<sprtab 		; address of sprite table, even sprites.
00216D  3  85 68        	sta z80_x
00216F  3  A9 33        	lda #>sprtab
002171  3  85 69        	sta z80_i
002173  3  20 CE 2B     	jsr dspr 		; display even sprites.
002176  3               
002176  3               ;	jsr plsnd 		; play sounds.
002176  3               
002176  3  20 CF 20     	jsr proshr
002179  3  A9 38        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00217B  3  85 68        	sta z80_x
00217D  3  A9 33        	lda #>(sprtab+TABSIZ)
00217F  3  85 69        	sta z80_i
002181  3  20 CE 2B     	jsr dspr 		; display odd sprites.
002184  3               
002184  3  A9 F3        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
002186  3  85 68        	sta z80_x
002188  3  A9 33        	lda #>(ssprit)
00218A  3  85 69        	sta z80_i
00218C  3               evlp1:
00218C  3  20 1B 34     	jsr evnt10 		; called once per main loop.
00218F  3  20 4C 2B     	jsr pspr 		; process sprites.
002192  3               
002192  3               ; Main loop events.
002192  3               
002192  3  A9 F3        	lda #<ssprit 		; point to spare sprite for spawning purposes.
002194  3  85 68        	sta z80_x
002196  3  A9 33        	lda #>ssprit
002198  3  85 69        	sta z80_i
00219A  3               evlp2:
00219A  3  20 2E 34     	jsr evnt11 		; called once per main loop.
00219D  3               bsortx:
00219D  3  20 C2 2A     	jsr bsort 		; sort sprites.
0021A0  3               
0021A0  3  A5 rr        	lda nexlev		; finished level flag.
0021A2  3  F0 03        	beq :+
0021A4  3  4C CC 21     	jmp newlev		; is set, go to next level.
0021A7  3               :
0021A7  3  A5 rr        	lda gamwon		; finished game flag.
0021A9  3  F0 03        	beq :+
0021AB  3  4C DB 21     	jmp evwon		; is set, finish the game.
0021AE  3               :
0021AE  3  A5 rr        	lda restfl 		; finished level flag.
0021B0  3  C9 01        	cmp #1			; has it been set?
0021B2  3  D0 03        	bne :+
0021B4  3  4C 2C 21     	jmp rstrt		; yes, go to next level.
0021B7  3               :
0021B7  3  C9 02        	cmp #2			; has it been set?
0021B9  3  D0 03        	bne :+
0021BB  3  4C 3B 21     	jmp rstrtn		; yes, go to next level.
0021BE  3               :
0021BE  3  A5 rr        	lda deadf 		; dead flag.
0021C0  3  F0 03        	beq :+
0021C2  3  4C E1 21     	jmp pdead		; yes, player dead.
0021C5  3               :
0021C5  3               ; back to start of main loop.
0021C5  3               
0021C5  3  E6 rr        	inc frmno
0021C7  3  E6 rr        	inc clock
0021C9  3  4C 68 21     	jmp mloop		; switched to a jmp mloop during test mode.
0021CC  3               
0021CC  3               ;----------------------------------------------------------
0021CC  3               ; Read blocks from list and update screen accordingly.
0021CC  3               ;----------------------------------------------------------
0021CC  3               
0021CC  3               .if aflag
0021CC  3               rbloc:
0021CC  3               	lda #<eop		; reset temp blockpointer
0021CC  3               	sta pbbuf
0021CC  3               	lda #>eop
0021CC  3               	sta pbbuf+1
0021CC  3               
0021CC  3               rbloc2:
0021CC  3               	lda pbbuf			; check for last block
0021CC  3               	cmp pbptr
0021CC  3               	bne rbloc1
0021CC  3               	lda pbbuf+1
0021CC  3               	cmp pbptr+1
0021CC  3               	bne rbloc1
0021CC  3               	rts
0021CC  3               rbloc1:
0021CC  3               	ldy #0
0021CC  3               	lda (pbbuf),y		; check if block for this scno
0021CC  3               	cmp scno
0021CC  3               	bne rbloc0		; if not, skip
0021CC  3               	iny
0021CC  3               	lda (pbbuf),y		; get y
0021CC  3               	sta dispy
0021CC  3               	iny
0021CC  3               	lda (pbbuf),y		; get x
0021CC  3               	sta dispx
0021CC  3               	iny
0021CC  3               	lda (pbbuf),y		; get blocknr
0021CC  3               	jsr pattr2		; draw block
0021CC  3               rbloc0:
0021CC  3               	clc			; point to next block
0021CC  3               	lda pbbuf
0021CC  3               	adc #4
0021CC  3               	sta pbbuf
0021CC  3               	bcc rbloc2
0021CC  3               	inc pbbuf+1
0021CC  3               	jmp rbloc2
0021CC  3               .endif
0021CC  3               
0021CC  3               ;----------------------------------------------------------
0021CC  3               ; New level
0021CC  3               ;----------------------------------------------------------
0021CC  3               
0021CC  3               ;.repeat 270
0021CC  3               ;  .byte 0
0021CC  3               ;.endrep
0021CC  3               
0021CC  3               newlev:
0021CC  3  A5 rr        	lda scno 			; current screen.
0021CE  3  18           	clc
0021CF  3  69 01        	adc #1				; next screen.
0021D1  3  CD 3E 35     	cmp numsc			; total number of screens.
0021D4  3  B0 05        	bcs evwon			; yes, game finished.
0021D6  3  85 rr        	sta scno			; set new level number.
0021D8  3  4C 2C 21     	jmp rstrt			; restart, clearing all aliens.
0021DB  3               
0021DB  3               evwon:
0021DB  3  20 48 34     	jsr evnt18		 	; game completed.
0021DE  3  4C F3 21     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0021E1  3               
0021E1  3               ;----------------------------------------------------------
0021E1  3               ; Player dead.
0021E1  3               ;----------------------------------------------------------
0021E1  3               
0021E1  3               ;.repeat 258
0021E1  3               ;  .byte 0
0021E1  3               ;.endrep
0021E1  3               
0021E1  3               pdead:
0021E1  3  A9 00        	lda #0				; zeroise accumulator.
0021E3  3  85 rr        	sta deadf			; reset dead flag.
0021E5  3               evdie:
0021E5  3  20 46 34     	jsr evnt16 			; death subroutine.
0021E8  3  A5 rr        	lda numlif			; number of lives.
0021EA  3  F0 03        	beq :+
0021EC  3  4C 2C 21     	jmp rstrt 			; restart game.
0021EF  3               :
0021EF  3               evfail:
0021EF  3  20 47 34     	jsr evnt17 			; failure event.
0021F2  3  60           	rts			; restart game
0021F3  3               
0021F3  3               ;----------------------------------------------------------
0021F3  3               ; Tidy things up
0021F3  3               ;----------------------------------------------------------
0021F3  3               
0021F3  3               ;.repeat 291
0021F3  3               ;  .byte 0
0021F3  3               ;.endrep
0021F3  3               
0021F3  3               tidyup:
0021F3  3  A0 00        	ldy #0				; digits to check.
0021F5  3               tidyu2:
0021F5  3  B9 67 23     	lda score,y 			; get score digit.
0021F8  3  CD 6D 23     	cmp hiscor 			; are we larger than high score digit?
0021FB  3  90 07        	bcc tidyu0			; high score is bigger.
0021FD  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0021FF  3  C8           	iny				; next digit of high score.
002200  3  C0 06        	cpy #6
002202  3  D0 F1        	bne tidyu2			; repeat for all digits
002204  3               tidyu0:
002204  3  A9 67        	lda #<score			; return pointing to score.
002206  3  85 62        	sta z80_c
002208  3  A9 23        	lda #>score
00220A  3  85 63        	sta z80_b
00220C  3  60           	rts
00220D  3               tidyu1:
00220D  3  A0 05        	ldy #5
00220F  3               tidyu3:
00220F  3  B9 67 23     	lda score,y			; score.
002212  3  99 6D 23     	sta hiscor,y			; high score.
002215  3  88           	dey
002216  3  10 F7        	bpl tidyu3 			; copy score to high score.
002218  3               evnewh:
002218  3  20 49 34     	jsr evnt19			; new high score event.
00221B  3  4C 04 22     	jmp tidyu0			; tidy up.
00221E  3               
00221E  3               ;--------------------------------------------------
00221E  3               ; Restart event.
00221E  3               ;--------------------------------------------------
00221E  3               
00221E  3               rsevt:
00221E  3  A9 F3        	lda #<ssprit 			; default to spare element in table.
002220  3  85 68        	sta z80_x
002222  3  A9 33        	lda #>ssprit
002224  3  85 69        	sta z80_i
002226  3               evrs:
002226  3  4C 31 34     	jmp evnt14	 		; call restart event.
002229  3               
002229  3               ;------------------------------------------------------------------
002229  3               ; Copy number passed in a to string position bc, right-justified.
002229  3               ;
002229  3               ; Input:
002229  3               ;  A  = number
002229  3               ;  BC = string address
002229  3               ;
002229  3               ; Output:
002229  3               ;  BC = string with number
002229  3               ;-----------------------------------------------------------------
002229  3               
002229  3               num2ch:
002229  3  85 65        	sta z80_d		; Save number
00222B  3               
00222B  3  A9 00        	lda #0
00222D  3  85 rr        	sta flag
00222F  3               numdg3:
00222F  3  A2 64        	ldx #100		; hundreds column.
002231  3  86 64        	stx z80_e
002233  3  20 43 22     	jsr numdg		; show digit.
002236  3               numdg2:
002236  3  A2 0A        	ldx #10			; tens column.
002238  3  86 64        	stx z80_e
00223A  3  20 43 22     	jsr numdg		; show digit.
00223D  3               
00223D  3  E6 rr        	inc flag
00223F  3  A2 01        	ldx #1			; units column.
002241  3  86 64        	stx z80_e
002243  3               numdg:
002243  3  A9 30        	lda #48			; clear digit.
002245  3  85 61        	sta z80_a
002247  3               numdg1:
002247  3  A5 65        	lda z80_d
002249  3  C5 64        	cmp z80_e
00224B  3  90 0E        	bcc numdg0		; nothing to show.
00224D  3  38           	sec
00224E  3  A5 65        	lda z80_d
002250  3  E5 64        	sbc z80_e		; subtract from column.
002252  3  85 65        	sta z80_d
002254  3  E6 61        	inc z80_a		; increment digit.
002256  3  E6 rr        	inc flag
002258  3  4C 47 22     	jmp numdg1		; repeat until column is zero.
00225B  3               numdg0:
00225B  3  A0 00        	ldy #0
00225D  3  A5 61        	lda z80_a
00225F  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002261  3  A5 rr        	lda flag
002263  3  F0 06        	beq :+
002265  3  E6 62        	inc z80_c		; next buffer position.
002267  3  D0 02        	bne :+
002269  3  E6 63        	inc z80_b
00226B  3               :
00226B  3  60           	rts
00226C  3               num2dd:
00226C  3  85 65        	sta z80_d		; Save number
00226E  3               
00226E  3  A9 01        	lda #1
002270  3  85 rr        	sta flag
002272  3               
002272  3  4C 36 22     	jmp numdg2
002275  3               num2td:
002275  3  85 65        	sta z80_d		; Save number
002277  3               
002277  3  A9 01        	lda #1
002279  3  85 rr        	sta flag
00227B  3  4C 2F 22     	jmp numdg3
00227E  3               
00227E  3               ;flag:	.byte 0
00227E  3               
00227E  3               ;---------------------------------------------------------
00227E  3               ; Reset score to "000000"
00227E  3               ;---------------------------------------------------------
00227E  3               
00227E  3               inisc:
00227E  3  A9 30        	lda #'0'
002280  3  A2 05        	ldx #5			; digits to initialise.
002282  3               inisc0:
002282  3  9D 67 23     	sta score,x 		; write zero digit.
002285  3  CA           	dex			; next column.
002286  3  10 FA        	bpl inisc0		; repeat for all digits.
002288  3               
002288  3  60           	rts
002289  3               
002289  3               ;-----------------------------------------------------
002289  3               ; Multiply h by d and return in hl.
002289  3               ;
002289  3               ; Input:
002289  3               ;  H = first number
002289  3               ;  D = second number
002289  3               ;
002289  3               ; Output:
002289  3               ;  HL = result H x D
002289  3               ;-----------------------------------------------------
002289  3               
002289  3               imul:
002289  3  A5 65        	lda z80_d		; HL = H * D
00228B  3  85 64        	sta z80_e
00228D  3  A5 67        	lda z80_h
00228F  3  85 62        	sta z80_c		; make c first multiplier.
002291  3               imul0:
002291  3  A9 00        	lda #0			; zeroise total.
002293  3  85 66        	sta z80_l
002295  3  85 67        	sta z80_h
002297  3               
002297  3  A5 67        	lda z80_h
002299  3  85 65        	sta z80_d		; zeroise high byte.
00229B  3               
00229B  3  A9 08        	lda #8			; repeat 8 times.
00229D  3  85 63        	sta z80_b
00229F  3               imul1:
00229F  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
0022A1  3  90 0E        	bcc imul2		; wasn't set.
0022A3  3  18           	clc			; bit was set, so add de.
0022A4  3  A5 66        	lda z80_l
0022A6  3  65 64        	adc z80_e
0022A8  3  85 66        	sta z80_l
0022AA  3  A5 67        	lda z80_h
0022AC  3  65 65        	adc z80_d
0022AE  3  85 67        	sta z80_h
0022B0  3  18           	clc 			; reset carry.
0022B1  3               imul2:
0022B1  3  06 64        	asl z80_e 		; shift de 1 bit left.
0022B3  3  26 65        	rol z80_d
0022B5  3  C6 63        	dec z80_b
0022B7  3  D0 E6        	bne imul1		; repeat 8 times.
0022B9  3               
0022B9  3  60           	rts
0022BA  3               
0022BA  3               ;-----------------------------------------------
0022BA  3               ; Divide d by e and return in d, remainder in a.
0022BA  3               ;
0022BA  3               ; Input:
0022BA  3               ;  D = first number
0022BA  3               ;  E = second number
0022BA  3               ;
0022BA  3               ; Output:
0022BA  3               ;  D = result D/E
0022BA  3               ;  A = remainder
0022BA  3               ;-----------------------------------------------
0022BA  3               
0022BA  3               idiv:
0022BA  3  A9 00        	lda #0
0022BC  3  A0 08        	ldy #8		 	; bits to shift.
0022BE  3  06 65        	asl z80_d
0022C0  3               idiv0:
0022C0  3  2A           	rol a 			; multiply d by 2.
0022C1  3  C5 64        	cmp z80_e 		; test if e is smaller.
0022C3  3  90 02        	bcc idiv1		; e is greater, no division this time.
0022C5  3  E5 64        	sbc z80_e		; subtract it.
0022C7  3               idiv1:
0022C7  3  26 65        	rol z80_d		; rotate into d.
0022C9  3  88           	dey
0022CA  3  D0 F4        	bne idiv0		; repeat
0022CC  3  60           	rts
0022CD  3               
0022CD  3               ;---------------------------------------------------
0022CD  3               ; Play AY sound effect
0022CD  3               ;---------------------------------------------------
0022CD  3               
0022CD  3               plsnd:
0022CD  3  60           	rts
0022CE  3               
0022CE  3               ;---------------------------------------------------
0022CE  3               ; Objects handling.
0022CE  3               ; 32 bytes for image
0022CE  3               ; 3 for room, y and x
0022CE  3               ; 3 for starting room, y and x.
0022CE  3               ; 254 = disabled.
0022CE  3               ; 255 = object in player"s pockets.
0022CE  3               ;---------------------------------------------------
0022CE  3               
0022CE  3               ;---------------------------------------------------
0022CE  3               ; Show items present.
0022CE  3               ;---------------------------------------------------
0022CE  3               
0022CE  3               .if oflag
0022CE  3               shwob:
0022CE  3               	lda #<objdta 			; objects table.
0022CE  3               	sta z80_l
0022CE  3               	lda #>objdta
0022CE  3               	sta z80_h
0022CE  3               
0022CE  3               	lda numob 			; number of objects in the game.
0022CE  3               	sta sprcnt
0022CE  3               shwob0:
0022CE  3               	ldy #32 			; distance to room number.
0022CE  3               	lda (z80_hl),y 			; same as an item?
0022CE  3               	cmp scno 			; current location.
0022CE  3               	bne :+
0022CE  3               	jsr dobj 			; yes, display object.
0022CE  3               :
0022CE  3               	clc
0022CE  3               	lda z80_l
0022CE  3               	adc #38 			; distance to next item.
0022CE  3               	sta z80_l
0022CE  3               	lda z80_h
0022CE  3               	adc #0
0022CE  3               	sta z80_h	 		; point to it.
0022CE  3               	dec sprcnt
0022CE  3               	bne shwob0 			; repeat for others.
0022CE  3               	rts
0022CE  3               
0022CE  3               ;---------------------------------------------------
0022CE  3               ; Display object.
0022CE  3               ; hl must point to object's start address.
0022CE  3               ;
0022CE  3               ; Input:
0022CE  3               ;  HL = object address
0022CE  3               ;---------------------------------------------------
0022CE  3               
0022CE  3               dobj:
0022CE  3               	ldy #33
0022CE  3               	lda (z80_hl),y 			; point to y.
0022CE  3               	sta dispy
0022CE  3               	iny
0022CE  3               	lda (z80_hl),y 			; point to x.
0022CE  3               	sta dispx
0022CE  3               dobj1:
0022CE  3               	jmp sprite 			; draw this sprite.
0022CE  3               
0022CE  3               ;--------------------------------------
0022CE  3               ; Remove an object.
0022CE  3               ;
0022CE  3               ; Input:
0022CE  3               ;  A = object number
0022CE  3               ;--------------------------------------
0022CE  3               
0022CE  3               remob:
0022CE  3               	cmp numob			; number of objects in game.
0022CE  3               	bcc :+				; are we checking past the end?
0022CE  3               	rts				; yes, can't get non-existent item.
0022CE  3               :
0022CE  3               	pha				; remember object.
0022CE  3               	jsr getob			; pick it up if we haven't already got it.
0022CE  3               	pla				; retrieve object number.
0022CE  3               	jsr gotob			; get its address.
0022CE  3               	lda #254
0022CE  3               	ldy #32
0022CE  3               	sta (z80_hl),y			; remove it.
0022CE  3               	rts
0022CE  3               
0022CE  3               ;---------------------------------------------------
0022CE  3               ; Pick up object number held in the accumulator.
0022CE  3               ;
0022CE  3               ; Input:
0022CE  3               ;  A = object number
0022CE  3               ;---------------------------------------------------
0022CE  3               
0022CE  3               getob:
0022CE  3               	cmp numob 		; number of objects in game.
0022CE  3               	bcc :+			; are we checking past the end?
0022CE  3               	rts			; yes, can't get non-existent item.
0022CE  3               :
0022CE  3               	jsr gotob 		; check if we already have it.
0022CE  3               	cmp #255
0022CE  3               	bne :+
0022CE  3               	rts			; we already do.
0022CE  3               :
0022CE  3               	ldy #32
0022CE  3               	lda (z80_hl),y		; is it on this screen?
0022CE  3               	cmp scno 		; current screen.
0022CE  3               	bne getob0		; not on screen, so nothing to delete.
0022CE  3               
0022CE  3               	lda #255
0022CE  3               	sta (z80_hl),y		; pick it up.
0022CE  3               	iny 			; point to y coord.
0022CE  3               getob1:
0022CE  3               	ldy #33
0022CE  3               	lda (z80_hl),y		; y coord.
0022CE  3               	sta dispy
0022CE  3               	ldy #34
0022CE  3               	lda (z80_hl),y 		; x coord.
0022CE  3               	sta dispx
0022CE  3               	jmp dobj1 		; delete object sprite.
0022CE  3               getob0:
0022CE  3               	lda #255
0022CE  3               	sta (z80_hl),y 		; pick it up.
0022CE  3               	rts
0022CE  3               .endif
0022CE  3               
0022CE  3               ;-----------------------------------------------------------------
0022CE  3               ; Got object check.
0022CE  3               ; Call with object in accumulator, returns zero set if in pockets.
0022CE  3               ;
0022CE  3               ; Input:
0022CE  3               ;  A = object number
0022CE  3               ;-----------------------------------------------------------------
0022CE  3               .if oflag .or mflag
0022CE  3               gotob:
0022CE  3               	cmp numob 		; number of objects in game.
0022CE  3               	bcc :+ 			; are we checking past the end?
0022CE  3               	jmp gotob0 		; yes, we can't have a non-existent object.
0022CE  3               :
0022CE  3               	jsr findob		; find the object.
0022CE  3               gotob1:
0022CE  3               	rts
0022CE  3               
0022CE  3               gotob0:
0022CE  3               	lda #254 		; missing.
0022CE  3               	jmp gotob1
0022CE  3               
0022CE  3               findob:
0022CE  3               	pha			; save object number
0022CE  3               	lda #<objdta 		; objects.
0022CE  3               	sta z80_l
0022CE  3               	lda #>objdta
0022CE  3               	sta z80_h
0022CE  3               	pla			; retreive object number
0022CE  3               	beq fndob1 		; is it zero? yes, skip loop.
0022CE  3               	tax 			; loop counter
0022CE  3               fndob2:
0022CE  3               	clc
0022CE  3               	lda z80_l
0022CE  3               	adc #38 		; size of each object.
0022CE  3               	sta z80_l
0022CE  3               	bcc :+
0022CE  3               	inc z80_h
0022CE  3               :
0022CE  3               	dex 			; repeat until we find address.
0022CE  3               	bne fndob2
0022CE  3               fndob1:
0022CE  3               	ldy #32			; distance to room it's in.
0022CE  3               	lda (z80_hl),y		; fetch status.
0022CE  3               	rts
0022CE  3               .endif
0022CE  3               
0022CE  3               ;---------------------------------------------
0022CE  3               ; Drop object number at (dispx, dispy).
0022CE  3               ;
0022CE  3               ; Input:
0022CE  3               ;  A = object number
0022CE  3               ;---------------------------------------------
0022CE  3               
0022CE  3               .if oflag
0022CE  3               drpob:
0022CE  3               	cmp numob 		; are we checking past the end?
0022CE  3               	bcc :+
0022CE  3               	rts			; yes, can't drop non-existent item.
0022CE  3               :
0022CE  3               	jsr gotob		; make sure object is in inventory.
0022CE  3               	cmp scno		; already on this screen?
0022CE  3               	bne :+
0022CE  3               	rts			; yes, nothing to do.
0022CE  3               :
0022CE  3               	ldy #32
0022CE  3               	lda scno
0022CE  3               	sta (z80_hl),y		; bring onto screen.
0022CE  3               	lda dispy		; sprite y coordinate.
0022CE  3               	iny
0022CE  3               	sta (z80_hl),y		; point to object y.
0022CE  3               	lda dispx 		; sprite x coordinate.
0022CE  3               	iny
0022CE  3               	sta (z80_hl),y 		; point to object x
0022CE  3               	jmp dobj		; draw the object sprite.
0022CE  3               
0022CE  3               ;-----------------------------------------------
0022CE  3               ; Seek objects at sprite position.
0022CE  3               ;
0022CE  3               ; Output:
0022CE  3               ;  A = object number, if not found A=255
0022CE  3               ;-----------------------------------------------
0022CE  3               
0022CE  3               skobj:
0022CE  3               	lda #<objdta 		; pointer to objects.
0022CE  3               	sta z80_l
0022CE  3               	lda #>objdta
0022CE  3               	sta z80_h
0022CE  3               
0022CE  3               	lda numob 		; number of objects in game.
0022CE  3               	sta z80_b 		; set up the loop counter.
0022CE  3               skobj0:
0022CE  3               	lda scno		; current room number.
0022CE  3               	ldy #32
0022CE  3               	cmp (z80_hl),y		; is object in here?
0022CE  3               	bne :+
0022CE  3               	jsr skobj1		; yes, check coordinates.
0022CE  3               :
0022CE  3               	clc			; point to next object in table.
0022CE  3               	lda z80_l
0022CE  3               	adc #38			; size of each object.
0022CE  3               	sta z80_l
0022CE  3               	bcc :+
0022CE  3               	inc z80_h
0022CE  3               :
0022CE  3               	dec z80_b
0022CE  3               	bne skobj0		; repeat for all objects.
0022CE  3               
0022CE  3               	lda #255		; end of list and nothing found, return 255.
0022CE  3               	rts
0022CE  3               
0022CE  3               skobj1:
0022CE  3               	ldy #33			; point to y coordinate.
0022CE  3               	lda (z80_hl),y		; point to y coordinate.
0022CE  3               	sec
0022CE  3               	ldy #8
0022CE  3               	sbc (z80_ix),y 		; subtract sprite y.
0022CE  3               	clc
0022CE  3               	adc #15			; add sprite height minus one.
0022CE  3               	cmp #31			; within range?
0022CE  3               	bcs skobj2		; no, ignore object.
0022CE  3               
0022CE  3               	ldy #34			; point to x coordinate now.
0022CE  3               	lda (z80_hl),y 		; get coordinate.
0022CE  3               	sec
0022CE  3               	ldy #9
0022CE  3               	sbc (z80_ix),y 		; subtract the sprite x.
0022CE  3               	clc			; add sprite width minus one.
0022CE  3               	adc #15
0022CE  3               	cmp #31			; within range?
0022CE  3               	bcs skobj2		; no, ignore object.
0022CE  3               
0022CE  3               	pla			; remove return address from stack.
0022CE  3               	pla
0022CE  3               
0022CE  3               	lda numob 		; objects in game.
0022CE  3               	sec
0022CE  3               	sbc z80_b		; subtract loop counter.
0022CE  3               skobj2:
0022CE  3               	rts			; accumulator now points to object.
0022CE  3               .endif
0022CE  3               
0022CE  3               ;---------------------------------------------------------------------
0022CE  3               ; Spawn a new sprite.
0022CE  3               ;---------------------------------------------------------------------
0022CE  3               
0022CE  3                 offset = 20
0022CE  3               
0022CE  3               ;.repeat 343
0022CE  3               ;  .byte 0
0022CE  3               ;.endrep
0022CE  3               
0022CE  3               spawn:
0022CE  3  A9 27        	lda #<sprtab		; sprite table.
0022D0  3  85 66        	sta z80_l
0022D2  3  A9 33        	lda #>sprtab
0022D4  3  85 67        	sta z80_h
0022D6  3               numsp1:
0022D6  3  A9 0C        	lda #NUMSPR		; number of sprites.
0022D8  3  85 rr        	sta spcnt
0022DA  3               spaw0:
0022DA  3  A0 00        	ldy #0
0022DC  3  B1 66        	lda (z80_hl),y		; get sprite type.
0022DE  3  C9 FF        	cmp #255		; is it an unused slot?
0022E0  3  F0 0F        	beq spaw1 		; yes, we can use this one.
0022E2  3               
0022E2  3  18           	clc 			; point to next sprite in table.
0022E3  3  A5 66        	lda z80_l
0022E5  3  69 11        	adc #TABSIZ		; size of each entry.
0022E7  3  85 66        	sta z80_l
0022E9  3  90 02        	bcc :+
0022EB  3  E6 67        	inc z80_h
0022ED  3               :
0022ED  3  C6 rr        	dec spcnt		; one less iteration.
0022EF  3  D0 E9        	bne spaw0		; keep going until we find a slot.
0022F1  3               
0022F1  3               ; Didn't find one but drop through and set up a dummy sprite instead.
0022F1  3               
0022F1  3               spaw1:
0022F1  3  A5 69        	lda z80_i		; address of original sprite.
0022F3  3  48           	pha
0022F4  3  A5 68        	lda z80_x
0022F6  3  48           	pha
0022F7  3               
0022F7  3  A5 66        	lda z80_l		; store spawned sprite address.
0022F9  3  85 rr        	sta spptr
0022FB  3  A5 67        	lda z80_h
0022FD  3  85 rr        	sta spptr+1
0022FF  3               
0022FF  3  A5 62        	lda z80_c
002301  3  A0 00        	ldy #0
002303  3  91 66        	sta (z80_hl),y 		; set the type.
002305  3  A0 05        	ldy #5
002307  3  91 66        	sta (z80_hl),y		; copy
002309  3               
002309  3  A5 63        	lda z80_b
00230B  3  A0 01        	ldy #1
00230D  3  91 66        	sta (z80_hl),y		; set the image.
00230F  3  A0 06        	ldy #6
002311  3  91 66        	sta (z80_hl),y		; copy
002313  3               
002313  3  A9 00        	lda #0 			; frame zero.
002315  3  A0 02        	ldy #2
002317  3  91 66        	sta (z80_hl),y		; set frame.
002319  3  A0 07        	ldy #7
00231B  3  91 66        	sta (z80_hl),y		; copy
00231D  3               
00231D  3  A0 08        	ldy #8
00231F  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002321  3  A0 03        	ldy #3
002323  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002325  3  A0 08        	ldy #8
002327  3  91 66        	sta (z80_hl),y		; copy
002329  3               
002329  3  A0 09        	ldy #9
00232B  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00232D  3  A0 04        	ldy #4
00232F  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002331  3  A0 09        	ldy #9
002333  3  91 66        	sta (z80_hl),y		; copy
002335  3               
002335  3  A0 0A        	ldy #10			; direction of original.
002337  3  B1 68        	lda (z80_ix),y
002339  3  91 66        	sta (z80_hl),y		; direction
00233B  3               
00233B  3  A9 00        	lda #0
00233D  3  A0 0B        	ldy #11
00233F  3  91 66        	sta (z80_hl),y		; reset parameter.
002341  3  C8           	iny
002342  3  91 66        	sta (z80_hl),y		; reset parameter.
002344  3  C8           	iny
002345  3  91 66        	sta (z80_hl),y		; reset parameter.
002347  3  C8           	iny
002348  3  91 66        	sta (z80_hl),y		; reset parameter.
00234A  3               rtssp:
00234A  3  A5 rr        	lda spptr		; address of new sprite.
00234C  3  85 68        	sta z80_x
00234E  3  A5 rr        	lda spptr+1
002350  3  85 69        	sta z80_i
002352  3               evis1:
002352  3  20 1A 34     	jsr evnt09 		; call sprite initialisation event.
002355  3               
002355  3  A5 rr        	lda spptr 		; address of new sprite.
002357  3  85 68        	sta z80_x
002359  3  A5 rr        	lda spptr+1
00235B  3  85 69        	sta z80_i
00235D  3  20 F4 2C     	jsr sspria 		; display the new sprite.
002360  3               
002360  3  68           	pla			; address of original sprite.
002361  3  85 68        	sta z80_x
002363  3  68           	pla
002364  3  85 69        	sta z80_i
002366  3               
002366  3  60           	rts
002367  3               
002367  3               ;spcnt:	.byte 0
002367  3               ;spptr:	.word 0			; spawned sprite pointer.
002367  3               ;seed:	.byte 0			; seed for random numbers.
002367  3  30 30 30 30  score:	.byte "000000"		; player"s score.
00236B  3  30 30        
00236D  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002371  3  30 30        
002373  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002377  3  30 30        
002379  3  00 E4        grbase:	.word ScreenAddr	; graphics base address.
00237B  3               
00237B  3               ;----------------------------------------------------
00237B  3               ; Check y-pos
00237B  3               ;----------------------------------------------------
00237B  3               
00237B  3               checkx:
00237B  3  A5 rr        	lda dispy		; y position.
00237D  3  C9 18        	cmp #24			; off screen?
00237F  3  B0 01        	bcs :+
002381  3  60           	rts			; no, it's okay.
002382  3               :
002382  3  68           	pla			; remove return address from stack.
002383  3  85 66        	sta z80_l
002385  3  68           	pla
002386  3  85 67        	sta z80_h
002388  3  60           	rts
002389  3               
002389  3               ;-----------------------------------------------
002389  3               ; Displays the current high score.
002389  3               ;-----------------------------------------------
002389  3               
002389  3               dhisc:
002389  3  A9 6D        	lda #<hiscor 		; high score text.
00238B  3  8D C0 23     	sta dscor3+1
00238E  3  8D DB 23     	sta bscor3+1
002391  3  A9 23        	lda #>hiscor
002393  3  8D C1 23     	sta dscor3+2
002396  3  8D DC 23     	sta bscor3+2
002399  3  4C AC 23     	jmp dscor1		; check in printable range then show 6 digits.
00239C  3               
00239C  3               ;------------------------------------------------------
00239C  3               ; Displays the current score.
00239C  3               ;------------------------------------------------------
00239C  3               
00239C  3               ;.repeat 322
00239C  3               ;  .byte 0
00239C  3               ;.endrep
00239C  3               
00239C  3               dscor:
00239C  3  A9 67        	lda #<score		; score text.
00239E  3  8D C0 23     	sta dscor3+1
0023A1  3  8D DB 23     	sta bscor3+1
0023A4  3  A9 23        	lda #>score
0023A6  3  8D C1 23     	sta dscor3+2
0023A9  3  8D DC 23     	sta bscor3+2
0023AC  3               dscor1:
0023AC  3  8C D7 23     	sty tmpscr
0023AF  3  20 96 2A     	jsr preprt		; set up font and print position.
0023B2  3  20 7B 23     	jsr checkx		; make sure we're in a printable range.
0023B5  3               
0023B5  3               ;	lda #6			; digits to display.
0023B5  3               ;	sta z80_b
0023B5  3  A5 rr        	lda prtmod		; get print mode.
0023B7  3  F0 03        	beq :+			; standard size text?
0023B9  3  4C D8 23     	jmp bscor0		; no, show double-height.
0023BC  3               :
0023BC  3               dscor0:
0023BC  3               ;	ldy #0
0023BC  3               ;	lda (z80_hl),y 		; fetch character.
0023BC  3  AC D7 23     	ldy tmpscr
0023BF  3               dscor3:
0023BF  3  B9 67 23     	lda score,y
0023C2  3  20 0F 25     	jsr pchar 		; display character.
0023C5  3  E6 rr        	inc dispx		; move along x coordinate
0023C7  3               
0023C7  3               ;	inc z80_l		; next score column.
0023C7  3               ;	bne :+
0023C7  3               ;	inc z80_h
0023C7  3               ;:
0023C7  3  EE D7 23     	inc tmpscr
0023CA  3  C6 63        	dec z80_b
0023CC  3  D0 EE        	bne dscor0 		; repeat for all digits.
0023CE  3               dscor2:
0023CE  3  A5 rr        	lda dispx 		; set up display coordinates.
0023D0  3  85 rr        	sta charx
0023D2  3  A5 rr        	lda dispy
0023D4  3  85 rr        	sta chary
0023D6  3  60           	rts
0023D7  3               
0023D7  3  00           tmpscr:	.byte 0
0023D8  3               ;------------------------------------------------------
0023D8  3               ; Displays the current score in double-height characters.
0023D8  3               ;
0023D8  3               ; Input:
0023D8  3               ;  B  = digit number
0023D8  3               ;  HL = score string
0023D8  3               ;------------------------------------------------------
0023D8  3               
0023D8  3               bscor0:
0023D8  3               ;	ldy #0
0023D8  3               
0023D8  3               ;	lda (z80_hl),y 		; fetch character.
0023D8  3  A4 rr        	ldy tmp
0023DA  3               bscor3:
0023DA  3  B9 67 23     	lda score,y
0023DD  3  20 1D 2A     	jsr bchar 		; display big char.
0023E0  3               
0023E0  3               ;	inc z80_l 		; next score column.
0023E0  3               ;	bne :+
0023E0  3               ;	inc z80_h
0023E0  3               ;:
0023E0  3  E6 rr        	inc tmp
0023E2  3  C6 63        	dec z80_b
0023E4  3  F0 03        	beq :+
0023E6  3  4C D8 23     	jmp bscor0 		; repeat for all digits.
0023E9  3               :
0023E9  3  4C CE 23     	jmp dscor2 		; tidy up line and column variables.
0023EC  3               
0023EC  3               ;-----------------------------------------------------
0023EC  3               ; Adds number in the hl pair to the score.
0023EC  3               ;-----------------------------------------------------
0023EC  3               
0023EC  3               addsc:
0023EC  3  A9 68        	lda #<(score+1) 	; ten thousands column.
0023EE  3  85 64        	sta z80_e
0023F0  3  A9 23        	lda #>(score+1)
0023F2  3  85 65        	sta z80_d
0023F4  3  A9 10        	lda #<10000		; amount to add each time.
0023F6  3  85 62        	sta z80_c
0023F8  3  A9 27        	lda #>10000
0023FA  3  85 63        	sta z80_b
0023FC  3  20 40 24     	jsr incsc		; add to score.
0023FF  3               
0023FF  3  E6 64        	inc z80_e		; thousands column.
002401  3  D0 02        	bne :+
002403  3  E6 65        	inc z80_d
002405  3               :
002405  3  A9 E8        	lda #<1000		; amount to add each time.
002407  3  85 62        	sta z80_c
002409  3  A9 03        	lda #>1000
00240B  3  85 63        	sta z80_b
00240D  3  20 40 24     	jsr incsc 		; add to score.
002410  3               
002410  3  E6 64        	inc z80_e		; hundreds column.
002412  3  D0 02        	bne :+
002414  3  E6 65        	inc z80_d
002416  3               :
002416  3  A9 64        	lda #<100		; amount to add each time.
002418  3  85 62        	sta z80_c
00241A  3  A9 00        	lda #>100
00241C  3  85 63        	sta z80_b
00241E  3  20 40 24     	jsr incsc		; add to score.
002421  3               
002421  3  E6 64        	inc z80_e 		; tens column.
002423  3  D0 02        	bne :+
002425  3  E6 65        	inc z80_d
002427  3               :
002427  3  A9 0A        	lda #<10		; amount to add each time.
002429  3  85 62        	sta z80_c
00242B  3  A9 00        	lda #>10
00242D  3  85 63        	sta z80_b
00242F  3  20 40 24     	jsr incsc 		; add to score.
002432  3               
002432  3  E6 64        	inc z80_e		; units column.
002434  3  D0 02        	bne :+
002436  3  E6 65        	inc z80_d
002438  3               :
002438  3  A9 01        	lda #<1			; units.
00243A  3  85 62        	sta z80_c
00243C  3  A9 00        	lda #>1
00243E  3  85 63        	sta z80_b
002440  3               incsc:
002440  3  A5 67        	lda z80_h		; store amount to add.
002442  3  48           	pha
002443  3  A5 66        	lda z80_l
002445  3  48           	pha
002446  3               
002446  3  38           	sec			; subtract from amount to add.
002447  3  A5 66        	lda z80_l
002449  3  E5 62        	sbc z80_c
00244B  3  85 66        	sta z80_l
00244D  3  A5 67        	lda z80_h
00244F  3  E5 63        	sbc z80_b
002451  3  85 67        	sta z80_h
002453  3  90 14        	bcc incsc0		; too much, restore value.
002455  3               
002455  3  68           	pla			; delete the previous amount from the stack.
002456  3  68           	pla
002457  3               
002457  3  A5 65        	lda z80_d 		; store column position.
002459  3  48           	pha
00245A  3  A5 64        	lda z80_e
00245C  3  48           	pha
00245D  3  20 70 24     	jsr incsc2		; do the increment.
002460  3               
002460  3  68           	pla			; restore column.
002461  3  85 64        	sta z80_e
002463  3  68           	pla
002464  3  85 65        	sta z80_d
002466  3  4C 40 24     	jmp incsc		; repeat until all added.
002469  3               
002469  3               incsc0:
002469  3  68           	pla			; restore previous value.
00246A  3  85 66        	sta z80_l
00246C  3  68           	pla
00246D  3  85 67        	sta z80_h
00246F  3  60           	rts
002470  3               incsc2:
002470  3  A0 00        	ldy #0
002472  3  B1 64        	lda (z80_de),y 		; get amount.
002474  3  18           	clc
002475  3  69 01        	adc #1			; add one to column.
002477  3  91 64        	sta (z80_de),y		; write new column total.
002479  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
00247B  3  B0 01        	bcs :+
00247D  3  60           	rts			; no, carry on.
00247E  3               :
00247E  3  A9 30        	lda #'0'		; make it zero.
002480  3  91 64        	sta (z80_de),y		; write new column total.
002482  3  C6 64        	dec z80_e		; back one column.
002484  3  D0 02        	bne :+
002486  3  C6 65        	dec z80_d
002488  3               :
002488  3  4C 70 24     	jmp incsc2
00248B  3               
00248B  3               ;------------------------------------
00248B  3               ; Add bonus to score and reset bonus
00248B  3               ;------------------------------------
00248B  3               
00248B  3               addbo:
00248B  3  A2 05        	ldx #5			; last digit.
00248D  3  18           	clc
00248E  3               addbo0:
00248E  3  BD 67 23     	lda score,x		; get score.
002491  3  7D 73 23     	adc bonus,x		; add bonus.
002494  3  38           	sec			; 0 to 18.
002495  3  E9 30        	sbc #48
002497  3  48           	pha
002498  3  A9 30        	lda #'0'
00249A  3  9D 73 23     	sta bonus,x
00249D  3  68           	pla
00249E  3  C9 3A        	cmp #58
0024A0  3  90 03        	bcc addbo1
0024A2  3  38           	sec
0024A3  3  E9 0A        	sbc #10
0024A5  3               addbo1:
0024A5  3  9D 67 23     	sta score,x		; zeroise bonus.
0024A8  3  CA           	dex			; next digit.
0024A9  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0024AB  3  60           	rts
0024AC  3               
0024AC  3               ;------------------------------------
0024AC  3               ; Swap score and bonus.
0024AC  3               ;------------------------------------
0024AC  3               
0024AC  3               swpsb:
0024AC  3  A2 05        	ldx #5			; digits to add.
0024AE  3               swpsb0:
0024AE  3  BD 67 23     	lda score,x 		; get score digits.
0024B1  3  48           	pha			; save digit
0024B2  3  BD 73 23     	lda bonus,x 		; get bonus digits.
0024B5  3  9D 67 23     	sta score,x		; switch score-bonus
0024B8  3  68           	pla
0024B9  3  9D 73 23     	sta bonus,x
0024BC  3  CA           	dex 			; repeat for all 6 digits.
0024BD  3  10 EF        	bpl swpsb0
0024BF  3  60           	rts
0024C0  3               
0024C0  3               ;----------------------------------------------------
0024C0  3               ; Get print address.
0024C0  3               ;----------------------------------------------------
0024C0  3               
0024C0  3               gprad:
0024C0  3  A5 rr        	lda dispx		; get x
0024C2  3  85 rr        	sta scraddr		; store lb address
0024C4  3               
0024C4  3  2A           	rol a
0024C5  3  26 rr        	rol tmp
0024C7  3  2A           	rol a
0024C8  3  26 rr        	rol tmp
0024CA  3  2A           	rol a
0024CB  3  26 rr        	rol tmp
0024CD  3  A5 rr        	lda tmp
0024CF  3  29 07        	and #7
0024D1  3  85 rr        	sta tmp
0024D3  3  A5 rr        	lda prtmod
0024D5  3  F0 02        	beq :+
0024D7  3  06 rr        	asl tmp
0024D9  3               :
0024D9  3  A5 rr        	lda tmp
0024DB  3  18           	clc
0024DC  3  65 rr        	adc dispy		; get y
0024DE  3  69 E4        	adc #>ScreenAddr		; add $80
0024E0  3  85 rr        	sta scraddr+1		; store hb address
0024E2  3  60           	rts
0024E3  3               
0024E3  3               ;--------------------------------------------------------------
0024E3  3               ; Get property buffer address of char at (dispx, dispy) in hl.
0024E3  3               ;
0024E3  3               ; Output:
0024E3  3               ;  bufaddr = MAP + dispy*32 + dispx
0024E3  3               ;--------------------------------------------------------------
0024E3  3               
0024E3  3               pradd:
0024E3  3  A5 rr        	lda dispy 		; y coordinate.
0024E5  3  85 rr        	sta bufaddr
0024E7  3  A9 00        	lda #0
0024E9  3  85 rr        	sta bufaddr+1
0024EB  3  06 rr        	asl bufaddr  		; multiply char by 32
0024ED  3  26 rr        	rol bufaddr+1
0024EF  3  06 rr        	asl bufaddr
0024F1  3  26 rr        	rol bufaddr+1
0024F3  3  06 rr        	asl bufaddr
0024F5  3  26 rr        	rol bufaddr+1
0024F7  3  06 rr        	asl bufaddr
0024F9  3  26 rr        	rol bufaddr+1
0024FB  3  06 rr        	asl bufaddr
0024FD  3  26 rr        	rol bufaddr+1
0024FF  3  18           	clc			; add address of MAP graphics.
002500  3  A5 rr        	lda bufaddr
002502  3  65 rr        	adc dispx
002504  3  69 00        	adc #<MAP
002506  3  85 rr        	sta bufaddr
002508  3  A5 rr        	lda bufaddr+1
00250A  3  69 DD        	adc #>MAP
00250C  3  85 rr        	sta bufaddr+1
00250E  3  60           	rts
00250F  3               
00250F  3               ;----------------------------------------------------
00250F  3               ; Display character in A at dispx,dispy.
00250F  3               ;
00250F  3               ; Input:
00250F  3               ;  A 	   = character to print
00250F  3               ;----------------------------------------------------
00250F  3               
00250F  3               pchar:
00250F  3  85 rr        	sta fntaddr
002511  3  A9 00        	lda #0
002513  3  85 rr        	sta fntaddr+1
002515  3  06 rr        	asl fntaddr  		; multiply char by 8.
002517  3  26 rr        	rol fntaddr+1
002519  3  06 rr        	asl fntaddr
00251B  3  26 rr        	rol fntaddr+1
00251D  3  06 rr        	asl fntaddr
00251F  3  26 rr        	rol fntaddr+1
002521  3               
002521  3  A5 rr        	lda fntaddr
002523  3  18           	clc
002524  3  69 6A        	adc #<(FONT-256)
002526  3  85 rr        	sta fntaddr		; that's the low byte.
002528  3  A5 rr        	lda fntaddr+1
00252A  3  69 34        	adc #>(FONT-256)
00252C  3  85 rr        	sta fntaddr+1		; add displacement.
00252E  3               pchark:
00252E  3  20 C0 24     	jsr gprad		; get screen address.
002531  3  A2 07        	ldx #7			; lines to write.
002533  3               pchar0:
002533  3  A0 00        	ldy #0
002535  3  B1 rr        	lda (fntaddr),y 	; get image byte.
002537  3  BC 46 25     	ldy scrtab,x		; Get rowoffset
00253A  3               .if gflag
00253A  3               	and andeor
00253A  3               	eor andeor+1
00253A  3               .endif
00253A  3               .if iflag
00253A  3               	eor #$ff
00253A  3               .endif
00253A  3  91 rr        	sta (scraddr),y 	; copy to screen.
00253C  3  E6 rr        	inc fntaddr		; next image byte.
00253E  3  D0 02        	bne :+
002540  3  E6 rr        	inc fntaddr+1
002542  3               :
002542  3  CA           	dex			; next screen row down.
002543  3  10 EE        	bpl pchar0		; repeat.
002545  3  60           	rts
002546  3               
002546  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
00254A  3  60 40 20 00  
00254E  3               
00254E  3               ;----------------------------------------------
00254E  3               
00254E  3               ; Print attributes, properties and pixels.
00254E  3               ;
00254E  3               ; Input:
00254E  3               ;  A	= tile number
00254E  3               ;----------------------------------------------
00254E  3               
00254E  3               ;.repeat 294
00254E  3               ;  .byte 0
00254E  3               ;.endrep
00254E  3               
00254E  3               pbpattr:			; entry PUTBLOCK command
00254E  3  A4 rr        	ldy charx
002550  3  84 rr        	sty dispx
002552  3  A4 rr        	ldy chary
002554  3  84 rr        	sty dispy
002556  3               pattr:
002556  3               .if aflag
002556  3               	pha
002556  3               	jsr wbloc		; save blockinfo
002556  3               	pla
002556  3               .endif
002556  3               
002556  3               pattr2:
002556  3  85 63        	sta z80_b		; store cell in b register for now.
002558  3  AA           	tax
002559  3  BD AE 34     	lda bprop,x 		; block properties.
00255C  3  85 62        	sta z80_c
00255E  3  C9 08        	cmp #COLECT
002560  3  D0 05        	bne :+
002562  3  A5 63        	lda z80_b
002564  3  8D 75 25     	sta colpatt
002567  3               :
002567  3  20 E3 24     	jsr pradd 		; get property buffer address.
00256A  3  A5 62        	lda z80_c
00256C  3  A0 00        	ldy #0
00256E  3  91 rr        	sta (bufaddr),y 	; write property.
002570  3  A5 63        	lda z80_b 		; restore cell.
002572  3  4C 76 25     	jmp panp
002575  3               ; Print attributes, no properties.
002575  3               
002575  3               ;.repeat 263
002575  3               ; .byte 0
002575  3               ;.endrep
002575  3               
002575  3  00           colpatt:	.byte 0
002576  3               
002576  3               panp:
002576  3  85 64        	sta z80_e		; displacement in e.
002578  3  A9 00        	lda #0
00257A  3  85 65        	sta z80_d		; no high byte.
00257C  3  06 64        	asl z80_e  		; multiply char by 8.
00257E  3  26 65        	rol z80_d
002580  3  06 64        	asl z80_e
002582  3  26 65        	rol z80_d
002584  3  06 64        	asl z80_e
002586  3  26 65        	rol z80_d
002588  3  18           	clc
002589  3  A5 64        	lda z80_e
00258B  3  69 A6        	adc #<chgfx 		; address of graphics.
00258D  3  85 rr        	sta tileaddr
00258F  3  A5 65        	lda z80_d
002591  3  69 34        	adc #>chgfx
002593  3  85 rr        	sta tileaddr+1
002595  3  20 C0 24     	jsr gprad 		; get screen address.
002598  3  A2 07        	ldx #7			; number of pixel rows to write.
00259A  3               panp0:
00259A  3  A0 00        	ldy #0
00259C  3  B1 rr        	lda (tileaddr),y 	; get image byte.
00259E  3               .if iflag
00259E  3               	eor #$ff		; Invert
00259E  3               .endif
00259E  3  BC 46 25     	ldy scrtab,x
0025A1  3  91 rr        	sta (scraddr),y 	; copy to screen.
0025A3  3  E6 rr        	inc tileaddr 		; next image byte.
0025A5  3  D0 02        	bne :+
0025A7  3  E6 rr        	inc tileaddr+1
0025A9  3               :
0025A9  3  CA           	dex	 		; repeat for 8 pixel rows.
0025AA  3  10 EE        	bpl panp0
0025AC  3  E6 rr        	inc dispx 		; move along one.
0025AE  3  E6 rr        	inc charx
0025B0  3  60           	rts
0025B1  3               
0025B1  3               ;----------------------------------------------
0025B1  3               ; Write block
0025B1  3               ;----------------------------------------------
0025B1  3               
0025B1  3               .if aflag
0025B1  3               wbloc:
0025B1  3               	ldy #3
0025B1  3               	sta (pbptr),y		; store block number
0025B1  3               	dey
0025B1  3               	lda dispx
0025B1  3               	sta (pbptr),y		; write x position of block.
0025B1  3               	dey
0025B1  3               	lda dispy
0025B1  3               	sta (pbptr),y		; write y position of block.
0025B1  3               	dey
0025B1  3               	lda scno
0025B1  3               	sta (pbptr),y		; write screen.
0025B1  3               	clc			; point to next free location
0025B1  3               	lda pbptr
0025B1  3               	adc #4
0025B1  3               	sta pbptr
0025B1  3               	bcc :+
0025B1  3               	inc pbptr+1
0025B1  3               :
0025B1  3               	rts
0025B1  3               .endif
0025B1  3               
0025B1  3               ;----------------------------------------------
0025B1  3               ; Print character pixels, no more.
0025B1  3               ;
0025B1  3               ; Input:
0025B1  3               ;  A	= character to print
0025B1  3               ;----------------------------------------------
0025B1  3               
0025B1  3               pchr:
0025B1  3  20 0F 25     	jsr pchar 		; show character in accumulator.
0025B4  3  E6 rr        	inc dispx		; move along one.
0025B6  3  60           	rts
0025B7  3               
0025B7  3               ;----------------------------------------------------
0025B7  3               ; Shifter sprite routine for objects.
0025B7  3               ;----------------------------------------------------
0025B7  3               
0025B7  3               .if oflag
0025B7  3               sprit7:
0025B7  3               	lda z80_b
0025B7  3               	beq sprit0
0025B7  3               	sta z80_a
0025B7  3               sprit3:
0025B7  3               	lsr spr			; shift into position.
0025B7  3               	ror spr+1
0025B7  3               	ror spr+2
0025B7  3               	dec z80_a		; one less iteration.
0025B7  3               	bne sprit3
0025B7  3               sprit0:
0025B7  3               	rts 			; now apply to screen.
0025B7  3               
0025B7  3               ;----------------------------------------------------
0025B7  3               ; Draw sprite
0025B7  3               ;----------------------------------------------------
0025B7  3               
0025B7  3               sprite:
0025B7  3               	stx xtmp		; Save X-reg
0025B7  3               	jsr scadd 		; get screen address in scraddr.
0025B7  3               
0025B7  3               	lda dispx 		; x position.
0025B7  3               	and #7 			; position straddling cells.
0025B7  3               	sta z80_b		; store in b register.
0025B7  3               
0025B7  3               	lda z80_l		; store sprite graphic address.
0025B7  3               	sta sprit1+1
0025B7  3               	sta sprit2+1
0025B7  3               	lda z80_h
0025B7  3               	sta sprit1+2
0025B7  3               	sta sprit2+2
0025B7  3               
0025B7  3               	ldx #0			; pixel height.
0025B7  3               	ldy #0
0025B7  3               sprit1:
0025B7  3               	lda objdta,x		; fetch first byte.
0025B7  3               	sta spr
0025B7  3               	inx
0025B7  3               sprit2:
0025B7  3               	lda objdta,x
0025B7  3               	sta spr+1
0025B7  3               
0025B7  3               	lda #0
0025B7  3               	sta spr+2
0025B7  3               	jsr sprit7		; shift sprite
0025B7  3               
0025B7  3               	dex
0025B7  3               	lda spr			; fetch graphic.
0025B7  3               	ldy spritetab,x
0025B7  3               	eor (scraddr),y		; merge with screen image.
0025B7  3               	sta (scraddr),y		; write to screen.
0025B7  3               	inx			; next screen byte.
0025B7  3               
0025B7  3               	lda spr+1		; fetch graphic.
0025B7  3               	ldy spritetab,x
0025B7  3               	eor (scraddr),y		; merge with screen image.
0025B7  3               	sta (scraddr),y		; write to screen.
0025B7  3               	iny
0025B7  3               
0025B7  3               	lda spr+2		; fetch graphic.
0025B7  3               	eor (scraddr),y		; merge with screen image.
0025B7  3               	sta (scraddr),y		; write to screen.
0025B7  3               
0025B7  3               	inx			; next source byte.
0025B7  3               	cpx #16
0025B7  3               	bne :+
0025B7  3               	inc scraddr+1
0025B7  3               :
0025B7  3               	cpx #32
0025B7  3               	bne sprit1		; repeat
0025B7  3               
0025B7  3               	ldx xtmp		; retreive X-reg
0025B7  3               	rts
0025B7  3               
0025B7  3               spritetab:
0025B7  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0025B7  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0025B7  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0025B7  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0025B7  3               
0025B7  3               spr:	.byte 0,0,0
0025B7  3               
0025B7  3               ;xtmp:	.byte 0
0025B7  3               .endif
0025B7  3               
0025B7  3               ;-----------------------------------------------------------
0025B7  3               ; Get room address.
0025B7  3               ;-----------------------------------------------------------
0025B7  3               
0025B7  3               ;.repeat 273
0025B7  3               ;  .byte 0
0025B7  3               ;.endrep
0025B7  3               
0025B7  3               groom:
0025B7  3  A6 rr        	ldx scno 		; screen number.
0025B9  3  A0 00        	ldy #0
0025BB  3               groomx:
0025BB  3  A9 33        	lda #<scdat 		; pointer to screens.
0025BD  3  85 66        	sta z80_l
0025BF  3  A9 35        	lda #>scdat
0025C1  3  85 67        	sta z80_h
0025C3  3               groom1:
0025C3  3  E0 00        	cpx #0			; is it the first one?
0025C5  3  F0 15        	beq groom0 		; no more screens to skip.
0025C7  3               
0025C7  3  18           	clc
0025C8  3  A5 66        	lda z80_l
0025CA  3  79 33 35     	adc scdat,y 		; low byte of screen size.
0025CD  3  85 66        	sta z80_l
0025CF  3  C8           	iny			; point to high byte.
0025D0  3  A5 67        	lda z80_h
0025D2  3  79 33 35     	adc scdat,y 		; high byte of screen size.
0025D5  3  85 67        	sta z80_h
0025D7  3  C8           	iny			; next address.
0025D8  3               
0025D8  3  CA           	dex 			; one less iteration.
0025D9  3  4C C3 25     	jmp groom1 		; loop until we reach the end.
0025DC  3               groom0:
0025DC  3  AD 3E 35     	lda numsc 		; add displacement.
0025DF  3  0A           	asl a
0025E0  3  18           	clc			; add double displacement to address.
0025E1  3  65 66        	adc z80_l
0025E3  3  85 66        	sta z80_l
0025E5  3  A5 67        	lda z80_h
0025E7  3  69 00        	adc #0
0025E9  3  85 67        	sta z80_h
0025EB  3  60           	rts
0025EC  3               
0025EC  3               ;-----------------------------------------------------------
0025EC  3               ; Draw present room.
0025EC  3               ;-----------------------------------------------------------
0025EC  3               
0025EC  3               droom:
0025EC  3  AD 26 20     	lda wintop 		; window top.
0025EF  3  85 rr        	sta dispy		; set cursor y position.
0025F1  3               droom2:
0025F1  3  20 B7 25     	jsr groom 		; get address of current room.
0025F4  3  A9 00        	lda #0	 		; zero in accumulator.
0025F6  3  85 rr        	sta comcnt 		; reset compression counter.
0025F8  3  AD 28 20     	lda winhgt 		; height of window.
0025FB  3  85 rr        	sta rrow		; set row counter
0025FD  3               droom0:
0025FD  3  AD 27 20     	lda winlft 		; window left edge.
002600  3  85 rr        	sta dispx 		; set cursor x position.
002602  3  AD 29 20     	lda winwid 		; width of window.
002605  3  85 rr        	sta rcol		; set column counter
002607  3               droom1:
002607  3  20 18 26     	jsr flbyt 		; decompress next byte on the fly.
00260A  3  20 56 25     	jsr pattr2 		; show attributes and block.
00260D  3  C6 rr        	dec rcol		; one less column.
00260F  3  D0 F6        	bne droom1 		; repeat for entire line.
002611  3  E6 rr        	inc dispy		; move down one line.
002613  3  C6 rr        	dec rrow 		; one less row.
002615  3  D0 E6        	bne droom0 		; repeat for all rows.
002617  3  60           	rts
002618  3               
002618  3               ;rcol:	.byte 0
002618  3               ;rrow:	.byte 0
002618  3               
002618  3               ;----------------------------------------------
002618  3               ; Decompress bytes on-the-fly.
002618  3               ;----------------------------------------------
002618  3               
002618  3               flbyt:
002618  3  A5 rr        	lda comcnt 		; compression counter.
00261A  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
00261C  3               
00261C  3  A0 00        	ldy #0
00261E  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002620  3  E6 66        	inc z80_l 		; point to next cell.
002622  3  D0 02        	bne :+
002624  3  E6 67        	inc z80_h
002626  3               :
002626  3  C9 FF        	cmp #255 		; is this byte a control code?
002628  3  F0 01        	beq :+
00262A  3  60           	rts 			; no, this byte is uncompressed.
00262B  3               :
00262B  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
00262D  3  85 rr        	sta combyt 		; set up the type.
00262F  3  E6 66        	inc z80_l 		; point to quantity.
002631  3  D0 02        	bne :+
002633  3  E6 67        	inc z80_h
002635  3               :
002635  3  B1 66        	lda (z80_hl),y 		; get quantity.
002637  3  E6 66        	inc z80_l 		; point to next byte.
002639  3  D0 02        	bne :+
00263B  3  E6 67        	inc z80_h
00263D  3               :
00263D  3               flbyt1:
00263D  3  85 rr        	sta comcnt 		; store new quantity.
00263F  3  C6 rr        	dec comcnt		; one less.
002641  3  A5 rr        	lda combyt 		; byte to expand.
002643  3  60           	rts
002644  3               
002644  3               ;combyt:	.byte 0			; byte type compressed.
002644  3               ;comcnt:	.byte 0			; compression counter.
002644  3               
002644  3               ;------------------------------------------
002644  3               ; Ladder down check.
002644  3               ;
002644  3               ; Input:
002644  3               ;  IX = sprite pointer
002644  3               ;------------------------------------------
002644  3               
002644  3               .if lflag
002644  3               laddd:
002644  3               	ldy #9
002644  3               	lda (z80_ix),y		; x coordinate.
002644  3               	sta dispx
002644  3               
002644  3               	ldy #8
002644  3               	lda (z80_ix),y		; y coordinate.
002644  3               	and #254		; make it even.
002644  3               	sta (z80_ix),y 		; reset it.
002644  3               	clc 			; look down 16 pixels.
002644  3               numsp5:
002644  3               	adc #SPR_HGT
002644  3               	sta dispy		; coords in dispx,dispy.
002644  3               	jmp laddv
002644  3               
002644  3               ;------------------------------------------
002644  3               ; Ladder up check.
002644  3               ;
002644  3               ; Input:
002644  3               ;  IX = sprite pointer
002644  3               ;
002644  3               ; Output:
002644  3               ;  A  = 0 is ok, A <>0 is not ok
002644  3               ;------------------------------------------
002644  3               
002644  3               laddu:
002644  3               	ldy #9
002644  3               	lda (z80_ix),y		; x coordinate.
002644  3               	sta dispx
002644  3               
002644  3               	ldy #8
002644  3               	lda (z80_ix),y		; y coordinate.
002644  3               	and #254 		; make it even.
002644  3               	sta (z80_ix),y		; reset it.
002644  3               	clc 			; look 2 pixels above feet.
002644  3               numsp6:
002644  3               	adc #SPR_HGT-2
002644  3               	sta dispy		; coords in dispx,dispy.
002644  3               laddv:
002644  3               	jsr tstbl 		; get map address.
002644  3               	jsr ldchk 		; standard ladder check.
002644  3               	beq :+
002644  3               	rts 			; no way through.
002644  3               :
002644  3               	inc bufaddr 		; look right one cell.
002644  3               	bne :+
002644  3               	inc bufaddr+1
002644  3               :
002644  3               	jsr ldchk 		; do the check.
002644  3               	beq :+
002644  3               	rts 			; impassable.
002644  3               :
002644  3               	lda dispx 		; y coordinate.
002644  3               	and #7 			; position straddling block cells.
002644  3               	bne :+
002644  3               	rts 			; no more checks needed.
002644  3               :
002644  3               	inc bufaddr 		; look to third cell.
002644  3               	bne :+
002644  3               	inc bufaddr+1
002644  3               :
002644  3               	jsr ldchk 		; do the check.
002644  3               	rts  			; return with zero flag set accordingly.
002644  3               .endif
002644  3               
002644  3               ;---------------------------------------------------------
002644  3               ; Can go up check.
002644  3               ;
002644  3               ; Input:
002644  3               ;  IX = sprite pointer
002644  3               ;
002644  3               ; Output:
002644  3               ;  A  = 0 is ok, A <>0 is not ok
002644  3               ;---------------------------------------------------------
002644  3               
002644  3               cangu:
002644  3  A0 09        	ldy #9
002646  3  B1 68        	lda (z80_ix),y		; x coordinate.
002648  3  85 rr        	sta dispx
00264A  3  A0 08        	ldy #8
00264C  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00264E  3  38           	sec
00264F  3  E9 02        	sbc #2
002651  3  85 rr        	sta dispy		; coords in dispx,dispy.
002653  3  20 EE 28     	jsr tstbl 		; get map address.
002656  3  20 06 28     	jsr lrchk 		; standard left/right check.
002659  3  F0 01        	beq :+
00265B  3  60           	rts			; no way through.
00265C  3               :
00265C  3  E6 rr        	inc bufaddr		; look right one cell.
00265E  3  D0 02        	bne :+
002660  3  E6 rr        	inc bufaddr+1
002662  3               :
002662  3  20 06 28     	jsr lrchk 		; do the check.
002665  3  F0 01        	beq :+
002667  3  60           	rts			; impassable.
002668  3               :
002668  3  A5 rr        	lda dispx		; x coordinate.
00266A  3  29 07        	and #7			; position straddling block cells.
00266C  3  D0 01        	bne :+
00266E  3  60           	rts			; no more checks needed.
00266F  3               :
00266F  3  E6 rr        	inc bufaddr		; look to third cell.
002671  3  D0 02        	bne :+
002673  3  E6 rr        	inc bufaddr+1
002675  3               :
002675  3  20 06 28     	jsr lrchk		; do the check.
002678  3  60           	rts 			; return with zero flag set accordingly.
002679  3               
002679  3               ;---------------------------------------------------------
002679  3               ; Can go down check.
002679  3               ;
002679  3               ; Input:
002679  3               ;  IX = sprite pointer
002679  3               ;
002679  3               ; Output:
002679  3               ;  A  = 0 is ok, A <>0 is not ok
002679  3               ;---------------------------------------------------------
002679  3               
002679  3               ;.repeat 264
002679  3               ;  .byte 0
002679  3               ;.endrep
002679  3               
002679  3               cangd:
002679  3  A0 09        	ldy #9
00267B  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00267D  3  85 rr        	sta dispx
00267F  3  A0 08        	ldy #8
002681  3  B1 68        	lda (z80_ix),y		; y coordinate.
002683  3  18           	clc
002684  3               numsp3:
002684  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
002686  3  85 rr        	sta dispy		; coords in dispx,dispy.
002688  3  20 EE 28     	jsr tstbl 		; get map address.
00268B  3  20 1B 28     	jsr plchk 		; block, platform check.
00268E  3  F0 01        	beq :+
002690  3  60           	rts			; no way through.
002691  3               :
002691  3  E6 rr        	inc bufaddr		; look right one cell.
002693  3  D0 02        	bne :+
002695  3  E6 rr        	inc bufaddr+1
002697  3               :
002697  3  20 1B 28     	jsr plchk		; block, platform check.
00269A  3  F0 01        	beq :+
00269C  3  60           	rts			; impassable.
00269D  3               :
00269D  3  A5 rr        	lda dispx		; x coordinate.
00269F  3  29 07        	and #7			; position straddling block cells.
0026A1  3  D0 01        	bne :+
0026A3  3  60           	rts			; no more checks needed.
0026A4  3               :
0026A4  3  E6 rr        	inc bufaddr		; look to third cell.
0026A6  3  D0 02        	bne :+
0026A8  3  E6 rr        	inc bufaddr+1
0026AA  3               :
0026AA  3  20 1B 28     	jsr plchk		; block, platform check.
0026AD  3  60           	rts			; return with zero flag set accordingly.
0026AE  3               
0026AE  3               ;---------------------------------------------------------
0026AE  3               ; Can go left check.
0026AE  3               ;
0026AE  3               ; Input:
0026AE  3               ;  IX = sprite pointer
0026AE  3               ;
0026AE  3               ; Output:
0026AE  3               ;  A  = 0 is ok, A <>0 is not ok
0026AE  3               ;---------------------------------------------------------
0026AE  3               
0026AE  3               cangl:
0026AE  3  A0 08        	ldy #8
0026B0  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0026B2  3  85 rr        	sta dispy
0026B4  3  A0 09        	ldy #9
0026B6  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0026B8  3  38           	sec
0026B9  3  E9 02        	sbc #2			; look left 2 pixels.
0026BB  3  85 rr        	sta dispx		; coords in dispx,dispy.
0026BD  3  4C DF 27     	jmp cangh		; test if we can go there.
0026C0  3               
0026C0  3               ;---------------------------------------------------------
0026C0  3               ; Can go right check.
0026C0  3               ;
0026C0  3               ; Input:
0026C0  3               ;  IX = sprite pointer
0026C0  3               ;
0026C0  3               ; Output:
0026C0  3               ;  A  = 0 is ok, A <>0 is not ok
0026C0  3               ;---------------------------------------------------------
0026C0  3               
0026C0  3  00 00 00 00  .repeat 272
0026C4  3  00 00 00 00  
0026C8  3  00 00 00 00  
0027D0  3                 .byte 0
0027D0  3               .endrep
0027D0  3               
0027D0  3               cangr:
0027D0  3  A0 08        	ldy #8
0027D2  3  B1 68        	lda (z80_ix),y		; y coordinate.
0027D4  3  85 rr        	sta dispy
0027D6  3  A0 09        	ldy #9
0027D8  3  B1 68        	lda (z80_ix),y		; x coordinate.
0027DA  3  18           	clc
0027DB  3  69 10        	adc #16			; look right 16 pixels.
0027DD  3  85 rr        	sta dispx		; coords in dispx,dispy.
0027DF  3               cangh:
0027DF  3               cangh2:
0027DF  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
0027E1  3  85 63        	sta z80_b
0027E3  3  A5 rr        	lda dispy		; y position.
0027E5  3  29 07        	and #7			; does x straddle cells?
0027E7  3  D0 02        	bne cangh0		; yes, loop counter is good.
0027E9  3  C6 63        	dec z80_b		; one less row to write.
0027EB  3               cangh0:
0027EB  3  20 EE 28     	jsr tstbl		; get map address.
0027EE  3               cangh1:
0027EE  3  20 06 28     	jsr lrchk		; standard left/right check.
0027F1  3  F0 01        	beq :+
0027F3  3  60           	rts			; no way through.
0027F4  3               :
0027F4  3  48           	pha
0027F5  3  18           	clc
0027F6  3  A5 rr        	lda bufaddr
0027F8  3  69 20        	adc #32			; look down.
0027FA  3  85 rr        	sta bufaddr
0027FC  3  90 02        	bcc :+
0027FE  3  E6 rr        	inc bufaddr+1
002800  3               :
002800  3  68           	pla
002801  3               
002801  3  C6 63        	dec z80_b
002803  3  D0 E9        	bne cangh1
002805  3  60           	rts
002806  3               
002806  3               ;-------------------------------------
002806  3               ; Check left/right movement is okay.
002806  3               ;
002806  3               ; Input:
002806  3               ;  bufaddr = MAP + x/8 + y/8*32
002806  3               ;
002806  3               ; Output:
002806  3               ;  A  = 0 is ok, A <>0 is not ok
002806  3               ;-------------------------------------
002806  3               
002806  3               lrchk:
002806  3  A0 00        	ldy #0
002808  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
00280A  3  C9 02        	cmp #WALL 		; is it passable?
00280C  3  F0 0A        	beq lrchkx		; no.
00280E  3               
00280E  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002810  3  F0 06        	beq lrchkx		; not passable.
002812  3  A9 00        	lda #0
002814  3  60           	rts
002815  3               
002815  3               ;--------------------------------------------------------------
002815  3               ; Called by mmenu
002815  3               ;--------------------------------------------------------------
002815  3               
002815  3               always:
002815  3  A9 FF        	lda #255		; report it as okay.
002817  3  60           	rts
002818  3               
002818  3               lrchkx:
002818  3  A9 01        	lda #1 			; reset all bits.
00281A  3  60           	rts
00281B  3               
00281B  3               
00281B  3               ;--------------------------------------------------------------
00281B  3               ; Check platform or solid item is not in way.
00281B  3               ;
00281B  3               ; Input:
00281B  3               ;  bufaddr = MAP + x/8 + y/8*32
00281B  3               ;
00281B  3               ; Output:
00281B  3               ;  A  = 0 is ok, A <>0 is not ok
00281B  3               ;--------------------------------------------------------------
00281B  3               
00281B  3               plchk:
00281B  3  A0 00        	ldy #0
00281D  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
00281F  3  C9 02        	cmp #WALL 		; is it passable?
002821  3  F0 F5        	beq lrchkx		; no.
002823  3               .if pflag .or dflag
002823  3               	cmp #FODDER		; fodder has to be dug.
002823  3               	beq lrchkx		; not passable.
002823  3               .endif
002823  3  C9 01        	cmp #PLATFM		; platform is solid.
002825  3  F0 03        	beq plchkx		; not passable.
002827  3               .if lflag
002827  3               	cmp #LADDER		; is it a ladder?
002827  3               	beq lrchkx		; on ladder, deny movement.
002827  3               .endif
002827  3               plchk0:
002827  3  A9 00        	lda #0			; report as ok
002829  3  60           	rts
00282A  3               plchkx:
00282A  3  A5 rr        	lda dispy		; x coordinate.
00282C  3  29 07        	and #7			; position straddling blocks.
00282E  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002830  3  4C 27 28     	jmp plchk0
002833  3               
002833  3               ;--------------------------------------------------------------
002833  3               ; Check ladder is available.
002833  3               ;
002833  3               ; Input:
002833  3               ;  bufaddr = MAP + x/8 + y/8*32
002833  3               ;
002833  3               ; Output:
002833  3               ;  A  = 0 is ok, A <>0 is not ok
002833  3               ;--------------------------------------------------------------
002833  3               
002833  3               .if lflag
002833  3               ldchk:
002833  3               	ldy #0
002833  3               	lda (bufaddr),y 	; fetch cell.
002833  3               	cmp #LADDER 		; is it a ladder?
002833  3               	beq :+
002833  3               	lda #1
002833  3               	rts  			; return with zero flag set accordingly.
002833  3               :
002833  3               	lda #0
002833  3               	rts
002833  3               .endif
002833  3               
002833  3               ;--------------------------------------------------------------
002833  3               ; Get collectables.
002833  3               ;--------------------------------------------------------------
002833  3               
002833  3               .if cflag
002833  3               getcol:
002833  3                       lda #COLECT             ; collectable blocks.
002833  3                       sta z80_b
002833  3                       jsr tded                ; test for collectable blocks.
002833  3                       cmp z80_b               ; did we find one?
002833  3                       beq :+
002833  3                       rts                     ; none were found, job done.
002833  3               :
002833  3                       jsr gtblk               ; get block.
002833  3                       jsr evnt20              ; collected block event.
002833  3                       jmp getcol              ; repeat until none left.
002833  3               
002833  3               ; Get collectable block.
002833  3               
002833  3               gtblk:
002833  3               	ldy #0
002833  3               	lda (bufaddr),y
002833  3               	sta z80_a
002833  3                       lda #0
002833  3                       sta (bufaddr),y		; make it empty now.
002833  3               
002833  3               	lda bufaddr		; set dispx
002833  3               	and #31
002833  3               	sta dispx
002833  3               
002833  3               	lda bufaddr+1		; Set dispy
002833  3               	sec
002833  3               	sbc #>MAP
002833  3               	sta bufaddr+1
002833  3               	asl bufaddr
002833  3               	rol bufaddr+1
002833  3               	asl bufaddr
002833  3               	rol bufaddr+1
002833  3               	asl bufaddr
002833  3               	rol bufaddr+1
002833  3               	lda bufaddr+1
002833  3               	sta dispy
002833  3               
002833  3               	lda colpatt		; get blocknr
002833  3               	sta z80_e		; displacement in e.
002833  3               	lda #0
002833  3               	sta z80_d		; no high byte.
002833  3               	asl z80_e  		; multiply char by 8.
002833  3               	rol z80_d
002833  3               	asl z80_e
002833  3               	rol z80_d
002833  3               	asl z80_e
002833  3               	rol z80_d
002833  3               	clc
002833  3               	lda z80_e
002833  3               	adc #<chgfx 		; address of graphics.
002833  3               	sta tileaddr
002833  3               	lda z80_d
002833  3               	adc #>chgfx
002833  3               	sta tileaddr+1
002833  3               	jsr gprad 		; get screen address.
002833  3               	ldx #7			; number of pixel rows to write.
002833  3               gtblk0:
002833  3               	ldy #0
002833  3               	lda (tileaddr),y 	; get image byte.
002833  3               	ldy scrtab,x
002833  3               	eor (scraddr),y 	; XOR tile on screen
002833  3               	sta (scraddr),y 	; copy to screen.
002833  3               	inc tileaddr 		; next image byte.
002833  3               	bne :+
002833  3               	inc tileaddr+1
002833  3               :
002833  3               	dex	 		; repeat for 8 pixel rows.
002833  3               	bpl gtblk0
002833  3               	rts
002833  3               .endif
002833  3               
002833  3               ;--------------------------------------------------------------
002833  3               ; Touched deadly block check.
002833  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002833  3               ;
002833  3               ; Input:
002833  3               ;  IX = sprite address
002833  3               ;
002833  3               ; Output:
002833  3               ;  A  = 0 is ok, A=5 is not ok
002833  3               ;--------------------------------------------------------------
002833  3               
002833  3               tded:
002833  3  A0 08        	ldy #8
002835  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002837  3  85 rr        	sta dispy
002839  3  C8           	iny
00283A  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00283C  3  85 rr        	sta dispx		; coords in dispx,dispy.
00283E  3  20 EE 28     	jsr tstbl		; get map address.
002841  3  48           	pha
002842  3  A9 1F        	lda #31			; default distance to next line down.
002844  3  85 64        	sta z80_e
002846  3  68           	pla
002847  3  C5 63        	cmp z80_b		; is this the required block?
002849  3  D0 01        	bne :+
00284B  3  60           	rts			; yes.
00284C  3               :
00284C  3  E6 rr        	inc bufaddr 		; next cell.
00284E  3  D0 02        	bne :+
002850  3  E6 rr        	inc bufaddr+1
002852  3               :
002852  3  A0 00        	ldy #0
002854  3  B1 rr        	lda (bufaddr),y		; fetch type.
002856  3  C5 63        	cmp z80_b 		; is this deadly/custom?
002858  3  D0 01        	bne :+
00285A  3  60           	rts			; yes.
00285B  3               :
00285B  3  A5 rr        	lda dispx		; horizontal position.
00285D  3  85 62        	sta z80_c 		; store column in c register.
00285F  3  29 07        	and #7			; is it straddling cells?
002861  3  D0 03        	bne :+
002863  3  4C 77 28     	jmp tded0		; no.
002866  3               :
002866  3  E6 rr        	inc bufaddr 		; last cell.
002868  3  D0 02        	bne :+
00286A  3  E6 rr        	inc bufaddr+1
00286C  3               :
00286C  3  A0 00        	ldy #0
00286E  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002870  3  C5 63        	cmp z80_b		; is this the block?
002872  3  D0 01        	bne :+
002874  3  60           	rts			; yes.
002875  3               :
002875  3  C6 64        	dec z80_e		; one less cell to next row down.
002877  3               tded0:
002877  3  18           	clc 			; point to next row.
002878  3  A5 rr        	lda bufaddr
00287A  3  65 64        	adc z80_e
00287C  3  85 rr        	sta bufaddr
00287E  3  90 02        	bcc :+
002880  3  E6 rr        	inc bufaddr+1
002882  3               :
002882  3  A0 00        	ldy #0
002884  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
002886  3  C5 63        	cmp z80_b		; is this fatal?
002888  3  D0 01        	bne :+
00288A  3  60           	rts			; yes.
00288B  3               :
00288B  3  E6 rr        	inc bufaddr 		; next cell.
00288D  3  D0 02        	bne :+
00288F  3  E6 rr        	inc bufaddr+1
002891  3               :
002891  3  A0 00        	ldy #0
002893  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002895  3  C5 63        	cmp z80_b		; is this fatal?
002897  3  D0 01        	bne :+
002899  3  60           	rts			; yes.
00289A  3               :
00289A  3  A5 62        	lda z80_c		; horizontal position.
00289C  3  29 07        	and #7			; is it straddling cells?
00289E  3  D0 03        	bne :+
0028A0  3  4C B2 28     	jmp tded1 		; no.
0028A3  3               :
0028A3  3  E6 rr        	inc bufaddr		; last cell.
0028A5  3  D0 02        	bne :+
0028A7  3  E6 rr        	inc bufaddr+1
0028A9  3               :
0028A9  3  A0 00        	ldy #0
0028AB  3  B1 rr        	lda (bufaddr),y		; fetch type.
0028AD  3  C5 63        	cmp z80_b		; is this fatal?
0028AF  3  D0 01        	bne :+
0028B1  3  60           	rts			; yes.
0028B2  3               :
0028B2  3               tded1:
0028B2  3  A5 rr        	lda dispy		; vertical position.
0028B4  3  29 07        	and #7 			; is it straddling cells?
0028B6  3  D0 01        	bne :+
0028B8  3  60           	rts			; no, job done.
0028B9  3               :
0028B9  3  18           	clc			; point to next row.
0028BA  3  A5 rr        	lda bufaddr
0028BC  3  65 64        	adc z80_e
0028BE  3  85 rr        	sta bufaddr
0028C0  3  90 02        	bcc :+
0028C2  3  E6 rr        	inc bufaddr+1
0028C4  3               :
0028C4  3  A0 00        	ldy #0
0028C6  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
0028C8  3  C5 63        	cmp z80_b		; is this fatal?
0028CA  3  D0 01        	bne :+
0028CC  3  60           	rts			; yes.
0028CD  3               :
0028CD  3  E6 rr        	inc bufaddr		; next cell.
0028CF  3  D0 02        	bne :+
0028D1  3  E6 rr        	inc bufaddr+1
0028D3  3               :
0028D3  3  A0 00        	ldy #0
0028D5  3  B1 rr        	lda (bufaddr),y 	; fetch type.
0028D7  3  C5 63        	cmp z80_b		; is this fatal?
0028D9  3  D0 01        	bne :+
0028DB  3  60           	rts			; yes.
0028DC  3               :
0028DC  3  A5 62        	lda z80_c		; horizontal position.
0028DE  3  29 07        	and #7			; is it straddling cells?
0028E0  3  D0 01        	bne :+
0028E2  3  60           	rts			; no.
0028E3  3               :
0028E3  3  E6 rr        	inc bufaddr		; last cell.
0028E5  3  D0 02        	bne :+
0028E7  3  E6 rr        	inc bufaddr+1
0028E9  3               :
0028E9  3  A0 00        	ldy #0
0028EB  3  B1 rr        	lda (bufaddr),y		; fetch final type.
0028ED  3  60           	rts 			; return with final type in accumulator.
0028EE  3               
0028EE  3               ;---------------------------------------------------
0028EE  3               ; Fetch block type at (dispx, dispy).
0028EE  3               ;
0028EE  3               ; Output:
0028EE  3               ;  A = block type
0028EE  3               ;---------------------------------------------------
0028EE  3               
0028EE  3               tstbl:
0028EE  3  A5 rr        	lda dispy 		; fetch y coord.
0028F0  3  4A           	lsr a			; bufaddr = y/8
0028F1  3  4A           	lsr a
0028F2  3  4A           	lsr a
0028F3  3  85 rr        	sta chary
0028F5  3               
0028F5  3  85 rr        	sta bufaddr
0028F7  3  A9 00        	lda #0
0028F9  3  85 rr        	sta bufaddr+1
0028FB  3               
0028FB  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
0028FD  3  26 rr        	rol bufaddr+1
0028FF  3  06 rr        	asl bufaddr
002901  3  26 rr        	rol bufaddr+1
002903  3  06 rr        	asl bufaddr
002905  3  26 rr        	rol bufaddr+1
002907  3  06 rr        	asl bufaddr
002909  3  26 rr        	rol bufaddr+1
00290B  3  06 rr        	asl bufaddr
00290D  3  26 rr        	rol bufaddr+1
00290F  3               
00290F  3  A5 rr        	lda dispx		; x/8
002911  3  4A           	lsr a
002912  3  4A           	lsr a
002913  3  4A           	lsr a
002914  3  85 rr        	sta charx
002916  3               
002916  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
002917  3  65 rr        	adc bufaddr
002919  3  69 00        	adc #<MAP
00291B  3  85 rr        	sta bufaddr
00291D  3  A5 rr        	lda bufaddr+1
00291F  3  69 DD        	adc #>MAP
002921  3  85 rr        	sta bufaddr+1
002923  3               
002923  3  A0 00        	ldy #0
002925  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002927  3  60           	rts
002928  3               
002928  3               
002928  3               ;-------------------------------------------------------------------
002928  3               ; Jump - if we can.
002928  3               ; Requires initial speed to be set up in accumulator prior to call.
002928  3               ;
002928  3               ; Input:
002928  3               ;  IX = sprite address
002928  3               ;-------------------------------------------------------------------
002928  3               
002928  3               jump:
002928  3  A0 0D        	ldy #13
00292A  3  B1 68        	lda (z80_ix),y		; jump table low.
00292C  3  A0 0E        	ldy #14
00292E  3  11 68        	ora (z80_ix),y		; jump table high.
002930  3  F0 01        	beq :+
002932  3  60           	rts			; already in the air.
002933  3               :
002933  3  A9 38        	lda #>jtab
002935  3  A0 0E        	ldy #14
002937  3  91 68        	sta (z80_ix),y		; set jump high.
002939  3  A9 6A        	lda #<jtab		; jump table start.
00293B  3  A0 0D        	ldy #13
00293D  3  91 68        	sta (z80_ix),y		; set jump low.
00293F  3  60           	rts
002940  3               
002940  3               ; Jump table.
002940  3               
002940  3               ;jtab:
002940  3               ;	.byte 248,250,252
002940  3               ;	.byte 254,254,255
002940  3               ;	.byte 255,255,0,0
002940  3               ;	.byte 0,1,1,1,2,2
002940  3               ;	.byte 4,6,8,8,8,99
002940  3               
002940  3               ;------------------------------------------------
002940  3               ; Random numbers code.
002940  3               ; Pseudo-random number generator, 8-bit.
002940  3               ;
002940  3               ; Output:
002940  3               ;  RND = random number
002940  3               ;------------------------------------------------
002940  3               
002940  3               random:
002940  3  A5 rr        	lda seed
002942  3  F0 05        	beq doEor
002944  3  0A           	asl a
002945  3  F0 04        	beq noEor
002947  3  90 02        	bcc noEor
002949  3  49 1D        doEor:	eor #$1d
00294B  3  85 rr        noEor:	sta seed
00294D  3  60           	rts
00294E  3               
00294E  3  A5 rr        	lda seed		; get last random number.
002950  3  0A           	asl a
002951  3  0A           	asl a
002952  3  18           	clc
002953  3  65 rr        	adc seed
002955  3  18           	clc
002956  3  69 45        	adc #$45
002958  3  85 rr        	sta seed		; store new seed.
00295A  3  85 rr        	sta varrnd		; return number in variable.
00295C  3  60           	rts
00295D  3               
00295D  3               ;--------------------------------------------------------
00295D  3               ; Keys
00295D  3               ;
00295D  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
00295D  3               ;             ||||||||
00295D  3               ;             |||||||+> Right    KEY 0  - X
00295D  3               ;             ||||||+-> Left     KEY 1  - Z
00295D  3               ;             |||||+--> Down     KEY 2  - .
00295D  3               ;             ||||+---> Up       KEY 3  - ;
00295D  3               ;             |||+----> Fire1    KEY 4  - SPC
00295D  3               ;             ||+-----> Fire2    KEY 5  - Q
00295D  3               ;             |+------> Fire3    KEY 6  - P
00295D  3               ;             +-------> Not used
00295D  3               ;
00295D  3               ;                       Option1  KEY 7  - 1
00295D  3               ;                       Option2  KEY 8  - 2
00295D  3               ;                       Option3  KEY 9  - 3
00295D  3               ;                       Option4  KEY 10 - 4
00295D  3               ;--------------------------------------------------------
00295D  3               
00295D  3               ;              X   Z   .   ;  SPC  Q   P
00295D  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
00295D  3               ;        .byte $21,$11,$01,$92                   ; menu options.
00295D  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002961  3  00 04 14     
002964  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
002968  3               
002968  3               ;-------------------------------------------------------
002968  3               ; Joystick and keyboard reading routines.
002968  3               ;
002968  3               ; contrl = 0, Keyboard
002968  3               ;          1, JoyKeyb
002968  3               ;          2, JoyMMC
002968  3               ;-------------------------------------------------------
002968  3               
002968  3               joykey:
002968  3  A5 rr        	lda contrl 		; control flag.
00296A  3  C9 01        	cmp #1
00296C  3  D0 03        	bne :+
00296E  3  4C 2F 39     	jmp joy1 		; read keyboard joystick
002971  3               :
002971  3  C9 02        	cmp #2
002973  3  D0 03        	bne :+
002975  3  4C 5F 39     	jmp joy2 		; read MMC joystick.
002978  3               :
002978  3               ; Keyboard controls.
002978  3               
002978  3  A9 00        	lda #0		 	; zero reading.
00297A  3  85 64        	sta z80_e
00297C  3               
00297C  3  A0 06        	ldy #6	 		; address of last key.
00297E  3               joyke0:
00297E  3  B9 6B 38     	lda keys,y 		; get key from table.
002981  3  20 06 39     	jsr ktest		; being pressed?
002984  3  26 64        	rol z80_e 		; rotate into reading.
002986  3               
002986  3  88           	dey		 	; next key.
002987  3  10 F5        	bpl joyke0 		; repeat for all keys.
002989  3  A5 64        	lda z80_e 		; copy e register to accumulator.
00298B  3  85 rr        	sta joyval		; remember value.
00298D  3  60           	rts
00298E  3               
00298E  3               ;---------------------------------------------------------------
00298E  3               ; Display message.
00298E  3               ;
00298E  3               ; Input:
00298E  3               ;  A = message number
00298E  3               ;---------------------------------------------------------------
00298E  3               
00298E  3               dmsg:
00298E  3  AA           	tax
00298F  3  A9 4C        	lda #<msgdat		; pointer to messages.
002991  3  85 66        	sta z80_l
002993  3  A9 34        	lda #>msgdat
002995  3  85 67        	sta z80_h
002997  3  20 A9 2A     	jsr getwrd		; get message number.
00299A  3               dmsg3:
00299A  3  20 96 2A     	jsr preprt		; pre-printing stuff.
00299D  3  20 7B 23     	jsr checkx		; make sure we"re in a printable range.
0029A0  3  A5 rr        	lda prtmod		; print mode.
0029A2  3  D0 47        	bne bmsg1		; no, double-height text.
0029A4  3               dmsg0:
0029A4  3  A5 67        	lda z80_h		; store string pointer.
0029A6  3  48           	pha
0029A7  3  A5 66        	lda z80_l
0029A9  3  48           	pha
0029AA  3               
0029AA  3  A0 00        	ldy #0
0029AC  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
0029AE  3  29 7F        	and #127		; remove any end marker.
0029B0  3  C9 0D        	cmp #13
0029B2  3  F0 24        	beq dmsg1
0029B4  3  20 0F 25     	jsr pchar		; display character.
0029B7  3  20 83 2A     	jsr nexpos 		; display position.
0029BA  3  D0 03        	bne dmsg2		; not on a new line.
0029BC  3  20 88 2A     	jsr nexlin		; next line down.
0029BF  3               dmsg2:
0029BF  3  68           	pla			; retrieve string pointer
0029C0  3  85 66        	sta z80_l
0029C2  3  68           	pla
0029C3  3  85 67        	sta z80_h
0029C5  3               
0029C5  3  A0 00        	ldy #0
0029C7  3  B1 66        	lda (z80_hl),y		; fetch last character.
0029C9  3  0A           	asl a  			; was it the end?
0029CA  3  90 03        	bcc :+
0029CC  3  4C CE 23     	jmp dscor2		; yes, job done.
0029CF  3               :
0029CF  3  E6 66        	inc z80_l		; next character to display.
0029D1  3  D0 02        	bne :+
0029D3  3  E6 67        	inc z80_h
0029D5  3               :
0029D5  3  4C A4 29     	jmp dmsg0
0029D8  3               dmsg1:
0029D8  3  E6 rr        	inc dispy
0029DA  3  A5 rr        	lda dispy
0029DC  3  C9 18        	cmp #24
0029DE  3  90 04        	bcc dmsg4
0029E0  3  A9 00        	lda #0
0029E2  3  85 rr        	sta dispy
0029E4  3               dmsg4:
0029E4  3  A9 00        	lda #0
0029E6  3  85 rr        	sta dispx
0029E8  3  4C BF 29     	jmp dmsg2
0029EB  3               
0029EB  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
0029EB  3               
0029EB  3               ;----------------------------------------------------------
0029EB  3               ; Display message in big text.
0029EB  3               ;
0029EB  3               ; Input:
0029EB  3               ;  HL = string pointer
0029EB  3               ;----------------------------------------------------------
0029EB  3               
0029EB  3               bmsg1:
0029EB  3  A0 00        	ldy #0
0029ED  3  B1 66        	lda (z80_hl),y 		; get character to display.
0029EF  3  29 7F        	and #127		; only want 7 bits.
0029F1  3  C9 0D        	cmp #13
0029F3  3  F0 13        	beq bmsg2
0029F5  3  20 1D 2A     	jsr bchar 		; display big char.
0029F8  3               bmsg3:
0029F8  3  A0 00        	ldy #0
0029FA  3  B1 66        	lda (z80_hl),y 		; look at last character.
0029FC  3  48           	pha
0029FD  3  E6 66        	inc z80_l 		; next character in list.
0029FF  3  D0 02        	bne :+
002A01  3  E6 67        	inc z80_h
002A03  3               :
002A03  3  68           	pla
002A04  3  0A           	asl a  			; was terminator flag set?
002A05  3  90 E4        	bcc bmsg1		; no, keep going.
002A07  3  60           	rts
002A08  3               bmsg2:
002A08  3  A9 00        	lda #0
002A0A  3  85 rr        	sta dispx
002A0C  3  E6 rr        	inc dispy
002A0E  3  E6 rr        	inc dispy
002A10  3  A5 rr        	lda dispy
002A12  3  C9 17        	cmp #23
002A14  3  90 E2        	bcc bmsg3
002A16  3  A9 00        	lda #0
002A18  3  85 rr        	sta dispy
002A1A  3  4C F8 29     	jmp bmsg3
002A1D  3               
002A1D  3               ;----------------------------------------------------------
002A1D  3               ; Big character display.
002A1D  3               ;
002A1D  3               ; Input:
002A1D  3               ;  A = character
002A1D  3               ;----------------------------------------------------------
002A1D  3               
002A1D  3               bchar:
002A1D  3  85 64        	sta z80_e		; save char in lb
002A1F  3  A9 00        	lda #0
002A21  3  85 65        	sta z80_d		; reset hb
002A23  3               
002A23  3  06 64        	asl z80_e 		; multiply char by 8.
002A25  3  26 65        	rol z80_d
002A27  3  06 64        	asl z80_e
002A29  3  26 65        	rol z80_d
002A2B  3  06 64        	asl z80_e
002A2D  3  26 65        	rol z80_d		; de = a*8
002A2F  3               
002A2F  3  18           	clc			; de = Fontpointer + a*8
002A30  3  A5 64        	lda z80_e
002A32  3  69 6A        	adc #<(FONT-256) 		; address of font.
002A34  3  85 64        	sta z80_e
002A36  3  A5 65        	lda z80_d
002A38  3  69 34        	adc #>(FONT-256)
002A3A  3  85 65        	sta z80_d
002A3C  3               
002A3C  3  20 C0 24     	jsr gprad 		; get screen address.
002A3F  3               
002A3F  3  A2 00        	ldx #0			; height of character in font.
002A41  3               bchar0:
002A41  3  A0 00        	ldy #0
002A43  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
002A45  3               
002A45  3               .if gflag
002A45  3               	and andeor
002A45  3               	eor andeor+1
002A45  3               .endif
002A45  3               .if iflag
002A45  3               	eor #$ff
002A45  3               .endif
002A45  3               
002A45  3  91 rr        	sta (scraddr),y
002A47  3  48           	pha
002A48  3  20 DD 2D     	jsr nline 		; next line down.
002A4B  3  68           	pla
002A4C  3  91 rr        	sta (scraddr),y
002A4E  3  20 DD 2D     	jsr nline 		; next line down.
002A51  3               
002A51  3  18           	clc
002A52  3  E6 64        	inc z80_e 		; next line of font.
002A54  3  D0 02        	bne :+
002A56  3  E6 65        	inc z80_d
002A58  3               :
002A58  3  E8           	inx
002A59  3  E0 08        	cpx #8
002A5B  3  D0 E4        	bne bchar0
002A5D  3               
002A5D  3  20 83 2A     	jsr nexpos		; display position.
002A60  3  D0 05        	bne bchar2 		; not on a new line.
002A62  3               bchar3:
002A62  3  E6 rr        	inc dispy
002A64  3  20 88 2A     	jsr nexlin 		; next line check.
002A67  3               bchar2:
002A67  3  4C CE 23     	jmp dscor2		; tidy up line and column variables.
002A6A  3               
002A6A  3               
002A6A  3               ;-------------------------------------------------
002A6A  3               ; Display a character.
002A6A  3               ;
002A6A  3               ; Input:
002A6A  3               ;  A = character
002A6A  3               ;-------------------------------------------------
002A6A  3               
002A6A  3               achar:
002A6A  3  85 63        	sta z80_b 		; copy to b.
002A6C  3  20 96 2A     	jsr preprt 		; get ready to print.
002A6F  3  A5 63        	lda z80_b		; character in accumulator.
002A71  3  A6 rr        	ldx prtmod 		; print mode.
002A73  3  F0 03        	beq :+
002A75  3  4C 1D 2A     	jmp bchar 		; no, double-height text.
002A78  3               :
002A78  3  20 0F 25     	jsr pchar 		; display character.
002A7B  3  20 83 2A     	jsr nexpos 		; display position.
002A7E  3  F0 E2        	beq bchar3		; next line down.
002A80  3  4C 67 2A     	jmp bchar2 		; tidy up.
002A83  3               
002A83  3               
002A83  3               ;-------------------------------------------------
002A83  3               ; Get next print column position.
002A83  3               ;-------------------------------------------------
002A83  3               
002A83  3               nexpos:
002A83  3  E6 rr        	inc dispx		; move along one position.
002A85  3  A5 rr        	lda dispx 		; get coordinate.
002A87  3               ;	and #31
002A87  3  60           	rts 			; return with status in zero flag.
002A88  3               
002A88  3               ;-------------------------------------------------
002A88  3               ; Get next print line position.
002A88  3               ;-------------------------------------------------
002A88  3               
002A88  3               nexlin:
002A88  3  E6 rr        	inc dispy 		; newline.
002A8A  3  A5 rr        	lda dispy		; vertical position.
002A8C  3  C9 18        	cmp #24			; past screen edge?
002A8E  3  B0 01        	bcs :+
002A90  3  60           	rts			; no, still okay.
002A91  3               :
002A91  3  A9 00        	lda #0			; restart at top.
002A93  3  85 rr        	sta dispy
002A95  3  60           	rts
002A96  3               
002A96  3               ;--------------------------------------------------------
002A96  3               ; Pre-print preliminaries.
002A96  3               ;--------------------------------------------------------
002A96  3               
002A96  3               preprt:
002A96  3  A9 6A        	lda #<(FONT-256)		; font pointer.
002A98  3  8D 79 23     	sta grbase		; set up graphics base.
002A9B  3  A9 34        	lda #>(FONT-256)
002A9D  3  8D 7A 23     	sta grbase+1
002AA0  3               prescr:
002AA0  3  A5 rr        	lda charx 		; display coordinates.
002AA2  3  85 rr        	sta dispx		; set up general coordinates.
002AA4  3  A5 rr        	lda chary
002AA6  3  85 rr        	sta dispy
002AA8  3  60           	rts
002AA9  3               
002AA9  3               ;--------------------------------------------------------------
002AA9  3               ; Get messagenr x in hl
002AA9  3               ;
002AA9  3               ; Input:
002AA9  3               ;  HL = pointer to message list
002AA9  3               ;  X  = message number.
002AA9  3               ;--------------------------------------------------------------
002AA9  3               
002AA9  3               getwrd:
002AA9  3  E0 00        	cpx #0
002AAB  3  D0 01        	bne:+ 			; first word in list?
002AAD  3  60           	rts 			; yep, don't search.
002AAE  3               :
002AAE  3  A0 00        	ldy #0
002AB0  3               getwd0:
002AB0  3  B1 66        	lda (z80_hl),y
002AB2  3  48           	pha
002AB3  3  E6 66        	inc z80_l
002AB5  3  D0 02        	bne :+
002AB7  3  E6 67        	inc z80_h
002AB9  3               :
002AB9  3  68           	pla
002ABA  3  C9 80        	cmp #128		; found end?
002ABC  3  30 F2        	bmi getwd0		; no, carry on.
002ABE  3  CA           	dex			; until we have right number.
002ABF  3  D0 EF        	bne getwd0
002AC1  3  60           	rts
002AC2  3               
002AC2  3               ;-----------------------------------------------------------
002AC2  3               ; Bubble sort.
002AC2  3               ;-----------------------------------------------------------
002AC2  3               
002AC2  3               bsort:
002AC2  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
002AC4  3  85 rr        	sta qscnt
002AC6  3               
002AC6  3  A9 27        	lda #<sprtab 		; sprite table.
002AC8  3  85 68        	sta z80_x
002ACA  3  A9 33        	lda #>sprtab
002ACC  3  85 69        	sta z80_i
002ACE  3               bsort0:
002ACE  3  A0 00        	ldy #0
002AD0  3  B1 68        	lda (z80_ix),y 		; first sprite type.
002AD2  3  C9 FF        	cmp #255 		; is it switched off?
002AD4  3  F0 30        	beq swemp		; yes, may need to switch another in here.
002AD6  3               
002AD6  3  A0 11        	ldy #TABSIZ
002AD8  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
002ADA  3  C9 FF        	cmp #255 		; is it enabled?
002ADC  3  F0 0A        	beq bsort2 		; no, nothing to swap.
002ADE  3               
002ADE  3  A0 14        	ldy #TABSIZ+3
002AE0  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
002AE2  3  A0 03        	ldy #3
002AE4  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
002AE6  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
002AE8  3               bsort2:
002AE8  3  18           	clc
002AE9  3  A5 68        	lda z80_x
002AEB  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002AED  3  85 68        	sta z80_x
002AEF  3  90 02        	bcc :+
002AF1  3  E6 69        	inc z80_i
002AF3  3               :
002AF3  3  C6 rr        	dec qscnt
002AF5  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
002AF7  3  60           	rts
002AF8  3               
002AF8  3               ;qscnt:	.byte 0
002AF8  3               
002AF8  3               bsort1:
002AF8  3  A0 11        	ldy #TABSIZ
002AFA  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
002AFC  3  C9 FF        	cmp #255		; is it enabled?
002AFE  3  F0 E8        	beq bsort2		; no, nothing to swap.
002B00  3  20 14 2B     	jsr swspr		; swap positions.
002B03  3  4C E8 2A     	jmp bsort2
002B06  3               swemp:
002B06  3  A0 11        	ldy #TABSIZ
002B08  3  B1 68        	lda (z80_ix),y		; next table entry.
002B0A  3  C9 FF        	cmp #255		; is that one on?
002B0C  3  F0 DA        	beq bsort2		; no, nothing to swap.
002B0E  3  20 14 2B     	jsr swspr		; swap positions.
002B11  3  4C E8 2A     	jmp bsort2
002B14  3               
002B14  3               ; Swap sprites.
002B14  3               
002B14  3               swspr:
002B14  3  A5 68        	lda z80_x		; table address
002B16  3  85 64        	sta z80_e		; copy to de pair.
002B18  3  85 66        	sta z80_l		; copy to hl pair.
002B1A  3  A5 69        	lda z80_i
002B1C  3  85 67        	sta z80_h
002B1E  3  85 65        	sta z80_d
002B20  3               
002B20  3  18           	clc
002B21  3  A5 66        	lda z80_l
002B23  3  69 11        	adc #TABSIZ		; distance to second entry.
002B25  3  85 66        	sta z80_l
002B27  3  90 02        	bcc :+
002B29  3  E6 67        	inc z80_h
002B2B  3               :
002B2B  3  A9 11        	lda #TABSIZ		; bytes to swap.
002B2D  3  85 63        	sta z80_b
002B2F  3  A0 00        	ldy #0
002B31  3               swspr0:
002B31  3  B1 66        	lda (z80_hl),y		; fetch second byte.
002B33  3  48           	pha
002B34  3  B1 64        	lda (z80_de),y 		; fetch first byte.
002B36  3  91 66        	sta (z80_hl),y 		; copy to second.
002B38  3  68           	pla
002B39  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
002B3B  3               
002B3B  3  E6 64        	inc z80_e 		; next byte.
002B3D  3  D0 02        	bne :+
002B3F  3  E6 65        	inc z80_d
002B41  3               :
002B41  3  E6 66        	inc z80_l 		; next byte.
002B43  3  D0 02        	bne :+
002B45  3  E6 67        	inc z80_h
002B47  3               :
002B47  3  C6 63        	dec z80_b
002B49  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
002B4B  3  60           	rts
002B4C  3               
002B4C  3               ;----------------------------------------------------
002B4C  3               ; Process sprites.
002B4C  3               ;----------------------------------------------------
002B4C  3               
002B4C  3               pspr:
002B4C  3  A9 0C        	lda #NUMSPR		; sprites to process.
002B4E  3  85 rr        	sta sprptr
002B50  3               
002B50  3  A9 27        	lda #<sprtab 		; sprite table.
002B52  3  85 68        	sta z80_x
002B54  3  A9 33        	lda #>sprtab
002B56  3  85 69        	sta z80_i
002B58  3               pspr1:
002B58  3  A0 00        	ldy #0
002B5A  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
002B5C  3  C9 09        	cmp #9 			; within range of sprite types?
002B5E  3  B0 03        	bcs :+
002B60  3  20 73 2B     	jsr pspr2 		; yes, process this one.
002B63  3               :
002B63  3  18           	clc
002B64  3  A5 68        	lda z80_x
002B66  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002B68  3  85 68        	sta z80_x
002B6A  3  90 02        	bcc :+
002B6C  3  E6 69        	inc z80_i		; next sprite.
002B6E  3               :
002B6E  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
002B70  3  D0 E6        	bne pspr1
002B72  3  60           	rts
002B73  3               
002B73  3               ;sprptr:	.byte 0
002B73  3               
002B73  3               pspr2:
002B73  3  A5 68        	lda z80_x 		; store original sprite pointer.
002B75  3  85 rr        	sta ogptr
002B77  3  A5 69        	lda z80_i
002B79  3  85 rr        	sta ogptr+1
002B7B  3  20 87 2B     	jsr pspr3		; do the routine.
002B7E  3               rtorg:
002B7E  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
002B80  3  85 68        	sta z80_x
002B82  3  A5 rr        	lda ogptr+1
002B84  3  85 69        	sta z80_i
002B86  3               rtorg0:
002B86  3  60           	rts
002B87  3               
002B87  3               pspr3:
002B87  3  A9 BC        	lda #<evtyp0		; sprite type events list.
002B89  3  85 66        	sta z80_l
002B8B  3  A9 2B        	lda #>evtyp0
002B8D  3  85 67        	sta z80_h
002B8F  3               pspr4:
002B8F  3  B1 68        	lda (z80_ix),y
002B91  3  0A           	asl a			; double accumulator.
002B92  3  18           	clc
002B93  3  65 66        	adc z80_l
002B95  3  85 66        	sta z80_l
002B97  3  90 02        	bcc :+
002B99  3  E6 67        	inc z80_h
002B9B  3               :
002B9B  3  B1 66        	lda (z80_hl),y
002B9D  3  85 64        	sta z80_e 		; copy to de.
002B9F  3  48           	pha
002BA0  3               
002BA0  3  E6 66        	inc z80_l 		; next byte of address.
002BA2  3  D0 02        	bne :+
002BA4  3  E6 67        	inc z80_h
002BA6  3               :
002BA6  3  B1 66        	lda (z80_hl),y 		; address high.
002BA8  3  85 65        	sta z80_d
002BAA  3               
002BAA  3  48           	pha	 		; swap address into hl.
002BAB  3  A5 67        	lda z80_h
002BAD  3  85 65        	sta z80_d
002BAF  3  68           	pla
002BB0  3  85 67        	sta z80_h
002BB2  3  68           	pla
002BB3  3  85 66        	sta z80_l
002BB5  3  A5 66        	lda z80_l
002BB7  3  85 64        	sta z80_e
002BB9  3               
002BB9  3  6C 66 00     	jmp (z80_hl) 		; go there.
002BBC  3               
002BBC  3               ;ogptr:	.word 0			; original sprite pointer.
002BBC  3               
002BBC  3               ; Address of each sprite type's routine.
002BBC  3               
002BBC  3  11 34        evtyp0:	.word evnt00
002BBE  3  12 34        evtyp1:	.word evnt01
002BC0  3  13 34        evtyp2:	.word evnt02
002BC2  3  14 34        evtyp3:	.word evnt03
002BC4  3  15 34        evtyp4:	.word evnt04
002BC6  3  16 34        evtyp5:	.word evnt05
002BC8  3  17 34        evtyp6:	.word evnt06
002BCA  3  18 34        evtyp7:	.word evnt07
002BCC  3  19 34        evtyp8:	.word evnt08
002BCE  3               
002BCE  3               ;--------------------------------------------------------------
002BCE  3               ; Display sprites.
002BCE  3               ;
002BCE  3               ; Input:
002BCE  3               ;  IX = sprite table
002BCE  3               ;--------------------------------------------------------------
002BCE  3               
002BCE  3               dspr:
002BCE  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
002BD0  3  85 rr        	sta sprcnt
002BD2  3               dspr0:
002BD2  3  A0 00        	ldy #0
002BD4  3  B1 68        	lda (z80_ix),y 		; get sprite type.
002BD6  3  C9 FF        	cmp #255 		; is it enabled?
002BD8  3  D0 42        	bne dspr1 		; yes, it needs deleting.
002BDA  3               dspr5:
002BDA  3  A0 05        	ldy #5
002BDC  3  B1 68        	lda (z80_ix),y 		; new type.
002BDE  3  C9 FF        	cmp #255		; is it enabled?
002BE0  3  D0 77        	bne dspr3 		; yes, it needs drawing.
002BE2  3               dspr2:
002BE2  3  A0 05        	ldy #5
002BE4  3  B1 68        	lda (z80_ix),y 		; copy new type.
002BE6  3  A0 00        	ldy #0
002BE8  3  91 68        	sta (z80_ix),y
002BEA  3  A0 06        	ldy #6
002BEC  3  B1 68        	lda (z80_ix),y 		; copy new image number.
002BEE  3  A0 01        	ldy #1
002BF0  3  91 68        	sta (z80_ix),y
002BF2  3  A0 07        	ldy #7
002BF4  3  B1 68        	lda (z80_ix),y 		; copy new frame.
002BF6  3  A0 02        	ldy #2
002BF8  3  91 68        	sta (z80_ix),y
002BFA  3  A0 08        	ldy #8
002BFC  3  B1 68        	lda (z80_ix),y 		; copy new y.
002BFE  3  A0 03        	ldy #3
002C00  3  91 68        	sta (z80_ix),y
002C02  3  A0 09        	ldy #9
002C04  3  B1 68        	lda (z80_ix),y 		; copy new x.
002C06  3  A0 04        	ldy #4
002C08  3  91 68        	sta (z80_ix),y
002C0A  3               
002C0A  3  18           	clc
002C0B  3  A5 68        	lda z80_x
002C0D  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
002C0F  3  85 68        	sta z80_x
002C11  3  A5 69        	lda z80_i
002C13  3  69 00        	adc #0
002C15  3  85 69        	sta z80_i 		; next sprite.
002C17  3  C6 rr        	dec sprcnt
002C19  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
002C1B  3  60           	rts
002C1C  3               dspr1:
002C1C  3  A0 05        	ldy #5
002C1E  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
002C20  3  C9 FF        	cmp #255		; is this enabled?
002C22  3  D0 06        	bne dspr4 		; yes, display both.
002C24  3               dspr6:
002C24  3  20 F4 2C     	jsr sspria 		; show single sprite.
002C27  3  4C E2 2B     	jmp dspr2
002C2A  3               
002C2A  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
002C2A  3               
002C2A  3               dspr4:
002C2A  3  A0 04        	ldy #4
002C2C  3  B1 68        	lda (z80_ix),y		; old x.
002C2E  3  A0 09        	ldy #9
002C30  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
002C32  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
002C34  3               
002C34  3  A0 03        	ldy #3
002C36  3  B1 68        	lda (z80_ix),y		; old y.
002C38  3  A0 08        	ldy #8
002C3A  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002C3C  3  D0 15        	bne dspr7		; they differ, need to redraw.
002C3E  3               
002C3E  3  A0 02        	ldy #2
002C40  3  B1 68        	lda (z80_ix),y 		; old frame.
002C42  3  A0 07        	ldy #7
002C44  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002C46  3  4C 53 2C     	jmp dspr7 		; they differ, need to redraw.
002C49  3               
002C49  3  A0 01        	ldy #1
002C4B  3  B1 68        	lda (z80_ix),y 		; old image.
002C4D  3  A0 06        	ldy #6
002C4F  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002C51  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
002C53  3               dspr7:
002C53  3  20 21 2D     	jsr sspric 		; delete old sprite, draw new one simultaneously.
002C56  3  4C E2 2B     	jmp dspr2
002C59  3               dspr3:
002C59  3  20 1B 2D     	jsr ssprib 		; show single sprite.
002C5C  3  4C E2 2B     	jmp dspr2
002C5F  3               
002C5F  3               ;sprcnt:	.byte 0
002C5F  3               
002C5F  3               ;-----------------------------------------
002C5F  3               ; Get sprite address calculations.
002C5F  3               ; gspran = new sprite, gsprad = old sprite.
002C5F  3               ;
002C5F  3               ; Input:
002C5F  3               ;  IX = sprite address
002C5F  3               ;-----------------------------------------
002C5F  3               
002C5F  3               gspran:
002C5F  3  A0 08        	ldy #8
002C61  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
002C63  3  85 rr        	sta dispy
002C65  3  A0 09        	ldy #9
002C67  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
002C69  3  85 rr        	sta dispx
002C6B  3  A0 06        	ldy #6
002C6D  3  B1 68        	lda (z80_ix),y 		; new sprite image.
002C6F  3  20 4D 30     	jsr gfrm		; fetch start frame for this sprite.
002C72  3               
002C72  3  A0 00        	ldy #0
002C74  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002C76  3  A0 07        	ldy #7
002C78  3  18           	clc
002C79  3  71 68        	adc (z80_ix),y 		; new add frame number.
002C7B  3  4C 9A 2C     	jmp gspra0
002C7E  3               
002C7E  3               ;-----------------------------------------
002C7E  3               ; Calculate old sprite address
002C7E  3               ;
002C7E  3               ; Input:
002C7E  3               ;  IX = sprite address
002C7E  3               ;
002C7E  3               ; Output:
002C7E  3               ;  B  = right byte mask
002C7E  3               ;  C  = left byte mask
002C7E  3               ;  DE = spriteframe address
002C7E  3               ;  scraddr = screenaddress(dispx,dispy)
002C7E  3               ;-----------------------------------------
002C7E  3               
002C7E  3               gsprad:
002C7E  3  A0 03        	ldy #3
002C80  3  B1 68        	lda (z80_ix),y		; y coordinate.
002C82  3  85 rr        	sta dispy
002C84  3  A0 04        	ldy #4
002C86  3  B1 68        	lda (z80_ix),y		; x coordinate.
002C88  3  85 rr        	sta dispx
002C8A  3  A0 01        	ldy #1
002C8C  3  B1 68        	lda (z80_ix),y 		; sprite image.
002C8E  3  20 4D 30     	jsr gfrm 		; fetch start frame for this sprite.
002C91  3               
002C91  3  A0 00        	ldy #0
002C93  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002C95  3  A0 02        	ldy #2
002C97  3  18           	clc
002C98  3  71 68        	adc (z80_ix),y 		; add frame number.
002C9A  3               gspra0:
002C9A  3  4A           	lsr a	  		; multiply by 128.
002C9B  3  85 65        	sta z80_d 		; store in d.
002C9D  3  8D F2 2C     	sta tmp1
002CA0  3  A9 00        	lda #0
002CA2  3  6A           	ror a
002CA3  3  85 64        	sta z80_e 		; got low byte.
002CA5  3  8D F3 2C     	sta tmp2
002CA8  3               .if bflag
002CA8  3               	lsr tmp1
002CA8  3               	ror tmp2
002CA8  3               	clc
002CA8  3               	lda tmp2
002CA8  3               	adc z80_e
002CA8  3               	sta z80_e
002CA8  3               	lda tmp1
002CA8  3               	adc z80_d
002CA8  3               	sta z80_d
002CA8  3               .endif
002CA8  3  18           	clc 			; address of play sprites.
002CA9  3  A5 64        	lda z80_e
002CAB  3  69 AF        	adc #<sprgfx
002CAD  3  85 64        	sta z80_e
002CAF  3  A5 65        	lda z80_d
002CB1  3  69 34        	adc #>sprgfx
002CB3  3  85 65        	sta z80_d
002CB5  3               
002CB5  3  A5 rr        	lda dispx 		; y coordinate.
002CB7  3  29 06        	and #6 			; position within byte boundary.
002CB9  3  AA           	tax	 		; low byte of table displacement.
002CBA  3               
002CBA  3  0A           	asl a	  		; multiply by 32.
002CBB  3  0A           	asl a  			; already a multiple
002CBC  3  0A           	asl a  			; of 2, so just 4
002CBD  3               .if bflag
002CBD  3               	sta tmp1
002CBD  3               	asl a  			; shifts needed.
002CBD  3               	clc
002CBD  3               	adc tmp1
002CBD  3               .else
002CBD  3  0A           	asl a  			; shifts needed.
002CBE  3               .endif
002CBE  3  18           	clc 			; add to sprite address.
002CBF  3  65 64        	adc z80_e
002CC1  3  85 64        	sta z80_e
002CC3  3  90 02        	bcc :+
002CC5  3  E6 65        	inc z80_d
002CC7  3               :
002CC7  3  BD EA 2C     	lda spmask,x		 ; pointer to mask table.
002CCA  3  85 62        	sta z80_c 		; left mask.
002CCC  3  BD EB 2C     	lda spmask+1,x
002CCF  3  85 63        	sta z80_b 		; right mask.
002CD1  3               
002CD1  3               ;------------------------------------------------------------------
002CD1  3               ; Drop into screen address routine.
002CD1  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
002CD1  3               ;------------------------------------------------------------------
002CD1  3               
002CD1  3               scadd:
002CD1  3  A6 rr        	ldx dispy
002CD3  3  E0 C0        	cpx #192
002CD5  3  90 02        	bcc :+
002CD7  3  A2 C0        	ldx #192
002CD9  3               :
002CD9  3  A5 rr        	lda dispx
002CDB  3  4A           	lsr a
002CDC  3  4A           	lsr a
002CDD  3  4A           	lsr a
002CDE  3  18           	clc
002CDF  3  7D 00 E0     	adc SCADTB_lb,x
002CE2  3  85 rr        	sta scraddr
002CE4  3  BD 00 E1     	lda SCADTB_hb,x
002CE7  3  85 rr        	sta scraddr+1
002CE9  3  60           	rts
002CEA  3               
002CEA  3  FF 00        spmask:	.byte $ff,$00
002CEC  3  3F C0        	.byte $3f,$c0
002CEE  3  0F F0        	.byte $0f,$f0
002CF0  3  03 FC        	.byte $03,$fc
002CF2  3               
002CF2  3  00           tmp1:	.byte 0
002CF3  3  00           tmp2:	.byte 0
002CF4  3               
002CF4  3               ;-----------------------------------------------------------------
002CF4  3               ; These are the sprite routines.
002CF4  3               ; sspria = single sprite, old (ix).
002CF4  3               ; ssprib = single sprite, new (ix+5).
002CF4  3               ; sspric = both sprites, old (ix) and new (ix+5).
002CF4  3               ;-----------------------------------------------------------------
002CF4  3               
002CF4  3               sspria:
002CF4  3  20 7E 2C     	jsr gsprad		; get old sprite address.
002CF7  3               sspri2:
002CF7  3  A5 64        	lda z80_e
002CF9  3  8D 69 2D     	sta dline1+1		; Set spritedata address
002CFC  3  8D 78 2D     	sta dline2+1
002CFF  3  A5 65        	lda z80_d
002D01  3  8D 6A 2D     	sta dline1+2
002D04  3  8D 79 2D     	sta dline2+2
002D07  3  86 rr        	stx xtmp
002D09  3  A2 00        	ldx #0			; vertical lines.
002D0B  3               sspri0:
002D0B  3  20 65 2D     	jsr dline		; draw a line.
002D0E  3  E0 10        	cpx #16			; detect block boundery
002D10  3  D0 02        	bne :+			; skip if not
002D12  3  E6 rr        	inc scraddr+1		; jump to next blockline
002D14  3               :
002D14  3  E0 20        	cpx #32			; check finished
002D16  3               .if bflag
002D16  3               	bne :+			; skip if not
002D16  3               	inc scraddr+1		; jump to next blockline
002D16  3               	inc z80_hlp+1		; jump to next blockline
002D16  3               :
002D16  3               	cpx #48			; check finished
002D16  3               .endif
002D16  3  D0 F3        	bne sspri0		; no, repeat
002D18  3  A6 rr        	ldx xtmp
002D1A  3  60           	rts
002D1B  3               
002D1B  3               ;-----------------------------------------------------------------
002D1B  3               
002D1B  3               ssprib:
002D1B  3  20 5F 2C     	jsr gspran 		; get new sprite address.
002D1E  3  4C F7 2C     	jmp sspri2
002D21  3               
002D21  3               ;-----------------------------------------------------------------
002D21  3               
002D21  3               sspric:
002D21  3  20 7E 2C     	jsr gsprad 		; get old sprite address.
002D24  3  A5 64        	lda z80_e
002D26  3  8D 8D 2D     	sta ddline1+1		; Set spritedata address
002D29  3  8D 9C 2D     	sta ddline2+1
002D2C  3  A5 65        	lda z80_d
002D2E  3  8D 8E 2D     	sta ddline1+2
002D31  3  8D 9D 2D     	sta ddline2+2
002D34  3  20 CA 3A     	jsr exx  		; store addresses.
002D37  3               
002D37  3  20 5F 2C     	jsr gspran 		; get new sprite addresses.
002D3A  3  A5 64        	lda z80_e
002D3C  3  8D 69 2D     	sta dline1+1		; Set spritedata address
002D3F  3  8D 78 2D     	sta dline2+1
002D42  3  A5 65        	lda z80_d
002D44  3  8D 6A 2D     	sta dline1+2
002D47  3  8D 79 2D     	sta dline2+2
002D4A  3               
002D4A  3  86 rr        	stx xtmp
002D4C  3  A2 00        	ldx #0			; vertical lines.
002D4E  3               lloop:
002D4E  3  20 65 2D     	jsr dline 		; draw a line.
002D51  3  CA           	dex
002D52  3  CA           	dex
002D53  3  20 89 2D     	jsr ddline 		; delete a line.
002D56  3  E0 10        	cpx #16			; detect block boundery
002D58  3  D0 04        	bne :+			; skip if not
002D5A  3  E6 rr        	inc scraddr+1		; jump to next blockline
002D5C  3  E6 73        	inc z80_hlp+1		; jump to next blockline
002D5E  3               :
002D5E  3  E0 20        	cpx #32			; check finished
002D60  3               .if bflag
002D60  3               	bne :+			; skip if not
002D60  3               	inc scraddr+1		; jump to next blockline
002D60  3               	inc z80_hlp+1		; jump to next blockline
002D60  3               :
002D60  3               	cpx #48			; check finished
002D60  3               .endif
002D60  3  D0 EC        	bne lloop		; no, repeat
002D62  3  A6 rr        	ldx xtmp
002D64  3  60           	rts
002D65  3               
002D65  3               
002D65  3               ;-----------------------------------------------------------------
002D65  3               
002D65  3               dline:
002D65  3  BC AD 2D     	ldy sprline,x		; point to screenleft
002D68  3               dline1:
002D68  3  BD 44 35     	lda objdta,x		; fetch spriteleft byte
002D6B  3  85 61        	sta z80_a		; save spriteright byte
002D6D  3  A5 61        	lda z80_a
002D6F  3  25 62        	and z80_c		; mask left
002D71  3  51 rr        	eor (scraddr),y		; merge with screenleft
002D73  3  91 rr        	sta (scraddr),y		; write screenleft
002D75  3               sline:
002D75  3  E8           	inx			; next spritebyte
002D76  3  C8           	iny			; point to screenmiddle
002D77  3               dline2:
002D77  3  BD 44 35     	lda objdta,x		; fetch spritemiddle byte
002D7A  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
002D7C  3  91 rr        	sta (scraddr),y		; write screenmiddle
002D7E  3               sline2:
002D7E  3  C8           	iny			; point to screenright
002D7F  3  A5 61        	lda z80_a		; fetch spriteright byte
002D81  3  25 63        	and z80_b		; mask right
002D83  3  51 rr        	eor (scraddr),y		; merge with screenright
002D85  3  91 rr        	sta (scraddr),y		; write screenright
002D87  3               sline3:
002D87  3  E8           	inx			; next spritebyte
002D88  3               
002D88  3  60           	rts
002D89  3               
002D89  3               ;-----------------------------------------------------------------
002D89  3               
002D89  3               ddline:
002D89  3  BC AD 2D     	ldy sprline,x		; point to screenleft
002D8C  3               ddline1:
002D8C  3  BD 44 35     	lda objdta,x		; fetch spriteleft byte
002D8F  3  85 61        	sta z80_a		; save spriteright byte
002D91  3  A5 61        	lda z80_a
002D93  3  25 6E        	and z80_cp		; mask left
002D95  3  51 72        	eor (z80_hlp),y		; merge with screenleft
002D97  3  91 72        	sta (z80_hlp),y		; write screenleft
002D99  3               dsline:
002D99  3  E8           	inx			; next spritebyte
002D9A  3  C8           	iny			; point to screenmiddle
002D9B  3               ddline2:
002D9B  3  BD 44 35     	lda objdta,x		; fetch spritemiddle byte
002D9E  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
002DA0  3  91 72        	sta (z80_hlp),y		; write screenmiddle
002DA2  3               dsline2:
002DA2  3  C8           	iny			; point to screenright
002DA3  3  A5 61        	lda z80_a		; fetch spriteright byte
002DA5  3  25 6F        	and z80_bp		; mask right
002DA7  3  51 72        	eor (z80_hlp),y		; merge with screenright
002DA9  3  91 72        	sta (z80_hlp),y		; write screenright
002DAB  3               dsline3:
002DAB  3  E8           	inx			; next spritebyte
002DAC  3               
002DAC  3  60           	rts
002DAD  3               
002DAD  3               sprline:
002DAD  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002DB1  3  40 41 60 61  
002DB5  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002DB9  3  C0 C1 E0 E1  
002DBD  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002DC1  3  40 41 60 61  
002DC5  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002DC9  3  C0 C1 E0 E1  
002DCD  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002DD1  3  40 41 60 61  
002DD5  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002DD9  3  C0 C1 E0 E1  
002DDD  3               .if bflag
002DDD  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002DDD  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002DDD  3               .endif
002DDD  3               
002DDD  3               ;----------------------------------------------------------------------
002DDD  3               ; Line drawn, now work out next target address.
002DDD  3               ;----------------------------------------------------------------------
002DDD  3               
002DDD  3               nline:
002DDD  3  18           	clc
002DDE  3  A5 rr        	lda scraddr 		; get low byte of address.
002DE0  3  69 20        	adc #$20
002DE2  3  85 rr        	sta scraddr 		; new low byte of address.
002DE4  3  90 02        	bcc :+
002DE6  3  E6 rr        	inc scraddr+1 		; new high byte of address.
002DE8  3               :
002DE8  3  60           	rts
002DE9  3               
002DE9  3               ;-------------------------------------------------------------
002DE9  3               ; Line drawn, now work out next target address.
002DE9  3               ;
002DE9  3               ; Input:
002DE9  3               ;  BP  = right mask
002DE9  3               ;  CP  = left mask
002DE9  3               ;  DEP = spriteaddress
002DE9  3               ;  z80_hlp = screen address
002DE9  3               ;-------------------------------------------------------------
002DE9  3               
002DE9  3               
002DE9  3               ;-----------------------------------------------------------
002DE9  3               ; Animates a sprite.
002DE9  3               ;
002DE9  3               ; Input:
002DE9  3               ;  IX = sprite address
002DE9  3               ;  HL = last sprite address
002DE9  3               ;-----------------------------------------------------------
002DE9  3               
002DE9  3               animsp:
002DE9  3  25 rr        	and frmno
002DEB  3  F0 01        	beq :+
002DED  3  60           	rts
002DEE  3               :
002DEE  3  A0 06        	ldy #6
002DF0  3  B1 68        	lda (z80_ix),y		; sprite image
002DF2  3  20 4D 30     	jsr gfrm		; get frame data.
002DF5  3               
002DF5  3  E6 66        	inc z80_l		; point to frames.
002DF7  3  D0 02        	bne :+
002DF9  3  E6 67        	inc z80_h
002DFB  3               :
002DFB  3  A0 07        	ldy #7
002DFD  3  B1 68        	lda (z80_ix),y		; sprite frame.
002DFF  3  18           	clc
002E00  3  69 01        	adc #1			; next one along.
002E02  3  A0 00        	ldy #0
002E04  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
002E06  3  90 02        	bcc anims0		; no, not yet.
002E08  3  A9 00        	lda #0			; start at first frame.
002E0A  3               anims0:
002E0A  3  A0 07        	ldy #7
002E0C  3  91 68        	sta (z80_ix),y		; new frame.
002E0E  3  60           	rts
002E0F  3               
002E0F  3               ;--------------------------------------------------------------
002E0F  3               ; Animate back
002E0F  3               ;
002E0F  3               ; Input:
002E0F  3               ;  IX = sprite address
002E0F  3               ;  HL = last sprite address
002E0F  3               ;--------------------------------------------------------------
002E0F  3               
002E0F  3               animbk:
002E0F  3  25 rr        	and frmno
002E11  3  F0 01        	beq :+
002E13  3  60           	rts
002E14  3               :
002E14  3  A0 06        	ldy #6
002E16  3  B1 68        	lda (z80_ix),y		; sprite image.
002E18  3  20 4D 30     	jsr gfrm		; get frame data.
002E1B  3               
002E1B  3  E6 66        	inc z80_l 		; point to frames.
002E1D  3  D0 02        	bne :+
002E1F  3  E6 67        	inc z80_h
002E21  3               :
002E21  3  A0 07        	ldy #7
002E23  3  B1 68        	lda (z80_ix),y 		; sprite frame.
002E25  3  F0 03        	beq :+
002E27  3  4C 2E 2E     	jmp rtanb0 		; yes, start at end.
002E2A  3               :
002E2A  3  A0 00        	ldy #0
002E2C  3  B1 66        	lda (z80_hl),y 		; last sprite.
002E2E  3               rtanb0:
002E2E  3  38           	sec
002E2F  3  E9 01        	sbc #1			; next one along.
002E31  3  4C 0A 2E     	jmp anims0		; set new frame.
002E34  3               
002E34  3               ;--------------------------------------------------------------
002E34  3               ; Check for collision with other sprite, strict enforcement.
002E34  3               ;
002E34  3               ; Input:
002E34  3               ;  b		= sprite to test for
002E34  3               ;  ix		= current sprite pointer
002E34  3               ;
002E34  3               ; global:	b
002E34  3               ; local:	x,y,hl,de,skptr
002E34  3               ; calls:	-
002E34  3               ;--------------------------------------------------------------
002E34  3               
002E34  3               sktyp:
002E34  3  A9 27        	lda #<sprtab				; sprite table.
002E36  3  85 66        	sta z80_l
002E38  3  A9 33        	lda #>sprtab
002E3A  3  85 67        	sta z80_h
002E3C  3               numsp2:
002E3C  3  A9 0C        	lda #NUMSPR				; number of sprites.
002E3E  3  85 rr        	sta sktptr
002E40  3               sktyp0:
002E40  3  A5 66        	lda z80_l 				; store pointer to sprite.
002E42  3  85 rr        	sta skptr
002E44  3  A5 67        	lda z80_h
002E46  3  85 rr        	sta skptr+1
002E48  3               
002E48  3  A0 00        	ldy #0
002E4A  3  B1 66        	lda (z80_hl),y 				; get sprite type.
002E4C  3  C5 63        	cmp z80_b				; is it the type we seek?
002E4E  3  F0 1D        	beq coltyp				; yes, we can use this one.
002E50  3               sktyp1:
002E50  3  18           	clc
002E51  3  A5 rr        	lda skptr				; retrieve sprite pointer.
002E53  3  69 11        	adc #TABSIZ				; size of each entry.
002E55  3  85 66        	sta z80_l
002E57  3  A5 rr        	lda skptr+1
002E59  3  69 00        	adc #0
002E5B  3  85 67        	sta z80_h
002E5D  3  C6 rr        	dec sktptr					; one less iteration.
002E5F  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
002E61  3  A9 00        	lda #0					; default to ROM address - no sprite.
002E63  3  85 66        	sta z80_l
002E65  3  85 67        	sta z80_h
002E67  3  85 rr        	sta skptr				; store pointer to sprite.
002E69  3  85 rr        	sta skptr+1
002E6B  3               
002E6B  3  18           	clc					; don't return with zero flag set.
002E6C  3  60           	rts 					; didn't find one.
002E6D  3               
002E6D  3               ;skptr:	.word 0					; search pointer.
002E6D  3               ;sktptr:	.byte 0
002E6D  3               
002E6D  3               coltyp:
002E6D  3  A0 00        	ldy #0
002E6F  3  B1 68        	lda (z80_ix),y				; current sprite type.
002E71  3  C5 63        	cmp z80_b				; seeking sprite of same type?
002E73  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
002E75  3               colty0:
002E75  3  A0 09        	ldy #9					; distance to x position in table.
002E77  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
002E79  3  85 64        	sta z80_e
002E7B  3  88           	dey
002E7C  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
002E7E  3  85 65        	sta z80_d
002E80  3               
002E80  3               ; Drop into collision detection.
002E80  3               
002E80  3               colc16:
002E80  3  A0 09        	ldy #9
002E82  3  B1 68        	lda (z80_ix),y			 	; x coord.
002E84  3  38           	sec					; subtract x.
002E85  3  E5 64        	sbc z80_e
002E87  3  B0 05        	bcs  colc1a 				; result is positive.
002E89  3  49 FF        	eor #$ff				; make negative positive.
002E8B  3  18           	clc
002E8C  3  69 01        	adc #1
002E8E  3               colc1a:
002E8E  3  C9 10        	cmp #16 				; within x range?
002E90  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
002E92  3  85 62        	sta z80_c				; store difference.
002E94  3               
002E94  3  A0 08        	ldy #8
002E96  3  B1 68        	lda (z80_ix),y				; y coord.
002E98  3  38           	sec
002E99  3  E5 65        	sbc z80_d				; subtract y.
002E9B  3  B0 05        	bcs colc1b				; result is positive.
002E9D  3  49 FF        	eor #$ff				; make negative positive.
002E9F  3  18           	clc
002EA0  3  69 01        	adc #1
002EA2  3               colc1b:
002EA2  3  C9 10        	cmp #16					; within y range?
002EA4  3  B0 AA        	bcs sktyp1 				; no - they've missed.
002EA6  3  18           	clc					; add x difference.
002EA7  3  65 62        	adc z80_c
002EA9  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
002EAB  3  B0 02        	bcs :+
002EAD  3  38           	sec
002EAE  3  60           	rts 					; carry set if there's a collision.
002EAF  3               :
002EAF  3  4C 50 2E     	jmp sktyp1				; try next sprite in table.
002EB2  3               colty1:
002EB2  3  A5 68        	lda z80_x  				; compare the two.
002EB4  3  C5 66        	cmp z80_l
002EB6  3  D0 09        	bne end_col
002EB8  3  A5 69        	lda z80_i
002EBA  3  C5 67        	cmp z80_h
002EBC  3  D0 03        	bne end_col
002EBE  3  4C 50 2E     	jmp sktyp1 				; addresses are identical.
002EC1  3               end_col:
002EC1  3  4C 75 2E     	jmp colty0
002EC4  3               
002EC4  3               ;-----------------------------------------------------------
002EC4  3               ; Display number, left aligned
002EC4  3               ;
002EC4  3               ; Input:
002EC4  3               ;  a		= number
002EC4  3               ;
002EC4  3               ; global:	-
002EC4  3               ; local:	a,y,bc,hl,displ0
002EC4  3               ; calls:	num2ch,dmsg3
002EC4  3               ;-----------------------------------------------------------
002EC4  3               
002EC4  3               disply:
002EC4  3  85 61        	sta z80_a
002EC6  3  A9 EC        	lda #<displ0				; display workspace.
002EC8  3  85 62        	sta z80_c
002ECA  3  A9 2E        	lda #>displ0
002ECC  3  85 63        	sta z80_b
002ECE  3  A5 61        	lda z80_a
002ED0  3  20 29 22     	jsr num2ch				; convert accumulator to string.
002ED3  3               displ1:
002ED3  3  C6 62        	dec z80_c				; back one character.
002ED5  3  D0 02        	bne :+
002ED7  3  C6 63        	dec z80_b
002ED9  3               :
002ED9  3  A0 00        	ldy #0
002EDB  3  B1 62        	lda (z80_bc),y				; fetch digit.
002EDD  3  09 80        	ora #128				; insert end marker.
002EDF  3  91 62        	sta (z80_bc),y				; new value.
002EE1  3               
002EE1  3  A9 EC        	lda #<displ0				; display space.
002EE3  3  85 66        	sta z80_l
002EE5  3  A9 2E        	lda #>displ0
002EE7  3  85 67        	sta z80_h
002EE9  3  4C 9A 29     	jmp dmsg3				; display the string.
002EEC  3               
002EEC  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
002EF0  3               
002EF0  3               ;----------------------------------------------------------------
002EF0  3               ; Initialise screen.
002EF0  3               ;
002EF0  3               ; global:	roomtb,scno
002EF0  3               ; local:	-
002EF0  3               ; calls:	tstcs
002EF0  3               ;----------------------------------------------------------------
002EF0  3               
002EF0  3               initsc:
002EF0  3  AD 04 34     	lda roomtb 			; whereabouts in the map are we?
002EF3  3  20 FD 2E     	jsr tstsc 			; find displacement.
002EF6  3  C9 FF        	cmp #255 			; is it valid?
002EF8  3  F0 02        	beq init_end 			; no, it's rubbish.
002EFA  3  85 rr        	sta scno			; store new room number.
002EFC  3               init_end:
002EFC  3  60           	rts
002EFD  3               
002EFD  3               ;----------------------------------------------------------------
002EFD  3               ; Test screen.
002EFD  3               ;
002EFD  3               ; global:	-
002EFD  3               ; local:	x
002EFD  3               ; calls:	-
002EFD  3               ;----------------------------------------------------------------
002EFD  3               
002EFD  3               tstsc:
002EFD  3  85 rr        	sta tmproom
002EFF  3  18           	clc
002F00  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
002F02  3  AA           	tax 				; add displacement to map data.
002F03  3  BD 07 34     	lda mapdat-MAPWID,x 		; find room number there.
002F06  3  60           	rts
002F07  3               
002F07  3               ;tmproom:	.byte 0
002F07  3               
002F07  3               ;--------------------------
002F07  3               ; Screen left.
002F07  3               ;--------------------------
002F07  3               
002F07  3               scrl:
002F07  3  AD 04 34     	lda roomtb 			; present room table pointer.
002F0A  3  38           	sec
002F0B  3  E9 01        	sbc #1				; room left.
002F0D  3               scrl0:
002F0D  3  20 FD 2E     	jsr tstsc			; test screen.
002F10  3  C9 FF        	cmp #255			; is there a screen this way?
002F12  3  D0 01        	bne :+
002F14  3  60           	rts				; no, return to loop.
002F15  3               :
002F15  3  A5 rr        	lda tmproom			; restore room displacement.
002F17  3  8D 04 34     	sta roomtb			; new room table position.
002F1A  3               scrl1:
002F1A  3  20 F0 2E     	jsr initsc 			; set new screen.
002F1D  3  A9 02        	lda #2
002F1F  3  85 rr        	sta restfl 			; set it.
002F21  3  60           	rts
002F22  3               scrr:
002F22  3  AD 04 34     	lda roomtb 			; room table pointer.
002F25  3  18           	clc
002F26  3  69 01        	adc #1				; room right.
002F28  3  4C 0D 2F     	jmp scrl0
002F2B  3               scru:
002F2B  3  AD 04 34     	lda roomtb 			; room table pointer.
002F2E  3  38           	sec
002F2F  3  E9 03        	sbc #MAPWID 			; room up.
002F31  3  4C 0D 2F     	jmp scrl0
002F34  3               scrd:
002F34  3  AD 04 34     	lda roomtb 			; room table pointer.
002F37  3  18           	clc
002F38  3  69 03        	adc #MAPWID 			; room down.
002F3A  3  4C 0D 2F     	jmp scrl0
002F3D  3               
002F3D  3               ;-----------------------------------------
002F3D  3               ; Jump to new screen.
002F3D  3               ;-----------------------------------------
002F3D  3               
002F3D  3               nwscr:
002F3D  3  A2 00        	ldx #0				; start of map data.
002F3F  3               nwscr0:
002F3F  3  DD 0A 34     	cmp mapdat,x
002F42  3  F0 06        	beq nwscr1			; have we found a match for screen?
002F44  3  E8           	inx 				; next room.
002F45  3  E0 50        	cpx #80				; zero room count, 80 to search.
002F47  3  D0 F6        	bne nwscr0			; keep looking.
002F49  3  60           	rts
002F4A  3               nwscr1:
002F4A  3  8E 04 34     	stx roomtb			; set the map position.
002F4D  3  4C 1A 2F     	jmp scrl1			; draw new room.
002F50  3               
002F50  3               
002F50  3               ;----------------------------------------------------------
002F50  3               ; Gravity processing.
002F50  3               ;----------------------------------------------------------
002F50  3               
002F50  3               grav:
002F50  3  A0 0D        	ldy #13
002F52  3  B1 68        	lda (z80_ix),y			; jump pointer low.
002F54  3  85 66        	sta z80_l
002F56  3  A0 0E        	ldy #14
002F58  3  B1 68        	lda (z80_ix),y			; jump pointer high.
002F5A  3  85 67        	sta z80_h
002F5C  3  05 66        	ora z80_l			; merge in low byte.
002F5E  3  D0 01        	bne :+
002F60  3  60           	rts				; if neither is set, we're not in the air.
002F61  3               :
002F61  3  A0 00        	ldy #0
002F63  3  B1 66        	lda (z80_hl),y			; pixels to move.
002F65  3  85 61        	sta z80_a
002F67  3  C9 63        	cmp #99				; reached the end?
002F69  3  D0 0C        	bne grav0			; no, continue.
002F6B  3               grav2:
002F6B  3  C6 66        	dec z80_l			; go back to previous value.
002F6D  3  C9 FF        	cmp #$ff
002F6F  3  D0 02        	bne :+
002F71  3  C6 67        	dec z80_h
002F73  3               :
002F73  3  B1 66        	lda (z80_hl),y			; fetch that from table.
002F75  3  85 61        	sta z80_a
002F77  3               grav0:
002F77  3  E6 66        	inc z80_l			; point to next table entry.
002F79  3  D0 02        	bne :+
002F7B  3  E6 67        	inc z80_h
002F7D  3               :
002F7D  3  A5 66        	lda z80_l
002F7F  3  A0 0D        	ldy #13
002F81  3  91 68        	sta (z80_ix),y			; store new pointer low.
002F83  3  A5 67        	lda z80_h
002F85  3  A0 0E        	ldy #14
002F87  3  91 68        	sta (z80_ix),y			; store new pointer high.
002F89  3               grav1:
002F89  3  A5 61        	lda z80_a
002F8B  3  D0 01        	bne :+				; any movement required?
002F8D  3  60           	rts				; no, not this time.
002F8E  3               :
002F8E  3  A5 61        	lda z80_a
002F90  3  C9 80        	cmp #128			; is it up or down?
002F92  3  B0 15        	bcs gravu			; it's up.
002F94  3               gravd:
002F94  3  85 63        	sta z80_b			; set pixels to move.
002F96  3               gravd0:
002F96  3  20 79 26     	jsr cangd			; can we go down?
002F99  3  D0 28        	bne gravst			; can't move down, so stop.
002F9B  3  A0 08        	ldy #8
002F9D  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
002F9F  3  18           	clc
002FA0  3  69 01        	adc #1
002FA2  3  91 68        	sta (z80_ix),y
002FA4  3  C6 63        	dec z80_b
002FA6  3  D0 EE        	bne gravd0
002FA8  3  60           	rts
002FA9  3               gravu:
002FA9  3  49 FF        	eor #$ff			; flip the sign so it's positive.
002FAB  3  18           	clc
002FAC  3  69 01        	adc #1
002FAE  3  85 63        	sta z80_b			; set pixels to move.
002FB0  3               gravu0:
002FB0  3  20 44 26     	jsr cangu			; can we go up?
002FB3  3  D0 6E        	bne ifalls			; can't move up, go down next.
002FB5  3  A0 08        	ldy #8
002FB7  3  B1 68        	lda (z80_ix),y
002FB9  3  38           	sec
002FBA  3  E9 01        	sbc #1
002FBC  3  91 68        	sta (z80_ix),y			; adjust new x coord.
002FBE  3  C6 63        	dec z80_b
002FC0  3  D0 EE        	bne gravu0
002FC2  3  60           	rts
002FC3  3               gravst:
002FC3  3  A0 0D        	ldy #13
002FC5  3  B1 68        	lda (z80_ix),y			; jump pointer low.
002FC7  3  85 66        	sta z80_l
002FC9  3  A0 0E        	ldy #14
002FCB  3  B1 68        	lda (z80_ix),y			; jump pointer high.
002FCD  3  85 67        	sta z80_h
002FCF  3               
002FCF  3  A9 00        	lda #0				; null value in pointer.
002FD1  3  A0 0D        	ldy #13
002FD3  3  91 68        	sta (z80_ix),y			; store new pointer low.
002FD5  3  C8           	iny
002FD6  3  91 68        	sta (z80_ix),y			; store new pointer high.
002FD8  3               
002FD8  3  A0 00        	ldy #0
002FDA  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
002FDC  3  C9 63        	cmp #99				; is it the end marker?
002FDE  3               evftf:
002FDE  3  F0 01        	beq :+				; yes, fallen too far.
002FE0  3  60           	rts
002FE1  3               :
002FE1  3  4C 45 34     	jmp evnt15			; EVENT FELLTOOFAR
002FE4  3               
002FE4  3               ;------------------------------------------------
002FE4  3               ; Initiate fall check.
002FE4  3               ;------------------------------------------------
002FE4  3               
002FE4  3               ifall:
002FE4  3  A0 0D        	ldy #13
002FE6  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
002FE8  3  85 66        	sta z80_l
002FEA  3  A0 0E        	ldy #14
002FEC  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
002FEE  3  85 67        	sta z80_h			; high byte in accumulator.
002FF0  3  05 66        	ora z80_l			; merge in low byte.
002FF2  3  F0 01        	beq :+
002FF4  3  60           	rts				; if either is set, we're already in the air.
002FF5  3               :
002FF5  3  A0 09        	ldy #9
002FF7  3  B1 68        	lda (z80_ix),y			; y coordinate.
002FF9  3  85 rr        	sta dispx
002FFB  3  A0 08        	ldy #8
002FFD  3  B1 68        	lda (z80_ix),y			; look x coordinate.
002FFF  3  18           	clc
003000  3               numsp7:
003000  3  69 10        	adc #SPR_HGT			; add 16 pixels.
003002  3  85 rr        	sta dispy			; set up test coordinates.
003004  3  20 EE 28     	jsr tstbl			; get map address.
003007  3  20 1B 28     	jsr plchk			; block, platform check.
00300A  3  F0 01        	beq :+
00300C  3  60           	rts				; it's solid, don't fall.
00300D  3               :
00300D  3  E6 rr        	inc bufaddr			; look right one cell.
00300F  3  20 1B 28     	jsr plchk			; block, platform check.
003012  3  F0 01        	beq :+
003014  3  60           	rts				; it's solid, don't fall.
003015  3               :
003015  3  A5 rr        	lda dispx			; y coordinate.
003017  3  29 07        	and #7				; position straddling block cells.
003019  3  F0 08        	beq ifalls			; no more checks needed.
00301B  3  E6 rr        	inc bufaddr			; look to third cell.
00301D  3  20 1B 28     	jsr plchk			; block, platform check.
003020  3  F0 01        	beq :+
003022  3  60           	rts				; it's solid, don't fall.
003023  3               :
003023  3               ifalls:
003023  3  A9 6A        	lda #<jtab			; jump table start.
003025  3  85 66        	sta z80_l
003027  3  A9 38        	lda #>jtab
003029  3  85 67        	sta z80_h
00302B  3               ifal0:
00302B  3  E6 66        	inc z80_l			; point to next value.
00302D  3  D0 02        	bne :+
00302F  3  E6 67        	inc z80_h
003031  3               :
003031  3  A0 00        	ldy #0
003033  3  B1 66        	lda (z80_hl),y			; fetch value.
003035  3  F0 F4        	beq ifal0			; no, get next value.
003037  3  C9 63        	cmp #99				; reached end of table?
003039  3  D0 01        	bne :+
00303B  3  60           	rts				; yes, don't fall.
00303C  3               :
00303C  3  C9 80        	cmp #128			; is it going up?
00303E  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
003040  3               
003040  3  A0 0D        	ldy #13
003042  3  A5 66        	lda z80_l
003044  3  91 68        	sta (z80_ix),y 			; set jump low.
003046  3  A0 0E        	ldy #14
003048  3  A5 67        	lda z80_h
00304A  3  91 68        	sta (z80_ix),y 			; set jump high.
00304C  3  60           	rts
00304D  3               
00304D  3               
00304D  3               ;----------------------------------------------------
00304D  3               ; Get frame data for a particular sprite.
00304D  3               ; Input:
00304D  3               ;  a		= framenumer
00304D  3               ; Output:
00304D  3               ;  hl		= frame address
00304D  3               ;
00304D  3               ; global:	hl,frmptr
00304D  3               ; local:	-
00304D  3               ; calls:	-
00304D  3               ;----------------------------------------------------
00304D  3               
00304D  3               gfrm:
00304D  3  0A           	asl a	 		 	; multiple of 2.
00304E  3  18           	clc
00304F  3  6D 1A 20     	adc frmptr 			; frames used by game.
003052  3  85 66        	sta z80_l
003054  3  AD 1B 20     	lda frmptr+1
003057  3  69 00        	adc #0
003059  3  85 67        	sta z80_h 			; point to frame start.
00305B  3  60           	rts
00305C  3               
00305C  3               ;----------------------------------------------------
00305C  3               ; Find sprite list for current room.
00305C  3               ;
00305C  3               ; global:	hl
00305C  3               ; local:	x,y
00305C  3               ; calls:	-
00305C  3               ;----------------------------------------------------
00305C  3               
00305C  3               sprlst:
00305C  3  A9 3F        	lda #<nmedat 			; list of enemy sprites.
00305E  3  85 66        	sta z80_l
003060  3  A9 35        	lda #>nmedat
003062  3  85 67        	sta z80_h
003064  3  A6 rr        	ldx scno 			; screen number.
003066  3  D0 01        	bne sprls2 			; is it the first screen?
003068  3  60           	rts 				; yes, don't need to search data.
003069  3               sprls2:
003069  3  A0 00        	ldy #0
00306B  3               sprls1:
00306B  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
00306D  3  C9 FF        	cmp #255			; is it an end marker?
00306F  3  F0 0E        	beq sprls0 			; yes, end of this room.
003071  3               
003071  3  18           	clc 				; point to next sprite in list.
003072  3  A5 66        	lda z80_l
003074  3  69 04        	adc #NMESIZ
003076  3  85 66        	sta z80_l
003078  3  90 02        	bcc :+
00307A  3  E6 67        	inc z80_h
00307C  3               :
00307C  3  4C 6B 30     	jmp sprls1 			; continue until end of room.
00307F  3               sprls0:
00307F  3  E6 66        	inc z80_l 			; point to start of next screen.s
003081  3  D0 02        	bne :+
003083  3  E6 67        	inc z80_h
003085  3               :
003085  3  CA           	dex
003086  3  D0 E3        	bne sprls1 			; continue until room found.
003088  3  60           	rts
003089  3               
003089  3               
003089  3               ;----------------------------------------------------
003089  3               ; Clear all but a single player sprite.
003089  3               ;
003089  3               ; global:	-
003089  3               ; local:	x,y,ix
003089  3               ; calls:	-
003089  3               ;----------------------------------------------------
003089  3               
003089  3               nspr:
003089  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00308B  3  85 rr        	sta sprcnt
00308D  3  A9 27        	lda #<sprtab 			; sprite table.
00308F  3  85 68        	sta z80_x
003091  3  A9 33        	lda #>sprtab
003093  3  85 69        	sta z80_i
003095  3               nspr0:
003095  3  A0 00        	ldy #0 				; fetch sprite type.
003097  3  B1 68        	lda (z80_ix),y 			; is it a player?
003099  3  F0 1A        	beq nspr1 			; yes, keep this one.
00309B  3               
00309B  3  A9 FF        	lda #255
00309D  3  A0 00        	ldy #0 				; fetch sprite type.
00309F  3  91 68        	sta (z80_ix),y 			; delete sprite.
0030A1  3  A0 05        	ldy #5
0030A3  3  91 68        	sta (z80_ix),y 			; remove next type.
0030A5  3               
0030A5  3  18           	clc	 			; next sprite.
0030A6  3  A5 68        	lda z80_x
0030A8  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0030AA  3  85 68        	sta z80_x
0030AC  3  90 02        	bcc :+
0030AE  3  E6 69        	inc z80_i
0030B0  3               :
0030B0  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0030B2  3  D0 E1        	bne nspr0
0030B4  3  60           	rts
0030B5  3               nspr1:
0030B5  3  A9 FF        	lda #255
0030B7  3  A0 00        	ldy #0
0030B9  3  91 68        	sta (z80_ix),y 			; delete sprite.
0030BB  3               
0030BB  3  18           	clc	 			; point to next sprite.
0030BC  3  A5 68        	lda z80_x
0030BE  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0030C0  3  85 68        	sta z80_x
0030C2  3  90 02        	bcc :+
0030C4  3  E6 69        	inc z80_i
0030C6  3               :
0030C6  3  C6 rr        	dec sprcnt	 			; one less to do.
0030C8  3  D0 01        	bne nspr2
0030CA  3  60           	rts
0030CB  3               nspr2:
0030CB  3  A9 FF        	lda #255
0030CD  3  A0 00        	ldy #0
0030CF  3  91 68        	sta (z80_ix),y 			; delete sprite.
0030D1  3  A0 05        	ldy #5
0030D3  3  91 68        	sta (z80_ix),y 			; remove next type.
0030D5  3               
0030D5  3  18           	clc	 			; next sprite.
0030D6  3  A5 68        	lda z80_x
0030D8  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0030DA  3  85 68        	sta z80_x
0030DC  3  90 02        	bcc :+
0030DE  3  E6 69        	inc z80_i
0030E0  3               :
0030E0  3  C6 rr        	dec sprcnt	 			; one less space in table.
0030E2  3  D0 E7        	bne nspr2
0030E4  3  60           	rts
0030E5  3               
0030E5  3               ;----------------------------------------------------------
0030E5  3               ; Two initialisation routines.
0030E5  3               ; Initialise sprites - copy everything from list to table.
0030E5  3               ;
0030E5  3               ; global:	-
0030E5  3               ; local:	x,y,ix
0030E5  3               ; calls:	cpsp
0030E5  3               ;----------------------------------------------------------
0030E5  3               
0030E5  3               ispr:
0030E5  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0030E7  3  85 rr        	sta sprcnt
0030E9  3  A9 27        	lda #<sprtab			; sprite table.
0030EB  3  85 68        	sta z80_x
0030ED  3  A9 33        	lda #>sprtab
0030EF  3  85 69        	sta z80_i
0030F1  3               ispr2:
0030F1  3  A0 00        	ldy #0
0030F3  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0030F5  3  C9 FF        	cmp #255 			; is it an end marker?
0030F7  3  D0 01        	bne :+
0030F9  3  60           	rts 				; yes, no more to do.
0030FA  3               :
0030FA  3               ispr1:
0030FA  3  A0 00        	ldy #0
0030FC  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
0030FE  3  C9 FF        	cmp #255 			; is it enabled yet?
003100  3  D0 08        	bne ispr4			; yes, try another slot.
003102  3               
003102  3  A0 05        	ldy #5
003104  3  B1 68        	lda (z80_ix),y		 	; next type.
003106  3  C9 FF        	cmp #255 			; is it enabled yet?
003108  3  F0 10        	beq ispr3 			; no, process this one.
00310A  3               ispr4:
00310A  3  18           	clc 				; next sprite.
00310B  3  A5 68        	lda z80_x
00310D  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00310F  3  85 68        	sta z80_x
003111  3  90 02        	bcc :+
003113  3  E6 69        	inc z80_i
003115  3               :
003115  3  C6 rr        	dec sprcnt
003117  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
003119  3  60           	rts  				; no more room in table.
00311A  3               ispr3:
00311A  3  20 6D 31     	jsr cpsp			; initialise a sprite.
00311D  3  C6 rr        	dec sprcnt			; one less space in the table.
00311F  3  D0 D0        	bne ispr2
003121  3  60           	rts
003122  3               
003122  3               
003122  3               ;-----------------------------------------------------------------------
003122  3               ; Initialise sprites - but not player, we're keeping the old one.
003122  3               ;
003122  3               ; global:	-
003122  3               ; local:	x,y,ix
003122  3               ; calls:	cpsp
003122  3               ;-----------------------------------------------------------------------
003122  3               
003122  3               kspr:
003122  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
003124  3  A9 27        	lda #<sprtab 			; sprite table.
003126  3  85 68        	sta z80_x
003128  3  A9 33        	lda #>sprtab
00312A  3  85 69        	sta z80_i
00312C  3               kspr2:
00312C  3  A0 00        	ldy #0
00312E  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003130  3  C9 FF        	cmp #255 			; is it an end marker?
003132  3  D0 01        	bne :+
003134  3  60           	rts 				; yes, no more to do.
003135  3               :
003135  3  C9 00        	cmp #0
003137  3  D0 0E        	bne kspr1 			; no, add to table as normal.
003139  3               
003139  3  18           	clc 				; next sprite.
00313A  3  A5 66        	lda z80_l
00313C  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
00313E  3  85 66        	sta z80_l
003140  3  90 02        	bcc :+
003142  3  E6 67        	inc z80_h
003144  3               :
003144  3  4C 2C 31     	jmp kspr2
003147  3               kspr1:
003147  3  A0 00        	ldy #0 				; fetch sprite type.
003149  3  B1 68        	lda (z80_ix),y
00314B  3  C9 FF        	cmp #255 			; is it enabled yet?
00314D  3  D0 08        	bne kspr4 			; yes, try another slot.
00314F  3               
00314F  3  A0 05        	ldy #5 				; next type.
003151  3  B1 68        	lda (z80_ix),y
003153  3  C9 FF        	cmp #255 			; is it enabled yet?
003155  3  F0 0F        	beq kspr3 			; no, process this one.
003157  3               kspr4:
003157  3  18           	clc 				; next sprite.
003158  3  A5 68        	lda z80_x
00315A  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00315C  3  85 68        	sta z80_x
00315E  3  90 02        	bcc :+
003160  3  E6 69        	inc z80_i
003162  3               :
003162  3  CA           	dex	 			; repeat for remaining sprites.
003163  3  D0 E2        	bne kspr1
003165  3  60           	rts  				; no more room in table.
003166  3               kspr3:
003166  3  20 6D 31     	jsr cpsp 			; copy sprite to table.
003169  3  CA           	dex	 			; one less space in the table.
00316A  3  D0 C0        	bne kspr2
00316C  3  60           	rts
00316D  3               
00316D  3               ;----------------------------------------------
00316D  3               ; Copy sprite from list to table.
00316D  3               ;
00316D  3               ; global:	hl,ix
00316D  3               ; local:	y
00316D  3               ; calls:	evnt09
00316D  3               ;----------------------------------------------
00316D  3               
00316D  3               cpsp:
00316D  3  A0 00        	ldy #0				; fetch byte from table.
00316F  3  B1 66        	lda (z80_hl),y
003171  3  91 68        	sta (z80_ix),y			; set up type.
003173  3  A0 05        	ldy #PAM1ST
003175  3  91 68        	sta (z80_ix),y 			; set up type.
003177  3               
003177  3  E6 66        	inc z80_l 			; move to next byte.
003179  3  D0 02        	bne :+
00317B  3  E6 67        	inc z80_h
00317D  3               :
00317D  3  A0 00        	ldy #0 				; fetch byte from table.
00317F  3  B1 66        	lda (z80_hl),y
003181  3  A0 06        	ldy #6
003183  3  91 68        	sta (z80_ix),y			; set up image.
003185  3               
003185  3  E6 66        	inc z80_l 			; move to next byte.
003187  3  D0 02        	bne :+
003189  3  E6 67        	inc z80_h
00318B  3               :
00318B  3  A0 00        	ldy #0
00318D  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
00318F  3  A0 08        	ldy #8
003191  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003193  3               
003193  3  A9 C8        	lda #200 			; set initial coordinate off screen.
003195  3  A0 03        	ldy #3
003197  3  91 68        	sta (z80_ix),y
003199  3               
003199  3  E6 66        	inc z80_l 			; move to next byte.
00319B  3  D0 02        	bne :+
00319D  3  E6 67        	inc z80_h
00319F  3               :
00319F  3  A0 00        	ldy #0 				; fetch byte from table.
0031A1  3  B1 66        	lda (z80_hl),y
0031A3  3  A0 09        	ldy #9
0031A5  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0031A7  3               
0031A7  3  E6 66        	inc z80_l 			; move to next byte.
0031A9  3  D0 02        	bne :+
0031AB  3  E6 67        	inc z80_h
0031AD  3               :
0031AD  3  A9 00        	lda #0				; zeroes in accumulator.
0031AF  3  A0 07        	ldy #7 				; reset frame number.
0031B1  3  91 68        	sta (z80_ix),y
0031B3  3  A0 0A        	ldy #10 			; reset direction.
0031B5  3  91 68        	sta (z80_ix),y
0031B7  3  A0 0D        	ldy #13				; reset jump pointer low.
0031B9  3  91 68        	sta (z80_ix),y
0031BB  3  A0 0E        	ldy #14	 			; reset jump pointer high.
0031BD  3  91 68        	sta (z80_ix),y
0031BF  3               
0031BF  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
0031C1  3  A0 10        	ldy #16
0031C3  3  91 68        	sta (z80_ix),y
0031C5  3               evis0:
0031C5  3  A5 69        	lda z80_i
0031C7  3  48           	pha
0031C8  3  A5 68        	lda z80_x
0031CA  3  48           	pha
0031CB  3  A5 67        	lda z80_h
0031CD  3  48           	pha
0031CE  3  A5 66        	lda z80_l
0031D0  3  48           	pha
0031D1  3               
0031D1  3  20 1A 34     	jsr evnt09 			; perform event.
0031D4  3               
0031D4  3  68           	pla
0031D5  3  85 66        	sta z80_l
0031D7  3  68           	pla
0031D8  3  85 67        	sta z80_h
0031DA  3  68           	pla
0031DB  3  85 68        	sta z80_x
0031DD  3  68           	pla
0031DE  3  85 69        	sta z80_i
0031E0  3               
0031E0  3  18           	clc
0031E1  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0031E3  3  69 11        	adc #TABSIZ		 	; next sprite.
0031E5  3  85 68        	sta z80_x
0031E7  3  90 02        	bcc :+
0031E9  3  E6 69        	inc z80_i
0031EB  3               :
0031EB  3  60           	rts
0031EC  3               
0031EC  3               
0031EC  3               ;-------------------------------------
0031EC  3               ; Clear the play area window.
0031EC  3               ;-------------------------------------
0031EC  3               
0031EC  3               clw:
0031EC  3  AD 26 20     	lda wintop			; get coordinates of window.
0031EF  3  85 rr        	sta dispy			; put into dispx for calculation.
0031F1  3  AD 27 20     	lda winlft
0031F4  3  85 rr        	sta dispx
0031F6  3               
0031F6  3  AD 28 20     	lda winhgt			; height of window.
0031F9  3  85 rr        	sta rrow			; copy to b register.
0031FB  3               clw3:
0031FB  3  AD 29 20     	lda winwid 			; width of window.
0031FE  3  85 rr        	sta rcol
003200  3               clw2:
003200  3  20 C0 24     	jsr gprad 			; get print address.
003203  3  A9 00        	lda #0				; zero byte to write.
003205  3  A2 07        	ldx #7				; pixel height of each cell.
003207  3               clw1:
003207  3  BC 46 25     	ldy scrtab,x
00320A  3  91 rr        	sta (scraddr),y 			; copy to screen.
00320C  3  CA           	dex				; next screen row down.
00320D  3  10 F8        	bpl clw1
00320F  3               
00320F  3  E6 rr        	inc dispx			; next column.
003211  3  C6 rr        	dec rcol			; one less to do.
003213  3  D0 EB        	bne clw2			; repeat for remaining columns.
003215  3               
003215  3  AD 27 20     	lda winlft			; get left edge.
003218  3  85 rr        	sta dispx 			; reset x.
00321A  3  E6 rr        	inc dispy 			; next line down.
00321C  3               
00321C  3  C6 rr        	dec rrow
00321E  3  D0 DB        	bne clw3			; repeat down the screen.
003220  3               
003220  3  AD 26 20     	lda wintop			; get coordinates of window.
003223  3  85 rr        	sta chary			; put into display position.
003225  3  AD 27 20     	lda winlft
003228  3  85 rr        	sta charx
00322A  3  60           	rts
00322B  3               
00322B  3               
00322B  3               ;----------------------------------------------------------
00322B  3               ; Effects code.
00322B  3               ; Ticker routine is called 25 times per second.
00322B  3               ;
00322B  3               ; HL = txtscr = left text screen address
00322B  3               ; DE = txtscr+txtwid-1 = right text screen address
00322B  3               ; BC = txtpos = text scroller position
00322B  3               ;
00322B  3               ;----------------------------------------------------------
00322B  3               
00322B  3               .if sflag
00322B  3               scrly:
00322B  3  60           	rts
00322C  3  CD 20        	.word txtscr         	; get left screen address.
00322E  3  85 rr        	sta scr_l
003230  3  AD CE 20     	lda txtscr+1
003233  3  85 rr        	sta scr_l+1
003235  3  85 rr        	sta scr_r+1
003237  3               
003237  3  86 rr        	stx xtmp
003239  3               
003239  3  18           	clc         		; get right screen address.
00323A  3  A5 rr        	lda scr_l
00323C  3  6D C8 20     	adc txtwid
00323F  3  85 rr        	sta scr_r
003241  3  C6 rr        	dec scr_r
003243  3               scrly1:
003243  3  AC C8 20     	ldy txtwid		; set txtwide
003246  3  88           	dey
003247  3  18           	clc
003248  3               scrly0:
003248  3  B1 rr        	lda (scr_l),y		; scroll 1 line
00324A  3  2A           	rol a
00324B  3  91 rr        	sta (scr_l),y
00324D  3  88           	dey
00324E  3  10 F8        	bpl scrly0
003250  3               
003250  3  18           	clc			; point to next line
003251  3  A5 rr        	lda scr_l
003253  3  69 20        	adc #32
003255  3  85 rr        	sta scr_l
003257  3  90 EA        	bcc scrly1		; repeat 8 times
003259  3               
003259  3  AD C9 20     	lda txtpos 		; get text pointer.
00325C  3  85 rr        	sta scr_txt
00325E  3  AD CA 20     	lda txtpos+1
003261  3  85 rr        	sta scr_txt+1
003263  3               
003263  3  A0 00        	ldy #0
003265  3  B1 rr        	lda (scr_txt),y 		; find character we're displaying.
003267  3  29 7F        	and #127 		; remove end marker bit if applicable.
003269  3  C9 0D        	cmp #13			; is it newline?
00326B  3  D0 02        	bne scrly5 		; no, it's okay.
00326D  3  A9 20        	lda #32			; convert to a space instead.
00326F  3               scrly5:
00326F  3  85 rr        	sta fntaddr		; calculate char address
003271  3  A9 00        	lda #0
003273  3  85 rr        	sta fntaddr+1
003275  3  06 rr        	asl fntaddr  		; multiply char by 8.
003277  3  26 rr        	rol fntaddr+1
003279  3  06 rr        	asl fntaddr
00327B  3  26 rr        	rol fntaddr+1
00327D  3  06 rr        	asl fntaddr
00327F  3  26 rr        	rol fntaddr+1
003281  3  A5 rr        	lda fntaddr
003283  3  18           	clc
003284  3  69 6A        	adc #<(FONT-256)
003286  3  8D 93 32     	sta scrly3+1		; that's the low byte.
003289  3  A5 rr        	lda fntaddr+1
00328B  3  69 34        	adc #>(FONT-256)
00328D  3  8D 94 32     	sta scrly3+2		; add displacement.
003290  3               
003290  3  A2 00        	ldx #0
003292  3               scrly3:
003292  3  BD 33 33     	lda $3333,x		; get image of char line.
003295  3  2D C7 20     	and txtbit
003298  3  F0 0A        	beq scrly2		; don't plot pixel
00329A  3  BC D5 32     	ldy scrline,x
00329D  3  B1 rr        	lda (scr_r),y
00329F  3  18           	clc
0032A0  3  09 01        	ora #1
0032A2  3  91 rr        	sta (scr_r),y		; plot pixel
0032A4  3               scrly2:
0032A4  3  E8           	inx			; next line of char.
0032A5  3  E0 08        	cpx #8
0032A7  3  D0 E9        	bne scrly3
0032A9  3               
0032A9  3  4E C7 20     	lsr txtbit		; bit of text to display.
0032AC  3  B0 01        	bcs :+
0032AE  3  60           	rts
0032AF  3               :
0032AF  3  A0 00        	ldy #0
0032B1  3  B1 rr        	lda (scr_txt),y 	; what was the character?
0032B3  3  0A           	asl a	  		; end of message?
0032B4  3  B0 0B        	bcs scrly4
0032B6  3  EE C9 20     	inc txtpos
0032B9  3  D0 03        	bne :+
0032BB  3  EE CA 20     	inc txtpos+1
0032BE  3               :
0032BE  3  4C CD 32     	jmp scrly6 		; not yet - continue.
0032C1  3               scrly4:
0032C1  3  AD CB 20     	lda txtini 		; start of scrolling message.
0032C4  3  8D C9 20     	sta txtpos
0032C7  3  AD CC 20     	lda txtini+1
0032CA  3  8D CA 20     	sta txtpos+1
0032CD  3               scrly6:
0032CD  3  A9 80        	lda #128
0032CF  3  8D C7 20     	sta txtbit
0032D2  3  A6 rr        	ldx xtmp
0032D4  3  60           	rts
0032D5  3               
0032D5  3  00 20 40 60  scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0032D9  3  80 A0 C0 E0  
0032DD  3               
0032DD  3               ;-------------------------------------------------------
0032DD  3               ; Entry TICKER command
0032DD  3               ;
0032DD  3               ; Entry:
0032DD  3               ;  z80_b = message nr
0032DD  3               ;  z80_c = width
0032DD  3               ;-------------------------------------------------------
0032DD  3               
0032DD  3               iscrly:
0032DD  3  20 A0 2A     	jsr prescr 		; set up display position.
0032E0  3               
0032E0  3  A9 4C        	lda #<msgdat 		; text messages.
0032E2  3  85 66        	sta z80_l
0032E4  3  A9 34        	lda #>msgdat
0032E6  3  85 67        	sta z80_h
0032E8  3               
0032E8  3  A5 62        	lda z80_c 		; width.
0032EA  3  38           	sec
0032EB  3  E9 01        	sbc #1			; subtract one.
0032ED  3  C9 20        	cmp #32 		; is it between 1 and 32?
0032EF  3  90 05        	bcc :+
0032F1  3  A9 60        	lda #$60
0032F3  3  4C 07 33     	jmp iscrl0		; no, disable messages.
0032F6  3               :
0032F6  3  A6 63        	ldx z80_b		; message number.
0032F8  3  20 A9 2A     	jsr getwrd 		; find message start.
0032FB  3               
0032FB  3  A5 66        	lda z80_l		; set initial text position.
0032FD  3  8D CB 20     	sta txtini
003300  3  A5 67        	lda z80_h
003302  3  8D CC 20     	sta txtini+1
003305  3               
003305  3  A9 AD        	lda #$ad		; code for lda adrr
003307  3               iscrl0:
003307  3  8D 2B 32     	sta scrly		; enable/disable scrolling routine.
00330A  3               
00330A  3  20 A0 2A     	jsr prescr 		; set up display position.
00330D  3  20 C0 24     	jsr gprad 		; get print address.
003310  3               
003310  3  A5 rr        	lda scraddr 		; set text screen address.
003312  3  8D CD 20     	sta txtscr
003315  3  A5 rr        	lda scraddr+1
003317  3  8D CE 20     	sta txtscr+1
00331A  3               
00331A  3  A5 62        	lda z80_c		; width.
00331C  3  8D C8 20     	sta txtwid		; set width in working storage.
00331F  3               
00331F  3  A9 80        	lda #128 		; start with leftmost bit.
003321  3  8D C7 20     	sta txtbit
003324  3               
003324  3  4C C1 32     	jmp scrly4
003327  3               .endif
003327  3               
003327  3               ;------------------------------------------------------------------
003327  3               ; Dig routine, conditional assembly depending on dflag
003327  3               ;------------------------------------------------------------------
003327  3               .if dflag
003327  3               dig:
003327  3               	and #3
003327  3               	beq digr		; dig right
003327  3               	cmp #1
003327  3               	beq digl		; dig left
003327  3               	cmp #2
003327  3               	beq digd		; dig down
003327  3               
003327  3               ; Dig up.
003327  3               
003327  3               digu:				; dig up
003327  3               	ldy #8
003327  3               	lda (z80_ix),y
003327  3               	sec
003327  3               	sbc #2
003327  3               	sta dispy		; set y
003327  3               
003327  3               	iny
003327  3               	lda (z80_ix),y
003327  3               	sta dispx		; set x
003327  3               	jmp digv
003327  3               
003327  3               ; Dig down.
003327  3               
003327  3               digd:
003327  3               	ldy #9
003327  3               	lda (z80_ix),y
003327  3               	sta dispx		; set y
003327  3               
003327  3               	dey
003327  3               	clc
003327  3               	lda (z80_ix),y
003327  3               	adc #16
003327  3               	sta dispy		; set y
003327  3               	jmp digv
003327  3               
003327  3               ; Dig left.
003327  3               
003327  3               digl:
003327  3               	ldy #8
003327  3               	lda (z80_ix),y
003327  3               	sta dispy		; set y
003327  3               
003327  3               	iny
003327  3               	lda (z80_ix),y
003327  3               	sec
003327  3               	sbc #2			; x=x-2
003327  3               	sta dispx		; set x
003327  3               	jmp digh
003327  3               
003327  3               ; Dig right.
003327  3               
003327  3               digr:
003327  3               	ldy #8
003327  3               	lda (z80_ix),y
003327  3               	sta dispy		; set y
003327  3               
003327  3               	iny
003327  3               	lda (z80_ix),y
003327  3               	clc
003327  3               	adc #16
003327  3               	sta dispx		; set x+16
003327  3               	jmp digh
003327  3               
003327  3               ; Vertical digging
003327  3               
003327  3               digv:
003327  3               	jsr tstbl		; check blocktype in MAP
003327  3               	jsr fdchk		; test if FODDER
003327  3               
003327  3               	clc
003327  3               	lda dispx		; look 1 cell down
003327  3               	adc #8
003327  3               	sta dispx
003327  3               	jsr tstbl		; check blocktype in MAP
003327  3               	jsr fdchk
003327  3               	lda dispx
003327  3               	and #7
003327  3               	bne :+
003327  3               	rts
003327  3               :
003327  3               	clc
003327  3               	lda dispx		; look 1 cell down
003327  3               	adc #8
003327  3               	sta dispx
003327  3               	jsr tstbl		; check blocktype in MAP
003327  3               	jmp fdchk
003327  3               
003327  3               ; Horizontal digging
003327  3               
003327  3               digh:
003327  3               	jsr tstbl		; check blocktype in MAP
003327  3               	jsr fdchk		; test if FODDER
003327  3               
003327  3               	clc
003327  3               	lda dispy		; look 1 cell down
003327  3               	adc #8
003327  3               	sta dispy
003327  3               	jsr tstbl		; check blocktype in MAP
003327  3               	jsr fdchk
003327  3               	lda dispy
003327  3               	and #7
003327  3               	bne :+
003327  3               	rts
003327  3               :
003327  3               	clc
003327  3               	lda dispy		; look 1 cell down
003327  3               	adc #8
003327  3               	sta dispy
003327  3               	jsr tstbl		; check blocktype in MAP
003327  3               	jmp fdchk
003327  3               
003327  3               digcnt:	.byte 0
003327  3               
003327  3               .endif
003327  3               
003327  3               ;------------------------------------------------------------------
003327  3               ; Sprite table
003327  3               ;------------------------------------------------------------------
003327  3               
003327  3               
003327  3               ; ix+0  = type.
003327  3               ; ix+1  = sprite image number.
003327  3               ; ix+2  = frame.
003327  3               ; ix+3  = y coord.
003327  3               ; ix+4  = x coord.
003327  3               
003327  3               ; ix+5  = new type.
003327  3               ; ix+6  = new image number.
003327  3               ; ix+7  = new frame.
003327  3               ; ix+8  = new y coord.
003327  3               ; ix+9  = new x coord.
003327  3               
003327  3               ; ix+10 = direction.
003327  3               ; ix+11 = parameter 1.
003327  3               ; ix+12 = parameter 2.
003327  3               ; ix+13 = jump pointer low.
003327  3               ; ix+14 = jump pointer high.
003327  3               ; ix+15 = data pointer low.
003327  3               ; ix+16 = data pointer high.
003327  3               
003327  3               ; block NUMSPR * TABSIZ,255
003327  3               
003327  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
00332B  3  FF FF FF FF  
00332F  3  FF FF FF FF  
0033F3  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0033F7  3  FF FF FF 00  
0033FB  3  C0 78 00 00  
003404  3  07           roomtb:	.byte 7                      ; start room map offset.
003405  3               
003405  3               ; User routine.  Put your own code in here to be called with USER instruction.
003405  3               ; if USER has an argument it will be passed in the accumulator.
003405  3               
003405  3               user:
003405  3               	.include "user.inc"
003405  4  60           	rts
003406  4               
003406  3               
003406  3               ; Everything below here will be generated by the editors.
003406  3               
003406  3  60                   rts
003407  3               WINDOWTOP = 1
003407  3               WINDOWLFT = 1
003407  3               WINDOWHGT = 22
003407  3               WINDOWWID = 30 ;a
003407  3               MAPWID = 3
003407  3  FF FF FF             .byte 255,255,255
00340A  3               mapdat:
00340A  3  FF 00 FF             .byte 255,0,255
00340D  3  FF FF FF             .byte 255,255,255
003410  3  01           stmap:  .byte 1
003411  3               
003411  3               evnt00:
003411  3  60                   rts
003412  3               evnt01:
003412  3  60                   rts
003413  3               evnt02:
003413  3  60                   rts
003414  3               evnt03:
003414  3  60                   rts
003415  3               evnt04:
003415  3  60                   rts
003416  3               evnt05:
003416  3  60                   rts
003417  3               evnt06:
003417  3  60                   rts
003418  3               evnt07:
003418  3  60                   rts
003419  3               evnt08:
003419  3  60                   rts
00341A  3               evnt09:
00341A  3  60                   rts
00341B  3               evnt10:
00341B  3  A0 07                ldy #7 	; KEY
00341D  3  B9 6B 38             lda keys,y
003420  3  20 06 39             jsr ktest
003423  3  90 03                bcc :+
003425  3  4C 2D 34             jmp k00036
003428  3               :
003428  3  A9 60                lda #96	; TICKER
00342A  3  8D 2B 32             sta scrly
00342D  3  60           k00036: rts
00342E  3               evnt11:
00342E  3  60                   rts
00342F  3               evnt12:
00342F  3  60                   rts
003430  3               evnt13:
003430  3  60                   rts
003431  3               evnt14:
003431  3  A9 08                lda #8		; AT
003433  3  85 rr                sta chary
003435  3  A9 0A                lda #10
003437  3  85 rr                sta charx
003439  3  A9 0A                lda #10	; TICKER
00343B  3  85 62                sta z80_c
00343D  3  A9 02                lda #2
00343F  3  85 63                sta z80_b
003441  3  20 DD 32             jsr iscrly
003444  3  60                   rts
003445  3               evnt15:
003445  3  60                   rts
003446  3               evnt16:
003446  3  60                   rts
003447  3               evnt17:
003447  3  60                   rts
003448  3               evnt18:
003448  3  60                   rts
003449  3               evnt19:
003449  3  60                   rts
00344A  3               evnt20:
00344A  3  60                   rts
00344B  3  60           ptcusr: rts
00344C  3               msgdat:
00344C  3  54 49 43 4B          .byte "TICKER DEM",207
003450  3  45 52 20 44  
003454  3  45 4D CF     
003457  3  41 4E 44 20          .byte "AND THIS IS ALSO A SCROLLER .......",160
00345B  3  54 48 49 53  
00345F  3  20 49 53 20  
00347B  3  54 48 49 53          .byte "THIS IS A TEST FOR THE TICKER COMMAND ...",174
00347F  3  20 49 53 20  
003483  3  41 20 54 45  
0034A5  3               nummsg:
0034A5  3  03                   .byte 3
0034A6  3               chgfx:
0034A6  3  AA AA AA AA          .byte 170,170,170,170,170,170,170,170
0034AA  3  AA AA AA AA  
0034AE  3               bprop:
0034AE  3  00                   .byte 0
0034AF  3               sprgfx:
0034AF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0034B3  3  00 00 00 00  
0034B7  3  00 00 00 00  
0034CF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0034D3  3  00 00 00 00  
0034D7  3  00 00 00 00  
0034EF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0034F3  3  00 00 00 00  
0034F7  3  00 00 00 00  
00350F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003513  3  00 00 00 00  
003517  3  00 00 00 00  
00352F  3               frmlst:
00352F  3  00 01 01 00          .byte 0,1,1,0
003533  3               scdat:
003533  3  09 00                .word 9
003535  3  FF 00 00 FF          .byte 255,0,0,255,0,0,255,0,148
003539  3  00 00 FF 00  
00353D  3  94           
00353E  3               numsc:
00353E  3  01                   .byte 1
00353F  3               nmedat:
00353F  3  00 00 58 80          .byte 0,0,88,128,255
003543  3  FF           
003544  3               NUMOBJ = 1
003544  3               objdta:
003544  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,32,0,160,32
003548  3  00 00 00 00  
00354C  3  00 00 00 00  
00356A  3               font:
00356A  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00356E  3  00 00 00 00  
003572  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
003576  3  30 00 30 00  
00357A  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
00357E  3  00 00 00 00  
003582  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
003586  3  6C FE 6C 00  
00358A  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
00358E  3  7E 1E 7E 18  
003592  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
003596  3  30 6E CE 00  
00359A  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
00359E  3  7E CC 7E 00  
0035A2  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0035A6  3  00 00 00 00  
0035AA  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0035AE  3  18 18 0C 00  
0035B2  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0035B6  3  30 30 60 00  
0035BA  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0035BE  3  7E 18 3C 00  
0035C2  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0035C6  3  7E 18 18 00  
0035CA  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0035CE  3  00 18 18 30  
0035D2  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0035D6  3  7E 00 00 00  
0035DA  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0035DE  3  00 38 38 00  
0035E2  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0035E6  3  18 30 60 00  
0035EA  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0035EE  3  F6 E6 7C 00  
0035F2  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
0035F6  3  18 18 7E 00  
0035FA  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
0035FE  3  7C C0 FE 00  
003602  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
003606  3  06 C6 7C 00  
00360A  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
00360E  3  D8 FE 18 00  
003612  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
003616  3  06 C6 7C 00  
00361A  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
00361E  3  C6 C6 7C 00  
003622  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
003626  3  18 30 30 00  
00362A  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
00362E  3  C6 C6 7C 00  
003632  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
003636  3  7E 06 7C 00  
00363A  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
00363E  3  00 00 30 00  
003642  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
003646  3  00 30 30 60  
00364A  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
00364E  3  30 18 0C 00  
003652  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
003656  3  00 7E 00 00  
00365A  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
00365E  3  0C 18 30 00  
003662  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
003666  3  18 00 18 00  
00366A  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
00366E  3  FE C0 7C 00  
003672  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
003676  3  FE C6 C6 00  
00367A  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
00367E  3  C6 C6 FC 00  
003682  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
003686  3  C0 C6 7C 00  
00368A  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
00368E  3  C6 CC F8 00  
003692  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
003696  3  C0 C0 FE 00  
00369A  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
00369E  3  C0 C0 C0 00  
0036A2  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
0036A6  3  DE C6 7C 00  
0036AA  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0036AE  3  C6 C6 C6 00  
0036B2  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
0036B6  3  18 18 7E 00  
0036BA  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
0036BE  3  C6 C6 7C 00  
0036C2  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
0036C6  3  D8 CC C6 00  
0036CA  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0036CE  3  C0 C0 FE 00  
0036D2  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0036D6  3  C6 C6 C6 00  
0036DA  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
0036DE  3  DE CE C6 00  
0036E2  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
0036E6  3  C6 C6 7C 00  
0036EA  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
0036EE  3  FC C0 C0 00  
0036F2  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
0036F6  3  F6 DE 7C 00  
0036FA  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
0036FE  3  FC CC C6 00  
003702  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
003706  3  06 C6 7C 00  
00370A  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
00370E  3  30 30 30 00  
003712  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
003716  3  C6 C6 7C 00  
00371A  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
00371E  3  C6 6C 38 00  
003722  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
003726  3  C6 FE 6C 00  
00372A  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
00372E  3  38 6C C6 00  
003732  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
003736  3  30 30 30 00  
00373A  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
00373E  3  30 60 FE 00  
003742  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
003746  3  18 18 1E 00  
00374A  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
00374E  3  30 18 0C 00  
003752  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
003756  3  30 30 F0 00  
00375A  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
00375E  3  30 30 30 00  
003762  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003766  3  00 00 00 FF  
00376A  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
00376E  3  60 60 FE 00  
003772  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
003776  3  7C CC 7C 00  
00377A  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
00377E  3  66 66 7C 00  
003782  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
003786  3  60 60 3C 00  
00378A  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
00378E  3  CC CC 7C 00  
003792  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
003796  3  F8 C0 7C 00  
00379A  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
00379E  3  30 30 30 00  
0037A2  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0037A6  3  CC 7C 0C 78  
0037AA  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0037AE  3  CC CC CC 00  
0037B2  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0037B6  3  30 30 78 00  
0037BA  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
0037BE  3  0C 0C 6C 38  
0037C2  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0037C6  3  70 78 6C 00  
0037CA  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0037CE  3  30 30 1C 00  
0037D2  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0037D6  3  FC FC FC 00  
0037DA  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
0037DE  3  CC CC CC 00  
0037E2  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
0037E6  3  CC CC 78 00  
0037EA  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0037EE  3  CC F8 C0 C0  
0037F2  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
0037F6  3  CC 7C 0C 0E  
0037FA  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
0037FE  3  60 60 60 00  
003802  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
003806  3  78 0C F8 00  
00380A  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
00380E  3  30 30 1C 00  
003812  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
003816  3  CC CC 78 00  
00381A  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
00381E  3  78 78 30 00  
003822  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
003826  3  FC FC 78 00  
00382A  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00382E  3  30 78 CC 00  
003832  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
003836  3  CC 7C 0C 78  
00383A  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
00383E  3  30 60 FC 00  
003842  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
003846  3  18 18 1E 00  
00384A  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
00384E  3  18 18 18 00  
003852  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
003856  3  30 30 F0 00  
00385A  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
00385E  3  00 00 00 00  
003862  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
003866  3  E3 BB C6 7C  
00386A  3               jtab:
00386A  3  63                   .byte 99
00386B  3  0A 08 3F 2F  keys:   .byte 10,8,63,47,33,35,37,31,30,26,24
00386F  3  21 23 25 1F  
003873  3  1E 1A 18     
003876  3               
003876  2               
003876  1               	.include "lib.inc"
003876  2               ;----------------------------------------------------------------------
003876  2               ; Atari 800 Platform Specific functions
003876  2               ;----------------------------------------------------------------------
003876  2               
003876  2               ;============================================================
003876  2               ; PLATFORM VARIABLES
003876  2               ;============================================================
003876  2               ;
003876  2               ; Memory map:
003876  2               ;
003876  2               ;	$0000-$01ff	 0.50kB	CPU WS
003876  2               ;	$0200-$05ff	 1,00kB	IOCB/Printer/Cassette RAM
003876  2               ;	$0600-$06ff	 0,25kB	User RAM
003876  2               ;	$0700-$1fff	 6,25kB
003876  2               ;	$2000-$ffff	56,00kB	User RAM
003876  2               ;
003876  2               ; Keyboard matrix:
003876  2               ;
003876  2               ;		0	1	2	3	4	5	6	7
003876  2               ;       ----------------------------------------------------------------------
003876  2               ;	$00:	L	J	;:	F1	F2	K	+\	*^
003876  2               ;	$08:	O		P	U	Ret	I	-_	=|
003876  2               ;	$10:	V	Help	C	F3	F4	B	X	Z
003876  2               ;	$18:	4$		3#	6&	Esc	5%	2"	1!
003876  2               ;	$20:	,[	Space	.]	N		M	/?	Invert
003876  2               ;	$28:	R		E	Y	Tab	T	W	Q
003876  2               ;	$30:	9(		0)	7'	Bksp	8@	<	>
003876  2               ;	$38:	F	H	D		Caps	G	S	A
003876  2               ;
003876  2               ; Atari 800 constants:
003876  2               
003876  2               	LMS		= 64
003876  2               	HS		= 16
003876  2               	VS		= 32
003876  2               	MODE2		= 2
003876  2               	MODE3		= 3
003876  2               	MODE4		= 4
003876  2               	MODE5		= 5
003876  2               	MODEB		= $0B
003876  2               	MODED		= $0D
003876  2               	MODEE		= $0E
003876  2               	MODEF		= $0F
003876  2               
003876  2               	BLANK1		= $00
003876  2               	BLANK2		= $10
003876  2               	BLANK3		= $20
003876  2               	BLANK4		= $30
003876  2               	BLANK5		= $40
003876  2               	BLANK6		= $50
003876  2               	BLANK7		= $60
003876  2               	BLANK8		= $70
003876  2               
003876  2               	DLISTENDJUMP	= $41
003876  2               
003876  2               ; Atari 800 Addresses
003876  2               
003876  2               	HPOSP0	= $D000		; HORIZONTAL POSITION P0
003876  2               	HPOSP1	= $D001		; HORIZONTAL POSITION P1
003876  2               	HPOSP2	= $D002		; HORIZONTAL POSITION P2
003876  2               	HPOSP3	= $D003		; HORIZONTAL POSITION P3
003876  2               	HPOSM0	= $D004		; HORIZONTAL POSITION M0
003876  2               	HPOSM1	= $D005		; HORIZONTAL POSITION M1
003876  2               	HPOSM2	= $D006		; HORIZONTAL POSITION M2
003876  2               	HPOSM3	= $D007		; HORIZONTAL POSITION M3
003876  2               
003876  2               	SIZEP0	= $D008		; SIZE P0
003876  2               	SIZEP1	= $D009		; SIZE P0
003876  2               	SIZEP2	= $D00A		; SIZE P0
003876  2               	SIZEP3	= $D00B		; SIZE P0
003876  2               	SIZEM	= $D00C		; SIZE M
003876  2               
003876  2               	GRAFP0	= $D00D
003876  2               	GRAFP1	= $D00E
003876  2               	GRAFP2	= $D00F
003876  2               	GRAFP3	= $D010
003876  2               	GRAFM	= $D011
003876  2               
003876  2               	TRIG0	= $D010
003876  2               	TRIG1	= $D011
003876  2               
003876  2               	COLPM0	= $D012		; COLOR P0/M0
003876  2               	COLPM1	= $D013		; COLOR P1/M1
003876  2               	COLPM2	= $D014		; COLOR P2/M2
003876  2               	COLPM3	= $D015		; COLOR P3/M3
003876  2               
003876  2               	COLPF0	= $D016
003876  2               	COLPF1	= $D017
003876  2               	COLPF2	= $D018
003876  2               	COLPF3	= $D019
003876  2               	COLBK	= $D01A
003876  2               
003876  2               	KBCODE	= $D209
003876  2               	RANDOM	= $D20A
003876  2               	IRQEN	= $D20E
003876  2               	IRQST	= $D20E
003876  2               	SKSTAT	= $D20F
003876  2               
003876  2               	STICK	= $D300
003876  2               	PORTB	= $D301
003876  2               	PBCTL	= $D303
003876  2               
003876  2               	DMACTL	= $D400
003876  2               	DLISTL	= $D402
003876  2               	DLISTH	= $D403
003876  2               	WSYNC	= $D40A
003876  2               	VCOUNT	= $D40B
003876  2               	NMIEN	= $D40E
003876  2               	NMIST	= $D40F
003876  2               	NMIRES	= $D40F
003876  2               
003876  2               	NMI	= $FFFA
003876  2               	RESET	= $FFFC
003876  2               	IRQ	= $FFFE
003876  2               
003876  2               ;----------------------------------------------------------------------
003876  2               ; Atari 800 hardware fns
003876  2               ;----------------------------------------------------------------------
003876  2               
003876  2               init:
003876  2               
003876  2               ; Disable interrupts
003876  2               
003876  2  78           	sei
003877  2  A9 00        	lda #0
003879  2  8D 0E D2     	sta IRQEN		; Disable IRQ
00387C  2  8D 0E D4     	sta NMIEN		; Disable NMI
00387F  2               
00387F  2               ; Switch BASIC + OS ROMS off
00387F  2               
00387F  2  AD 03 D3     	lda PBCTL
003882  2  09 02        	ora #%00000010
003884  2  8D 03 D3     	sta PBCTL
003887  2  AD 01 D3     	lda PORTB
00388A  2  29 7C        	and #%01111100
00388C  2  09 82        	ora #%10000010
00388E  2  8D 01 D3     	sta PORTB
003891  2               
003891  2               ; Setup new NMI handler
003891  2               
003891  2  A9 B7        	lda #<nmi_handler
003893  2  8D FA FF     	sta NMI
003896  2  A9 38        	lda #>nmi_handler
003898  2  8D FB FF     	sta NMI+1
00389B  2  A9 C0        	lda #%11000000
00389D  2  8D 0E D4     	sta NMIEN
0038A0  2               
0038A0  2               ; Init video registers
0038A0  2               
0038A0  2  A9 00        	lda #<BITMAP_DLIST
0038A2  2  8D 02 D4     	sta DLISTL
0038A5  2  A9 3A        	lda #>BITMAP_DLIST
0038A7  2  8D 03 D4     	sta DLISTH
0038AA  2               
0038AA  2               ; Screenwidth 32 bytes
0038AA  2               
0038AA  2  A9 31        	lda #%00110001
0038AC  2  8D 00 D4     	sta DMACTL
0038AF  2               
0038AF  2  20 AC 20     	jsr cls
0038B2  2               
0038B2  2  60           	rts
0038B3  2               
0038B3  2               ; NMI interrupt handler
0038B3  2               
0038B3  2  00 00        frame_counter:	.byte 0,0
0038B5  2  00           frames_passed:	.byte 0
0038B6  2  00           frames_delay:	.byte 0
0038B7  2               
0038B7  2               nmi_handler:
0038B7  2  2C 0F D4     	bit NMIST
0038BA  2  30 2A        	bmi dli_handler
0038BC  2  10 0D        	bpl nmi_not_dli
0038BE  2               nmi_not_vbi:
0038BE  2  A9 20        	lda #%00100000
0038C0  2  2C 0F D4     	bit NMIST
0038C3  2  D0 04        	bne nmi_not_reset
0038C5  2  8D 0F D4     	sta NMIRES
0038C8  2  40           	rti
0038C9  2               nmi_not_reset:
0038C9  2  68           	pla
0038CA  2  40           	rti
0038CB  2               nmi_not_dli:
0038CB  2  48           	pha
0038CC  2  50 F0        	bvc nmi_not_vbi
0038CE  2  8A           	txa
0038CF  2  48           	pha
0038D0  2  98           	tya
0038D1  2  48           	pha
0038D2  2               
0038D2  2               ; Used for syncing to 25 Hz
0038D2  2               
0038D2  2  EE B5 38     	inc frames_passed
0038D5  2               
0038D5  2  EE B3 38     	inc frame_counter
0038D8  2  D0 03        	bne skip_inc_frame_counter
0038DA  2  EE B4 38     	inc frame_counter+1
0038DD  2               skip_inc_frame_counter:
0038DD  2               
0038DD  2               ; Adjust delay counter
0038DD  2               
0038DD  2  CE B6 38     	dec frames_delay
0038E0  2               
0038E0  2               ; Restore registers
0038E0  2               
0038E0  2  68           	pla
0038E1  2  A8           	tay
0038E2  2  68           	pla
0038E3  2  AA           	tax
0038E4  2  68           	pla
0038E5  2  40           	rti
0038E6  2               
0038E6  2               dli_handler:
0038E6  2  40           	rti
0038E7  2               
0038E7  2               ;========================================================
0038E7  2               ; KEY AND JOYSTICK ROUTINES
0038E7  2               ;--------------------------------------------------------
0038E7  2               ; Keys
0038E7  2               ;
0038E7  2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
0038E7  2               ;             ||||||||
0038E7  2               ;             |||||||+> Right    KEY 0  - X
0038E7  2               ;             ||||||+-> Left     KEY 1  - Z
0038E7  2               ;             |||||+--> Down     KEY 2  - .
0038E7  2               ;             ||||+---> Up       KEY 3  - ;
0038E7  2               ;             |||+----> Fire1    KEY 4  - SPC
0038E7  2               ;             ||+-----> Fire2    KEY 5  - Q
0038E7  2               ;             |+------> Fire3    KEY 6  - P
0038E7  2               ;             +-------> Not used
0038E7  2               ;
0038E7  2               ;                       Option1  KEY 7  - 1
0038E7  2               ;                       Option2  KEY 8  - 2
0038E7  2               ;                       Option3  KEY 9  - 3
0038E7  2               ;                       Option4  KEY 10 - 4
0038E7  2               ;--------------------------------------------------------
0038E7  2               ;----------------------------------------------------
0038E7  2               ; PRSKEY
0038E7  2               ; Wait for keypress.
0038E7  2               ;----------------------------------------------------
0038E7  2               
0038E7  2               prskey:
0038E7  2  AD 0F D2     	lda SKSTAT		; Check keypress
0038EA  2  29 7F        	and #127
0038EC  2  C9 7F        	cmp #127
0038EE  2  F0 03        	beq :+
0038F0  2  4C FC 38     	jmp prsend
0038F3  2               :
0038F3  2  20 68 29     	jsr joykey		; Check joystick move
0038F6  2  29 7F        	and #127
0038F8  2  C9 7F        	cmp #127
0038FA  2  F0 EB        	beq prskey
0038FC  2               prsend:
0038FC  2  AD 0F D2     	lda SKSTAT		; Check release
0038FF  2  29 7F        	and #127
003901  2  C9 7F        	cmp #127
003903  2  D0 F7        	bne prsend
003905  2  60           	rts
003906  2               
003906  2               ;--------------------------------------------------------
003906  2               ; KTEST
003906  2               ; Check if key in A is pressed,
003906  2               ;  carry clr = key pressed
003906  2               ;  carry set = key not pressed
003906  2               ;--------------------------------------------------------
003906  2               
003906  2               ktest:
003906  2  85 rr        	sta tmp
003908  2  AD 0F D2     	lda SKSTAT		; Check keypress
00390B  2  29 04        	and #4
00390D  2  D0 07        	bne notpressed
00390F  2  A5 rr        	lda tmp
003911  2  CD 09 D2     	cmp KBCODE
003914  2  F0 02        	beq pressed
003916  2               notpressed:
003916  2  38           	sec
003917  2  60           	rts
003918  2               pressed:
003918  2  18           	clc			; key pressed
003919  2  60           	rts
00391A  2               
00391A  2               ;---------------------------------------------------------------
00391A  2               ; KGET
00391A  2               ; Return keycode when a key is pressed and released
00391A  2               ;---------------------------------------------------------------
00391A  2               
00391A  2               kget:
00391A  2  AD 0F D2     	lda SKSTAT		; Check keypress
00391D  2  29 04        	and #4
00391F  2  D0 F9        	bne kget
003921  2  AD 09 D2     	lda KBCODE		; If pressed, get keycode
003924  2  48           	pha			; Save keycode pressed
003925  2               kget2:
003925  2  AD 0F D2     	lda SKSTAT		; Check keypress
003928  2  29 04        	and #4
00392A  2  F0 F9        	beq kget2
00392C  2  68           	pla
00392D  2  60           	rts
00392E  2               
00392E  2               ;-------------------------------------------------------
00392E  2               ; Joystick routines.
00392E  2               ;
00392E  2               ; contrl = 1, Joystick1
00392E  2               ;          2, Joystick2
00392E  2               ;-------------------------------------------------------
00392E  2               
00392E  2               ; Iitialize joysticks
00392E  2               
00392E  2               joyinit:
00392E  2  60           	rts
00392F  2               
00392F  2               ; Joystick1 controls.
00392F  2               
00392F  2               joy1:
00392F  2  A9 00        	lda #0		 	; zero reading.
003931  2  85 rr        	sta joyval
003933  2               
003933  2  AD 71 38     	lda keys+6		; Check Fire3
003936  2  20 06 39     	jsr ktest
003939  2  26 rr        	rol joyval
00393B  2  AD 70 38     	lda keys+5		; Check Fire2
00393E  2  20 06 39     	jsr ktest
003941  2  26 rr        	rol joyval
003943  2  AD 10 D0     	lda TRIG0		; Check Fire
003946  2  4A           	lsr
003947  2  26 rr        	rol joyval
003949  2               
003949  2  AD 00 D3     	lda STICK
00394C  2  85 rr        	sta tmp
00394E  2  46 rr        	lsr tmp			; Check up
003950  2  26 rr        	rol joyval
003952  2  46 rr        	lsr tmp			; Check dwon
003954  2  26 rr        	rol joyval
003956  2  46 rr        	lsr tmp			; Check left
003958  2  26 rr        	rol joyval
00395A  2  46 rr        	lsr tmp			; Check right
00395C  2  26 rr        	rol joyval
00395E  2               
00395E  2  60           	rts
00395F  2               
00395F  2               ; Joystick2 controls.
00395F  2               
00395F  2               joy2:
00395F  2  A9 00        	lda #0		 	; zero reading.
003961  2  85 rr        	sta joyval
003963  2               
003963  2  AD 71 38     	lda keys+6		; Check Fire3
003966  2  20 06 39     	jsr ktest
003969  2  26 rr        	rol joyval
00396B  2  AD 70 38     	lda keys+5		; Check Fire2
00396E  2  20 06 39     	jsr ktest
003971  2  26 rr        	rol joyval
003973  2  AD 11 D0     	lda TRIG1		; Check Fire
003976  2  4A           	lsr
003977  2  26 rr        	rol joyval
003979  2               
003979  2  AD 00 D3     	lda STICK
00397C  2  4A           	lsr a
00397D  2  4A           	lsr a
00397E  2  4A           	lsr a
00397F  2  4A           	lsr a
003980  2  85 rr        	sta tmp
003982  2  46 rr        	lsr tmp			; Check up
003984  2  26 rr        	rol joyval
003986  2  46 rr        	lsr tmp			; Check dwon
003988  2  26 rr        	rol joyval
00398A  2  46 rr        	lsr tmp			; Check left
00398C  2  26 rr        	rol joyval
00398E  2  46 rr        	lsr tmp			; Check right
003990  2  26 rr        	rol joyval
003992  2               
003992  2  60           	rts
003993  2               
003993  2               ;-------------------------------------------------------
003993  2               ; Colours
003993  2               ;-------------------------------------------------------
003993  2               
003993  2               ; INK sets foreground colour
003993  2               
003993  2               setfgcol:
003993  2  29 03        	and #3
003995  2  A8           	tay
003996  2  B9 B8 39     	lda codcol,y
003999  2  4C AF 39     	jmp calfgc
00399C  2               
00399C  2               ; PAPER sets background colour
00399C  2               
00399C  2               setbgcol:
00399C  2  29 03        	and #3
00399E  2               calbgc:
00399E  2  A8           	tay
00399F  2  B9 B8 39     	lda codcol,y
0039A2  2  48           	pha
0039A3  2  AD B6 39     	lda andeor
0039A6  2  4D B7 39     	eor andeor+1
0039A9  2  AA           	tax
0039AA  2  68           	pla
0039AB  2  8D B7 39     	sta andeor+1
0039AE  2  8A           	txa
0039AF  2               calfgc:
0039AF  2  4D B7 39     	eor andeor+1
0039B2  2  8D B6 39     	sta andeor
0039B5  2               calex1:
0039B5  2  60           	rts
0039B6  2               
0039B6  2  00 00        andeor:	.byte 0,0
0039B8  2  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
0039BC  2               
0039BC  2               ;---------------------------------------------------------------
0039BC  2               ; Bitmap display list must be aligned at $100
0039BC  2               ;---------------------------------------------------------------
0039BC  2               bitmaplist:
0039BC  2               
0039BC  2               ; Align $100
0039BC  2               
0039BC  2  00 00 00 00  .repeat ((bitmaplist/256)+1)*256-bitmaplist
0039C0  2  00 00 00 00  
0039C4  2  00 00 00 00  
003A00  2               	.byte 0
003A00  2               .endrepeat
003A00  2               
003A00  2               ; Set graphic mode
003A00  2               
003A00  2               .if gflag
003A00  2               	GFXMODE = MODEE
003A00  2               .else
003A00  2               	GFXMODE = MODEF
003A00  2               .endif
003A00  2               
003A00  2               BITMAP_DLIST:
003A00  2  70           	.byte BLANK8
003A01  2  70           	.byte BLANK8
003A02  2  70           	.byte BLANK8
003A03  2               
003A03  2  4F           	.byte LMS+GFXMODE
003A04  2  00 E4        	.word ScreenAddr
003A06  2  0F 0F 0F 0F  	.res 95,GFXMODE
003A0A  2  0F 0F 0F 0F  
003A0E  2  0F 0F 0F 0F  
003A65  2               
003A65  2  4F            	.byte LMS+GFXMODE
003A66  2  00 F0        	.word ScreenAddr+96*32
003A68  2  0F 0F 0F 0F  	.res 95,GFXMODE
003A6C  2  0F 0F 0F 0F  
003A70  2  0F 0F 0F 0F  
003AC7  2               
003AC7  2  41           	.byte DLISTENDJUMP
003AC8  2  00 3A        	.word BITMAP_DLIST
003ACA  2               
003ACA  2               
003ACA  1               	.include "z80.asm"
003ACA  2               ;------------------------------------------------------
003ACA  2               ; z80.asm
003ACA  2               ; spectrum stuff
003ACA  2               ; adresses
003ACA  2               
003ACA  2               
003ACA  2               ; Contains seperatly 1 bit set
003ACA  2               
003ACA  2               _bitmem0	= $f8
003ACA  2               _bitmem1	= $f9
003ACA  2               _bitmem2	= $fa
003ACA  2               _bitmem3	= $fb
003ACA  2               _bitmem4	= $fc
003ACA  2               _bitmem5	= $fd
003ACA  2               _bitmem6	= $fe
003ACA  2               _bitmem7	= $ff
003ACA  2               
003ACA  2               ; constants
003ACA  2               _bitvalue0	= $01
003ACA  2               _bitvalue1	= $02
003ACA  2               _bitvalue2	= $04
003ACA  2               _bitvalue3	= $08
003ACA  2               _bitvalue4	= $10
003ACA  2               _bitvalue5	= $20
003ACA  2               _bitvalue6	= $40
003ACA  2               _bitvalue7	= $80
003ACA  2               
003ACA  2               _notbitvalue0	= $fe
003ACA  2               _notbitvalue1	= $fd
003ACA  2               _notbitvalue2	= $fb
003ACA  2               _notbitvalue3	= $f7
003ACA  2               _notbitvalue4	= $ef
003ACA  2               _notbitvalue5	= $df
003ACA  2               _notbitvalue6	= $bf
003ACA  2               _notbitvalue7	= $7f
003ACA  2               
003ACA  2               
003ACA  2               exx:
003ACA  2  A5 62        		lda z80_c
003ACC  2  A4 6E        		ldy z80_cp
003ACE  2  84 62        		sty z80_c
003AD0  2  85 6E        		sta z80_cp
003AD2  2  A5 63        		lda z80_b
003AD4  2  A4 6F        		ldy z80_bp
003AD6  2  84 63        		sty z80_b
003AD8  2  85 6F        		sta z80_bp
003ADA  2  A5 64        		lda z80_e
003ADC  2  A4 70        		ldy z80_ep
003ADE  2  84 64        		sty z80_e
003AE0  2  85 70        		sta z80_ep
003AE2  2  A5 65        		lda z80_d
003AE4  2  A4 71        		ldy z80_dp
003AE6  2  84 65        		sty z80_d
003AE8  2  85 71        		sta z80_dp
003AEA  2  A5 rr        		lda scraddr
003AEC  2  A4 72        		ldy z80_lp
003AEE  2  84 rr        		sty scraddr
003AF0  2  85 72        		sta z80_lp
003AF2  2  A5 rr        		lda scraddr+1
003AF4  2  A4 73        		ldy z80_hp
003AF6  2  84 rr        		sty scraddr+1
003AF8  2  85 73        		sta z80_hp
003AFA  2  60           		rts
003AFB  2               
003AFB  2               
003AFB  1               eind_asm:
003AFB  1               eop:					; End Of Program
003AFB  1               
003AFB  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(48384-eind_asm + start_asm))
003AFB  1               
