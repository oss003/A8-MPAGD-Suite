ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2000
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 1 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               .if rflag
000057r 2               sprshft:     .res 1
000057r 2               .endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               .org asm_code-6
001FFA  1  FF FF        	.word $ffff
001FFC  1  00 20        	.word start_asm
001FFE  1  FB 9F        	.word eind_asm
002000  1               
002000  1               start_asm:
002000  1               	.include "game.inc"
002000  2               .include "nixy.inc"
002000  3               ;--------------------------------------------------------------
002000  3               ; Arcade Game Designer.
002000  3               ; (C) 2008 Jonathan Cauldwell.
002000  3               ; ZX Spectrum Next Engine v0.7.
002000  3               ; Acorn Atom port by K.v.Oss 2018
002000  3               ;--------------------------------------------------------------
002000  3               
002000  3               ; Conditional compilation flags
002000  3               ; Code is installed if flag is set
002000  3               ; Flags are set in commandline assembly or by the compiler
002000  3               
002000  3               ; Flags set by AGD compiler
002000  3               ;	mflag  			; MENU + INV
002000  3               ;	pflag 			; particle engine
002000  3               ;	sflag 			; scrollytext
002000  3               ;	dflag 			; digging mode
002000  3               ;	cflag			; collectable blocks
002000  3               ;	oflag			; objects
002000  3               ;	lflag			; ladders
002000  3               ;
002000  3               ; Flags set manually
002000  3               ;	aflag			; adventure mode
002000  3               ;	bflag			; big sprites (16x24)
002000  3               ;	iflag			; invert mode
002000  3               
002000  3               .if mflag
002000  3               	.out "- MEN/INV enabled"
002000  3               .endif
002000  3               .if pflag
002000  3               	.out "- Particles enabled"
002000  3               .endif
002000  3               .if sflag
002000  3               	.out "- Scrolling enabled"
002000  3               .endif
002000  3               .if dflag
002000  3               	.out "- Digging enabled"
002000  3               .endif
002000  3               .if cflag
002000  3               	.out "- Collectable blocks enabled"
002000  3               .endif
002000  3               .if oflag
002000  3               	.out "- Objects enabled"
002000  3               .endif
002000  3               .if lflag
002000  3               	.out "- Ladders enabled"
002000  3               .endif
002000  3               .if aflag
002000  3               	.out "- Adventure mode enabled"
002000  3               .endif
002000  3               .if bflag
002000  3               	.out "- Big Sprites (16x24) enabled"
002000  3               .endif
002000  3               .if iflag
002000  3               	.out "- Invert mode enabled"
002000  3               .endif
002000  3               .if gflag
002000  3               	.out "- Colour mode enabled"
002000  3               .endif
002000  3               .if rflag
002000  3               	.out "- RAM saving mode enabled"
002000  3               .endif
002000  3               
002000  3               ; Global definitions ------------------------------------------------------------
002000  3               
002000  3               	FONT = font		; Font address
002000  3               
002000  3               	green	= $00		; Colour definition filters
002000  3               	yellow	= $55
002000  3               	blue	= $aa
002000  3               	red	= $ff
002000  3               
002000  3               ; Block characteristics.
002000  3               
002000  3               	PLATFM	= 1		; platform.
002000  3               	WALL	= PLATFM + 1	; solid wall.
002000  3               	LADDER	= WALL + 1	; ladder.
002000  3               	FODDER	= LADDER + 1	; fodder block.
002000  3               	DEADLY	= FODDER + 1	; deadly block.
002000  3               	CUSTOM	= DEADLY + 1	; custom block.
002000  3               	WATER	= CUSTOM + 1	; water block.
002000  3                       COLECT	= WATER + 1	; collectable block.
002000  3                       NUMTYP	= COLECT + 1	; number of types.
002000  3               
002000  3               ; Sprites.
002000  3               
002000  3               .if bflag
002000  3               	SPR_HGT	= 24		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 8		; number of sprites.
002000  3               .else				; 16x16 sprites
002000  3               	SPR_HGT = 16		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 12		; number of sprites.
002000  3               .endif
002000  3               
002000  3               	TABSIZ = 17		; size of each entry.
002000  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002000  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002000  3               	var_X  = 8		; new x coordinate of sprite.
002000  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002000  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002000  3               
002000  3               ; Particle engine.
002000  3               
002000  3               	NUMSHR = 55		; pieces of shrapnel.
002000  3               	SHRSIZ = 6		; bytes per particle.
002000  3               
002000  3               ; System constants
002000  3               
002000  3               	ScrSelAddr  = $b000	; Screen selection address
002000  3               	KeyRowAddr  = $b000	; PIA key matrix row
002000  3               	KeyColAddr  = $b001	; PIA key matrix column
002000  3               	SpeakerBit  = $b002	; Speaker bit
002000  3               	CmdReg      = $b400	; Command register AtoMMC
002000  3               	DatReg      = $b401	; Data register AtoMMC
002000  3               	Timer2_Low  = $b808	; Timer 2 low byte
002000  3               	Timer2_High = $b809	; Timer 2 high byte
002000  3               	ScreenAddr  = $e400	; Startaddress video RAM
002000  3               
002000  3               	MAP 	    = $dd00		; properties map buffer (3x256 bytes)
002000  3               	SCADTB_lb   = MAP+3*256		; screen address table lo-byte (256 bytes)
002000  3               	SCADTB_hb   = SCADTB_lb+256	; screen address table hi-byte (256 bytes)
002000  3               	SHRAPN      = SCADTB_hb+256	; shrapnel table (55x6 bytes)
002000  3               
002000  3               ; System calls
002000  3               
002000  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
002000  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
002000  3               	OSRDCH   = $fe94	; get key subroutine
002000  3                       READKEY  = $fe71	; scan key matrix subroutine
002000  3               	OSWRCH	 = $fff4	; write character
002000  3               
002000  3               
002000  3               .if iflag
002000  3               	TxtInvert   = $ff	; Invert byte for character printing
002000  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002000  3               .else
002000  3               	TxtInvert   = $00	; Invert byte for character printing
002000  3               	ScrFillByte = $00	; Screen fill byte for CLS
002000  3               .endif
002000  3               
002000  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002000  3               
002000  3               ;===============================================================
002000  3               ; Game starts here
002000  3               ;===============================================================
002000  3               
002000  3               ;.segment "CODE"
002000  3               
002000  3  20 A1 9D     	jsr init
002003  3               
002003  3               ; Clear variables
002003  3               
002003  3  A9 00        	lda #0
002005  3  A2 00        	ldx #0
002007  3               clrloop:
002007  3  95 00        	sta 0,x
002009  3  E8           	inx
00200A  3  D0 FB        	bne clrloop
00200C  3               
00200C  3               gameloop:
00200C  3  20 0A 21     	jsr game	 	; start the game.
00200F  3  4C 0C 20     	jmp gameloop		; Start again
002012  3               
002012  3               ; Definition of variables
002012  3               ; Make sure pointers are arranged in the same order as the data itself.
002012  3               
002012  3  7B 44        msgptr:		.word msgdat	; messages
002014  3  EF 46        blkptr:		.word chgfx	; block graphics.
002016  3  AF 4B        proptr:		.word bprop	; address of char properties.
002018  3  47 4C        sptptr:		.word sprgfx	; sprite graphics
00201A  3  47 6B        frmptr:		.word frmlst	; sprite frames.
00201C  3  63 6B        scrptr:		.word scdat	; address of screens.
00201E  3  BD 96        nmeptr:		.word nmedat	; enemy start positions.
002020  3  6C 98        objptr:		.word objdta	; object graphics
002022  3               
002022  3               ;TxtFilter:	.byte $ff
002022  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
002026  3               
002026  3               ; Don't change the order of these four.
002026  3               ; Menu routine relies on winlft following wintop.
002026  3               
002026  3  01           wintop:		.byte WINDOWTOP	; top of window.
002027  3  01           winlft:		.byte WINDOWLFT	; left edge.
002028  3  13           winhgt:		.byte WINDOWHGT	; window height.
002029  3  1E           winwid:		.byte WINDOWWID	; window width.
00202A  3  0E           numob:		.byte NUMOBJ	; number of objects in game.
00202B  3               
00202B  3               ; Variables start here.
00202B  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00202B  3               
00202B  3  08           wntopx:		.byte (8 * WINDOWTOP)
00202C  3  08           wnlftx:		.byte (8 * WINDOWLFT)
00202D  3  90           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00202E  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00202F  3               
00202F  3               ; Assorted game routines which can go in contended memory.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for inventory called by the INV command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with objects seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected objectnr of INV menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               .if mflag
00202F  3               minve:
00202F  3               	lda #<(invdis)		; routine address.
00202F  3               	sta mod0+1		; set up menu routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(invdis)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               	lda #<(fopt)		; find option from available objects.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fopt)
00202F  3               	sta mod1+1+1
00202F  3               	jmp dbox		; do menu routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for menu called by the MENU command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with menu items seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected line nr of MENU menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               mmenu:
00202F  3               	lda #<(always)		; routine address.
00202F  3               	sta mod0+1		; set up routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(always)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               
00202F  3               	lda #<(fstd)		; standard option selection.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fstd)
00202F  3               	sta mod1+2
00202F  3               
00202F  3               ; Drop through into box routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Work out size of box for message or menu.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               dbox:
00202F  3               	lda #<(msgdat)		; pointer to messages.
00202F  3               	sta z80_l
00202F  3               	lda #>(msgdat)
00202F  3               	sta z80_h
00202F  3               
00202F  3               	jsr getwrd		; get message number.
00202F  3               
00202F  3               	lda z80_h		; store pointer to message.
00202F  3               	sta TmpAddr
00202F  3               	lda z80_l
00202F  3               	sta TmpAddr+1
00202F  3               
00202F  3               	lda #1			; height.
00202F  3               	sta z80_d
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               	sta z80_e		; maximum width.
00202F  3               dbox5:
00202F  3               	lda #0			; this line"s width.
00202F  3               	sta z80_b
00202F  3               mod2:
00202F  3               	jsr always		; item in player"s possession?
00202F  3               	cmp #255
00202F  3               	bne dbox6		; not in inventory, skip this line.
00202F  3               	inc z80_d		; add to tally.
00202F  3               dbox6:
00202F  3               	ldy #0			; get character.
00202F  3               	lda (z80_hl),y
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a		; reached end of line?
00202F  3               	cmp #','
00202F  3               	beq dbox3		; yes.
00202F  3               	cmp #13
00202F  3               	beq dbox3		; yes.
00202F  3               	inc z80_b		; add to this line"s width.
00202F  3               	lda z80_a
00202F  3               	bmi dbox4		; end of message? yes, end count.
00202F  3               	jmp dbox6		; repeat until we find the end.
00202F  3               dbox3:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox5		; no, carry on looking.
00202F  3               	lda z80_b		; make this the widest so far.
00202F  3               	sta z80_e
00202F  3               	jmp dbox5		; keep looking.
00202F  3               dbox4:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox8		; no, carry on looking.
00202F  3               	lda z80_b		; final line is the longest so far.
00202F  3               	sta z80_e
00202F  3               dbox8:
00202F  3               	dec z80_d		; decrement items found.
00202F  3               	bne :+			; total was zero.
00202F  3               	lda #255
00202F  3               	sta varopt
00202F  3               	jmp dbox15
00202F  3               :
00202F  3               	lda z80_e		; longest line.
00202F  3               	bne :+			; was it zero?
00202F  3               	jmp dbox15		; total was zero.
00202F  3               :
00202F  3               	sta bwid		; set up size.
00202F  3               	lda z80_d
00202F  3               	sta blen
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; That's set up our box size.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               	lda winhgt		; window height in characters.
00202F  3               	sec
00202F  3               	sbc z80_d		; subtract height of box.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc wintop		; add top edge of window.
00202F  3               	sta btop		; set up box top.
00202F  3               
00202F  3               	lda winwid		; window width in characters.
00202F  3               	sec
00202F  3               	sbc z80_e		; subtract box width.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc winlft		; add left edge of window.
00202F  3               	sta blft		; box left.
00202F  3               
00202F  3               	lda #<(FONT-256)		; font.
00202F  3               	sta grbase		; set up for text display.
00202F  3               	lda #>(FONT-256)
00202F  3               	sta grbase+1
00202F  3               
00202F  3               	lda TmpAddr+1		; restore message pointer.
00202F  3               	sta z80_l
00202F  3               	lda TmpAddr
00202F  3               	sta z80_h
00202F  3               
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set display coordinate.
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               dbox2:
00202F  3               	lda combyt		; get object number.
00202F  3               	sta z80_a
00202F  3               mod0:
00202F  3               	jsr always		; check inventory for display.
00202F  3               	cmp #255
00202F  3               	beq :+
00202F  3               	jmp dbox13		; not in inventory, skip this line.
00202F  3               :
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set left display position.
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_b		; store width.
00202F  3               dbox0:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	cmp #','		; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               	cmp #13			; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               
00202F  3               	cmp #141			; end of line?
00202F  3               	bne :+
00202F  3               	dec bwid
00202F  3               	jmp dbox7		; yes, next one.
00202F  3               :
00202F  3               	dec z80_b		; one less to display.
00202F  3               	and #127		; remove terminator.
00202F  3               
00202F  3               	jsr pchr		; display on screen.
00202F  3               
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a
00202F  3               	cmp #128		; end of message?
00202F  3               	bmi :+
00202F  3               	jmp dbox7		; yes, job done.
00202F  3               :
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	beq :+			; are any left?
00202F  3               	jmp dbox0		; yes, continue.
00202F  3               :
00202F  3               ;---------------------------------------------------
00202F  3               ; Reached limit of characters per line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dbox9:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #13			; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #128		; end of message?
00202F  3               	bcs :+
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox9
00202F  3               
00202F  3               ;---------------------------------------------------
00202F  3               ; Fill box to end of line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dboxf:
00202F  3               	lda #32			; space character.
00202F  3               	jsr pchr		; display character.
00202F  3               	dec z80_b
00202F  3               	beq :+
00202F  3               	jmp dboxf		; repeat for remaining chars on line.
00202F  3               :
00202F  3               	rts
00202F  3               dbox1:
00202F  3               	inc z80_l		; skip character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	jsr dboxf		; fill box out to right side.
00202F  3               dbox10:
00202F  3               	inc dispy		; y coordinate down a line next position.
00202F  3               	jmp dbox2		; next line.
00202F  3               dbox7:
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	bne :+			; are any left?
00202F  3               	jmp dbox11		; no, nothing to draw.
00202F  3               :
00202F  3               	jsr dboxf		; fill message to line.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Drawn the box menu, now select option.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox11:
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set bar position.
00202F  3               dbox14:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	bne dbox14		; yes, debounce it.
00202F  3               	jsr dbar		; draw bar.
00202F  3               dbox12:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	beq dbox12		; no, nothing.
00202F  3               	and #16			; fire button pressed?
00202F  3               	bne :+
00202F  3               mod1:
00202F  3               	jmp fstd		; yes, job done.
00202F  3               :
00202F  3               	jsr dbar		; delete bar.
00202F  3               
00202F  3               	lda joyval		; joystick reading.
00202F  3               	and #8			; going up?
00202F  3               	beq dboxu		; yes, go up.
00202F  3               
00202F  3               	ldx dispy		; vertical position of bar.
00202F  3               	inx			; look down.
00202F  3               	txa
00202F  3               	sec
00202F  3               	sbc btop		; find distance from top.
00202F  3               	cmp blen		; top of box.
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	inc dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               dboxu:
00202F  3               	lda dispy		; vertical position of bar.
00202F  3               	cmp btop		; are we at the top?
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	dec dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               fstd:
00202F  3               	lda dispy		; bar position.
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta varopt		; store the option.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Option not available.  Skip this line.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox13:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               	cmp #13			; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               
00202F  3               	bpl :+			; end of message?
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox13
00202F  3               dbox15:
00202F  3               	lda TmpAddr		; pop message pointer from the stack.
00202F  3               	sta z80_h
00202F  3               	lda TmpAddr+1
00202F  3               	sta z80_l
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Invert bar
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbar:
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set display coordinate.
00202F  3               	jsr gprad		; get printing address.
00202F  3               
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_c		; loop counter in c.
00202F  3               	lda z80_h
00202F  3               	sta z80_d		; store screen address high byte.
00202F  3               dbar1:
00202F  3               	ldx #7			; pixel height in b.
00202F  3               dbar0:
00202F  3               	ldy scrtab,x
00202F  3               	lda (scraddr),y		; get screen byte.
00202F  3               	eor #255		; reverse all bits.
00202F  3               	sta (scraddr),y		; write back to screen.
00202F  3               	dex			; next line down.
00202F  3               	bpl dbar0		; draw rest of character.
00202F  3               
00202F  3               	inc scraddr		; one char right.
00202F  3               	dec z80_c		; decrement character counter.
00202F  3               	bne dbar1		; repeat for whole line.
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Point to object
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  combyt
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  A = object number, A=255 if already in possession
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               invdis:
00202F  3               	lda z80_l		; store message text pointer.
00202F  3               	pha
00202F  3               	lda z80_h
00202F  3               	pha
00202F  3               	lda combyt		; object number.
00202F  3               	inc combyt		; ready for next one.
00202F  3               	jsr gotob		; check if we have object.
00202F  3               	tay
00202F  3               	pla
00202F  3               	sta z80_h
00202F  3               	pla
00202F  3               	sta z80_l
00202F  3               	tya
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Find option selected.
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  -
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected object
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               fopt:
00202F  3               	lda dispy
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta tmp+2		; option selected in b register.
00202F  3               	inc tmp+2
00202F  3               
00202F  3               	lda #0			; set to first item.
00202F  3               	sta combyt		; object number.
00202F  3               fopt0:
00202F  3               	jsr fobj		; find next object in inventory.
00202F  3               	dec tmp+2
00202F  3               	bne fopt0		; repeat for relevant steps down the list.
00202F  3               
00202F  3               	lda combyt		; get option.
00202F  3               	sta varopt		; store the option.
00202F  3               	dec varopt		; one less, due to where we increment combyt.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               fobj:
00202F  3               	ldy combyt		; object number.
00202F  3               	inc combyt		; ready for next item.
00202F  3               	tya
00202F  3               	jsr gotob		; do we have this item?
00202F  3               	cmp #255
00202F  3               	bne :+
00202F  3               	rts
00202F  3               :
00202F  3               	jmp fobj		; yes, it's on the list.
00202F  3               
00202F  3               ;bwid:	.byte 0              ; box/menu width.
00202F  3               ;blen:	.byte 0              ; box/menu height.
00202F  3               ;btop:	.byte 0              ; box coordinates.
00202F  3               ;blft:	.byte 0
00202F  3               .endif
00202F  3               
00202F  3               ;----------------------------------------------------
00202F  3               ; Delay routine 1/50 sec
00202F  3               ;
00202F  3               ; Wait 1/60 sec = 16666 usec
00202F  3               ; Wait 208 x 16 =  3328 usec
00202F  3               ;                 19994 usec
00202F  3               ; rts           =     6 usec
00202F  3               ; Total         = 20000 usec
00202F  3               ;----------------------------------------------------
00202F  3               
00202F  3               delay:
00202F  3  60             rts
002030  3  85 rr        	sta xtmp
002032  3               del_loop:
002032  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
002035  3               
002035  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
002037  3               delay1:
002037  3  61 80        	adc ($80,x)		;	 6 usec
002039  3  61 80        	adc ($80,x)		;	 6 usec
00203B  3  88           	dey			;	 2 usec
00203C  3  D0 F9        	bne delay1		;	 2 usec
00203E  3  EA           	nop			; 2 usec
00203F  3  EA           	nop			; 2 usec
002040  3               				; tot: 20000 usec
002040  3  C6 rr        	dec xtmp
002042  3  D0 EE        	bne del_loop
002044  3  60           	rts
002045  3               
002045  3               ;----------------------------------------------------
002045  3               ; Clear sprite table.
002045  3               ;
002045  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002045  3               ;----------------------------------------------------
002045  3               
002045  3               xspr:
002045  3  A9 FF        	lda #255		; clear byte.
002047  3  A2 00        	ldx #0			; length of table.
002049  3               xspr0:
002049  3  9D 81 34     	sta sprtab,x		; sprite table.
00204C  3  E8           	inx			; move to next byte.
00204D  3  E0 CC        	cpx #SPRBUF
00204F  3  D0 F8        	bne xspr0		; repeat for rest of table.
002051  3  60           	rts
002052  3               
002052  3               ;-------------------------------------------------------------
002052  3               ; Initialise all objects.
002052  3               ;
002052  3               ; Reset current room,y,x to start room,y,x for all objects
002052  3               ;-------------------------------------------------------------
002052  3               
002052  3               .if oflag
002052  3               iniob:
002052  3  A9 6C        	lda #<objdta 		; objects table.
002054  3  85 68        	sta z80_x
002056  3  A9 98        	lda #>objdta
002058  3  85 69        	sta z80_i
00205A  3               
00205A  3  AE 2A 20     	ldx numob 		; number of objects in the game.
00205D  3               iniob0:
00205D  3  A0 23        	ldy #35
00205F  3  B1 68        	lda (z80_ix),y 		; start screen.
002061  3  A0 20        	ldy #32
002063  3  91 68        	sta (z80_ix),y 		; set start screen.
002065  3               
002065  3  A0 24        	ldy #36
002067  3  B1 68        	lda (z80_ix),y 		; find start y.
002069  3  A0 21        	ldy #33
00206B  3  91 68        	sta (z80_ix),y 		; set start y.
00206D  3               
00206D  3  A0 25        	ldy #37
00206F  3  B1 68        	lda (z80_ix),y 		; get initial x.
002071  3  A0 22        	ldy #34
002073  3  91 68        	sta (z80_ix),y 		; set x coord.
002075  3               
002075  3  18           	clc 			; point to next object.
002076  3  A5 68        	lda z80_x
002078  3  69 26        	adc #38			; distance between objects.
00207A  3  85 68        	sta z80_x
00207C  3  90 02        	bcc :+
00207E  3  E6 69        	inc z80_i
002080  3               :
002080  3  CA           	dex 			; repeat.
002081  3  D0 DA        	bne iniob0
002083  3               
002083  3  60           	rts
002084  3               .endif
002084  3               
002084  3               ;-------------------------------------------------------------
002084  3               ; Screen synchronisation.
002084  3               ;
002084  3               ;  - read joystick/keyboard
002084  3               ;  - handle sound
002084  3               ;  - handle shrapnel every even frame
002084  3               ;  - sync framerate to 25 Hz
002084  3               ;-------------------------------------------------------------
002084  3               
002084  3               vsync:
002084  3               
002084  3               ; Save registers
002084  3               
002084  3  48           	pha
002085  3  98           	tya
002086  3  48           	pha
002087  3  8A           	txa
002088  3  48           	pha
002089  3               
002089  3               ; Read joystick/keyboard
002089  3               
002089  3  20 BE 2B     	jsr joykey		; read joystick/keyboard.
00208C  3               
00208C  3               ; Handle shrapnel every even frame
00208C  3               
00208C  3  A5 rr        	lda clock
00208E  3  29 01        	and #1
002090  3  D0 03        	bne:+
002092  3  20 09 21     	jsr proshr		; handle shrapnel every even frame
002095  3               :
002095  3               
002095  3               ; Handle sound
002095  3               
002095  3  AD AC 20     	lda sndtyp
002098  3  F0 00        	beq sndskip
00209A  3               sndloop:
00209A  3               
00209A  3               sndskip:
00209A  3               
00209A  3               ; Sync framerate to 25 Hz
00209A  3               
00209A  3               check_if_enough_frames_passed:
00209A  3  AD E0 9D     	lda frames_passed
00209D  3  C9 02        	cmp #2
00209F  3  90 F9        	bcc check_if_enough_frames_passed
0020A1  3               
0020A1  3  A9 00        	lda #0			; sync framerate 25 Hz
0020A3  3  8D E0 9D     	sta frames_passed
0020A6  3               
0020A6  3               ; Restore registers
0020A6  3               
0020A6  3  68           	pla
0020A7  3  AA           	tax
0020A8  3  68           	pla
0020A9  3  A8           	tay
0020AA  3  68           	pla
0020AB  3  60           	rts
0020AC  3               
0020AC  3  00           sndtyp:	.byte 0
0020AD  3               
0020AD  3               ;-----------------------------------------------
0020AD  3               ; Redraw the screen.
0020AD  3               ;
0020AD  3               ; Remove old copy of all sprites for redraw.
0020AD  3               ;-----------------------------------------------
0020AD  3               
0020AD  3               redraw:
0020AD  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
0020AF  3  48           	pha
0020B0  3  A5 68        	lda z80_x
0020B2  3  48           	pha
0020B3  3               
0020B3  3  20 E1 27     	jsr droom		; show screen layout.
0020B6  3               .if oflag
0020B6  3  20 0B 23     	jsr shwob		; draw objects.
0020B9  3               .endif
0020B9  3               numsp0:
0020B9  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0020BB  3  85 rr        	sta tmp
0020BD  3               
0020BD  3  A9 81        	lda #<sprtab		; sprite table.
0020BF  3  85 68        	sta z80_x
0020C1  3  A9 34        	lda #>sprtab
0020C3  3  85 69        	sta z80_i
0020C5  3               redrw0:
0020C5  3  A0 00        	ldy #0
0020C7  3  B1 68        	lda (z80_ix),y		; old sprite type.
0020C9  3  C9 FF        	cmp #255		; is it enabled?
0020CB  3  F0 0B        	beq redrw1 		; no, find next one.
0020CD  3               
0020CD  3  A0 03        	ldy #3
0020CF  3  B1 68        	lda (z80_ix),y 		; sprite y.
0020D1  3  C9 B1        	cmp #177		; beyond maximum?
0020D3  3  B0 03        	bcs redrw1		; yes, nothing to draw.
0020D5  3               
0020D5  3  20 4A 2F     	jsr sspria		; show single sprite.
0020D8  3               redrw1:
0020D8  3  18           	clc			; next sprite.
0020D9  3  A5 68        	lda z80_x
0020DB  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
0020DD  3  85 68        	sta z80_x
0020DF  3  90 02        	bcc :+
0020E1  3  E6 69        	inc z80_i
0020E3  3               :
0020E3  3  C6 rr        	dec tmp			; repeat for remaining sprites.
0020E5  3  D0 DE        	bne redrw0
0020E7  3               rpblc1:
0020E7  3               ;	jsr dshrp		; redraw shrapnel.
0020E7  3               
0020E7  3               .if aflag
0020E7  3               	jsr rbloc		; draw blocks for this screen
0020E7  3               .endif
0020E7  3  68           	pla			; retrieve sprite pointer.
0020E8  3  85 68        	sta z80_x
0020EA  3  68           	pla
0020EB  3  85 69        	sta z80_i
0020ED  3               
0020ED  3  60           	rts
0020EE  3               
0020EE  3               ;----------------------------------------------------------------------
0020EE  3               ; Clear screen routine.
0020EE  3               ;
0020EE  3               ; Fill screenmem $e400-$fbff with ScrFillByte
0020EE  3               ;----------------------------------------------------------------------
0020EE  3               
0020EE  3               cls:
0020EE  3  A9 E4        	lda #>ScreenAddr		; screen address.
0020F0  3  8D F9 20     	sta clsloop+2
0020F3  3  A9 00        	lda #ScrFillByte
0020F5  3               .if iflag
0020F5  3               	eor #$ff
0020F5  3               .endif
0020F5  3  A0 00        	ldy #0
0020F7  3               clsloop:
0020F7  3  99 00 E4     	sta ScreenAddr,y
0020FA  3  C8           	iny
0020FB  3  D0 FA        	bne clsloop
0020FD  3  EE F9 20     	inc clsloop+2
002100  3  AE F9 20     	ldx clsloop+2
002103  3  E0 FC        	cpx #>(ScreenAddr+$1800)
002105  3  D0 F0        	bne clsloop
002107  3  60           	rts
002108  3               
002108  3               ;----------------------------------------------------------------------
002108  3               ; Atomic palette is static
002108  3               ;----------------------------------------------------------------------
002108  3               
002108  3               setpal:
002108  3  60           	rts
002109  3               
002109  3               ;----------------------------------------------------------------------
002109  3               ; FODDER check
002109  3               ;----------------------------------------------------------------------
002109  3               
002109  3               .if pflag .or dflag
002109  3               fdchk:
002109  3               	cmp #FODDER 		; is it fodder?
002109  3               	beq :+
002109  3               	rts 			; no.
002109  3               :
002109  3               	lda #0			; wipe fodder in MAP
002109  3               	ldy #0
002109  3               	sta (bufaddr),y 	; rewrite block type.
002109  3               
002109  3               	lda dispx		; x=x/8
002109  3               	pha
002109  3               	lsr a
002109  3               	lsr a
002109  3               	lsr a
002109  3               	sta dispx
002109  3               
002109  3               	lda dispy		; y=y/8
002109  3               	pha
002109  3               	lsr a
002109  3               	lsr a
002109  3               	lsr a
002109  3               	sta dispy
002109  3               
002109  3               	lda #0 			; block to write.
002109  3               	jsr pattr 		; write block.
002109  3               
002109  3               	pla
002109  3               	sta dispy
002109  3               	pla
002109  3               	sta dispx
002109  3               	rts
002109  3               .endif
002109  3               
002109  3               ;----------------------------------------------------
002109  3               ; Scrolly text and puzzle variables.
002109  3               ;----------------------------------------------------
002109  3               
002109  3               .if sflag
002109  3               txtbit:	.byte 128		; bit to write.
002109  3               txtwid:	.byte 16		; width of ticker message.
002109  3               txtpos:	.word msgdat
002109  3               txtini:	.word msgdat
002109  3               txtscr:	.word ScreenAddr
002109  3               .endif
002109  3               
002109  3               ;----------------------------------------------------
002109  3               ; Specialist routines.
002109  3               ; Process shrapnel.
002109  3               ;----------------------------------------------------
002109  3               proshr:
002109  3               .if pflag
002109  3               	lda #<SHRAPN		; table.
002109  3               	sta z80_x
002109  3               	lda #>SHRAPN
002109  3               	sta z80_i
002109  3               
002109  3               	lda #NUMSHR		; shrapnel pieces to process.
002109  3               	sta shrctr
002109  3               prosh0:
002109  3               	ldy #0
002109  3               	lda (z80_ix),y		; on/off marker.
002109  3               	asl a
002109  3               proshx:
002109  3               	bcs :+
002109  3               	jsr prosh1 		; on, so process it.
002109  3               :
002109  3               	clc
002109  3               	lda z80_x
002109  3               	adc #SHRSIZ
002109  3               	sta z80_x
002109  3               	bcc :+
002109  3               	inc z80_i
002109  3               :
002109  3               	dec shrctr		; round again.
002109  3               	bne prosh0
002109  3               .endif
002109  3               .if sflag
002109  3               	jsr scrly
002109  3               .endif
002109  3  60           	rts
00210A  3               
00210A  3               .if pflag
00210A  3               ;shrctr:	.byte 0
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Proces shrapnel piece
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               prosh1:
00210A  3               	jsr plot 		; delete the pixel.
00210A  3               
00210A  3               	lda #<shrptr		; shrapnel routine pointers.
00210A  3               	sta z80_l
00210A  3               	lda #>shrptr
00210A  3               	sta z80_h
00210A  3               
00210A  3               	ldy #0
00210A  3               	lda (z80_ix),y		; restore shrapnel type.
00210A  3               	jsr prosh2 		; run the routine.
00210A  3               	jsr chkxy		; check x and y are good before we redisplay.
00210A  3               
00210A  3               	lda #<SHRSIZ 		; distance to next.
00210A  3               	sta z80_e
00210A  3               	lda #>SHRSIZ
00210A  3               	sta z80_d
00210A  3               	rts
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Run the routine
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               prosh2:
00210A  3               	asl a 			; 2 bytes per address.
00210A  3               	tay
00210A  3               	lda shrptr,y
00210A  3               	sta z80_l
00210A  3               	lda shrptr+1,y 		; fetch high byte from table.
00210A  3               	sta z80_h
00210A  3               	jmp (z80_hl) 		; jump to routine.
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Paricle routine table
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               shrptr:	.word laser		; laser.
00210A  3               	.word trail		; vapour trail.
00210A  3               	.word shrap		; shrapnel from explosion.
00210A  3               	.word dotl		; horizontal starfield left.
00210A  3               	.word dotr		; horizontal starfield right.
00210A  3               	.word dotu		; vertical starfield up.
00210A  3               	.word dotd		; vertical starfield down.
00210A  3               	.word ptcusr		; user particle.
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Explosion shrapnel.
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               shrap:
00210A  3               	ldy #1
00210A  3               	lda (z80_ix),y 		; get the angle.
00210A  3               	clc
00210A  3               	adc #<shrsin		; shrapnel sine table.
00210A  3               	sta z80_l
00210A  3               	lda #>shrsin
00210A  3               	adc #0
00210A  3               	sta z80_h
00210A  3               
00210A  3               	ldy #0
00210A  3               	lda (z80_hl),y 		; fetch value from table.
00210A  3               	sta z80_e
00210A  3               	inc z80_l 		; next byte of table.
00210A  3               	bne :+
00210A  3               	inc z80_h
00210A  3               :
00210A  3               	ldy #0
00210A  3               	lda (z80_hl),y		; fetch value from table.
00210A  3               	sta z80_d
00210A  3               	inc z80_l		; next byte of table.
00210A  3               	bne :+
00210A  3               	inc z80_h
00210A  3               :
00210A  3               	ldy #0
00210A  3               	lda (z80_hl),y 		; fetch value from table.
00210A  3               	sta z80_c
00210A  3               	inc z80_l 		; next byte of table.
00210A  3               	bne :+
00210A  3               	inc z80_h
00210A  3               :
00210A  3               	ldy #0
00210A  3               	lda (z80_hl),y 		; fetch value from table.
00210A  3               	sta z80_b
00210A  3               
00210A  3               	ldy #2
00210A  3               	lda (z80_ix),y 		; x coordinate in hl.
00210A  3               	clc
00210A  3               	adc z80_e		; add sine lb
00210A  3               	sta (z80_ix),y		; store new coordinate lb.
00210A  3               	ldy #3
00210A  3               	lda (z80_ix),y
00210A  3               	adc z80_d		; add sine hb
00210A  3               	sta (z80_ix),y		; store new coordinate hb.
00210A  3               
00210A  3               	ldy #4
00210A  3               	lda (z80_ix),y	 	; y coordinate in hl.
00210A  3               	clc
00210A  3               	adc z80_c		; add cosine lb
00210A  3               	sta (z80_ix),y		; store new coordinate lb.
00210A  3               	ldy #5
00210A  3               	lda (z80_ix),y
00210A  3               	adc z80_b		; add cosine lb
00210A  3               	sta (z80_ix),y		; store new coordinate hb.
00210A  3               
00210A  3               	rts
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Move dots
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               dotl:
00210A  3               	ldy #5
00210A  3               	lda (z80_ix),y
00210A  3               	sec
00210A  3               	sbc #1		 	; move left.
00210A  3               	sta (z80_ix),y
00210A  3               	rts
00210A  3               dotr:
00210A  3               	ldy #5
00210A  3               	lda (z80_ix),y
00210A  3               	clc
00210A  3               	adc #1		 	; move left.
00210A  3               	sta (z80_ix),y
00210A  3               	rts
00210A  3               dotu:
00210A  3               	ldy #3
00210A  3               	lda (z80_ix),y
00210A  3               	sec
00210A  3               	sbc #1		 	; move up.
00210A  3               	sta (z80_ix),y
00210A  3               	rts
00210A  3               dotd:
00210A  3               	ldy #3
00210A  3               	lda (z80_ix),y
00210A  3               	clc
00210A  3               	adc #1			; move down.
00210A  3               	sta (z80_ix),y
00210A  3               	rts
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Check if coordinates are ok before redrawing at new position.
00210A  3               ;
00210A  3               ; left:   X>L		X=L	Ok
00210A  3               ; right:  R+15>X	X=R	Ok
00210A  3               ; top:    Y>T		Y=T	Ok
00210A  3               ; bottom: B+15>Y	Y=B	Ok
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               chkxy:
00210A  3               
00210A  3               ; top:    Y>T		Y=T	Ok
00210A  3               
00210A  3               	ldy #3
00210A  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00210A  3               	cmp wntopx		; window top.
00210A  3               	bcs :+			; compare with top window limit.
00210A  3               	jmp kilshr		; out of window, kill shrapnel.
00210A  3               :
00210A  3               ; left:   X>L		X=L	Ok
00210A  3               
00210A  3               	ldy #5
00210A  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00210A  3               	cmp wnlftx		; left edge.
00210A  3               	bcs :+			; compare with left window limit.
00210A  3               	jmp kilshr		; out of window, kill shrapnel.
00210A  3               :
00210A  3               ; bottom: B+15>Y	Y=B	Ok
00210A  3               
00210A  3               	lda wnbotx		; point to bottom.
00210A  3               	clc
00210A  3               	adc #15
00210A  3               	ldy #3
00210A  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00210A  3               	bcs :+			; compare with shrapnel x coordinate.
00210A  3               	jmp kilshr		; off screen, kill shrapnel..
00210A  3               :
00210A  3               ; right:  R+15>X	X=R	Ok
00210A  3               
00210A  3               	lda wnrgtx		; point to right edge.
00210A  3               	clc
00210A  3               	adc #15
00210A  3               	ldy #5
00210A  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00210A  3               	bcs :+			; compare with window limit.
00210A  3               	jmp kilshr		; off screen, kill shrapnel.
00210A  3               :
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Drop through.
00210A  3               ; Display shrapnel.
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               plot:
00210A  3               	ldy #3
00210A  3               	lda (z80_ix),y		; y integer.
00210A  3               	sta dispy	 	; workspace coordinates.
00210A  3               	ldy #5
00210A  3               	lda (z80_ix),y	 	; x integer.
00210A  3               	sta dispx 		; workspace coordinates.
00210A  3               
00210A  3               	ldy #0
00210A  3               	lda (z80_ix),y 		; type.
00210A  3               	bne :+			; is it a laser?
00210A  3               	jmp plot1 		; yes, draw laser instead.
00210A  3               :
00210A  3               plot0:
00210A  3               	lda dispx		; which pixel within byte do we
00210A  3               	and #7			; want to set first?
00210A  3               	tay
00210A  3               	lda dots,y 		; table of small pixel positions.
00210A  3               	sta z80_e 		; get value.
00210A  3               
00210A  3               	jsr scadd 		; screen address.
00210A  3               	ldy #0
00210A  3               	lda (scraddr),y		; see what's already there.
00210A  3               	eor z80_e
00210A  3               	sta (scraddr),y 	; put back on screen.
00210A  3               	rts
00210A  3               
00210A  3               plot1:
00210A  3               	jsr scadd 		; screen address.
00210A  3               	ldy #0
00210A  3               	lda (scraddr),y 	; fetch byte there.
00210A  3               	eor #255 		; toggle all bits.
00210A  3               	sta (scraddr),y 	; new byte.
00210A  3               	rts
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Switch off shrapnel
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               kilshr:
00210A  3               	lda #128
00210A  3               	ldy #0
00210A  3               	sta (z80_ix),y	; switch off shrapnel.
00210A  3               	rts
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Sine/cosine table
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               shrsin:	.word 0,1024,391,946,724,724,946,391
00210A  3               	.word 1024,0,946,65144,724,64811,391,64589
00210A  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
00210A  3               	.word 64512,0,64589,391,64811,724,65144,946
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Create trail
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               trail:
00210A  3               	ldy #1
00210A  3               	lda (z80_ix),y 	; time remaining.
00210A  3               	sec
00210A  3               	sbc #1
00210A  3               	sta (z80_ix),y
00210A  3               	bne :+
00210A  3               	jmp trailk		; time to switch it off.
00210A  3               :
00210A  3               	jsr qrand		; get a random number.
00210A  3               	lsr a 			; x or y axis?
00210A  3               	bcc :+
00210A  3               	jmp trailv		; use y.
00210A  3               :
00210A  3               ; Trail horizontal
00210A  3               
00210A  3               	lsr a 			; which direction?
00210A  3               	bcc :+
00210A  3               	jmp traill		; go left.
00210A  3               :
00210A  3               ; Trail right
00210A  3               
00210A  3               	ldy #5
00210A  3               	lda (z80_ix),y
00210A  3               	clc
00210A  3               	adc #1	 		; go right.
00210A  3               	sta (z80_ix),y
00210A  3               	rts
00210A  3               
00210A  3               ; Trail left
00210A  3               
00210A  3               traill:
00210A  3               	ldy #5
00210A  3               	lda (z80_ix),y
00210A  3               	sec
00210A  3               	sbc #1 			; go left.
00210A  3               	sta (z80_ix),y
00210A  3               	rts
00210A  3               
00210A  3               ; Trail vertical
00210A  3               
00210A  3               trailv:
00210A  3               	lsr a		 	; which direction?
00210A  3               	bcc :+
00210A  3               	jmp trailu		; go up.
00210A  3               :
00210A  3               ; Trail down
00210A  3               
00210A  3               	ldy #3
00210A  3               	lda (z80_ix),y
00210A  3               	clc
00210A  3               	adc #1 			; go down.
00210A  3               	sta (z80_ix),y
00210A  3               	rts
00210A  3               
00210A  3               ; Trail up
00210A  3               
00210A  3               trailu:
00210A  3               	ldy #3
00210A  3               	lda (z80_ix),y
00210A  3               	sec
00210A  3               	sbc #1 			; go up.
00210A  3               	sta (z80_ix),y
00210A  3               	rts
00210A  3               
00210A  3               ; Kill trail
00210A  3               
00210A  3               trailk:
00210A  3               	lda #200		; set off-screen to kill vapour trail.
00210A  3               	ldy #3
00210A  3               	sta (z80_ix),y
00210A  3               	rts
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Create laser beam
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               laser:
00210A  3               	ldy #1
00210A  3               	lda (z80_ix),y 		; direction.
00210A  3               	ror a 			; left or right?
00210A  3               	bcc :+
00210A  3               	jmp laserl		; move left.
00210A  3               :
00210A  3               ; Laser right
00210A  3               
00210A  3               	lda #8			; distance to travel.
00210A  3               	sta z80_b
00210A  3               	jmp laserm		; move laser.
00210A  3               
00210A  3               ; Laser left
00210A  3               
00210A  3               laserl:
00210A  3               	lda #248		; distance to travel.
00210A  3               	sta z80_b
00210A  3               laserm:
00210A  3               	ldy #5
00210A  3               	lda (z80_ix),y		; x position.
00210A  3               	clc
00210A  3               	adc z80_b		; add distance.
00210A  3               	sta (z80_ix),y		; set new x coordinate.
00210A  3               
00210A  3               ; Test new block.
00210A  3               
00210A  3               	sta dispx 		; set x for block collision detection purposes.
00210A  3               	ldy #3
00210A  3               	lda (z80_ix),y 		; get y.
00210A  3               	sta dispy		; set coordinate for collision test.
00210A  3               	jsr tstbl 		; get block type there.
00210A  3               	cmp #WALL		; is it solid?
00210A  3               	bne :+
00210A  3               	jmp trailk		; yes, it cannot pass.
00210A  3               :
00210A  3               .if pflag .or dflag
00210A  3                       cmp #FODDER             ; is it fodder?
00210A  3                       bne :+
00210A  3                       jsr fdchk               ; remove fodder block.
00210A  3                       jmp trailk              ; destroy laser.
00210A  3               :
00210A  3               .endif
00210A  3                       rts                     ; no, ignore it.
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Dots mask
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               dots:	.byte 128,64,32,16,8,4,2,1
00210A  3               
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Plot, preserving de.
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               plotde:
00210A  3               	lda z80_d 		; put de on stack.
00210A  3               	pha
00210A  3               	lda z80_e
00210A  3               	pha
00210A  3               
00210A  3               	jsr plot 		; plot pixel.
00210A  3               
00210A  3               	pla			; restore de from stack.
00210A  3               	sta z80_e
00210A  3               	pla
00210A  3               	sta z80_d
00210A  3               
00210A  3               	rts
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Shoot a laser.
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               shoot:
00210A  3               	sta z80_c		; store direction in c register.
00210A  3               	ldy #8
00210A  3               	lda (z80_ix),y 		; y coordinate.
00210A  3               	clc
00210A  3               shoot1:
00210A  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
00210A  3               	sta z80_l 		; puty y coordinate in l.
00210A  3               
00210A  3               	ldy #9
00210A  3               	lda (z80_ix),y 		; x coordinate in h.
00210A  3               	sta z80_h
00210A  3               
00210A  3               	lda z80_i		; store pointer to sprite.
00210A  3               	pha
00210A  3               	lda z80_x
00210A  3               	pha
00210A  3               
00210A  3               	jsr fpslot 		; find particle slot.
00210A  3               	bcs :+
00210A  3               	jmp vapou2		; failed, restore ix.
00210A  3               :
00210A  3               	lda #0
00210A  3               	ldy #0
00210A  3               	sta (z80_ix),y 		; set up a laser.
00210A  3               
00210A  3               	lda z80_c
00210A  3               	ldy #1
00210A  3               	sta (z80_ix),y 		; set the direction.
00210A  3               
00210A  3               	lda z80_l
00210A  3               	ldy #3
00210A  3               	sta (z80_ix),y		; set y coordinate.
00210A  3               
00210A  3               	ror z80_c		; check direction we want.
00210A  3               	bcc :+
00210A  3               	jmp shootr		; shoot right.
00210A  3               :
00210A  3               	lda z80_h		; X position.
00210A  3               shoot0:
00210A  3               	and #248		; align on character boundary.
00210A  3               	ldy #5
00210A  3               	sta (z80_ix),y		; set x coordinate.
00210A  3               	jmp vapou0 		; draw first image.
00210A  3               shootr:
00210A  3               	lda z80_h		; x position.
00210A  3               	clc
00210A  3               	adc #15			; look right.
00210A  3               	jmp shoot0		; align and continue.
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Create a bit of vapour trail.
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               vapour:
00210A  3               	lda z80_i		; store pointer to sprite.
00210A  3               	pha
00210A  3               	lda z80_x
00210A  3               	pha
00210A  3               
00210A  3               	ldy #8
00210A  3               	lda (z80_ix),y 		; y coordinate.
00210A  3               	clc
00210A  3               vapou3:
00210A  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
00210A  3               	sta z80_l
00210A  3               
00210A  3               	ldy #9
00210A  3               	lda (z80_ix),y 		; x coordinate.
00210A  3               	adc #7
00210A  3               	sta z80_h
00210A  3               
00210A  3               	jsr fpslot 		; find particle slot.
00210A  3               	bcc :+
00210A  3               	jmp vapou1		; no, we can use it.
00210A  3               :
00210A  3               vapou2:
00210A  3               	pla
00210A  3               	sta z80_x
00210A  3               	pla
00210A  3               	sta z80_i
00210A  3               	rts
00210A  3               vapou1:
00210A  3               	lda z80_l
00210A  3               	ldy #3
00210A  3               	sta (z80_ix),y		; set up y.
00210A  3               
00210A  3               	lda z80_h
00210A  3               	ldy #5
00210A  3               	sta (z80_ix),y 		; set up x coordinate.
00210A  3               
00210A  3               	jsr qrand		; get quick random number.
00210A  3               	and #15			; random time.
00210A  3               	clc
00210A  3               	adc #15			; minimum time on screen.
00210A  3               	ldy #1
00210A  3               	sta (z80_ix),y		; set time on screen.
00210A  3               
00210A  3               	lda #1
00210A  3               	ldy #0
00210A  3               	sta (z80_ix),y		; define particle as vapour trail.
00210A  3               vapou0:
00210A  3               	jsr chkxy		; plot first position.
00210A  3               	jmp vapou2
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Create a user particle.
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               ptusr:
00210A  3               	sta z80_f		; store timer.
00210A  3               
00210A  3               	ldy #8
00210A  3               	lda (z80_ix),y 		; y coordinate.
00210A  3               	clc
00210A  3               	adc #7			; mid-point of sprite.
00210A  3               	sta z80_l
00210A  3               
00210A  3               	ldy #9
00210A  3               	lda (z80_ix),y 		; x coordinate.
00210A  3               	clc
00210A  3               	adc #7			; mid-point of sprite.
00210A  3               	sta z80_h
00210A  3               
00210A  3               	jsr fpslot 		; find particle slot.
00210A  3               	bcs ptusr1
00210A  3               	rts 			; out of slots, can't generate anything.
00210A  3               ptusr1:
00210A  3               	lda z80_l
00210A  3               	ldy #3
00210A  3               	sta (z80_ix),y 		; set up y.
00210A  3               
00210A  3               	lda z80_h
00210A  3               	ldy #5
00210A  3               	sta (z80_ix),y		; set up x coordinate.
00210A  3               
00210A  3               	lda z80_f 		; restore timer.
00210A  3               	ldy #1
00210A  3               	sta (z80_ix),y		; set time on screen.
00210A  3               
00210A  3               	lda #7
00210A  3               	ldy #0
00210A  3               	sta (z80_ix),y		; define particle as user particle.
00210A  3               
00210A  3               	jmp chkxy		; plot first position.
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Create a vertical or horizontal star.
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               star:
00210A  3               	lda z80_i		; store pointer to sprite.
00210A  3               	pha
00210A  3               	lda z80_x
00210A  3               	pha
00210A  3               
00210A  3               	jsr fpslot 		; find particle slot.
00210A  3               	bcs star7		; found one we can use.
00210A  3               star0:
00210A  3               	pla 			; restore sprite pointer.
00210A  3               	sta z80_x
00210A  3               	pla
00210A  3               	sta z80_i
00210A  3               	rts 			; out of slots, can't generate anything.
00210A  3               star7:
00210A  3               	lda z80_c		; direction.
00210A  3               	and #3 			; is it left?
00210A  3               	bne :+
00210A  3               	jmp star1 		; yes, it's left.
00210A  3               :
00210A  3               	cmp #1 			; is it right?
00210A  3               	bne :+
00210A  3               	jmp star2 		; yes, it's right.
00210A  3               :
00210A  3               	cmp #2 			; is it up?
00210A  3               	bne :+
00210A  3               	jmp star3 		; yes, it's up.
00210A  3               :
00210A  3               	ldy wntopx 		; get edge of screen.
00210A  3               	iny			; down one pixel.
00210A  3               	tya
00210A  3               star8:
00210A  3               	ldy #3
00210A  3               	sta (z80_ix),y 		; set y coord.
00210A  3               	jsr qrand 		; get quick random number.
00210A  3               star9:
00210A  3               	ldy #5
00210A  3               	sta (z80_ix),y		; set x position.
00210A  3               
00210A  3               	lda z80_c		; direction.
00210A  3               	and #3			; zero to three.
00210A  3               	clc
00210A  3               	adc #3			; 3 to 6 for starfield.
00210A  3               	ldy #0
00210A  3               	sta (z80_ix),y		; define particle as star.
00210A  3               	jsr chkxy		; plot first position.
00210A  3               	jmp star0
00210A  3               star1:
00210A  3               	jsr qrand		; get quick random number.
00210A  3               	ldy #3
00210A  3               	sta (z80_ix),y 		; set y coord.
00210A  3               
00210A  3               	lda wnrgtx 		; get edge of screen.
00210A  3               	clc
00210A  3               	adc #15			; add width of sprite minus 1.
00210A  3               	jmp star9
00210A  3               star2:
00210A  3               	jsr qrand 		; get quick random number.
00210A  3               	ldy #3
00210A  3               	sta (z80_ix),y		; set y coord.
00210A  3               
00210A  3               	lda wnlftx		; get edge of screen.
00210A  3               	jmp star9
00210A  3               star3:
00210A  3               	lda wnbotx 		; get edge of screen.
00210A  3               	clc
00210A  3               	adc #15 		; height of sprite minus one pixel.
00210A  3               	jmp star8
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Find particle slot for lasers or vapour trail.
00210A  3               ; can't use alternate accumulator.
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               fpslot:
00210A  3               	lda #<SHRAPN 		; shrapnel table.
00210A  3               	sta z80_x
00210A  3               	lda #>SHRAPN
00210A  3               	sta z80_i
00210A  3               
00210A  3               	lda #NUMSHR		; number of pieces in table.
00210A  3               	sta z80_b
00210A  3               fpslt0:
00210A  3               	ldy #0
00210A  3               	lda (z80_ix),y		; get type.
00210A  3               	asl a  			; is this slot in use?
00210A  3               	bcc :+
00210A  3               	rts			; no, we can use it.
00210A  3               :
00210A  3               	clc			; point to more shrapnel.
00210A  3               	lda z80_x
00210A  3               	adc #SHRSIZ
00210A  3               	sta z80_x
00210A  3               	bcc :+
00210A  3               	inc z80_i
00210A  3               :
00210A  3               	dec z80_b		; repeat for all shrapnel.
00210A  3               	bne fpslt0
00210A  3               
00210A  3               	clc
00210A  3               	rts 			; out of slots, can't generate anything.
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Create an explosion at sprite position.
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               explod:
00210A  3               	sta z80_c 		; particles to create.
00210A  3               
00210A  3               	lda z80_i 		; store pointer to sprite.
00210A  3               	pha
00210A  3               	lda z80_x
00210A  3               	pha
00210A  3               
00210A  3               	ldy #8
00210A  3               	lda (z80_ix),y 		; y coordinate.
00210A  3               	sta z80_l
00210A  3               	ldy #9
00210A  3               	lda (z80_ix),y		; x coordinate.
00210A  3               	sta z80_h
00210A  3               
00210A  3               	lda #<SHRAPN		; shrapnel table.
00210A  3               	sta z80_x
00210A  3               	lda #>SHRAPN
00210A  3               	sta z80_i
00210A  3               
00210A  3               	lda #NUMSHR		; number of pieces in table.
00210A  3               	sta explcnt
00210A  3               expld0:
00210A  3               	ldy #0
00210A  3               	lda (z80_ix),y		; get type.
00210A  3               	asl a 			; is this slot in use?
00210A  3               	bcs expld1		; no, we can use it.
00210A  3               expld2:
00210A  3               	clc
00210A  3               	lda z80_x
00210A  3               	adc #SHRSIZ
00210A  3               	sta z80_x
00210A  3               	bcc :+
00210A  3               	inc z80_i
00210A  3               :
00210A  3               	dec explcnt		; repeat for all shrapnel.
00210A  3               	bne expld0
00210A  3               expld3:
00210A  3               	pla			; restore sprite pointer.
00210A  3               	sta z80_x
00210A  3               	pla
00210A  3               	sta z80_i
00210A  3               	rts 			; out of slots, can't generate any more.
00210A  3               
00210A  3               expld1:
00210A  3               	lda z80_c		; shrapnel counter.
00210A  3               	and #15			; 0 to 15.
00210A  3               	clc			; add to x.
00210A  3               	adc z80_l
00210A  3               	ldy #3
00210A  3               	sta (z80_ix),y		; y coord.
00210A  3               
00210A  3               	lda seed3 		; crap random number.
00210A  3               	and #15			; 0 to 15.
00210A  3               	clc 			; add to y.
00210A  3               	adc z80_h
00210A  3               	ldy #5
00210A  3               	sta (z80_ix),y		; x coord.
00210A  3               
00210A  3               	lda #2
00210A  3               	ldy #0
00210A  3               	sta (z80_ix),y		; switch it on.
00210A  3               
00210A  3               	jsr chkxy		; plot first position.
00210A  3               	jsr qrand		; quick random angle.
00210A  3               	and #60 		; keep within range.
00210A  3               	ldy #1
00210A  3               	sta (z80_ix),y		; angle.
00210A  3               
00210A  3               	dec z80_c		; one less piece of shrapnel to generate.
00210A  3               	bne expld2 		; back to main explosion loop.
00210A  3               	jmp expld3 		; restore sprite pointer and exit.
00210A  3               
00210A  3               ;explcnt:	.byte 0
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Quick random
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               qrand:
00210A  3               	jsr random		; r register.
00210A  3               	eor seed3		; combine with seed.
00210A  3               	sta seed3 		; new seed.
00210A  3               	rts
00210A  3               
00210A  3               ;seed3:	.byte 0
00210A  3               
00210A  3               ;----------------------------------------------------
00210A  3               ; Display all shrapnel.
00210A  3               ;----------------------------------------------------
00210A  3               
00210A  3               dshrp:
00210A  3               	lda #<plotde		; display routine.
00210A  3               	sta proshx+1
00210A  3               	lda #>plotde
00210A  3               	sta proshx+2
00210A  3               	jsr proshr		; process shrapnel.
00210A  3               
00210A  3               	lda #<prosh1		; processing routine.
00210A  3               	sta proshx+1
00210A  3               	lda #>prosh1
00210A  3               	sta proshx+2
00210A  3               	rts
00210A  3               
00210A  3               ;------------------------------------------------------
00210A  3               ; Particle engine.
00210A  3               ;
00210A  3               ; Init particle data for 55 particles in SHRAPN table.
00210A  3               ; Every particle has 6 bytes.
00210A  3               ;
00210A  3               ; global:	-
00210A  3               ; local:	x,y,hl
00210A  3               ; calls:	-
00210A  3               ;------------------------------------------------------
00210A  3               
00210A  3               inishr:
00210A  3               	lda #<SHRAPN 		; table.
00210A  3               	sta z80_l
00210A  3               	lda #>SHRAPN
00210A  3               	sta z80_h
00210A  3               
00210A  3               	ldy #0
00210A  3               	ldx #NUMSHR		; shrapnel pieces to process.
00210A  3               inish0:
00210A  3               	lda #255 		; kill the shrapnel.
00210A  3               	sta (z80_hl),y
00210A  3               
00210A  3               	clc 			; point there.
00210A  3               	lda z80_l
00210A  3               	adc #SHRSIZ		; distance to next.
00210A  3               	sta z80_l
00210A  3               	bcc :+
00210A  3               	inc z80_h
00210A  3               :
00210A  3               	dex
00210A  3               	bne inish0 		; round again.
00210A  3               	rts
00210A  3               
00210A  3               ;------------------------------------------------------
00210A  3               ; Check for collision between laser and sprite.
00210A  3               ;------------------------------------------------------
00210A  3               
00210A  3               lcol:
00210A  3               	lda #<SHRAPN		; shrapnel table.
00210A  3               	sta z80_l
00210A  3               	lda #>SHRAPN
00210A  3               	sta z80_h
00210A  3               
00210A  3               	lda #NUMSHR		; number of pieces in table.
00210A  3               	sta z80_b
00210A  3               lcol0:
00210A  3               	ldy #0
00210A  3               	lda (z80_hl),y 		; get type.
00210A  3               	beq lcol1		; yes, check collision.
00210A  3               lcol3:
00210A  3               	clc			; point to more shrapnel.
00210A  3               	lda z80_l
00210A  3               	adc #SHRSIZ
00210A  3               	sta z80_l
00210A  3               	bcc :+
00210A  3               	inc z80_h
00210A  3               :
00210A  3               	dec z80_b		; repeat for all shrapnel.
00210A  3               	bne lcol0
00210A  3               	rts 			; no collision, carry not set.
00210A  3               lcol1:
00210A  3               	ldy #3
00210A  3               	lda (z80_hl),y		; get y.
00210A  3               	sec
00210A  3               	ldy #8
00210A  3               	sbc (z80_ix),y		; subtract sprite y.
00210A  3               lcolh:
00210A  3               	cmp #SPR_HGT 		; within range?
00210A  3               	bcc :+
00210A  3               	jmp lcol2		; no, missed.
00210A  3               :
00210A  3               	ldy #5
00210A  3               	lda (z80_hl),y 		; get x.
00210A  3               	sec
00210A  3               	ldy #9
00210A  3               	sbc (z80_ix),y 		; subtract sprite y.
00210A  3               	cmp #16			; within range?
00210A  3               	bcs :+
00210A  3               	jmp lcol4 		; yes, collision occurred.
00210A  3               :
00210A  3               lcol2:
00210A  3               	jmp lcol3
00210A  3               lcol4:
00210A  3               	sec
00210A  3               	rts 			; return with carry set for collision.
00210A  3               .endif
00210A  3               
00210A  3               ;------------------------------------------------------
00210A  3               ; Main game engine code starts here.
00210A  3               ; After initialisation, mloop is the main loop
00210A  3               ;------------------------------------------------------
00210A  3               
00210A  3               game:
00210A  3               
00210A  3               ; Set up screen address table.
00210A  3               
00210A  3               setsat:
00210A  3  A9 00        	lda #<ScreenAddr		; start of screen.
00210C  3  85 rr        	sta scraddr
00210E  3  A9 E4        	lda #>ScreenAddr
002110  3  85 rr        	sta scraddr+1
002112  3               
002112  3  A0 00        	ldy #0			; vertical lines on screen.
002114  3               setsa0:
002114  3  A5 rr        	lda scraddr
002116  3  99 00 E0     	sta SCADTB_lb,y		; write low byte.
002119  3  A5 rr        	lda scraddr+1
00211B  3  C0 C0        	cpy #192		; vertical lines on screen.
00211D  3  90 02        	bcc :+
00211F  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
002121  3               :
002121  3  99 00 E1     	sta SCADTB_hb,y		; write high byte.
002124  3  20 33 30     	jsr nline		; next line down.
002127  3  C8           	iny			; next position in table.
002128  3  D0 EA        	bne setsa0
00212A  3               
00212A  3               ; Init graphics mode
00212A  3               
00212A  3  A9 F0        	lda #ScrMode		; graphics mode
00212C  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
00212F  3  20 08 21     	jsr setpal 		; set up palette.
002132  3               
002132  3               ; Init AtoMMC joystick
002132  3  20 48 9E     	jsr joyinit		; AtoMMC joystick on PORT B
002135  3               
002135  3               rpblc2:
002135  3               .if pflag
002135  3               	jsr inishr 		; initialise particle engine.
002135  3               .endif
002135  3               evintr:
002135  3  20 D8 41     	jsr evnt12 		; call intro/menu event.
002138  3               
002138  3  A9 02        	lda #WALL 		; write default property.
00213A  3  A2 00        	ldx #0
00213C  3               clrmap:
00213C  3  9D 00 DD     	sta MAP,x 		; block properties.
00213F  3  9D 00 DE     	sta MAP+256,x
002142  3  9D 00 DF     	sta MAP+512,x
002145  3  E8           	inx			; next byte.
002146  3  D0 F4        	bne clrmap
002148  3               .if oflag
002148  3  20 52 20     	jsr iniob 		; initialise objects.
00214B  3               .endif
00214B  3  A9 00        	lda #0			; put zero in accumulator.
00214D  3  85 rr        	sta gamwon		; reset game won flag.
00214F  3               
00214F  3  20 BB 22     	jsr inisc 		; init the score.
002152  3               mapst:
002152  3  AD CC 35     	lda stmap 		; start position on map.
002155  3  8D 5E 35     	sta roomtb		; set up position in table, if there is one.
002158  3               
002158  3               inipbl:
002158  3               .if aflag
002158  3               	lda #<eop		; reset blockpointer
002158  3               	sta pbptr
002158  3               	lda #>eop
002158  3               	sta pbptr+1
002158  3               .endif
002158  3  20 46 31     	jsr initsc 		; set up first screen.
00215B  3               
00215B  3  A9 4D        	lda #<ssprit 		; default to spare sprite in table.
00215D  3  85 68        	sta z80_x
00215F  3  A9 35        	lda #>ssprit
002161  3  85 69        	sta z80_i
002163  3               evini:
002163  3  20 4C 42     	jsr evnt13 		; initialisation.
002166  3               
002166  3               ; Two restarts.
002166  3               ; First restart - clear all sprites and initialise everything.
002166  3               
002166  3               rstrt:
002166  3  20 5B 22     	jsr rsevt 		; restart events.
002169  3  20 45 20     	jsr xspr 		; clear sprite table.
00216C  3  20 B2 32     	jsr sprlst 		; fetch pointer to screen sprites.
00216F  3  20 3B 33     	jsr ispr 		; initialise sprite table.
002172  3               
002172  3  4C 81 21     	jmp rstrt0
002175  3               
002175  3               ; Second restart - clear all but player, and don't initialise him.
002175  3               
002175  3               rstrtn:
002175  3  20 5B 22     	jsr rsevt		; restart events.
002178  3  20 DF 32     	jsr nspr 		; clear all non-player sprites.
00217B  3  20 B2 32     	jsr sprlst 		; fetch pointer to screen sprites.
00217E  3  20 78 33     	jsr kspr 		; initialise sprite table, no more players.
002181  3               
002181  3               ; Set up the player and/or enemy sprites.
002181  3               
002181  3               rstrt0:
002181  3  A9 00        	lda #0 			; zero in accumulator.
002183  3  85 rr        	sta nexlev 		; reset next level flag.
002185  3  85 rr        	sta restfl 		; reset restart flag.
002187  3  85 rr        	sta deadf 		; reset dead flag.
002189  3  20 E1 27     	jsr droom 		; show screen layout.
00218C  3               rpblc0:
00218C  3               .if pflag
00218C  3               	jsr inishr 		; initialise particle engine.
00218C  3               .endif
00218C  3               .if aflag
00218C  3               	jsr rbloc		; draw blocks for this screen
00218C  3               .endif
00218C  3               .if oflag
00218C  3  20 0B 23     	jsr shwob		; draw objects.
00218F  3               .endif
00218F  3               
00218F  3  A9 81        	lda #<sprtab 		; address of sprite table, even sprites.
002191  3  85 68        	sta z80_x
002193  3  A9 34        	lda #>sprtab
002195  3  85 69        	sta z80_i
002197  3  20 24 2E     	jsr dspr 		; display sprites.
00219A  3               
00219A  3  A9 92        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00219C  3  85 68        	sta z80_x
00219E  3  A9 34        	lda #>(sprtab+TABSIZ)
0021A0  3  85 69        	sta z80_i
0021A2  3  20 24 2E     	jsr dspr 		; display sprites.
0021A5  3               mloop:
0021A5  3  20 84 20     	jsr vsync 		; synchronise with display.
0021A8  3  A9 81        	lda #<sprtab 		; address of sprite table, even sprites.
0021AA  3  85 68        	sta z80_x
0021AC  3  A9 34        	lda #>sprtab
0021AE  3  85 69        	sta z80_i
0021B0  3  20 24 2E     	jsr dspr 		; display even sprites.
0021B3  3               
0021B3  3               ;	jsr plsnd 		; play sounds.
0021B3  3               
0021B3  3  20 09 21     	jsr proshr
0021B6  3  A9 92        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0021B8  3  85 68        	sta z80_x
0021BA  3  A9 34        	lda #>(sprtab+TABSIZ)
0021BC  3  85 69        	sta z80_i
0021BE  3  20 24 2E     	jsr dspr 		; display odd sprites.
0021C1  3               
0021C1  3  A9 4D        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
0021C3  3  85 68        	sta z80_x
0021C5  3  A9 35        	lda #>(ssprit)
0021C7  3  85 69        	sta z80_i
0021C9  3               evlp1:
0021C9  3  20 A7 40     	jsr evnt10 		; called once per main loop.
0021CC  3  20 A2 2D     	jsr pspr 		; process sprites.
0021CF  3               
0021CF  3               ; Main loop events.
0021CF  3               
0021CF  3  A9 4D        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0021D1  3  85 68        	sta z80_x
0021D3  3  A9 35        	lda #>ssprit
0021D5  3  85 69        	sta z80_i
0021D7  3               evlp2:
0021D7  3  20 D7 41     	jsr evnt11 		; called once per main loop.
0021DA  3               bsortx:
0021DA  3  20 18 2D     	jsr bsort 		; sort sprites.
0021DD  3               
0021DD  3  A5 rr        	lda nexlev		; finished level flag.
0021DF  3  F0 03        	beq :+
0021E1  3  4C 09 22     	jmp newlev		; is set, go to next level.
0021E4  3               :
0021E4  3  A5 rr        	lda gamwon		; finished game flag.
0021E6  3  F0 03        	beq :+
0021E8  3  4C 18 22     	jmp evwon		; is set, finish the game.
0021EB  3               :
0021EB  3  A5 rr        	lda restfl 		; finished level flag.
0021ED  3  C9 01        	cmp #1			; has it been set?
0021EF  3  D0 03        	bne :+
0021F1  3  4C 66 21     	jmp rstrt		; yes, go to next level.
0021F4  3               :
0021F4  3  C9 02        	cmp #2			; has it been set?
0021F6  3  D0 03        	bne :+
0021F8  3  4C 75 21     	jmp rstrtn		; yes, go to next level.
0021FB  3               :
0021FB  3  A5 rr        	lda deadf 		; dead flag.
0021FD  3  F0 03        	beq :+
0021FF  3  4C 1E 22     	jmp pdead		; yes, player dead.
002202  3               :
002202  3               ; back to start of main loop.
002202  3               
002202  3  E6 rr        	inc frmno
002204  3  E6 rr        	inc clock
002206  3  4C A5 21     	jmp mloop		; switched to a jmp mloop during test mode.
002209  3               
002209  3               ;----------------------------------------------------------
002209  3               ; Read blocks from list and update screen accordingly.
002209  3               ;----------------------------------------------------------
002209  3               
002209  3               .if aflag
002209  3               rbloc:
002209  3               	lda #<eop		; reset temp blockpointer
002209  3               	sta pbbuf
002209  3               	lda #>eop
002209  3               	sta pbbuf+1
002209  3               
002209  3               rbloc2:
002209  3               	lda pbbuf			; check for last block
002209  3               	cmp pbptr
002209  3               	bne rbloc1
002209  3               	lda pbbuf+1
002209  3               	cmp pbptr+1
002209  3               	bne rbloc1
002209  3               	rts
002209  3               rbloc1:
002209  3               	ldy #0
002209  3               	lda (pbbuf),y		; check if block for this scno
002209  3               	cmp scno
002209  3               	bne rbloc0		; if not, skip
002209  3               	iny
002209  3               	lda (pbbuf),y		; get y
002209  3               	sta dispy
002209  3               	iny
002209  3               	lda (pbbuf),y		; get x
002209  3               	sta dispx
002209  3               	iny
002209  3               	lda (pbbuf),y		; get blocknr
002209  3               	jsr pattr2		; draw block
002209  3               rbloc0:
002209  3               	clc			; point to next block
002209  3               	lda pbbuf
002209  3               	adc #4
002209  3               	sta pbbuf
002209  3               	bcc rbloc2
002209  3               	inc pbbuf+1
002209  3               	jmp rbloc2
002209  3               .endif
002209  3               
002209  3               ;----------------------------------------------------------
002209  3               ; New level
002209  3               ;----------------------------------------------------------
002209  3               
002209  3               ;.repeat 270
002209  3               ;  .byte 0
002209  3               ;.endrep
002209  3               
002209  3               newlev:
002209  3  A5 rr        	lda scno 			; current screen.
00220B  3  18           	clc
00220C  3  69 01        	adc #1				; next screen.
00220E  3  CD BC 96     	cmp numsc			; total number of screens.
002211  3  B0 05        	bcs evwon			; yes, game finished.
002213  3  85 rr        	sta scno			; set new level number.
002215  3  4C 66 21     	jmp rstrt			; restart, clearing all aliens.
002218  3               
002218  3               evwon:
002218  3  20 DD 43     	jsr evnt18		 	; game completed.
00221B  3  4C 30 22     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00221E  3               
00221E  3               ;----------------------------------------------------------
00221E  3               ; Player dead.
00221E  3               ;----------------------------------------------------------
00221E  3               
00221E  3               ;.repeat 258
00221E  3               ;  .byte 0
00221E  3               ;.endrep
00221E  3               
00221E  3               pdead:
00221E  3  A9 00        	lda #0				; zeroise accumulator.
002220  3  85 rr        	sta deadf			; reset dead flag.
002222  3               evdie:
002222  3  20 A0 43     	jsr evnt16 			; death subroutine.
002225  3  A5 rr        	lda numlif			; number of lives.
002227  3  F0 03        	beq :+
002229  3  4C 66 21     	jmp rstrt 			; restart game.
00222C  3               :
00222C  3               evfail:
00222C  3  20 D3 43     	jsr evnt17 			; failure event.
00222F  3  60           	rts			; restart game
002230  3               
002230  3               ;----------------------------------------------------------
002230  3               ; Tidy things up
002230  3               ;----------------------------------------------------------
002230  3               
002230  3               ;.repeat 291
002230  3               ;  .byte 0
002230  3               ;.endrep
002230  3               
002230  3               tidyup:
002230  3  A0 00        	ldy #0				; digits to check.
002232  3               tidyu2:
002232  3  B9 C5 24     	lda score,y 			; get score digit.
002235  3  CD CB 24     	cmp hiscor 			; are we larger than high score digit?
002238  3  90 07        	bcc tidyu0			; high score is bigger.
00223A  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
00223C  3  C8           	iny				; next digit of high score.
00223D  3  C0 06        	cpy #6
00223F  3  D0 F1        	bne tidyu2			; repeat for all digits
002241  3               tidyu0:
002241  3  A9 C5        	lda #<score			; return pointing to score.
002243  3  85 62        	sta z80_c
002245  3  A9 24        	lda #>score
002247  3  85 63        	sta z80_b
002249  3  60           	rts
00224A  3               tidyu1:
00224A  3  A0 05        	ldy #5
00224C  3               tidyu3:
00224C  3  B9 C5 24     	lda score,y			; score.
00224F  3  99 CB 24     	sta hiscor,y			; high score.
002252  3  88           	dey
002253  3  10 F7        	bpl tidyu3 			; copy score to high score.
002255  3               evnewh:
002255  3  20 78 44     	jsr evnt19			; new high score event.
002258  3  4C 41 22     	jmp tidyu0			; tidy up.
00225B  3               
00225B  3               ;--------------------------------------------------
00225B  3               ; Restart event.
00225B  3               ;--------------------------------------------------
00225B  3               
00225B  3               rsevt:
00225B  3  A9 4D        	lda #<ssprit 			; default to spare element in table.
00225D  3  85 68        	sta z80_x
00225F  3  A9 35        	lda #>ssprit
002261  3  85 69        	sta z80_i
002263  3               evrs:
002263  3  4C 73 43     	jmp evnt14	 		; call restart event.
002266  3               
002266  3               ;------------------------------------------------------------------
002266  3               ; Copy number passed in a to string position bc, right-justified.
002266  3               ;
002266  3               ; Input:
002266  3               ;  A  = number
002266  3               ;  BC = string address
002266  3               ;
002266  3               ; Output:
002266  3               ;  BC = string with number
002266  3               ;-----------------------------------------------------------------
002266  3               
002266  3               num2ch:
002266  3  85 65        	sta z80_d		; Save number
002268  3               
002268  3  A9 00        	lda #0
00226A  3  85 rr        	sta flag
00226C  3               numdg3:
00226C  3  A2 64        	ldx #100		; hundreds column.
00226E  3  86 64        	stx z80_e
002270  3  20 80 22     	jsr numdg		; show digit.
002273  3               numdg2:
002273  3  A2 0A        	ldx #10			; tens column.
002275  3  86 64        	stx z80_e
002277  3  20 80 22     	jsr numdg		; show digit.
00227A  3               
00227A  3  E6 rr        	inc flag
00227C  3  A2 01        	ldx #1			; units column.
00227E  3  86 64        	stx z80_e
002280  3               numdg:
002280  3  A9 30        	lda #48			; clear digit.
002282  3  85 61        	sta z80_a
002284  3               numdg1:
002284  3  A5 65        	lda z80_d
002286  3  C5 64        	cmp z80_e
002288  3  90 0E        	bcc numdg0		; nothing to show.
00228A  3  38           	sec
00228B  3  A5 65        	lda z80_d
00228D  3  E5 64        	sbc z80_e		; subtract from column.
00228F  3  85 65        	sta z80_d
002291  3  E6 61        	inc z80_a		; increment digit.
002293  3  E6 rr        	inc flag
002295  3  4C 84 22     	jmp numdg1		; repeat until column is zero.
002298  3               numdg0:
002298  3  A0 00        	ldy #0
00229A  3  A5 61        	lda z80_a
00229C  3  91 62        	sta (z80_bc),y		; write digit to buffer.
00229E  3  A5 rr        	lda flag
0022A0  3  F0 06        	beq :+
0022A2  3  E6 62        	inc z80_c		; next buffer position.
0022A4  3  D0 02        	bne :+
0022A6  3  E6 63        	inc z80_b
0022A8  3               :
0022A8  3  60           	rts
0022A9  3               num2dd:
0022A9  3  85 65        	sta z80_d		; Save number
0022AB  3               
0022AB  3  A9 01        	lda #1
0022AD  3  85 rr        	sta flag
0022AF  3               
0022AF  3  4C 73 22     	jmp numdg2
0022B2  3               num2td:
0022B2  3  85 65        	sta z80_d		; Save number
0022B4  3               
0022B4  3  A9 01        	lda #1
0022B6  3  85 rr        	sta flag
0022B8  3  4C 6C 22     	jmp numdg3
0022BB  3               
0022BB  3               ;flag:	.byte 0
0022BB  3               
0022BB  3               ;---------------------------------------------------------
0022BB  3               ; Reset score to "000000"
0022BB  3               ;---------------------------------------------------------
0022BB  3               
0022BB  3               inisc:
0022BB  3  A9 30        	lda #'0'
0022BD  3  A2 05        	ldx #5			; digits to initialise.
0022BF  3               inisc0:
0022BF  3  9D C5 24     	sta score,x 		; write zero digit.
0022C2  3  CA           	dex			; next column.
0022C3  3  10 FA        	bpl inisc0		; repeat for all digits.
0022C5  3               
0022C5  3  60           	rts
0022C6  3               
0022C6  3               ;-----------------------------------------------------
0022C6  3               ; Multiply h by d and return in hl.
0022C6  3               ;
0022C6  3               ; Input:
0022C6  3               ;  H = first number
0022C6  3               ;  D = second number
0022C6  3               ;
0022C6  3               ; Output:
0022C6  3               ;  HL = result H x D
0022C6  3               ;-----------------------------------------------------
0022C6  3               
0022C6  3               imul:
0022C6  3  A5 65        	lda z80_d		; HL = H * D
0022C8  3  85 64        	sta z80_e
0022CA  3  A5 67        	lda z80_h
0022CC  3  85 62        	sta z80_c		; make c first multiplier.
0022CE  3               imul0:
0022CE  3  A9 00        	lda #0			; zeroise total.
0022D0  3  85 66        	sta z80_l
0022D2  3  85 67        	sta z80_h
0022D4  3               
0022D4  3  A5 67        	lda z80_h
0022D6  3  85 65        	sta z80_d		; zeroise high byte.
0022D8  3               
0022D8  3  A9 08        	lda #8			; repeat 8 times.
0022DA  3  85 63        	sta z80_b
0022DC  3               imul1:
0022DC  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
0022DE  3  90 0E        	bcc imul2		; wasn't set.
0022E0  3  18           	clc			; bit was set, so add de.
0022E1  3  A5 66        	lda z80_l
0022E3  3  65 64        	adc z80_e
0022E5  3  85 66        	sta z80_l
0022E7  3  A5 67        	lda z80_h
0022E9  3  65 65        	adc z80_d
0022EB  3  85 67        	sta z80_h
0022ED  3  18           	clc 			; reset carry.
0022EE  3               imul2:
0022EE  3  06 64        	asl z80_e 		; shift de 1 bit left.
0022F0  3  26 65        	rol z80_d
0022F2  3  C6 63        	dec z80_b
0022F4  3  D0 E6        	bne imul1		; repeat 8 times.
0022F6  3               
0022F6  3  60           	rts
0022F7  3               
0022F7  3               ;-----------------------------------------------
0022F7  3               ; Divide d by e and return in d, remainder in a.
0022F7  3               ;
0022F7  3               ; Input:
0022F7  3               ;  D = first number
0022F7  3               ;  E = second number
0022F7  3               ;
0022F7  3               ; Output:
0022F7  3               ;  D = result D/E
0022F7  3               ;  A = remainder
0022F7  3               ;-----------------------------------------------
0022F7  3               
0022F7  3               idiv:
0022F7  3  A9 00        	lda #0
0022F9  3  A0 08        	ldy #8		 	; bits to shift.
0022FB  3  06 65        	asl z80_d
0022FD  3               idiv0:
0022FD  3  2A           	rol a 			; multiply d by 2.
0022FE  3  C5 64        	cmp z80_e 		; test if e is smaller.
002300  3  90 02        	bcc idiv1		; e is greater, no division this time.
002302  3  E5 64        	sbc z80_e		; subtract it.
002304  3               idiv1:
002304  3  26 65        	rol z80_d		; rotate into d.
002306  3  88           	dey
002307  3  D0 F4        	bne idiv0		; repeat
002309  3  60           	rts
00230A  3               
00230A  3               ;---------------------------------------------------
00230A  3               ; Play AY sound effect
00230A  3               ;---------------------------------------------------
00230A  3               
00230A  3               plsnd:
00230A  3  60           	rts
00230B  3               
00230B  3               ;---------------------------------------------------
00230B  3               ; Objects handling.
00230B  3               ; 32 bytes for image
00230B  3               ; 3 for room, y and x
00230B  3               ; 3 for starting room, y and x.
00230B  3               ; 254 = disabled.
00230B  3               ; 255 = object in player"s pockets.
00230B  3               ;---------------------------------------------------
00230B  3               
00230B  3               ;---------------------------------------------------
00230B  3               ; Show items present.
00230B  3               ;---------------------------------------------------
00230B  3               
00230B  3               .if oflag
00230B  3               shwob:
00230B  3  A9 6C        	lda #<objdta 			; objects table.
00230D  3  85 66        	sta z80_l
00230F  3  A9 98        	lda #>objdta
002311  3  85 67        	sta z80_h
002313  3               
002313  3  AD 2A 20     	lda numob 			; number of objects in the game.
002316  3  85 rr        	sta sprcnt
002318  3               shwob0:
002318  3  A0 20        	ldy #32 			; distance to room number.
00231A  3  B1 66        	lda (z80_hl),y 			; same as an item?
00231C  3  C5 rr        	cmp scno 			; current location.
00231E  3  D0 03        	bne :+
002320  3  20 35 23     	jsr dobj 			; yes, display object.
002323  3               :
002323  3  18           	clc
002324  3  A5 66        	lda z80_l
002326  3  69 26        	adc #38 			; distance to next item.
002328  3  85 66        	sta z80_l
00232A  3  A5 67        	lda z80_h
00232C  3  69 00        	adc #0
00232E  3  85 67        	sta z80_h	 		; point to it.
002330  3  C6 rr        	dec sprcnt
002332  3  D0 E4        	bne shwob0 			; repeat for others.
002334  3  60           	rts
002335  3               
002335  3               ;---------------------------------------------------
002335  3               ; Display object.
002335  3               ; hl must point to object's start address.
002335  3               ;
002335  3               ; Input:
002335  3               ;  HL = object address
002335  3               ;---------------------------------------------------
002335  3               
002335  3               dobj:
002335  3  A0 21        	ldy #33
002337  3  B1 66        	lda (z80_hl),y 			; point to y.
002339  3  85 rr        	sta dispy
00233B  3  C8           	iny
00233C  3  B1 66        	lda (z80_hl),y 			; point to x.
00233E  3  85 rr        	sta dispx
002340  3               dobj1:
002340  3  4C 29 27     	jmp sprite 			; draw this sprite.
002343  3               
002343  3               ;--------------------------------------
002343  3               ; Remove an object.
002343  3               ;
002343  3               ; Input:
002343  3               ;  A = object number
002343  3               ;--------------------------------------
002343  3               
002343  3               remob:
002343  3  CD 2A 20     	cmp numob			; number of objects in game.
002346  3  90 01        	bcc :+				; are we checking past the end?
002348  3  60           	rts				; yes, can't get non-existent item.
002349  3               :
002349  3  48           	pha				; remember object.
00234A  3  20 58 23     	jsr getob			; pick it up if we haven't already got it.
00234D  3  68           	pla				; retrieve object number.
00234E  3  20 87 23     	jsr gotob			; get its address.
002351  3  A9 FE        	lda #254
002353  3  A0 20        	ldy #32
002355  3  91 66        	sta (z80_hl),y			; remove it.
002357  3  60           	rts
002358  3               
002358  3               ;---------------------------------------------------
002358  3               ; Pick up object number held in the accumulator.
002358  3               ;
002358  3               ; Input:
002358  3               ;  A = object number
002358  3               ;---------------------------------------------------
002358  3               
002358  3               getob:
002358  3  CD 2A 20     	cmp numob 		; number of objects in game.
00235B  3  90 01        	bcc :+			; are we checking past the end?
00235D  3  60           	rts			; yes, can't get non-existent item.
00235E  3               :
00235E  3  20 87 23     	jsr gotob 		; check if we already have it.
002361  3  C9 FF        	cmp #255
002363  3  D0 01        	bne :+
002365  3  60           	rts			; we already do.
002366  3               :
002366  3  A0 20        	ldy #32
002368  3  B1 66        	lda (z80_hl),y		; is it on this screen?
00236A  3  C5 rr        	cmp scno 		; current screen.
00236C  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
00236E  3               
00236E  3  A9 FF        	lda #255
002370  3  91 66        	sta (z80_hl),y		; pick it up.
002372  3  C8           	iny 			; point to y coord.
002373  3               getob1:
002373  3  A0 21        	ldy #33
002375  3  B1 66        	lda (z80_hl),y		; y coord.
002377  3  85 rr        	sta dispy
002379  3  A0 22        	ldy #34
00237B  3  B1 66        	lda (z80_hl),y 		; x coord.
00237D  3  85 rr        	sta dispx
00237F  3  4C 40 23     	jmp dobj1 		; delete object sprite.
002382  3               getob0:
002382  3  A9 FF        	lda #255
002384  3  91 66        	sta (z80_hl),y 		; pick it up.
002386  3  60           	rts
002387  3               .endif
002387  3               
002387  3               ;-----------------------------------------------------------------
002387  3               ; Got object check.
002387  3               ; Call with object in accumulator, returns zero set if in pockets.
002387  3               ;
002387  3               ; Input:
002387  3               ;  A = object number
002387  3               ;-----------------------------------------------------------------
002387  3               .if oflag .or mflag
002387  3               gotob:
002387  3  CD 2A 20     	cmp numob 		; number of objects in game.
00238A  3  90 03        	bcc :+ 			; are we checking past the end?
00238C  3  4C 93 23     	jmp gotob0 		; yes, we can't have a non-existent object.
00238F  3               :
00238F  3  20 98 23     	jsr findob		; find the object.
002392  3               gotob1:
002392  3  60           	rts
002393  3               
002393  3               gotob0:
002393  3  A9 FE        	lda #254 		; missing.
002395  3  4C 92 23     	jmp gotob1
002398  3               
002398  3               findob:
002398  3  48           	pha			; save object number
002399  3  A9 6C        	lda #<objdta 		; objects.
00239B  3  85 66        	sta z80_l
00239D  3  A9 98        	lda #>objdta
00239F  3  85 67        	sta z80_h
0023A1  3  68           	pla			; retreive object number
0023A2  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
0023A4  3  AA           	tax 			; loop counter
0023A5  3               fndob2:
0023A5  3  18           	clc
0023A6  3  A5 66        	lda z80_l
0023A8  3  69 26        	adc #38 		; size of each object.
0023AA  3  85 66        	sta z80_l
0023AC  3  90 02        	bcc :+
0023AE  3  E6 67        	inc z80_h
0023B0  3               :
0023B0  3  CA           	dex 			; repeat until we find address.
0023B1  3  D0 F2        	bne fndob2
0023B3  3               fndob1:
0023B3  3  A0 20        	ldy #32			; distance to room it's in.
0023B5  3  B1 66        	lda (z80_hl),y		; fetch status.
0023B7  3  60           	rts
0023B8  3               .endif
0023B8  3               
0023B8  3               ;---------------------------------------------
0023B8  3               ; Drop object number at (dispx, dispy).
0023B8  3               ;
0023B8  3               ; Input:
0023B8  3               ;  A = object number
0023B8  3               ;---------------------------------------------
0023B8  3               
0023B8  3               .if oflag
0023B8  3               drpob:
0023B8  3  CD 2A 20     	cmp numob 		; are we checking past the end?
0023BB  3  90 01        	bcc :+
0023BD  3  60           	rts			; yes, can't drop non-existent item.
0023BE  3               :
0023BE  3  20 87 23     	jsr gotob		; make sure object is in inventory.
0023C1  3  C5 rr        	cmp scno		; already on this screen?
0023C3  3  D0 01        	bne :+
0023C5  3  60           	rts			; yes, nothing to do.
0023C6  3               :
0023C6  3  A0 20        	ldy #32
0023C8  3  A5 rr        	lda scno
0023CA  3  91 66        	sta (z80_hl),y		; bring onto screen.
0023CC  3  A5 rr        	lda dispy		; sprite y coordinate.
0023CE  3  C8           	iny
0023CF  3  91 66        	sta (z80_hl),y		; point to object y.
0023D1  3  A5 rr        	lda dispx 		; sprite x coordinate.
0023D3  3  C8           	iny
0023D4  3  91 66        	sta (z80_hl),y 		; point to object x
0023D6  3  4C 35 23     	jmp dobj		; draw the object sprite.
0023D9  3               
0023D9  3               ;-----------------------------------------------
0023D9  3               ; Seek objects at sprite position.
0023D9  3               ;
0023D9  3               ; Output:
0023D9  3               ;  A = object number, if not found A=255
0023D9  3               ;-----------------------------------------------
0023D9  3               
0023D9  3               skobj:
0023D9  3  A9 6C        	lda #<objdta 		; pointer to objects.
0023DB  3  85 66        	sta z80_l
0023DD  3  A9 98        	lda #>objdta
0023DF  3  85 67        	sta z80_h
0023E1  3               
0023E1  3  AD 2A 20     	lda numob 		; number of objects in game.
0023E4  3  85 63        	sta z80_b 		; set up the loop counter.
0023E6  3               skobj0:
0023E6  3  A5 rr        	lda scno		; current room number.
0023E8  3  A0 20        	ldy #32
0023EA  3  D1 66        	cmp (z80_hl),y		; is object in here?
0023EC  3  D0 03        	bne :+
0023EE  3  20 03 24     	jsr skobj1		; yes, check coordinates.
0023F1  3               :
0023F1  3  18           	clc			; point to next object in table.
0023F2  3  A5 66        	lda z80_l
0023F4  3  69 26        	adc #38			; size of each object.
0023F6  3  85 66        	sta z80_l
0023F8  3  90 02        	bcc :+
0023FA  3  E6 67        	inc z80_h
0023FC  3               :
0023FC  3  C6 63        	dec z80_b
0023FE  3  D0 E6        	bne skobj0		; repeat for all objects.
002400  3               
002400  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
002402  3  60           	rts
002403  3               
002403  3               skobj1:
002403  3  A0 21        	ldy #33			; point to y coordinate.
002405  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
002407  3  38           	sec
002408  3  A0 08        	ldy #8
00240A  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
00240C  3  18           	clc
00240D  3  69 0F        	adc #15			; add sprite height minus one.
00240F  3  C9 1F        	cmp #31			; within range?
002411  3  B0 18        	bcs skobj2		; no, ignore object.
002413  3               
002413  3  A0 22        	ldy #34			; point to x coordinate now.
002415  3  B1 66        	lda (z80_hl),y 		; get coordinate.
002417  3  38           	sec
002418  3  A0 09        	ldy #9
00241A  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
00241C  3  18           	clc			; add sprite width minus one.
00241D  3  69 0F        	adc #15
00241F  3  C9 1F        	cmp #31			; within range?
002421  3  B0 08        	bcs skobj2		; no, ignore object.
002423  3               
002423  3  68           	pla			; remove return address from stack.
002424  3  68           	pla
002425  3               
002425  3  AD 2A 20     	lda numob 		; objects in game.
002428  3  38           	sec
002429  3  E5 63        	sbc z80_b		; subtract loop counter.
00242B  3               skobj2:
00242B  3  60           	rts			; accumulator now points to object.
00242C  3               .endif
00242C  3               
00242C  3               ;---------------------------------------------------------------------
00242C  3               ; Spawn a new sprite.
00242C  3               ;---------------------------------------------------------------------
00242C  3               
00242C  3                 offset = 20
00242C  3               
00242C  3               ;.repeat 343
00242C  3               ;  .byte 0
00242C  3               ;.endrep
00242C  3               
00242C  3               spawn:
00242C  3  A9 81        	lda #<sprtab		; sprite table.
00242E  3  85 66        	sta z80_l
002430  3  A9 34        	lda #>sprtab
002432  3  85 67        	sta z80_h
002434  3               numsp1:
002434  3  A9 0C        	lda #NUMSPR		; number of sprites.
002436  3  85 rr        	sta spcnt
002438  3               spaw0:
002438  3  A0 00        	ldy #0
00243A  3  B1 66        	lda (z80_hl),y		; get sprite type.
00243C  3  C9 FF        	cmp #255		; is it an unused slot?
00243E  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002440  3               
002440  3  18           	clc 			; point to next sprite in table.
002441  3  A5 66        	lda z80_l
002443  3  69 11        	adc #TABSIZ		; size of each entry.
002445  3  85 66        	sta z80_l
002447  3  90 02        	bcc :+
002449  3  E6 67        	inc z80_h
00244B  3               :
00244B  3  C6 rr        	dec spcnt		; one less iteration.
00244D  3  D0 E9        	bne spaw0		; keep going until we find a slot.
00244F  3               
00244F  3               ; Didn't find one but drop through and set up a dummy sprite instead.
00244F  3               
00244F  3               spaw1:
00244F  3  A5 69        	lda z80_i		; address of original sprite.
002451  3  48           	pha
002452  3  A5 68        	lda z80_x
002454  3  48           	pha
002455  3               
002455  3  A5 66        	lda z80_l		; store spawned sprite address.
002457  3  85 rr        	sta spptr
002459  3  A5 67        	lda z80_h
00245B  3  85 rr        	sta spptr+1
00245D  3               
00245D  3  A5 62        	lda z80_c
00245F  3  A0 00        	ldy #0
002461  3  91 66        	sta (z80_hl),y 		; set the type.
002463  3  A0 05        	ldy #5
002465  3  91 66        	sta (z80_hl),y		; copy
002467  3               
002467  3  A5 63        	lda z80_b
002469  3  A0 01        	ldy #1
00246B  3  91 66        	sta (z80_hl),y		; set the image.
00246D  3  A0 06        	ldy #6
00246F  3  91 66        	sta (z80_hl),y		; copy
002471  3               
002471  3  A9 00        	lda #0 			; frame zero.
002473  3  A0 02        	ldy #2
002475  3  91 66        	sta (z80_hl),y		; set frame.
002477  3  A0 07        	ldy #7
002479  3  91 66        	sta (z80_hl),y		; copy
00247B  3               
00247B  3  A0 08        	ldy #8
00247D  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00247F  3  A0 03        	ldy #3
002481  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002483  3  A0 08        	ldy #8
002485  3  91 66        	sta (z80_hl),y		; copy
002487  3               
002487  3  A0 09        	ldy #9
002489  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00248B  3  A0 04        	ldy #4
00248D  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
00248F  3  A0 09        	ldy #9
002491  3  91 66        	sta (z80_hl),y		; copy
002493  3               
002493  3  A0 0A        	ldy #10			; direction of original.
002495  3  B1 68        	lda (z80_ix),y
002497  3  91 66        	sta (z80_hl),y		; direction
002499  3               
002499  3  A9 00        	lda #0
00249B  3  A0 0B        	ldy #11
00249D  3  91 66        	sta (z80_hl),y		; reset parameter.
00249F  3  C8           	iny
0024A0  3  91 66        	sta (z80_hl),y		; reset parameter.
0024A2  3  C8           	iny
0024A3  3  91 66        	sta (z80_hl),y		; reset parameter.
0024A5  3  C8           	iny
0024A6  3  91 66        	sta (z80_hl),y		; reset parameter.
0024A8  3               rtssp:
0024A8  3  A5 rr        	lda spptr		; address of new sprite.
0024AA  3  85 68        	sta z80_x
0024AC  3  A5 rr        	lda spptr+1
0024AE  3  85 69        	sta z80_i
0024B0  3               evis1:
0024B0  3  20 47 40     	jsr evnt09 		; call sprite initialisation event.
0024B3  3               
0024B3  3  A5 rr        	lda spptr 		; address of new sprite.
0024B5  3  85 68        	sta z80_x
0024B7  3  A5 rr        	lda spptr+1
0024B9  3  85 69        	sta z80_i
0024BB  3  20 4A 2F     	jsr sspria 		; display the new sprite.
0024BE  3               
0024BE  3  68           	pla			; address of original sprite.
0024BF  3  85 68        	sta z80_x
0024C1  3  68           	pla
0024C2  3  85 69        	sta z80_i
0024C4  3               
0024C4  3  60           	rts
0024C5  3               
0024C5  3               ;spcnt:	.byte 0
0024C5  3               ;spptr:	.word 0			; spawned sprite pointer.
0024C5  3               ;seed:	.byte 0			; seed for random numbers.
0024C5  3  30 30 30 30  score:	.byte "000000"		; player"s score.
0024C9  3  30 30        
0024CB  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
0024CF  3  30 30        
0024D1  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
0024D5  3  30 30        
0024D7  3  00 E4        grbase:	.word ScreenAddr	; graphics base address.
0024D9  3               
0024D9  3               ;----------------------------------------------------
0024D9  3               ; Check y-pos
0024D9  3               ;----------------------------------------------------
0024D9  3               
0024D9  3               checkx:
0024D9  3  A5 rr        	lda dispy		; y position.
0024DB  3  C9 18        	cmp #24			; off screen?
0024DD  3  B0 01        	bcs :+
0024DF  3  60           	rts			; no, it's okay.
0024E0  3               :
0024E0  3  68           	pla			; remove return address from stack.
0024E1  3  85 66        	sta z80_l
0024E3  3  68           	pla
0024E4  3  85 67        	sta z80_h
0024E6  3  60           	rts
0024E7  3               
0024E7  3               ;-----------------------------------------------
0024E7  3               ; Displays the current high score.
0024E7  3               ;-----------------------------------------------
0024E7  3               
0024E7  3               dhisc:
0024E7  3  A9 CB        	lda #<hiscor 		; high score text.
0024E9  3  8D 1E 25     	sta dscor3+1
0024EC  3  8D 39 25     	sta bscor3+1
0024EF  3  A9 24        	lda #>hiscor
0024F1  3  8D 1F 25     	sta dscor3+2
0024F4  3  8D 3A 25     	sta bscor3+2
0024F7  3  4C 0A 25     	jmp dscor1		; check in printable range then show 6 digits.
0024FA  3               
0024FA  3               ;------------------------------------------------------
0024FA  3               ; Displays the current score.
0024FA  3               ;------------------------------------------------------
0024FA  3               
0024FA  3               ;.repeat 322
0024FA  3               ;  .byte 0
0024FA  3               ;.endrep
0024FA  3               
0024FA  3               dscor:
0024FA  3  A9 C5        	lda #<score		; score text.
0024FC  3  8D 1E 25     	sta dscor3+1
0024FF  3  8D 39 25     	sta bscor3+1
002502  3  A9 24        	lda #>score
002504  3  8D 1F 25     	sta dscor3+2
002507  3  8D 3A 25     	sta bscor3+2
00250A  3               dscor1:
00250A  3  8C 35 25     	sty tmpscr
00250D  3  20 EC 2C     	jsr preprt		; set up font and print position.
002510  3  20 D9 24     	jsr checkx		; make sure we're in a printable range.
002513  3               
002513  3               ;	lda #6			; digits to display.
002513  3               ;	sta z80_b
002513  3  A5 rr        	lda prtmod		; get print mode.
002515  3  F0 03        	beq :+			; standard size text?
002517  3  4C 36 25     	jmp bscor0		; no, show double-height.
00251A  3               :
00251A  3               dscor0:
00251A  3               ;	ldy #0
00251A  3               ;	lda (z80_hl),y 		; fetch character.
00251A  3  AC 35 25     	ldy tmpscr
00251D  3               dscor3:
00251D  3  B9 C5 24     	lda score,y
002520  3  20 6D 26     	jsr pchar 		; display character.
002523  3  E6 rr        	inc dispx		; move along x coordinate
002525  3               
002525  3               ;	inc z80_l		; next score column.
002525  3               ;	bne :+
002525  3               ;	inc z80_h
002525  3               ;:
002525  3  EE 35 25     	inc tmpscr
002528  3  C6 63        	dec z80_b
00252A  3  D0 EE        	bne dscor0 		; repeat for all digits.
00252C  3               dscor2:
00252C  3  A5 rr        	lda dispx 		; set up display coordinates.
00252E  3  85 rr        	sta charx
002530  3  A5 rr        	lda dispy
002532  3  85 rr        	sta chary
002534  3  60           	rts
002535  3               
002535  3  00           tmpscr:	.byte 0
002536  3               ;------------------------------------------------------
002536  3               ; Displays the current score in double-height characters.
002536  3               ;
002536  3               ; Input:
002536  3               ;  B  = digit number
002536  3               ;  HL = score string
002536  3               ;------------------------------------------------------
002536  3               
002536  3               bscor0:
002536  3               ;	ldy #0
002536  3               
002536  3               ;	lda (z80_hl),y 		; fetch character.
002536  3  A4 rr        	ldy tmp
002538  3               bscor3:
002538  3  B9 C5 24     	lda score,y
00253B  3  20 73 2C     	jsr bchar 		; display big char.
00253E  3               
00253E  3               ;	inc z80_l 		; next score column.
00253E  3               ;	bne :+
00253E  3               ;	inc z80_h
00253E  3               ;:
00253E  3  E6 rr        	inc tmp
002540  3  C6 63        	dec z80_b
002542  3  F0 03        	beq :+
002544  3  4C 36 25     	jmp bscor0 		; repeat for all digits.
002547  3               :
002547  3  4C 2C 25     	jmp dscor2 		; tidy up line and column variables.
00254A  3               
00254A  3               ;-----------------------------------------------------
00254A  3               ; Adds number in the hl pair to the score.
00254A  3               ;-----------------------------------------------------
00254A  3               
00254A  3               addsc:
00254A  3  A9 C6        	lda #<(score+1) 	; ten thousands column.
00254C  3  85 64        	sta z80_e
00254E  3  A9 24        	lda #>(score+1)
002550  3  85 65        	sta z80_d
002552  3  A9 10        	lda #<10000		; amount to add each time.
002554  3  85 62        	sta z80_c
002556  3  A9 27        	lda #>10000
002558  3  85 63        	sta z80_b
00255A  3  20 9E 25     	jsr incsc		; add to score.
00255D  3               
00255D  3  E6 64        	inc z80_e		; thousands column.
00255F  3  D0 02        	bne :+
002561  3  E6 65        	inc z80_d
002563  3               :
002563  3  A9 E8        	lda #<1000		; amount to add each time.
002565  3  85 62        	sta z80_c
002567  3  A9 03        	lda #>1000
002569  3  85 63        	sta z80_b
00256B  3  20 9E 25     	jsr incsc 		; add to score.
00256E  3               
00256E  3  E6 64        	inc z80_e		; hundreds column.
002570  3  D0 02        	bne :+
002572  3  E6 65        	inc z80_d
002574  3               :
002574  3  A9 64        	lda #<100		; amount to add each time.
002576  3  85 62        	sta z80_c
002578  3  A9 00        	lda #>100
00257A  3  85 63        	sta z80_b
00257C  3  20 9E 25     	jsr incsc		; add to score.
00257F  3               
00257F  3  E6 64        	inc z80_e 		; tens column.
002581  3  D0 02        	bne :+
002583  3  E6 65        	inc z80_d
002585  3               :
002585  3  A9 0A        	lda #<10		; amount to add each time.
002587  3  85 62        	sta z80_c
002589  3  A9 00        	lda #>10
00258B  3  85 63        	sta z80_b
00258D  3  20 9E 25     	jsr incsc 		; add to score.
002590  3               
002590  3  E6 64        	inc z80_e		; units column.
002592  3  D0 02        	bne :+
002594  3  E6 65        	inc z80_d
002596  3               :
002596  3  A9 01        	lda #<1			; units.
002598  3  85 62        	sta z80_c
00259A  3  A9 00        	lda #>1
00259C  3  85 63        	sta z80_b
00259E  3               incsc:
00259E  3  A5 67        	lda z80_h		; store amount to add.
0025A0  3  48           	pha
0025A1  3  A5 66        	lda z80_l
0025A3  3  48           	pha
0025A4  3               
0025A4  3  38           	sec			; subtract from amount to add.
0025A5  3  A5 66        	lda z80_l
0025A7  3  E5 62        	sbc z80_c
0025A9  3  85 66        	sta z80_l
0025AB  3  A5 67        	lda z80_h
0025AD  3  E5 63        	sbc z80_b
0025AF  3  85 67        	sta z80_h
0025B1  3  90 14        	bcc incsc0		; too much, restore value.
0025B3  3               
0025B3  3  68           	pla			; delete the previous amount from the stack.
0025B4  3  68           	pla
0025B5  3               
0025B5  3  A5 65        	lda z80_d 		; store column position.
0025B7  3  48           	pha
0025B8  3  A5 64        	lda z80_e
0025BA  3  48           	pha
0025BB  3  20 CE 25     	jsr incsc2		; do the increment.
0025BE  3               
0025BE  3  68           	pla			; restore column.
0025BF  3  85 64        	sta z80_e
0025C1  3  68           	pla
0025C2  3  85 65        	sta z80_d
0025C4  3  4C 9E 25     	jmp incsc		; repeat until all added.
0025C7  3               
0025C7  3               incsc0:
0025C7  3  68           	pla			; restore previous value.
0025C8  3  85 66        	sta z80_l
0025CA  3  68           	pla
0025CB  3  85 67        	sta z80_h
0025CD  3  60           	rts
0025CE  3               incsc2:
0025CE  3  A0 00        	ldy #0
0025D0  3  B1 64        	lda (z80_de),y 		; get amount.
0025D2  3  18           	clc
0025D3  3  69 01        	adc #1			; add one to column.
0025D5  3  91 64        	sta (z80_de),y		; write new column total.
0025D7  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
0025D9  3  B0 01        	bcs :+
0025DB  3  60           	rts			; no, carry on.
0025DC  3               :
0025DC  3  A9 30        	lda #'0'		; make it zero.
0025DE  3  91 64        	sta (z80_de),y		; write new column total.
0025E0  3  C6 64        	dec z80_e		; back one column.
0025E2  3  D0 02        	bne :+
0025E4  3  C6 65        	dec z80_d
0025E6  3               :
0025E6  3  4C CE 25     	jmp incsc2
0025E9  3               
0025E9  3               ;------------------------------------
0025E9  3               ; Add bonus to score and reset bonus
0025E9  3               ;------------------------------------
0025E9  3               
0025E9  3               addbo:
0025E9  3  A2 05        	ldx #5			; last digit.
0025EB  3  18           	clc
0025EC  3               addbo0:
0025EC  3  BD C5 24     	lda score,x		; get score.
0025EF  3  7D D1 24     	adc bonus,x		; add bonus.
0025F2  3  38           	sec			; 0 to 18.
0025F3  3  E9 30        	sbc #48
0025F5  3  48           	pha
0025F6  3  A9 30        	lda #'0'
0025F8  3  9D D1 24     	sta bonus,x
0025FB  3  68           	pla
0025FC  3  C9 3A        	cmp #58
0025FE  3  90 03        	bcc addbo1
002600  3  38           	sec
002601  3  E9 0A        	sbc #10
002603  3               addbo1:
002603  3  9D C5 24     	sta score,x		; zeroise bonus.
002606  3  CA           	dex			; next digit.
002607  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002609  3  60           	rts
00260A  3               
00260A  3               ;------------------------------------
00260A  3               ; Swap score and bonus.
00260A  3               ;------------------------------------
00260A  3               
00260A  3               swpsb:
00260A  3  A2 05        	ldx #5			; digits to add.
00260C  3               swpsb0:
00260C  3  BD C5 24     	lda score,x 		; get score digits.
00260F  3  48           	pha			; save digit
002610  3  BD D1 24     	lda bonus,x 		; get bonus digits.
002613  3  9D C5 24     	sta score,x		; switch score-bonus
002616  3  68           	pla
002617  3  9D D1 24     	sta bonus,x
00261A  3  CA           	dex 			; repeat for all 6 digits.
00261B  3  10 EF        	bpl swpsb0
00261D  3  60           	rts
00261E  3               
00261E  3               ;----------------------------------------------------
00261E  3               ; Get print address.
00261E  3               ;----------------------------------------------------
00261E  3               
00261E  3               gprad:
00261E  3  A5 rr        	lda dispx		; get x
002620  3  85 rr        	sta scraddr		; store lb address
002622  3               
002622  3  2A           	rol a
002623  3  26 rr        	rol tmp
002625  3  2A           	rol a
002626  3  26 rr        	rol tmp
002628  3  2A           	rol a
002629  3  26 rr        	rol tmp
00262B  3  A5 rr        	lda tmp
00262D  3  29 07        	and #7
00262F  3  85 rr        	sta tmp
002631  3  A5 rr        	lda prtmod
002633  3  F0 02        	beq :+
002635  3  06 rr        	asl tmp
002637  3               :
002637  3  A5 rr        	lda tmp
002639  3  18           	clc
00263A  3  65 rr        	adc dispy		; get y
00263C  3  69 E4        	adc #>ScreenAddr		; add $80
00263E  3  85 rr        	sta scraddr+1		; store hb address
002640  3  60           	rts
002641  3               
002641  3               ;--------------------------------------------------------------
002641  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002641  3               ;
002641  3               ; Output:
002641  3               ;  bufaddr = MAP + dispy*32 + dispx
002641  3               ;--------------------------------------------------------------
002641  3               
002641  3               pradd:
002641  3  A5 rr        	lda dispy 		; y coordinate.
002643  3  85 rr        	sta bufaddr
002645  3  A9 00        	lda #0
002647  3  85 rr        	sta bufaddr+1
002649  3  06 rr        	asl bufaddr  		; multiply char by 32
00264B  3  26 rr        	rol bufaddr+1
00264D  3  06 rr        	asl bufaddr
00264F  3  26 rr        	rol bufaddr+1
002651  3  06 rr        	asl bufaddr
002653  3  26 rr        	rol bufaddr+1
002655  3  06 rr        	asl bufaddr
002657  3  26 rr        	rol bufaddr+1
002659  3  06 rr        	asl bufaddr
00265B  3  26 rr        	rol bufaddr+1
00265D  3  18           	clc			; add address of MAP graphics.
00265E  3  A5 rr        	lda bufaddr
002660  3  65 rr        	adc dispx
002662  3  69 00        	adc #<MAP
002664  3  85 rr        	sta bufaddr
002666  3  A5 rr        	lda bufaddr+1
002668  3  69 DD        	adc #>MAP
00266A  3  85 rr        	sta bufaddr+1
00266C  3  60           	rts
00266D  3               
00266D  3               ;----------------------------------------------------
00266D  3               ; Display character in A at dispx,dispy.
00266D  3               ;
00266D  3               ; Input:
00266D  3               ;  A 	   = character to print
00266D  3               ;----------------------------------------------------
00266D  3               
00266D  3               pchar:
00266D  3  85 rr        	sta fntaddr
00266F  3  A9 00        	lda #0
002671  3  85 rr        	sta fntaddr+1
002673  3  06 rr        	asl fntaddr  		; multiply char by 8.
002675  3  26 rr        	rol fntaddr+1
002677  3  06 rr        	asl fntaddr
002679  3  26 rr        	rol fntaddr+1
00267B  3  06 rr        	asl fntaddr
00267D  3  26 rr        	rol fntaddr+1
00267F  3               
00267F  3  A5 rr        	lda fntaddr
002681  3  18           	clc
002682  3  69 80        	adc #<(FONT-256)
002684  3  85 rr        	sta fntaddr		; that's the low byte.
002686  3  A5 rr        	lda fntaddr+1
002688  3  69 99        	adc #>(FONT-256)
00268A  3  85 rr        	sta fntaddr+1		; add displacement.
00268C  3               pchark:
00268C  3  20 1E 26     	jsr gprad		; get screen address.
00268F  3  A2 07        	ldx #7			; lines to write.
002691  3               pchar0:
002691  3  A0 00        	ldy #0
002693  3  B1 rr        	lda (fntaddr),y 	; get image byte.
002695  3  BC A4 26     	ldy scrtab,x		; Get rowoffset
002698  3               .if iflag
002698  3               	eor #$ff
002698  3               .endif
002698  3  91 rr        	sta (scraddr),y 	; copy to screen.
00269A  3  E6 rr        	inc fntaddr		; next image byte.
00269C  3  D0 02        	bne :+
00269E  3  E6 rr        	inc fntaddr+1
0026A0  3               :
0026A0  3  CA           	dex			; next screen row down.
0026A1  3  10 EE        	bpl pchar0		; repeat.
0026A3  3  60           	rts
0026A4  3               
0026A4  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
0026A8  3  60 40 20 00  
0026AC  3               
0026AC  3               ;----------------------------------------------
0026AC  3               
0026AC  3               ; Print attributes, properties and pixels.
0026AC  3               ;
0026AC  3               ; Input:
0026AC  3               ;  A	= tile number
0026AC  3               ;----------------------------------------------
0026AC  3               
0026AC  3               ;.repeat 294
0026AC  3               ;  .byte 0
0026AC  3               ;.endrep
0026AC  3               
0026AC  3               pbpattr:			; entry PUTBLOCK command
0026AC  3  A4 rr        	ldy charx
0026AE  3  84 rr        	sty dispx
0026B0  3  A4 rr        	ldy chary
0026B2  3  84 rr        	sty dispy
0026B4  3               pattr:
0026B4  3               .if aflag
0026B4  3               	pha
0026B4  3               	jsr wbloc		; save blockinfo
0026B4  3               	pla
0026B4  3               .endif
0026B4  3               
0026B4  3               pattr2:
0026B4  3  85 63        	sta z80_b		; store cell in b register for now.
0026B6  3  AA           	tax
0026B7  3  BD AF 4B     	lda bprop,x 		; block properties.
0026BA  3  85 62        	sta z80_c
0026BC  3  C9 08        	cmp #COLECT
0026BE  3  D0 05        	bne :+
0026C0  3  A5 63        	lda z80_b
0026C2  3  8D D3 26     	sta colpatt
0026C5  3               :
0026C5  3  20 41 26     	jsr pradd 		; get property buffer address.
0026C8  3  A5 62        	lda z80_c
0026CA  3  A0 00        	ldy #0
0026CC  3  91 rr        	sta (bufaddr),y 	; write property.
0026CE  3  A5 63        	lda z80_b 		; restore cell.
0026D0  3  4C D4 26     	jmp panp
0026D3  3               ; Print attributes, no properties.
0026D3  3               
0026D3  3               ;.repeat 263
0026D3  3               ; .byte 0
0026D3  3               ;.endrep
0026D3  3               
0026D3  3  00           colpatt:	.byte 0
0026D4  3               
0026D4  3               panp:
0026D4  3  85 64        	sta z80_e		; displacement in e.
0026D6  3  A9 00        	lda #0
0026D8  3  85 65        	sta z80_d		; no high byte.
0026DA  3  06 64        	asl z80_e  		; multiply char by 8.
0026DC  3  26 65        	rol z80_d
0026DE  3  06 64        	asl z80_e
0026E0  3  26 65        	rol z80_d
0026E2  3  06 64        	asl z80_e
0026E4  3  26 65        	rol z80_d
0026E6  3  18           	clc
0026E7  3  A5 64        	lda z80_e
0026E9  3  69 EF        	adc #<chgfx 		; address of graphics.
0026EB  3  85 rr        	sta tileaddr
0026ED  3  A5 65        	lda z80_d
0026EF  3  69 46        	adc #>chgfx
0026F1  3  85 rr        	sta tileaddr+1
0026F3  3  20 1E 26     	jsr gprad 		; get screen address.
0026F6  3  A2 07        	ldx #7			; number of pixel rows to write.
0026F8  3               panp0:
0026F8  3  A0 00        	ldy #0
0026FA  3  B1 rr        	lda (tileaddr),y 	; get image byte.
0026FC  3               .if iflag
0026FC  3               	eor #$ff		; Invert
0026FC  3               .endif
0026FC  3  BC A4 26     	ldy scrtab,x
0026FF  3  91 rr        	sta (scraddr),y 	; copy to screen.
002701  3  E6 rr        	inc tileaddr 		; next image byte.
002703  3  D0 02        	bne :+
002705  3  E6 rr        	inc tileaddr+1
002707  3               :
002707  3  CA           	dex	 		; repeat for 8 pixel rows.
002708  3  10 EE        	bpl panp0
00270A  3  E6 rr        	inc dispx 		; move along one.
00270C  3  E6 rr        	inc charx
00270E  3  60           	rts
00270F  3               
00270F  3               ;----------------------------------------------
00270F  3               ; Write block
00270F  3               ;----------------------------------------------
00270F  3               
00270F  3               .if aflag
00270F  3               wbloc:
00270F  3               	ldy #3
00270F  3               	sta (pbptr),y		; store block number
00270F  3               	dey
00270F  3               	lda dispx
00270F  3               	sta (pbptr),y		; write x position of block.
00270F  3               	dey
00270F  3               	lda dispy
00270F  3               	sta (pbptr),y		; write y position of block.
00270F  3               	dey
00270F  3               	lda scno
00270F  3               	sta (pbptr),y		; write screen.
00270F  3               	clc			; point to next free location
00270F  3               	lda pbptr
00270F  3               	adc #4
00270F  3               	sta pbptr
00270F  3               	bcc :+
00270F  3               	inc pbptr+1
00270F  3               :
00270F  3               	rts
00270F  3               .endif
00270F  3               
00270F  3               ;----------------------------------------------
00270F  3               ; Print character pixels, no more.
00270F  3               ;
00270F  3               ; Input:
00270F  3               ;  A	= character to print
00270F  3               ;----------------------------------------------
00270F  3               
00270F  3               pchr:
00270F  3  20 6D 26     	jsr pchar 		; show character in accumulator.
002712  3  E6 rr        	inc dispx		; move along one.
002714  3  60           	rts
002715  3               
002715  3               ;----------------------------------------------------
002715  3               ; Shifter sprite routine for objects.
002715  3               ;----------------------------------------------------
002715  3               
002715  3               .if oflag
002715  3               sprit7:
002715  3  A5 63        	lda z80_b
002717  3  F0 0F        	beq sprit0
002719  3  85 61        	sta z80_a
00271B  3               sprit3:
00271B  3  4E A9 27     	lsr spr			; shift into position.
00271E  3  6E AA 27     	ror spr+1
002721  3  6E AB 27     	ror spr+2
002724  3  C6 61        	dec z80_a		; one less iteration.
002726  3  D0 F3        	bne sprit3
002728  3               sprit0:
002728  3  60           	rts 			; now apply to screen.
002729  3               
002729  3               ;----------------------------------------------------
002729  3               ; Draw sprite
002729  3               ;----------------------------------------------------
002729  3               
002729  3               sprite:
002729  3  86 rr        	stx xtmp		; Save X-reg
00272B  3  20 27 2F     	jsr scadd 		; get screen address in scraddr.
00272E  3               
00272E  3  A5 rr        	lda dispx 		; x position.
002730  3  29 07        	and #7 			; position straddling cells.
002732  3  85 63        	sta z80_b		; store in b register.
002734  3               
002734  3  A5 66        	lda z80_l		; store sprite graphic address.
002736  3  8D 49 27     	sta sprit1+1
002739  3  8D 50 27     	sta sprit2+1
00273C  3  A5 67        	lda z80_h
00273E  3  8D 4A 27     	sta sprit1+2
002741  3  8D 51 27     	sta sprit2+2
002744  3               
002744  3  A2 00        	ldx #0			; pixel height.
002746  3  A0 00        	ldy #0
002748  3               sprit1:
002748  3  BD 6C 98     	lda objdta,x		; fetch first byte.
00274B  3  8D A9 27     	sta spr
00274E  3  E8           	inx
00274F  3               sprit2:
00274F  3  BD 6C 98     	lda objdta,x
002752  3  8D AA 27     	sta spr+1
002755  3               
002755  3  A9 00        	lda #0
002757  3  8D AB 27     	sta spr+2
00275A  3  20 15 27     	jsr sprit7		; shift sprite
00275D  3               
00275D  3  CA           	dex
00275E  3  AD A9 27     	lda spr			; fetch graphic.
002761  3  BC 89 27     	ldy spritetab,x
002764  3  51 rr        	eor (scraddr),y		; merge with screen image.
002766  3  91 rr        	sta (scraddr),y		; write to screen.
002768  3  E8           	inx			; next screen byte.
002769  3               
002769  3  AD AA 27     	lda spr+1		; fetch graphic.
00276C  3  BC 89 27     	ldy spritetab,x
00276F  3  51 rr        	eor (scraddr),y		; merge with screen image.
002771  3  91 rr        	sta (scraddr),y		; write to screen.
002773  3  C8           	iny
002774  3               
002774  3  AD AB 27     	lda spr+2		; fetch graphic.
002777  3  51 rr        	eor (scraddr),y		; merge with screen image.
002779  3  91 rr        	sta (scraddr),y		; write to screen.
00277B  3               
00277B  3  E8           	inx			; next source byte.
00277C  3  E0 10        	cpx #16
00277E  3  D0 02        	bne :+
002780  3  E6 rr        	inc scraddr+1
002782  3               :
002782  3  E0 20        	cpx #32
002784  3  D0 C2        	bne sprit1		; repeat
002786  3               
002786  3  A6 rr        	ldx xtmp		; retreive X-reg
002788  3  60           	rts
002789  3               
002789  3               spritetab:
002789  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
00278D  3  40 41 60 61  
002791  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002795  3  C0 C1 E0 E1  
002799  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
00279D  3  40 41 60 61  
0027A1  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0027A5  3  C0 C1 E0 E1  
0027A9  3               
0027A9  3  00 00 00     spr:	.byte 0,0,0
0027AC  3               
0027AC  3               ;xtmp:	.byte 0
0027AC  3               .endif
0027AC  3               
0027AC  3               ;-----------------------------------------------------------
0027AC  3               ; Get room address.
0027AC  3               ;-----------------------------------------------------------
0027AC  3               
0027AC  3               ;.repeat 273
0027AC  3               ;  .byte 0
0027AC  3               ;.endrep
0027AC  3               
0027AC  3               groom:
0027AC  3  A6 rr        	ldx scno 		; screen number.
0027AE  3  A0 00        	ldy #0
0027B0  3               groomx:
0027B0  3  A9 63        	lda #<scdat 		; pointer to screens.
0027B2  3  85 66        	sta z80_l
0027B4  3  A9 6B        	lda #>scdat
0027B6  3  85 67        	sta z80_h
0027B8  3               groom1:
0027B8  3  E0 00        	cpx #0			; is it the first one?
0027BA  3  F0 15        	beq groom0 		; no more screens to skip.
0027BC  3               
0027BC  3  18           	clc
0027BD  3  A5 66        	lda z80_l
0027BF  3  79 63 6B     	adc scdat,y 		; low byte of screen size.
0027C2  3  85 66        	sta z80_l
0027C4  3  C8           	iny			; point to high byte.
0027C5  3  A5 67        	lda z80_h
0027C7  3  79 63 6B     	adc scdat,y 		; high byte of screen size.
0027CA  3  85 67        	sta z80_h
0027CC  3  C8           	iny			; next address.
0027CD  3               
0027CD  3  CA           	dex 			; one less iteration.
0027CE  3  4C B8 27     	jmp groom1 		; loop until we reach the end.
0027D1  3               groom0:
0027D1  3  AD BC 96     	lda numsc 		; add displacement.
0027D4  3  0A           	asl a
0027D5  3  18           	clc			; add double displacement to address.
0027D6  3  65 66        	adc z80_l
0027D8  3  85 66        	sta z80_l
0027DA  3  A5 67        	lda z80_h
0027DC  3  69 00        	adc #0
0027DE  3  85 67        	sta z80_h
0027E0  3  60           	rts
0027E1  3               
0027E1  3               ;-----------------------------------------------------------
0027E1  3               ; Draw present room.
0027E1  3               ;-----------------------------------------------------------
0027E1  3               
0027E1  3               droom:
0027E1  3  AD 26 20     	lda wintop 		; window top.
0027E4  3  85 rr        	sta dispy		; set cursor y position.
0027E6  3               droom2:
0027E6  3  20 AC 27     	jsr groom 		; get address of current room.
0027E9  3  A9 00        	lda #0	 		; zero in accumulator.
0027EB  3  85 rr        	sta comcnt 		; reset compression counter.
0027ED  3  AD 28 20     	lda winhgt 		; height of window.
0027F0  3  85 rr        	sta rrow		; set row counter
0027F2  3               droom0:
0027F2  3  AD 27 20     	lda winlft 		; window left edge.
0027F5  3  85 rr        	sta dispx 		; set cursor x position.
0027F7  3  AD 29 20     	lda winwid 		; width of window.
0027FA  3  85 rr        	sta rcol		; set column counter
0027FC  3               droom1:
0027FC  3  20 0D 28     	jsr flbyt 		; decompress next byte on the fly.
0027FF  3  20 B4 26     	jsr pattr2 		; show attributes and block.
002802  3  C6 rr        	dec rcol		; one less column.
002804  3  D0 F6        	bne droom1 		; repeat for entire line.
002806  3  E6 rr        	inc dispy		; move down one line.
002808  3  C6 rr        	dec rrow 		; one less row.
00280A  3  D0 E6        	bne droom0 		; repeat for all rows.
00280C  3  60           	rts
00280D  3               
00280D  3               ;rcol:	.byte 0
00280D  3               ;rrow:	.byte 0
00280D  3               
00280D  3               ;----------------------------------------------
00280D  3               ; Decompress bytes on-the-fly.
00280D  3               ;----------------------------------------------
00280D  3               
00280D  3               flbyt:
00280D  3  A5 rr        	lda comcnt 		; compression counter.
00280F  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002811  3               
002811  3  A0 00        	ldy #0
002813  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002815  3  E6 66        	inc z80_l 		; point to next cell.
002817  3  D0 02        	bne :+
002819  3  E6 67        	inc z80_h
00281B  3               :
00281B  3  C9 FF        	cmp #255 		; is this byte a control code?
00281D  3  F0 01        	beq :+
00281F  3  60           	rts 			; no, this byte is uncompressed.
002820  3               :
002820  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002822  3  85 rr        	sta combyt 		; set up the type.
002824  3  E6 66        	inc z80_l 		; point to quantity.
002826  3  D0 02        	bne :+
002828  3  E6 67        	inc z80_h
00282A  3               :
00282A  3  B1 66        	lda (z80_hl),y 		; get quantity.
00282C  3  E6 66        	inc z80_l 		; point to next byte.
00282E  3  D0 02        	bne :+
002830  3  E6 67        	inc z80_h
002832  3               :
002832  3               flbyt1:
002832  3  85 rr        	sta comcnt 		; store new quantity.
002834  3  C6 rr        	dec comcnt		; one less.
002836  3  A5 rr        	lda combyt 		; byte to expand.
002838  3  60           	rts
002839  3               
002839  3               ;combyt:	.byte 0			; byte type compressed.
002839  3               ;comcnt:	.byte 0			; compression counter.
002839  3               
002839  3               ;------------------------------------------
002839  3               ; Ladder down check.
002839  3               ;
002839  3               ; Input:
002839  3               ;  IX = sprite pointer
002839  3               ;------------------------------------------
002839  3               
002839  3               .if lflag
002839  3               laddd:
002839  3  A0 09        	ldy #9
00283B  3  B1 68        	lda (z80_ix),y		; x coordinate.
00283D  3  85 rr        	sta dispx
00283F  3               
00283F  3  A0 08        	ldy #8
002841  3  B1 68        	lda (z80_ix),y		; y coordinate.
002843  3  29 FE        	and #254		; make it even.
002845  3  91 68        	sta (z80_ix),y 		; reset it.
002847  3  18           	clc 			; look down 16 pixels.
002848  3               numsp5:
002848  3  69 10        	adc #SPR_HGT
00284A  3  85 rr        	sta dispy		; coords in dispx,dispy.
00284C  3  4C 62 28     	jmp laddv
00284F  3               
00284F  3               ;------------------------------------------
00284F  3               ; Ladder up check.
00284F  3               ;
00284F  3               ; Input:
00284F  3               ;  IX = sprite pointer
00284F  3               ;
00284F  3               ; Output:
00284F  3               ;  A  = 0 is ok, A <>0 is not ok
00284F  3               ;------------------------------------------
00284F  3               
00284F  3               laddu:
00284F  3  A0 09        	ldy #9
002851  3  B1 68        	lda (z80_ix),y		; x coordinate.
002853  3  85 rr        	sta dispx
002855  3               
002855  3  A0 08        	ldy #8
002857  3  B1 68        	lda (z80_ix),y		; y coordinate.
002859  3  29 FE        	and #254 		; make it even.
00285B  3  91 68        	sta (z80_ix),y		; reset it.
00285D  3  18           	clc 			; look 2 pixels above feet.
00285E  3               numsp6:
00285E  3  69 0E        	adc #SPR_HGT-2
002860  3  85 rr        	sta dispy		; coords in dispx,dispy.
002862  3               laddv:
002862  3  20 44 2B     	jsr tstbl 		; get map address.
002865  3  20 7B 2A     	jsr ldchk 		; standard ladder check.
002868  3  F0 01        	beq :+
00286A  3  60           	rts 			; no way through.
00286B  3               :
00286B  3  E6 rr        	inc bufaddr 		; look right one cell.
00286D  3  D0 02        	bne :+
00286F  3  E6 rr        	inc bufaddr+1
002871  3               :
002871  3  20 7B 2A     	jsr ldchk 		; do the check.
002874  3  F0 01        	beq :+
002876  3  60           	rts 			; impassable.
002877  3               :
002877  3  A5 rr        	lda dispx 		; y coordinate.
002879  3  29 07        	and #7 			; position straddling block cells.
00287B  3  D0 01        	bne :+
00287D  3  60           	rts 			; no more checks needed.
00287E  3               :
00287E  3  E6 rr        	inc bufaddr 		; look to third cell.
002880  3  D0 02        	bne :+
002882  3  E6 rr        	inc bufaddr+1
002884  3               :
002884  3  20 7B 2A     	jsr ldchk 		; do the check.
002887  3  60           	rts  			; return with zero flag set accordingly.
002888  3               .endif
002888  3               
002888  3               ;---------------------------------------------------------
002888  3               ; Can go up check.
002888  3               ;
002888  3               ; Input:
002888  3               ;  IX = sprite pointer
002888  3               ;
002888  3               ; Output:
002888  3               ;  A  = 0 is ok, A <>0 is not ok
002888  3               ;---------------------------------------------------------
002888  3               
002888  3               cangu:
002888  3  A0 09        	ldy #9
00288A  3  B1 68        	lda (z80_ix),y		; x coordinate.
00288C  3  85 rr        	sta dispx
00288E  3  A0 08        	ldy #8
002890  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002892  3  38           	sec
002893  3  E9 02        	sbc #2
002895  3  85 rr        	sta dispy		; coords in dispx,dispy.
002897  3  20 44 2B     	jsr tstbl 		; get map address.
00289A  3  20 4A 2A     	jsr lrchk 		; standard left/right check.
00289D  3  F0 01        	beq :+
00289F  3  60           	rts			; no way through.
0028A0  3               :
0028A0  3  E6 rr        	inc bufaddr		; look right one cell.
0028A2  3  D0 02        	bne :+
0028A4  3  E6 rr        	inc bufaddr+1
0028A6  3               :
0028A6  3  20 4A 2A     	jsr lrchk 		; do the check.
0028A9  3  F0 01        	beq :+
0028AB  3  60           	rts			; impassable.
0028AC  3               :
0028AC  3  A5 rr        	lda dispx		; x coordinate.
0028AE  3  29 07        	and #7			; position straddling block cells.
0028B0  3  D0 01        	bne :+
0028B2  3  60           	rts			; no more checks needed.
0028B3  3               :
0028B3  3  E6 rr        	inc bufaddr		; look to third cell.
0028B5  3  D0 02        	bne :+
0028B7  3  E6 rr        	inc bufaddr+1
0028B9  3               :
0028B9  3  20 4A 2A     	jsr lrchk		; do the check.
0028BC  3  60           	rts 			; return with zero flag set accordingly.
0028BD  3               
0028BD  3               ;---------------------------------------------------------
0028BD  3               ; Can go down check.
0028BD  3               ;
0028BD  3               ; Input:
0028BD  3               ;  IX = sprite pointer
0028BD  3               ;
0028BD  3               ; Output:
0028BD  3               ;  A  = 0 is ok, A <>0 is not ok
0028BD  3               ;---------------------------------------------------------
0028BD  3               
0028BD  3               ;.repeat 264
0028BD  3               ;  .byte 0
0028BD  3               ;.endrep
0028BD  3               
0028BD  3               cangd:
0028BD  3  A0 09        	ldy #9
0028BF  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0028C1  3  85 rr        	sta dispx
0028C3  3  A0 08        	ldy #8
0028C5  3  B1 68        	lda (z80_ix),y		; y coordinate.
0028C7  3  18           	clc
0028C8  3               numsp3:
0028C8  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
0028CA  3  85 rr        	sta dispy		; coords in dispx,dispy.
0028CC  3  20 44 2B     	jsr tstbl 		; get map address.
0028CF  3  20 5F 2A     	jsr plchk 		; block, platform check.
0028D2  3  F0 01        	beq :+
0028D4  3  60           	rts			; no way through.
0028D5  3               :
0028D5  3  E6 rr        	inc bufaddr		; look right one cell.
0028D7  3  D0 02        	bne :+
0028D9  3  E6 rr        	inc bufaddr+1
0028DB  3               :
0028DB  3  20 5F 2A     	jsr plchk		; block, platform check.
0028DE  3  F0 01        	beq :+
0028E0  3  60           	rts			; impassable.
0028E1  3               :
0028E1  3  A5 rr        	lda dispx		; x coordinate.
0028E3  3  29 07        	and #7			; position straddling block cells.
0028E5  3  D0 01        	bne :+
0028E7  3  60           	rts			; no more checks needed.
0028E8  3               :
0028E8  3  E6 rr        	inc bufaddr		; look to third cell.
0028EA  3  D0 02        	bne :+
0028EC  3  E6 rr        	inc bufaddr+1
0028EE  3               :
0028EE  3  20 5F 2A     	jsr plchk		; block, platform check.
0028F1  3  60           	rts			; return with zero flag set accordingly.
0028F2  3               
0028F2  3               ;---------------------------------------------------------
0028F2  3               ; Can go left check.
0028F2  3               ;
0028F2  3               ; Input:
0028F2  3               ;  IX = sprite pointer
0028F2  3               ;
0028F2  3               ; Output:
0028F2  3               ;  A  = 0 is ok, A <>0 is not ok
0028F2  3               ;---------------------------------------------------------
0028F2  3               
0028F2  3               cangl:
0028F2  3  A0 08        	ldy #8
0028F4  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0028F6  3  85 rr        	sta dispy
0028F8  3  A0 09        	ldy #9
0028FA  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0028FC  3  38           	sec
0028FD  3  E9 02        	sbc #2			; look left 2 pixels.
0028FF  3  85 rr        	sta dispx		; coords in dispx,dispy.
002901  3  4C 23 2A     	jmp cangh		; test if we can go there.
002904  3               
002904  3               ;---------------------------------------------------------
002904  3               ; Can go right check.
002904  3               ;
002904  3               ; Input:
002904  3               ;  IX = sprite pointer
002904  3               ;
002904  3               ; Output:
002904  3               ;  A  = 0 is ok, A <>0 is not ok
002904  3               ;---------------------------------------------------------
002904  3               
002904  3  00 00 00 00  .repeat 272
002908  3  00 00 00 00  
00290C  3  00 00 00 00  
002A14  3                 .byte 0
002A14  3               .endrep
002A14  3               
002A14  3               cangr:
002A14  3  A0 08        	ldy #8
002A16  3  B1 68        	lda (z80_ix),y		; y coordinate.
002A18  3  85 rr        	sta dispy
002A1A  3  A0 09        	ldy #9
002A1C  3  B1 68        	lda (z80_ix),y		; x coordinate.
002A1E  3  18           	clc
002A1F  3  69 10        	adc #16			; look right 16 pixels.
002A21  3  85 rr        	sta dispx		; coords in dispx,dispy.
002A23  3               cangh:
002A23  3               cangh2:
002A23  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
002A25  3  85 63        	sta z80_b
002A27  3  A5 rr        	lda dispy		; y position.
002A29  3  29 07        	and #7			; does x straddle cells?
002A2B  3  D0 02        	bne cangh0		; yes, loop counter is good.
002A2D  3  C6 63        	dec z80_b		; one less row to write.
002A2F  3               cangh0:
002A2F  3  20 44 2B     	jsr tstbl		; get map address.
002A32  3               cangh1:
002A32  3  20 4A 2A     	jsr lrchk		; standard left/right check.
002A35  3  F0 01        	beq :+
002A37  3  60           	rts			; no way through.
002A38  3               :
002A38  3  48           	pha
002A39  3  18           	clc
002A3A  3  A5 rr        	lda bufaddr
002A3C  3  69 20        	adc #32			; look down.
002A3E  3  85 rr        	sta bufaddr
002A40  3  90 02        	bcc :+
002A42  3  E6 rr        	inc bufaddr+1
002A44  3               :
002A44  3  68           	pla
002A45  3               
002A45  3  C6 63        	dec z80_b
002A47  3  D0 E9        	bne cangh1
002A49  3  60           	rts
002A4A  3               
002A4A  3               ;-------------------------------------
002A4A  3               ; Check left/right movement is okay.
002A4A  3               ;
002A4A  3               ; Input:
002A4A  3               ;  bufaddr = MAP + x/8 + y/8*32
002A4A  3               ;
002A4A  3               ; Output:
002A4A  3               ;  A  = 0 is ok, A <>0 is not ok
002A4A  3               ;-------------------------------------
002A4A  3               
002A4A  3               lrchk:
002A4A  3  A0 00        	ldy #0
002A4C  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002A4E  3  C9 02        	cmp #WALL 		; is it passable?
002A50  3  F0 0A        	beq lrchkx		; no.
002A52  3               
002A52  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002A54  3  F0 06        	beq lrchkx		; not passable.
002A56  3  A9 00        	lda #0
002A58  3  60           	rts
002A59  3               
002A59  3               ;--------------------------------------------------------------
002A59  3               ; Called by mmenu
002A59  3               ;--------------------------------------------------------------
002A59  3               
002A59  3               always:
002A59  3  A9 FF        	lda #255		; report it as okay.
002A5B  3  60           	rts
002A5C  3               
002A5C  3               lrchkx:
002A5C  3  A9 01        	lda #1 			; reset all bits.
002A5E  3  60           	rts
002A5F  3               
002A5F  3               
002A5F  3               ;--------------------------------------------------------------
002A5F  3               ; Check platform or solid item is not in way.
002A5F  3               ;
002A5F  3               ; Input:
002A5F  3               ;  bufaddr = MAP + x/8 + y/8*32
002A5F  3               ;
002A5F  3               ; Output:
002A5F  3               ;  A  = 0 is ok, A <>0 is not ok
002A5F  3               ;--------------------------------------------------------------
002A5F  3               
002A5F  3               plchk:
002A5F  3  A0 00        	ldy #0
002A61  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002A63  3  C9 02        	cmp #WALL 		; is it passable?
002A65  3  F0 F5        	beq lrchkx		; no.
002A67  3               .if pflag .or dflag
002A67  3               	cmp #FODDER		; fodder has to be dug.
002A67  3               	beq lrchkx		; not passable.
002A67  3               .endif
002A67  3  C9 01        	cmp #PLATFM		; platform is solid.
002A69  3  F0 07        	beq plchkx		; not passable.
002A6B  3               .if lflag
002A6B  3  C9 03        	cmp #LADDER		; is it a ladder?
002A6D  3  F0 ED        	beq lrchkx		; on ladder, deny movement.
002A6F  3               .endif
002A6F  3               plchk0:
002A6F  3  A9 00        	lda #0			; report as ok
002A71  3  60           	rts
002A72  3               plchkx:
002A72  3  A5 rr        	lda dispy		; x coordinate.
002A74  3  29 07        	and #7			; position straddling blocks.
002A76  3  F0 E4        	beq lrchkx		; on platform, deny movement.
002A78  3  4C 6F 2A     	jmp plchk0
002A7B  3               
002A7B  3               ;--------------------------------------------------------------
002A7B  3               ; Check ladder is available.
002A7B  3               ;
002A7B  3               ; Input:
002A7B  3               ;  bufaddr = MAP + x/8 + y/8*32
002A7B  3               ;
002A7B  3               ; Output:
002A7B  3               ;  A  = 0 is ok, A <>0 is not ok
002A7B  3               ;--------------------------------------------------------------
002A7B  3               
002A7B  3               .if lflag
002A7B  3               ldchk:
002A7B  3  A0 00        	ldy #0
002A7D  3  B1 rr        	lda (bufaddr),y 	; fetch cell.
002A7F  3  C9 03        	cmp #LADDER 		; is it a ladder?
002A81  3  F0 03        	beq :+
002A83  3  A9 01        	lda #1
002A85  3  60           	rts  			; return with zero flag set accordingly.
002A86  3               :
002A86  3  A9 00        	lda #0
002A88  3  60           	rts
002A89  3               .endif
002A89  3               
002A89  3               ;--------------------------------------------------------------
002A89  3               ; Get collectables.
002A89  3               ;--------------------------------------------------------------
002A89  3               
002A89  3               .if cflag
002A89  3               getcol:
002A89  3                       lda #COLECT             ; collectable blocks.
002A89  3                       sta z80_b
002A89  3                       jsr tded                ; test for collectable blocks.
002A89  3                       cmp z80_b               ; did we find one?
002A89  3                       beq :+
002A89  3                       rts                     ; none were found, job done.
002A89  3               :
002A89  3                       jsr gtblk               ; get block.
002A89  3                       jsr evnt20              ; collected block event.
002A89  3                       jmp getcol              ; repeat until none left.
002A89  3               
002A89  3               ; Get collectable block.
002A89  3               
002A89  3               gtblk:
002A89  3               	ldy #0
002A89  3               	lda (bufaddr),y
002A89  3               	sta z80_a
002A89  3                       lda #0
002A89  3                       sta (bufaddr),y		; make it empty now.
002A89  3               
002A89  3               	lda bufaddr		; set dispx
002A89  3               	and #31
002A89  3               	sta dispx
002A89  3               
002A89  3               	lda bufaddr+1		; Set dispy
002A89  3               	sec
002A89  3               	sbc #>MAP
002A89  3               	sta bufaddr+1
002A89  3               	asl bufaddr
002A89  3               	rol bufaddr+1
002A89  3               	asl bufaddr
002A89  3               	rol bufaddr+1
002A89  3               	asl bufaddr
002A89  3               	rol bufaddr+1
002A89  3               	lda bufaddr+1
002A89  3               	sta dispy
002A89  3               
002A89  3               	lda colpatt		; get blocknr
002A89  3               	sta z80_e		; displacement in e.
002A89  3               	lda #0
002A89  3               	sta z80_d		; no high byte.
002A89  3               	asl z80_e  		; multiply char by 8.
002A89  3               	rol z80_d
002A89  3               	asl z80_e
002A89  3               	rol z80_d
002A89  3               	asl z80_e
002A89  3               	rol z80_d
002A89  3               	clc
002A89  3               	lda z80_e
002A89  3               	adc #<chgfx 		; address of graphics.
002A89  3               	sta tileaddr
002A89  3               	lda z80_d
002A89  3               	adc #>chgfx
002A89  3               	sta tileaddr+1
002A89  3               	jsr gprad 		; get screen address.
002A89  3               	ldx #7			; number of pixel rows to write.
002A89  3               gtblk0:
002A89  3               	ldy #0
002A89  3               	lda (tileaddr),y 	; get image byte.
002A89  3               	ldy scrtab,x
002A89  3               	eor (scraddr),y 	; XOR tile on screen
002A89  3               	sta (scraddr),y 	; copy to screen.
002A89  3               	inc tileaddr 		; next image byte.
002A89  3               	bne :+
002A89  3               	inc tileaddr+1
002A89  3               :
002A89  3               	dex	 		; repeat for 8 pixel rows.
002A89  3               	bpl gtblk0
002A89  3               	rts
002A89  3               .endif
002A89  3               
002A89  3               ;--------------------------------------------------------------
002A89  3               ; Touched deadly block check.
002A89  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002A89  3               ;
002A89  3               ; Input:
002A89  3               ;  IX = sprite address
002A89  3               ;
002A89  3               ; Output:
002A89  3               ;  A  = 0 is ok, A=5 is not ok
002A89  3               ;--------------------------------------------------------------
002A89  3               
002A89  3               tded:
002A89  3  A0 08        	ldy #8
002A8B  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002A8D  3  85 rr        	sta dispy
002A8F  3  C8           	iny
002A90  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002A92  3  85 rr        	sta dispx		; coords in dispx,dispy.
002A94  3  20 44 2B     	jsr tstbl		; get map address.
002A97  3  48           	pha
002A98  3  A9 1F        	lda #31			; default distance to next line down.
002A9A  3  85 64        	sta z80_e
002A9C  3  68           	pla
002A9D  3  C5 63        	cmp z80_b		; is this the required block?
002A9F  3  D0 01        	bne :+
002AA1  3  60           	rts			; yes.
002AA2  3               :
002AA2  3  E6 rr        	inc bufaddr 		; next cell.
002AA4  3  D0 02        	bne :+
002AA6  3  E6 rr        	inc bufaddr+1
002AA8  3               :
002AA8  3  A0 00        	ldy #0
002AAA  3  B1 rr        	lda (bufaddr),y		; fetch type.
002AAC  3  C5 63        	cmp z80_b 		; is this deadly/custom?
002AAE  3  D0 01        	bne :+
002AB0  3  60           	rts			; yes.
002AB1  3               :
002AB1  3  A5 rr        	lda dispx		; horizontal position.
002AB3  3  85 62        	sta z80_c 		; store column in c register.
002AB5  3  29 07        	and #7			; is it straddling cells?
002AB7  3  D0 03        	bne :+
002AB9  3  4C CD 2A     	jmp tded0		; no.
002ABC  3               :
002ABC  3  E6 rr        	inc bufaddr 		; last cell.
002ABE  3  D0 02        	bne :+
002AC0  3  E6 rr        	inc bufaddr+1
002AC2  3               :
002AC2  3  A0 00        	ldy #0
002AC4  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002AC6  3  C5 63        	cmp z80_b		; is this the block?
002AC8  3  D0 01        	bne :+
002ACA  3  60           	rts			; yes.
002ACB  3               :
002ACB  3  C6 64        	dec z80_e		; one less cell to next row down.
002ACD  3               tded0:
002ACD  3  18           	clc 			; point to next row.
002ACE  3  A5 rr        	lda bufaddr
002AD0  3  65 64        	adc z80_e
002AD2  3  85 rr        	sta bufaddr
002AD4  3  90 02        	bcc :+
002AD6  3  E6 rr        	inc bufaddr+1
002AD8  3               :
002AD8  3  A0 00        	ldy #0
002ADA  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
002ADC  3  C5 63        	cmp z80_b		; is this fatal?
002ADE  3  D0 01        	bne :+
002AE0  3  60           	rts			; yes.
002AE1  3               :
002AE1  3  E6 rr        	inc bufaddr 		; next cell.
002AE3  3  D0 02        	bne :+
002AE5  3  E6 rr        	inc bufaddr+1
002AE7  3               :
002AE7  3  A0 00        	ldy #0
002AE9  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002AEB  3  C5 63        	cmp z80_b		; is this fatal?
002AED  3  D0 01        	bne :+
002AEF  3  60           	rts			; yes.
002AF0  3               :
002AF0  3  A5 62        	lda z80_c		; horizontal position.
002AF2  3  29 07        	and #7			; is it straddling cells?
002AF4  3  D0 03        	bne :+
002AF6  3  4C 08 2B     	jmp tded1 		; no.
002AF9  3               :
002AF9  3  E6 rr        	inc bufaddr		; last cell.
002AFB  3  D0 02        	bne :+
002AFD  3  E6 rr        	inc bufaddr+1
002AFF  3               :
002AFF  3  A0 00        	ldy #0
002B01  3  B1 rr        	lda (bufaddr),y		; fetch type.
002B03  3  C5 63        	cmp z80_b		; is this fatal?
002B05  3  D0 01        	bne :+
002B07  3  60           	rts			; yes.
002B08  3               :
002B08  3               tded1:
002B08  3  A5 rr        	lda dispy		; vertical position.
002B0A  3  29 07        	and #7 			; is it straddling cells?
002B0C  3  D0 01        	bne :+
002B0E  3  60           	rts			; no, job done.
002B0F  3               :
002B0F  3  18           	clc			; point to next row.
002B10  3  A5 rr        	lda bufaddr
002B12  3  65 64        	adc z80_e
002B14  3  85 rr        	sta bufaddr
002B16  3  90 02        	bcc :+
002B18  3  E6 rr        	inc bufaddr+1
002B1A  3               :
002B1A  3  A0 00        	ldy #0
002B1C  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
002B1E  3  C5 63        	cmp z80_b		; is this fatal?
002B20  3  D0 01        	bne :+
002B22  3  60           	rts			; yes.
002B23  3               :
002B23  3  E6 rr        	inc bufaddr		; next cell.
002B25  3  D0 02        	bne :+
002B27  3  E6 rr        	inc bufaddr+1
002B29  3               :
002B29  3  A0 00        	ldy #0
002B2B  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002B2D  3  C5 63        	cmp z80_b		; is this fatal?
002B2F  3  D0 01        	bne :+
002B31  3  60           	rts			; yes.
002B32  3               :
002B32  3  A5 62        	lda z80_c		; horizontal position.
002B34  3  29 07        	and #7			; is it straddling cells?
002B36  3  D0 01        	bne :+
002B38  3  60           	rts			; no.
002B39  3               :
002B39  3  E6 rr        	inc bufaddr		; last cell.
002B3B  3  D0 02        	bne :+
002B3D  3  E6 rr        	inc bufaddr+1
002B3F  3               :
002B3F  3  A0 00        	ldy #0
002B41  3  B1 rr        	lda (bufaddr),y		; fetch final type.
002B43  3  60           	rts 			; return with final type in accumulator.
002B44  3               
002B44  3               ;---------------------------------------------------
002B44  3               ; Fetch block type at (dispx, dispy).
002B44  3               ;
002B44  3               ; Output:
002B44  3               ;  A = block type
002B44  3               ;---------------------------------------------------
002B44  3               
002B44  3               tstbl:
002B44  3  A5 rr        	lda dispy 		; fetch y coord.
002B46  3  4A           	lsr a			; bufaddr = y/8
002B47  3  4A           	lsr a
002B48  3  4A           	lsr a
002B49  3  85 rr        	sta chary
002B4B  3               
002B4B  3  85 rr        	sta bufaddr
002B4D  3  A9 00        	lda #0
002B4F  3  85 rr        	sta bufaddr+1
002B51  3               
002B51  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
002B53  3  26 rr        	rol bufaddr+1
002B55  3  06 rr        	asl bufaddr
002B57  3  26 rr        	rol bufaddr+1
002B59  3  06 rr        	asl bufaddr
002B5B  3  26 rr        	rol bufaddr+1
002B5D  3  06 rr        	asl bufaddr
002B5F  3  26 rr        	rol bufaddr+1
002B61  3  06 rr        	asl bufaddr
002B63  3  26 rr        	rol bufaddr+1
002B65  3               
002B65  3  A5 rr        	lda dispx		; x/8
002B67  3  4A           	lsr a
002B68  3  4A           	lsr a
002B69  3  4A           	lsr a
002B6A  3  85 rr        	sta charx
002B6C  3               
002B6C  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
002B6D  3  65 rr        	adc bufaddr
002B6F  3  69 00        	adc #<MAP
002B71  3  85 rr        	sta bufaddr
002B73  3  A5 rr        	lda bufaddr+1
002B75  3  69 DD        	adc #>MAP
002B77  3  85 rr        	sta bufaddr+1
002B79  3               
002B79  3  A0 00        	ldy #0
002B7B  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002B7D  3  60           	rts
002B7E  3               
002B7E  3               
002B7E  3               ;-------------------------------------------------------------------
002B7E  3               ; Jump - if we can.
002B7E  3               ; Requires initial speed to be set up in accumulator prior to call.
002B7E  3               ;
002B7E  3               ; Input:
002B7E  3               ;  IX = sprite address
002B7E  3               ;-------------------------------------------------------------------
002B7E  3               
002B7E  3               jump:
002B7E  3  A0 0D        	ldy #13
002B80  3  B1 68        	lda (z80_ix),y		; jump table low.
002B82  3  A0 0E        	ldy #14
002B84  3  11 68        	ora (z80_ix),y		; jump table high.
002B86  3  F0 01        	beq :+
002B88  3  60           	rts			; already in the air.
002B89  3               :
002B89  3  A9 9D        	lda #>jtab
002B8B  3  A0 0E        	ldy #14
002B8D  3  91 68        	sta (z80_ix),y		; set jump high.
002B8F  3  A9 80        	lda #<jtab		; jump table start.
002B91  3  A0 0D        	ldy #13
002B93  3  91 68        	sta (z80_ix),y		; set jump low.
002B95  3  60           	rts
002B96  3               
002B96  3               ; Jump table.
002B96  3               
002B96  3               ;jtab:
002B96  3               ;	.byte 248,250,252
002B96  3               ;	.byte 254,254,255
002B96  3               ;	.byte 255,255,0,0
002B96  3               ;	.byte 0,1,1,1,2,2
002B96  3               ;	.byte 4,6,8,8,8,99
002B96  3               
002B96  3               ;------------------------------------------------
002B96  3               ; Random numbers code.
002B96  3               ; Pseudo-random number generator, 8-bit.
002B96  3               ;
002B96  3               ; Output:
002B96  3               ;  RND = random number
002B96  3               ;------------------------------------------------
002B96  3               
002B96  3               random:
002B96  3  A5 rr        	lda seed
002B98  3  F0 05        	beq doEor
002B9A  3  0A           	asl a
002B9B  3  F0 04        	beq noEor
002B9D  3  90 02        	bcc noEor
002B9F  3  49 1D        doEor:	eor #$1d
002BA1  3  85 rr        noEor:	sta seed
002BA3  3  60           	rts
002BA4  3               
002BA4  3  A5 rr        	lda seed		; get last random number.
002BA6  3  0A           	asl a
002BA7  3  0A           	asl a
002BA8  3  18           	clc
002BA9  3  65 rr        	adc seed
002BAB  3  18           	clc
002BAC  3  69 45        	adc #$45
002BAE  3  85 rr        	sta seed		; store new seed.
002BB0  3  85 rr        	sta varrnd		; return number in variable.
002BB2  3  60           	rts
002BB3  3               
002BB3  3               ;--------------------------------------------------------
002BB3  3               ; Keys
002BB3  3               ;
002BB3  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002BB3  3               ;             ||||||||
002BB3  3               ;             |||||||+> Right    KEY 0  - X
002BB3  3               ;             ||||||+-> Left     KEY 1  - Z
002BB3  3               ;             |||||+--> Down     KEY 2  - .
002BB3  3               ;             ||||+---> Up       KEY 3  - ;
002BB3  3               ;             |||+----> Fire1    KEY 4  - SPC
002BB3  3               ;             ||+-----> Fire2    KEY 5  - Q
002BB3  3               ;             |+------> Fire3    KEY 6  - P
002BB3  3               ;             +-------> Not used
002BB3  3               ;
002BB3  3               ;                       Option1  KEY 7  - 1
002BB3  3               ;                       Option2  KEY 8  - 2
002BB3  3               ;                       Option3  KEY 9  - 3
002BB3  3               ;                       Option4  KEY 10 - 4
002BB3  3               ;--------------------------------------------------------
002BB3  3               
002BB3  3               ;              X   Z   .   ;  SPC  Q   P
002BB3  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002BB3  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002BB3  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002BB7  3  00 04 14     
002BBA  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
002BBE  3               
002BBE  3               ;-------------------------------------------------------
002BBE  3               ; Joystick and keyboard reading routines.
002BBE  3               ;
002BBE  3               ; contrl = 0, Keyboard
002BBE  3               ;          1, JoyKeyb
002BBE  3               ;          2, JoyMMC
002BBE  3               ;-------------------------------------------------------
002BBE  3               
002BBE  3               joykey:
002BBE  3  A5 rr        	lda contrl 		; control flag.
002BC0  3  C9 01        	cmp #1
002BC2  3  D0 03        	bne :+
002BC4  3  4C 49 9E     	jmp joy1 		; read keyboard joystick
002BC7  3               :
002BC7  3  C9 02        	cmp #2
002BC9  3  D0 03        	bne :+
002BCB  3  4C 79 9E     	jmp joy2 		; read MMC joystick.
002BCE  3               :
002BCE  3               ; Keyboard controls.
002BCE  3               
002BCE  3  A9 00        	lda #0		 	; zero reading.
002BD0  3  85 64        	sta z80_e
002BD2  3               
002BD2  3  A0 06        	ldy #6	 		; address of last key.
002BD4  3               joyke0:
002BD4  3  B9 96 9D     	lda keys,y 		; get key from table.
002BD7  3  20 20 9E     	jsr ktest		; being pressed?
002BDA  3  26 64        	rol z80_e 		; rotate into reading.
002BDC  3               
002BDC  3  88           	dey		 	; next key.
002BDD  3  10 F5        	bpl joyke0 		; repeat for all keys.
002BDF  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002BE1  3  85 rr        	sta joyval		; remember value.
002BE3  3  60           	rts
002BE4  3               
002BE4  3               ;---------------------------------------------------------------
002BE4  3               ; Display message.
002BE4  3               ;
002BE4  3               ; Input:
002BE4  3               ;  A = message number
002BE4  3               ;---------------------------------------------------------------
002BE4  3               
002BE4  3               dmsg:
002BE4  3  AA           	tax
002BE5  3  A9 7B        	lda #<msgdat		; pointer to messages.
002BE7  3  85 66        	sta z80_l
002BE9  3  A9 44        	lda #>msgdat
002BEB  3  85 67        	sta z80_h
002BED  3  20 FF 2C     	jsr getwrd		; get message number.
002BF0  3               dmsg3:
002BF0  3  20 EC 2C     	jsr preprt		; pre-printing stuff.
002BF3  3  20 D9 24     	jsr checkx		; make sure we"re in a printable range.
002BF6  3  A5 rr        	lda prtmod		; print mode.
002BF8  3  D0 47        	bne bmsg1		; no, double-height text.
002BFA  3               dmsg0:
002BFA  3  A5 67        	lda z80_h		; store string pointer.
002BFC  3  48           	pha
002BFD  3  A5 66        	lda z80_l
002BFF  3  48           	pha
002C00  3               
002C00  3  A0 00        	ldy #0
002C02  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
002C04  3  29 7F        	and #127		; remove any end marker.
002C06  3  C9 0D        	cmp #13
002C08  3  F0 24        	beq dmsg1
002C0A  3  20 6D 26     	jsr pchar		; display character.
002C0D  3  20 D9 2C     	jsr nexpos 		; display position.
002C10  3  D0 03        	bne dmsg2		; not on a new line.
002C12  3  20 DE 2C     	jsr nexlin		; next line down.
002C15  3               dmsg2:
002C15  3  68           	pla			; retrieve string pointer
002C16  3  85 66        	sta z80_l
002C18  3  68           	pla
002C19  3  85 67        	sta z80_h
002C1B  3               
002C1B  3  A0 00        	ldy #0
002C1D  3  B1 66        	lda (z80_hl),y		; fetch last character.
002C1F  3  0A           	asl a  			; was it the end?
002C20  3  90 03        	bcc :+
002C22  3  4C 2C 25     	jmp dscor2		; yes, job done.
002C25  3               :
002C25  3  E6 66        	inc z80_l		; next character to display.
002C27  3  D0 02        	bne :+
002C29  3  E6 67        	inc z80_h
002C2B  3               :
002C2B  3  4C FA 2B     	jmp dmsg0
002C2E  3               dmsg1:
002C2E  3  E6 rr        	inc dispy
002C30  3  A5 rr        	lda dispy
002C32  3  C9 18        	cmp #24
002C34  3  90 04        	bcc dmsg4
002C36  3  A9 00        	lda #0
002C38  3  85 rr        	sta dispy
002C3A  3               dmsg4:
002C3A  3  A9 00        	lda #0
002C3C  3  85 rr        	sta dispx
002C3E  3  4C 15 2C     	jmp dmsg2
002C41  3               
002C41  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
002C41  3               
002C41  3               ;----------------------------------------------------------
002C41  3               ; Display message in big text.
002C41  3               ;
002C41  3               ; Input:
002C41  3               ;  HL = string pointer
002C41  3               ;----------------------------------------------------------
002C41  3               
002C41  3               bmsg1:
002C41  3  A0 00        	ldy #0
002C43  3  B1 66        	lda (z80_hl),y 		; get character to display.
002C45  3  29 7F        	and #127		; only want 7 bits.
002C47  3  C9 0D        	cmp #13
002C49  3  F0 13        	beq bmsg2
002C4B  3  20 73 2C     	jsr bchar 		; display big char.
002C4E  3               bmsg3:
002C4E  3  A0 00        	ldy #0
002C50  3  B1 66        	lda (z80_hl),y 		; look at last character.
002C52  3  48           	pha
002C53  3  E6 66        	inc z80_l 		; next character in list.
002C55  3  D0 02        	bne :+
002C57  3  E6 67        	inc z80_h
002C59  3               :
002C59  3  68           	pla
002C5A  3  0A           	asl a  			; was terminator flag set?
002C5B  3  90 E4        	bcc bmsg1		; no, keep going.
002C5D  3  60           	rts
002C5E  3               bmsg2:
002C5E  3  A9 00        	lda #0
002C60  3  85 rr        	sta dispx
002C62  3  E6 rr        	inc dispy
002C64  3  E6 rr        	inc dispy
002C66  3  A5 rr        	lda dispy
002C68  3  C9 17        	cmp #23
002C6A  3  90 E2        	bcc bmsg3
002C6C  3  A9 00        	lda #0
002C6E  3  85 rr        	sta dispy
002C70  3  4C 4E 2C     	jmp bmsg3
002C73  3               
002C73  3               ;----------------------------------------------------------
002C73  3               ; Big character display.
002C73  3               ;
002C73  3               ; Input:
002C73  3               ;  A = character
002C73  3               ;----------------------------------------------------------
002C73  3               
002C73  3               bchar:
002C73  3  85 64        	sta z80_e		; save char in lb
002C75  3  A9 00        	lda #0
002C77  3  85 65        	sta z80_d		; reset hb
002C79  3               
002C79  3  06 64        	asl z80_e 		; multiply char by 8.
002C7B  3  26 65        	rol z80_d
002C7D  3  06 64        	asl z80_e
002C7F  3  26 65        	rol z80_d
002C81  3  06 64        	asl z80_e
002C83  3  26 65        	rol z80_d		; de = a*8
002C85  3               
002C85  3  18           	clc			; de = Fontpointer + a*8
002C86  3  A5 64        	lda z80_e
002C88  3  69 80        	adc #<(FONT-256) 		; address of font.
002C8A  3  85 64        	sta z80_e
002C8C  3  A5 65        	lda z80_d
002C8E  3  69 99        	adc #>(FONT-256)
002C90  3  85 65        	sta z80_d
002C92  3               
002C92  3  20 1E 26     	jsr gprad 		; get screen address.
002C95  3               
002C95  3  A2 00        	ldx #0			; height of character in font.
002C97  3               bchar0:
002C97  3  A0 00        	ldy #0
002C99  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
002C9B  3               
002C9B  3               .if iflag
002C9B  3               	eor #$ff
002C9B  3               .endif
002C9B  3               
002C9B  3  91 rr        	sta (scraddr),y
002C9D  3  48           	pha
002C9E  3  20 33 30     	jsr nline 		; next line down.
002CA1  3  68           	pla
002CA2  3  91 rr        	sta (scraddr),y
002CA4  3  20 33 30     	jsr nline 		; next line down.
002CA7  3               
002CA7  3  18           	clc
002CA8  3  E6 64        	inc z80_e 		; next line of font.
002CAA  3  D0 02        	bne :+
002CAC  3  E6 65        	inc z80_d
002CAE  3               :
002CAE  3  E8           	inx
002CAF  3  E0 08        	cpx #8
002CB1  3  D0 E4        	bne bchar0
002CB3  3               
002CB3  3  20 D9 2C     	jsr nexpos		; display position.
002CB6  3  D0 05        	bne bchar2 		; not on a new line.
002CB8  3               bchar3:
002CB8  3  E6 rr        	inc dispy
002CBA  3  20 DE 2C     	jsr nexlin 		; next line check.
002CBD  3               bchar2:
002CBD  3  4C 2C 25     	jmp dscor2		; tidy up line and column variables.
002CC0  3               
002CC0  3               
002CC0  3               ;-------------------------------------------------
002CC0  3               ; Display a character.
002CC0  3               ;
002CC0  3               ; Input:
002CC0  3               ;  A = character
002CC0  3               ;-------------------------------------------------
002CC0  3               
002CC0  3               achar:
002CC0  3  85 63        	sta z80_b 		; copy to b.
002CC2  3  20 EC 2C     	jsr preprt 		; get ready to print.
002CC5  3  A5 63        	lda z80_b		; character in accumulator.
002CC7  3  A6 rr        	ldx prtmod 		; print mode.
002CC9  3  F0 03        	beq :+
002CCB  3  4C 73 2C     	jmp bchar 		; no, double-height text.
002CCE  3               :
002CCE  3  20 6D 26     	jsr pchar 		; display character.
002CD1  3  20 D9 2C     	jsr nexpos 		; display position.
002CD4  3  F0 E2        	beq bchar3		; next line down.
002CD6  3  4C BD 2C     	jmp bchar2 		; tidy up.
002CD9  3               
002CD9  3               
002CD9  3               ;-------------------------------------------------
002CD9  3               ; Get next print column position.
002CD9  3               ;-------------------------------------------------
002CD9  3               
002CD9  3               nexpos:
002CD9  3  E6 rr        	inc dispx		; move along one position.
002CDB  3  A5 rr        	lda dispx 		; get coordinate.
002CDD  3               ;	and #31
002CDD  3  60           	rts 			; return with status in zero flag.
002CDE  3               
002CDE  3               ;-------------------------------------------------
002CDE  3               ; Get next print line position.
002CDE  3               ;-------------------------------------------------
002CDE  3               
002CDE  3               nexlin:
002CDE  3  E6 rr        	inc dispy 		; newline.
002CE0  3  A5 rr        	lda dispy		; vertical position.
002CE2  3  C9 18        	cmp #24			; past screen edge?
002CE4  3  B0 01        	bcs :+
002CE6  3  60           	rts			; no, still okay.
002CE7  3               :
002CE7  3  A9 00        	lda #0			; restart at top.
002CE9  3  85 rr        	sta dispy
002CEB  3  60           	rts
002CEC  3               
002CEC  3               ;--------------------------------------------------------
002CEC  3               ; Pre-print preliminaries.
002CEC  3               ;--------------------------------------------------------
002CEC  3               
002CEC  3               preprt:
002CEC  3  A9 80        	lda #<(FONT-256)		; font pointer.
002CEE  3  8D D7 24     	sta grbase		; set up graphics base.
002CF1  3  A9 99        	lda #>(FONT-256)
002CF3  3  8D D8 24     	sta grbase+1
002CF6  3               prescr:
002CF6  3  A5 rr        	lda charx 		; display coordinates.
002CF8  3  85 rr        	sta dispx		; set up general coordinates.
002CFA  3  A5 rr        	lda chary
002CFC  3  85 rr        	sta dispy
002CFE  3  60           	rts
002CFF  3               
002CFF  3               ;--------------------------------------------------------------
002CFF  3               ; Get messagenr x in hl
002CFF  3               ;
002CFF  3               ; Input:
002CFF  3               ;  HL = pointer to message list
002CFF  3               ;  X  = message number.
002CFF  3               ;--------------------------------------------------------------
002CFF  3               
002CFF  3               getwrd:
002CFF  3  E0 00        	cpx #0
002D01  3  D0 01        	bne:+ 			; first word in list?
002D03  3  60           	rts 			; yep, don't search.
002D04  3               :
002D04  3  A0 00        	ldy #0
002D06  3               getwd0:
002D06  3  B1 66        	lda (z80_hl),y
002D08  3  48           	pha
002D09  3  E6 66        	inc z80_l
002D0B  3  D0 02        	bne :+
002D0D  3  E6 67        	inc z80_h
002D0F  3               :
002D0F  3  68           	pla
002D10  3  C9 80        	cmp #128		; found end?
002D12  3  30 F2        	bmi getwd0		; no, carry on.
002D14  3  CA           	dex			; until we have right number.
002D15  3  D0 EF        	bne getwd0
002D17  3  60           	rts
002D18  3               
002D18  3               ;-----------------------------------------------------------
002D18  3               ; Bubble sort.
002D18  3               ;-----------------------------------------------------------
002D18  3               
002D18  3               bsort:
002D18  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
002D1A  3  85 rr        	sta qscnt
002D1C  3               
002D1C  3  A9 81        	lda #<sprtab 		; sprite table.
002D1E  3  85 68        	sta z80_x
002D20  3  A9 34        	lda #>sprtab
002D22  3  85 69        	sta z80_i
002D24  3               bsort0:
002D24  3  A0 00        	ldy #0
002D26  3  B1 68        	lda (z80_ix),y 		; first sprite type.
002D28  3  C9 FF        	cmp #255 		; is it switched off?
002D2A  3  F0 30        	beq swemp		; yes, may need to switch another in here.
002D2C  3               
002D2C  3  A0 11        	ldy #TABSIZ
002D2E  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
002D30  3  C9 FF        	cmp #255 		; is it enabled?
002D32  3  F0 0A        	beq bsort2 		; no, nothing to swap.
002D34  3               
002D34  3  A0 14        	ldy #TABSIZ+3
002D36  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
002D38  3  A0 03        	ldy #3
002D3A  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
002D3C  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
002D3E  3               bsort2:
002D3E  3  18           	clc
002D3F  3  A5 68        	lda z80_x
002D41  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002D43  3  85 68        	sta z80_x
002D45  3  90 02        	bcc :+
002D47  3  E6 69        	inc z80_i
002D49  3               :
002D49  3  C6 rr        	dec qscnt
002D4B  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
002D4D  3  60           	rts
002D4E  3               
002D4E  3               ;qscnt:	.byte 0
002D4E  3               
002D4E  3               bsort1:
002D4E  3  A0 11        	ldy #TABSIZ
002D50  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
002D52  3  C9 FF        	cmp #255		; is it enabled?
002D54  3  F0 E8        	beq bsort2		; no, nothing to swap.
002D56  3  20 6A 2D     	jsr swspr		; swap positions.
002D59  3  4C 3E 2D     	jmp bsort2
002D5C  3               swemp:
002D5C  3  A0 11        	ldy #TABSIZ
002D5E  3  B1 68        	lda (z80_ix),y		; next table entry.
002D60  3  C9 FF        	cmp #255		; is that one on?
002D62  3  F0 DA        	beq bsort2		; no, nothing to swap.
002D64  3  20 6A 2D     	jsr swspr		; swap positions.
002D67  3  4C 3E 2D     	jmp bsort2
002D6A  3               
002D6A  3               ; Swap sprites.
002D6A  3               
002D6A  3               swspr:
002D6A  3  A5 68        	lda z80_x		; table address
002D6C  3  85 64        	sta z80_e		; copy to de pair.
002D6E  3  85 66        	sta z80_l		; copy to hl pair.
002D70  3  A5 69        	lda z80_i
002D72  3  85 67        	sta z80_h
002D74  3  85 65        	sta z80_d
002D76  3               
002D76  3  18           	clc
002D77  3  A5 66        	lda z80_l
002D79  3  69 11        	adc #TABSIZ		; distance to second entry.
002D7B  3  85 66        	sta z80_l
002D7D  3  90 02        	bcc :+
002D7F  3  E6 67        	inc z80_h
002D81  3               :
002D81  3  A9 11        	lda #TABSIZ		; bytes to swap.
002D83  3  85 63        	sta z80_b
002D85  3  A0 00        	ldy #0
002D87  3               swspr0:
002D87  3  B1 66        	lda (z80_hl),y		; fetch second byte.
002D89  3  48           	pha
002D8A  3  B1 64        	lda (z80_de),y 		; fetch first byte.
002D8C  3  91 66        	sta (z80_hl),y 		; copy to second.
002D8E  3  68           	pla
002D8F  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
002D91  3               
002D91  3  E6 64        	inc z80_e 		; next byte.
002D93  3  D0 02        	bne :+
002D95  3  E6 65        	inc z80_d
002D97  3               :
002D97  3  E6 66        	inc z80_l 		; next byte.
002D99  3  D0 02        	bne :+
002D9B  3  E6 67        	inc z80_h
002D9D  3               :
002D9D  3  C6 63        	dec z80_b
002D9F  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
002DA1  3  60           	rts
002DA2  3               
002DA2  3               ;----------------------------------------------------
002DA2  3               ; Process sprites.
002DA2  3               ;----------------------------------------------------
002DA2  3               
002DA2  3               pspr:
002DA2  3  A9 0C        	lda #NUMSPR		; sprites to process.
002DA4  3  85 rr        	sta sprptr
002DA6  3               
002DA6  3  A9 81        	lda #<sprtab 		; sprite table.
002DA8  3  85 68        	sta z80_x
002DAA  3  A9 34        	lda #>sprtab
002DAC  3  85 69        	sta z80_i
002DAE  3               pspr1:
002DAE  3  A0 00        	ldy #0
002DB0  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
002DB2  3  C9 09        	cmp #9 			; within range of sprite types?
002DB4  3  B0 03        	bcs :+
002DB6  3  20 C9 2D     	jsr pspr2 		; yes, process this one.
002DB9  3               :
002DB9  3  18           	clc
002DBA  3  A5 68        	lda z80_x
002DBC  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002DBE  3  85 68        	sta z80_x
002DC0  3  90 02        	bcc :+
002DC2  3  E6 69        	inc z80_i		; next sprite.
002DC4  3               :
002DC4  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
002DC6  3  D0 E6        	bne pspr1
002DC8  3  60           	rts
002DC9  3               
002DC9  3               ;sprptr:	.byte 0
002DC9  3               
002DC9  3               pspr2:
002DC9  3  A5 68        	lda z80_x 		; store original sprite pointer.
002DCB  3  85 rr        	sta ogptr
002DCD  3  A5 69        	lda z80_i
002DCF  3  85 rr        	sta ogptr+1
002DD1  3  20 DD 2D     	jsr pspr3		; do the routine.
002DD4  3               rtorg:
002DD4  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
002DD6  3  85 68        	sta z80_x
002DD8  3  A5 rr        	lda ogptr+1
002DDA  3  85 69        	sta z80_i
002DDC  3               rtorg0:
002DDC  3  60           	rts
002DDD  3               
002DDD  3               pspr3:
002DDD  3  A9 12        	lda #<evtyp0		; sprite type events list.
002DDF  3  85 66        	sta z80_l
002DE1  3  A9 2E        	lda #>evtyp0
002DE3  3  85 67        	sta z80_h
002DE5  3               pspr4:
002DE5  3  B1 68        	lda (z80_ix),y
002DE7  3  0A           	asl a			; double accumulator.
002DE8  3  18           	clc
002DE9  3  65 66        	adc z80_l
002DEB  3  85 66        	sta z80_l
002DED  3  90 02        	bcc :+
002DEF  3  E6 67        	inc z80_h
002DF1  3               :
002DF1  3  B1 66        	lda (z80_hl),y
002DF3  3  85 64        	sta z80_e 		; copy to de.
002DF5  3  48           	pha
002DF6  3               
002DF6  3  E6 66        	inc z80_l 		; next byte of address.
002DF8  3  D0 02        	bne :+
002DFA  3  E6 67        	inc z80_h
002DFC  3               :
002DFC  3  B1 66        	lda (z80_hl),y 		; address high.
002DFE  3  85 65        	sta z80_d
002E00  3               
002E00  3  48           	pha	 		; swap address into hl.
002E01  3  A5 67        	lda z80_h
002E03  3  85 65        	sta z80_d
002E05  3  68           	pla
002E06  3  85 67        	sta z80_h
002E08  3  68           	pla
002E09  3  85 66        	sta z80_l
002E0B  3  A5 66        	lda z80_l
002E0D  3  85 64        	sta z80_e
002E0F  3               
002E0F  3  6C 66 00     	jmp (z80_hl) 		; go there.
002E12  3               
002E12  3               ;ogptr:	.word 0			; original sprite pointer.
002E12  3               
002E12  3               ; Address of each sprite type's routine.
002E12  3               
002E12  3  CD 35        evtyp0:	.word evnt00
002E14  3  E8 39        evtyp1:	.word evnt01
002E16  3  F9 3A        evtyp2:	.word evnt02
002E18  3  44 3C        evtyp3:	.word evnt03
002E1A  3  89 3D        evtyp4:	.word evnt04
002E1C  3  8A 3D        evtyp5:	.word evnt05
002E1E  3  CF 3D        evtyp6:	.word evnt06
002E20  3  E9 3E        evtyp7:	.word evnt07
002E22  3  BE 3F        evtyp8:	.word evnt08
002E24  3               
002E24  3               ;--------------------------------------------------------------
002E24  3               ; Display sprites.
002E24  3               ;
002E24  3               ; Input:
002E24  3               ;  IX = sprite table
002E24  3               ;--------------------------------------------------------------
002E24  3               
002E24  3               dspr:
002E24  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
002E26  3  85 rr        	sta sprcnt
002E28  3               dspr0:
002E28  3  A0 00        	ldy #0
002E2A  3  B1 68        	lda (z80_ix),y 		; get sprite type.
002E2C  3  C9 FF        	cmp #255 		; is it enabled?
002E2E  3  D0 42        	bne dspr1 		; yes, it needs deleting.
002E30  3               dspr5:
002E30  3  A0 05        	ldy #5
002E32  3  B1 68        	lda (z80_ix),y 		; new type.
002E34  3  C9 FF        	cmp #255		; is it enabled?
002E36  3  D0 77        	bne dspr3 		; yes, it needs drawing.
002E38  3               dspr2:
002E38  3  A0 05        	ldy #5
002E3A  3  B1 68        	lda (z80_ix),y 		; copy new type.
002E3C  3  A0 00        	ldy #0
002E3E  3  91 68        	sta (z80_ix),y
002E40  3  A0 06        	ldy #6
002E42  3  B1 68        	lda (z80_ix),y 		; copy new image number.
002E44  3  A0 01        	ldy #1
002E46  3  91 68        	sta (z80_ix),y
002E48  3  A0 07        	ldy #7
002E4A  3  B1 68        	lda (z80_ix),y 		; copy new frame.
002E4C  3  A0 02        	ldy #2
002E4E  3  91 68        	sta (z80_ix),y
002E50  3  A0 08        	ldy #8
002E52  3  B1 68        	lda (z80_ix),y 		; copy new y.
002E54  3  A0 03        	ldy #3
002E56  3  91 68        	sta (z80_ix),y
002E58  3  A0 09        	ldy #9
002E5A  3  B1 68        	lda (z80_ix),y 		; copy new x.
002E5C  3  A0 04        	ldy #4
002E5E  3  91 68        	sta (z80_ix),y
002E60  3               
002E60  3  18           	clc
002E61  3  A5 68        	lda z80_x
002E63  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
002E65  3  85 68        	sta z80_x
002E67  3  A5 69        	lda z80_i
002E69  3  69 00        	adc #0
002E6B  3  85 69        	sta z80_i 		; next sprite.
002E6D  3  C6 rr        	dec sprcnt
002E6F  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
002E71  3  60           	rts
002E72  3               dspr1:
002E72  3  A0 05        	ldy #5
002E74  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
002E76  3  C9 FF        	cmp #255		; is this enabled?
002E78  3  D0 06        	bne dspr4 		; yes, display both.
002E7A  3               dspr6:
002E7A  3  20 4A 2F     	jsr sspria 		; show single sprite.
002E7D  3  4C 38 2E     	jmp dspr2
002E80  3               
002E80  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
002E80  3               
002E80  3               dspr4:
002E80  3  A0 04        	ldy #4
002E82  3  B1 68        	lda (z80_ix),y		; old x.
002E84  3  A0 09        	ldy #9
002E86  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
002E88  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
002E8A  3               
002E8A  3  A0 03        	ldy #3
002E8C  3  B1 68        	lda (z80_ix),y		; old y.
002E8E  3  A0 08        	ldy #8
002E90  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002E92  3  D0 15        	bne dspr7		; they differ, need to redraw.
002E94  3               
002E94  3  A0 02        	ldy #2
002E96  3  B1 68        	lda (z80_ix),y 		; old frame.
002E98  3  A0 07        	ldy #7
002E9A  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002E9C  3  4C A9 2E     	jmp dspr7 		; they differ, need to redraw.
002E9F  3               
002E9F  3  A0 01        	ldy #1
002EA1  3  B1 68        	lda (z80_ix),y 		; old image.
002EA3  3  A0 06        	ldy #6
002EA5  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002EA7  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
002EA9  3               dspr7:
002EA9  3  20 77 2F     	jsr sspric 		; delete old sprite, draw new one simultaneously.
002EAC  3  4C 38 2E     	jmp dspr2
002EAF  3               dspr3:
002EAF  3  20 71 2F     	jsr ssprib 		; show single sprite.
002EB2  3  4C 38 2E     	jmp dspr2
002EB5  3               
002EB5  3               ;sprcnt:	.byte 0
002EB5  3               
002EB5  3               ;-----------------------------------------
002EB5  3               ; Get sprite address calculations.
002EB5  3               ; gspran = new sprite, gsprad = old sprite.
002EB5  3               ;
002EB5  3               ; Input:
002EB5  3               ;  IX = sprite address
002EB5  3               ;-----------------------------------------
002EB5  3               
002EB5  3               gspran:
002EB5  3  A0 08        	ldy #8
002EB7  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
002EB9  3  85 rr        	sta dispy
002EBB  3  A0 09        	ldy #9
002EBD  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
002EBF  3  85 rr        	sta dispx
002EC1  3  A0 06        	ldy #6
002EC3  3  B1 68        	lda (z80_ix),y 		; new sprite image.
002EC5  3  20 A3 32     	jsr gfrm		; fetch start frame for this sprite.
002EC8  3               
002EC8  3  A0 00        	ldy #0
002ECA  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002ECC  3  A0 07        	ldy #7
002ECE  3  18           	clc
002ECF  3  71 68        	adc (z80_ix),y 		; new add frame number.
002ED1  3  4C F0 2E     	jmp gspra0
002ED4  3               
002ED4  3               ;-----------------------------------------
002ED4  3               ; Calculate old sprite address
002ED4  3               ;
002ED4  3               ; Input:
002ED4  3               ;  IX = sprite address
002ED4  3               ;
002ED4  3               ; Output:
002ED4  3               ;  B  = right byte mask
002ED4  3               ;  C  = left byte mask
002ED4  3               ;  DE = spriteframe address
002ED4  3               ;  scraddr = screenaddress(dispx,dispy)
002ED4  3               ;-----------------------------------------
002ED4  3               
002ED4  3               gsprad:
002ED4  3  A0 03        	ldy #3
002ED6  3  B1 68        	lda (z80_ix),y		; y coordinate.
002ED8  3  85 rr        	sta dispy
002EDA  3  A0 04        	ldy #4
002EDC  3  B1 68        	lda (z80_ix),y		; x coordinate.
002EDE  3  85 rr        	sta dispx
002EE0  3  A0 01        	ldy #1
002EE2  3  B1 68        	lda (z80_ix),y 		; sprite image.
002EE4  3  20 A3 32     	jsr gfrm 		; fetch start frame for this sprite.
002EE7  3               
002EE7  3  A0 00        	ldy #0
002EE9  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002EEB  3  A0 02        	ldy #2
002EED  3  18           	clc
002EEE  3  71 68        	adc (z80_ix),y 		; add frame number.
002EF0  3               gspra0:
002EF0  3  4A           	lsr a	  		; multiply by 128.
002EF1  3  85 65        	sta z80_d 		; store in d.
002EF3  3  8D 48 2F     	sta tmp1
002EF6  3  A9 00        	lda #0
002EF8  3  6A           	ror a
002EF9  3  85 64        	sta z80_e 		; got low byte.
002EFB  3  8D 49 2F     	sta tmp2
002EFE  3               .if bflag
002EFE  3               	lsr tmp1
002EFE  3               	ror tmp2
002EFE  3               	clc
002EFE  3               	lda tmp2
002EFE  3               	adc z80_e
002EFE  3               	sta z80_e
002EFE  3               	lda tmp1
002EFE  3               	adc z80_d
002EFE  3               	sta z80_d
002EFE  3               .endif
002EFE  3  18           	clc 			; address of play sprites.
002EFF  3  A5 64        	lda z80_e
002F01  3  69 47        	adc #<sprgfx
002F03  3  85 64        	sta z80_e
002F05  3  A5 65        	lda z80_d
002F07  3  69 4C        	adc #>sprgfx
002F09  3  85 65        	sta z80_d
002F0B  3               
002F0B  3  A5 rr        	lda dispx 		; y coordinate.
002F0D  3  29 06        	and #6 			; position within byte boundary.
002F0F  3  AA           	tax	 		; low byte of table displacement.
002F10  3               
002F10  3  0A           	asl a	  		; multiply by 32.
002F11  3  0A           	asl a  			; already a multiple
002F12  3  0A           	asl a  			; of 2, so just 4
002F13  3               .if bflag
002F13  3               	sta tmp1
002F13  3               	asl a  			; shifts needed.
002F13  3               	clc
002F13  3               	adc tmp1
002F13  3               .else
002F13  3  0A           	asl a  			; shifts needed.
002F14  3               .endif
002F14  3  18           	clc 			; add to sprite address.
002F15  3  65 64        	adc z80_e
002F17  3  85 64        	sta z80_e
002F19  3  90 02        	bcc :+
002F1B  3  E6 65        	inc z80_d
002F1D  3               :
002F1D  3  BD 40 2F     	lda spmask,x		 ; pointer to mask table.
002F20  3  85 62        	sta z80_c 		; left mask.
002F22  3  BD 41 2F     	lda spmask+1,x
002F25  3  85 63        	sta z80_b 		; right mask.
002F27  3               
002F27  3               ;------------------------------------------------------------------
002F27  3               ; Drop into screen address routine.
002F27  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
002F27  3               ;------------------------------------------------------------------
002F27  3               
002F27  3               scadd:
002F27  3  A6 rr        	ldx dispy
002F29  3  E0 C0        	cpx #192
002F2B  3  90 02        	bcc :+
002F2D  3  A2 C0        	ldx #192
002F2F  3               :
002F2F  3  A5 rr        	lda dispx
002F31  3  4A           	lsr a
002F32  3  4A           	lsr a
002F33  3  4A           	lsr a
002F34  3  18           	clc
002F35  3  7D 00 E0     	adc SCADTB_lb,x
002F38  3  85 rr        	sta scraddr
002F3A  3  BD 00 E1     	lda SCADTB_hb,x
002F3D  3  85 rr        	sta scraddr+1
002F3F  3  60           	rts
002F40  3               
002F40  3  FF 00        spmask:	.byte $ff,$00
002F42  3  3F C0        	.byte $3f,$c0
002F44  3  0F F0        	.byte $0f,$f0
002F46  3  03 FC        	.byte $03,$fc
002F48  3               
002F48  3  00           tmp1:	.byte 0
002F49  3  00           tmp2:	.byte 0
002F4A  3               
002F4A  3               ;-----------------------------------------------------------------
002F4A  3               ; These are the sprite routines.
002F4A  3               ; sspria = single sprite, old (ix).
002F4A  3               ; ssprib = single sprite, new (ix+5).
002F4A  3               ; sspric = both sprites, old (ix) and new (ix+5).
002F4A  3               ;-----------------------------------------------------------------
002F4A  3               
002F4A  3               sspria:
002F4A  3  20 D4 2E     	jsr gsprad		; get old sprite address.
002F4D  3               sspri2:
002F4D  3  A5 64        	lda z80_e
002F4F  3  8D BF 2F     	sta dline1+1		; Set spritedata address
002F52  3  8D CE 2F     	sta dline2+1
002F55  3  A5 65        	lda z80_d
002F57  3  8D C0 2F     	sta dline1+2
002F5A  3  8D CF 2F     	sta dline2+2
002F5D  3  86 rr        	stx xtmp
002F5F  3  A2 00        	ldx #0			; vertical lines.
002F61  3               sspri0:
002F61  3  20 BB 2F     	jsr dline		; draw a line.
002F64  3  E0 10        	cpx #16			; detect block boundery
002F66  3  D0 02        	bne :+			; skip if not
002F68  3  E6 rr        	inc scraddr+1		; jump to next blockline
002F6A  3               :
002F6A  3  E0 20        	cpx #32			; check finished
002F6C  3               .if bflag
002F6C  3               	bne :+			; skip if not
002F6C  3               	inc scraddr+1		; jump to next blockline
002F6C  3               	inc z80_hlp+1		; jump to next blockline
002F6C  3               :
002F6C  3               	cpx #48			; check finished
002F6C  3               .endif
002F6C  3  D0 F3        	bne sspri0		; no, repeat
002F6E  3  A6 rr        	ldx xtmp
002F70  3  60           	rts
002F71  3               
002F71  3               ;-----------------------------------------------------------------
002F71  3               
002F71  3               ssprib:
002F71  3  20 B5 2E     	jsr gspran 		; get new sprite address.
002F74  3  4C 4D 2F     	jmp sspri2
002F77  3               
002F77  3               ;-----------------------------------------------------------------
002F77  3               
002F77  3               sspric:
002F77  3  20 D4 2E     	jsr gsprad 		; get old sprite address.
002F7A  3  A5 64        	lda z80_e
002F7C  3  8D E3 2F     	sta ddline1+1		; Set spritedata address
002F7F  3  8D F2 2F     	sta ddline2+1
002F82  3  A5 65        	lda z80_d
002F84  3  8D E4 2F     	sta ddline1+2
002F87  3  8D F3 2F     	sta ddline2+2
002F8A  3  20 CA 9F     	jsr exx  		; store addresses.
002F8D  3               
002F8D  3  20 B5 2E     	jsr gspran 		; get new sprite addresses.
002F90  3  A5 64        	lda z80_e
002F92  3  8D BF 2F     	sta dline1+1		; Set spritedata address
002F95  3  8D CE 2F     	sta dline2+1
002F98  3  A5 65        	lda z80_d
002F9A  3  8D C0 2F     	sta dline1+2
002F9D  3  8D CF 2F     	sta dline2+2
002FA0  3               
002FA0  3  86 rr        	stx xtmp
002FA2  3  A2 00        	ldx #0			; vertical lines.
002FA4  3               lloop:
002FA4  3  20 BB 2F     	jsr dline 		; draw a line.
002FA7  3  CA           	dex
002FA8  3  CA           	dex
002FA9  3  20 DF 2F     	jsr ddline 		; delete a line.
002FAC  3  E0 10        	cpx #16			; detect block boundery
002FAE  3  D0 04        	bne :+			; skip if not
002FB0  3  E6 rr        	inc scraddr+1		; jump to next blockline
002FB2  3  E6 73        	inc z80_hlp+1		; jump to next blockline
002FB4  3               :
002FB4  3  E0 20        	cpx #32			; check finished
002FB6  3               .if bflag
002FB6  3               	bne :+			; skip if not
002FB6  3               	inc scraddr+1		; jump to next blockline
002FB6  3               	inc z80_hlp+1		; jump to next blockline
002FB6  3               :
002FB6  3               	cpx #48			; check finished
002FB6  3               .endif
002FB6  3  D0 EC        	bne lloop		; no, repeat
002FB8  3  A6 rr        	ldx xtmp
002FBA  3  60           	rts
002FBB  3               
002FBB  3               
002FBB  3               ;-----------------------------------------------------------------
002FBB  3               
002FBB  3               dline:
002FBB  3  BC 03 30     	ldy sprline,x		; point to screenleft
002FBE  3               dline1:
002FBE  3  BD 6C 98     	lda objdta,x		; fetch spriteleft byte
002FC1  3  85 61        	sta z80_a		; save spriteright byte
002FC3  3  A5 61        	lda z80_a
002FC5  3  25 62        	and z80_c		; mask left
002FC7  3  51 rr        	eor (scraddr),y		; merge with screenleft
002FC9  3  91 rr        	sta (scraddr),y		; write screenleft
002FCB  3               sline:
002FCB  3  E8           	inx			; next spritebyte
002FCC  3  C8           	iny			; point to screenmiddle
002FCD  3               dline2:
002FCD  3  BD 6C 98     	lda objdta,x		; fetch spritemiddle byte
002FD0  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
002FD2  3  91 rr        	sta (scraddr),y		; write screenmiddle
002FD4  3               sline2:
002FD4  3  C8           	iny			; point to screenright
002FD5  3  A5 61        	lda z80_a		; fetch spriteright byte
002FD7  3  25 63        	and z80_b		; mask right
002FD9  3  51 rr        	eor (scraddr),y		; merge with screenright
002FDB  3  91 rr        	sta (scraddr),y		; write screenright
002FDD  3               sline3:
002FDD  3  E8           	inx			; next spritebyte
002FDE  3               
002FDE  3  60           	rts
002FDF  3               
002FDF  3               ;-----------------------------------------------------------------
002FDF  3               
002FDF  3               ddline:
002FDF  3  BC 03 30     	ldy sprline,x		; point to screenleft
002FE2  3               ddline1:
002FE2  3  BD 6C 98     	lda objdta,x		; fetch spriteleft byte
002FE5  3  85 61        	sta z80_a		; save spriteright byte
002FE7  3  A5 61        	lda z80_a
002FE9  3  25 6E        	and z80_cp		; mask left
002FEB  3  51 72        	eor (z80_hlp),y		; merge with screenleft
002FED  3  91 72        	sta (z80_hlp),y		; write screenleft
002FEF  3               dsline:
002FEF  3  E8           	inx			; next spritebyte
002FF0  3  C8           	iny			; point to screenmiddle
002FF1  3               ddline2:
002FF1  3  BD 6C 98     	lda objdta,x		; fetch spritemiddle byte
002FF4  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
002FF6  3  91 72        	sta (z80_hlp),y		; write screenmiddle
002FF8  3               dsline2:
002FF8  3  C8           	iny			; point to screenright
002FF9  3  A5 61        	lda z80_a		; fetch spriteright byte
002FFB  3  25 6F        	and z80_bp		; mask right
002FFD  3  51 72        	eor (z80_hlp),y		; merge with screenright
002FFF  3  91 72        	sta (z80_hlp),y		; write screenright
003001  3               dsline3:
003001  3  E8           	inx			; next spritebyte
003002  3               
003002  3  60           	rts
003003  3               
003003  3               sprline:
003003  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
003007  3  40 41 60 61  
00300B  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00300F  3  C0 C1 E0 E1  
003013  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
003017  3  40 41 60 61  
00301B  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00301F  3  C0 C1 E0 E1  
003023  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
003027  3  40 41 60 61  
00302B  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00302F  3  C0 C1 E0 E1  
003033  3               .if bflag
003033  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
003033  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
003033  3               .endif
003033  3               
003033  3               ;----------------------------------------------------------------------
003033  3               ; Line drawn, now work out next target address.
003033  3               ;----------------------------------------------------------------------
003033  3               
003033  3               nline:
003033  3  18           	clc
003034  3  A5 rr        	lda scraddr 		; get low byte of address.
003036  3  69 20        	adc #$20
003038  3  85 rr        	sta scraddr 		; new low byte of address.
00303A  3  90 02        	bcc :+
00303C  3  E6 rr        	inc scraddr+1 		; new high byte of address.
00303E  3               :
00303E  3  60           	rts
00303F  3               
00303F  3               ;-------------------------------------------------------------
00303F  3               ; Line drawn, now work out next target address.
00303F  3               ;
00303F  3               ; Input:
00303F  3               ;  BP  = right mask
00303F  3               ;  CP  = left mask
00303F  3               ;  DEP = spriteaddress
00303F  3               ;  z80_hlp = screen address
00303F  3               ;-------------------------------------------------------------
00303F  3               
00303F  3               
00303F  3               ;-----------------------------------------------------------
00303F  3               ; Animates a sprite.
00303F  3               ;
00303F  3               ; Input:
00303F  3               ;  IX = sprite address
00303F  3               ;  HL = last sprite address
00303F  3               ;-----------------------------------------------------------
00303F  3               
00303F  3               animsp:
00303F  3  25 rr        	and frmno
003041  3  F0 01        	beq :+
003043  3  60           	rts
003044  3               :
003044  3  A0 06        	ldy #6
003046  3  B1 68        	lda (z80_ix),y		; sprite image
003048  3  20 A3 32     	jsr gfrm		; get frame data.
00304B  3               
00304B  3  E6 66        	inc z80_l		; point to frames.
00304D  3  D0 02        	bne :+
00304F  3  E6 67        	inc z80_h
003051  3               :
003051  3  A0 07        	ldy #7
003053  3  B1 68        	lda (z80_ix),y		; sprite frame.
003055  3  18           	clc
003056  3  69 01        	adc #1			; next one along.
003058  3  A0 00        	ldy #0
00305A  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
00305C  3  90 02        	bcc anims0		; no, not yet.
00305E  3  A9 00        	lda #0			; start at first frame.
003060  3               anims0:
003060  3  A0 07        	ldy #7
003062  3  91 68        	sta (z80_ix),y		; new frame.
003064  3  60           	rts
003065  3               
003065  3               ;--------------------------------------------------------------
003065  3               ; Animate back
003065  3               ;
003065  3               ; Input:
003065  3               ;  IX = sprite address
003065  3               ;  HL = last sprite address
003065  3               ;--------------------------------------------------------------
003065  3               
003065  3               animbk:
003065  3  25 rr        	and frmno
003067  3  F0 01        	beq :+
003069  3  60           	rts
00306A  3               :
00306A  3  A0 06        	ldy #6
00306C  3  B1 68        	lda (z80_ix),y		; sprite image.
00306E  3  20 A3 32     	jsr gfrm		; get frame data.
003071  3               
003071  3  E6 66        	inc z80_l 		; point to frames.
003073  3  D0 02        	bne :+
003075  3  E6 67        	inc z80_h
003077  3               :
003077  3  A0 07        	ldy #7
003079  3  B1 68        	lda (z80_ix),y 		; sprite frame.
00307B  3  F0 03        	beq :+
00307D  3  4C 84 30     	jmp rtanb0 		; yes, start at end.
003080  3               :
003080  3  A0 00        	ldy #0
003082  3  B1 66        	lda (z80_hl),y 		; last sprite.
003084  3               rtanb0:
003084  3  38           	sec
003085  3  E9 01        	sbc #1			; next one along.
003087  3  4C 60 30     	jmp anims0		; set new frame.
00308A  3               
00308A  3               ;--------------------------------------------------------------
00308A  3               ; Check for collision with other sprite, strict enforcement.
00308A  3               ;
00308A  3               ; Input:
00308A  3               ;  b		= sprite to test for
00308A  3               ;  ix		= current sprite pointer
00308A  3               ;
00308A  3               ; global:	b
00308A  3               ; local:	x,y,hl,de,skptr
00308A  3               ; calls:	-
00308A  3               ;--------------------------------------------------------------
00308A  3               
00308A  3               sktyp:
00308A  3  A9 81        	lda #<sprtab				; sprite table.
00308C  3  85 66        	sta z80_l
00308E  3  A9 34        	lda #>sprtab
003090  3  85 67        	sta z80_h
003092  3               numsp2:
003092  3  A9 0C        	lda #NUMSPR				; number of sprites.
003094  3  85 rr        	sta sktptr
003096  3               sktyp0:
003096  3  A5 66        	lda z80_l 				; store pointer to sprite.
003098  3  85 rr        	sta skptr
00309A  3  A5 67        	lda z80_h
00309C  3  85 rr        	sta skptr+1
00309E  3               
00309E  3  A0 00        	ldy #0
0030A0  3  B1 66        	lda (z80_hl),y 				; get sprite type.
0030A2  3  C5 63        	cmp z80_b				; is it the type we seek?
0030A4  3  F0 1D        	beq coltyp				; yes, we can use this one.
0030A6  3               sktyp1:
0030A6  3  18           	clc
0030A7  3  A5 rr        	lda skptr				; retrieve sprite pointer.
0030A9  3  69 11        	adc #TABSIZ				; size of each entry.
0030AB  3  85 66        	sta z80_l
0030AD  3  A5 rr        	lda skptr+1
0030AF  3  69 00        	adc #0
0030B1  3  85 67        	sta z80_h
0030B3  3  C6 rr        	dec sktptr					; one less iteration.
0030B5  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
0030B7  3  A9 00        	lda #0					; default to ROM address - no sprite.
0030B9  3  85 66        	sta z80_l
0030BB  3  85 67        	sta z80_h
0030BD  3  85 rr        	sta skptr				; store pointer to sprite.
0030BF  3  85 rr        	sta skptr+1
0030C1  3               
0030C1  3  18           	clc					; don't return with zero flag set.
0030C2  3  60           	rts 					; didn't find one.
0030C3  3               
0030C3  3               ;skptr:	.word 0					; search pointer.
0030C3  3               ;sktptr:	.byte 0
0030C3  3               
0030C3  3               coltyp:
0030C3  3  A0 00        	ldy #0
0030C5  3  B1 68        	lda (z80_ix),y				; current sprite type.
0030C7  3  C5 63        	cmp z80_b				; seeking sprite of same type?
0030C9  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0030CB  3               colty0:
0030CB  3  A0 09        	ldy #9					; distance to x position in table.
0030CD  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
0030CF  3  85 64        	sta z80_e
0030D1  3  88           	dey
0030D2  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
0030D4  3  85 65        	sta z80_d
0030D6  3               
0030D6  3               ; Drop into collision detection.
0030D6  3               
0030D6  3               colc16:
0030D6  3  A0 09        	ldy #9
0030D8  3  B1 68        	lda (z80_ix),y			 	; x coord.
0030DA  3  38           	sec					; subtract x.
0030DB  3  E5 64        	sbc z80_e
0030DD  3  B0 05        	bcs  colc1a 				; result is positive.
0030DF  3  49 FF        	eor #$ff				; make negative positive.
0030E1  3  18           	clc
0030E2  3  69 01        	adc #1
0030E4  3               colc1a:
0030E4  3  C9 10        	cmp #16 				; within x range?
0030E6  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0030E8  3  85 62        	sta z80_c				; store difference.
0030EA  3               
0030EA  3  A0 08        	ldy #8
0030EC  3  B1 68        	lda (z80_ix),y				; y coord.
0030EE  3  38           	sec
0030EF  3  E5 65        	sbc z80_d				; subtract y.
0030F1  3  B0 05        	bcs colc1b				; result is positive.
0030F3  3  49 FF        	eor #$ff				; make negative positive.
0030F5  3  18           	clc
0030F6  3  69 01        	adc #1
0030F8  3               colc1b:
0030F8  3  C9 10        	cmp #16					; within y range?
0030FA  3  B0 AA        	bcs sktyp1 				; no - they've missed.
0030FC  3  18           	clc					; add x difference.
0030FD  3  65 62        	adc z80_c
0030FF  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
003101  3  B0 02        	bcs :+
003103  3  38           	sec
003104  3  60           	rts 					; carry set if there's a collision.
003105  3               :
003105  3  4C A6 30     	jmp sktyp1				; try next sprite in table.
003108  3               colty1:
003108  3  A5 68        	lda z80_x  				; compare the two.
00310A  3  C5 66        	cmp z80_l
00310C  3  D0 09        	bne end_col
00310E  3  A5 69        	lda z80_i
003110  3  C5 67        	cmp z80_h
003112  3  D0 03        	bne end_col
003114  3  4C A6 30     	jmp sktyp1 				; addresses are identical.
003117  3               end_col:
003117  3  4C CB 30     	jmp colty0
00311A  3               
00311A  3               ;-----------------------------------------------------------
00311A  3               ; Display number, left aligned
00311A  3               ;
00311A  3               ; Input:
00311A  3               ;  a		= number
00311A  3               ;
00311A  3               ; global:	-
00311A  3               ; local:	a,y,bc,hl,displ0
00311A  3               ; calls:	num2ch,dmsg3
00311A  3               ;-----------------------------------------------------------
00311A  3               
00311A  3               disply:
00311A  3  85 61        	sta z80_a
00311C  3  A9 42        	lda #<displ0				; display workspace.
00311E  3  85 62        	sta z80_c
003120  3  A9 31        	lda #>displ0
003122  3  85 63        	sta z80_b
003124  3  A5 61        	lda z80_a
003126  3  20 66 22     	jsr num2ch				; convert accumulator to string.
003129  3               displ1:
003129  3  C6 62        	dec z80_c				; back one character.
00312B  3  D0 02        	bne :+
00312D  3  C6 63        	dec z80_b
00312F  3               :
00312F  3  A0 00        	ldy #0
003131  3  B1 62        	lda (z80_bc),y				; fetch digit.
003133  3  09 80        	ora #128				; insert end marker.
003135  3  91 62        	sta (z80_bc),y				; new value.
003137  3               
003137  3  A9 42        	lda #<displ0				; display space.
003139  3  85 66        	sta z80_l
00313B  3  A9 31        	lda #>displ0
00313D  3  85 67        	sta z80_h
00313F  3  4C F0 2B     	jmp dmsg3				; display the string.
003142  3               
003142  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
003146  3               
003146  3               ;----------------------------------------------------------------
003146  3               ; Initialise screen.
003146  3               ;
003146  3               ; global:	roomtb,scno
003146  3               ; local:	-
003146  3               ; calls:	tstcs
003146  3               ;----------------------------------------------------------------
003146  3               
003146  3               initsc:
003146  3  AD 5E 35     	lda roomtb 			; whereabouts in the map are we?
003149  3  20 53 31     	jsr tstsc 			; find displacement.
00314C  3  C9 FF        	cmp #255 			; is it valid?
00314E  3  F0 02        	beq init_end 			; no, it's rubbish.
003150  3  85 rr        	sta scno			; store new room number.
003152  3               init_end:
003152  3  60           	rts
003153  3               
003153  3               ;----------------------------------------------------------------
003153  3               ; Test screen.
003153  3               ;
003153  3               ; global:	-
003153  3               ; local:	x
003153  3               ; calls:	-
003153  3               ;----------------------------------------------------------------
003153  3               
003153  3               tstsc:
003153  3  85 rr        	sta tmproom
003155  3  18           	clc
003156  3  69 0B        	adc #MAPWID 			; add width in case we"re negative.
003158  3  AA           	tax 				; add displacement to map data.
003159  3  BD 8A 35     	lda mapdat-MAPWID,x 		; find room number there.
00315C  3  60           	rts
00315D  3               
00315D  3               ;tmproom:	.byte 0
00315D  3               
00315D  3               ;--------------------------
00315D  3               ; Screen left.
00315D  3               ;--------------------------
00315D  3               
00315D  3               scrl:
00315D  3  AD 5E 35     	lda roomtb 			; present room table pointer.
003160  3  38           	sec
003161  3  E9 01        	sbc #1				; room left.
003163  3               scrl0:
003163  3  20 53 31     	jsr tstsc			; test screen.
003166  3  C9 FF        	cmp #255			; is there a screen this way?
003168  3  D0 01        	bne :+
00316A  3  60           	rts				; no, return to loop.
00316B  3               :
00316B  3  A5 rr        	lda tmproom			; restore room displacement.
00316D  3  8D 5E 35     	sta roomtb			; new room table position.
003170  3               scrl1:
003170  3  20 46 31     	jsr initsc 			; set new screen.
003173  3  A9 02        	lda #2
003175  3  85 rr        	sta restfl 			; set it.
003177  3  60           	rts
003178  3               scrr:
003178  3  AD 5E 35     	lda roomtb 			; room table pointer.
00317B  3  18           	clc
00317C  3  69 01        	adc #1				; room right.
00317E  3  4C 63 31     	jmp scrl0
003181  3               scru:
003181  3  AD 5E 35     	lda roomtb 			; room table pointer.
003184  3  38           	sec
003185  3  E9 0B        	sbc #MAPWID 			; room up.
003187  3  4C 63 31     	jmp scrl0
00318A  3               scrd:
00318A  3  AD 5E 35     	lda roomtb 			; room table pointer.
00318D  3  18           	clc
00318E  3  69 0B        	adc #MAPWID 			; room down.
003190  3  4C 63 31     	jmp scrl0
003193  3               
003193  3               ;-----------------------------------------
003193  3               ; Jump to new screen.
003193  3               ;-----------------------------------------
003193  3               
003193  3               nwscr:
003193  3  A2 00        	ldx #0				; start of map data.
003195  3               nwscr0:
003195  3  DD 95 35     	cmp mapdat,x
003198  3  F0 06        	beq nwscr1			; have we found a match for screen?
00319A  3  E8           	inx 				; next room.
00319B  3  E0 50        	cpx #80				; zero room count, 80 to search.
00319D  3  D0 F6        	bne nwscr0			; keep looking.
00319F  3  60           	rts
0031A0  3               nwscr1:
0031A0  3  8E 5E 35     	stx roomtb			; set the map position.
0031A3  3  4C 70 31     	jmp scrl1			; draw new room.
0031A6  3               
0031A6  3               
0031A6  3               ;----------------------------------------------------------
0031A6  3               ; Gravity processing.
0031A6  3               ;----------------------------------------------------------
0031A6  3               
0031A6  3               grav:
0031A6  3  A0 0D        	ldy #13
0031A8  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0031AA  3  85 66        	sta z80_l
0031AC  3  A0 0E        	ldy #14
0031AE  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0031B0  3  85 67        	sta z80_h
0031B2  3  05 66        	ora z80_l			; merge in low byte.
0031B4  3  D0 01        	bne :+
0031B6  3  60           	rts				; if neither is set, we're not in the air.
0031B7  3               :
0031B7  3  A0 00        	ldy #0
0031B9  3  B1 66        	lda (z80_hl),y			; pixels to move.
0031BB  3  85 61        	sta z80_a
0031BD  3  C9 63        	cmp #99				; reached the end?
0031BF  3  D0 0C        	bne grav0			; no, continue.
0031C1  3               grav2:
0031C1  3  C6 66        	dec z80_l			; go back to previous value.
0031C3  3  C9 FF        	cmp #$ff
0031C5  3  D0 02        	bne :+
0031C7  3  C6 67        	dec z80_h
0031C9  3               :
0031C9  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0031CB  3  85 61        	sta z80_a
0031CD  3               grav0:
0031CD  3  E6 66        	inc z80_l			; point to next table entry.
0031CF  3  D0 02        	bne :+
0031D1  3  E6 67        	inc z80_h
0031D3  3               :
0031D3  3  A5 66        	lda z80_l
0031D5  3  A0 0D        	ldy #13
0031D7  3  91 68        	sta (z80_ix),y			; store new pointer low.
0031D9  3  A5 67        	lda z80_h
0031DB  3  A0 0E        	ldy #14
0031DD  3  91 68        	sta (z80_ix),y			; store new pointer high.
0031DF  3               grav1:
0031DF  3  A5 61        	lda z80_a
0031E1  3  D0 01        	bne :+				; any movement required?
0031E3  3  60           	rts				; no, not this time.
0031E4  3               :
0031E4  3  A5 61        	lda z80_a
0031E6  3  C9 80        	cmp #128			; is it up or down?
0031E8  3  B0 15        	bcs gravu			; it's up.
0031EA  3               gravd:
0031EA  3  85 63        	sta z80_b			; set pixels to move.
0031EC  3               gravd0:
0031EC  3  20 BD 28     	jsr cangd			; can we go down?
0031EF  3  D0 28        	bne gravst			; can't move down, so stop.
0031F1  3  A0 08        	ldy #8
0031F3  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
0031F5  3  18           	clc
0031F6  3  69 01        	adc #1
0031F8  3  91 68        	sta (z80_ix),y
0031FA  3  C6 63        	dec z80_b
0031FC  3  D0 EE        	bne gravd0
0031FE  3  60           	rts
0031FF  3               gravu:
0031FF  3  49 FF        	eor #$ff			; flip the sign so it's positive.
003201  3  18           	clc
003202  3  69 01        	adc #1
003204  3  85 63        	sta z80_b			; set pixels to move.
003206  3               gravu0:
003206  3  20 88 28     	jsr cangu			; can we go up?
003209  3  D0 6E        	bne ifalls			; can't move up, go down next.
00320B  3  A0 08        	ldy #8
00320D  3  B1 68        	lda (z80_ix),y
00320F  3  38           	sec
003210  3  E9 01        	sbc #1
003212  3  91 68        	sta (z80_ix),y			; adjust new x coord.
003214  3  C6 63        	dec z80_b
003216  3  D0 EE        	bne gravu0
003218  3  60           	rts
003219  3               gravst:
003219  3  A0 0D        	ldy #13
00321B  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00321D  3  85 66        	sta z80_l
00321F  3  A0 0E        	ldy #14
003221  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003223  3  85 67        	sta z80_h
003225  3               
003225  3  A9 00        	lda #0				; null value in pointer.
003227  3  A0 0D        	ldy #13
003229  3  91 68        	sta (z80_ix),y			; store new pointer low.
00322B  3  C8           	iny
00322C  3  91 68        	sta (z80_ix),y			; store new pointer high.
00322E  3               
00322E  3  A0 00        	ldy #0
003230  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
003232  3  C9 63        	cmp #99				; is it the end marker?
003234  3               evftf:
003234  3  F0 01        	beq :+				; yes, fallen too far.
003236  3  60           	rts
003237  3               :
003237  3  4C 74 43     	jmp evnt15			; EVENT FELLTOOFAR
00323A  3               
00323A  3               ;------------------------------------------------
00323A  3               ; Initiate fall check.
00323A  3               ;------------------------------------------------
00323A  3               
00323A  3               ifall:
00323A  3  A0 0D        	ldy #13
00323C  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
00323E  3  85 66        	sta z80_l
003240  3  A0 0E        	ldy #14
003242  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
003244  3  85 67        	sta z80_h			; high byte in accumulator.
003246  3  05 66        	ora z80_l			; merge in low byte.
003248  3  F0 01        	beq :+
00324A  3  60           	rts				; if either is set, we're already in the air.
00324B  3               :
00324B  3  A0 09        	ldy #9
00324D  3  B1 68        	lda (z80_ix),y			; y coordinate.
00324F  3  85 rr        	sta dispx
003251  3  A0 08        	ldy #8
003253  3  B1 68        	lda (z80_ix),y			; look x coordinate.
003255  3  18           	clc
003256  3               numsp7:
003256  3  69 10        	adc #SPR_HGT			; add 16 pixels.
003258  3  85 rr        	sta dispy			; set up test coordinates.
00325A  3  20 44 2B     	jsr tstbl			; get map address.
00325D  3  20 5F 2A     	jsr plchk			; block, platform check.
003260  3  F0 01        	beq :+
003262  3  60           	rts				; it's solid, don't fall.
003263  3               :
003263  3  E6 rr        	inc bufaddr			; look right one cell.
003265  3  20 5F 2A     	jsr plchk			; block, platform check.
003268  3  F0 01        	beq :+
00326A  3  60           	rts				; it's solid, don't fall.
00326B  3               :
00326B  3  A5 rr        	lda dispx			; y coordinate.
00326D  3  29 07        	and #7				; position straddling block cells.
00326F  3  F0 08        	beq ifalls			; no more checks needed.
003271  3  E6 rr        	inc bufaddr			; look to third cell.
003273  3  20 5F 2A     	jsr plchk			; block, platform check.
003276  3  F0 01        	beq :+
003278  3  60           	rts				; it's solid, don't fall.
003279  3               :
003279  3               ifalls:
003279  3  A9 80        	lda #<jtab			; jump table start.
00327B  3  85 66        	sta z80_l
00327D  3  A9 9D        	lda #>jtab
00327F  3  85 67        	sta z80_h
003281  3               ifal0:
003281  3  E6 66        	inc z80_l			; point to next value.
003283  3  D0 02        	bne :+
003285  3  E6 67        	inc z80_h
003287  3               :
003287  3  A0 00        	ldy #0
003289  3  B1 66        	lda (z80_hl),y			; fetch value.
00328B  3  F0 F4        	beq ifal0			; no, get next value.
00328D  3  C9 63        	cmp #99				; reached end of table?
00328F  3  D0 01        	bne :+
003291  3  60           	rts				; yes, don't fall.
003292  3               :
003292  3  C9 80        	cmp #128			; is it going up?
003294  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
003296  3               
003296  3  A0 0D        	ldy #13
003298  3  A5 66        	lda z80_l
00329A  3  91 68        	sta (z80_ix),y 			; set jump low.
00329C  3  A0 0E        	ldy #14
00329E  3  A5 67        	lda z80_h
0032A0  3  91 68        	sta (z80_ix),y 			; set jump high.
0032A2  3  60           	rts
0032A3  3               
0032A3  3               
0032A3  3               ;----------------------------------------------------
0032A3  3               ; Get frame data for a particular sprite.
0032A3  3               ; Input:
0032A3  3               ;  a		= framenumer
0032A3  3               ; Output:
0032A3  3               ;  hl		= frame address
0032A3  3               ;
0032A3  3               ; global:	hl,frmptr
0032A3  3               ; local:	-
0032A3  3               ; calls:	-
0032A3  3               ;----------------------------------------------------
0032A3  3               
0032A3  3               gfrm:
0032A3  3  0A           	asl a	 		 	; multiple of 2.
0032A4  3  18           	clc
0032A5  3  6D 1A 20     	adc frmptr 			; frames used by game.
0032A8  3  85 66        	sta z80_l
0032AA  3  AD 1B 20     	lda frmptr+1
0032AD  3  69 00        	adc #0
0032AF  3  85 67        	sta z80_h 			; point to frame start.
0032B1  3  60           	rts
0032B2  3               
0032B2  3               ;----------------------------------------------------
0032B2  3               ; Find sprite list for current room.
0032B2  3               ;
0032B2  3               ; global:	hl
0032B2  3               ; local:	x,y
0032B2  3               ; calls:	-
0032B2  3               ;----------------------------------------------------
0032B2  3               
0032B2  3               sprlst:
0032B2  3  A9 BD        	lda #<nmedat 			; list of enemy sprites.
0032B4  3  85 66        	sta z80_l
0032B6  3  A9 96        	lda #>nmedat
0032B8  3  85 67        	sta z80_h
0032BA  3  A6 rr        	ldx scno 			; screen number.
0032BC  3  D0 01        	bne sprls2 			; is it the first screen?
0032BE  3  60           	rts 				; yes, don't need to search data.
0032BF  3               sprls2:
0032BF  3  A0 00        	ldy #0
0032C1  3               sprls1:
0032C1  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0032C3  3  C9 FF        	cmp #255			; is it an end marker?
0032C5  3  F0 0E        	beq sprls0 			; yes, end of this room.
0032C7  3               
0032C7  3  18           	clc 				; point to next sprite in list.
0032C8  3  A5 66        	lda z80_l
0032CA  3  69 04        	adc #NMESIZ
0032CC  3  85 66        	sta z80_l
0032CE  3  90 02        	bcc :+
0032D0  3  E6 67        	inc z80_h
0032D2  3               :
0032D2  3  4C C1 32     	jmp sprls1 			; continue until end of room.
0032D5  3               sprls0:
0032D5  3  E6 66        	inc z80_l 			; point to start of next screen.s
0032D7  3  D0 02        	bne :+
0032D9  3  E6 67        	inc z80_h
0032DB  3               :
0032DB  3  CA           	dex
0032DC  3  D0 E3        	bne sprls1 			; continue until room found.
0032DE  3  60           	rts
0032DF  3               
0032DF  3               
0032DF  3               ;----------------------------------------------------
0032DF  3               ; Clear all but a single player sprite.
0032DF  3               ;
0032DF  3               ; global:	-
0032DF  3               ; local:	x,y,ix
0032DF  3               ; calls:	-
0032DF  3               ;----------------------------------------------------
0032DF  3               
0032DF  3               nspr:
0032DF  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0032E1  3  85 rr        	sta sprcnt
0032E3  3  A9 81        	lda #<sprtab 			; sprite table.
0032E5  3  85 68        	sta z80_x
0032E7  3  A9 34        	lda #>sprtab
0032E9  3  85 69        	sta z80_i
0032EB  3               nspr0:
0032EB  3  A0 00        	ldy #0 				; fetch sprite type.
0032ED  3  B1 68        	lda (z80_ix),y 			; is it a player?
0032EF  3  F0 1A        	beq nspr1 			; yes, keep this one.
0032F1  3               
0032F1  3  A9 FF        	lda #255
0032F3  3  A0 00        	ldy #0 				; fetch sprite type.
0032F5  3  91 68        	sta (z80_ix),y 			; delete sprite.
0032F7  3  A0 05        	ldy #5
0032F9  3  91 68        	sta (z80_ix),y 			; remove next type.
0032FB  3               
0032FB  3  18           	clc	 			; next sprite.
0032FC  3  A5 68        	lda z80_x
0032FE  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003300  3  85 68        	sta z80_x
003302  3  90 02        	bcc :+
003304  3  E6 69        	inc z80_i
003306  3               :
003306  3  C6 rr        	dec sprcnt	 			; one less space in the table.
003308  3  D0 E1        	bne nspr0
00330A  3  60           	rts
00330B  3               nspr1:
00330B  3  A9 FF        	lda #255
00330D  3  A0 00        	ldy #0
00330F  3  91 68        	sta (z80_ix),y 			; delete sprite.
003311  3               
003311  3  18           	clc	 			; point to next sprite.
003312  3  A5 68        	lda z80_x
003314  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003316  3  85 68        	sta z80_x
003318  3  90 02        	bcc :+
00331A  3  E6 69        	inc z80_i
00331C  3               :
00331C  3  C6 rr        	dec sprcnt	 			; one less to do.
00331E  3  D0 01        	bne nspr2
003320  3  60           	rts
003321  3               nspr2:
003321  3  A9 FF        	lda #255
003323  3  A0 00        	ldy #0
003325  3  91 68        	sta (z80_ix),y 			; delete sprite.
003327  3  A0 05        	ldy #5
003329  3  91 68        	sta (z80_ix),y 			; remove next type.
00332B  3               
00332B  3  18           	clc	 			; next sprite.
00332C  3  A5 68        	lda z80_x
00332E  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003330  3  85 68        	sta z80_x
003332  3  90 02        	bcc :+
003334  3  E6 69        	inc z80_i
003336  3               :
003336  3  C6 rr        	dec sprcnt	 			; one less space in table.
003338  3  D0 E7        	bne nspr2
00333A  3  60           	rts
00333B  3               
00333B  3               ;----------------------------------------------------------
00333B  3               ; Two initialisation routines.
00333B  3               ; Initialise sprites - copy everything from list to table.
00333B  3               ;
00333B  3               ; global:	-
00333B  3               ; local:	x,y,ix
00333B  3               ; calls:	cpsp
00333B  3               ;----------------------------------------------------------
00333B  3               
00333B  3               ispr:
00333B  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00333D  3  85 rr        	sta sprcnt
00333F  3  A9 81        	lda #<sprtab			; sprite table.
003341  3  85 68        	sta z80_x
003343  3  A9 34        	lda #>sprtab
003345  3  85 69        	sta z80_i
003347  3               ispr2:
003347  3  A0 00        	ldy #0
003349  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00334B  3  C9 FF        	cmp #255 			; is it an end marker?
00334D  3  D0 01        	bne :+
00334F  3  60           	rts 				; yes, no more to do.
003350  3               :
003350  3               ispr1:
003350  3  A0 00        	ldy #0
003352  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
003354  3  C9 FF        	cmp #255 			; is it enabled yet?
003356  3  D0 08        	bne ispr4			; yes, try another slot.
003358  3               
003358  3  A0 05        	ldy #5
00335A  3  B1 68        	lda (z80_ix),y		 	; next type.
00335C  3  C9 FF        	cmp #255 			; is it enabled yet?
00335E  3  F0 10        	beq ispr3 			; no, process this one.
003360  3               ispr4:
003360  3  18           	clc 				; next sprite.
003361  3  A5 68        	lda z80_x
003363  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003365  3  85 68        	sta z80_x
003367  3  90 02        	bcc :+
003369  3  E6 69        	inc z80_i
00336B  3               :
00336B  3  C6 rr        	dec sprcnt
00336D  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
00336F  3  60           	rts  				; no more room in table.
003370  3               ispr3:
003370  3  20 C3 33     	jsr cpsp			; initialise a sprite.
003373  3  C6 rr        	dec sprcnt			; one less space in the table.
003375  3  D0 D0        	bne ispr2
003377  3  60           	rts
003378  3               
003378  3               
003378  3               ;-----------------------------------------------------------------------
003378  3               ; Initialise sprites - but not player, we're keeping the old one.
003378  3               ;
003378  3               ; global:	-
003378  3               ; local:	x,y,ix
003378  3               ; calls:	cpsp
003378  3               ;-----------------------------------------------------------------------
003378  3               
003378  3               kspr:
003378  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
00337A  3  A9 81        	lda #<sprtab 			; sprite table.
00337C  3  85 68        	sta z80_x
00337E  3  A9 34        	lda #>sprtab
003380  3  85 69        	sta z80_i
003382  3               kspr2:
003382  3  A0 00        	ldy #0
003384  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003386  3  C9 FF        	cmp #255 			; is it an end marker?
003388  3  D0 01        	bne :+
00338A  3  60           	rts 				; yes, no more to do.
00338B  3               :
00338B  3  C9 00        	cmp #0
00338D  3  D0 0E        	bne kspr1 			; no, add to table as normal.
00338F  3               
00338F  3  18           	clc 				; next sprite.
003390  3  A5 66        	lda z80_l
003392  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
003394  3  85 66        	sta z80_l
003396  3  90 02        	bcc :+
003398  3  E6 67        	inc z80_h
00339A  3               :
00339A  3  4C 82 33     	jmp kspr2
00339D  3               kspr1:
00339D  3  A0 00        	ldy #0 				; fetch sprite type.
00339F  3  B1 68        	lda (z80_ix),y
0033A1  3  C9 FF        	cmp #255 			; is it enabled yet?
0033A3  3  D0 08        	bne kspr4 			; yes, try another slot.
0033A5  3               
0033A5  3  A0 05        	ldy #5 				; next type.
0033A7  3  B1 68        	lda (z80_ix),y
0033A9  3  C9 FF        	cmp #255 			; is it enabled yet?
0033AB  3  F0 0F        	beq kspr3 			; no, process this one.
0033AD  3               kspr4:
0033AD  3  18           	clc 				; next sprite.
0033AE  3  A5 68        	lda z80_x
0033B0  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0033B2  3  85 68        	sta z80_x
0033B4  3  90 02        	bcc :+
0033B6  3  E6 69        	inc z80_i
0033B8  3               :
0033B8  3  CA           	dex	 			; repeat for remaining sprites.
0033B9  3  D0 E2        	bne kspr1
0033BB  3  60           	rts  				; no more room in table.
0033BC  3               kspr3:
0033BC  3  20 C3 33     	jsr cpsp 			; copy sprite to table.
0033BF  3  CA           	dex	 			; one less space in the table.
0033C0  3  D0 C0        	bne kspr2
0033C2  3  60           	rts
0033C3  3               
0033C3  3               ;----------------------------------------------
0033C3  3               ; Copy sprite from list to table.
0033C3  3               ;
0033C3  3               ; global:	hl,ix
0033C3  3               ; local:	y
0033C3  3               ; calls:	evnt09
0033C3  3               ;----------------------------------------------
0033C3  3               
0033C3  3               cpsp:
0033C3  3  A0 00        	ldy #0				; fetch byte from table.
0033C5  3  B1 66        	lda (z80_hl),y
0033C7  3  91 68        	sta (z80_ix),y			; set up type.
0033C9  3  A0 05        	ldy #PAM1ST
0033CB  3  91 68        	sta (z80_ix),y 			; set up type.
0033CD  3               
0033CD  3  E6 66        	inc z80_l 			; move to next byte.
0033CF  3  D0 02        	bne :+
0033D1  3  E6 67        	inc z80_h
0033D3  3               :
0033D3  3  A0 00        	ldy #0 				; fetch byte from table.
0033D5  3  B1 66        	lda (z80_hl),y
0033D7  3  A0 06        	ldy #6
0033D9  3  91 68        	sta (z80_ix),y			; set up image.
0033DB  3               
0033DB  3  E6 66        	inc z80_l 			; move to next byte.
0033DD  3  D0 02        	bne :+
0033DF  3  E6 67        	inc z80_h
0033E1  3               :
0033E1  3  A0 00        	ldy #0
0033E3  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0033E5  3  A0 08        	ldy #8
0033E7  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0033E9  3               
0033E9  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0033EB  3  A0 03        	ldy #3
0033ED  3  91 68        	sta (z80_ix),y
0033EF  3               
0033EF  3  E6 66        	inc z80_l 			; move to next byte.
0033F1  3  D0 02        	bne :+
0033F3  3  E6 67        	inc z80_h
0033F5  3               :
0033F5  3  A0 00        	ldy #0 				; fetch byte from table.
0033F7  3  B1 66        	lda (z80_hl),y
0033F9  3  A0 09        	ldy #9
0033FB  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0033FD  3               
0033FD  3  E6 66        	inc z80_l 			; move to next byte.
0033FF  3  D0 02        	bne :+
003401  3  E6 67        	inc z80_h
003403  3               :
003403  3  A9 00        	lda #0				; zeroes in accumulator.
003405  3  A0 07        	ldy #7 				; reset frame number.
003407  3  91 68        	sta (z80_ix),y
003409  3  A0 0A        	ldy #10 			; reset direction.
00340B  3  91 68        	sta (z80_ix),y
00340D  3  A0 0D        	ldy #13				; reset jump pointer low.
00340F  3  91 68        	sta (z80_ix),y
003411  3  A0 0E        	ldy #14	 			; reset jump pointer high.
003413  3  91 68        	sta (z80_ix),y
003415  3               
003415  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
003417  3  A0 10        	ldy #16
003419  3  91 68        	sta (z80_ix),y
00341B  3               evis0:
00341B  3  A5 69        	lda z80_i
00341D  3  48           	pha
00341E  3  A5 68        	lda z80_x
003420  3  48           	pha
003421  3  A5 67        	lda z80_h
003423  3  48           	pha
003424  3  A5 66        	lda z80_l
003426  3  48           	pha
003427  3               
003427  3  20 47 40     	jsr evnt09 			; perform event.
00342A  3               
00342A  3  68           	pla
00342B  3  85 66        	sta z80_l
00342D  3  68           	pla
00342E  3  85 67        	sta z80_h
003430  3  68           	pla
003431  3  85 68        	sta z80_x
003433  3  68           	pla
003434  3  85 69        	sta z80_i
003436  3               
003436  3  18           	clc
003437  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
003439  3  69 11        	adc #TABSIZ		 	; next sprite.
00343B  3  85 68        	sta z80_x
00343D  3  90 02        	bcc :+
00343F  3  E6 69        	inc z80_i
003441  3               :
003441  3  60           	rts
003442  3               
003442  3               
003442  3               ;-------------------------------------
003442  3               ; Clear the play area window.
003442  3               ;-------------------------------------
003442  3               
003442  3               clw:
003442  3  AD 26 20     	lda wintop			; get coordinates of window.
003445  3  85 rr        	sta dispy			; put into dispx for calculation.
003447  3  AD 27 20     	lda winlft
00344A  3  85 rr        	sta dispx
00344C  3               
00344C  3  AD 28 20     	lda winhgt			; height of window.
00344F  3  85 rr        	sta rrow			; copy to b register.
003451  3               clw3:
003451  3  AD 29 20     	lda winwid 			; width of window.
003454  3  85 rr        	sta rcol
003456  3               clw2:
003456  3  20 1E 26     	jsr gprad 			; get print address.
003459  3  A9 00        	lda #0				; zero byte to write.
00345B  3  A2 07        	ldx #7				; pixel height of each cell.
00345D  3               clw1:
00345D  3  BC A4 26     	ldy scrtab,x
003460  3  91 rr        	sta (scraddr),y 			; copy to screen.
003462  3  CA           	dex				; next screen row down.
003463  3  10 F8        	bpl clw1
003465  3               
003465  3  E6 rr        	inc dispx			; next column.
003467  3  C6 rr        	dec rcol			; one less to do.
003469  3  D0 EB        	bne clw2			; repeat for remaining columns.
00346B  3               
00346B  3  AD 27 20     	lda winlft			; get left edge.
00346E  3  85 rr        	sta dispx 			; reset x.
003470  3  E6 rr        	inc dispy 			; next line down.
003472  3               
003472  3  C6 rr        	dec rrow
003474  3  D0 DB        	bne clw3			; repeat down the screen.
003476  3               
003476  3  AD 26 20     	lda wintop			; get coordinates of window.
003479  3  85 rr        	sta chary			; put into display position.
00347B  3  AD 27 20     	lda winlft
00347E  3  85 rr        	sta charx
003480  3  60           	rts
003481  3               
003481  3               
003481  3               ;----------------------------------------------------------
003481  3               ; Effects code.
003481  3               ; Ticker routine is called 25 times per second.
003481  3               ;
003481  3               ; HL = txtscr = left text screen address
003481  3               ; DE = txtscr+txtwid-1 = right text screen address
003481  3               ; BC = txtpos = text scroller position
003481  3               ;
003481  3               ;----------------------------------------------------------
003481  3               
003481  3               .if sflag
003481  3               scrly:
003481  3               	rts
003481  3               	.word txtscr         	; get left screen address.
003481  3               	sta scr_l
003481  3               	lda txtscr+1
003481  3               	sta scr_l+1
003481  3               	sta scr_r+1
003481  3               
003481  3               	stx xtmp
003481  3               
003481  3               	clc         		; get right screen address.
003481  3               	lda scr_l
003481  3               	adc txtwid
003481  3               	sta scr_r
003481  3               	dec scr_r
003481  3               scrly1:
003481  3               	ldy txtwid		; set txtwide
003481  3               	dey
003481  3               	clc
003481  3               scrly0:
003481  3               	lda (scr_l),y		; scroll 1 line
003481  3               	rol a
003481  3               	sta (scr_l),y
003481  3               	dey
003481  3               	bpl scrly0
003481  3               
003481  3               	clc			; point to next line
003481  3               	lda scr_l
003481  3               	adc #32
003481  3               	sta scr_l
003481  3               	bcc scrly1		; repeat 8 times
003481  3               
003481  3               	lda txtpos 		; get text pointer.
003481  3               	sta scr_txt
003481  3               	lda txtpos+1
003481  3               	sta scr_txt+1
003481  3               
003481  3               	ldy #0
003481  3               	lda (scr_txt),y 		; find character we're displaying.
003481  3               	and #127 		; remove end marker bit if applicable.
003481  3               	cmp #13			; is it newline?
003481  3               	bne scrly5 		; no, it's okay.
003481  3               	lda #32			; convert to a space instead.
003481  3               scrly5:
003481  3               	sta fntaddr		; calculate char address
003481  3               	lda #0
003481  3               	sta fntaddr+1
003481  3               	asl fntaddr  		; multiply char by 8.
003481  3               	rol fntaddr+1
003481  3               	asl fntaddr
003481  3               	rol fntaddr+1
003481  3               	asl fntaddr
003481  3               	rol fntaddr+1
003481  3               	lda fntaddr
003481  3               	clc
003481  3               	adc #<(FONT-256)
003481  3               	sta scrly3+1		; that's the low byte.
003481  3               	lda fntaddr+1
003481  3               	adc #>(FONT-256)
003481  3               	sta scrly3+2		; add displacement.
003481  3               
003481  3               	ldx #0
003481  3               scrly3:
003481  3               	lda $3333,x		; get image of char line.
003481  3               	and txtbit
003481  3               	beq scrly2		; don't plot pixel
003481  3               	ldy scrline,x
003481  3               	lda (scr_r),y
003481  3               	clc
003481  3               	ora #1
003481  3               	sta (scr_r),y		; plot pixel
003481  3               scrly2:
003481  3               	inx			; next line of char.
003481  3               	cpx #8
003481  3               	bne scrly3
003481  3               
003481  3               	lsr txtbit		; bit of text to display.
003481  3               	bcs :+
003481  3               	rts
003481  3               :
003481  3               	ldy #0
003481  3               	lda (scr_txt),y 	; what was the character?
003481  3               	asl a	  		; end of message?
003481  3               	bcs scrly4
003481  3               	inc txtpos
003481  3               	bne :+
003481  3               	inc txtpos+1
003481  3               :
003481  3               	jmp scrly6 		; not yet - continue.
003481  3               scrly4:
003481  3               	lda txtini 		; start of scrolling message.
003481  3               	sta txtpos
003481  3               	lda txtini+1
003481  3               	sta txtpos+1
003481  3               scrly6:
003481  3               	lda #128
003481  3               	sta txtbit
003481  3               	ldx xtmp
003481  3               	rts
003481  3               
003481  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003481  3               
003481  3               ;-------------------------------------------------------
003481  3               ; Entry TICKER command
003481  3               ;
003481  3               ; Entry:
003481  3               ;  z80_b = message nr
003481  3               ;  z80_c = width
003481  3               ;-------------------------------------------------------
003481  3               
003481  3               iscrly:
003481  3               	jsr prescr 		; set up display position.
003481  3               
003481  3               	lda #<msgdat 		; text messages.
003481  3               	sta z80_l
003481  3               	lda #>msgdat
003481  3               	sta z80_h
003481  3               
003481  3               	lda z80_c 		; width.
003481  3               	sec
003481  3               	sbc #1			; subtract one.
003481  3               	cmp #32 		; is it between 1 and 32?
003481  3               	bcc :+
003481  3               	lda #$60
003481  3               	jmp iscrl0		; no, disable messages.
003481  3               :
003481  3               	ldx z80_b		; message number.
003481  3               	jsr getwrd 		; find message start.
003481  3               
003481  3               	lda z80_l		; set initial text position.
003481  3               	sta txtini
003481  3               	lda z80_h
003481  3               	sta txtini+1
003481  3               
003481  3               	lda #$ad		; code for lda adrr
003481  3               iscrl0:
003481  3               	sta scrly		; enable/disable scrolling routine.
003481  3               
003481  3               	jsr prescr 		; set up display position.
003481  3               	jsr gprad 		; get print address.
003481  3               
003481  3               	lda scraddr 		; set text screen address.
003481  3               	sta txtscr
003481  3               	lda scraddr+1
003481  3               	sta txtscr+1
003481  3               
003481  3               	lda z80_c		; width.
003481  3               	sta txtwid		; set width in working storage.
003481  3               
003481  3               	lda #128 		; start with leftmost bit.
003481  3               	sta txtbit
003481  3               
003481  3               	jmp scrly4
003481  3               .endif
003481  3               
003481  3               ;------------------------------------------------------------------
003481  3               ; Dig routine, conditional assembly depending on dflag
003481  3               ;------------------------------------------------------------------
003481  3               .if dflag
003481  3               dig:
003481  3               	and #3
003481  3               	beq digr		; dig right
003481  3               	cmp #1
003481  3               	beq digl		; dig left
003481  3               	cmp #2
003481  3               	beq digd		; dig down
003481  3               
003481  3               ; Dig up.
003481  3               
003481  3               digu:				; dig up
003481  3               	ldy #8
003481  3               	lda (z80_ix),y
003481  3               	sec
003481  3               	sbc #2
003481  3               	sta dispy		; set y
003481  3               
003481  3               	iny
003481  3               	lda (z80_ix),y
003481  3               	sta dispx		; set x
003481  3               	jmp digv
003481  3               
003481  3               ; Dig down.
003481  3               
003481  3               digd:
003481  3               	ldy #9
003481  3               	lda (z80_ix),y
003481  3               	sta dispx		; set y
003481  3               
003481  3               	dey
003481  3               	clc
003481  3               	lda (z80_ix),y
003481  3               	adc #16
003481  3               	sta dispy		; set y
003481  3               	jmp digv
003481  3               
003481  3               ; Dig left.
003481  3               
003481  3               digl:
003481  3               	ldy #8
003481  3               	lda (z80_ix),y
003481  3               	sta dispy		; set y
003481  3               
003481  3               	iny
003481  3               	lda (z80_ix),y
003481  3               	sec
003481  3               	sbc #2			; x=x-2
003481  3               	sta dispx		; set x
003481  3               	jmp digh
003481  3               
003481  3               ; Dig right.
003481  3               
003481  3               digr:
003481  3               	ldy #8
003481  3               	lda (z80_ix),y
003481  3               	sta dispy		; set y
003481  3               
003481  3               	iny
003481  3               	lda (z80_ix),y
003481  3               	clc
003481  3               	adc #16
003481  3               	sta dispx		; set x+16
003481  3               	jmp digh
003481  3               
003481  3               ; Vertical digging
003481  3               
003481  3               digv:
003481  3               	jsr tstbl		; check blocktype in MAP
003481  3               	jsr fdchk		; test if FODDER
003481  3               
003481  3               	clc
003481  3               	lda dispx		; look 1 cell down
003481  3               	adc #8
003481  3               	sta dispx
003481  3               	jsr tstbl		; check blocktype in MAP
003481  3               	jsr fdchk
003481  3               	lda dispx
003481  3               	and #7
003481  3               	bne :+
003481  3               	rts
003481  3               :
003481  3               	clc
003481  3               	lda dispx		; look 1 cell down
003481  3               	adc #8
003481  3               	sta dispx
003481  3               	jsr tstbl		; check blocktype in MAP
003481  3               	jmp fdchk
003481  3               
003481  3               ; Horizontal digging
003481  3               
003481  3               digh:
003481  3               	jsr tstbl		; check blocktype in MAP
003481  3               	jsr fdchk		; test if FODDER
003481  3               
003481  3               	clc
003481  3               	lda dispy		; look 1 cell down
003481  3               	adc #8
003481  3               	sta dispy
003481  3               	jsr tstbl		; check blocktype in MAP
003481  3               	jsr fdchk
003481  3               	lda dispy
003481  3               	and #7
003481  3               	bne :+
003481  3               	rts
003481  3               :
003481  3               	clc
003481  3               	lda dispy		; look 1 cell down
003481  3               	adc #8
003481  3               	sta dispy
003481  3               	jsr tstbl		; check blocktype in MAP
003481  3               	jmp fdchk
003481  3               
003481  3               digcnt:	.byte 0
003481  3               
003481  3               .endif
003481  3               
003481  3               ;------------------------------------------------------------------
003481  3               ; Sprite table
003481  3               ;------------------------------------------------------------------
003481  3               
003481  3               
003481  3               ; ix+0  = type.
003481  3               ; ix+1  = sprite image number.
003481  3               ; ix+2  = frame.
003481  3               ; ix+3  = y coord.
003481  3               ; ix+4  = x coord.
003481  3               
003481  3               ; ix+5  = new type.
003481  3               ; ix+6  = new image number.
003481  3               ; ix+7  = new frame.
003481  3               ; ix+8  = new y coord.
003481  3               ; ix+9  = new x coord.
003481  3               
003481  3               ; ix+10 = direction.
003481  3               ; ix+11 = parameter 1.
003481  3               ; ix+12 = parameter 2.
003481  3               ; ix+13 = jump pointer low.
003481  3               ; ix+14 = jump pointer high.
003481  3               ; ix+15 = data pointer low.
003481  3               ; ix+16 = data pointer high.
003481  3               
003481  3               ; block NUMSPR * TABSIZ,255
003481  3               
003481  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
003485  3  FF FF FF FF  
003489  3  FF FF FF FF  
00354D  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
003551  3  FF FF FF 00  
003555  3  C0 78 00 00  
00355E  3  07           roomtb:	.byte 7                      ; start room map offset.
00355F  3               
00355F  3               ; User routine.  Put your own code in here to be called with USER instruction.
00355F  3               ; if USER has an argument it will be passed in the accumulator.
00355F  3               
00355F  3               user:
00355F  3               	.include "user.inc"
00355F  4  60           	rts
003560  4               
003560  3               
003560  3               setfgcol:
003560  3  29 03        	and #3
003562  3  A8           	tay
003563  3  B9 85 35     	lda codcol,y
003566  3  4C 7C 35     	jmp calfgc
003569  3               
003569  3               setbgcol:
003569  3  29 03        	and #3
00356B  3               calbgc:
00356B  3  A8           	tay
00356C  3  B9 85 35     	lda codcol,y
00356F  3  48           	pha
003570  3  AD 83 35     	lda andeor
003573  3  4D 84 35     	eor andeor+1
003576  3  AA           	tax
003577  3  68           	pla
003578  3  8D 84 35     	sta andeor+1
00357B  3  8A           	txa
00357C  3               calfgc:
00357C  3  4D 84 35     	eor andeor+1
00357F  3  8D 83 35     	sta andeor
003582  3               calex1:
003582  3  60           	rts
003583  3               
003583  3  00 00        andeor:	.byte 0,0
003585  3  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
003589  3               
003589  3               ; Everything below here will be generated by the editors.
003589  3               
003589  3  60                   rts
00358A  3               WINDOWTOP = 1
00358A  3               WINDOWLFT = 1
00358A  3               WINDOWHGT = 19
00358A  3               WINDOWWID = 30 ;a
00358A  3               MAPWID = 11
00358A  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
00358E  3  FF FF FF FF  
003592  3  FF FF FF     
003595  3               mapdat:
003595  3  11 06 14 10          .byte 17,6,20,16,7,26,2,1,18,19,21,255,255,14,23,5,4,8,9,25,255,22,255,255,13,12,11,10,0,15,255,255,255,255,255,3,255,255,255,255,24,255,255,255
003599  3  07 1A 02 01  
00359D  3  12 13 15 FF  
0035C1  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
0035C5  3  FF FF FF FF  
0035C9  3  FF FF FF     
0035CC  3  04           stmap:  .byte 4
0035CD  3               
0035CD  3               evnt00:
0035CD  3  A5 rr                lda joyval	; KEY
0035CF  3  29 01                and #1
0035D1  3  F0 03                beq :+
0035D3  3  4C DF 35             jmp a00039
0035D6  3               :
0035D6  3  A9 01                lda #1
0035D8  3  A0 0B                ldy #11
0035DA  3  91 68                sta (z80_ix),y
0035DC  3  4C 36 36             jmp a00218
0035DF  3  A5 rr        a00039: lda joyval	; KEY
0035E1  3  29 02                and #2
0035E3  3  F0 03                beq :+
0035E5  3  4C F1 35             jmp a00076
0035E8  3               :
0035E8  3  A9 01                lda #1
0035EA  3  A0 0B                ldy #11
0035EC  3  91 68                sta (z80_ix),y
0035EE  3  4C 36 36             jmp a00218
0035F1  3  A5 rr        a00076: lda joyval	; KEY
0035F3  3  29 04                and #4
0035F5  3  F0 03                beq :+
0035F7  3  4C 03 36             jmp a00113
0035FA  3               :
0035FA  3  A9 01                lda #1
0035FC  3  A0 0B                ldy #11
0035FE  3  91 68                sta (z80_ix),y
003600  3  4C 36 36             jmp a00218
003603  3  A5 rr        a00113: lda joyval	; KEY
003605  3  29 08                and #8
003607  3  F0 03                beq :+
003609  3  4C 15 36             jmp a00151
00360C  3               :
00360C  3  A9 01                lda #1
00360E  3  A0 0B                ldy #11
003610  3  91 68                sta (z80_ix),y
003612  3  4C 36 36             jmp a00218
003615  3  A5 rr        a00151: lda joyval	; KEY
003617  3  29 10                and #16
003619  3  F0 03                beq :+
00361B  3  4C 27 36             jmp a00188
00361E  3               :
00361E  3  A9 01                lda #1
003620  3  A0 0B                ldy #11
003622  3  91 68                sta (z80_ix),y
003624  3  4C 36 36             jmp a00218
003627  3  A9 01        a00188: lda #1
003629  3  C5 rr                cmp varb
00362B  3  90 03                bcc *+5
00362D  3  4C 36 36             jmp a00218
003630  3  A9 00                lda #0
003632  3  A0 0B                ldy #11
003634  3  91 68                sta (z80_ix),y
003636  3  A9 00        a00218: lda #0
003638  3  C5 rr                cmp varl
00363A  3  F0 03                beq *+5
00363C  3  4C 50 36             jmp a00271
00363F  3  A9 00                lda #0
003641  3  A0 0B                ldy #11
003643  3  D1 68                cmp (z80_ix),y
003645  3  F0 03                beq *+5
003647  3  4C 50 36             jmp a00271
00364A  3  A9 00                lda #0
00364C  3  A0 07                ldy #7
00364E  3  91 68                sta (z80_ix),y
003650  3  A5 rr        a00271: lda joyval	; KEY
003652  3  29 20                and #32
003654  3  F0 03                beq :+
003656  3  4C 80 36             jmp a00366
003659  3               :
003659  3  A9 00                lda #0
00365B  3  C5 rr                cmp vara
00365D  3  F0 03                beq *+5
00365F  3  4C 80 36             jmp a00366
003662  3  A9 1E                lda #30
003664  3  C5 rr                cmp varm
003666  3  F0 03                beq *+5
003668  3  4C 77 36             jmp a00347
00366B  3  A9 1F                lda #31
00366D  3  85 rr                sta varm
00366F  3  A9 05                lda #5 	; DELAY
003671  3  20 2F 20             jsr delay
003674  3  4C 80 36             jmp a00366
003677  3  A9 1E        a00347: lda #30
003679  3  85 rr                sta varm
00367B  3  A9 05                lda #5 	; DELAY
00367D  3  20 2F 20             jsr delay
003680  3  A9 00        a00366: lda #0
003682  3  C5 rr                cmp varj
003684  3  F0 03                beq *+5
003686  3  4C B7 36             jmp a00482
003689  3  A9 05                lda #DEADLY	; DEADLY
00368B  3  85 63                sta z80_b
00368D  3  20 89 2A             jsr tded
003690  3  C5 63                cmp z80_b
003692  3  F0 03                beq :+
003694  3  4C B7 36             jmp a00482
003697  3               :
003697  3  A9 01                lda #1
003699  3  85 rr                sta varj
00369B  3  A9 FF                lda #255	; REMOVE
00369D  3  A0 05                ldy #5
00369F  3  91 68                sta (z80_ix),y
0036A1  3  A9 05                lda #5	; SPAWN
0036A3  3  85 62                sta z80_c
0036A5  3  A9 09                lda #9
0036A7  3  85 63                sta z80_b
0036A9  3  20 2C 24             jsr spawn
0036AC  3  A9 08                lda #8	; SPAWN
0036AE  3  85 62                sta z80_c
0036B0  3  A9 07                lda #7
0036B2  3  85 63                sta z80_b
0036B4  3  20 2C 24             jsr spawn
0036B7  3  A9 00        a00482: lda #0
0036B9  3  C5 rr                cmp vark
0036BB  3  F0 03                beq *+5
0036BD  3  4C EC 36             jmp a00591
0036C0  3  A9 01                lda #1
0036C2  3  C5 rr                cmp vars
0036C4  3  F0 03                beq *+5
0036C6  3  4C E9 36             jmp a00587
0036C9  3  20 D9 23             jsr skobj	; DETECTOBJECT
0036CC  3  85 rr                sta varobj
0036CE  3  A9 FF                lda #255
0036D0  3  C5 rr                cmp varobj
0036D2  3  D0 03                bne *+5
0036D4  3  4C E9 36             jmp a00587
0036D7  3  A5 rr                lda varobj	; GET
0036D9  3  20 58 23             jsr getob
0036DC  3  A5 rr                lda varc
0036DE  3  18                   clc
0036DF  3  69 01                adc #1
0036E1  3  85 rr                sta varc
0036E3  3  A9 3C                lda #60		; BEEP
0036E5  3  0A                   asl a
0036E6  3  8D AC 20             sta sndtyp
0036E9  3  4C 0C 37     a00587: jmp a00663
0036EC  3  20 D9 23     a00591: jsr skobj	; DETECTOBJECT
0036EF  3  85 rr                sta varobj
0036F1  3  A9 FF                lda #255
0036F3  3  C5 rr                cmp varobj
0036F5  3  D0 03                bne *+5
0036F7  3  4C 0C 37             jmp a00663
0036FA  3  A5 rr                lda varobj	; GET
0036FC  3  20 58 23             jsr getob
0036FF  3  A5 rr                lda numlif
003701  3  18                   clc
003702  3  69 01                adc #1
003704  3  85 rr                sta numlif
003706  3  A9 3C                lda #60		; BEEP
003708  3  0A                   asl a
003709  3  8D AC 20             sta sndtyp
00370C  3  20 BD 28     a00663: jsr cangd	; CANGODOWN
00370F  3  F0 03                beq :+
003711  3  4C 1B 37             jmp a00695
003714  3               :
003714  3  20 3A 32             jsr ifall	; TABLEFALL
003717  3  A9 00                lda #0
003719  3  85 rr                sta varb
00371B  3  A9 00        a00695: lda #0
00371D  3  C5 rr                cmp varl
00371F  3  F0 03                beq *+5
003721  3  4C 38 37             jmp a00752
003724  3  A9 01                lda #1
003726  3  C5 rr                cmp varb
003728  3  F0 03                beq *+5
00372A  3  4C 38 37             jmp a00752
00372D  3  A9 08                lda #8	; SPAWN
00372F  3  85 62                sta z80_c
003731  3  A9 03                lda #3
003733  3  85 63                sta z80_b
003735  3  20 2C 24             jsr spawn
003738  3  A9 E7        a00752: lda #231
00373A  3  A0 09                ldy #9
00373C  3  D1 68                cmp (z80_ix),y
00373E  3  90 03                bcc *+5
003740  3  4C 5C 37             jmp a00831
003743  3  20 78 31             jsr scrr	; SCREENRIGHT
003746  3  A9 00                lda #0
003748  3  85 rr                sta varf
00374A  3  A9 0A                lda #10
00374C  3  A0 09                ldy #9
00374E  3  91 68                sta (z80_ix),y
003750  3  A0 08                ldy #8
003752  3  B1 68                lda (z80_ix),y
003754  3  85 rr                sta varo
003756  3  A0 09                ldy #9
003758  3  B1 68                lda (z80_ix),y
00375A  3  85 rr                sta varp
00375C  3  A9 09        a00831: lda #9
00375E  3  A0 09                ldy #9
003760  3  D1 68                cmp (z80_ix),y
003762  3  B0 03                bcs *+5
003764  3  4C 80 37             jmp a00910
003767  3  A9 01                lda #1
003769  3  85 rr                sta varf
00376B  3  20 5D 31             jsr scrl	; SCREENLEFT
00376E  3  A9 E6                lda #230
003770  3  A0 09                ldy #9
003772  3  91 68                sta (z80_ix),y
003774  3  A0 08                ldy #8
003776  3  B1 68                lda (z80_ix),y
003778  3  85 rr                sta varo
00377A  3  A0 09                ldy #9
00377C  3  B1 68                lda (z80_ix),y
00377E  3  85 rr                sta varp
003780  3  A9 8C        a00910: lda #140
003782  3  A0 08                ldy #8
003784  3  D1 68                cmp (z80_ix),y
003786  3  90 03                bcc *+5
003788  3  4C A0 37             jmp a00981
00378B  3  20 8A 31             jsr scrd	; SCREENDOWN
00378E  3  A9 0A                lda #10
003790  3  A0 08                ldy #8
003792  3  91 68                sta (z80_ix),y
003794  3  A0 08                ldy #8
003796  3  B1 68                lda (z80_ix),y
003798  3  85 rr                sta varo
00379A  3  A0 09                ldy #9
00379C  3  B1 68                lda (z80_ix),y
00379E  3  85 rr                sta varp
0037A0  3  A9 09        a00981: lda #9
0037A2  3  A0 08                ldy #8
0037A4  3  D1 68                cmp (z80_ix),y
0037A6  3  B0 03                bcs *+5
0037A8  3  4C C0 37             jmp a01051
0037AB  3  20 81 31             jsr scru	; SCREENUP
0037AE  3  A9 88                lda #136
0037B0  3  A0 08                ldy #8
0037B2  3  91 68                sta (z80_ix),y
0037B4  3  A0 08                ldy #8
0037B6  3  B1 68                lda (z80_ix),y
0037B8  3  85 rr                sta varo
0037BA  3  A0 09                ldy #9
0037BC  3  B1 68                lda (z80_ix),y
0037BE  3  85 rr                sta varp
0037C0  3  20 4F 28     a01051: jsr laddu	; CANGOUP
0037C3  3  F0 03                beq :+
0037C5  3  4C CF 37             jmp a01080
0037C8  3               :
0037C8  3  A9 01                lda #1
0037CA  3  85 rr                sta varl
0037CC  3  4C E2 37             jmp a01118
0037CF  3  20 39 28     a01080: jsr laddd	; LADDERBELOW
0037D2  3  F0 03                beq :+
0037D4  3  4C DE 37             jmp a01110
0037D7  3               :
0037D7  3  A9 02                lda #2
0037D9  3  85 rr                sta varl
0037DB  3  4C E2 37             jmp a01118
0037DE  3  A9 00        a01110: lda #0
0037E0  3  85 rr                sta varl
0037E2  3  A5 rr        a01118: lda joyval	; KEY
0037E4  3  29 01                and #1
0037E6  3  F0 03                beq :+
0037E8  3  4C 94 38             jmp a01502
0037EB  3               :
0037EB  3  20 14 2A             jsr cangr	; CANGORIGHT
0037EE  3  F0 03                beq :+
0037F0  3  4C 94 38             jmp a01502
0037F3  3               :
0037F3  3  A5 rr                lda joyval	; KEY
0037F5  3  29 04                and #4
0037F7  3  F0 03                beq :+
0037F9  3  4C 27 38             jmp a01266
0037FC  3               :
0037FC  3  20 39 28             jsr laddd	; LADDERBELOW
0037FF  3  F0 03                beq :+
003801  3  4C 07 38             jmp a01194
003804  3               :
003804  3  4C 24 38             jmp a01261
003807  3  A9 00        a01194: lda #0
003809  3  C5 rr                cmp vara
00380B  3  F0 03                beq *+5
00380D  3  4C 15 38             jmp a01222
003810  3  A9 00                lda #0		; ANIMATE
003812  3  20 3F 30             jsr animsp
003815  3  A9 01        a01222: lda #1
003817  3  A0 06                ldy #6
003819  3  91 68                sta (z80_ix),y
00381B  3  A0 09                ldy #9 		; SPRITERIGHT
00381D  3  B1 68                lda (z80_ix),y
00381F  3  18                   clc
003820  3  69 02                adc #2
003822  3  91 68                sta (z80_ix),y
003824  3  4C 94 38     a01261: jmp a01502
003827  3  A5 rr        a01266: lda joyval	; KEY
003829  3  29 08                and #8
00382B  3  F0 03                beq :+
00382D  3  4C 5B 38             jmp a01378
003830  3               :
003830  3  20 4F 28             jsr laddu	; CANGOUP
003833  3  F0 03                beq :+
003835  3  4C 3B 38             jmp a01306
003838  3               :
003838  3  4C 58 38             jmp a01373
00383B  3  A9 01        a01306: lda #1
00383D  3  A0 06                ldy #6
00383F  3  91 68                sta (z80_ix),y
003841  3  A9 00                lda #0
003843  3  C5 rr                cmp vara
003845  3  F0 03                beq *+5
003847  3  4C 4F 38             jmp a01347
00384A  3  A9 00                lda #0		; ANIMATE
00384C  3  20 3F 30             jsr animsp
00384F  3  A0 09        a01347: ldy #9 		; SPRITERIGHT
003851  3  B1 68                lda (z80_ix),y
003853  3  18                   clc
003854  3  69 02                adc #2
003856  3  91 68                sta (z80_ix),y
003858  3  4C 94 38     a01373: jmp a01502
00385B  3  A9 01        a01378: lda #1
00385D  3  A0 06                ldy #6
00385F  3  91 68                sta (z80_ix),y
003861  3  A9 00                lda #0
003863  3  C5 rr                cmp vara
003865  3  F0 03                beq *+5
003867  3  4C 8B 38             jmp a01476
00386A  3  A9 00                lda #0		; ANIMATE
00386C  3  20 3F 30             jsr animsp
00386F  3  A9 00                lda #0
003871  3  A0 07                ldy #7
003873  3  D1 68                cmp (z80_ix),y
003875  3  F0 03                beq *+5
003877  3  4C 8B 38             jmp a01476
00387A  3  20 BD 28             jsr cangd	; CANGODOWN
00387D  3  F0 03                beq :+
00387F  3  4C 85 38             jmp a01462
003882  3               :
003882  3  4C 8B 38             jmp a01476
003885  3  A9 05        a01462: lda #5		; BEEP
003887  3  0A                   asl a
003888  3  8D AC 20             sta sndtyp
00388B  3  A0 09        a01476: ldy #9 		; SPRITERIGHT
00388D  3  B1 68                lda (z80_ix),y
00388F  3  18                   clc
003890  3  69 02                adc #2
003892  3  91 68                sta (z80_ix),y
003894  3  A5 rr        a01502: lda joyval	; KEY
003896  3  29 02                and #2
003898  3  F0 03                beq :+
00389A  3  4C 46 39             jmp a01886
00389D  3               :
00389D  3  20 F2 28             jsr cangl	; CANGOLEFT
0038A0  3  F0 03                beq :+
0038A2  3  4C 46 39             jmp a01886
0038A5  3               :
0038A5  3  A5 rr                lda joyval	; KEY
0038A7  3  29 04                and #4
0038A9  3  F0 03                beq :+
0038AB  3  4C D9 38             jmp a01650
0038AE  3               :
0038AE  3  20 39 28             jsr laddd	; LADDERBELOW
0038B1  3  F0 03                beq :+
0038B3  3  4C B9 38             jmp a01579
0038B6  3               :
0038B6  3  4C D6 38             jmp a01646
0038B9  3  A9 00        a01579: lda #0
0038BB  3  C5 rr                cmp vara
0038BD  3  F0 03                beq *+5
0038BF  3  4C C7 38             jmp a01607
0038C2  3  A9 00                lda #0		; ANIMATE
0038C4  3  20 3F 30             jsr animsp
0038C7  3  A9 02        a01607: lda #2
0038C9  3  A0 06                ldy #6
0038CB  3  91 68                sta (z80_ix),y
0038CD  3  A0 09                ldy #9 		; SPRITELEFT
0038CF  3  B1 68                lda (z80_ix),y
0038D1  3  38                   sec
0038D2  3  E9 02                sbc #2
0038D4  3  91 68                sta (z80_ix),y
0038D6  3  4C 46 39     a01646: jmp a01886
0038D9  3  A5 rr        a01650: lda joyval	; KEY
0038DB  3  29 08                and #8
0038DD  3  F0 03                beq :+
0038DF  3  4C 0D 39             jmp a01762
0038E2  3               :
0038E2  3  20 4F 28             jsr laddu	; CANGOUP
0038E5  3  F0 03                beq :+
0038E7  3  4C ED 38             jmp a01690
0038EA  3               :
0038EA  3  4C 0A 39             jmp a01757
0038ED  3  A9 02        a01690: lda #2
0038EF  3  A0 06                ldy #6
0038F1  3  91 68                sta (z80_ix),y
0038F3  3  A9 00                lda #0
0038F5  3  C5 rr                cmp vara
0038F7  3  F0 03                beq *+5
0038F9  3  4C 01 39             jmp a01731
0038FC  3  A9 00                lda #0		; ANIMATE
0038FE  3  20 3F 30             jsr animsp
003901  3  A0 09        a01731: ldy #9 		; SPRITELEFT
003903  3  B1 68                lda (z80_ix),y
003905  3  38                   sec
003906  3  E9 02                sbc #2
003908  3  91 68                sta (z80_ix),y
00390A  3  4C 46 39     a01757: jmp a01886
00390D  3  A9 02        a01762: lda #2
00390F  3  A0 06                ldy #6
003911  3  91 68                sta (z80_ix),y
003913  3  A9 00                lda #0
003915  3  C5 rr                cmp vara
003917  3  F0 03                beq *+5
003919  3  4C 3D 39             jmp a01860
00391C  3  A9 00                lda #0		; ANIMATE
00391E  3  20 3F 30             jsr animsp
003921  3  A9 00                lda #0
003923  3  A0 07                ldy #7
003925  3  D1 68                cmp (z80_ix),y
003927  3  F0 03                beq *+5
003929  3  4C 3D 39             jmp a01860
00392C  3  20 BD 28             jsr cangd	; CANGODOWN
00392F  3  F0 03                beq :+
003931  3  4C 37 39             jmp a01846
003934  3               :
003934  3  4C 3D 39             jmp a01860
003937  3  A9 05        a01846: lda #5		; BEEP
003939  3  0A                   asl a
00393A  3  8D AC 20             sta sndtyp
00393D  3  A0 09        a01860: ldy #9 		; SPRITELEFT
00393F  3  B1 68                lda (z80_ix),y
003941  3  38                   sec
003942  3  E9 02                sbc #2
003944  3  91 68                sta (z80_ix),y
003946  3  A5 rr        a01886: lda joyval	; KEY
003948  3  29 08                and #8
00394A  3  F0 03                beq :+
00394C  3  4C 74 39             jmp a01988
00394F  3               :
00394F  3  20 4F 28             jsr laddu	; CANGOUP
003952  3  F0 03                beq :+
003954  3  4C 74 39             jmp a01988
003957  3               :
003957  3  A9 00                lda #0
003959  3  A0 06                ldy #6
00395B  3  91 68                sta (z80_ix),y
00395D  3  A9 00                lda #0
00395F  3  C5 rr                cmp vara
003961  3  F0 03                beq *+5
003963  3  4C 6B 39             jmp a01962
003966  3  A9 00                lda #0		; ANIMATE
003968  3  20 3F 30             jsr animsp
00396B  3  A0 08        a01962: ldy #8 		; SPRITEUP
00396D  3  B1 68                lda (z80_ix),y
00396F  3  38                   sec
003970  3  E9 02                sbc #2
003972  3  91 68                sta (z80_ix),y
003974  3  A5 rr        a01988: lda joyval	; KEY
003976  3  29 04                and #4
003978  3  F0 03                beq :+
00397A  3  4C A2 39             jmp a02091
00397D  3               :
00397D  3  20 39 28             jsr laddd	; LADDERBELOW
003980  3  F0 03                beq :+
003982  3  4C A2 39             jmp a02091
003985  3               :
003985  3  A9 00                lda #0
003987  3  A0 06                ldy #6
003989  3  91 68                sta (z80_ix),y
00398B  3  A9 00                lda #0
00398D  3  C5 rr                cmp vara
00398F  3  F0 03                beq *+5
003991  3  4C 99 39             jmp a02065
003994  3  A9 00                lda #0		; ANIMATE
003996  3  20 3F 30             jsr animsp
003999  3  A0 08        a02065: ldy #8 		; SPRITEDOWN
00399B  3  B1 68                lda (z80_ix),y
00399D  3  18                   clc
00399E  3  69 02                adc #2
0039A0  3  91 68                sta (z80_ix),y
0039A2  3  20 88 28     a02091: jsr cangu	; CANGOUP
0039A5  3  F0 03                beq :+
0039A7  3  4C E5 39             jmp a02230
0039AA  3               :
0039AA  3  A5 rr                lda joyval	; KEY
0039AC  3  29 10                and #16
0039AE  3  F0 03                beq :+
0039B0  3  4C E5 39             jmp a02230
0039B3  3               :
0039B3  3  20 BD 28             jsr cangd	; CANGODOWN
0039B6  3  F0 03                beq :+
0039B8  3  4C BE 39             jmp a02147
0039BB  3               :
0039BB  3  4C E5 39             jmp a02230
0039BE  3  A9 00        a02147: lda #0
0039C0  3  C5 rr                cmp varl
0039C2  3  F0 03                beq *+5
0039C4  3  4C E5 39             jmp a02230
0039C7  3  A9 01                lda #1
0039C9  3  C5 rr                cmp varb
0039CB  3  90 03                bcc *+5
0039CD  3  4C E5 39             jmp a02230
0039D0  3  20 7E 2B             jsr jump	; TABLEJUMP
0039D3  3  A9 05                lda #5		; BEEP
0039D5  3  0A                   asl a
0039D6  3  8D AC 20             sta sndtyp
0039D9  3  A9 0A                lda #10		; BEEP
0039DB  3  0A                   asl a
0039DC  3  8D AC 20             sta sndtyp
0039DF  3  A9 0F                lda #15		; BEEP
0039E1  3  0A                   asl a
0039E2  3  8D AC 20             sta sndtyp
0039E5  3  4C A6 31     a02230: jmp grav
0039E8  3               evnt01:
0039E8  3  A9 00                lda #0 	; COLLISION
0039EA  3  85 63                sta z80_b
0039EC  3  20 8A 30             jsr sktyp
0039EF  3  B0 03                bcs :+
0039F1  3  4C 1C 3A             jmp b00117
0039F4  3               :
0039F4  3  A5 rr                lda skptr	; OTHER
0039F6  3  85 68                sta z80_x
0039F8  3  A5 rr                lda skptr+1
0039FA  3  85 69                sta z80_i
0039FC  3  A9 01                lda #1
0039FE  3  85 rr                sta varj
003A00  3  A9 05                lda #5	; SPAWN
003A02  3  85 62                sta z80_c
003A04  3  A9 09                lda #9
003A06  3  85 63                sta z80_b
003A08  3  20 2C 24             jsr spawn
003A0B  3  A9 FF                lda #255	; REMOVE
003A0D  3  A0 05                ldy #5
003A0F  3  91 68                sta (z80_ix),y
003A11  3  A9 08                lda #8	; SPAWN
003A13  3  85 62                sta z80_c
003A15  3  A9 07                lda #7
003A17  3  85 63                sta z80_b
003A19  3  20 2C 24             jsr spawn
003A1C  3  A9 06        b00117: lda #CUSTOM	; CUSTOM
003A1E  3  85 63                sta z80_b
003A20  3  20 89 2A             jsr tded
003A23  3  C5 63                cmp z80_b
003A25  3  F0 03                beq :+
003A27  3  4C 44 3A             jmp b00201
003A2A  3               :
003A2A  3  A9 00                lda #0
003A2C  3  A0 0B                ldy #11
003A2E  3  D1 68                cmp (z80_ix),y
003A30  3  F0 03                beq *+5
003A32  3  4C 3E 3A             jmp b00187
003A35  3  A9 01                lda #1
003A37  3  A0 0B                ldy #11
003A39  3  91 68                sta (z80_ix),y
003A3B  3  4C 44 3A             jmp b00201
003A3E  3  A9 00        b00187: lda #0
003A40  3  A0 0B                ldy #11
003A42  3  91 68                sta (z80_ix),y
003A44  3  A9 00        b00201: lda #0
003A46  3  A0 0B                ldy #11
003A48  3  D1 68                cmp (z80_ix),y
003A4A  3  F0 03                beq *+5
003A4C  3  4C 9E 3A             jmp b00401
003A4F  3  20 F2 28             jsr cangl	; CANGOLEFT
003A52  3  F0 03                beq :+
003A54  3  4C 95 3A             jmp b00383
003A57  3               :
003A57  3  A0 09                ldy #9 		; SPRITELEFT
003A59  3  B1 68                lda (z80_ix),y
003A5B  3  38                   sec
003A5C  3  E9 02                sbc #2
003A5E  3  91 68                sta (z80_ix),y
003A60  3  A9 05                lda #5
003A62  3  A0 06                ldy #6
003A64  3  91 68                sta (z80_ix),y
003A66  3  A9 10                lda #16
003A68  3  85 62                sta z80_c
003A6A  3  A0 09                ldy #9
003A6C  3  B1 68                lda (z80_ix),y
003A6E  3  38                   sec
003A6F  3  E5 62                sbc z80_c
003A71  3  A0 09                ldy #9
003A73  3  91 68                sta (z80_ix),y
003A75  3  20 BD 28             jsr cangd	; CANGODOWN
003A78  3  F0 03                beq :+
003A7A  3  4C 83 3A             jmp b00343
003A7D  3               :
003A7D  3  A9 01                lda #1
003A7F  3  A0 0B                ldy #11
003A81  3  91 68                sta (z80_ix),y
003A83  3  A9 10        b00343: lda #16
003A85  3  85 62                sta z80_c
003A87  3  A0 09                ldy #9
003A89  3  B1 68                lda (z80_ix),y
003A8B  3  18                   clc
003A8C  3  65 62                adc z80_c
003A8E  3  A0 09                ldy #9
003A90  3  91 68                sta (z80_ix),y
003A92  3  4C 9B 3A             jmp b00397
003A95  3  A9 01        b00383: lda #1
003A97  3  A0 0B                ldy #11
003A99  3  91 68                sta (z80_ix),y
003A9B  3  4C EA 3A     b00397: jmp b00576
003A9E  3  20 14 2A     b00401: jsr cangr	; CANGORIGHT
003AA1  3  F0 03                beq :+
003AA3  3  4C E4 3A             jmp b00562
003AA6  3               :
003AA6  3  A0 09                ldy #9 		; SPRITERIGHT
003AA8  3  B1 68                lda (z80_ix),y
003AAA  3  18                   clc
003AAB  3  69 02                adc #2
003AAD  3  91 68                sta (z80_ix),y
003AAF  3  A9 06                lda #6
003AB1  3  A0 06                ldy #6
003AB3  3  91 68                sta (z80_ix),y
003AB5  3  A9 10                lda #16
003AB7  3  85 62                sta z80_c
003AB9  3  A0 09                ldy #9
003ABB  3  B1 68                lda (z80_ix),y
003ABD  3  18                   clc
003ABE  3  65 62                adc z80_c
003AC0  3  A0 09                ldy #9
003AC2  3  91 68                sta (z80_ix),y
003AC4  3  20 BD 28             jsr cangd	; CANGODOWN
003AC7  3  F0 03                beq :+
003AC9  3  4C D2 3A             jmp b00522
003ACC  3               :
003ACC  3  A9 00                lda #0
003ACE  3  A0 0B                ldy #11
003AD0  3  91 68                sta (z80_ix),y
003AD2  3  A9 10        b00522: lda #16
003AD4  3  85 62                sta z80_c
003AD6  3  A0 09                ldy #9
003AD8  3  B1 68                lda (z80_ix),y
003ADA  3  38                   sec
003ADB  3  E5 62                sbc z80_c
003ADD  3  A0 09                ldy #9
003ADF  3  91 68                sta (z80_ix),y
003AE1  3  4C EA 3A             jmp b00576
003AE4  3  A9 00        b00562: lda #0
003AE6  3  A0 0B                ldy #11
003AE8  3  91 68                sta (z80_ix),y
003AEA  3  A9 00        b00576: lda #0
003AEC  3  C5 rr                cmp vara
003AEE  3  F0 03                beq *+5
003AF0  3  4C F8 3A             jmp b00604
003AF3  3  A9 00                lda #0		; ANIMATE
003AF5  3  20 3F 30             jsr animsp
003AF8  3  60           b00604: rts
003AF9  3               evnt02:
003AF9  3  A9 01                lda #1
003AFB  3  C5 rr                cmp scno
003AFD  3  F0 03                beq *+5
003AFF  3  4C 6B 3B             jmp c00231
003B02  3  A9 01                lda #1
003B04  3  C5 rr                cmp vart
003B06  3  F0 03                beq *+5
003B08  3  4C 1C 3B             jmp c00071
003B0B  3  A9 0B                lda #11
003B0D  3  A0 06                ldy #6
003B0F  3  D1 68                cmp (z80_ix),y
003B11  3  F0 03                beq *+5
003B13  3  4C 1C 3B             jmp c00071
003B16  3  A9 0A                lda #10
003B18  3  A0 06                ldy #6
003B1A  3  91 68                sta (z80_ix),y
003B1C  3  A9 00        c00071: lda #0 	; COLLISION
003B1E  3  85 63                sta z80_b
003B20  3  20 8A 30             jsr sktyp
003B23  3  B0 03                bcs :+
003B25  3  4C 6B 3B             jmp c00231
003B28  3               :
003B28  3  A9 0A                lda #10
003B2A  3  A0 06                ldy #6
003B2C  3  D1 68                cmp (z80_ix),y
003B2E  3  F0 03                beq *+5
003B30  3  4C 58 3B             jmp c00193
003B33  3  A9 02                lda #2
003B35  3  C5 rr                cmp vars
003B37  3  F0 03                beq *+5
003B39  3  4C 45 3B             jmp c00154
003B3C  3  A9 32                lda #50		; BEEP
003B3E  3  0A                   asl a
003B3F  3  8D AC 20             sta sndtyp
003B42  3  4C 58 3B             jmp c00193
003B45  3  A9 00        c00154: lda #0
003B47  3  C5 rr                cmp vars
003B49  3  F0 03                beq *+5
003B4B  3  4C 58 3B             jmp c00193
003B4E  3  A9 32                lda #50		; BEEP
003B50  3  0A                   asl a
003B51  3  8D AC 20             sta sndtyp
003B54  3  A9 00                lda #0
003B56  3  85 rr                sta vart
003B58  3  A9 00        c00193: lda #0
003B5A  3  C5 rr                cmp varc
003B5C  3  F0 03                beq *+5
003B5E  3  4C 6B 3B             jmp c00231
003B61  3  A9 00                lda #0
003B63  3  85 rr                sta vart
003B65  3  A9 0B                lda #11
003B67  3  A0 06                ldy #6
003B69  3  91 68                sta (z80_ix),y
003B6B  3  A9 06        c00231: lda #6
003B6D  3  C5 rr                cmp scno
003B6F  3  F0 03                beq *+5
003B71  3  4C E1 3B             jmp c00472
003B74  3  A9 00                lda #0
003B76  3  C5 rr                cmp vart
003B78  3  F0 03                beq *+5
003B7A  3  4C AD 3B             jmp c00364
003B7D  3  A9 00                lda #0
003B7F  3  C5 rr                cmp vars
003B81  3  F0 03                beq *+5
003B83  3  4C AD 3B             jmp c00364
003B86  3  A9 00                lda #0 	; COLLISION
003B88  3  85 63                sta z80_b
003B8A  3  20 8A 30             jsr sktyp
003B8D  3  B0 03                bcs :+
003B8F  3  4C AD 3B             jmp c00364
003B92  3               :
003B92  3  A9 0B                lda #11
003B94  3  A0 06                ldy #6
003B96  3  D1 68                cmp (z80_ix),y
003B98  3  F0 03                beq *+5
003B9A  3  4C A3 3B             jmp c00343
003B9D  3  A9 32                lda #50		; BEEP
003B9F  3  0A                   asl a
003BA0  3  8D AC 20             sta sndtyp
003BA3  3  A9 0A        c00343: lda #10
003BA5  3  A0 06                ldy #6
003BA7  3  91 68                sta (z80_ix),y
003BA9  3  A9 01                lda #1
003BAB  3  85 rr                sta vars
003BAD  3  A9 0A        c00364: lda #10
003BAF  3  C5 rr                cmp varc
003BB1  3  F0 03                beq *+5
003BB3  3  4C E1 3B             jmp c00472
003BB6  3  A9 01                lda #1
003BB8  3  C5 rr                cmp vars
003BBA  3  F0 03                beq *+5
003BBC  3  4C E1 3B             jmp c00472
003BBF  3  A9 0A                lda #10
003BC1  3  A0 06                ldy #6
003BC3  3  91 68                sta (z80_ix),y
003BC5  3  A9 00                lda #0 	; COLLISION
003BC7  3  85 63                sta z80_b
003BC9  3  20 8A 30             jsr sktyp
003BCC  3  B0 03                bcs :+
003BCE  3  4C E1 3B             jmp c00472
003BD1  3               :
003BD1  3  A9 32                lda #50		; BEEP
003BD3  3  0A                   asl a
003BD4  3  8D AC 20             sta sndtyp
003BD7  3  A9 0B                lda #11
003BD9  3  A0 06                ldy #6
003BDB  3  91 68                sta (z80_ix),y
003BDD  3  A9 02                lda #2
003BDF  3  85 rr                sta vars
003BE1  3  A9 06        c00472: lda #6
003BE3  3  C5 rr                cmp scno
003BE5  3  F0 03                beq *+5
003BE7  3  4C 02 3C             jmp c00536
003BEA  3  A9 09                lda #9
003BEC  3  C5 rr                cmp varc
003BEE  3  B0 03                bcs *+5
003BF0  3  4C 02 3C             jmp c00536
003BF3  3  A9 01                lda #1
003BF5  3  C5 rr                cmp vars
003BF7  3  F0 03                beq *+5
003BF9  3  4C 02 3C             jmp c00536
003BFC  3  A9 0A                lda #10
003BFE  3  A0 06                ldy #6
003C00  3  91 68                sta (z80_ix),y
003C02  3  A9 01        c00536: lda #1
003C04  3  C5 rr                cmp scno
003C06  3  F0 03                beq *+5
003C08  3  4C 43 3C             jmp c00669
003C0B  3  A9 02                lda #2
003C0D  3  C5 rr                cmp vars
003C0F  3  F0 03                beq *+5
003C11  3  4C 43 3C             jmp c00669
003C14  3  A9 0B                lda #11
003C16  3  A0 06                ldy #6
003C18  3  D1 68                cmp (z80_ix),y
003C1A  3  F0 03                beq *+5
003C1C  3  4C 43 3C             jmp c00669
003C1F  3  A9 00                lda #0 	; COLLISION
003C21  3  85 63                sta z80_b
003C23  3  20 8A 30             jsr sktyp
003C26  3  B0 03                bcs :+
003C28  3  4C 43 3C             jmp c00669
003C2B  3               :
003C2B  3  A9 32                lda #50		; BEEP
003C2D  3  0A                   asl a
003C2E  3  8D AC 20             sta sndtyp
003C31  3  A9 0A                lda #10
003C33  3  A0 06                ldy #6
003C35  3  91 68                sta (z80_ix),y
003C37  3  A9 03                lda #3
003C39  3  85 rr                sta vars
003C3B  3  A9 28                lda #40
003C3D  3  85 rr                sta vari
003C3F  3  A9 00                lda #0
003C41  3  85 rr                sta vart
003C43  3  60           c00669: rts
003C44  3               evnt03:
003C44  3  A9 03                lda #3
003C46  3  C5 rr                cmp vars
003C48  3  F0 03                beq *+5
003C4A  3  4C 5E 3C             jmp d00057
003C4D  3  A9 FF                lda #255	; REMOVE
003C4F  3  A0 05                ldy #5
003C51  3  91 68                sta (z80_ix),y
003C53  3  A9 05                lda #5	; SPAWN
003C55  3  85 62                sta z80_c
003C57  3  A9 09                lda #9
003C59  3  85 63                sta z80_b
003C5B  3  20 2C 24             jsr spawn
003C5E  3  A9 00        d00057: lda #0 	; COLLISION
003C60  3  85 63                sta z80_b
003C62  3  20 8A 30             jsr sktyp
003C65  3  B0 03                bcs :+
003C67  3  4C A0 3C             jmp d00200
003C6A  3               :
003C6A  3  A9 01                lda #1
003C6C  3  A0 07                ldy #7
003C6E  3  D1 68                cmp (z80_ix),y
003C70  3  B0 03                bcs *+5
003C72  3  4C 78 3C             jmp d00109
003C75  3  4C A0 3C             jmp d00200
003C78  3  A9 01        d00109: lda #1
003C7A  3  85 rr                sta varj
003C7C  3  A5 rr                lda skptr	; OTHER
003C7E  3  85 68                sta z80_x
003C80  3  A5 rr                lda skptr+1
003C82  3  85 69                sta z80_i
003C84  3  A9 05                lda #5	; SPAWN
003C86  3  85 62                sta z80_c
003C88  3  A9 09                lda #9
003C8A  3  85 63                sta z80_b
003C8C  3  20 2C 24             jsr spawn
003C8F  3  A9 FF                lda #255	; REMOVE
003C91  3  A0 05                ldy #5
003C93  3  91 68                sta (z80_ix),y
003C95  3  A9 08                lda #8	; SPAWN
003C97  3  85 62                sta z80_c
003C99  3  A9 07                lda #7
003C9B  3  85 63                sta z80_b
003C9D  3  20 2C 24             jsr spawn
003CA0  3  A9 0C        d00200: lda #12
003CA2  3  A0 06                ldy #6
003CA4  3  D1 68                cmp (z80_ix),y
003CA6  3  F0 03                beq *+5
003CA8  3  4C AB 3C             jmp d00222
003CAB  3  A9 32        d00222: lda #50
003CAD  3  85 65                sta z80_d	; GETRANDOM
003CAF  3  20 96 2B             jsr random
003CB2  3  85 67                sta z80_h
003CB4  3  20 C6 22             jsr imul
003CB7  3  A5 67                lda z80_h
003CB9  3  85 rr                sta varrnd
003CBB  3  A9 19                lda #25
003CBD  3  C5 rr                cmp varrnd
003CBF  3  B0 03                bcs *+5
003CC1  3  4C CB 3C             jmp d00287
003CC4  3  A9 19                lda #25
003CC6  3  85 rr                sta varopt
003CC8  3  4C CF 3C             jmp d00297
003CCB  3  A5 rr        d00287: lda varrnd
003CCD  3  85 rr                sta varopt
003CCF  3  A9 00        d00297: lda #0
003CD1  3  A0 0B                ldy #11
003CD3  3  D1 68                cmp (z80_ix),y
003CD5  3  F0 03                beq *+5
003CD7  3  4C 72 3D             jmp d00646
003CDA  3  A9 00                lda #0
003CDC  3  A0 0A                ldy #10
003CDE  3  D1 68                cmp (z80_ix),y
003CE0  3  F0 03                beq *+5
003CE2  3  4C 4D 3D             jmp d00567
003CE5  3  A9 00                lda #0
003CE7  3  C5 rr                cmp vara
003CE9  3  F0 03                beq *+5
003CEB  3  4C 4A 3D             jmp d00562
003CEE  3  A9 00                lda #0		; ANIMATE
003CF0  3  20 3F 30             jsr animsp
003CF3  3  A9 05                lda #5
003CF5  3  A0 07                ldy #7
003CF7  3  D1 68                cmp (z80_ix),y
003CF9  3  F0 03                beq *+5
003CFB  3  4C 4A 3D             jmp d00562
003CFE  3  A9 04                lda #4
003D00  3  A0 06                ldy #6
003D02  3  D1 68                cmp (z80_ix),y
003D04  3  F0 03                beq *+5
003D06  3  4C 44 3D             jmp d00549
003D09  3  A9 10                lda #16
003D0B  3  85 62                sta z80_c
003D0D  3  A0 08                ldy #8
003D0F  3  B1 68                lda (z80_ix),y
003D11  3  38                   sec
003D12  3  E5 62                sbc z80_c
003D14  3  A0 08                ldy #8
003D16  3  91 68                sta (z80_ix),y
003D18  3  A9 08                lda #8	; SPAWN
003D1A  3  85 62                sta z80_c
003D1C  3  A9 03                lda #3
003D1E  3  85 63                sta z80_b
003D20  3  20 2C 24             jsr spawn
003D23  3  A9 10                lda #16
003D25  3  85 62                sta z80_c
003D27  3  A0 08                ldy #8
003D29  3  B1 68                lda (z80_ix),y
003D2B  3  18                   clc
003D2C  3  65 62                adc z80_c
003D2E  3  A0 08                ldy #8
003D30  3  91 68                sta (z80_ix),y
003D32  3  A9 0F                lda #15		; BEEP
003D34  3  0A                   asl a
003D35  3  8D AC 20             sta sndtyp
003D38  3  A9 0F                lda #15		; BEEP
003D3A  3  0A                   asl a
003D3B  3  8D AC 20             sta sndtyp
003D3E  3  A9 0F                lda #15		; BEEP
003D40  3  0A                   asl a
003D41  3  8D AC 20             sta sndtyp
003D44  3  A9 01        d00549: lda #1
003D46  3  A0 0A                ldy #10
003D48  3  91 68                sta (z80_ix),y
003D4A  3  4C 72 3D     d00562: jmp d00646
003D4D  3  A9 00        d00567: lda #0
003D4F  3  C5 rr                cmp vara
003D51  3  F0 03                beq *+5
003D53  3  4C 72 3D             jmp d00646
003D56  3  A9 00                lda #0		; ANIMATEBACK
003D58  3  20 65 30             jsr animbk
003D5B  3  A9 00                lda #0
003D5D  3  A0 07                ldy #7
003D5F  3  D1 68                cmp (z80_ix),y
003D61  3  F0 03                beq *+5
003D63  3  4C 72 3D             jmp d00646
003D66  3  A5 rr                lda varopt
003D68  3  A0 0B                ldy #11
003D6A  3  91 68                sta (z80_ix),y
003D6C  3  A9 00                lda #0
003D6E  3  A0 0A                ldy #10
003D70  3  91 68                sta (z80_ix),y
003D72  3  A9 00        d00646: lda #0
003D74  3  A0 0B                ldy #11
003D76  3  D1 68                cmp (z80_ix),y
003D78  3  90 03                bcc *+5
003D7A  3  4C 88 3D             jmp d00695
003D7D  3  A0 0B                ldy #11
003D7F  3  B1 68                lda (z80_ix),y
003D81  3  38                   sec
003D82  3  E9 01                sbc #1
003D84  3  A0 0B                ldy #11
003D86  3  91 68                sta (z80_ix),y
003D88  3  60           d00695: rts
003D89  3               evnt04:
003D89  3  60                   rts
003D8A  3               evnt05:
003D8A  3  A9 14                lda #20
003D8C  3  85 rr                sta varr
003D8E  3  A9 06                lda #6
003D90  3  A0 07                ldy #7
003D92  3  D1 68                cmp (z80_ix),y
003D94  3  B0 03                bcs *+5
003D96  3  4C B0 3D             jmp f00077
003D99  3  A9 00                lda #0
003D9B  3  C5 rr                cmp varj
003D9D  3  F0 03                beq *+5
003D9F  3  4C A2 3D             jmp f00049
003DA2  3  A9 00        f00049: lda #0
003DA4  3  C5 rr                cmp vara
003DA6  3  F0 03                beq *+5
003DA8  3  4C B0 3D             jmp f00077
003DAB  3  A9 00                lda #0		; ANIMATE
003DAD  3  20 3F 30             jsr animsp
003DB0  3  A9 07        f00077: lda #7
003DB2  3  A0 07                ldy #7
003DB4  3  D1 68                cmp (z80_ix),y
003DB6  3  F0 03                beq *+5
003DB8  3  4C CE 3D             jmp f00140
003DBB  3  A9 FF                lda #255	; REMOVE
003DBD  3  A0 05                ldy #5
003DBF  3  91 68                sta (z80_ix),y
003DC1  3  A9 03                lda #3
003DC3  3  C5 rr                cmp vars
003DC5  3  F0 03                beq *+5
003DC7  3  4C CE 3D             jmp f00140
003DCA  3  A9 14                lda #20
003DCC  3  85 rr                sta vari
003DCE  3  60           f00140: rts
003DCF  3               evnt06:
003DCF  3  A9 00                lda #0
003DD1  3  C5 rr                cmp varr
003DD3  3  90 03                bcc *+5
003DD5  3  4C DF 3D             jmp g00034
003DD8  3  A5 rr                lda varr
003DDA  3  38                   sec
003DDB  3  E9 01                sbc #1
003DDD  3  85 rr                sta varr
003DDF  3  A9 03        g00034: lda #3
003DE1  3  A0 07                ldy #7
003DE3  3  D1 68                cmp (z80_ix),y
003DE5  3  B0 03                bcs *+5
003DE7  3  4C 0B 3E             jmp g00127
003DEA  3  A0 08                ldy #8
003DEC  3  B1 68                lda (z80_ix),y
003DEE  3  A0 0B                ldy #11
003DF0  3  91 68                sta (z80_ix),y
003DF2  3  A0 09                ldy #9
003DF4  3  B1 68                lda (z80_ix),y
003DF6  3  A0 0C                ldy #12
003DF8  3  91 68                sta (z80_ix),y
003DFA  3  A9 00                lda #0
003DFC  3  C5 rr                cmp vara
003DFE  3  F0 03                beq *+5
003E00  3  4C 08 3E             jmp g00122
003E03  3  A9 00                lda #0		; ANIMATE
003E05  3  20 3F 30             jsr animsp
003E08  3  4C 56 3E     g00122: jmp g00293
003E0B  3  20 BD 28     g00127: jsr cangd	; CANGODOWN
003E0E  3  F0 03                beq :+
003E10  3  4C 2B 3E             jmp g00196
003E13  3               :
003E13  3  A9 04                lda #4
003E15  3  A0 07                ldy #7
003E17  3  91 68                sta (z80_ix),y
003E19  3  A9 04                lda #4
003E1B  3  85 62                sta z80_c
003E1D  3  A0 08                ldy #8
003E1F  3  B1 68                lda (z80_ix),y
003E21  3  18                   clc
003E22  3  65 62                adc z80_c
003E24  3  A0 08                ldy #8
003E26  3  91 68                sta (z80_ix),y
003E28  3  4C 56 3E             jmp g00293
003E2B  3  A9 00        g00196: lda #0
003E2D  3  A0 07                ldy #7
003E2F  3  91 68                sta (z80_ix),y
003E31  3  A9 05                lda #5	; SPAWN
003E33  3  85 62                sta z80_c
003E35  3  A9 09                lda #9
003E37  3  85 63                sta z80_b
003E39  3  20 2C 24             jsr spawn
003E3C  3  A9 14                lda #20		; BEEP
003E3E  3  0A                   asl a
003E3F  3  8D AC 20             sta sndtyp
003E42  3  A9 14                lda #20
003E44  3  85 rr                sta varr
003E46  3  A0 0B                ldy #11
003E48  3  B1 68                lda (z80_ix),y
003E4A  3  A0 08                ldy #8
003E4C  3  91 68                sta (z80_ix),y
003E4E  3  A0 0C                ldy #12
003E50  3  B1 68                lda (z80_ix),y
003E52  3  A0 09                ldy #9
003E54  3  91 68                sta (z80_ix),y
003E56  3  A9 00        g00293: lda #0 	; COLLISION
003E58  3  85 63                sta z80_b
003E5A  3  20 8A 30             jsr sktyp
003E5D  3  B0 03                bcs :+
003E5F  3  4C 95 3E             jmp g00431
003E62  3               :
003E62  3  A9 04                lda #4
003E64  3  A0 07                ldy #7
003E66  3  D1 68                cmp (z80_ix),y
003E68  3  F0 03                beq *+5
003E6A  3  4C 95 3E             jmp g00431
003E6D  3  A5 rr                lda skptr	; OTHER
003E6F  3  85 68                sta z80_x
003E71  3  A5 rr                lda skptr+1
003E73  3  85 69                sta z80_i
003E75  3  A9 01                lda #1
003E77  3  85 rr                sta varj
003E79  3  A9 05                lda #5	; SPAWN
003E7B  3  85 62                sta z80_c
003E7D  3  A9 09                lda #9
003E7F  3  85 63                sta z80_b
003E81  3  20 2C 24             jsr spawn
003E84  3  A9 FF                lda #255	; REMOVE
003E86  3  A0 05                ldy #5
003E88  3  91 68                sta (z80_ix),y
003E8A  3  A9 08                lda #8	; SPAWN
003E8C  3  85 62                sta z80_c
003E8E  3  A9 07                lda #7
003E90  3  85 63                sta z80_b
003E92  3  20 2C 24             jsr spawn
003E95  3  A9 05        g00431: lda #DEADLY	; DEADLY
003E97  3  85 63                sta z80_b
003E99  3  20 89 2A             jsr tded
003E9C  3  C5 63                cmp z80_b
003E9E  3  F0 03                beq :+
003EA0  3  4C E8 3E             jmp g00619
003EA3  3               :
003EA3  3  A9 00                lda #0
003EA5  3  A0 07                ldy #7
003EA7  3  91 68                sta (z80_ix),y
003EA9  3  A9 04                lda #4
003EAB  3  85 62                sta z80_c
003EAD  3  A0 08                ldy #8
003EAF  3  B1 68                lda (z80_ix),y
003EB1  3  38                   sec
003EB2  3  E5 62                sbc z80_c
003EB4  3  A0 08                ldy #8
003EB6  3  91 68                sta (z80_ix),y
003EB8  3  A9 05                lda #5	; SPAWN
003EBA  3  85 62                sta z80_c
003EBC  3  A9 09                lda #9
003EBE  3  85 63                sta z80_b
003EC0  3  20 2C 24             jsr spawn
003EC3  3  A9 14                lda #20		; BEEP
003EC5  3  0A                   asl a
003EC6  3  8D AC 20             sta sndtyp
003EC9  3  A9 04                lda #4
003ECB  3  85 62                sta z80_c
003ECD  3  A0 08                ldy #8
003ECF  3  B1 68                lda (z80_ix),y
003ED1  3  18                   clc
003ED2  3  65 62                adc z80_c
003ED4  3  A0 08                ldy #8
003ED6  3  91 68                sta (z80_ix),y
003ED8  3  A0 0B                ldy #11
003EDA  3  B1 68                lda (z80_ix),y
003EDC  3  A0 08                ldy #8
003EDE  3  91 68                sta (z80_ix),y
003EE0  3  A0 0C                ldy #12
003EE2  3  B1 68                lda (z80_ix),y
003EE4  3  A0 09                ldy #9
003EE6  3  91 68                sta (z80_ix),y
003EE8  3  60           g00619: rts
003EE9  3               evnt07:
003EE9  3  A9 00                lda #0
003EEB  3  A0 0B                ldy #11
003EED  3  D1 68                cmp (z80_ix),y
003EEF  3  F0 03                beq *+5
003EF1  3  4C 11 3F             jmp h00088
003EF4  3  20 88 28             jsr cangu	; CANGOUP
003EF7  3  F0 03                beq :+
003EF9  3  4C 08 3F             jmp h00070
003EFC  3               :
003EFC  3  A0 08                ldy #8 		; SPRITEUP
003EFE  3  B1 68                lda (z80_ix),y
003F00  3  38                   sec
003F01  3  E9 02                sbc #2
003F03  3  91 68                sta (z80_ix),y
003F05  3  4C 0E 3F             jmp h00083
003F08  3  A9 01        h00070: lda #1
003F0A  3  A0 0B                ldy #11
003F0C  3  91 68                sta (z80_ix),y
003F0E  3  4C 2B 3F     h00083: jmp h00149
003F11  3  20 BD 28     h00088: jsr cangd	; CANGODOWN
003F14  3  F0 03                beq :+
003F16  3  4C 25 3F             jmp h00135
003F19  3               :
003F19  3  A0 08                ldy #8 		; SPRITEDOWN
003F1B  3  B1 68                lda (z80_ix),y
003F1D  3  18                   clc
003F1E  3  69 02                adc #2
003F20  3  91 68                sta (z80_ix),y
003F22  3  4C 2B 3F             jmp h00149
003F25  3  A9 00        h00135: lda #0
003F27  3  A0 0B                ldy #11
003F29  3  91 68                sta (z80_ix),y
003F2B  3  A9 06        h00149: lda #CUSTOM	; CUSTOM
003F2D  3  85 63                sta z80_b
003F2F  3  20 89 2A             jsr tded
003F32  3  C5 63                cmp z80_b
003F34  3  F0 03                beq :+
003F36  3  4C 53 3F             jmp h00232
003F39  3               :
003F39  3  A9 01                lda #1
003F3B  3  A0 0B                ldy #11
003F3D  3  D1 68                cmp (z80_ix),y
003F3F  3  F0 03                beq *+5
003F41  3  4C 4D 3F             jmp h00219
003F44  3  A9 00                lda #0
003F46  3  A0 0B                ldy #11
003F48  3  91 68                sta (z80_ix),y
003F4A  3  4C 53 3F             jmp h00232
003F4D  3  A9 01        h00219: lda #1
003F4F  3  A0 0B                ldy #11
003F51  3  91 68                sta (z80_ix),y
003F53  3  A9 05        h00232: lda #DEADLY	; DEADLY
003F55  3  85 63                sta z80_b
003F57  3  20 89 2A             jsr tded
003F5A  3  C5 63                cmp z80_b
003F5C  3  F0 03                beq :+
003F5E  3  4C 7B 3F             jmp h00316
003F61  3               :
003F61  3  A9 01                lda #1
003F63  3  A0 0B                ldy #11
003F65  3  D1 68                cmp (z80_ix),y
003F67  3  F0 03                beq *+5
003F69  3  4C 75 3F             jmp h00302
003F6C  3  A9 00                lda #0
003F6E  3  A0 0B                ldy #11
003F70  3  91 68                sta (z80_ix),y
003F72  3  4C 7B 3F             jmp h00316
003F75  3  A9 01        h00302: lda #1
003F77  3  A0 0B                ldy #11
003F79  3  91 68                sta (z80_ix),y
003F7B  3  A9 00        h00316: lda #0
003F7D  3  C5 rr                cmp vard
003F7F  3  F0 03                beq *+5
003F81  3  4C 89 3F             jmp h00344
003F84  3  A9 00                lda #0		; ANIMATE
003F86  3  20 3F 30             jsr animsp
003F89  3  A9 00        h00344: lda #0 	; COLLISION
003F8B  3  85 63                sta z80_b
003F8D  3  20 8A 30             jsr sktyp
003F90  3  B0 03                bcs :+
003F92  3  4C BD 3F             jmp h00459
003F95  3               :
003F95  3  A9 01                lda #1
003F97  3  85 rr                sta varj
003F99  3  A5 rr                lda skptr	; OTHER
003F9B  3  85 68                sta z80_x
003F9D  3  A5 rr                lda skptr+1
003F9F  3  85 69                sta z80_i
003FA1  3  A9 05                lda #5	; SPAWN
003FA3  3  85 62                sta z80_c
003FA5  3  A9 09                lda #9
003FA7  3  85 63                sta z80_b
003FA9  3  20 2C 24             jsr spawn
003FAC  3  A9 FF                lda #255	; REMOVE
003FAE  3  A0 05                ldy #5
003FB0  3  91 68                sta (z80_ix),y
003FB2  3  A9 08                lda #8	; SPAWN
003FB4  3  85 62                sta z80_c
003FB6  3  A9 07                lda #7
003FB8  3  85 63                sta z80_b
003FBA  3  20 2C 24             jsr spawn
003FBD  3  60           h00459: rts
003FBE  3               evnt08:
003FBE  3  A9 03                lda #3
003FC0  3  A0 06                ldy #6
003FC2  3  D1 68                cmp (z80_ix),y
003FC4  3  F0 03                beq *+5
003FC6  3  4C E2 3F             jmp i00078
003FC9  3  A9 00                lda #0		; ANIMATE
003FCB  3  20 3F 30             jsr animsp
003FCE  3  A9 05                lda #5
003FD0  3  A0 07                ldy #7
003FD2  3  D1 68                cmp (z80_ix),y
003FD4  3  B0 03                bcs *+5
003FD6  3  4C DC 3F             jmp i00062
003FD9  3  4C E2 3F             jmp i00078
003FDC  3  A9 FF        i00062: lda #255	; REMOVE
003FDE  3  A0 05                ldy #5
003FE0  3  91 68                sta (z80_ix),y
003FE2  3  A9 07        i00078: lda #7
003FE4  3  A0 06                ldy #6
003FE6  3  D1 68                cmp (z80_ix),y
003FE8  3  F0 03                beq *+5
003FEA  3  4C 1C 40             jmp i00200
003FED  3  A9 00                lda #0
003FEF  3  C5 rr                cmp vard
003FF1  3  F0 03                beq *+5
003FF3  3  4C FB 3F             jmp i00128
003FF6  3  A9 00                lda #0		; ANIMATE
003FF8  3  20 3F 30             jsr animsp
003FFB  3  A9 09        i00128: lda #9
003FFD  3  A0 08                ldy #8
003FFF  3  D1 68                cmp (z80_ix),y
004001  3  90 03                bcc *+5
004003  3  4C 18 40             jmp i00189
004006  3  A9 02                lda #2
004008  3  85 62                sta z80_c
00400A  3  A0 08                ldy #8
00400C  3  B1 68                lda (z80_ix),y
00400E  3  38                   sec
00400F  3  E5 62                sbc z80_c
004011  3  A0 08                ldy #8
004013  3  91 68                sta (z80_ix),y
004015  3  4C 1C 40             jmp i00200
004018  3  A9 01        i00189: lda #1 		; KILL
00401A  3  85 rr                sta deadf
00401C  3  A9 09        i00200: lda #9
00401E  3  A0 06                ldy #6
004020  3  D1 68                cmp (z80_ix),y
004022  3  F0 03                beq *+5
004024  3  4C 46 40             jmp i00288
004027  3  A9 00                lda #0
004029  3  C5 rr                cmp vara
00402B  3  F0 03                beq *+5
00402D  3  4C 46 40             jmp i00288
004030  3  A9 00                lda #0		; ANIMATE
004032  3  20 3F 30             jsr animsp
004035  3  A9 07                lda #7
004037  3  A0 07                ldy #7
004039  3  D1 68                cmp (z80_ix),y
00403B  3  F0 03                beq *+5
00403D  3  4C 46 40             jmp i00288
004040  3  A9 FF                lda #255	; REMOVE
004042  3  A0 05                ldy #5
004044  3  91 68                sta (z80_ix),y
004046  3  60           i00288: rts
004047  3               evnt09:
004047  3  A9 07                lda #7
004049  3  A0 05                ldy #5
00404B  3  D1 68                cmp (z80_ix),y
00404D  3  F0 03                beq *+5
00404F  3  4C 58 40             jmp j00037
004052  3  A9 00                lda #0
004054  3  A0 0B                ldy #11
004056  3  91 68                sta (z80_ix),y
004058  3  A9 00        j00037: lda #0
00405A  3  A0 05                ldy #5
00405C  3  D1 68                cmp (z80_ix),y
00405E  3  F0 03                beq *+5
004060  3  4C 6F 40             jmp j00087
004063  3  A5 rr                lda varo
004065  3  A0 08                ldy #8
004067  3  91 68                sta (z80_ix),y
004069  3  A5 rr                lda varp
00406B  3  A0 09                ldy #9
00406D  3  91 68                sta (z80_ix),y
00406F  3  A9 03        j00087: lda #3
004071  3  A0 05                ldy #5
004073  3  D1 68                cmp (z80_ix),y
004075  3  F0 03                beq *+5
004077  3  4C 86 40             jmp j00136
00407A  3  A9 00                lda #0
00407C  3  A0 0B                ldy #11
00407E  3  91 68                sta (z80_ix),y
004080  3  A9 00                lda #0
004082  3  A0 0A                ldy #10
004084  3  91 68                sta (z80_ix),y
004086  3  A9 06        j00136: lda #6
004088  3  A0 05                ldy #5
00408A  3  D1 68                cmp (z80_ix),y
00408C  3  F0 03                beq *+5
00408E  3  4C 95 40             jmp j00166
004091  3  A9 00                lda #0
004093  3  85 rr                sta varr
004095  3  A9 01        j00166: lda #1
004097  3  A0 05                ldy #5
004099  3  D1 68                cmp (z80_ix),y
00409B  3  F0 03                beq *+5
00409D  3  4C A6 40             jmp j00201
0040A0  3  A9 00                lda #0
0040A2  3  A0 0C                ldy #12
0040A4  3  91 68                sta (z80_ix),y
0040A6  3  60           j00201: rts
0040A7  3               evnt10:
0040A7  3  A9 16                lda #22
0040A9  3  C5 rr                cmp scno
0040AB  3  90 03                bcc *+5
0040AD  3  4C B7 40             jmp k00031
0040B0  3  A9 01                lda #1
0040B2  3  85 rr                sta vark
0040B4  3  4C CB 40             jmp k00069
0040B7  3  A9 13        k00031: lda #19
0040B9  3  C5 rr                cmp scno
0040BB  3  F0 03                beq *+5
0040BD  3  4C C7 40             jmp k00061
0040C0  3  A9 01                lda #1
0040C2  3  85 rr                sta vark
0040C4  3  4C CB 40             jmp k00069
0040C7  3  A9 00        k00061: lda #0
0040C9  3  85 rr                sta vark
0040CB  3  A9 00        k00069: lda #0
0040CD  3  C5 rr                cmp vart
0040CF  3  F0 03                beq *+5
0040D1  3  4C EA 40             jmp k00131
0040D4  3  A9 00                lda #0
0040D6  3  C5 rr                cmp vars
0040D8  3  F0 03                beq *+5
0040DA  3  4C EA 40             jmp k00131
0040DD  3  A9 16                lda #22
0040DF  3  85 rr                sta chary
0040E1  3  A9 03                lda #3
0040E3  3  85 rr                sta charx
0040E5  3  A9 0A                lda #10  	; MESSAGE
0040E7  3  20 E4 2B             jsr dmsg
0040EA  3  A9 01        k00131: lda #1
0040EC  3  C5 rr                cmp vart
0040EE  3  F0 03                beq *+5
0040F0  3  4C 09 41             jmp k00192
0040F3  3  A9 00                lda #0
0040F5  3  C5 rr                cmp vars
0040F7  3  F0 03                beq *+5
0040F9  3  4C 09 41             jmp k00192
0040FC  3  A9 16                lda #22
0040FE  3  85 rr                sta chary
004100  3  A9 03                lda #3
004102  3  85 rr                sta charx
004104  3  A9 09                lda #9  	; MESSAGE
004106  3  20 E4 2B             jsr dmsg
004109  3  A9 00        k00192: lda #0
00410B  3  C5 rr                cmp vart
00410D  3  F0 03                beq *+5
00410F  3  4C 31 41             jmp k00270
004112  3  A9 01                lda #1
004114  3  C5 rr                cmp vars
004116  3  F0 03                beq *+5
004118  3  4C 31 41             jmp k00270
00411B  3  A9 00                lda #0
00411D  3  C5 rr                cmp varc
00411F  3  F0 03                beq *+5
004121  3  4C 31 41             jmp k00270
004124  3  A9 16                lda #22
004126  3  85 rr                sta chary
004128  3  A9 02                lda #2
00412A  3  85 rr                sta charx
00412C  3  A9 0B                lda #11  	; MESSAGE
00412E  3  20 E4 2B             jsr dmsg
004131  3  A9 01        k00270: lda #1
004133  3  C5 rr                cmp vars
004135  3  F0 03                beq *+5
004137  3  4C 50 41             jmp k00332
00413A  3  A9 0A                lda #10
00413C  3  C5 rr                cmp varc
00413E  3  F0 03                beq *+5
004140  3  4C 50 41             jmp k00332
004143  3  A9 16                lda #22
004145  3  85 rr                sta chary
004147  3  A9 02                lda #2
004149  3  85 rr                sta charx
00414B  3  A9 0D                lda #13  	; MESSAGE
00414D  3  20 E4 2B             jsr dmsg
004150  3  A9 02        k00332: lda #2
004152  3  C5 rr                cmp vars
004154  3  F0 03                beq *+5
004156  3  4C 6F 41             jmp k00394
004159  3  A9 0A                lda #10
00415B  3  C5 rr                cmp varc
00415D  3  F0 03                beq *+5
00415F  3  4C 6F 41             jmp k00394
004162  3  A9 16                lda #22
004164  3  85 rr                sta chary
004166  3  A9 02                lda #2
004168  3  85 rr                sta charx
00416A  3  A9 0C                lda #12  	; MESSAGE
00416C  3  20 E4 2B             jsr dmsg
00416F  3  A9 03        k00394: lda #3
004171  3  C5 rr                cmp vars
004173  3  F0 03                beq *+5
004175  3  4C 98 41             jmp k00475
004178  3  A9 00                lda #0
00417A  3  C5 rr                cmp vari
00417C  3  90 03                bcc *+5
00417E  3  4C 94 41             jmp k00464
004181  3  A9 00                lda #0
004183  3  C5 rr                cmp vard
004185  3  F0 03                beq *+5
004187  3  4C 91 41             jmp k00459
00418A  3  A5 rr                lda vari
00418C  3  38                   sec
00418D  3  E9 01                sbc #1
00418F  3  85 rr                sta vari
004191  3  4C 98 41     k00459: jmp k00475
004194  3  A9 01        k00464: lda #1		; ENDGAME
004196  3  85 rr                sta gamwon
004198  3  A9 01        k00475: lda #1
00419A  3  C5 rr                cmp vara
00419C  3  F0 03                beq *+5
00419E  3  4C B8 41             jmp k00537
0041A1  3  A9 00                lda #0
0041A3  3  85 rr                sta vara
0041A5  3  A9 FE                lda #254
0041A7  3  C5 rr                cmp varb
0041A9  3  B0 03                bcs *+5
0041AB  3  4C B5 41             jmp k00532
0041AE  3  A5 rr                lda varb
0041B0  3  18                   clc
0041B1  3  69 01                adc #1
0041B3  3  85 rr                sta varb
0041B5  3  4C BF 41     k00532: jmp k00552
0041B8  3  A5 rr        k00537: lda vara
0041BA  3  18                   clc
0041BB  3  69 01                adc #1
0041BD  3  85 rr                sta vara
0041BF  3  A9 03        k00552: lda #3
0041C1  3  C5 rr                cmp vard
0041C3  3  F0 03                beq *+5
0041C5  3  4C CF 41             jmp k00582
0041C8  3  A9 00                lda #0
0041CA  3  85 rr                sta vard
0041CC  3  4C D6 41             jmp k00597
0041CF  3  A5 rr        k00582: lda vard
0041D1  3  18                   clc
0041D2  3  69 01                adc #1
0041D4  3  85 rr                sta vard
0041D6  3  60           k00597: rts
0041D7  3               evnt11:
0041D7  3  60                   rts
0041D8  3               evnt12:
0041D8  3  20 EE 20             jsr cls		; CLS
0041DB  3  A9 01                lda #1		; PRINTMODE
0041DD  3  85 rr                sta prtmod
0041DF  3  A9 03                lda #3		; AT
0041E1  3  85 rr                sta chary
0041E3  3  A9 06                lda #6
0041E5  3  85 rr                sta charx
0041E7  3  A9 22                lda #34		; PRINT
0041E9  3  20 E4 2B             jsr dmsg
0041EC  3  A9 00                lda #0		; PRINTMODE
0041EE  3  85 rr                sta prtmod
0041F0  3  A9 07                lda #7		; AT
0041F2  3  85 rr                sta chary
0041F4  3  A9 06                lda #6
0041F6  3  85 rr                sta charx
0041F8  3  A9 23                lda #35		; PRINT
0041FA  3  20 E4 2B             jsr dmsg
0041FD  3  A9 0A                lda #10		; AT
0041FF  3  85 rr                sta chary
004201  3  A9 0A                lda #10
004203  3  85 rr                sta charx
004205  3  A9 24                lda #36		; PRINT
004207  3  20 E4 2B             jsr dmsg
00420A  3  A9 0C                lda #12		; AT
00420C  3  85 rr                sta chary
00420E  3  A9 0A                lda #10
004210  3  85 rr                sta charx
004212  3  A9 25                lda #37		; PRINT
004214  3  20 E4 2B             jsr dmsg
004217  3  A9 0E                lda #14		; AT
004219  3  85 rr                sta chary
00421B  3  A9 0A                lda #10
00421D  3  85 rr                sta charx
00421F  3  A9 26                lda #38		; PRINT
004221  3  20 E4 2B             jsr dmsg
004224  3               
004224  3               rtcon:			; CONTROLMENU
004224  3  20 84 20             jsr vsync
004227  3  A9 00                lda #0
004229  3  85 rr                sta contrl
00422B  3  AD 9D 9D             lda keys+7
00422E  3  20 20 9E             jsr ktest
004231  3  90 18                bcc rtcon1
004233  3  A9 01                lda #1
004235  3  85 rr                sta contrl
004237  3  AD 9E 9D             lda keys+8
00423A  3  20 20 9E             jsr ktest
00423D  3  90 0C                bcc rtcon1
00423F  3  A9 02                lda #2
004241  3  85 rr                sta contrl
004243  3  AD 9F 9D             lda keys+9
004246  3  20 20 9E             jsr ktest
004249  3  B0 D9                bcs rtcon
00424B  3                       rtcon1:
00424B  3  60                   rts
00424C  3               evnt13:
00424C  3  A9 02                lda #2
00424E  3  85 rr                sta varm
004250  3  A9 00                lda #0
004252  3  85 rr                sta varj
004254  3  A9 58                lda #88
004256  3  85 rr                sta varo
004258  3  A9 58                lda #88
00425A  3  85 rr                sta varp
00425C  3  A9 00                lda #0
00425E  3  85 rr                sta varc
004260  3  A9 00                lda #0
004262  3  85 rr                sta vars
004264  3  A9 01                lda #1
004266  3  85 rr                sta vart
004268  3  A9 0F                lda #15
00426A  3  85 rr                sta varh
00426C  3  A9 C8                lda #200
00426E  3  85 rr                sta vari
004270  3  A9 03                lda #3
004272  3  85 rr                sta numlif
004274  3  20 EE 20             jsr cls		; CLS
004277  3  A9 00                lda #0
004279  3  85 rr                sta chary
00427B  3  A9 00                lda #0
00427D  3  85 rr                sta charx
00427F  3  A9 02                lda #2  	; MESSAGE
004281  3  20 E4 2B             jsr dmsg
004284  3  A9 04                lda #4  	; MESSAGE
004286  3  20 E4 2B             jsr dmsg
004289  3  A9 04                lda #4  	; MESSAGE
00428B  3  20 E4 2B             jsr dmsg
00428E  3  A9 05                lda #5  	; MESSAGE
004290  3  20 E4 2B             jsr dmsg
004293  3  A9 04                lda #4 	; REPEAT
004295  3  85 rr                sta loopa
004297  3  A9 04        n00160: lda #4  	; MESSAGE
004299  3  20 E4 2B             jsr dmsg
00429C  3  C6 rr                dec loopa	; ENDREPEAT
00429E  3  F0 03                beq :+
0042A0  3  4C 97 42             jmp n00160
0042A3  3               :
0042A3  3  A9 05                lda #5  	; MESSAGE
0042A5  3  20 E4 2B             jsr dmsg
0042A8  3  A9 03                lda #3 	; REPEAT
0042AA  3  85 rr                sta loopa
0042AC  3  A9 04        n00210: lda #4  	; MESSAGE
0042AE  3  20 E4 2B             jsr dmsg
0042B1  3  C6 rr                dec loopa	; ENDREPEAT
0042B3  3  F0 03                beq :+
0042B5  3  4C AC 42             jmp n00210
0042B8  3               :
0042B8  3  A9 05                lda #5  	; MESSAGE
0042BA  3  20 E4 2B             jsr dmsg
0042BD  3  A9 04                lda #4 	; REPEAT
0042BF  3  85 rr                sta loopa
0042C1  3  A9 04        n00259: lda #4  	; MESSAGE
0042C3  3  20 E4 2B             jsr dmsg
0042C6  3  C6 rr                dec loopa	; ENDREPEAT
0042C8  3  F0 03                beq :+
0042CA  3  4C C1 42             jmp n00259
0042CD  3               :
0042CD  3  A9 05                lda #5  	; MESSAGE
0042CF  3  20 E4 2B             jsr dmsg
0042D2  3  A9 04                lda #4  	; MESSAGE
0042D4  3  20 E4 2B             jsr dmsg
0042D7  3  A9 04                lda #4  	; MESSAGE
0042D9  3  20 E4 2B             jsr dmsg
0042DC  3  A9 02                lda #2  	; MESSAGE
0042DE  3  20 E4 2B             jsr dmsg
0042E1  3  A9 04                lda #4  	; MESSAGE
0042E3  3  20 E4 2B             jsr dmsg
0042E6  3  A9 04                lda #4  	; MESSAGE
0042E8  3  20 E4 2B             jsr dmsg
0042EB  3  A9 02                lda #2  	; MESSAGE
0042ED  3  20 E4 2B             jsr dmsg
0042F0  3  A9 00                lda #0
0042F2  3  85 rr                sta chary
0042F4  3  A9 00                lda #0
0042F6  3  85 rr                sta charx
0042F8  3  A9 06                lda #6  	; MESSAGE
0042FA  3  20 E4 2B             jsr dmsg
0042FD  3  A9 00                lda #0
0042FF  3  85 rr                sta chary
004301  3  A9 1F                lda #31
004303  3  85 rr                sta charx
004305  3  A9 06                lda #6  	; MESSAGE
004307  3  20 E4 2B             jsr dmsg
00430A  3  A9 17                lda #23
00430C  3  85 rr                sta chary
00430E  3  A9 1F                lda #31
004310  3  85 rr                sta charx
004312  3  A9 06                lda #6  	; MESSAGE
004314  3  20 E4 2B             jsr dmsg
004317  3  A9 17                lda #23
004319  3  85 rr                sta chary
00431B  3  A9 00                lda #0
00431D  3  85 rr                sta charx
00431F  3  A9 06                lda #6  	; MESSAGE
004321  3  20 E4 2B             jsr dmsg
004324  3  A9 14                lda #20
004326  3  85 rr                sta chary
004328  3  A9 00                lda #0
00432A  3  85 rr                sta charx
00432C  3  A9 06                lda #6  	; MESSAGE
00432E  3  20 E4 2B             jsr dmsg
004331  3  A9 14                lda #20
004333  3  85 rr                sta chary
004335  3  A9 1F                lda #31
004337  3  85 rr                sta charx
004339  3  A9 06                lda #6  	; MESSAGE
00433B  3  20 E4 2B             jsr dmsg
00433E  3  A9 15                lda #21
004340  3  85 rr                sta chary
004342  3  A9 04                lda #4
004344  3  85 rr                sta charx
004346  3  A9 07                lda #7  	; MESSAGE
004348  3  20 E4 2B             jsr dmsg
00434B  3  A9 15                lda #21
00434D  3  85 rr                sta chary
00434F  3  A9 0A                lda #10
004351  3  85 rr                sta charx
004353  3  A5 rr                lda numlif	; DISPLAY
004355  3  20 1A 31             jsr disply
004358  3  A9 15                lda #21
00435A  3  85 rr                sta chary
00435C  3  A9 14                lda #20
00435E  3  85 rr                sta charx
004360  3  A9 08                lda #8  	; MESSAGE
004362  3  20 E4 2B             jsr dmsg
004365  3  A9 15                lda #21
004367  3  85 rr                sta chary
004369  3  A9 1B                lda #27
00436B  3  85 rr                sta charx
00436D  3  A5 rr                lda varc	; DISPLAY
00436F  3  20 1A 31             jsr disply
004372  3  60                   rts
004373  3               evnt14:
004373  3  60                   rts
004374  3               evnt15:
004374  3  A9 00                lda #0
004376  3  A0 05                ldy #5
004378  3  D1 68                cmp (z80_ix),y
00437A  3  F0 03                beq *+5
00437C  3  4C 9F 43             jmp p00094
00437F  3  A9 01                lda #1
004381  3  85 rr                sta varj
004383  3  A9 05                lda #5	; SPAWN
004385  3  85 62                sta z80_c
004387  3  A9 09                lda #9
004389  3  85 63                sta z80_b
00438B  3  20 2C 24             jsr spawn
00438E  3  A9 FF                lda #255	; REMOVE
004390  3  A0 05                ldy #5
004392  3  91 68                sta (z80_ix),y
004394  3  A9 08                lda #8	; SPAWN
004396  3  85 62                sta z80_c
004398  3  A9 07                lda #7
00439A  3  85 63                sta z80_b
00439C  3  20 2C 24             jsr spawn
00439F  3  60           p00094: rts
0043A0  3               evnt16:
0043A0  3  A9 0A                lda #10 	; DELAY
0043A2  3  20 2F 20             jsr delay
0043A5  3  A9 00                lda #0
0043A7  3  85 rr                sta varj
0043A9  3  A9 00                lda #0
0043AB  3  85 rr                sta varb
0043AD  3  A5 rr                lda varo
0043AF  3  A0 08                ldy #8
0043B1  3  91 68                sta (z80_ix),y
0043B3  3  A5 rr                lda varp
0043B5  3  A0 09                ldy #9
0043B7  3  91 68                sta (z80_ix),y
0043B9  3  A9 0A                lda #10
0043BB  3  85 rr                sta chary
0043BD  3  A9 08                lda #8
0043BF  3  85 rr                sta charx
0043C1  3  A9 0E                lda #14  	; MESSAGE
0043C3  3  20 E4 2B             jsr dmsg
0043C6  3  A5 rr                lda numlif
0043C8  3  38                   sec
0043C9  3  E9 01                sbc #1
0043CB  3  85 rr                sta numlif
0043CD  3  A9 32                lda #50 	; DELAY
0043CF  3  20 2F 20             jsr delay
0043D2  3  60                   rts
0043D3  3               evnt17:
0043D3  3  A9 1F                lda #31
0043D5  3  85 rr                sta varm
0043D7  3  A9 32                lda #50 	; DELAY
0043D9  3  20 2F 20             jsr delay
0043DC  3  60                   rts
0043DD  3               evnt18:
0043DD  3  A9 5A                lda #90 	; DELAY
0043DF  3  20 2F 20             jsr delay
0043E2  3  A9 05                lda #5
0043E4  3  85 rr                sta chary
0043E6  3  A9 08                lda #8
0043E8  3  85 rr                sta charx
0043EA  3  A9 13                lda #19  	; MESSAGE
0043EC  3  20 E4 2B             jsr dmsg
0043EF  3  A9 5A                lda #90 	; DELAY
0043F1  3  20 2F 20             jsr delay
0043F4  3  A9 08                lda #8
0043F6  3  85 rr                sta chary
0043F8  3  A9 04                lda #4
0043FA  3  85 rr                sta charx
0043FC  3  A9 14                lda #20  	; MESSAGE
0043FE  3  20 E4 2B             jsr dmsg
004401  3  A9 5A                lda #90 	; DELAY
004403  3  20 2F 20             jsr delay
004406  3  A9 0A                lda #10
004408  3  85 rr                sta chary
00440A  3  A9 07                lda #7
00440C  3  85 rr                sta charx
00440E  3  A9 15                lda #21  	; MESSAGE
004410  3  20 E4 2B             jsr dmsg
004413  3  A9 5A                lda #90 	; DELAY
004415  3  20 2F 20             jsr delay
004418  3  A9 0C                lda #12
00441A  3  85 rr                sta chary
00441C  3  A9 07                lda #7
00441E  3  85 rr                sta charx
004420  3  A9 16                lda #22  	; MESSAGE
004422  3  20 E4 2B             jsr dmsg
004425  3  A9 5A                lda #90 	; DELAY
004427  3  20 2F 20             jsr delay
00442A  3  A9 0E                lda #14
00442C  3  85 rr                sta chary
00442E  3  A9 05                lda #5
004430  3  85 rr                sta charx
004432  3  A9 17                lda #23  	; MESSAGE
004434  3  20 E4 2B             jsr dmsg
004437  3  A9 C8                lda #200 	; DELAY
004439  3  20 2F 20             jsr delay
00443C  3  A9 1E                lda #30 	; DELAY
00443E  3  20 2F 20             jsr delay
004441  3  A9 09                lda #9
004443  3  85 rr                sta chary
004445  3  A9 0A                lda #10
004447  3  85 rr                sta charx
004449  3  A9 21                lda #33  	; MESSAGE
00444B  3  20 E4 2B             jsr dmsg
00444E  3  A9 5A                lda #90 	; DELAY
004450  3  20 2F 20             jsr delay
004453  3  A9 0B                lda #11
004455  3  85 rr                sta chary
004457  3  A9 0C                lda #12
004459  3  85 rr                sta charx
00445B  3  A9 1F                lda #31  	; MESSAGE
00445D  3  20 E4 2B             jsr dmsg
004460  3  A9 5A                lda #90 	; DELAY
004462  3  20 2F 20             jsr delay
004465  3  A9 0D                lda #13
004467  3  85 rr                sta chary
004469  3  A9 07                lda #7
00446B  3  85 rr                sta charx
00446D  3  A9 20                lda #32  	; MESSAGE
00446F  3  20 E4 2B             jsr dmsg
004472  3  A9 64                lda #100 	; DELAY
004474  3  20 2F 20             jsr delay
004477  3  60                   rts
004478  3               evnt19:
004478  3  60                   rts
004479  3               evnt20:
004479  3  60                   rts
00447A  3  60           ptcusr: rts
00447B  3               msgdat:
00447B  3  47 41 4D 45          .byte "GAMEfOVER",141
00447F  3  66 4F 56 45  
004483  3  52 8D        
004485  3  47 45 54 20          .byte "GET READY",141
004489  3  52 45 41 44  
00448D  3  59 8D        
00448F  3  61 62 62 62          .byte "abbbbbcbbbbbcbbbbbbcbbbbbcbbbbba",141
004493  3  62 62 63 62  
004497  3  62 62 62 62  
0044B0  3  61 69 69 69          .byte "aiiiiijiiiiijiiiiiijiiiiijiiiiia",141
0044B4  3  69 69 6A 69  
0044B8  3  69 69 69 69  
0044D1  3  64 66 66 66          .byte "dffffffffffffffffffffffffffffffg",141
0044D5  3  66 66 66 66  
0044D9  3  66 66 66 66  
0044F2  3  65 66 66 66          .byte "effffffffffffffffffffffffffffffh",141
0044F6  3  66 66 66 66  
0044FA  3  66 66 66 66  
004513  3  61 8D                .byte "a",141
004515  3  4C 49 56 45          .byte "LIVESk",141
004519  3  53 6B 8D     
00451C  3  42 4C 4F 4F          .byte "BLOOMSk",141
004520  3  4D 53 6B 8D  
004524  3  66 66 66 46          .byte "fffFINDfTHEfGAIAfSTONEfffff",141
004528  3  49 4E 44 66  
00452C  3  54 48 45 66  
004540  3  66 66 4E 4F          .byte "ffNOWfFINDfTHEfMOONfPOOLff",141
004544  3  57 66 46 49  
004548  3  4E 44 66 54  
00455B  3  66 66 4E 4F          .byte "ffNOWfFINDfTENfMOONfBLOOMSff",141
00455F  3  57 66 46 49  
004563  3  4E 44 66 54  
004578  3  66 66 66 66          .byte "ffffRETURNfTHEfGAIAfSTONEffff",141
00457C  3  52 45 54 55  
004580  3  52 4E 66 54  
004596  3  66 54 41 4B          .byte "fTAKEfTHEfBLOOMSfTOfTHEfPOOLf",141
00459A  3  45 66 54 48  
00459E  3  45 66 42 4C  
0045B4  3  4F 55 43 48          .byte "OUCHfTHATfHURTrr",141
0045B8  3  66 54 48 41  
0045BC  3  54 66 48 55  
0045C5  3  6C 6D 8D             .byte "lm",141
0045C8  3  6F 6E 8D             .byte "on",141
0045CB  3  71 8D                .byte "q",141
0045CD  3  70 8D                .byte "p",141
0045CF  3  43 4F 4E 47          .byte "CONGRATULATIONSrr",141
0045D3  3  52 41 54 55  
0045D7  3  4C 41 54 49  
0045E1  3  4E 49 58 59          .byte "NIXYfHASfSAVEDfTHEfGLADE",141
0045E5  3  66 48 41 53  
0045E9  3  66 53 41 56  
0045FA  3  46 52 4F 4D          .byte "FROMfCERTAINfDOOM",141
0045FE  3  66 43 45 52  
004602  3  54 41 49 4E  
00460C  3  42 55 54 66          .byte "BUTfWHEREfDIDfTHE",141
004610  3  57 48 45 52  
004614  3  45 66 44 49  
00461E  3  43 4F 52 52          .byte "CORRUPTIONfCOMEfFROM?",141
004622  3  55 50 54 49  
004626  3  4F 4E 66 43  
004634  3  61 66 4B 45          .byte "afKEYBOARDfa",141
004638  3  59 42 4F 41  
00463C  3  52 44 66 61  
004641  3  61 66 4B 45          .byte "afKEMPSTONfa",141
004645  3  4D 50 53 54  
004649  3  4F 4E 66 61  
00464E  3  61 66 53 49          .byte "afSINCLAIRfa",141
004652  3  4E 43 4C 41  
004656  3  49 52 66 61  
00465B  3  73 74 8D             .byte "st",141
00465E  3  43 48 41 4E          .byte "CHANGEKEYS",141
004662  3  47 45 4B 45  
004666  3  59 53 8D     
004669  3  66 50 4C 41          .byte "fPLAYGAMEf",141
00466D  3  59 47 41 4D  
004671  3  45 66 8D     
004674  3  50 52 45 53          .byte "PRESSfANYfKEY",141
004678  3  53 66 41 4E  
00467C  3  59 66 4B 45  
004682  3  4E 49 58 59          .byte "NIXYf2",141
004686  3  66 32 8D     
004689  3  54 48 45 66          .byte "THEfSEEDSfOFfDOOM",141
00468D  3  53 45 45 44  
004691  3  53 66 4F 46  
00469B  3  43 4F 4D 49          .byte "COMINGfSOON",141
00469F  3  4E 47 66 53  
0046A3  3  4F 4F 4E 8D  
0046A7  3  4E 49 58 59          .byte "NIXYfTHEfGLADfSPRIT",197
0046AB  3  66 54 48 45  
0046AF  3  66 47 4C 41  
0046BB  3  53 45 4C 45          .byte "SELECTfINPUTfDEVIC",197
0046BF  3  43 54 66 49  
0046C3  3  4E 50 55 54  
0046CE  3  31 2E 4B 45          .byte "1.KEYBOAR",196
0046D2  3  59 42 4F 41  
0046D6  3  52 C4        
0046D8  3  31 2E 4A 4F          .byte "1.JOYSTICK",177
0046DC  3  59 53 54 49  
0046E0  3  43 4B B1     
0046E3  3  32 2E 4A 4F          .byte "2.JOYSTICK",178
0046E7  3  59 53 54 49  
0046EB  3  43 4B B2     
0046EE  3               nummsg:
0046EE  3  27                   .byte 39
0046EF  3               chgfx:
0046EF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0046F3  3  00 00 00 00  
0046F7  3  61 D4 D0 66          .byte 97,212,208,102,13,77,6,8
0046FB  3  0D 4D 06 08  
0046FF  3  86 29 0D 86          .byte 134,41,13,134,48,73,104,50
004703  3  30 49 68 32  
004707  3  02 80 08 00          .byte 2,128,8,0,64,1,0,16
00470B  3  40 01 00 10  
00470F  3  60 EE EE 06          .byte 96,238,238,6,112,119,55,6
004713  3  70 77 37 06  
004717  3  E0 EE CE 0C          .byte 224,238,206,12,96,119,119,6
00471B  3  60 77 77 06  
00471F  3  60 AE EA 06          .byte 96,174,234,6,112,87,53,6
004723  3  70 57 35 06  
004727  3  60 AE CA 04          .byte 96,174,202,4,112,86,37,3
00472B  3  70 56 25 03  
00472F  3  60 6C 0E 2E          .byte 96,108,14,46,0,11,3,0
004733  3  00 0B 03 00  
004737  3  00 06 06 00          .byte 0,6,6,0,8,99,103,7
00473B  3  08 63 67 07  
00473F  3  00 C0 D0 00          .byte 0,192,208,0,100,112,118,6
004743  3  64 70 76 06  
004747  3  60 E6 E6 00          .byte 96,230,230,0,8,96,96,0
00474B  3  08 60 60 00  
00474F  3  60 6C 0A 2E          .byte 96,108,10,46,0,11,3,0
004753  3  00 0B 03 00  
004757  3  00 03 03 08          .byte 0,3,3,8,0,99,101,7
00475B  3  00 63 65 07  
00475F  3  00 C0 D0 00          .byte 0,192,208,0,100,80,118,6
004763  3  64 50 76 06  
004767  3  60 A6 E6 00          .byte 96,166,230,0,8,96,96,0
00476B  3  08 60 60 00  
00476F  3  60 F9 9E 9F          .byte 96,249,158,159,255,255,253,255
004773  3  FF FF FD FF  
004777  3  60 F9 FF F3          .byte 96,249,255,243,225,97,243,255
00477B  3  E1 61 F3 FF  
00477F  3  60 F9 FF BF          .byte 96,249,255,191,251,255,239,255
004783  3  FB FF EF FF  
004787  3  08 00 00 00          .byte 8,0,0,0,0,64,2,0
00478B  3  00 40 02 00  
00478F  3  38 74 DC F0          .byte 56,116,220,240,164,109,7,1
004793  3  A4 6D 07 01  
004797  3  0C 16 3D A3          .byte 12,22,61,163,202,112,128,0
00479B  3  CA 70 80 00  
00479F  3  00 1C 3E 63          .byte 0,28,62,99,73,44,4,12
0047A3  3  49 2C 04 0C  
0047A7  3  18 2C 3C 7A          .byte 24,44,60,122,70,18,24,56
0047AB  3  46 12 18 38  
0047AF  3  00 1E 3F 61          .byte 0,30,63,97,77,42,24,24
0047B3  3  4D 2A 18 18  
0047B7  3  00 CC 32 28          .byte 0,204,50,40,20,20,16,32
0047BB  3  14 14 10 20  
0047BF  3  00 33 4E 12          .byte 0,51,78,18,36,36,4,0
0047C3  3  24 24 04 00  
0047C7  3  00 00 40 A6          .byte 0,0,64,166,41,84,16,16
0047CB  3  29 54 10 10  
0047CF  3  00 00 00 00          .byte 0,0,0,0,8,9,37,21
0047D3  3  08 09 25 15  
0047D7  3  00 00 20 A0          .byte 0,0,32,160,146,84,85,85
0047DB  3  92 54 55 55  
0047DF  3  00 38 CE 33          .byte 0,56,206,51,29,13,7,1
0047E3  3  1D 0D 07 01  
0047E7  3  00 1C 33 6C          .byte 0,28,51,108,220,184,224,0
0047EB  3  DC B8 E0 00  
0047EF  3  01 01 C1 30          .byte 1,1,193,48,13,7,3,0
0047F3  3  0D 07 03 00  
0047F7  3  00 80 83 8C          .byte 0,128,131,140,80,224,192,128
0047FB  3  50 E0 C0 80  
0047FF  3  00 80 80 80          .byte 0,128,128,128,0,128,128,128
004803  3  00 80 80 80  
004807  3  01 01 01 00          .byte 1,1,1,0,1,1,1,0
00480B  3  01 01 01 00  
00480F  3  00 6B DD 77          .byte 0,107,221,119,18,64,2,64
004813  3  12 40 02 40  
004817  3  00 00 00 18          .byte 0,0,0,24,164,36,194,7
00481B  3  A4 24 C2 07  
00481F  3  00 00 00 18          .byte 0,0,0,24,37,68,82,224
004823  3  25 44 52 E0  
004827  3  18 1C 0B 10          .byte 24,28,11,16,24,24,8,16
00482B  3  18 18 08 10  
00482F  3  18 18 08 D0          .byte 24,24,8,208,56,24,8,16
004833  3  38 18 08 10  
004837  3  18 18 08 10          .byte 24,24,8,16,8,0,8,0
00483B  3  08 00 08 00  
00483F  3  00 08 00 08          .byte 0,8,0,8,16,8,24,24
004843  3  10 08 18 18  
004847  3  4C 14 0C 54          .byte 76,20,12,84,12,20,76,16
00484B  3  0C 14 4C 10  
00484F  3  01 01 01 00          .byte 1,1,1,0,29,35,41,198
004853  3  1D 23 29 C6  
004857  3  00 80 80 80          .byte 0,128,128,128,0,156,178,201
00485B  3  00 9C B2 C9  
00485F  3  00 00 00 00          .byte 0,0,0,0,0,57,127,198
004863  3  00 39 7F C6  
004867  3  00 01 03 1F          .byte 0,1,3,31,124,241,198,24
00486B  3  7C F1 C6 18  
00486F  3  80 C0 E0 7C          .byte 128,192,224,124,31,195,48,140
004873  3  1F C3 30 8C  
004877  3  00 00 00 00          .byte 0,0,0,0,192,248,60,131
00487B  3  C0 F8 3C 83  
00487F  3  55 6B 55 AB          .byte 85,107,85,171,213,235,46,50
004883  3  D5 EB 2E 32  
004887  3  DD EF FD AB          .byte 221,239,253,171,253,191,245,239
00488B  3  FD BF F5 EF  
00488F  3  DD EF FD AB          .byte 221,239,253,171,253,191,245,239
004893  3  FD BF F5 EF  
004897  3  01 EE 99 FF          .byte 1,238,153,255,85,170,21,0
00489B  3  55 AA 15 00  
00489F  3  60 E0 E8 02          .byte 96,224,232,2,112,123,75,120
0048A3  3  70 7B 4B 78  
0048A7  3  00 0E 0E 2E          .byte 0,14,14,46,0,119,87,118
0048AB  3  00 77 57 76  
0048AF  3  00 80 60 BF          .byte 0,128,96,191,217,102,157,0
0048B3  3  D9 66 9D 00  
0048B7  3  DD FF CD C7          .byte 221,255,205,199,197,191,245,239
0048BB  3  C5 BF F5 EF  
0048BF  3  00 00 30 F0          .byte 0,0,48,240,208,224,128,0
0048C3  3  D0 E0 80 00  
0048C7  3  1C 1F 17 09          .byte 28,31,23,9,6,1,0,0
0048CB  3  06 01 00 00  
0048CF  3  84 11 40 05          .byte 132,17,64,5,16,129,4,32
0048D3  3  10 81 04 20  
0048D7  3  C0 50 88 B0          .byte 192,80,136,176,18,141,180,19
0048DB  3  12 8D B4 13  
0048DF  3  C6 5A 89 B6          .byte 198,90,137,182,18,141,180,19
0048E3  3  12 8D B4 13  
0048E7  3  06 0A 69 26          .byte 6,10,105,38,26,197,180,19
0048EB  3  1A C5 B4 13  
0048EF  3  C0 56 02 58          .byte 192,86,2,88,10,96,43,1
0048F3  3  0A 60 2B 01  
0048F7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0048FB  3  00 00 00 00  
0048FF  3  4C 14 00 54          .byte 76,20,0,84,0,16,0,0
004903  3  00 10 00 00  
004907  3  E0 B8 FC 9E          .byte 224,184,252,158,159,253,223,251
00490B  3  9F FD DF FB  
00490F  3  0F 3F 7D EF          .byte 15,63,125,239,127,251,191,255
004913  3  7F FB BF FF  
004917  3  12 40 12 40          .byte 18,64,18,64,2,0,0,0
00491B  3  02 00 00 00  
00491F  3  FF F5 F7 EA          .byte 255,245,247,234,156,248,176,224
004923  3  9C F8 B0 E0  
004927  3  FF AF EF 77          .byte 255,175,239,119,57,31,13,7
00492B  3  39 1F 0D 07  
00492F  3  07 0D 1F 39          .byte 7,13,31,57,119,235,175,255
004933  3  77 EB AF FF  
004937  3  E0 B0 F8 9C          .byte 224,176,248,156,238,215,181,255
00493B  3  EE D7 B5 FF  
00493F  3  9A 00 A4 00          .byte 154,0,164,0,1,8,64,0
004943  3  01 08 40 00  
004947  3  00 00 B8 7C          .byte 0,0,184,124,190,156,64,60
00494B  3  BE 9C 40 3C  
00494F  3  00 00 1D 3E          .byte 0,0,29,62,125,57,2,60
004953  3  7D 39 02 3C  
004957  3  00 00 C6 29          .byte 0,0,198,41,16,169,70,0
00495B  3  10 A9 46 00  
00495F  3  82 00 10 00          .byte 130,0,16,0,1,8,0,64
004963  3  01 08 00 40  
004967  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00496B  3  00 00 00 00  
00496F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004973  3  00 00 00 00  
004977  3  18 18 08 10          .byte 24,24,8,16,24,24,8,16
00497B  3  18 18 08 10  
00497F  3  93 54 20 20          .byte 147,84,32,32,32,16,146,84
004983  3  20 10 92 54  
004987  3  00 00 10 BA          .byte 0,0,16,186,166,78,108,56
00498B  3  A6 4E 6C 38  
00498F  3  18 26 24 30          .byte 24,38,36,48,216,86,20,16
004993  3  D8 56 14 10  
004997  3  00 00 44 54          .byte 0,0,68,84,146,186,186,84
00499B  3  92 BA BA 54  
00499F  3  60 F9 FF BF          .byte 96,249,255,191,251,255,239,255
0049A3  3  FB FF EF FF  
0049A7  3  00 00 40 02          .byte 0,0,64,2,0,0,4,0
0049AB  3  00 00 04 00  
0049AF  3  02 00 40 08          .byte 2,0,64,8,20,8,0,16
0049B3  3  14 08 00 10  
0049B7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0049BB  3  00 00 00 00  
0049BF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0049C3  3  00 00 00 00  
0049C7  3  20 80 20 20          .byte 32,128,32,32,128,32,0,32
0049CB  3  80 20 00 20  
0049CF  3  4C 14 0C 54          .byte 76,20,12,84,12,20,76,16
0049D3  3  0C 14 4C 10  
0049D7  3  40 A4 4A 04          .byte 64,164,74,4,32,82,37,2
0049DB  3  20 52 25 02  
0049DF  3  00 03 18 40          .byte 0,3,24,64,0,128,32,0
0049E3  3  00 80 20 00  
0049E7  3  6D 00 08 10          .byte 109,0,8,16,16,0,40,68
0049EB  3  10 00 28 44  
0049EF  3  00 02 01 08          .byte 0,2,1,8,4,35,16,140
0049F3  3  04 23 10 8C  
0049F7  3  BC 26 5E 25          .byte 188,38,94,37,37,16,14,0
0049FB  3  25 10 0E 00  
0049FF  3  A0 80 20 A0          .byte 160,128,32,160,0,32,160,128
004A03  3  00 20 A0 80  
004A07  3  05 01 04 05          .byte 5,1,4,5,0,5,4,1
004A0B  3  00 05 04 01  
004A0F  3  00 05 01 04          .byte 0,5,1,4,5,0,1,0
004A13  3  05 00 01 00  
004A17  3  20 A0 80 20          .byte 32,160,128,32,160,0,32,0
004A1B  3  A0 00 20 00  
004A1F  3  24 08 04 28          .byte 36,8,4,40,4,8,36,8
004A23  3  04 08 24 08  
004A27  3  00 6A D5 74          .byte 0,106,213,116,17,68,16,0
004A2B  3  11 44 10 00  
004A2F  3  00 2B 55 17          .byte 0,43,85,23,68,17,4,0
004A33  3  44 11 04 00  
004A37  3  24 08 04 28          .byte 36,8,4,40,0,8,0,0
004A3B  3  00 08 00 00  
004A3F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004A43  3  00 00 00 00  
004A47  3  14 28 80 20          .byte 20,40,128,32,128,0,0,0
004A4B  3  80 00 00 00  
004A4F  3  28 14 01 04          .byte 40,20,1,4,1,0,0,0
004A53  3  01 00 00 00  
004A57  3  21 04 50 02          .byte 33,4,80,2,168,1,68,16
004A5B  3  A8 01 44 10  
004A5F  3  48 82 14 41          .byte 72,130,20,65,8,162,8,82
004A63  3  08 A2 08 52  
004A67  3  00 00 00 10          .byte 0,0,0,16,0,0,0,0
004A6B  3  00 00 00 00  
004A6F  3  E0 38 1C 0E          .byte 224,56,28,14,14,7,7,7
004A73  3  0E 07 07 07  
004A77  3  07 07 07 0E          .byte 7,7,7,14,14,28,56,224
004A7B  3  0E 1C 38 E0  
004A7F  3  00 6B DD 77          .byte 0,107,221,119,18,64,2,64
004A83  3  12 40 02 40  
004A87  3  02 07 06 0B          .byte 2,7,6,11,10,203,38,89
004A8B  3  0A CB 26 59  
004A8F  3  C0 60 E0 50          .byte 192,96,224,80,208,83,228,154
004A93  3  D0 53 E4 9A  
004A97  3  07 1F 3F 26          .byte 7,31,63,38,106,102,106,127
004A9B  3  6A 66 6A 7F  
004A9F  3  E0 F8 FC 9C          .byte 224,248,252,156,174,158,190,254
004AA3  3  AE 9E BE FE  
004AA7  3  79 76 77 77          .byte 121,118,119,119,123,125,126,87
004AAB  3  7B 7D 7E 57  
004AAF  3  9E 6E EE EE          .byte 158,110,238,238,222,190,126,218
004AB3  3  DE BE 7E DA  
004AB7  3  00 00 04 05          .byte 0,0,4,5,73,74,42,42
004ABB  3  49 4A 2A 2A  
004ABF  3  00 6B DD 77          .byte 0,107,221,119,170,85,136,0
004AC3  3  AA 55 88 00  
004AC7  3  00 2B 55 17          .byte 0,43,85,23,68,17,4,0
004ACB  3  44 11 04 00  
004ACF  3  00 92 D6 54          .byte 0,146,214,84,108,56,56,16
004AD3  3  6C 38 38 10  
004AD7  3  00 6B DD 77          .byte 0,107,221,119,170,85,136,0
004ADB  3  AA 55 88 00  
004ADF  3  00 00 EE 51          .byte 0,0,238,81,170,0,0,0
004AE3  3  AA 00 00 00  
004AE7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004AEB  3  00 00 00 00  
004AEF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004AF3  3  00 00 00 00  
004AF7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004AFB  3  00 00 00 00  
004AFF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004B03  3  00 00 00 00  
004B07  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004B0B  3  00 00 00 00  
004B0F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004B13  3  00 00 00 00  
004B17  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004B1B  3  00 00 00 00  
004B1F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004B23  3  00 00 00 00  
004B27  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004B2B  3  00 00 00 00  
004B2F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004B33  3  00 00 00 00  
004B37  3  00 00 01 03          .byte 0,0,1,3,6,13,13,19
004B3B  3  06 0D 0D 13  
004B3F  3  00 00 E0 90          .byte 0,0,224,144,96,160,176,224
004B43  3  60 A0 B0 E0  
004B47  3  C0 00 40 40          .byte 192,0,64,64,192,96,144,192
004B4B  3  C0 60 90 C0  
004B4F  3  23 20 01 03          .byte 35,32,1,3,3,6,9,1
004B53  3  03 06 09 01  
004B57  3  00 3C 66 FB          .byte 0,60,102,251,253,255,255,255
004B5B  3  FD FF FF FF  
004B5F  3  00 3C 66 FB          .byte 0,60,102,251,253,253,253,255
004B63  3  FD FD FD FF  
004B67  3  7F 3F 1F 0F          .byte 127,63,31,15,7,3,1,0
004B6B  3  07 03 01 00  
004B6F  3  FE FC F8 F0          .byte 254,252,248,240,224,192,128,0
004B73  3  E0 C0 80 00  
004B77  3  66 FF FF FF          .byte 102,255,255,255,126,60,24,0
004B7B  3  7E 3C 18 00  
004B7F  3  00 3C 4A BF          .byte 0,60,74,191,70,44,24,0
004B83  3  46 2C 18 00  
004B87  3  0A 65 B7 02          .byte 10,101,183,2,9,7,1,0
004B8B  3  09 07 01 00  
004B8F  3  50 A6 ED C0          .byte 80,166,237,192,64,144,224,128
004B93  3  40 90 E0 80  
004B97  3  80 00 00 00          .byte 128,0,0,0,0,0,0,0
004B9B  3  00 00 00 00  
004B9F  3  00 6B DD 77          .byte 0,107,221,119,18,64,2,64
004BA3  3  12 40 02 40  
004BA7  3  00 6B DD 77          .byte 0,107,221,119,170,85,136,0
004BAB  3  AA 55 88 00  
004BAF  3               bprop:
004BAF  3  00                   .byte 0
004BB0  3  02                   .byte 2
004BB1  3  02                   .byte 2
004BB2  3  00                   .byte 0
004BB3  3  02                   .byte 2
004BB4  3  02                   .byte 2
004BB5  3  01                   .byte 1
004BB6  3  01                   .byte 1
004BB7  3  02                   .byte 2
004BB8  3  02                   .byte 2
004BB9  3  02                   .byte 2
004BBA  3  02                   .byte 2
004BBB  3  01                   .byte 1
004BBC  3  01                   .byte 1
004BBD  3  01                   .byte 1
004BBE  3  01                   .byte 1
004BBF  3  05                   .byte 5
004BC0  3  05                   .byte 5
004BC1  3  05                   .byte 5
004BC2  3  08                   .byte 8
004BC3  3  00                   .byte 0
004BC4  3  00                   .byte 0
004BC5  3  00                   .byte 0
004BC6  3  00                   .byte 0
004BC7  3  00                   .byte 0
004BC8  3  00                   .byte 0
004BC9  3  00                   .byte 0
004BCA  3  00                   .byte 0
004BCB  3  00                   .byte 0
004BCC  3  00                   .byte 0
004BCD  3  00                   .byte 0
004BCE  3  00                   .byte 0
004BCF  3  03                   .byte 3
004BD0  3  03                   .byte 3
004BD1  3  03                   .byte 3
004BD2  3  03                   .byte 3
004BD3  3  01                   .byte 1
004BD4  3  00                   .byte 0
004BD5  3  00                   .byte 0
004BD6  3  00                   .byte 0
004BD7  3  00                   .byte 0
004BD8  3  00                   .byte 0
004BD9  3  00                   .byte 0
004BDA  3  00                   .byte 0
004BDB  3  03                   .byte 3
004BDC  3  03                   .byte 3
004BDD  3  00                   .byte 0
004BDE  3  00                   .byte 0
004BDF  3  00                   .byte 0
004BE0  3  00                   .byte 0
004BE1  3  00                   .byte 0
004BE2  3  00                   .byte 0
004BE3  3  00                   .byte 0
004BE4  3  01                   .byte 1
004BE5  3  02                   .byte 2
004BE6  3  02                   .byte 2
004BE7  3  01                   .byte 1
004BE8  3  00                   .byte 0
004BE9  3  00                   .byte 0
004BEA  3  00                   .byte 0
004BEB  3  06                   .byte 6
004BEC  3  06                   .byte 6
004BED  3  06                   .byte 6
004BEE  3  06                   .byte 6
004BEF  3  06                   .byte 6
004BF0  3  05                   .byte 5
004BF1  3  06                   .byte 6
004BF2  3  05                   .byte 5
004BF3  3  05                   .byte 5
004BF4  3  06                   .byte 6
004BF5  3  00                   .byte 0
004BF6  3  00                   .byte 0
004BF7  3  00                   .byte 0
004BF8  3  00                   .byte 0
004BF9  3  07                   .byte 7
004BFA  3  00                   .byte 0
004BFB  3  00                   .byte 0
004BFC  3  00                   .byte 0
004BFD  3  08                   .byte 8
004BFE  3  00                   .byte 0
004BFF  3  00                   .byte 0
004C00  3  00                   .byte 0
004C01  3  00                   .byte 0
004C02  3  00                   .byte 0
004C03  3  00                   .byte 0
004C04  3  00                   .byte 0
004C05  3  05                   .byte 5
004C06  3  07                   .byte 7
004C07  3  08                   .byte 8
004C08  3  06                   .byte 6
004C09  3  00                   .byte 0
004C0A  3  00                   .byte 0
004C0B  3  07                   .byte 7
004C0C  3  00                   .byte 0
004C0D  3  00                   .byte 0
004C0E  3  00                   .byte 0
004C0F  3  00                   .byte 0
004C10  3  00                   .byte 0
004C11  3  00                   .byte 0
004C12  3  00                   .byte 0
004C13  3  00                   .byte 0
004C14  3  00                   .byte 0
004C15  3  00                   .byte 0
004C16  3  01                   .byte 1
004C17  3  01                   .byte 1
004C18  3  00                   .byte 0
004C19  3  02                   .byte 2
004C1A  3  00                   .byte 0
004C1B  3  00                   .byte 0
004C1C  3  00                   .byte 0
004C1D  3  00                   .byte 0
004C1E  3  08                   .byte 8
004C1F  3  00                   .byte 0
004C20  3  00                   .byte 0
004C21  3  02                   .byte 2
004C22  3  00                   .byte 0
004C23  3  00                   .byte 0
004C24  3  00                   .byte 0
004C25  3  00                   .byte 0
004C26  3  00                   .byte 0
004C27  3  00                   .byte 0
004C28  3  00                   .byte 0
004C29  3  01                   .byte 1
004C2A  3  02                   .byte 2
004C2B  3  00                   .byte 0
004C2C  3  00                   .byte 0
004C2D  3  00                   .byte 0
004C2E  3  00                   .byte 0
004C2F  3  00                   .byte 0
004C30  3  00                   .byte 0
004C31  3  00                   .byte 0
004C32  3  00                   .byte 0
004C33  3  00                   .byte 0
004C34  3  00                   .byte 0
004C35  3  00                   .byte 0
004C36  3  00                   .byte 0
004C37  3  00                   .byte 0
004C38  3  00                   .byte 0
004C39  3  00                   .byte 0
004C3A  3  00                   .byte 0
004C3B  3  00                   .byte 0
004C3C  3  00                   .byte 0
004C3D  3  00                   .byte 0
004C3E  3  00                   .byte 0
004C3F  3  00                   .byte 0
004C40  3  00                   .byte 0
004C41  3  08                   .byte 8
004C42  3  03                   .byte 3
004C43  3  03                   .byte 3
004C44  3  00                   .byte 0
004C45  3  02                   .byte 2
004C46  3  01                   .byte 1
004C47  3               sprgfx:
004C47  3  00 00 03 E0          .byte 0,0,3,224,7,240,11,232,13,216,13,216,13,216,6,176,16,132,27,108,11,232,3,224,6,48,5,80,3,96,3,96
004C4B  3  07 F0 0B E8  
004C4F  3  0D D8 0D D8  
004C67  3  00 00 00 F8          .byte 0,0,0,248,1,252,2,250,3,118,3,118,3,118,1,172,4,33,6,219,2,250,0,248,1,140,1,84,0,216,0,216
004C6B  3  01 FC 02 FA  
004C6F  3  03 76 03 76  
004C87  3  00 00 00 3E          .byte 0,0,0,62,0,127,128,190,128,221,128,221,128,221,0,107,65,8,193,182,128,190,0,62,0,99,0,85,0,54,0,54
004C8B  3  00 7F 80 BE  
004C8F  3  80 DD 80 DD  
004CA7  3  00 00 80 0F          .byte 0,0,128,15,192,31,160,47,96,55,96,55,96,55,192,26,16,66,176,109,160,47,128,15,192,24,64,21,128,13,128,13
004CAB  3  C0 1F A0 2F  
004CAF  3  60 37 60 37  
004CC7  3  00 00 03 E0          .byte 0,0,3,224,7,240,11,232,13,232,13,232,14,216,23,80,24,64,11,168,3,236,7,244,12,24,3,72,3,96,0,96
004CCB  3  07 F0 0B E8  
004CCF  3  0D E8 0D E8  
004CE7  3  00 00 00 F8          .byte 0,0,0,248,1,252,2,250,3,122,3,122,3,182,5,212,6,16,2,234,0,251,1,253,3,6,0,210,0,216,0,24
004CEB  3  01 FC 02 FA  
004CEF  3  03 7A 03 7A  
004D07  3  00 00 00 3E          .byte 0,0,0,62,0,127,128,190,128,222,128,222,128,237,1,117,1,132,128,186,192,62,64,127,128,193,128,52,0,54,0,6
004D0B  3  00 7F 80 BE  
004D0F  3  80 DE 80 DE  
004D27  3  00 00 80 0F          .byte 0,0,128,15,192,31,160,47,160,55,160,55,96,59,64,93,0,97,160,46,176,15,208,31,96,48,32,13,128,13,128,1
004D2B  3  C0 1F A0 2F  
004D2F  3  A0 37 A0 37  
004D47  3  00 00 03 E0          .byte 0,0,3,224,7,240,11,232,13,216,13,216,13,216,6,176,16,132,27,108,11,232,3,224,6,48,5,80,3,96,0,0
004D4B  3  07 F0 0B E8  
004D4F  3  0D D8 0D D8  
004D67  3  00 00 00 F8          .byte 0,0,0,248,1,252,2,250,3,118,3,118,3,118,1,172,4,33,6,219,2,250,0,248,1,140,1,84,0,216,0,0
004D6B  3  01 FC 02 FA  
004D6F  3  03 76 03 76  
004D87  3  00 00 00 3E          .byte 0,0,0,62,0,127,128,190,128,221,128,221,128,221,0,107,65,8,193,182,128,190,0,62,0,99,0,85,0,54,0,0
004D8B  3  00 7F 80 BE  
004D8F  3  80 DD 80 DD  
004DA7  3  00 00 80 0F          .byte 0,0,128,15,192,31,160,47,96,55,96,55,96,55,192,26,16,66,176,109,160,47,128,15,192,24,64,21,128,13,0,0
004DAB  3  C0 1F A0 2F  
004DAF  3  60 37 60 37  
004DC7  3  00 00 03 E0          .byte 0,0,3,224,7,240,11,232,11,216,11,216,13,184,5,116,1,12,10,232,27,224,23,240,12,24,9,96,3,96,3,0
004DCB  3  07 F0 0B E8  
004DCF  3  0B D8 0B D8  
004DE7  3  00 00 00 F8          .byte 0,0,0,248,1,252,2,250,2,246,2,246,3,110,1,93,0,67,2,186,6,248,5,252,3,6,2,88,0,216,0,192
004DEB  3  01 FC 02 FA  
004DEF  3  02 F6 02 F6  
004E07  3  00 00 00 3E          .byte 0,0,0,62,0,127,128,190,128,189,128,189,128,219,64,87,192,16,128,174,1,190,1,127,128,193,0,150,0,54,0,48
004E0B  3  00 7F 80 BE  
004E0F  3  80 BD 80 BD  
004E27  3  00 00 80 0F          .byte 0,0,128,15,192,31,160,47,96,47,96,47,224,54,208,21,48,4,160,43,128,111,192,95,96,48,128,37,128,13,0,12
004E2B  3  C0 1F A0 2F  
004E2F  3  60 2F 60 2F  
004E47  3  00 00 01 B0          .byte 0,0,1,176,7,72,14,176,13,80,18,216,37,240,4,224,0,0,3,64,5,32,5,192,4,0,9,128,1,128,1,192
004E4B  3  07 48 0E B0  
004E4F  3  0D 50 12 D8  
004E67  3  00 00 00 6C          .byte 0,0,0,108,1,210,3,172,3,84,4,182,9,124,1,56,0,0,0,208,1,72,1,112,1,0,2,96,0,96,0,112
004E6B  3  01 D2 03 AC  
004E6F  3  03 54 04 B6  
004E87  3  00 00 00 1B          .byte 0,0,0,27,128,116,0,235,0,213,129,45,2,95,0,78,0,0,0,52,0,82,0,92,0,64,0,152,0,24,0,28
004E8B  3  80 74 00 EB  
004E8F  3  00 D5 81 2D  
004EA7  3  00 00 C0 06          .byte 0,0,192,6,32,29,192,58,64,53,96,75,192,151,128,19,0,0,0,13,128,20,0,23,0,16,0,38,0,6,0,7
004EAB  3  20 1D C0 3A  
004EAF  3  40 35 60 4B  
004EC7  3  00 00 01 B0          .byte 0,0,1,176,7,72,14,176,29,80,34,216,5,240,8,224,0,0,3,192,5,240,9,192,16,0,3,96,6,96,7,112
004ECB  3  07 48 0E B0  
004ECF  3  1D 50 22 D8  
004EE7  3  00 00 00 6C          .byte 0,0,0,108,1,210,3,172,7,84,8,182,1,124,2,56,0,0,0,240,1,124,2,112,4,0,0,216,1,152,1,220
004EEB  3  01 D2 03 AC  
004EEF  3  07 54 08 B6  
004F07  3  00 00 00 1B          .byte 0,0,0,27,128,116,0,235,1,213,130,45,0,95,0,142,0,0,0,60,0,95,0,156,1,0,0,54,0,102,0,119
004F0B  3  80 74 00 EB  
004F0F  3  01 D5 82 2D  
004F27  3  00 00 C0 06          .byte 0,0,192,6,32,29,192,58,64,117,96,139,192,23,128,35,0,0,0,15,192,23,0,39,0,64,128,13,128,25,192,29
004F2B  3  20 1D C0 3A  
004F2F  3  40 75 60 8B  
004F47  3  00 00 01 B0          .byte 0,0,1,176,7,72,30,176,37,80,2,216,5,240,8,224,0,0,2,224,13,24,49,192,0,32,7,104,12,56,14,48
004F4B  3  07 48 1E B0  
004F4F  3  25 50 02 D8  
004F67  3  00 00 00 6C          .byte 0,0,0,108,1,210,7,172,9,84,0,182,1,124,2,56,0,0,0,184,3,70,12,112,0,8,1,218,3,14,3,140
004F6B  3  01 D2 07 AC  
004F6F  3  09 54 00 B6  
004F87  3  00 00 00 1B          .byte 0,0,0,27,128,116,1,235,2,85,128,45,0,95,0,142,0,0,0,46,128,209,3,28,0,2,128,118,128,195,0,227
004F8B  3  80 74 01 EB  
004F8F  3  02 55 80 2D  
004FA7  3  00 00 C0 06          .byte 0,0,192,6,32,29,192,122,64,149,96,11,192,23,128,35,0,0,128,11,96,52,0,199,128,0,160,29,224,48,192,56
004FAB  3  20 1D C0 7A  
004FAF  3  40 95 60 0B  
004FC7  3  01 B0 07 48          .byte 1,176,7,72,30,176,37,80,2,216,13,240,0,224,0,0,2,224,13,24,49,192,0,32,7,104,12,56,14,48,0,0
004FCB  3  1E B0 25 50  
004FCF  3  02 D8 0D F0  
004FE7  3  00 6C 01 D2          .byte 0,108,1,210,7,172,9,84,0,182,3,124,0,56,0,0,0,184,3,70,12,112,0,8,1,218,3,14,3,140,0,0
004FEB  3  07 AC 09 54  
004FEF  3  00 B6 03 7C  
005007  3  00 1B 80 74          .byte 0,27,128,116,1,235,2,85,128,45,0,223,0,14,0,0,0,46,128,209,3,28,0,2,128,118,128,195,0,227,0,0
00500B  3  01 EB 02 55  
00500F  3  80 2D 00 DF  
005027  3  C0 06 20 1D          .byte 192,6,32,29,192,122,64,149,96,11,192,55,128,3,0,0,128,11,96,52,0,199,128,0,160,29,224,48,192,56,0,0
00502B  3  C0 7A 40 95  
00502F  3  60 0B C0 37  
005047  3  00 00 01 B0          .byte 0,0,1,176,39,72,30,176,13,80,2,216,5,240,8,224,0,0,34,224,29,24,1,192,0,32,7,104,12,56,14,48
00504B  3  27 48 1E B0  
00504F  3  0D 50 02 D8  
005067  3  00 00 00 6C          .byte 0,0,0,108,9,210,7,172,3,84,0,182,1,124,2,56,0,0,8,184,7,70,0,112,0,8,1,218,3,14,3,140
00506B  3  09 D2 07 AC  
00506F  3  03 54 00 B6  
005087  3  00 00 00 1B          .byte 0,0,0,27,130,116,1,235,0,213,128,45,0,95,0,142,0,0,2,46,129,209,0,28,0,2,128,118,128,195,0,227
00508B  3  82 74 01 EB  
00508F  3  00 D5 80 2D  
0050A7  3  00 00 C0 06          .byte 0,0,192,6,32,157,192,122,64,53,96,11,192,23,128,35,0,0,128,139,96,116,0,7,128,0,160,29,224,48,192,56
0050AB  3  20 9D C0 7A  
0050AF  3  40 35 60 0B  
0050C7  3  00 00 00 00          .byte 0,0,0,0,1,176,7,72,30,176,37,80,2,216,13,240,0,224,2,0,5,240,9,192,16,0,3,96,6,96,7,112
0050CB  3  01 B0 07 48  
0050CF  3  1E B0 25 50  
0050E7  3  00 00 00 00          .byte 0,0,0,0,0,108,1,210,7,172,9,84,0,182,3,124,0,56,0,128,1,124,2,112,4,0,0,216,1,152,1,220
0050EB  3  00 6C 01 D2  
0050EF  3  07 AC 09 54  
005107  3  00 00 00 00          .byte 0,0,0,0,0,27,128,116,1,235,2,85,128,45,0,223,0,14,0,32,0,95,0,156,1,0,0,54,0,102,0,119
00510B  3  00 1B 80 74  
00510F  3  01 EB 02 55  
005127  3  00 00 00 00          .byte 0,0,0,0,192,6,32,29,192,122,64,149,96,11,192,55,128,3,0,8,192,23,0,39,0,64,128,13,128,25,192,29
00512B  3  C0 06 20 1D  
00512F  3  C0 7A 40 95  
005147  3  00 00 0D 80          .byte 0,0,13,128,18,224,13,112,10,176,27,72,15,164,7,32,0,0,2,192,4,160,3,160,0,32,1,144,1,128,3,128
00514B  3  12 E0 0D 70  
00514F  3  0A B0 1B 48  
005167  3  00 00 03 60          .byte 0,0,3,96,4,184,3,92,2,172,6,210,3,233,1,200,0,0,0,176,1,40,0,232,0,8,0,100,0,96,0,224
00516B  3  04 B8 03 5C  
00516F  3  02 AC 06 D2  
005187  3  00 00 00 D8          .byte 0,0,0,216,1,46,0,215,0,171,129,180,64,250,0,114,0,0,0,44,0,74,0,58,0,2,0,25,0,24,0,56
00518B  3  01 2E 00 D7  
00518F  3  00 AB 81 B4  
0051A7  3  00 00 00 36          .byte 0,0,0,54,128,75,192,53,192,42,32,109,144,62,128,28,0,0,0,11,128,18,128,14,128,0,64,6,0,6,0,14
0051AB  3  80 4B C0 35  
0051AF  3  C0 2A 20 6D  
0051C7  3  00 00 0D 80          .byte 0,0,13,128,18,224,13,112,10,184,27,68,15,160,7,16,0,0,3,192,15,160,3,144,0,8,6,192,6,96,14,224
0051CB  3  12 E0 0D 70  
0051CF  3  0A B8 1B 44  
0051E7  3  00 00 03 60          .byte 0,0,3,96,4,184,3,92,2,174,6,209,3,232,1,196,0,0,0,240,3,232,0,228,0,2,1,176,1,152,3,184
0051EB  3  04 B8 03 5C  
0051EF  3  02 AE 06 D1  
005207  3  00 00 00 D8          .byte 0,0,0,216,1,46,0,215,128,171,65,180,0,250,0,113,0,0,0,60,0,250,0,57,128,0,0,108,0,102,0,238
00520B  3  01 2E 00 D7  
00520F  3  80 AB 41 B4  
005227  3  00 00 00 36          .byte 0,0,0,54,128,75,192,53,224,42,16,109,128,62,64,28,0,0,0,15,128,62,64,14,32,0,0,27,128,25,128,59
00522B  3  80 4B C0 35  
00522F  3  E0 2A 10 6D  
005247  3  00 00 0D 80          .byte 0,0,13,128,18,224,13,120,10,164,27,64,15,160,7,16,0,0,7,64,24,176,3,140,4,0,22,224,28,48,12,112
00524B  3  12 E0 0D 78  
00524F  3  0A A4 1B 40  
005267  3  00 00 03 60          .byte 0,0,3,96,4,184,3,94,2,169,6,208,3,232,1,196,0,0,1,208,6,44,0,227,1,0,5,184,7,12,3,28
00526B  3  04 B8 03 5E  
00526F  3  02 A9 06 D0  
005287  3  00 00 00 D8          .byte 0,0,0,216,1,46,128,215,64,170,1,180,0,250,0,113,0,0,0,116,1,139,192,56,0,64,1,110,1,195,0,199
00528B  3  01 2E 80 D7  
00528F  3  40 AA 01 B4  
0052A7  3  00 00 00 36          .byte 0,0,0,54,128,75,224,53,144,42,0,109,128,62,64,28,0,0,0,29,192,98,48,14,0,16,128,91,192,112,192,49
0052AB  3  80 4B E0 35  
0052AF  3  90 2A 00 6D  
0052C7  3  0D 80 12 E0          .byte 13,128,18,224,13,120,10,164,27,64,15,176,7,0,0,0,7,64,24,176,3,140,4,0,22,224,28,48,12,112,0,0
0052CB  3  0D 78 0A A4  
0052CF  3  1B 40 0F B0  
0052E7  3  03 60 04 B8          .byte 3,96,4,184,3,94,2,169,6,208,3,236,1,192,0,0,1,208,6,44,0,227,1,0,5,184,7,12,3,28,0,0
0052EB  3  03 5E 02 A9  
0052EF  3  06 D0 03 EC  
005307  3  00 D8 01 2E          .byte 0,216,1,46,128,215,64,170,1,180,0,251,0,112,0,0,0,116,1,139,192,56,0,64,1,110,1,195,0,199,0,0
00530B  3  80 D7 40 AA  
00530F  3  01 B4 00 FB  
005327  3  00 36 80 4B          .byte 0,54,128,75,224,53,144,42,0,109,192,62,0,28,0,0,0,29,192,98,48,14,0,16,128,91,192,112,192,49,0,0
00532B  3  E0 35 90 2A  
00532F  3  00 6D C0 3E  
005347  3  00 00 0D 80          .byte 0,0,13,128,18,228,13,120,10,176,27,64,15,160,7,16,0,0,7,68,24,184,3,128,4,0,22,224,28,48,12,112
00534B  3  12 E4 0D 78  
00534F  3  0A B0 1B 40  
005367  3  00 00 03 60          .byte 0,0,3,96,4,185,3,94,2,172,6,208,3,232,1,196,0,0,1,209,6,46,0,224,1,0,5,184,7,12,3,28
00536B  3  04 B9 03 5E  
00536F  3  02 AC 06 D0  
005387  3  00 00 00 D8          .byte 0,0,0,216,65,46,128,215,0,171,1,180,0,250,0,113,0,0,64,116,129,139,0,56,0,64,1,110,1,195,0,199
00538B  3  41 2E 80 D7  
00538F  3  00 AB 01 B4  
0053A7  3  00 00 00 36          .byte 0,0,0,54,144,75,224,53,192,42,0,109,128,62,64,28,0,0,16,29,224,98,0,14,0,16,128,91,192,112,192,49
0053AB  3  90 4B E0 35  
0053AF  3  C0 2A 00 6D  
0053C7  3  00 00 0D 80          .byte 0,0,13,128,18,224,13,112,10,184,27,68,15,160,7,16,0,0,3,192,15,160,3,156,0,0,6,192,6,96,14,224
0053CB  3  12 E0 0D 70  
0053CF  3  0A B8 1B 44  
0053E7  3  00 00 03 60          .byte 0,0,3,96,4,184,3,92,2,174,6,209,3,232,1,196,0,0,0,240,3,232,0,231,0,0,1,176,1,152,3,184
0053EB  3  04 B8 03 5C  
0053EF  3  02 AE 06 D1  
005407  3  00 00 00 D8          .byte 0,0,0,216,1,46,0,215,128,171,65,180,0,250,0,113,0,0,0,60,0,250,192,57,0,0,0,108,0,102,0,238
00540B  3  01 2E 00 D7  
00540F  3  80 AB 41 B4  
005427  3  00 00 00 36          .byte 0,0,0,54,128,75,192,53,224,42,16,109,128,62,64,28,0,0,0,15,128,62,112,14,0,0,0,27,128,25,128,59
00542B  3  80 4B C0 35  
00542F  3  E0 2A 10 6D  
005447  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,10,48
00544B  3  00 00 00 00  
00544F  3  00 00 00 00  
005467  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,2,140
00546B  3  00 00 00 00  
00546F  3  00 00 00 00  
005487  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,163
00548B  3  00 00 00 00  
00548F  3  00 00 00 00  
0054A7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,192,40
0054AB  3  00 00 00 00  
0054AF  3  00 00 00 00  
0054C7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,136,4,32,0,0
0054CB  3  00 00 00 00  
0054CF  3  00 00 00 00  
0054E7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,34,1,8,0,0
0054EB  3  00 00 00 00  
0054EF  3  00 00 00 00  
005507  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,8,0,66,0,0
00550B  3  00 00 00 00  
00550F  3  00 00 00 00  
005527  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,66,128,16,0,0
00552B  3  00 00 00 00  
00552F  3  00 00 00 00  
005547  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,132,4,32,0,0,0,0
00554B  3  00 00 00 00  
00554F  3  00 00 00 00  
005567  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,33,1,8,0,0,0,0
00556B  3  00 00 00 00  
00556F  3  00 00 00 00  
005587  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,8,0,66,0,0,0,0
00558B  3  00 00 00 00  
00558F  3  00 00 00 00  
0055A7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,130,128,16,0,0,0,0
0055AB  3  00 00 00 00  
0055AF  3  00 00 00 00  
0055C7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,145,0,0,0,0
0055CB  3  00 00 00 00  
0055CF  3  00 00 00 00  
0055E7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,36,0,0,0,0
0055EB  3  00 00 00 00  
0055EF  3  00 00 00 00  
005607  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,137,0,0,0,0
00560B  3  00 00 00 00  
00560F  3  00 00 00 00  
005627  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,34,0,0,0,0
00562B  3  00 00 00 00  
00562F  3  00 00 00 00  
005647  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,129,128,8
00564B  3  00 00 00 00  
00564F  3  00 00 00 00  
005667  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,32,32,2
00566B  3  00 00 00 00  
00566F  3  00 00 00 00  
005687  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,8,136,0
00568B  3  00 00 00 00  
00568F  3  00 00 00 00  
0056A7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,66,34,0
0056AB  3  00 00 00 00  
0056AF  3  00 00 00 00  
0056C7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,137
0056CB  3  00 00 00 00  
0056CF  3  00 00 00 00  
0056E7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,34
0056EB  3  00 00 00 00  
0056EF  3  00 00 00 00  
005707  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,8
00570B  3  00 00 00 00  
00570F  3  00 00 00 00  
005727  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,66
00572B  3  00 00 00 00  
00572F  3  00 00 00 00  
005747  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00574B  3  00 00 00 00  
00574F  3  00 00 00 00  
005767  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00576B  3  00 00 00 00  
00576F  3  00 00 00 00  
005787  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00578B  3  00 00 00 00  
00578F  3  00 00 00 00  
0057A7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0057AB  3  00 00 00 00  
0057AF  3  00 00 00 00  
0057C7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,136,114,76,188,62,158,250,47,124,55,252,79,242
0057CB  3  00 00 00 00  
0057CF  3  00 00 00 00  
0057E7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,98,28,147,175,15,167,190,11,223,13,255,147,252
0057EB  3  00 00 00 00  
0057EF  3  00 00 00 00  
005807  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,24,199,36,235,195,169,239,194,247,195,127,36,255
00580B  3  00 00 00 00  
00580F  3  00 00 00 00  
005827  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,134,49,201,250,240,234,123,240,189,240,223,201,63
00582B  3  00 00 00 00  
00582F  3  00 00 00 00  
005847  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,17,136,98,70,244,45,185,28,46,188,95,126,94,254,47,124,55,252,79,242
00584B  3  00 00 00 00  
00584F  3  00 00 00 00  
005867  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,4,98,152,145,125,11,46,71,11,175,151,223,151,191,11,223,13,255,147,252
00586B  3  00 00 00 00  
00586F  3  00 00 00 00  
005887  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,129,24,102,36,223,66,203,145,194,235,229,247,229,239,194,247,195,127,36,255
00588B  3  00 00 00 00  
00588F  3  00 00 00 00  
0058A7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,32,70,25,137,183,208,114,228,240,186,249,125,249,123,240,189,240,223,201,63
0058AB  3  00 00 00 00  
0058AF  3  00 00 00 00  
0058C7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,2,145,129,226,74,116,38,56,46,45,28,46,188,95,126,94,254,47,124,55,252,79,242
0058CB  3  00 00 00 00  
0058CF  3  00 02 91 81  
0058E7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,128,0,100,96,184,146,157,9,142,11,11,71,11,175,151,223,151,191,11,223,13,255,147,252
0058EB  3  00 00 00 00  
0058EF  3  80 00 64 60  
005907  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,32,0,25,24,174,36,103,66,227,130,194,209,194,235,229,247,229,239,194,247,195,127,36,255
00590B  3  00 00 00 00  
00590F  3  20 00 19 18  
005927  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,8,0,6,70,43,137,153,208,184,224,112,180,240,186,249,125,249,123,240,189,240,223,201,63
00592B  3  00 00 00 00  
00592F  3  08 00 06 46  
005947  3  00 00 00 00          .byte 0,0,0,0,17,136,34,68,52,44,24,24,20,56,22,120,44,56,46,252,94,124,95,126,94,254,47,124,55,252,79,242
00594B  3  11 88 22 44  
00594F  3  34 2C 18 18  
005967  3  00 00 00 00          .byte 0,0,0,0,4,98,8,145,13,11,6,6,5,14,5,158,11,14,11,191,23,159,151,223,151,191,11,223,13,255,147,252
00596B  3  04 62 08 91  
00596F  3  0D 0B 06 06  
005987  3  00 00 00 00          .byte 0,0,0,0,129,24,66,36,195,66,129,129,129,67,129,103,130,195,194,239,197,231,229,247,229,239,194,247,195,127,36,255
00598B  3  81 18 42 24  
00598F  3  C3 42 81 81  
0059A7  3  00 00 00 00          .byte 0,0,0,0,32,70,16,137,176,208,96,96,224,80,224,89,224,176,240,187,241,121,249,125,249,123,240,189,240,223,201,63
0059AB  3  20 46 10 89  
0059AF  3  B0 D0 60 60  
0059C7  3  00 00 01 00          .byte 0,0,1,0,2,192,3,64,6,224,5,96,14,240,21,120,22,248,47,124,46,252,95,126,94,254,47,124,63,252,79,242
0059CB  3  02 C0 03 40  
0059CF  3  06 E0 05 60  
0059E7  3  00 00 00 40          .byte 0,0,0,64,0,176,0,208,1,184,1,88,3,188,5,94,5,190,11,223,11,191,151,223,151,191,11,223,15,255,147,252
0059EB  3  00 B0 00 D0  
0059EF  3  01 B8 01 58  
005A07  3  00 00 00 10          .byte 0,0,0,16,0,44,0,52,0,110,0,86,0,239,129,87,129,111,194,247,194,239,229,247,229,239,194,247,195,255,36,255
005A0B  3  00 2C 00 34  
005A0F  3  00 6E 00 56  
005A27  3  00 00 00 04          .byte 0,0,0,4,0,11,0,13,128,27,128,21,192,59,224,85,224,91,240,189,240,187,249,125,249,123,240,189,240,255,201,63
005A2B  3  00 0B 00 0D  
005A2F  3  80 1B 80 15  
005A47  3  00 00 01 00          .byte 0,0,1,0,2,192,3,64,6,224,5,96,14,240,21,120,22,248,47,124,46,252,95,126,94,254,47,124,63,252,79,242
005A4B  3  02 C0 03 40  
005A4F  3  06 E0 05 60  
005A67  3  00 00 00 40          .byte 0,0,0,64,0,176,0,208,1,184,1,88,3,188,5,94,5,190,11,223,11,191,151,223,151,191,11,223,15,255,147,252
005A6B  3  00 B0 00 D0  
005A6F  3  01 B8 01 58  
005A87  3  00 00 00 10          .byte 0,0,0,16,0,44,0,52,0,110,0,86,0,239,129,87,129,111,194,247,194,239,229,247,229,239,194,247,195,255,36,255
005A8B  3  00 2C 00 34  
005A8F  3  00 6E 00 56  
005AA7  3  00 00 00 04          .byte 0,0,0,4,0,11,0,13,128,27,128,21,192,59,224,85,224,91,240,189,240,187,249,125,249,123,240,189,240,255,201,63
005AAB  3  00 0B 00 0D  
005AAF  3  80 1B 80 15  
005AC7  3  07 80 1E E0          .byte 7,128,30,224,59,240,95,184,112,236,22,62,5,142,15,162,3,156,0,0,2,128,3,64,0,0,6,192,6,96,14,224
005ACB  3  3B F0 5F B8  
005ACF  3  70 EC 16 3E  
005AE7  3  01 E0 07 B8          .byte 1,224,7,184,14,252,23,238,28,59,133,143,129,99,131,232,0,231,0,0,0,160,0,208,0,0,1,176,1,152,3,184
005AEB  3  0E FC 17 EE  
005AEF  3  1C 3B 85 8F  
005B07  3  00 78 01 EE          .byte 0,120,1,238,3,191,133,251,199,14,225,99,224,88,32,250,192,57,0,0,0,40,0,52,0,0,0,108,0,102,0,238
005B0B  3  03 BF 85 FB  
005B0F  3  C7 0E E1 63  
005B27  3  00 1E 80 7B          .byte 0,30,128,123,192,239,225,126,177,195,248,88,56,22,136,62,112,14,0,0,0,10,0,13,0,0,0,27,128,25,128,59
005B2B  3  C0 EF E1 7E  
005B2F  3  B1 C3 F8 58  
005B47  3  00 00 07 80          .byte 0,0,7,128,30,224,27,240,127,184,112,236,23,62,5,142,15,162,3,156,0,0,11,160,0,16,1,128,1,128,3,128
005B4B  3  1E E0 1B F0  
005B4F  3  7F B8 70 EC  
005B67  3  00 00 01 E0          .byte 0,0,1,224,7,184,6,252,31,238,28,59,133,207,129,99,131,232,0,231,0,0,2,232,0,4,0,96,0,96,0,224
005B6B  3  07 B8 06 FC  
005B6F  3  1F EE 1C 3B  
005B87  3  00 00 00 78          .byte 0,0,0,120,1,238,1,191,135,251,199,14,225,115,224,88,32,250,192,57,0,0,0,186,0,1,0,24,0,24,0,56
005B8B  3  01 EE 01 BF  
005B8F  3  87 FB C7 0E  
005BA7  3  00 00 00 1E          .byte 0,0,0,30,128,123,192,111,225,254,177,195,248,92,56,22,136,62,112,14,0,0,128,46,64,0,0,6,0,6,0,14
005BAB  3  80 7B C0 6F  
005BAF  3  E1 FE B1 C3  
005BC7  3  07 80 1E E0          .byte 7,128,30,224,59,240,95,184,112,236,22,62,5,142,15,162,3,156,0,0,2,128,3,64,0,0,6,192,6,96,14,224
005BCB  3  3B F0 5F B8  
005BCF  3  70 EC 16 3E  
005BE7  3  01 E0 07 B8          .byte 1,224,7,184,14,252,23,238,28,59,133,143,129,99,131,232,0,231,0,0,0,160,0,208,0,0,1,176,1,152,3,184
005BEB  3  0E FC 17 EE  
005BEF  3  1C 3B 85 8F  
005C07  3  00 78 01 EE          .byte 0,120,1,238,3,191,133,251,199,14,225,99,224,88,32,250,192,57,0,0,0,40,0,52,0,0,0,108,0,102,0,238
005C0B  3  03 BF 85 FB  
005C0F  3  C7 0E E1 63  
005C27  3  00 1E 80 7B          .byte 0,30,128,123,192,239,225,126,177,195,248,88,56,22,136,62,112,14,0,0,0,10,0,13,0,0,0,27,128,25,128,59
005C2B  3  C0 EF E1 7E  
005C2F  3  B1 C3 F8 58  
005C47  3  07 80 1E E0          .byte 7,128,30,224,59,240,95,184,112,236,22,62,5,142,15,162,3,156,0,0,7,128,11,160,0,0,22,224,28,48,12,112
005C4B  3  3B F0 5F B8  
005C4F  3  70 EC 16 3E  
005C67  3  01 E0 07 B8          .byte 1,224,7,184,14,252,23,238,28,59,133,143,129,99,131,232,0,231,0,0,1,224,2,232,0,0,5,184,7,12,3,28
005C6B  3  0E FC 17 EE  
005C6F  3  1C 3B 85 8F  
005C87  3  00 78 01 EE          .byte 0,120,1,238,3,191,133,251,199,14,225,99,224,88,32,250,192,57,0,0,0,120,0,186,0,0,1,110,1,195,0,199
005C8B  3  03 BF 85 FB  
005C8F  3  C7 0E E1 63  
005CA7  3  00 1E 80 7B          .byte 0,30,128,123,192,239,225,126,177,195,248,88,56,22,136,62,112,14,0,0,0,30,128,46,0,0,128,91,192,112,192,49
005CAB  3  C0 EF E1 7E  
005CAF  3  B1 C3 F8 58  
005CC7  3  01 E0 07 78          .byte 1,224,7,120,15,220,29,250,55,14,124,104,113,160,69,240,57,192,0,0,1,64,2,192,0,0,3,96,6,96,7,112
005CCB  3  0F DC 1D FA  
005CCF  3  37 0E 7C 68  
005CE7  3  00 78 01 DE          .byte 0,120,1,222,3,247,135,126,141,195,31,26,28,104,17,124,14,112,0,0,0,80,0,176,0,0,0,216,1,152,1,220
005CEB  3  03 F7 87 7E  
005CEF  3  8D C3 1F 1A  
005D07  3  00 1E 80 77          .byte 0,30,128,119,192,253,161,223,227,112,135,198,7,26,4,95,3,156,0,0,0,20,0,44,0,0,0,54,0,102,0,119
005D0B  3  C0 FD A1 DF  
005D0F  3  E3 70 87 C6  
005D27  3  80 07 E0 1D          .byte 128,7,224,29,112,63,232,119,56,220,161,241,129,198,193,23,0,231,0,0,0,5,0,11,0,0,128,13,128,25,192,29
005D2B  3  70 3F E8 77  
005D2F  3  38 DC A1 F1  
005D47  3  00 00 01 E0          .byte 0,0,1,224,7,120,15,216,29,254,55,14,124,232,113,160,69,240,57,192,0,0,5,208,8,0,1,128,1,128,1,192
005D4B  3  07 78 0F D8  
005D4F  3  1D FE 37 0E  
005D67  3  00 00 00 78          .byte 0,0,0,120,1,222,3,246,135,127,141,195,31,58,28,104,17,124,14,112,0,0,1,116,2,0,0,96,0,96,0,112
005D6B  3  01 DE 03 F6  
005D6F  3  87 7F 8D C3  
005D87  3  00 00 00 1E          .byte 0,0,0,30,128,119,128,253,225,223,227,112,135,206,7,26,4,95,3,156,0,0,0,93,0,128,0,24,0,24,0,28
005D8B  3  80 77 80 FD  
005D8F  3  E1 DF E3 70  
005DA7  3  00 00 80 07          .byte 0,0,128,7,224,29,96,63,248,119,56,220,161,243,129,198,193,23,0,231,0,0,64,23,0,32,0,6,0,6,0,7
005DAB  3  E0 1D 60 3F  
005DAF  3  F8 77 38 DC  
005DC7  3  01 E0 07 78          .byte 1,224,7,120,15,220,29,250,55,14,124,104,113,160,69,240,57,192,0,0,1,64,1,160,0,0,3,96,6,96,7,112
005DCB  3  0F DC 1D FA  
005DCF  3  37 0E 7C 68  
005DE7  3  00 78 01 DE          .byte 0,120,1,222,3,247,135,126,141,195,31,26,28,104,17,124,14,112,0,0,0,80,0,104,0,0,0,216,1,152,1,220
005DEB  3  03 F7 87 7E  
005DEF  3  8D C3 1F 1A  
005E07  3  00 1E 80 77          .byte 0,30,128,119,192,253,161,223,227,112,135,198,7,26,4,95,3,156,0,0,0,20,0,26,0,0,0,54,0,102,0,119
005E0B  3  C0 FD A1 DF  
005E0F  3  E3 70 87 C6  
005E27  3  80 07 E0 1D          .byte 128,7,224,29,112,63,232,119,56,220,161,241,129,198,193,23,0,231,0,0,0,5,128,6,0,0,128,13,128,25,192,29
005E2B  3  70 3F E8 77  
005E2F  3  38 DC A1 F1  
005E47  3  01 E0 07 78          .byte 1,224,7,120,15,220,29,250,55,14,124,104,113,160,69,240,57,192,0,0,1,224,5,208,0,0,7,104,12,56,14,48
005E4B  3  0F DC 1D FA  
005E4F  3  37 0E 7C 68  
005E67  3  00 78 01 DE          .byte 0,120,1,222,3,247,135,126,141,195,31,26,28,104,17,124,14,112,0,0,0,120,1,116,0,0,1,218,3,14,3,140
005E6B  3  03 F7 87 7E  
005E6F  3  8D C3 1F 1A  
005E87  3  00 1E 80 77          .byte 0,30,128,119,192,253,161,223,227,112,135,198,7,26,4,95,3,156,0,0,0,30,0,93,0,0,128,118,128,195,0,227
005E8B  3  C0 FD A1 DF  
005E8F  3  E3 70 87 C6  
005EA7  3  80 07 E0 1D          .byte 128,7,224,29,112,63,232,119,56,220,161,241,129,198,193,23,0,231,0,0,128,7,64,23,0,0,160,29,224,48,192,56
005EAB  3  70 3F E8 77  
005EAF  3  38 DC A1 F1  
005EC7  3  02 00 01 00          .byte 2,0,1,0,1,0,3,0,7,128,15,192,10,192,10,192,7,128,3,0,0,32,15,192,23,128,3,192,1,192,0,96
005ECB  3  01 00 03 00  
005ECF  3  07 80 0F C0  
005EE7  3  00 80 00 40          .byte 0,128,0,64,0,64,0,192,1,224,3,240,2,176,2,176,1,224,0,192,0,8,3,240,5,224,0,240,0,112,0,24
005EEB  3  00 40 00 C0  
005EEF  3  01 E0 03 F0  
005F07  3  00 20 00 10          .byte 0,32,0,16,0,16,0,48,0,120,0,252,0,172,0,172,0,120,0,48,0,2,0,252,1,120,0,60,0,28,0,6
005F0B  3  00 10 00 30  
005F0F  3  00 78 00 FC  
005F27  3  00 08 00 04          .byte 0,8,0,4,0,4,0,12,0,30,0,63,0,43,0,43,0,30,0,12,128,0,0,63,0,94,0,15,0,7,128,1
005F2B  3  00 04 00 0C  
005F2F  3  00 1E 00 3F  
005F47  3  00 80 01 00          .byte 0,128,1,0,0,128,1,128,3,192,7,224,5,96,5,96,3,192,1,128,12,0,3,240,3,192,1,192,1,128,0,128
005F4B  3  00 80 01 80  
005F4F  3  03 C0 07 E0  
005F67  3  00 20 00 40          .byte 0,32,0,64,0,32,0,96,0,240,1,248,1,88,1,88,0,240,0,96,3,0,0,252,0,240,0,112,0,96,0,32
005F6B  3  00 20 00 60  
005F6F  3  00 F0 01 F8  
005F87  3  00 08 00 10          .byte 0,8,0,16,0,8,0,24,0,60,0,126,0,86,0,86,0,60,0,24,0,192,0,63,0,60,0,28,0,24,0,8
005F8B  3  00 08 00 18  
005F8F  3  00 3C 00 7E  
005FA7  3  00 02 00 04          .byte 0,2,0,4,0,2,0,6,0,15,128,31,128,21,128,21,0,15,0,6,0,48,192,15,0,15,0,7,0,6,0,2
005FAB  3  00 02 00 06  
005FAF  3  00 0F 80 1F  
005FC7  3  00 40 00 80          .byte 0,64,0,128,0,128,0,192,1,224,3,240,3,80,3,80,1,224,0,192,4,0,3,240,1,232,3,192,3,128,6,0
005FCB  3  00 80 00 C0  
005FCF  3  01 E0 03 F0  
005FE7  3  00 10 00 20          .byte 0,16,0,32,0,32,0,48,0,120,0,252,0,212,0,212,0,120,0,48,1,0,0,252,0,122,0,240,0,224,1,128
005FEB  3  00 20 00 30  
005FEF  3  00 78 00 FC  
006007  3  00 04 00 08          .byte 0,4,0,8,0,8,0,12,0,30,0,63,0,53,0,53,0,30,0,12,0,64,0,63,128,30,0,60,0,56,0,96
00600B  3  00 08 00 0C  
00600F  3  00 1E 00 3F  
006027  3  00 01 00 02          .byte 0,1,0,2,0,2,0,3,128,7,192,15,64,13,64,13,128,7,0,3,0,16,192,15,160,7,0,15,0,14,0,24
00602B  3  00 02 00 03  
00602F  3  80 07 C0 0F  
006047  3  01 00 00 80          .byte 1,0,0,128,1,0,1,128,3,192,7,224,6,160,6,160,3,192,1,128,0,48,15,192,3,192,3,128,1,128,1,0
00604B  3  01 00 01 80  
00604F  3  03 C0 07 E0  
006067  3  00 40 00 20          .byte 0,64,0,32,0,64,0,96,0,240,1,248,1,168,1,168,0,240,0,96,0,12,3,240,0,240,0,224,0,96,0,64
00606B  3  00 40 00 60  
00606F  3  00 F0 01 F8  
006087  3  00 10 00 08          .byte 0,16,0,8,0,16,0,24,0,60,0,126,0,106,0,106,0,60,0,24,0,3,0,252,0,60,0,56,0,24,0,16
00608B  3  00 10 00 18  
00608F  3  00 3C 00 7E  
0060A7  3  00 04 00 02          .byte 0,4,0,2,0,4,0,6,0,15,128,31,128,26,128,26,0,15,0,6,192,0,0,63,0,15,0,14,0,6,0,4
0060AB  3  00 04 00 06  
0060AF  3  00 0F 80 1F  
0060C7  3  0F E0 00 00          .byte 15,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0060CB  3  00 00 00 00  
0060CF  3  00 00 00 00  
0060E7  3  03 F8 00 00          .byte 3,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0060EB  3  00 00 00 00  
0060EF  3  00 00 00 00  
006107  3  00 FE 00 00          .byte 0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00610B  3  00 00 00 00  
00610F  3  00 00 00 00  
006127  3  80 3F 00 00          .byte 128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00612B  3  00 00 00 00  
00612F  3  00 00 00 00  
006147  3  07 C0 03 80          .byte 7,192,3,128,3,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00614B  3  03 80 01 00  
00614F  3  00 00 00 00  
006167  3  01 F0 00 E0          .byte 1,240,0,224,0,224,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00616B  3  00 E0 00 40  
00616F  3  00 00 00 00  
006187  3  00 7C 00 38          .byte 0,124,0,56,0,56,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00618B  3  00 38 00 10  
00618F  3  00 00 00 00  
0061A7  3  00 1F 00 0E          .byte 0,31,0,14,0,14,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0061AB  3  00 0E 00 04  
0061AF  3  00 00 00 00  
0061C7  3  03 80 01 00          .byte 3,128,1,0,2,128,2,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0061CB  3  02 80 02 80  
0061CF  3  01 00 00 00  
0061E7  3  00 E0 00 40          .byte 0,224,0,64,0,160,0,160,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0061EB  3  00 A0 00 A0  
0061EF  3  00 40 00 00  
006207  3  00 38 00 10          .byte 0,56,0,16,0,40,0,40,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00620B  3  00 28 00 28  
00620F  3  00 10 00 00  
006227  3  00 0E 00 04          .byte 0,14,0,4,0,10,0,10,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00622B  3  00 0A 00 0A  
00622F  3  00 04 00 00  
006247  3  01 00 01 00          .byte 1,0,1,0,1,0,3,128,3,128,7,64,7,64,2,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00624B  3  01 00 03 80  
00624F  3  03 80 07 40  
006267  3  00 40 00 40          .byte 0,64,0,64,0,64,0,224,0,224,1,208,1,208,0,160,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00626B  3  00 40 00 E0  
00626F  3  00 E0 01 D0  
006287  3  00 10 00 10          .byte 0,16,0,16,0,16,0,56,0,56,0,116,0,116,0,40,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00628B  3  00 10 00 38  
00628F  3  00 38 00 74  
0062A7  3  00 04 00 04          .byte 0,4,0,4,0,4,0,14,0,14,0,29,0,29,0,10,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0062AB  3  00 04 00 0E  
0062AF  3  00 0E 00 1D  
0062C7  3  00 00 00 00          .byte 0,0,0,0,1,0,1,0,1,0,3,128,3,128,2,128,7,64,7,64,7,64,2,128,1,0,0,0,0,0,0,0
0062CB  3  01 00 01 00  
0062CF  3  01 00 03 80  
0062E7  3  00 00 00 00          .byte 0,0,0,0,0,64,0,64,0,64,0,224,0,224,0,160,1,208,1,208,1,208,0,160,0,64,0,0,0,0,0,0
0062EB  3  00 40 00 40  
0062EF  3  00 40 00 E0  
006307  3  00 00 00 00          .byte 0,0,0,0,0,16,0,16,0,16,0,56,0,56,0,40,0,116,0,116,0,116,0,40,0,16,0,0,0,0,0,0
00630B  3  00 10 00 10  
00630F  3  00 10 00 38  
006327  3  00 00 00 00          .byte 0,0,0,0,0,4,0,4,0,4,0,14,0,14,0,10,0,29,0,29,0,29,0,10,0,4,0,0,0,0,0,0
00632B  3  00 04 00 04  
00632F  3  00 04 00 0E  
006347  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,128,7,192
00634B  3  00 00 00 00  
00634F  3  00 00 00 00  
006367  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,1,240
00636B  3  00 00 00 00  
00636F  3  00 00 00 00  
006387  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,124
00638B  3  00 00 00 00  
00638F  3  00 00 00 00  
0063A7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,31
0063AB  3  00 00 00 00  
0063AF  3  00 00 00 00  
0063C7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,4,64,1,0,27,176
0063CB  3  00 00 00 00  
0063CF  3  00 00 00 00  
0063E7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,64,1,16,0,64,6,236
0063EB  3  00 00 00 00  
0063EF  3  00 00 00 00  
006407  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,68,0,16,1,187
00640B  3  00 00 00 00  
00640F  3  00 00 00 00  
006427  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,17,0,4,192,110
00642B  3  00 00 00 00  
00642F  3  00 00 00 00  
006447  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,17,16,8,32,0,0,0,0,49,24
00644B  3  00 00 00 00  
00644F  3  00 00 00 00  
006467  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,4,68,2,8,0,0,0,0,12,70
00646B  3  00 00 00 00  
00646F  3  00 00 00 00  
006487  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,1,17,0,130,0,0,0,0,131,17
00648B  3  00 00 00 00  
00648F  3  00 00 00 00  
0064A7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,64,68,128,32,0,0,0,0,96,196
0064AB  3  00 00 00 00  
0064AF  3  00 00 00 00  
0064C7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,48,24,0,0,0,0,0,0,65,4
0064CB  3  00 00 00 00  
0064CF  3  00 00 00 00  
0064E7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,64,12,6,0,0,0,0,0,0,16,65
0064EB  3  00 00 00 00  
0064EF  3  00 00 00 00  
006507  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,131,1,0,0,0,0,0,0,68,16
00650B  3  00 00 00 00  
00650F  3  00 00 00 00  
006527  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,96,192,0,0,0,0,0,0,17,4
00652B  3  00 00 00 00  
00652F  3  00 00 00 00  
006547  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,33,8,64,4,0,0,0,0,0,0
00654B  3  00 00 00 00  
00654F  3  00 00 00 00  
006567  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,8,66,16,1,0,0,0,0,0,0
00656B  3  00 00 00 00  
00656F  3  00 00 00 00  
006587  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,130,16,68,0,0,0,0,0,0,0
00658B  3  00 00 00 00  
00658F  3  00 00 00 00  
0065A7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,32,132,17,0,0,0,0,0,0,0
0065AB  3  00 00 00 00  
0065AF  3  00 00 00 00  
0065C7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,65,4,64,4,0,0,0,0
0065CB  3  00 00 00 00  
0065CF  3  00 00 00 00  
0065E7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,16,65,16,1,0,0,0,0
0065EB  3  00 00 00 00  
0065EF  3  00 00 00 00  
006607  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,68,16,68,0,0,0,0,0
00660B  3  00 00 00 00  
00660F  3  00 00 00 00  
006627  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,4,17,0,0,0,0,0
00662B  3  00 00 00 00  
00662F  3  00 00 00 00  
006647  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,64,4,0,0
00664B  3  00 00 00 00  
00664F  3  00 00 00 00  
006667  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,16,1,0,0
00666B  3  00 00 00 00  
00666F  3  00 00 00 00  
006687  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,68,0,0,0
00668B  3  00 00 00 00  
00668F  3  00 00 00 00  
0066A7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,0,0,0
0066AB  3  00 00 00 00  
0066AF  3  00 00 00 00  
0066C7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0066CB  3  00 00 00 00  
0066CF  3  00 00 00 00  
0066E7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0066EB  3  00 00 00 00  
0066EF  3  00 00 00 00  
006707  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00670B  3  00 00 00 00  
00670F  3  00 00 00 00  
006727  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00672B  3  00 00 00 00  
00672F  3  00 00 00 00  
006747  3  00 00 03 80          .byte 0,0,3,128,6,64,15,160,14,160,31,208,28,80,31,208,60,104,58,168,59,168,28,112,26,176,15,224,5,64,0,0
00674B  3  06 40 0F A0  
00674F  3  0E A0 1F D0  
006767  3  00 00 00 E0          .byte 0,0,0,224,1,144,3,232,3,168,7,244,7,20,7,244,15,26,14,170,14,234,7,28,6,172,3,248,1,80,0,0
00676B  3  01 90 03 E8  
00676F  3  03 A8 07 F4  
006787  3  00 00 00 38          .byte 0,0,0,56,0,100,0,250,0,234,1,253,1,197,1,253,131,198,131,170,131,186,1,199,1,171,0,254,0,84,0,0
00678B  3  00 64 00 FA  
00678F  3  00 EA 01 FD  
0067A7  3  00 00 00 0E          .byte 0,0,0,14,0,25,128,62,128,58,64,127,64,113,64,127,160,241,160,234,160,238,192,113,192,106,128,63,0,21,0,0
0067AB  3  00 19 80 3E  
0067AF  3  80 3A 40 7F  
0067C7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0067CB  3  00 00 00 00  
0067CF  3  00 00 00 00  
0067E7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0067EB  3  00 00 00 00  
0067EF  3  00 00 00 00  
006807  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00680B  3  00 00 00 00  
00680F  3  00 00 00 00  
006827  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00682B  3  00 00 00 00  
00682F  3  00 00 00 00  
006847  3  4A A9 37 F6          .byte 74,169,55,246,12,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00684B  3  0C 18 00 00  
00684F  3  00 00 00 00  
006867  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00686B  3  03 06 00 00  
00686F  3  00 00 00 00  
006887  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00688B  3  80 C1 00 00  
00688F  3  00 00 00 00  
0068A7  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0068AB  3  60 30 00 00  
0068AF  3  00 00 00 00  
0068C7  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,13,192,3,160,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0068CB  3  0C 18 01 C0  
0068CF  3  0D C0 03 A0  
0068E7  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,3,112,0,232,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0068EB  3  03 06 00 70  
0068EF  3  03 70 00 E8  
006907  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,220,0,58,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00690B  3  80 C1 00 1C  
00690F  3  00 DC 00 3A  
006927  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,55,128,14,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00692B  3  60 30 00 07  
00692F  3  00 37 80 0E  
006947  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,1,192,27,128,7,0,14,128,12,64,12,0,10,0,0,0,0,0,0,0,0,0,0,0
00694B  3  0C 18 01 C0  
00694F  3  01 C0 1B 80  
006967  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,0,112,6,224,1,192,3,160,3,16,3,0,2,128,0,0,0,0,0,0,0,0,0,0
00696B  3  03 06 00 70  
00696F  3  00 70 06 E0  
006987  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,28,1,184,0,112,0,232,0,196,0,192,0,160,0,0,0,0,0,0,0,0,0,0
00698B  3  80 C1 00 1C  
00698F  3  00 1C 01 B8  
0069A7  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,7,0,110,0,28,0,58,0,49,0,48,0,40,0,0,0,0,0,0,0,0,0,0
0069AB  3  60 30 00 07  
0069AF  3  00 07 00 6E  
0069C7  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,1,192,3,128,3,192,3,32,7,0,3,128,1,224,0,192,1,192,0,192,0,128,0,0
0069CB  3  0C 18 01 C0  
0069CF  3  01 C0 03 80  
0069E7  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,0,112,0,224,0,240,0,200,1,192,0,224,0,120,0,48,0,112,0,48,0,32,0,0
0069EB  3  03 06 00 70  
0069EF  3  00 70 00 E0  
006A07  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,28,0,56,0,60,0,50,0,112,0,56,0,30,0,12,0,28,0,12,0,8,0,0
006A0B  3  80 C1 00 1C  
006A0F  3  00 1C 00 38  
006A27  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,7,0,14,0,15,128,12,0,28,0,14,128,7,0,3,0,7,0,3,0,2,0,0
006A2B  3  60 30 00 07  
006A2F  3  00 07 00 0E  
006A47  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,1,192,0,216,0,224,0,224,1,100,2,120,0,48,0,56,0,88,0,12,0,0,0,0
006A4B  3  0C 18 01 C0  
006A4F  3  01 C0 00 D8  
006A67  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,0,112,0,54,0,56,0,56,0,89,0,158,0,12,0,14,0,22,0,3,0,0,0,0
006A6B  3  03 06 00 70  
006A6F  3  00 70 00 36  
006A87  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,28,128,13,0,14,0,14,64,22,128,39,0,3,128,3,128,5,192,0,0,0,0,0
006A8B  3  80 C1 00 1C  
006A8F  3  00 1C 80 0D  
006AA7  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,7,96,3,128,3,128,3,144,5,224,9,192,0,224,0,96,1,48,0,0,0,0,0
006AAB  3  60 30 00 07  
006AAF  3  00 07 60 03  
006AC7  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,1,192,0,216,0,224,0,224,1,100,2,121,0,62,0,28,0,0,0,0,0,0,0,0
006ACB  3  0C 18 01 C0  
006ACF  3  01 C0 00 D8  
006AE7  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,0,112,0,54,0,56,0,56,0,89,64,158,128,15,0,7,0,0,0,0,0,0,0,0
006AEB  3  03 06 00 70  
006AEF  3  00 70 00 36  
006B07  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,28,128,13,0,14,0,14,64,22,144,39,224,3,192,1,0,0,0,0,0,0,0,0
006B0B  3  80 C1 00 1C  
006B0F  3  00 1C 80 0D  
006B27  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,7,96,3,128,3,128,3,144,5,228,9,248,0,112,0,0,0,0,0,0,0,0,0
006B2B  3  60 30 00 07  
006B2F  3  00 07 60 03  
006B47  3               frmlst:
006B47  3  00 04                .byte 0,4
006B49  3  04 06                .byte 4,6
006B4B  3  0A 06                .byte 10,6
006B4D  3  10 07                .byte 16,7
006B4F  3  17 06                .byte 23,6
006B51  3  1D 04                .byte 29,4
006B53  3  21 04                .byte 33,4
006B55  3  25 04                .byte 37,4
006B57  3  29 05                .byte 41,5
006B59  3  2E 08                .byte 46,8
006B5B  3  36 01                .byte 54,1
006B5D  3  37 01                .byte 55,1
006B5F  3  38 06 3E 00          .byte 56,6,62,0
006B63  3               scdat:
006B63  3  8E 01 A0 01          .word 398,416,332,458,428,440,440,427,380,471,415,374,457,398,433,474,417,423,297,451,292,525,475,244,450,421
006B67  3  4C 01 CA 01  
006B6B  3  AC 01 B8 01  
006B97  3  33 01                .word 307
006B99  3  03 02 01 09          .byte 3,2,1,9,4,4,32,33,4,14,13,5,7,4,4,11,255,106,6,8,5,6,5,4,4,10,1,1,9,4,11,3,39
006B9D  3  04 04 20 21  
006BA1  3  04 0E 0D 05  
006BBA  3  23 22 1A 08          .byte 35,34,26,8,11,3,0,0,3,98,255,0,9,3,40,3,8,10,9,11,100,0,0,41,35,33,30,3,255,0,16,41,0
006BBE  3  0B 03 00 00  
006BC2  3  03 62 FF 00  
006BDB  3  03 07 06 FF          .byte 3,7,6,255,0,4,31,32,34,255,0,9,128,127,255,0,9,3,4,12,4,11,0,0,0,35,34,255,0,7,28,29,128
006BDF  3  00 04 1F 20  
006BE3  3  22 FF 00 09  
006BFC  3  7F 1D 1C FF          .byte 127,29,28,255,0,7,13,11,13,11,3,0,76,37,44,45,38,255,0,5,104,36,103,147,148,104,36,103,255,0,5,26,8
006C00  3  00 07 0D 0B  
006C04  3  0D 0B 03 00  
006C1D  3  0A 04 19 00          .byte 10,4,25,0,0,26,104,36,36,103,0,27,255,0,4,101,0,35,34,0,0,98,255,0,6,3,5,7,255,0,8,104,103
006C21  3  00 1A 68 24  
006C25  3  24 67 00 1B  
006C3E  3  FF 00 05 1F          .byte 255,0,5,31,32,33,75,255,0,9,7,8,10,255,0,6,26,8,11,255,0,6,44,45,28,29,255,0,6,37,38,5,26
006C42  3  20 21 4B FF  
006C46  3  00 09 07 08  
006C5F  3  08 0A FF 00          .byte 8,10,255,0,6,100,255,0,7,12,7,7,6,6,15,255,0,4,147,148,4,0,3,4,25,255,0,13,99,255,0,8,31
006C63  3  06 64 FF 00  
006C67  3  07 0C 07 07  
006C80  3  20 22 06 00          .byte 32,34,6,0,0,99,255,0,17,80,80,255,0,5,35,33,4,0,0,100,255,0,14,29,0,0,79,79,0,0,0,76,37
006C84  3  00 63 FF 00  
006C88  3  11 50 50 FF  
006CA1  3  2C 2D 07 FF          .byte 44,45,7,255,0,16,9,6,7,4,6,5,11,0,0,0,12,5,6,15,255,0,5,28,115,116,29,23,29,0,0,0,9
006CA5  3  00 10 09 06  
006CA9  3  07 04 06 05  
006CC2  3  04 0B 01 02          .byte 4,11,1,2,1,2,1,3,255,0,4,3,1,2,6,6,4,7,6,5,6,4,5,6,6,5,4,6,11,2,1,255,3,5
006CC6  3  01 02 01 03  
006CCA  3  FF 00 04 03  
006CE4  3  FF 00 06 03          .byte 255,0,6,3,3,3,2,1,2,1,2,1,2,1,2,1,1,2,1,2,3,3,255,0,13,255,3,15,255,0,6,65,65
006CE8  3  03 03 02 01  
006CEC  3  02 01 02 01  
006D05  3  00 00 41 41          .byte 0,0,65,65,65,0,0,18,17,18,16,18,17,18,16,18,16,18,17,18,16,17,18,16,16,18,17,18,255,86,6,17,18
006D09  3  41 00 00 12  
006D0D  3  11 12 10 12  
006D26  3  10                   .byte 16
006D27  3  FF 00 07 6F          .byte 255,0,7,111,0,0,63,255,62,6,61,255,0,6,111,255,0,9,111,255,0,4,63,64,62,62,62,64,62,62,64,62,61
006D2B  3  00 00 3F FF  
006D2F  3  3E 06 3D FF  
006D48  3  00 6F FF 00          .byte 0,111,255,0,5,111,255,0,10,63,62,62,64,64,64,62,64,62,64,62,62,61,255,0,10,111,255,0,5,63,62,62,64
006D4C  3  05 6F FF 00  
006D50  3  0A 3F 3E 3E  
006D69  3  3E 40 3E 40          .byte 62,64,62,64,62,64,62,64,62,62,255,0,16,60,109,64,62,64,60,64,60,64,60,64,62,64,60,0,0,0,111,255,0,10
006D6D  3  3E 40 3E 40  
006D71  3  3E 3E FF 00  
006D8B  3  6F 00 29 3C          .byte 111,0,41,60,109,60,109,60,109,60,109,60,64,62,60,41,255,0,7,111,255,0,10,39,60,60,59,52,52,109,60,60,39
006D8F  3  6D 3C 6D 3C  
006D93  3  6D 3C 6D 3C  
006DAC  3  29 FF 00 0C          .byte 41,255,0,12,111,255,0,4,111,0,41,0,39,26,52,57,58,39,0,41,0,0,0,111,255,0,18,41,0,52,51,25,39
006DB0  3  6F FF 00 04  
006DB4  3  6F 00 29 00  
006DCD  3  FF 00 07 3F          .byte 255,0,7,63,62,62,62,61,255,0,6,63,62,61,255,0,5,57,51,0,41,255,0,6,63,63,255,64,4,61,255,0,4
006DD1  3  3E 3E 3E 3D  
006DD5  3  FF 00 06 3F  
006DEE  3  3F 3C 3C 3E          .byte 63,60,60,62,61,255,0,4,52,51,58,0,0,0,63,63,63,109,60,64,60,60,60,64,60,255,0,4,41,60,60,60,41
006DF2  3  3D FF 00 04  
006DF6  3  34 33 3A 00  
006E0F  3  FF 00 04 46          .byte 255,0,4,70,71,0,0,0,63,64,62,64,62,109,41,102,60,43,60,41,255,0,6,43,41,0,0,0,59,53,73,72,0,0,0
006E13  3  47 00 00 00  
006E17  3  3F 40 3E 40  
006E32  3  29 FF 3C 04          .byte 41,255,60,4,0,0,102,0,66,255,0,8,66,132,131,255,0,4,57,51,0,0,0,134,133,108,43,0,0,85,255,0,8
006E36  3  00 00 66 00  
006E3A  3  42 FF 00 08  
006E53  3  1B 00 1C 1D          .byte 27,0,28,29,132,131,28,38,46,47,50,50,48,49,37,134,133,0,66,28,0,82,28,255,0,4,7,255,6,6,7,7,6,6
006E57  3  84 83 1C 26  
006E5B  3  2E 2F 32 32  
006E75  3  07 07 07 06          .byte 7,7,7,6,7,6,6,6,7,7,6,6,7,7,6,7,6,6,7,1,1,2,1,2,1,2,1,2,1,1,2,1,1
006E79  3  07 06 06 06  
006E7D  3  07 07 06 06  
006E96  3  02 01 02 01          .byte 2,1,2,1,1,2,1,2,1,2,1,2,1,2,1,2,255,3,30,16,17,16,18,16,18,16,17,16,18,16,18,17,16
006E9A  3  01 02 01 02  
006E9E  3  01 02 01 02  
006EB7  3  12 10 12 11          .byte 18,16,18,17,16,18,16,18,16,18,17,16,18,16,17,18
006EBB  3  10 12 10 12  
006EBF  3  10 12 11 10  
006EC7  3  FF 00 0D 6F          .byte 255,0,13,111,255,0,15,111,255,0,4,111,255,0,18,111,255,0,16,111,255,0,6,111,255,0,13,111,255,0,4,111,255,0,14
006ECB  3  FF 00 0F 6F  
006ECF  3  FF 00 04 6F  
006EEA  3  6F 00 00 00          .byte 111,0,0,0,111,255,0,20,63,62,62,62,61,255,0,24,109,60,64,62,64,61,61,255,0,6,111,255,0,4,111,255,0,5
006EEE  3  6F FF 00 14  
006EF2  3  3F 3E 3E 3E  
006F0C  3  6F 00 00 00          .byte 111,0,0,0,63,62,61,109,60,60,64,64,109,255,0,20,63,64,62,64,61,108,43,109,60,60,0,0,111,255,0,17,64
006F10  3  3F 3E 3D 6D  
006F14  3  3C 3C 40 40  
006F2D  3  FF 3C 04 00          .byte 255,60,4,0,43,41,255,0,22,41,40,43,107,0,0,43,255,0,8,63,62,61,255,0,13,41,43,0,0,0,66,255,0,8
006F31  3  2B 29 FF 00  
006F35  3  16 29 28 2B  
006F4F  3  40 3C 40 FF          .byte 64,60,64,255,0,6,29,0,83,255,0,5,66,255,0,6,135,136,255,0,4,41,43,255,0,6,9,6,10,82,255,0,10
006F53  3  00 06 1D 00  
006F57  3  53 FF 00 05  
006F70  3  4C 25 87 88          .byte 76,37,135,136,38,75,0,0,0,66,255,0,5,9,11,1,8,6,10,255,0,10,9,6,6,6,10,255,0,7,28,29,5
006F74  3  26 4B 00 00  
006F78  3  00 42 FF 00  
006F91  3  01 03 01 02          .byte 1,3,1,2,8,10,0,28,0,0,28,24,29,28,9,11,2,1,2,12,10,28,29,0,0,6,7,6,7,11,2,3,3,3
006F95  3  08 0A 00 1C  
006F99  3  00 00 1C 18  
006FB3  3  02 08 04 06          .byte 2,8,4,6,7,6,7,6,7,6,11,1,3,3,3,2,12,6,7,6,7,1,2,1,1,2,3,0,0,0,3,2,1
006FB7  3  07 06 07 06  
006FBB  3  07 06 0B 01  
006FD4  3  02 01 02 01          .byte 2,1,2,1,2,1,2,1,3,0,0,0,3,1,2,1,2,1,255,3,5,255,0,5,255,3,10,255,0,5,255,3,5
006FD8  3  02 01 02 01  
006FDC  3  03 00 00 00  
006FF5  3  12 12 10 12          .byte 18,18,16,18,17,18,16,18,16,18,17,18,16,18,17,18,16,18,18,18,16,17,18,16,17,18,18,16,17,18
006FF9  3  11 12 10 12  
006FFD  3  10 12 11 12  
007013  3  FF 00 07 03          .byte 255,0,7,3,2,5,32,34,6,2,3,255,0,6,255,3,4,255,0,12,3,1,4,35,34,5,1,3,255,0,5,3,1
007017  3  02 05 20 22  
00701B  3  06 02 03 FF  
007034  3  02 01 02 03          .byte 2,1,2,3,3,255,0,8,3,3,1,9,11,35,33,8,10,1,3,0,0,0,3,2,9,6,5,10,1,2,3,3,255,0,5
007038  3  03 FF 00 08  
00703C  3  03 03 01 09  
007057  3  03 02 01 09          .byte 3,2,1,9,11,31,32,34,26,5,2,3,0,0,3,2,1,5,39,0,8,5,10,1,2,3,0,0,0,3,2,9,5
00705B  3  0B 1F 20 22  
00705F  3  1A 05 02 03  
007078  3  0B 00 00 23          .byte 11,0,0,35,34,0,6,5,1,3,3,1,9,4,15,41,0,0,69,12,6,10,1,0,0,3,2,9,11,0,0,37,38
00707C  3  22 00 06 05  
007080  3  01 03 03 01  
007099  3  2C 2D 1C 05          .byte 44,45,28,5,11,2,3,2,9,15,69,255,0,6,26,5,2,0,0,3,1,4,25,0,31,147,148,8,5,4,11,1,3,3
00709D  3  0B 02 03 02  
0070A1  3  09 0F 45 FF  
0070BB  3  01 05 00 50          .byte 1,5,0,80,80,255,0,6,6,1,0,0,3,2,8,10,0,0,35,34,20,5,1,1,3,0,3,2,8,10,79,79,255,0,6
0070BF  3  50 FF 00 06  
0070C3  3  06 01 00 00  
0070DE  3  04 02 00 00          .byte 4,2,0,0,0,3,2,7,21,31,32,34,26,6,2,1,255,3,4,1,6,104,125,103,255,0,5,6,1,0,0,3,2
0070E2  3  00 03 02 07  
0070E6  3  15 1F 20 22  
0070FF  3  09 0B 00 00          .byte 9,11,0,0,35,34,0,8,6,10,2,1,2,1,2,5,126,107,255,0,5,9,11,2,0,0,3,1,5,91,0,0,35
007103  3  23 22 00 08  
007107  3  06 0A 02 01  
007120  3  21 1E 00 51          .byte 33,30,0,81,8,6,5,4,7,6,11,25,255,0,4,104,103,7,1,3,0,0,3,2,7,0,0,0,35,34,0,0,81
007124  3  08 06 05 04  
007128  3  07 06 0B 19  
007141  3  00 45 51 45          .byte 0,69,81,69,81,255,0,7,108,9,11,2,3,0,0,3,1,8,10,23,0,35,34,0,0,41,0,0,81,0,41,255,0,7
007145  3  51 FF 00 07  
007149  3  6C 09 0B 02  
007163  3  17 05 01 03          .byte 23,5,1,3,255,0,4,3,1,8,5,11,35,33,30,255,0,4,41,255,0,5,9,7,6,5,6,11,2,3,255,0,5
007167  3  FF 00 04 03  
00716B  3  01 08 05 0B  
007184  3  03 01 08 0A          .byte 3,1,8,10,44,45,0,0,83,255,0,4,22,0,0,9,11,1,2,1,2,1,3,255,0,7,3,1,8,4,7,10,0
007188  3  2C 2D 00 00  
00718C  3  53 FF 00 04  
0071A5  3  52 00 18 09          .byte 82,0,24,9,4,7,5,4,11,1,255,3,5,255,0,9,3,1,2,1,8,7,5,6,5,11,1,2,1,2,1,3,255,0,15
0071A9  3  04 07 05 04  
0071AD  3  0B 01 FF 03  
0071C8  3  03 03 03 02          .byte 3,3,3,2,1,2,1,2,1,255,3,5,255,0,19,255,3,6,255,0,14
0071CC  3  01 02 01 02  
0071D0  3  01 FF 03 05  
0071DD  3  05 04 05 06          .byte 5,4,5,6,5,4,4,5,6,11,35,34,12,6,5,4,5,6,14,2,1,2,1,2,13,6,5,4,6,6,3,3,91
0071E1  3  05 04 04 05  
0071E5  3  06 0B 23 22  
0071FE  3  03 03 03 64          .byte 3,3,3,100,98,3,0,35,33,75,255,3,5,12,4,4,6,5,5,11,255,3,4,4,255,0,7,98,0,0,35,34,255,0,6
007202  3  62 03 00 23  
007206  3  21 4B FF 03  
007221  3  03 03 51 08          .byte 3,3,81,8,10,3,3,0,0,80,80,6,255,0,9,31,32,34,255,0,7,31,40,3,8,10,0,0,0,79,79,4,255,0,4
007225  3  0A 03 03 00  
007229  3  00 50 50 06  
007244  3  1C 00 00 00          .byte 28,0,0,0,28,29,44,45,38,28,255,0,6,41,0,3,4,0,0,0,4,5,15,4,6,7,6,6,7,6,6,7,7,7
007248  3  1C 1D 2C 2D  
00724C  3  26 1C FF 00  
007266  3  06 06 07 0F          .byte 6,6,7,15,0,0,0,83,0,0,0,20,6,0,0,0,100,41,0,3,3,100,255,3,11,255,0,4,82,29,0,0,3
00726A  3  00 00 00 53  
00726E  3  00 00 00 14  
007287  3  08 0A FF 00          .byte 8,10,255,0,22,12,7,15,0,0,0,3,12,7,5,4,7,5,255,0,4,130,129,0,0,0,132,131,255,0,12,13,11
00728B  3  16 0C 07 0F  
00728F  3  00 00 00 03  
0072A8  3  03 29 28 03          .byte 3,41,40,3,3,0,0,76,37,130,129,38,0,37,132,131,38,75,255,0,7,28,29,0,5,3,0,0,39,30,0,6,7,7
0072AC  3  03 00 00 4C  
0072B0  3  25 82 81 26  
0072CA  3  06 06 06 07          .byte 6,6,6,7,7,7,4,4,7,7,7,6,6,7,6,7,6,6,6,7,15,3,0,0,41,0,0,255,3,5,100,81,98
0072CE  3  07 07 04 04  
0072D2  3  07 07 07 06  
0072EB  3  03 03 03 63          .byte 3,3,3,99,3,100,3,91,3,81,41,3,3,3,100,3,255,0,11,31,40,101,0,0,0,99,255,0,5,41,255,0,18
0072EF  3  03 64 03 5B  
0072F3  3  03 51 29 03  
00730C  3  29 FF 00 1C          .byte 41,255,0,28,124,255,0,5,28,29,0,23,28,255,0,11,85,255,0,5,28,29,82,28,0,0,0,104,255,36,6,103,0,0,0
007310  3  7C FF 00 05  
007314  3  1C 1D 00 17  
00732F  3  1C FF 00 04          .byte 28,255,0,4,37,82,38,0,255,36,7,103,0,0,0,108,43,107,69,43,107,0,0,0,104,36,103,0,0,0,104,36,36,36
007333  3  25 52 26 00  
007337  3  FF 24 07 67  
007351  3  FF 03 05 6C          .byte 255,3,5,108,43,255,65,5,43,0,0,43,0,65,65,65,3,43,65,65,65,0,0,108,43,3,18,16,17,18,18,16,92
007355  3  2B FF 41 05  
007359  3  2B 00 00 2B  
007372  3  12 10 12 12          .byte 18,16,18,18,16,92,18,17,92,18,18,17,18,18,92,18,18,16,17,18,16,92,16
007376  3  10 5C 12 11  
00737A  3  5C 12 12 11  
007389  3  02 01 04 00          .byte 2,1,4,0,35,33,30,0,4,1,2,3,3,2,13,4,5,6,4,4,6,11,0,5,6,5,4,11,0,5,3,2,5
00738D  3  23 21 1E 00  
007391  3  04 01 02 03  
0073AA  3  00 23 22 00          .byte 0,35,34,0,0,12,4,10,1,2,13,11,255,3,5,39,0,0,41,3,3,3,0,0,3,3,1,8,4,35,34,0,0
0073AE  3  00 0C 04 0A  
0073B2  3  01 02 0D 0B  
0073CB  3  03 29 08 06          .byte 3,41,8,6,4,11,25,255,0,5,40,255,0,9,3,2,13,11,35,33,30,0,0,0,3,0,0,3,255,0,6,41,255,0,9
0073CF  3  04 0B 19 FF  
0073D3  3  00 05 28 FF  
0073EE  3  03 01 04 65          .byte 3,1,4,101,35,34,255,0,10,134,133,255,0,12,2,13,11,31,32,34,255,0,10,134,133,255,0,5,28,29,0,0,9
0073F2  3  23 22 FF 00  
0073F6  3  0A 86 85 FF  
00740F  3  05 04 01 04          .byte 5,4,1,4,0,0,35,34,255,0,9,31,147,148,75,8,7,6,5,4,4,6,4,11,3,3,2,4,23,0,35,33,30
007413  3  00 00 23 22  
007417  3  FF 00 09 1F  
007430  3  FF 00 09 23          .byte 255,0,9,35,34,0,0,9,11,3,3,40,3,41,3,3,0,1,8,11,37,44,45,38,255,0,9,35,33,30,0,6,3
007434  3  22 00 00 09  
007438  3  0B 03 03 28  
007451  3  00 00 28 FF          .byte 0,0,40,255,0,5,3,1,8,6,5,4,11,255,0,8,31,32,34,0,0,5,3,0,0,39,255,0,6,3,1,2,1
007455  3  00 05 03 01  
007459  3  08 06 05 04  
007472  3  06 68 67 FF          .byte 6,104,103,255,0,6,28,37,44,45,38,9,11,3,0,0,41,0,0,9,4,5,2,1,3,3,2,5,107,0,0,0,83
007476  3  00 06 1C 25  
00747A  3  2C 2D 26 09  
007493  3  00 00 68 24          .byte 0,0,104,36,122,122,122,36,103,3,255,0,5,9,11,3,3,5,10,2,1,9,11,255,0,4,82,0,0,0,69,108,102
007497  3  7A 7A 7A 24  
00749B  3  67 03 FF 00  
0074B4  3  6B 45 FF 00          .byte 107,69,255,0,6,8,11,3,0,0,1,8,5,5,11,25,0,0,104,36,103,255,0,5,102,255,0,4,84,0,0,0,100
0074B8  3  06 08 0B 03  
0074BC  3  00 00 01 08  
0074D5  3  03 00 00 00          .byte 3,0,0,0,3,3,0,0,0,80,80,0,0,102,107,255,0,5,105,255,0,4,82,29,255,0,12,79,79,0,0,105,255,0,10
0074D9  3  03 03 00 00  
0074DD  3  00 50 50 00  
0074F8  3  1A 08 05 04          .byte 26,8,5,4,10,0,28,29,0,0,255,5,4,6,5,6,10,255,0,14,3,3,8,104,122,122,36,36,255,3,8,65,65,65
0074FC  3  0A 00 1C 1D  
007500  3  00 00 FF 05  
00751A  3  00 00 FF 41          .byte 0,0,255,65,10,0,3,3,43,107,3,3,18,18,17,18,18,16,18,16,18,255,86,6,18,18,16,17,18,18,16,18,17
00751E  3  0A 00 03 03  
007522  3  2B 6B 03 03  
00753B  3  12 10 5C 10          .byte 18,16,92,16,16,17
00753F  3  10 11        
007541  3  FF 00 0E 6F          .byte 255,0,14,111,255,0,18,111,0,63,62,62,62,61,255,0,8,111,0,0,0,63,62,62,61,255,0,4,111,0,0,63,62,62
007545  3  FF 00 12 6F  
007549  3  00 3F 3E 3E  
007563  3  40 3E 40 3E          .byte 64,62,64,62,62,61,0,0,0,112,255,0,5,63,62,62,64,62,61,0,111,0,0,0,63,64,62,64,62,64,62,64,62
007567  3  3E 3D 00 00  
00756B  3  00 70 FF 00  
007584  3  40 3D 00 00          .byte 64,61,0,0,113,0,0,0,63,62,64,62,64,62,64,62,62,61,0,0,63,62,255,64,10,255,0,5,63,62,64,62,64
007588  3  71 00 00 00  
00758C  3  3F 3E 40 3E  
0075A5  3  3E 40 3E 40          .byte 62,64,62,64,62,62,0,0,64,62,62,64,62,64,62,64,62,64,62,62,255,0,4,63,62,64,62,64,62,64,62,64,62
0075A9  3  3E 3E 00 00  
0075AD  3  40 3E 3E 40  
0075C6  3  40 3E 3D 00          .byte 64,62,61,0,60,64,60,64,60,109,60,109,64,60,60,64,111,0,0,0,109,62,64,60,109,60,109,60,109,60,64,62,64
0075CA  3  3C 40 3C 40  
0075CE  3  3C 6D 3C 6D  
0075E7  3  00 45 3C 3C          .byte 0,69,60,60,59,53,52,52,56,58,60,60,69,255,0,4,109,60,109,60,59,52,52,56,60,109,109,64,64,0,111,0,40
0075EB  3  3B 35 34 34  
0075EF  3  38 3A 3C 3C  
007608  3  3C 29 34 34          .byte 60,41,52,52,60,60,40,41,255,0,5,69,255,60,4,52,52,56,58,60,60,60,69,0,0,0,41,0,108,52,51,0,0
00760C  3  3C 3C 28 29  
007610  3  FF 00 05 45  
007629  3  29 FF 00 07          .byte 41,255,0,7,40,41,59,53,52,52,41,0,0,39,255,0,8,52,51,255,0,10,41,0,0,0,52,51,107,0,0,41,255,0,8
00762D  3  28 29 3B 35  
007631  3  34 34 29 00  
00764C  3  34 33 3A 00          .byte 52,51,58,0,0,19,255,0,6,19,0,0,0,52,51,255,0,11,59,52,51,255,0,4,88,19,0,0,19,88,255,0,4
007650  3  00 13 FF 00  
007654  3  06 13 00 00  
00766D  3  34 33 3A FF          .byte 52,51,58,255,0,8,85,0,0,52,51,0,124,0,0,19,78,0,0,78,0,0,0,124,0,52,51,0,0,83,255,0,4
007671  3  00 08 55 00  
007675  3  00 34 33 00  
00768E  3  1C 1D 52 2E          .byte 28,29,82,46,47,50,50,48,82,19,19,19,88,0,0,88,19,19,19,82,47,50,50,48,49,82,0,0,28,255,4,10,54
007692  3  2F 32 32 30  
007696  3  52 13 13 13  
0076AF  3  FF 4A 08 37          .byte 255,74,8,55,255,4,10,2,1,2,1,2,1,2,1,2,1,8,5,6,4,7,4,6,5,4,11,2,1,2,1,2,1
0076B3  3  FF 04 0A 02  
0076B7  3  01 02 01 02  
0076D0  3  02 01 02 01          .byte 2,1,2,1,255,3,10,1,2,1,2,1,2,1,2,1,2,255,3,10,18,17,16,18,16,17,18,18,67,255,3,12,68
0076D4  3  FF 03 0A 01  
0076D8  3  02 01 02 01  
0076F1  3  11 10 11 12          .byte 17,16,17,18,16,18,17,16
0076F5  3  10 12 11 10  
0076F9  3  00 03 02 09          .byte 0,3,2,9,4,4,6,6,6,10,109,110,109,110,110,109,110,109,110,110,110,60,0,0,111,255,0,5,3,2,9,4,11
0076FD  3  04 04 06 06  
007701  3  06 0A 6D 6E  
00771A  3  03 27 1E 03          .byte 3,39,30,3,12,6,10,108,9,6,10,107,110,13,107,41,81,255,0,7,111,3,1,4,11,41,0,41,0,0,3,3,12
00771E  3  0C 06 0A 6C  
007722  3  09 06 0A 6B  
00773B  3  06 0B 03 0C          .byte 6,11,3,12,6,6,11,3,0,39,255,0,4,111,0,0,0,3,2,6,3,255,0,7,3,3,3,0,255,3,4,0,0
00773F  3  06 06 0B 03  
007743  3  00 27 FF 00  
00775C  3  29 FF 00 08          .byte 41,255,0,8,3,1,12,10,255,0,9,134,133,0,0,80,80,255,0,4,111,255,0,6,3,146,1,4,255,0,8,37,134
007760  3  03 01 0C 0A  
007764  3  FF 00 09 86  
00777D  3  85 26 00 4F          .byte 133,38,0,79,79,255,0,11,3,2,9,4,21,0,0,0,9,10,0,9,4,6,5,10,0,9,4,11,255,0,7,111,0,0
007781  3  4F FF 00 0B  
007785  3  03 02 09 04  
00779F  3  01 09 04 0B          .byte 1,9,4,11,0,0,104,103,4,12,4,11,0,0,0,12,7,11,3,101,255,0,10,2,4,11,3,0,0,0,108,12,10
0077A3  3  00 00 68 67  
0077A7  3  04 0C 04 0B  
0077C0  3  03 03 00 00          .byte 3,3,0,0,0,3,3,3,255,0,12,1,12,4,104,103,0,0,0,13,11,255,0,20,2,9,4,107,255,0,4,4,255,0,21
0077C4  3  00 03 03 03  
0077C8  3  FF 00 0C 01  
0077E3  3  09 04 0B FF          .byte 9,4,11,255,0,5,4,29,255,0,20,4,11,3,0,0,0,104,151,151,122,122,103,255,0,8,132,131,255,0,8,6,25
0077E7  3  00 05 04 1D  
0077EB  3  FF 00 14 04  
007804  3  FF 00 05 6C          .byte 255,0,5,108,8,5,107,28,0,85,0,0,0,76,77,37,132,131,38,75,29,255,0,5,4,0,0,0,37,38,0,0,0
007808  3  08 05 6B 1C  
00780C  3  00 55 00 00  
007825  3  08 04 06 0A          .byte 8,4,6,10,82,9,7,6,4,7,6,4,5,6,4,6,4,10,0,0,0,6,0,0,0,147,148,0,0,37,9,5,2
007829  3  52 09 07 06  
00782D  3  04 07 06 04  
007846  3  0C 04 07 04          .byte 12,4,7,4,11,2,1,2,1,2,1,2,1,2,8,7,6,4,8,10,0,0,35,33,30,0,9,11,12,10,1,2,1
00784A  3  0B 02 01 02  
00784E  3  01 02 01 02  
007867  3  02 01 FF 03          .byte 2,1,255,3,7,146,3,1,2,1,2,2,8,10,31,32,34,0,0,7,1,1,6,255,3,6,255,0,7,255,3,6,1
00786B  3  07 92 03 01  
00786F  3  02 01 02 02  
007888  3  05 00 23 22          .byte 5,0,35,34,0,0,5,1,1,4,18,17,16,18,18,16,18,16,18,17,18,18,16,17,18,18,16,18
00788C  3  00 00 05 01  
007890  3  01 04 12 11  
0078A4  3  92 03 03 02          .byte 146,3,3,2,13,5,11,10,2,1,2,255,3,8,2,9,11,0,8,10,1,2,1,2,1,3,1,2,13,11,3,3,8
0078A8  3  0D 05 0B 0A  
0078AC  3  02 01 02 FF  
0078C5  3  05 06 0A 01          .byte 5,6,10,1,2,1,2,1,2,1,2,9,11,0,0,26,8,7,6,4,5,4,2,9,5,11,25,255,0,4,98,6,5
0078C9  3  02 01 02 01  
0078CD  3  02 01 02 09  
0078E6  3  06 05 04 06          .byte 6,5,4,6,5,4,6,11,25,0,0,0,255,3,6,9,11,3,81,255,0,5,101,0,0,0,101,99,100,255,0,14,11
0078EA  3  05 04 06 0B  
0078EE  3  19 00 00 00  
007907  3  62 00 29 FF          .byte 98,0,41,255,0,10,100,255,0,21,9,5,10,28,255,0,9,28,255,0,4,83,255,0,10,9,11,81,8,6,4,5,4
00790B  3  00 0A 64 FF  
00790F  3  00 15 09 05  
007928  3  06 04 07 04          .byte 6,4,7,4,5,6,7,6,10,0,0,82,255,0,5,5,6,4,7,5,11,25,81,3,3,76,40,0,31,40,41,3,3
00792C  3  05 06 07 06  
007930  3  0A 00 00 52  
007949  3  00 51 03 08          .byte 0,81,3,8,5,6,7,5,6,4,5,7,3,3,81,3,81,3,0,39,30,0,0,39,30,0,41,0,0,0,31,40,0
00794D  3  05 06 07 05  
007951  3  06 04 05 07  
00796A  3  03 51 00 00          .byte 3,81,0,0,255,3,5,0,31,40,0,39,30,0,81,0,0,0,41,255,0,7,41,0,31,40,255,0,9,81,0,81,0,0
00796E  3  FF 03 05 00  
007972  3  1F 28 00 27  
00798C  3  29 FF 00 0E          .byte 41,255,0,14,81,255,0,9,41,31,40,255,0,17,41,255,0,11,81,255,0,29,41,255,0,9,28,29,0,24,255,0,24
007990  3  51 FF 00 09  
007994  3  29 1F 28 FF  
0079AD  3  09 07 04 06          .byte 9,7,4,6,5,6,4,5,6,11,25,0,0,26,12,5,6,4,0,0,28,27,0,0,37,38,0,23,28,9,11,2,1
0079B1  3  05 06 04 05  
0079B5  3  06 0B 19 00  
0079CE  3  02 01 02 01          .byte 2,1,2,1,2,1,101,255,0,5,1,2,1,7,6,6,5,11,31,147,148,104,122,103,6,255,3,8,255,0,8,3,3
0079D2  3  02 01 65 FF  
0079D6  3  00 05 01 02  
0079EF  3  02 01 02 07          .byte 2,1,2,7,98,0,35,33,30,9,7,11,255,0,9,65,65,0,0,255,65,4,0,18,17,16,6,0,76,32,34,0,6
0079F3  3  62 00 23 21  
0079F7  3  1E 09 07 0B  
007A10  3  11 12 10 12          .byte 17,18,16,18,18,16,18,17,18,16,18,255,86,7,17,18
007A14  3  12 10 12 11  
007A18  3  12 10 12 FF  
007A20  3  02 01 02 01          .byte 2,1,2,1,9,4,5,5,6,5,10,1,2,1,2,9,4,6,5,5,6,5,10,1,255,3,6,5,6,5,4,11,3
007A24  3  09 04 05 05  
007A28  3  06 05 0A 01  
007A41  3  51 03 51 03          .byte 81,3,81,3,8,6,5,4,7,11,3,0,0,81,3,81,8,10,2,1,2,1,2,1,3,3,81,3,0,0,81,0,39
007A45  3  08 06 05 04  
007A49  3  07 0B 03 00  
007A62  3  1E FF 03 04          .byte 30,255,3,4,81,3,0,0,0,81,76,40,3,8,6,4,5,5,5,10,0,0,41,0,0,0,39,77,40,255,0,4,76
007A66  3  51 03 00 00  
007A6A  3  00 51 4C 28  
007A83  3  28 FF 00 04          .byte 40,255,0,4,81,0,41,0,3,81,255,3,4,5,255,0,6,39,30,41,255,0,5,41,255,0,4,41,134,133,0,0,81
007A87  3  51 00 29 00  
007A8B  3  03 51 FF 03  
007AA4  3  00 00 00 09          .byte 0,0,0,9,11,0,0,84,0,0,0,41,255,0,13,134,133,0,0,41,0,0,9,11,2,0,0,82,255,0,5,130,129
007AA8  3  0B 00 00 54  
007AAC  3  00 00 00 29  
007AC5  3  FF 00 04 1C          .byte 255,0,4,28,255,0,4,123,147,148,103,0,0,0,9,11,1,3,5,4,6,11,255,0,4,130,129,0,28,23,123,151,122,122
007AC9  3  FF 00 04 7B  
007ACD  3  93 94 67 00  
007AE7  3  72 67 00 23          .byte 114,103,0,35,34,0,0,0,26,12,10,2,255,3,4,0,0,0,104,36,147,148,104,151,151,103,8,6,107,0,0,0,35
007AEB  3  22 00 00 00  
007AEF  3  1A 0C 0A 02  
007B08  3  22 FF 00 04          .byte 34,255,0,4,3,8,10,1,255,0,8,35,34,0,0,108,8,7,7,10,0,0,0,35,33,30,255,0,4,3,12,5,255,0,8
007B0C  3  03 08 0A 01  
007B10  3  FF 00 08 23  
007B2B  3  23 21 1E 00          .byte 35,33,30,0,0,26,8,6,11,0,0,0,35,34,255,0,6,3,3,255,0,7,31,32,34,255,0,4,20,5,25,0,0,0
007B2F  3  00 1A 08 06  
007B33  3  0B 00 00 00  
007B4D  3  23 22 FF 00          .byte 35,34,255,0,16,35,34,255,0,5,6,21,0,0,31,32,34,255,0,10,28,29,0,0,76,37,44,45,38,75,0,0,9
007B51  3  10 23 22 FF  
007B55  3  00 05 06 15  
007B6E  3  0B FF 00 04          .byte 11,255,0,4,35,34,255,0,8,12,7,5,4,5,4,7,6,7,6,6,6,7,6,15,98,255,0,4,35,33,75,255,0,4
007B72  3  23 22 FF 00  
007B76  3  08 0C 07 05  
007B90  3  1C 00 00 09          .byte 28,0,0,9,11,3,3,0,0,0,255,3,4,100,3,3,3,101,255,0,4,35,34,255,0,5,8,6,5,5,255,0,12
007B94  3  0B 03 03 00  
007B98  3  00 00 FF 03  
007BB1  3  53 FF 00 06          .byte 83,255,0,6,35,34,255,0,5,9,11,2,4,37,38,75,0,28,0,0,0,89,0,0,0,82,255,0,5,28,44,45,38
007BB5  3  23 22 FF 00  
007BB9  3  05 09 0B 02  
007BD2  3  4B 00 09 06          .byte 75,0,9,6,11,2,3,5,32,33,8,4,5,6,11,0,8,7,5,5,4,4,7,4,5,6,4,5,6,7,5,4,11
007BD6  3  0B 02 03 05  
007BDA  3  20 21 08 04  
007BF3  3  02 01 03 92          .byte 2,1,3,146
007BF7  3  00 08 06 04          .byte 0,8,6,4,10,1,1,1,9,6,4,6,11,255,106,4,8,5,11,255,106,5,8,6,10,2,3,0,100,3,3,8,10
007BFB  3  0A 01 01 01  
007BFF  3  09 06 04 06  
007C18  3  09 06 0B 00          .byte 9,6,11,0,0,3,255,0,6,3,255,0,7,3,8,10,1,255,0,4,3,12,11,25,3,255,0,18,26,4,2,255,0,5
007C1C  3  00 03 FF 00  
007C20  3  06 03 FF 00  
007C3A  3  03 03 FF 00          .byte 3,3,255,0,20,3,5,1,255,0,18,27,0,0,28,255,0,5,3,4,2,255,0,17,9,4,10,104,151,122,103,0,0,0
007C3E  3  14 03 05 01  
007C42  3  FF 00 12 1B  
007C5C  3  03 06 01 FF          .byte 3,6,1,255,0,13,28,29,0,0,4,2,5,0,102,107,255,0,4,28,8,10,255,0,5,128,127,255,0,4,104,36,122,122
007C60  3  00 0D 1C 1D  
007C64  3  00 00 04 02  
007C7E  3  67 09 0B 01          .byte 103,9,11,1,4,21,102,255,0,4,104,151,103,8,255,0,4,28,128,127,255,0,6,108,102,0,6,1,2,4,0,105,255,0,5
007C82  3  04 15 66 FF  
007C86  3  00 04 68 97  
007CA1  3  69 6B FF 00          .byte 105,107,255,0,4,104,36,147,148,36,103,255,0,5,105,9,11,2,1,5,104,151,122,103,132,131,255,0,9,35,34,69,255,0,6
007CA5  3  04 68 24 93  
007CA9  3  94 24 67 FF  
007CC4  3  09 0B 02 92          .byte 9,11,2,146,2,8,10,102,107,0,132,131,255,0,9,35,33,30,255,0,6,5,1,3,3,3,1,8,7,10,31,147,148
007CC8  3  02 08 0A 66  
007CCC  3  6B 00 84 83  
007CE5  3  4B FF 00 07          .byte 75,255,0,7,31,32,34,255,0,6,26,4,2,3,0,0,3,1,2,5,0,35,34,255,0,9,35,34,255,0,7,8,10
007CE9  3  1F 20 22 FF  
007CED  3  00 06 1A 04  
007D06  3  01 03 00 00          .byte 1,3,0,0,3,1,4,25,35,33,30,255,0,5,76,77,37,44,45,38,9,4,5,10,28,24,29,5,2,3,0,0,3
007D0A  3  03 01 04 19  
007D0E  3  23 21 1E FF  
007D27  3  02 08 0A 2C          .byte 2,8,10,44,45,38,0,0,0,4,5,6,4,5,6,4,5,11,1,2,8,5,6,5,11,1,3,0,0,0,3,1,8
007D2B  3  2D 26 00 00  
007D2F  3  00 04 05 06  
007D48  3  07 05 04 06          .byte 7,5,4,6,5,4,2,1,2,1,2,1,2,1,2,3,3,1,2,1,2,1,3,255,0,5,3,2,1,2,1,2,1
007D4C  3  05 04 02 01  
007D50  3  02 01 02 01  
007D69  3  02 FF 03 09          .byte 2,255,3,9,0,0,255,3,5,255,0,7,255,3,7,17,18,16,18,17,18,16,18,18,16,18,17,18,16,17,18,18,16
007D6D  3  00 00 FF 03  
007D71  3  05 FF 00 07  
007D8A  3  12 12 12 10          .byte 18,18,18,16,18,17,18,18,16,17,18,16
007D8E  3  12 11 12 12  
007D92  3  10 11 12 10  
007D96  3  FF 00 04 03          .byte 255,0,4,3,2,5,0,8,5,4,7,4,14,2,1,2,13,6,4,11,106,106,106,8,10,2,1,2,3,0,3,3,3
007D9A  3  02 05 00 08  
007D9E  3  05 04 07 04  
007DB7  3  02 09 0F 00          .byte 2,9,15,0,3,39,30,41,3,8,7,5,6,11,41,40,3,0,0,0,99,8,6,5,10,1,3,2,2,2,9,15,3
007DBB  3  03 27 1E 29  
007DBF  3  03 08 07 05  
007DD8  3  00 4C 28 00          .byte 0,76,40,0,0,0,3,39,3,40,3,0,39,30,0,0,0,100,3,40,41,8,10,2,9,5,5,11,25,0,0,0,39
007DDC  3  00 00 03 27  
007DE0  3  03 28 03 00  
007DF9  3  1E 00 00 1F          .byte 30,0,0,31,40,0,41,0,31,40,255,0,6,41,0,3,8,9,15,40,41,98,255,0,4,41,255,0,4,39,30,0,0,0
007DFD  3  28 00 29 00  
007E01  3  1F 28 FF 00  
007E1B  3  29 FF 00 09          .byte 41,255,0,9,9,15,3,39,75,98,0,28,121,255,0,6,39,75,255,0,12,9,6,0,31,40,0,101,104,151,122,103,255,0,4
007E1F  3  09 0F 03 27  
007E23  3  4B 62 00 1C  
007E3E  3  4C 28 FF 00          .byte 76,40,255,0,12,26,8,7,0,0,41,0,0,0,102,107,255,0,6,41,255,0,6,28,29,121,255,0,4,100,8,255,0,6
007E42  3  0C 1A 08 07  
007E46  3  00 00 29 00  
007E60  3  69 FF 00 0E          .byte 105,255,0,14,104,151,122,103,255,0,4,3,255,0,69,132,131,0,0,134,133,0,0,130,129,255,0,18,76,37,132,131,38
007E64  3  68 97 7A 67  
007E68  3  FF 00 04 03  
007E81  3  25 86 85 26          .byte 37,134,133,38,37,130,129,38,75,255,0,15,29,9,4,7,5,4,7,7,4,5,7,5,4,7,10,255,0,12,28,29,9
007E85  3  25 82 81 26  
007E89  3  4B FF 00 0F  
007EA2  3  04 0B 02 01          .byte 4,11,2,1,2,1,2,1,2,1,2,1,2,1,8,10,28,29,23,255,0,4,28,4,7,4,5,4,11,2,1,255,3,12
007EA6  3  02 01 02 01  
007EAA  3  02 01 02 01  
007EC4  3  01 08 05 07          .byte 1,8,5,7,4,7,4,5,6,4,1,2,1,2,1,2,3,3,3,255,0,10,3,3,1,2,1,2,1,2,1,2,1
007EC8  3  04 07 04 05  
007ECC  3  06 04 01 02  
007EE5  3  FF 03 07 FF          .byte 255,3,7,255,0,13,255,3,10,18,16,17,18,16,18,18,16,17,18,18,16,17,18,16,18,16,18,17,16,18,18,16,18
007EE9  3  00 0D FF 03  
007EED  3  0A 12 10 11  
007F06  3  11 12 10 12          .byte 17,18,16,18,18,16
007F0A  3  12 10        
007F0C  3  04 04 0A 02          .byte 4,4,10,2,1,9,4,11,0,8,4,10,1,2,13,6,4,4,10,2,1,2,13,6,4,5,6,14,1,3,3,3,12
007F10  3  01 09 04 0B  
007F14  3  00 08 04 0A  
007F2D  3  06 04 05 06          .byte 6,4,5,6,101,0,0,0,8,4,4,4,11,81,81,12,6,10,13,11,3,0,0,3,8,14,1,0,0,255,3,4,8
007F31  3  65 00 00 00  
007F35  3  08 04 04 04  
007F4E  3  0A 00 00 00          .byte 10,0,0,0,3,81,3,3,3,81,81,3,99,8,11,25,255,0,4,3,8,6,255,0,6,3,6,21,0,0,0,81,0,0,0
007F52  3  03 51 03 03  
007F56  3  03 51 51 03  
007F71  3  29 27 1E 64          .byte 41,39,30,100,3,3,255,0,6,3,8,255,0,6,3,8,10,0,0,0,39,30,0,0,0,41,255,0,10,3,9,4,6
007F75  3  03 03 FF 00  
007F79  3  06 03 08 FF  
007F92  3  0F FF 00 04          .byte 15,255,0,4,3,6,0,0,0,81,0,132,131,255,0,11,3,9,11,0,41,98,255,0,4,9,15,0,0,0,41,0,132
007F96  3  03 06 00 00  
007F9A  3  00 51 00 84  
007FB3  3  83 00 26 4B          .byte 131,0,38,75,255,0,8,26,8,10,0,0,101,0,0,12,7,15,255,0,5,31,147,148,8,6,6,6,10,255,0,7,3
007FB7  3  FF 00 08 1A  
007FBB  3  08 0A 00 00  
007FD4  3  05 FF 00 05          .byte 5,255,0,5,23,5,98,255,0,6,35,34,100,41,81,0,8,104,103,255,0,5,3,5,0,0,28,29,9,6,11,255,0,6
007FD8  3  17 05 62 FF  
007FDC  3  00 06 23 22  
007FF6  3  4C 20 22 00          .byte 76,32,34,0,0,81,13,11,107,101,255,0,6,5,7,6,7,7,4,11,255,0,8,35,33,30,0,41,6,255,0,7,104
007FFA  3  00 51 0D 0B  
007FFE  3  6B 65 FF 00  
008017  3  24 67 00 00          .byte 36,103,0,0,31,40,100,41,255,0,8,35,34,0,0,0,12,10,255,0,6,31,40,101,0,0,0,41,255,0,9,31,32
00801B  3  1F 28 64 29  
00801F  3  FF 00 08 23  
008038  3  22 00 00 00          .byte 34,0,0,0,100,12,6,104,103,255,0,4,41,255,0,5,130,129,255,0,8,35,33,75,0,0,22,0,100,8,10,255,0,8
00803C  3  64 0C 06 68  
008040  3  67 FF 00 04  
00805A  3  4C 25 82 81          .byte 76,37,130,129,38,77,75,0,0,76,77,37,44,45,38,9,4,5,10,24,23,5,255,0,6,5,5,6,5,7,7,6,4
00805E  3  26 4D 4B 00  
008062  3  00 4C 4D 25  
00807B  3  05 07 07 06          .byte 5,7,7,6,4,5,7,5,5,11,2,1,8,7,5,5,4,5,6,4,5,4,1,2,1,2,1,2,1,2,1,2,1
00807F  3  04 05 07 05  
008083  3  05 0B 02 01  
00809C  3  02 02 01 02          .byte 2,2,1,2,2,1,2,3,3,1,2,1,2,1,2,1,2,1,2,255,3,18,0,0,255,3,10,18,16,17,18,16,18
0080A0  3  02 01 02 03  
0080A4  3  03 01 02 01  
0080BD  3  11 10 12 12          .byte 17,16,18,18,18,16,18,18,17,16,18,16,18,17,16,18,16,18,18,16,17,18,18,16
0080C1  3  12 10 12 12  
0080C5  3  11 10 12 10  
0080D5  3  04 23 21 1E          .byte 4,35,33,30,8,6,5,11,0,8,5,6,5,11,0,8,6,11,0,8,11,0,8,5,11,0,8,6,4,4,5,35,34
0080D9  3  08 06 05 0B  
0080DD  3  00 08 05 06  
0080F6  3  00 00 00 03          .byte 0,0,0,3,3,0,3,3,39,41,3,0,31,40,3,0,3,3,0,3,41,3,0,100,41,81,3,7,35,33,75,255,0,4
0080FA  3  03 00 03 03  
0080FE  3  27 29 03 00  
008118  3  84 83 00 29          .byte 132,131,0,41,255,0,4,41,255,0,4,128,127,255,0,5,39,30,4,44,45,38,0,0,0,37,132,131,38,75,255,0,7
00811C  3  FF 00 04 29  
008120  3  FF 00 04 80  
008139  3  4C 25 80 7F          .byte 76,37,128,127,38,255,0,4,41,0,8,4,7,10,0,0,0,9,7,4,7,10,255,0,4,28,29,0,9,4,6,4,6
00813D  3  26 FF 00 04  
008141  3  29 00 08 04  
00815A  3  0A FF 00 05          .byte 10,255,0,5,3,2,1,5,5,7,7,11,30,0,26,12,6,6,15,0,12,7,6,15,3,3,3,26,8,4,6,4,6
00815E  3  03 02 01 05  
008162  3  05 07 07 0B  
00817B  3  04 92 01 09          .byte 4,146,1,9,11,31,40,3,3,0,0,0,3,3,3,0,0,0,3,3,3,0,0,0,255,3,7,1,9,11,101,0,39
00817F  3  0B 1F 28 03  
008183  3  03 00 00 00  
00819C  3  1E FF 00 17          .byte 30,255,0,23,9,11,98,0,0,41,255,0,24,7,21,101,255,0,27,5,255,0,6,104,6,10,0,28,29,255,0,5,24
0081A0  3  09 0B 62 00  
0081A4  3  00 29 FF 00  
0081BD  3  00 00 00 1B          .byte 0,0,0,27,0,0,9,4,7,6,6,8,10,255,0,6,101,12,6,7,6,7,6,6,255,7,4,6,6,6,7,6,11
0081C1  3  00 00 09 04  
0081C5  3  07 06 06 08  
0081DE  3  19 00 00 00          .byte 25,0,0,0,2,8,4,11,25,255,0,5,101,255,0,5,100,255,0,7,100,255,0,5,3,2,8,10,255,0,27,3,2
0081E2  3  02 08 04 0B  
0081E6  3  19 FF 00 05  
0081FF  3  08 07 06 0A          .byte 8,7,6,10,27,255,0,9,76,37,0,0,38,28,255,0,9,3,2,1,2,8,7,10,76,37,38,75,0,9,7,4,5
008203  3  1B FF 00 09  
008207  3  4C 25 00 00  
008220  3  06 07 05 06          .byte 6,7,5,6,4,7,4,7,5,6,4,7,0,0,0,3,3,3,2,1,8,10,147,148,9,7,11,2,1,2,1,2,1
008224  3  04 07 04 07  
008228  3  05 06 04 07  
008241  3  02 01 02 01          .byte 2,1,2,1,2,1,2,1,2,255,0,6,3,3,2,5,35,33,7,1,2,255,3,15,255,18,9,4,32,34,5,255,18,17
008245  3  02 01 02 01  
008249  3  02 FF 00 06  
008263  3  04 23 21 1E          .byte 4,35,33,30,8,7,5,10,1,2,1,2,3,3,1,2,1,2,9,7,4,7,4,10,1,2,1,3,0,0,7,35,34
008267  3  08 07 05 0A  
00826B  3  01 02 01 02  
008284  3  00 00 03 03          .byte 0,0,3,3,8,6,5,4,10,8,5,5,4,6,4,11,3,3,39,3,8,7,5,10,2,3,3,5,35,34,255,0,4
008288  3  08 06 05 04  
00828C  3  0A 08 05 05  
0082A5  3  03 64 00 00          .byte 3,100,0,0,255,3,4,25,3,41,3,0,76,40,0,3,40,3,8,10,1,2,7,35,34,255,0,18,41,0,31,40,0
0082A9  3  FF 03 04 19  
0082AD  3  03 29 03 00  
0082C6  3  03 08 04 0A          .byte 3,8,4,10,4,35,33,30,255,0,20,39,30,0,3,3,4,5,35,34,255,0,21,41,0,134,133,9,11,7,44,45,38
0082CA  3  04 23 21 1E  
0082CE  3  FF 00 14 27  
0082E7  3  FF 00 0B 1B          .byte 255,0,11,27,255,0,10,134,133,4,1,8,4,7,10,0,28,29,255,0,5,104,36,122,122,122,103,8,6,5,4,4,6
0082EB  3  FF 00 0A 86  
0082EF  3  85 04 01 08  
008308  3  0B 1F 93 94          .byte 11,31,147,148,8,10,2,1,2,8,4,7,4,5,10,0,0,0,100,0,0,0,80,80,100,81,91,4,25,0,0,0,35
00830C  3  08 0A 02 01  
008310  3  02 08 04 07  
008329  3  21 1E 05 03          .byte 33,30,5,3,3,3,1,2,1,2,4,11,255,0,4,115,116,0,79,79,31,40,0,11,255,0,4,35,34,20,4,0,0,0
00832D  3  03 03 01 02  
008331  3  01 02 04 0B  
00834B  3  03 03 02 01          .byte 3,3,2,1,4,25,255,0,4,147,148,104,36,103,0,41,0,98,0,0,0,37,44,45,38,6,0,0,3,3,1,9,4
00834F  3  04 19 FF 00  
008353  3  04 93 94 68  
00836C  3  0B FF 00 05          .byte 11,255,0,5,35,33,30,255,0,9,12,5,6,4,11,3,3,2,1,2,4,25,255,0,6,35,34,255,0,11,4,1,2
008370  3  23 21 1E FF  
008374  3  00 09 0C 05  
00838D  3  01 03 01 09          .byte 1,3,1,9,4,7,11,255,0,7,35,33,75,0,0,124,255,0,5,28,29,7,2,3,3,2,9,11,255,0,9,31,32
008391  3  04 07 0B FF  
008395  3  00 07 23 21  
0083AE  3  22 00 00 00          .byte 34,0,0,0,82,0,0,0,22,9,4,7,11,1,3,0,9,11,25,255,0,9,37,44,45,38,9,4,6,7,4,7,4
0083B2  3  52 00 00 00  
0083B6  3  16 09 04 07  
0083CF  3  0B 01 02 01          .byte 11,1,2,1,2,3,0,4,255,0,10,8,5,5,4,6,11,1,2,1,2,1,2,1,255,3,5,0,7,115,116,255,0,4
0083D3  3  02 03 00 04  
0083D7  3  FF 00 0A 08  
0083F1  3  1D 17 00 00          .byte 29,23,0,0,9,11,1,2,1,2,255,3,8,255,0,5,4,147,148,8,6,5,6,7,6,4,5,11,2,255,3,5,255,0,12
0083F5  3  09 0B 01 02  
0083F9  3  01 02 FF 03  
008414  3  05 23 21 4B          .byte 5,35,33,75,5,1,3,255,0,23,4,32,34,3,8,10,2,3,0,0,0,255,3,6,255,0,13,7,35,34,0,3,8
008418  3  05 01 03 FF  
00841C  3  00 17 04 20  
008435  3  0A 01 03 03          .byte 10,1,3,3,3,2,1,2,1,2,1,3,255,0,4,3,3,255,0,6,5,32,34,0,0,3,8,10,2,1,2,13,5,5
008439  3  03 02 01 02  
00843D  3  01 02 01 03  
008457  3  04 04 0A 01          .byte 4,4,10,1,3,3,3,2,1,2,3,3,255,0,4,7,35,33,30,134,133,3,8,5,4,4,11,100,3,81,3,8,10
00845B  3  03 03 03 02  
00845F  3  01 02 03 03  
008478  3  01 02 01 09          .byte 1,2,1,9,5,10,1,2,3,0,0,0,4,44,45,29,134,133,0,3,81,101,81,3,0,0,41,31,40,8,7,5,5
00847C  3  05 0A 01 02  
008480  3  03 00 00 00  
008499  3  0B 51 08 07          .byte 11,81,8,7,10,2,3,0,0,8,4,6,4,147,148,30,0,41,0,39,30,255,0,4,41,39,30,0,0,31,40,0,3
00849D  3  0A 02 03 00  
0084A1  3  00 08 04 06  
0084BA  3  05 01 03 00          .byte 5,1,3,0,0,3,1,13,11,35,34,255,0,4,41,255,0,6,41,255,0,4,41,0,0,6,2,3,0,0,3,2,5
0084BE  3  00 03 01 0D  
0084C2  3  0B 23 22 FF  
0084DB  3  65 23 22 FF          .byte 101,35,34,255,0,18,20,5,1,3,0,0,3,1,5,31,32,33,75,255,0,15,80,80,0,8,10,2,3,0,2,13,11
0084DF  3  00 12 14 05  
0084E3  3  01 03 00 00  
0084FC  3  00 23 22 FF          .byte 0,35,34,255,0,9,128,127,255,0,5,79,79,28,0,4,1,3,0,1,5,21,0,35,33,30,0,0,28,13,5,10,0
008500  3  00 09 80 7F  
008504  3  FF 00 05 4F  
00851D  3  25 80 7F 26          .byte 37,128,127,38,0,0,0,104,151,36,36,36,6,2,3,0,13,11,0,76,32,34,0,0,9,5,11,2,8,10,104,151,36,36
008521  3  00 00 00 68  
008525  3  97 24 24 24  
00853F  3  67 00 00 00          .byte 103,0,0,0,105,0,69,43,8,10,1,3,5,0,0,0,35,34,0,0,5,11,1,3,1,8,10,69,108,43,0,0,0
008543  3  69 00 45 2B  
008547  3  08 0A 01 03  
008560  3  68 24 67 00          .byte 104,36,103,0,43,0,5,2,3,4,0,0,37,44,45,38,9,11,2,3,0,3,2,8,4,74,92,255,74,4,92,74,74
008564  3  2B 00 05 02  
008568  3  03 04 00 00  
008581  3  5C 4A 05 01          .byte 92,74,5,1,3,5,147,148,30,9,5,5,11,2,3,0,0,0,3,1,6,87,92,87,87,55,5,4,6,5,4,6,11
008585  3  03 05 93 94  
008589  3  1E 09 05 05  
0085A2  3  02 03 06 23          .byte 2,3,6,35,34,0,5,11,2,1,3,255,0,4,3,2,5,87,92,87,55,11,1,2,1,2,1,2,1,3,0,5,35
0085A6  3  22 00 05 0B  
0085AA  3  02 01 03 FF  
0085C3  3  21 1E 06 01          .byte 33,30,6,1,146,3,3,255,0,4,3,1,8,6,6,6,11,2,255,3,7,0,0,5,32,34,0,5,2,3,255,0,7
0085C7  3  92 03 03 FF  
0085CB  3  00 04 03 01  
0085E4  3  03 01 02 01          .byte 3,1,2,1,2,1,3,255,0,9
0085E8  3  02 01 03 FF  
0085EC  3  00 09        
0085EE  3  FF 00 04 6F          .byte 255,0,4,111,255,0,6,63,62,62,61,255,0,8,106,111,255,0,5,111,255,0,6,111,0,63,63,255,62,5,61,0,111
0085F2  3  FF 00 06 3F  
0085F6  3  3E 3E 3D FF  
00860F  3  FF 00 04 6A          .byte 255,0,4,106,0,0,0,111,255,0,9,63,62,62,62,64,62,64,62,64,62,62,61,0,0,0,111,106,255,0,4,9,5
008613  3  00 00 00 6F  
008617  3  FF 00 09 3F  
008630  3  00 00 6F 00          .byte 0,0,111,0,0,0,63,62,64,62,64,62,64,62,64,62,64,62,64,61,255,106,4,0,0,9,5,11,1,255,0,6,64,64
008634  3  00 00 3F 3E  
008638  3  40 3E 40 3E  
008652  3  3E 40 3E 40          .byte 62,64,62,64,62,64,62,64,62,64,62,64,106,0,0,9,5,7,11,1,2,3,255,0,6,60,64,64,64,60,64,60,64
008656  3  3E 40 3E 40  
00865A  3  3E 40 3E 40  
008673  3  3C 40 3C 3E          .byte 60,64,60,62,60,64,0,0,0,5,2,1,2,3,3,0,111,255,0,5,255,60,4,59,53,52,52,56,58,255,60,4,0,0
008677  3  3C 40 00 00  
00867B  3  00 05 02 01  
008695  3  1A 0C 0A 02          .byte 26,12,10,2,3,146,3,255,0,4,111,0,0,0,255,60,5,52,52,255,60,4,81,0,0,0,80,80,5,1,3,3,255,0,9
008699  3  03 92 03 FF  
00869D  3  00 04 6F 00  
0086B8  3  29 3C 3C 51          .byte 41,60,60,81,108,57,51,25,60,60,0,81,0,0,0,79,79,5,2,3,255,0,13,41,0,52,51,107,0,41,0,41,0,0,0
0086BC  3  6C 39 33 19  
0086C0  3  3C 3C 00 51  
0086DB  3  09 05 0B 01          .byte 9,5,11,1,3,255,0,15,52,51,58,255,0,4,135,136,0,6,1,2,3,255,0,15,59,52,51,255,0,4,37,135,136
0086DF  3  03 FF 00 0F  
0086E3  3  34 33 3A FF  
0086FC  3  09 0B 02 03          .byte 9,11,2,3,255,0,17,57,51,255,0,4,8,5,6,11,1,3,255,0,13,83,255,0,4,52,51,0,0,0,84,0,100
008700  3  FF 00 11 39  
008704  3  33 FF 00 04  
00871D  3  05 01 92 03          .byte 5,1,146,3,255,0,10,28,28,29,82,28,23,46,47,50,50,48,49,28,82,29,9,11,2,3,255,0,7,4,6,5,6
008721  3  FF 00 0A 1C  
008725  3  1C 1D 52 1C  
00873E  3  07 05 06 04          .byte 7,5,6,4,5,4,4,6,5,6,6,6,5,6,7,11,1,3,255,0,8,1,2,1,2,1,2,1,2,1,2,1,2
008742  3  05 04 04 06  
008746  3  05 06 06 06  
00875F  3  01 02 01 02          .byte 1,2,1,2,1,2,1,2,3,255,0,9,255,3,20,255,0,10,18,17,18,16,18,18,16,17,18,18,16,18,18,16,18
008763  3  01 02 01 02  
008767  3  03 FF 00 09  
008780  3  11 10 12 10          .byte 17,16,18,16,18,17,18,18,16,18,16,18,17,16,18
008784  3  12 11 12 12  
008788  3  10 12 10 12  
00878F  3  FF 00 05 6F          .byte 255,0,5,111,255,0,8,111,255,0,9,111,255,0,6,111,255,0,7,111,0,63,62,61,0,0,111,0,63,62,62,61,255,0,4
008793  3  FF 00 08 6F  
008797  3  FF 00 09 6F  
0087B2  3  6F FF 00 07          .byte 111,255,0,7,63,61,0,63,62,61,109,62,62,62,61,109,62,61,109,62,62,63,62,61,255,0,6,106,0,63,64,62,62
0087B6  3  3F 3D 00 3F  
0087BA  3  3E 3D 6D 3E  
0087D3  3  6D 3E 3E 3E          .byte 109,62,62,62,64,109,62,62,64,109,62,64,109,62,62,64,62,62,61,255,0,4,111,111,0,64,62,64,109,64,62,64,62
0087D7  3  40 6D 3E 3E  
0087DB  3  40 6D 3E 40  
0087F4  3  40 6D 40 3E          .byte 64,109,64,62,64,62,62,62,64,109,64,62,64,62,64,62,0,111,0,0,106,0,64,64,64,109,64,64,60,64,64,60,60,60
0087F8  3  40 3E 3E 3E  
0087FC  3  40 6D 40 3E  
008816  3  40 6D 3C 40          .byte 64,109,60,64,60,60,60,64,60,64,64,64,255,0,4,106,0,0,60,108,102,60,60,43,60,60,60,43,60,60,60,102,60,60
00881A  3  3C 3C 3C 40  
00881E  3  3C 40 40 40  
008838  3  2B 3C 3C 66          .byte 43,60,60,102,60,60,255,0,5,106,255,0,4,102,89,89,43,0,0,108,43,107,89,89,102,0,0,43,107,0,102,255,0,5
00883C  3  3C 3C FF 00  
008840  3  05 6A FF 00  
00885A  3  6F 00 6A FF          .byte 111,0,106,255,0,4,105,0,0,43,0,0,0,43,0,0,0,105,0,0,43,0,0,105,255,0,7,106,0,0,0,80,80
00885E  3  00 04 69 00  
008862  3  00 2B 00 00  
00887B  3  FF 00 06 2B          .byte 255,0,6,43,255,0,6,66,255,0,10,106,0,0,0,79,79,255,0,6,66,255,0,17,106,0,0,104,122,103,255,0,4
00887F  3  FF 00 06 42  
008883  3  FF 00 0A 6A  
00889C  3  82 81 FF 00          .byte 130,129,255,0,18,106,0,0,0,102,0,0,0,76,37,130,129,38,75,255,0,5,29,28,22,255,0,8,106,0,0,0,105
0088A0  3  12 6A 00 00  
0088A4  3  00 66 00 00  
0088BD  3  00 00 00 68          .byte 0,0,0,104,151,122,122,36,103,255,0,4,104,151,122,36,103,255,0,7,106,255,0,8,69,43,107,255,0,7,69,43,107
0088C1  3  97 7A 7A 24  
0088C5  3  67 FF 00 04  
0088DE  3  00 00 00 1C          .byte 0,0,0,28,28,29,0,0,106,255,0,9,43,255,0,9,43,0,0,0,8,5,6,7,5,4,106,255,0,9,43,255,0,9
0088E2  3  1C 1D 00 00  
0088E6  3  6A FF 00 09  
008900  3  2B 00 00 00          .byte 43,0,0,0,3,2,1,2,1,2,255,65,10,43,255,65,9,43,255,65,4,255,3,5,16,18,18,18,16,16,18,17,18
008904  3  03 02 01 02  
008908  3  01 02 FF 41  
008921  3  10 5C 12 10          .byte 16,92,18,16,17,18,18,16,18,17,18,92,18,18,16,17,18,16,18,16,18
008925  3  11 12 12 10  
008929  3  12 11 12 5C  
008936  3  00 00 00 6F          .byte 0,0,0,111,255,0,10,111,0,8,10,2,1,2,1,2,1,3,3,3,0,0,0,111,255,0,6,111,255,0,8,26,8
00893A  3  FF 00 0A 6F  
00893E  3  00 08 0A 02  
008957  3  05 04 05 06          .byte 5,4,5,6,5,10,1,2,1,3,255,0,15,111,0,0,0,3,81,98,0,0,26,8,6,5,10,1,3,3,0,0,111
00895B  3  05 0A 01 02  
00895F  3  01 03 FF 00  
008978  3  FF 00 05 6F          .byte 255,0,5,111,255,0,9,81,101,0,0,0,99,81,98,8,10,1,2,255,0,18,81,255,0,4,99,81,0,26,8,6,5
00897C  3  FF 00 09 51  
008980  3  65 00 00 00  
008999  3  FF 00 0B 6F          .byte 255,0,11,111,255,0,6,41,255,0,4,100,41,0,0,3,81,98,111,255,0,27,41,255,0,6,111,255,0,81,24,255,0,16
00899D  3  FF 00 06 29  
0089A1  3  FF 00 04 64  
0089BB  3  55 FF 00 07          .byte 85,255,0,7,27,28,29,9,4,6,4,4,255,0,14,82,0,0,28,29,9,7,4,6,4,6,11,1,2,1,2,255,0,9
0089BF  3  1B 1C 1D 09  
0089C3  3  04 06 04 04  
0089DD  3  54 00 00 00          .byte 84,0,0,0,9,4,7,4,6,7,11,1,2,1,2,1,2,255,3,4,255,0,6,83,0,0,82,28,27,9,11,2,1
0089E1  3  09 04 07 04  
0089E5  3  06 07 0B 01  
0089FE  3  02 01 02 01          .byte 2,1,2,1,255,3,7,255,0,4,23,0,28,29,0,82,9,4,6,7,4,11,2,255,3,7,255,0,9,4,7,6,4
008A02  3  FF 03 07 FF  
008A06  3  00 04 17 00  
008A1F  3  07 06 04 0B          .byte 7,6,4,11,2,1,2,1,2,3,3,255,0,15,1,2,1,2,1,2,1,2,255,3,6,255,0,16,255,3,9,255,0,21
008A23  3  02 01 02 01  
008A27  3  02 03 03 FF  
008A41  3  12 10 12 11          .byte 18,16,18,17,18,16,18,17,18,18,16,18,18,16,17,18,18,16,17,18,16,18,18,16,18,18,16,18,17,18
008A45  3  12 10 12 11  
008A49  3  12 12 10 12  
008A5F  3  FF 00 06 FF          .byte 255,0,6,255,3,5,146,3,3,2,1,2,1,9,5,4,6,4,6,6,5,10,2,1,2,255,0,4,3,3,2,1,2
008A63  3  03 05 92 03  
008A67  3  03 02 01 02  
008A80  3  01 02 03 01          .byte 1,2,3,1,2,9,5,4,6,11,81,0,0,3,81,3,99,8,4,7,4,255,3,4,2,1,9,4,6,5,10,2,9
008A84  3  02 09 05 04  
008A88  3  06 0B 51 00  
008AA1  3  06 0B 03 64          .byte 6,11,3,100,81,3,81,0,0,0,81,0,100,3,81,3,3,1,2,1,2,9,5,11,0,0,3,8,5,11,81,0,0,0
008AA5  3  51 03 51 00  
008AA9  3  00 00 51 00  
008AC3  3  51 1F 28 00          .byte 81,31,40,0,0,0,41,0,0,0,81,0,0,4,5,6,4,11,81,255,0,4,3,25,3,39,0,0,0,41,0,81,0,0
008AC7  3  00 00 29 00  
008ACB  3  00 00 51 00  
008AE5  3  54 00 86 85          .byte 84,0,134,133,0,41,0,0,3,100,99,3,3,81,255,0,7,41,255,0,5,81,0,0,82,0,134,133,0,0,28,0,0,0
008AE9  3  00 29 00 00  
008AED  3  03 64 63 03  
008B07  3  64 00 00 27          .byte 100,0,0,39,75,255,0,10,90,90,41,0,0,8,15,147,148,8,4,5,7,255,0,4,31,40,255,0,10,22,255,0,7
008B0B  3  4B FF 00 0A  
008B0F  3  5A 5A 29 00  
008B28  3  23 22 00 63          .byte 35,34,0,99,0,4,255,0,5,41,255,0,10,104,151,122,103,255,0,4,35,33,30,0,26,5,255,0,17,102,107,255,0,4
008B2C  3  00 04 FF 00  
008B30  3  05 29 FF 00  
008B4A  3  4C 20 22 00          .byte 76,32,34,0,0,0,6,5,5,5,10,255,0,13,105,255,0,6,35,34,0,0,0,4,2,1,8,6,10,24,23,255,0,17
008B4E  3  00 00 06 05  
008B52  3  05 05 0A FF  
008B6C  3  23 21 4B 00          .byte 35,33,75,0,0,5,3,3,1,8,255,5,4,10,255,0,8,135,136,255,0,4,31,32,34,0,0,9,11,0,0,3,1
008B70  3  00 05 03 03  
008B74  3  01 08 FF 05  
008B8D  3  02 01 02 01          .byte 2,1,2,1,4,83,255,0,6,37,135,136,38,255,0,4,35,34,0,26,4,1,0,0,0,255,3,4,2,6,82,255,0,4
008B91  3  04 53 FF 00  
008B95  3  06 25 87 88  
008BAF  3  08 07 05 06          .byte 8,7,5,6,4,5,6,5,10,37,44,45,38,0,5,2,255,0,6,3,1,8,5,10,28,29,0,22,5,2,1,2,1
008BB3  3  04 05 06 05  
008BB7  3  0A 25 2C 2D  
008BD0  3  02 01 0C 05          .byte 2,1,12,5,6,4,5,6,11,1,255,0,7,3,1,2,8,5,4,6,5,11,1,255,3,5,1,2,1,2,1,2,1
008BD4  3  06 04 05 06  
008BD8  3  0B 01 FF 00  
008BF1  3  02 FF 00 08          .byte 2,255,0,8,3,3,1,2,1,2,1,2,3,255,0,5,255,3,8,18,16,17,18,16,18,18,16,17,18,16,17,18,18
008BF5  3  03 03 01 02  
008BF9  3  01 02 01 02  
008C12  3  10 12 12 12          .byte 16,18,18,18,16,18,16,18,18,17,18,16,18,18,67,0
008C16  3  10 12 10 12  
008C1A  3  12 11 12 10  
008C22  3  FF 00 08 6F          .byte 255,0,8,111,255,0,16,111,255,0,5,111,255,0,18,111,255,0,49,111,255,0,5,111,255,0,17,63,62,62,62,61,255,0,13
008C26  3  FF 00 10 6F  
008C2A  3  FF 00 05 6F  
008C45  3  3F 3E 3E 3E          .byte 63,62,62,62,61,0,0,111,0,0,0,109,255,62,5,61,255,0,8,111,0,0,109,109,255,62,4,61,255,0,4,111,109,109
008C49  3  3D 00 00 6F  
008C4D  3  00 00 00 6D  
008C67  3  40 3E 40 3E          .byte 64,62,64,62,64,255,0,11,109,62,64,62,64,62,64,255,0,5,26,64,60,60,60,109,25,0,0,0,111,255,0,7,26
008C6B  3  40 FF 00 0B  
008C6F  3  6D 3E 40 3E  
008C88  3  40 6D 3C 6D          .byte 64,109,60,109,64,25,255,0,6,26,108,43,107,25,255,0,13,26,60,43,107,25,255,0,9,43,255,0,17,43,0,0,0
008C8C  3  40 19 FF 00  
008C90  3  06 1A 6C 2B  
008CA9  3  6F FF 00 07          .byte 111,255,0,7,66,255,0,17,66,255,0,43,84,0,0,132,131,255,0,5,128,127,0,0,85,255,0,13,83,0,82,28,37
008CAD  3  42 FF 00 11  
008CB1  3  42 FF 00 2B  
008CCA  3  84 83 26 79          .byte 132,131,38,121,0,76,37,128,127,38,75,82,0,121,0,83,255,0,4,115,116,0,28,29,82,9,255,5,17,10,82,28,29
008CCE  3  00 4C 25 80  
008CD2  3  7F 26 4B 52  
008CEB  3  00 0A 93 94          .byte 0,10,147,148,9,6,6,7,11,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,8,6,4,5,4,6,35
008CEF  3  09 06 06 07  
008CF3  3  0B 02 01 02  
008D0C  3  22 08 0A 01          .byte 34,8,10,1,2,1,255,3,17,1,2,1,2,1,5,35,33,30,8,10,3,3,255,0,17,255,3,5,4,32,34,0,100
008D10  3  02 01 FF 03  
008D14  3  11 01 02 01  
008D2D  3  06 11 12 12          .byte 6,17,18,18,16,18,18,16,18,17,18,18,16,18,17,18,18,16,18,18,18,16,18,17,18
008D31  3  10 12 12 10  
008D35  3  12 11 12 12  
008D46  3  01 02 01 02          .byte 1,2,1,2,1,3,3,3,146,255,0,4,3,2,1,2,3,3,3,1,2,1,9,10,2,3,3,0,0,4,6,5,4
008D4A  3  01 03 03 03  
008D4E  3  92 FF 00 04  
008D67  3  0E 02 01 02          .byte 14,2,1,2,3,0,0,0,3,1,13,4,14,1,2,1,9,4,7,15,8,10,1,2,3,0,3,3,81,8,4,5,4
008D6B  3  03 00 00 00  
008D6F  3  03 01 0D 04  
008D88  3  0E 02 03 00          .byte 14,2,3,0,3,2,13,11,0,12,4,7,4,11,81,3,0,0,8,4,10,1,3,0,0,81,81,0,0,3,5,1,3
008D8C  3  03 02 0D 0B  
008D90  3  00 0C 04 07  
008DA9  3  00 03 01 04          .byte 0,3,1,4,0,0,3,3,0,0,3,39,30,0,0,3,3,8,10,2,0,0,41,40,0,0,0,6,2,3,3,2,13
008DAD  3  00 00 03 03  
008DB1  3  00 00 03 27  
008DCA  3  0B FF 00 07          .byte 11,255,0,7,81,255,0,5,3,4,1,0,0,0,81,0,0,0,8,14,1,1,13,11,98,255,0,7,41,255,0,5,3
008DCE  3  51 FF 00 05  
008DD2  3  03 04 01 00  
008DEB  3  07 02 06 05          .byte 7,2,6,5,0,41,0,0,0,26,5,2,2,4,0,98,255,0,4,9,4,10,255,0,6,3,4,1,1,4,104,103,255,0,4
008DEF  3  00 29 00 00  
008DF3  3  00 1A 05 02  
008E0E  3  06 01 01 05          .byte 6,1,1,5,0,101,255,0,4,7,1,8,10,255,0,5,3,7,2,2,6,107,255,0,5,5,2,2,7,255,0,5,9
008E12  3  00 65 FF 00  
008E16  3  04 07 01 08  
008E2F  3  0B 02 01 05          .byte 11,2,1,5,103,255,0,4,9,11,1,9,11,255,0,4,12,4,11,1,1,4,104,103,0,0,0,4,2,1,9,11,107
008E33  3  67 FF 00 04  
008E37  3  09 0B 01 09  
008E50  3  FF 00 04 07          .byte 255,0,4,7,1,3,5,23,255,0,4,26,4,2,3,2,7,107,255,0,4,5,1,2,4,101,255,0,5,4,2,3,6
008E54  3  01 03 05 17  
008E58  3  FF 00 04 1A  
008E71  3  68 24 67 00          .byte 104,36,103,0,0,0,7,1,3,2,4,255,0,4,104,103,10,1,8,10,0,0,0,104,36,5,1,3,8,10,107,98,0,0,0
008E75  3  00 00 07 01  
008E79  3  03 02 04 FF  
008E94  3  04 02 03 01          .byte 4,2,3,1,12,10,255,0,4,108,7,2,1,5,255,0,4,108,6,2,3,2,6,255,0,4,12,4,1,2,2,1,12
008E98  3  0C 0A FF 00  
008E9C  3  04 6C 07 02  
008EB5  3  0A 00 00 00          .byte 10,0,0,0,26,4,1,13,11,255,0,5,8,10,1,1,5,25,255,0,4,8,4,7,4,10,9,11,255,0,4,5,2
008EB9  3  1A 04 01 0D  
008EBD  3  0B FF 00 05  
008ED6  3  05 68 67 59          .byte 5,104,103,89,89,0,0,24,4,2,2,4,255,0,5,31,40,100,81,8,11,101,0,0,0,22,4,1,4,107,0,0,0
008EDA  3  59 00 00 18  
008EDE  3  04 02 02 04  
008EF7  3  68 24 05 0B          .byte 104,36,5,11,1,1,8,4,15,255,0,4,81,83,41,255,0,5,12,4,11,2,7,0,115,116,0,0,108,4,2,3,3
008EFB  3  01 01 08 04  
008EFF  3  0F FF 00 04  
008F18  3  01 08 0A 00          .byte 1,8,10,0,0,28,29,41,82,0,28,29,0,0,0,13,11,1,1,8,10,147,148,30,0,9,11,1,3,0,3,1,8
008F1C  3  00 1C 1D 29  
008F20  3  52 00 1C 1D  
008F39  3  04 05 04 04          .byte 4,5,4,4,5,5,4,4,5,4,5,4,11,2,3,3,2,4,35,34,0,0,4,2,3,146
008F3D  3  05 05 04 04  
008F41  3  05 04 05 04  
008F53  3  FF 00 13 03          .byte 255,0,19,3,1,5,32,33,30,0,7,2,3,255,0,8,255,3,7,255,0,5,3,2,4,35,34,0,0,4,1,3,0,0,0
008F57  3  01 05 20 21  
008F5B  3  1E 00 07 02  
008F76  3  FF 03 06 02          .byte 255,3,6,2,1,2,1,2,255,3,5,0,3,1,7,35,34,0,0,6,2,3,0,0,3,2,1,2,1,2,1,9,7
008F7A  3  01 02 01 02  
008F7E  3  FF 03 05 00  
008F97  3  04 05 0A 01          .byte 4,5,10,1,2,1,2,3,3,2,9,11,32,33,30,26,4,10,1,3,3,2,9,7,4,5,7,4,11,0,3,81,8
008F9B  3  02 01 02 03  
008F9F  3  03 02 09 0B  
008FB8  3  05 06 04 0A          .byte 5,6,4,10,1,2,1,7,25,35,34,0,0,81,8,10,2,3,1,4,3,81,39,30,81,0,0,31,40,3,81,101,3
008FBC  3  01 02 01 07  
008FC0  3  19 23 22 00  
008FD9  3  08 06 04 07          .byte 8,6,4,7,11,0,35,34,0,31,40,3,4,1,1,9,11,3,41,41,31,40,0,0,0,41,0,41,0,80,80,3,81,81
008FDD  3  0B 00 23 22  
008FE1  3  00 1F 28 03  
008FFB  3  00 1F 20 21          .byte 0,31,32,33,75,0,41,3,8,10,9,11,3,255,0,4,81,255,0,4,28,29,0,79,79,31,40,39,30,0,35,34,255,0,4
008FFF  3  4B 00 29 03  
009003  3  08 0A 09 0B  
00901E  3  03 06 05 03          .byte 3,6,5,3,255,0,5,41,0,0,104,36,122,122,122,114,103,0,81,41,0,0,35,33,30,0,0,0,23,4,4,25,0,0
009022  3  FF 00 05 29  
009026  3  00 00 68 24  
009040  3  16 73 74 FF          .byte 22,115,116,255,0,4,69,108,102,107,0,0,0,41,0,0,76,32,34,255,0,4,5,11,8,10,0,0,104,151,122,103,255,0,5
009044  3  00 04 45 6C  
009048  3  66 6B 00 00  
009063  3  66 FF 00 08          .byte 102,255,0,8,35,34,255,0,4,6,1,1,8,10,0,0,43,107,255,0,5,29,105,255,0,7,31,32,34,0,0,0,9
009067  3  23 22 FF 00  
00906B  3  04 06 01 01  
009084  3  0B 02 02 09          .byte 11,2,2,9,11,0,0,43,255,0,5,104,151,122,103,255,0,7,35,33,75,0,9,11,1,3,9,11,101,0,0,43,255,0,6
009088  3  0B 00 00 2B  
00908C  3  FF 00 05 68  
0090A7  3  2B 6B 00 00          .byte 43,107,0,0,0,130,129,0,0,37,44,45,38,9,11,1,3,0,5,24,0,0,0,43,0,0,65,65,0,0,43,0,0
0090AB  3  00 82 81 00  
0090AF  3  00 25 2C 2D  
0090C8  3  4C 25 82 81          .byte 76,37,130,129,38,75,9,5,6,4,11,1,3,0,0,8,5,18,16,17,92,16,18,17,18,18,16,92,18,16,5,6,5
0090CC  3  26 4B 09 05  
0090D0  3  06 04 0B 01  
0090E9  3  06 06 05 04          .byte 6,6,5,4,11,1,2,1,3,0,0,0,1,8,4,6,4,7,5,4,6,5,6,4,5,6,5,11,2,1,2,1,2
0090ED  3  0B 01 02 01  
0090F1  3  03 00 00 00  
00910A  3  01 02 92 03          .byte 1,2,146,3,3,255,0,4,3,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,255,3,8,255,0,7,255,3,16
00910E  3  03 FF 00 04  
009112  3  03 01 02 01  
00912B  3  FF 00 0D             .byte 255,0,13
00912E  3  FF 00 60 03          .byte 255,0,96,3,0,0,3,255,0,24,3,0,255,3,5,255,0,23,3,3,96,95,97,3,3,255,0,21,3,3,94,95,255,3,4
009132  3  00 00 03 FF  
009136  3  00 18 03 00  
009151  3  FF 00 17 FF          .byte 255,0,23,255,3,4,0,3,0,3,255,0,10,3,3,3,255,0,10,3,0,3,255,0,11,3,3,3,2,1,2,3,255,0,19
009155  3  03 04 00 03  
009159  3  00 03 FF 00  
009174  3  03 03 03 92          .byte 3,3,3,146,1,2,1,9,6,10,1,3,255,0,17,3,1,2,1,2,9,6,6,11,3,8,10,2,255,3,4,255,0,12
009178  3  01 02 01 09  
00917C  3  06 0A 01 03  
009196  3  03 02 09 06          .byte 3,2,9,6,6,6,11,81,81,3,0,26,8,10,2,1,2,1,255,0,11,3,1,9,11,98,101,81,3,81,39,75,0,0
00919A  3  06 06 0B 51  
00919E  3  51 03 00 1A  
0091B8  3  03 08 FF 06          .byte 3,8,255,6,4,255,0,11,3,2,6,3,101,0,81,76,40,41,255,0,4,3,101,99,3,3,255,0,11,3,1,6,21
0091BC  3  04 FF 00 0B  
0091C0  3  03 02 06 03  
0091D9  3  00 00 29 00          .byte 0,0,41,0,41,255,0,7,100,255,0,13,3,2,8,10,90,90,255,0,8,28,29,255,0,15,3,1,6,255,0,8,9
0091DD  3  29 FF 00 07  
0091E1  3  64 FF 00 0D  
0091FA  3  FF 06 06 FF          .byte 255,6,6,255,0,12,3,2,8,6,6,10,0,0,22,23,9,11,2,1,2,1,2,1,255,0,13,3,1,2,1,8,255,6,4
0091FE  3  00 0C 03 02  
009202  3  08 06 06 0A  
00921D  3  0B 01 FF 00          .byte 11,1,255,0,6
009221  3  06           
009222  3  04 23 21 04          .byte 4,35,33,4,2,3,3,1,2,1,9,4,6,4,7,10,2,1,255,3,4,255,0,8,5,35,34,8,5,6,5,4,4,4
009226  3  02 03 03 01  
00922A  3  02 01 09 04  
009244  3  0B 03 03 00          .byte 11,3,3,0,0,8,4,10,1,2,1,2,3,255,0,7,6,32,34,0,3,3,3,81,3,81,3,255,0,4,3,3,8
009248  3  00 08 04 0A  
00924C  3  01 02 01 02  
009265  3  07 04 06 0A          .byte 7,4,6,10,2,3,255,0,6,4,35,34,0,0,0,31,40,0,41,255,0,7,3,81,101,3,8,10,2,3,255,0,5
009269  3  02 03 FF 00  
00926D  3  06 04 23 22  
009286  3  04 2C 21 1E          .byte 4,44,33,30,0,0,0,41,255,0,10,41,0,0,3,4,1,3,255,0,5,8,6,10,255,0,18,3,8,10,1,3,255,0,4
00928A  3  00 00 00 29  
00928E  3  FF 00 0A 29  
0092A9  3  03 02 08 0A          .byte 3,2,8,10,255,0,4,28,29,0,121,0,0,0,8,6,10,27,0,115,116,3,6,2,3,255,0,4,3,146,2,12,6
0092AD  3  FF 00 04 1C  
0092B1  3  1D 00 79 00  
0092CA  3  0A 68 97 97          .byte 10,104,151,151,122,122,122,103,0,0,99,81,12,4,11,147,148,30,5,1,3,3,0,0,0,1,2,1,2,9,4,5,4
0092CE  3  7A 7A 7A 67  
0092D2  3  00 00 63 51  
0092EB  3  06 0B 51 65          .byte 6,11,81,101,91,0,0,100,81,3,3,3,35,34,3,8,10,1,2,3,0,0,9,4,7,5,4,11,101,81,3,3,81
0092EF  3  5B 00 00 64  
0092F3  3  51 03 03 03  
00930C  3  FF 00 05 29          .byte 255,0,5,41,0,0,31,32,34,0,3,8,4,10,1,97,0,4,25,3,99,3,3,0,39,30,0,41,255,0,9,35,33
009310  3  00 00 1F 20  
009314  3  22 00 03 08  
00932D  3  4B 00 03 64          .byte 75,0,3,100,8,10,2,3,8,10,0,100,0,0,0,41,255,0,12,35,34,255,0,4,20,4,2,3,1,7,21,0,0,0
009331  3  08 0A 02 03  
009335  3  08 0A 00 64  
00934F  3  5A 5A 00 00          .byte 90,90,0,0,0,132,131,255,0,7,35,33,30,0,0,84,26,5,1,3,2,4,255,0,6,28,24,29,132,131,0,0,28
009353  3  00 84 83 FF  
009357  3  00 07 23 21  
009370  3  17 1D 00 1F          .byte 23,29,0,31,32,34,0,0,27,82,9,11,2,3,1,4,11,83,0,9,4,7,4,4,6,4,5,4,4,7,7,4,10
009374  3  20 22 00 00  
009378  3  1B 52 09 0B  
009391  3  25 2C 2D 26          .byte 37,44,45,38,9,4,5,11,1,3,0,2,7,0,82,9,11,2,1,2,1,2,1,2,1,2,1,2,1,8,4,7,5
009395  3  09 04 05 0B  
009399  3  01 03 00 02  
0093B2  3  04 0B 02 01          .byte 4,11,2,1,2,3,0,0,1,8,4,4,11,2,255,3,12,1,2,1,2,1,2,3,3,3,0,0,0,3,1,2,1
0093B6  3  02 03 00 00  
0093BA  3  01 08 04 04  
0093D3  3  02 03 FF 00          .byte 2,3,255,0,12,255,3,6,255,0,7,255,3,4,255,0,25
0093D7  3  0C FF 03 06  
0093DB  3  FF 00 07 FF  
0093E4  3  00 00 03 01          .byte 0,0,3,1,9,7,5,6,5,5,4,10,1,2,3,3,1,2,1,2,9,5,5,6,5,10,2,3,146,3,0,3,1
0093E8  3  09 07 05 06  
0093EC  3  05 05 04 0A  
009405  3  09 0B FF 03          .byte 9,11,255,3,4,0,0,8,5,10,1,2,9,4,6,7,5,11,3,3,3,8,10,2,1,3,3,1,9,11,3,255,0,6
009409  3  04 00 00 08  
00940D  3  05 0A 01 02  
009427  3  03 03 08 05          .byte 3,3,8,5,6,11,3,3,0,0,3,0,0,0,26,8,5,10,1,3,2,4,25,255,0,9,3,0,0,3,255,0,9
00942B  3  06 0B 03 03  
00942F  3  00 00 03 00  
009448  3  03 03 08 0A          .byte 3,3,8,10,3,1,6,3,128,127,255,0,18,134,133,0,0,3,4,1,9,11,0,128,127,255,0,18,134,133,0,0,20
00944C  3  03 01 06 03  
009450  3  80 7F FF 00  
009469  3  05 02 04 03          .byte 5,2,4,3,31,147,148,104,36,103,255,0,12,104,36,103,147,148,30,0,3,6,1,6,0,0,35,33,75,102,255,0,13
00946D  3  1F 93 94 68  
009471  3  24 67 FF 00  
00948A  3  64 66 00 23          .byte 100,102,0,35,34,0,0,3,5,9,11,0,0,35,34,0,102,0,0,0,104,36,103,0,0,104,36,103,0,0,0,102,31
00948E  3  22 00 00 03  
009492  3  05 09 0B 00  
0094AB  3  20 22 00 17          .byte 32,34,0,23,9,11,15,25,0,76,32,34,0,105,255,0,4,102,107,0,0,0,102,101,0,0,0,105,0,35,34,8,6
0094AF  3  09 0B 0F 19  
0094B3  3  00 4C 20 22  
0094CC  3  0B 02 FF 00          .byte 11,2,255,0,4,35,34,255,0,6,105,255,0,4,105,255,0,5,76,32,34,0,8,10,1,255,0,4,35,33,75,255,0,17
0094D0  3  04 23 22 FF  
0094D4  3  00 06 69 FF  
0094EE  3  23 21 4B 1A          .byte 35,33,75,26,5,2,255,0,4,35,34,255,0,18,35,34,0,0,8,10,0,0,0,31,32,34,0,0,85,255,0,8,90,90
0094F2  3  05 02 FF 00  
0094F6  3  04 23 22 FF  
009510  3  00 00 53 00          .byte 0,0,83,0,0,35,33,30,0,0,4,0,0,76,37,44,45,38,75,82,255,0,12,82,76,37,44,45,38,75,0,4,5
009514  3  00 23 21 1E  
009518  3  00 00 04 00  
009531  3  06 05 06 07          .byte 6,5,6,7,7,5,6,11,255,0,8,8,6,5,6,5,7,7,6,6,5,5,4,11,2,1,2,1,2,1,2,3,255,0,10
009535  3  07 05 06 0B  
009539  3  FF 00 08 08  
009554  3  03 02 01 02          .byte 3,2,1,2,1,2,1,2,1,2,1,2,255,3,7,65,65,0,0,65,65,65,0,0,65,65,0,255,3,11,18,16,18
009558  3  01 02 01 02  
00955C  3  01 02 01 02  
009575  3  11 12 12 10          .byte 17,18,18,16,17,255,86,10,18,16,17,18,16,18,18,16,18,17,16,18
009579  3  11 FF 56 0A  
00957D  3  12 10 11 12  
009589  3  FF 00 06 6F          .byte 255,0,6,111,255,0,18,111,255,0,17,111,255,0,6,111,255,0,19,111,255,0,6,111,255,0,14,111,255,0,25,111,255,0,14
00958D  3  FF 00 12 6F  
009591  3  FF 00 11 6F  
0095AC  3  6F FF 00 04          .byte 111,255,0,4,111,255,0,20,111,255,0,14,111,255,0,6,111,255,0,18,111,255,0,19,63,64,62,61,255,0,24,63,62
0095B0  3  6F FF 00 14  
0095B4  3  6F FF 00 0E  
0095CD  3  40 3E 40 FF          .byte 64,62,64,255,62,4,61,255,0,9,111,255,0,7,63,62,109,62,64,62,64,64,62,64,109,64,62,62,61,255,0,14,63
0095D1  3  3E 04 3D FF  
0095D5  3  00 09 6F FF  
0095EE  3  40 40 6D 40          .byte 64,64,109,64,64,255,60,5,109,60,64,60,64,61,255,0,13,255,60,4,109,60,60,60,43,60,109,255,60,6,255,0,13
0095F2  3  40 FF 3C 05  
0095F6  3  6D 3C 40 3C  
00960F  3  64 3C 3C 3C          .byte 100,60,60,60,41,98,100,108,43,0,101,41,100,60,43,107,41,255,0,12,83,0,0,43,0,0,0,132,131,66,0,0,0
009613  3  29 62 64 6C  
009617  3  2B 00 65 29  
009630  3  54 00 42 00          .byte 84,0,66,0,24,255,0,11,28,82,0,23,66,0,0,0,132,131,255,0,4,82,29,9,7,6,7,10,115,116,38,255,0,4
009634  3  18 FF 00 0B  
009638  3  1C 52 00 17  
009652  3  06 07 07 07          .byte 6,7,7,7,5,6,7,6,10,31,147,148,30,9,7,4,7,6,11,2,1,2,12,6,7,6,6,5,7,6,1,2,1
009656  3  05 06 07 06  
00965A  3  0A 1F 93 94  
009673  3  02 01 02 01          .byte 2,1,2,1,2,5,0,35,34,0,6,1,2,1,2,1,3,3,3,2,1,2,1,2,1,2,1,255,3,8,6,0,35
009677  3  02 05 00 23  
00967B  3  22 00 06 01  
009694  3  21 1E 05 FF          .byte 33,30,5,255,3,6,0,255,3,9,16,17,16,18,18,18,16,17,5,0,35,34,0,5,16,17,18,16,18,16,18,16,17
009698  3  03 06 00 FF  
00969C  3  03 09 10 11  
0096B5  3  10 12 10 12          .byte 16,18,16,18,16,17,16
0096B9  3  10 11 10     
0096BC  3               numsc:
0096BC  3  1B                   .byte 27
0096BD  3               nmedat:
0096BD  3  00 01 70 20          .byte 0,1,112,32,6,8,16,104,3,4,32,144,6,8,16,192,255
0096C1  3  06 08 10 68  
0096C5  3  03 04 20 90  
0096CE  3  02 0B 58 60          .byte 2,11,88,96,0,1,112,24,3,4,112,64,3,4,112,152,255
0096D2  3  00 01 70 18  
0096D6  3  03 04 70 40  
0096DF  3  00 01 70 08          .byte 0,1,112,8,3,4,96,176,255
0096E3  3  03 04 60 B0  
0096E7  3  FF           
0096E8  3  00 01 60 38          .byte 0,1,96,56,7,7,88,192,255
0096EC  3  07 07 58 C0  
0096F0  3  FF           
0096F1  3  00 01 20 10          .byte 0,1,32,16,3,4,72,40,3,4,72,80,255
0096F5  3  03 04 48 28  
0096F9  3  03 04 48 50  
0096FE  3  00 01 28 D0          .byte 0,1,40,208,3,4,40,136,6,8,32,96,3,12,120,24,255
009702  3  03 04 28 88  
009706  3  06 08 20 60  
00970F  3  00 01 70 18          .byte 0,1,112,24,2,11,112,120,255
009713  3  02 0B 70 78  
009717  3  FF           
009718  3  03 04 28 70          .byte 3,4,40,112,0,1,88,88,3,4,104,168,3,12,64,112,255
00971C  3  00 01 58 58  
009720  3  03 04 68 A8  
009729  3  00 01 78 10          .byte 0,1,120,16,6,8,72,192,1,5,104,168,3,12,32,96,3,12,32,144,255
00972D  3  06 08 48 C0  
009731  3  01 05 68 A8  
00973E  3  00 01 68 10          .byte 0,1,104,16,7,7,96,144,7,7,64,40,1,6,136,96,3,12,128,48,3,4,56,72,3,4,40,168,255
009742  3  07 07 60 90  
009746  3  07 07 40 28  
00975B  3  00 01 30 60          .byte 0,1,48,96,3,4,64,48,3,4,80,200,6,8,16,80,255
00975F  3  03 04 40 30  
009763  3  03 04 50 C8  
00976C  3  00 01 70 D8          .byte 0,1,112,216,3,4,96,80,3,4,96,112,3,4,96,144,3,12,80,184,255
009770  3  03 04 60 50  
009774  3  03 04 60 70  
009781  3  00 01 70 D8          .byte 0,1,112,216,7,7,56,200,7,7,104,80,3,4,112,40,3,4,48,120,255
009785  3  07 07 38 C8  
009789  3  07 07 68 50  
009796  3  00 01 20 28          .byte 0,1,32,40,3,12,104,160,1,5,80,184,3,4,24,72,3,4,24,176,255
00979A  3  03 0C 68 A0  
00979E  3  01 05 50 B8  
0097AB  3  03 04 30 D8          .byte 3,4,48,216,0,1,56,48,6,8,24,80,255
0097AF  3  00 01 38 30  
0097B3  3  06 08 18 50  
0097B8  3  00 01 70 10          .byte 0,1,112,16,3,4,40,40,3,12,56,160,3,4,88,128,255
0097BC  3  03 04 28 28  
0097C0  3  03 0C 38 A0  
0097C9  3  00 01 70 10          .byte 0,1,112,16,3,4,88,160,255
0097CD  3  03 04 58 A0  
0097D1  3  FF           
0097D2  3  00 02 70 D8          .byte 0,2,112,216,3,4,96,88,7,7,112,120,7,7,96,56,255
0097D6  3  03 04 60 58  
0097DA  3  07 07 70 78  
0097E3  3  00 01 70 10          .byte 0,1,112,16,7,7,24,168,255
0097E7  3  07 07 18 A8  
0097EB  3  FF           
0097EC  3  00 01 48 10          .byte 0,1,72,16,7,7,48,64,7,7,104,120,7,7,16,168,3,4,104,144,3,4,40,200,255
0097F0  3  07 07 30 40  
0097F4  3  07 07 68 78  
009805  3  00 01 70 18          .byte 0,1,112,24,1,5,104,120,3,4,104,96,3,4,104,152,255
009809  3  01 05 68 78  
00980D  3  03 04 68 60  
009816  3  00 01 28 10          .byte 0,1,40,16,7,7,120,40,7,7,64,120,7,7,24,192,3,12,32,152,255
00981A  3  07 07 78 28  
00981E  3  07 07 40 78  
00982B  3  00 02 68 C0          .byte 0,2,104,192,3,4,112,144,7,7,64,72,255
00982F  3  03 04 70 90  
009833  3  07 07 40 48  
009838  3  00 01 88 A0          .byte 0,1,136,160,255
00983C  3  FF           
00983D  3  00 01 30 28          .byte 0,1,48,40,7,7,16,112,3,4,104,96,255
009841  3  07 07 10 70  
009845  3  03 04 68 60  
00984A  3  00 01 70 10          .byte 0,1,112,16,3,4,40,40,3,4,40,200,6,8,16,80,6,8,24,160,6,8,32,120,255
00984E  3  03 04 28 28  
009852  3  03 04 28 C8  
009863  3  00 01 70 18          .byte 0,1,112,24,3,4,112,88,255
009867  3  03 04 70 58  
00986B  3  FF           
00986C  3               NUMOBJ = 14
00986C  3               objdta:
00986C  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,16,64,184,16,64,184
009870  3  1B B0 1D 70  
009874  3  0D 60 0B A0  
009892  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,5,120,48,5,120,48
009896  3  1B B0 1D 70  
00989A  3  0D 60 0B A0  
0098B8  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,7,40,144,7,40,144
0098BC  3  1B B0 1D 70  
0098C0  3  0D 60 0B A0  
0098DE  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,4,24,224,4,24,224
0098E2  3  1B B0 1D 70  
0098E6  3  0D 60 0B A0  
009904  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,3,56,168,3,56,168
009908  3  1B B0 1D 70  
00990C  3  0D 60 0B A0  
00992A  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,14,72,136,14,72,136
00992E  3  1B B0 1D 70  
009932  3  0D 60 0B A0  
009950  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,17,80,40,17,80,40
009954  3  1B B0 1D 70  
009958  3  0D 60 0B A0  
009976  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,0,96,168,0,96,168
00997A  3  1B B0 1D 70  
00997E  3  0D 60 0B A0  
00999C  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,15,80,184,15,80,184
0099A0  3  1B B0 1D 70  
0099A4  3  0D 60 0B A0  
0099C2  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,22,56,128,22,56,128
0099C6  3  1B B0 1D 70  
0099CA  3  0D 60 0B A0  
0099E8  3  00 00 07 E0          .byte 0,0,7,224,31,216,54,124,126,102,203,230,207,254,120,60,2,128,3,128,2,192,1,64,1,192,1,64,2,160,3,96,23,128,128,23,128,128
0099EC  3  1F D8 36 7C  
0099F0  3  7E 66 CB E6  
009A0E  3  00 00 07 E0          .byte 0,0,7,224,31,216,54,124,126,102,203,230,207,254,120,60,2,128,3,128,2,192,1,64,1,192,1,64,2,160,3,96,24,104,56,24,104,56
009A12  3  1F D8 36 7C  
009A16  3  7E 66 CB E6  
009A34  3  00 00 07 E0          .byte 0,0,7,224,31,216,54,124,126,102,203,230,207,254,120,60,2,128,3,128,2,192,1,64,1,192,1,64,2,160,3,96,19,56,144,19,56,144
009A38  3  1F D8 36 7C  
009A3C  3  7E 66 CB E6  
009A5A  3  00 00 07 E0          .byte 0,0,7,224,31,216,54,124,126,102,203,230,207,254,120,60,2,128,3,128,2,192,1,64,1,192,1,64,2,160,3,96,25,112,144,25,112,144
009A5E  3  1F D8 36 7C  
009A62  3  7E 66 CB E6  
009A80  3               font:
009A80  3  CD 9A 8A 3E          .byte 205,154,138,62,70,50,141,92
009A84  3  46 32 8D 5C  
009A88  3  32 8F 5C 3E          .byte 50,143,92,62,100,71,205,236
009A8C  3  64 47 CD EC  
009A90  3  7E CD 18 81          .byte 126,205,24,129,201,0,0,0
009A94  3  C9 00 00 00  
009A98  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
009A9C  3  6C FE 6C 00  
009AA0  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
009AA4  3  7E 1E 7E 18  
009AA8  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
009AAC  3  30 6E CE 00  
009AB0  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
009AB4  3  7E CC 7E 00  
009AB8  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
009ABC  3  00 00 00 00  
009AC0  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
009AC4  3  18 18 0C 00  
009AC8  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
009ACC  3  30 30 60 00  
009AD0  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
009AD4  3  7E 18 3C 00  
009AD8  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
009ADC  3  7E 18 18 00  
009AE0  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
009AE4  3  00 18 18 30  
009AE8  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
009AEC  3  7E 00 00 00  
009AF0  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
009AF4  3  00 38 38 00  
009AF8  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
009AFC  3  18 30 60 00  
009B00  3  00 3C 42 42          .byte 0,60,66,66,132,132,120,0
009B04  3  84 84 78 00  
009B08  3  00 18 28 10          .byte 0,24,40,16,16,32,112,0
009B0C  3  10 20 70 00  
009B10  3  00 3C 42 04          .byte 0,60,66,4,124,128,248,0
009B14  3  7C 80 F8 00  
009B18  3  00 1C 22 02          .byte 0,28,34,2,28,132,120,0
009B1C  3  1C 84 78 00  
009B20  3  00 06 0A 14          .byte 0,6,10,20,36,126,8,0
009B24  3  24 7E 08 00  
009B28  3  00 3E 20 78          .byte 0,62,32,120,4,132,120,0
009B2C  3  04 84 78 00  
009B30  3  00 3C 42 78          .byte 0,60,66,120,132,132,120,0
009B34  3  84 84 78 00  
009B38  3  00 3E 02 04          .byte 0,62,2,4,28,8,8,0
009B3C  3  1C 08 08 00  
009B40  3  00 18 24 7C          .byte 0,24,36,124,132,132,120,0
009B44  3  84 84 78 00  
009B48  3  00 1C 22 42          .byte 0,28,34,66,60,132,120,0
009B4C  3  3C 84 78 00  
009B50  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
009B54  3  00 00 30 00  
009B58  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
009B5C  3  00 30 30 60  
009B60  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
009B64  3  30 18 0C 00  
009B68  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
009B6C  3  00 7E 00 00  
009B70  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
009B74  3  0C 18 30 00  
009B78  3  00 0E 11 01          .byte 0,14,17,1,6,0,8,0
009B7C  3  06 00 08 00  
009B80  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
009B84  3  FE C0 7C 00  
009B88  3  00 1C 22 42          .byte 0,28,34,66,124,132,132,0
009B8C  3  7C 84 84 00  
009B90  3  00 38 24 7C          .byte 0,56,36,124,66,130,252,0
009B94  3  42 82 FC 00  
009B98  3  00 3C 42 40          .byte 0,60,66,64,128,132,120,0
009B9C  3  80 84 78 00  
009BA0  3  00 3C 22 42          .byte 0,60,34,66,68,132,248,0
009BA4  3  44 84 F8 00  
009BA8  3  00 3E 20 7C          .byte 0,62,32,124,64,128,252,0
009BAC  3  40 80 FC 00  
009BB0  3  00 3E 20 78          .byte 0,62,32,120,64,128,128,0
009BB4  3  40 80 80 00  
009BB8  3  00 3C 42 40          .byte 0,60,66,64,140,132,120,0
009BBC  3  8C 84 78 00  
009BC0  3  00 22 22 7C          .byte 0,34,34,124,68,136,136,0
009BC4  3  44 88 88 00  
009BC8  3  00 3E 08 08          .byte 0,62,8,8,16,16,124,0
009BCC  3  10 10 7C 00  
009BD0  3  00 0E 02 04          .byte 0,14,2,4,68,136,112,0
009BD4  3  44 88 70 00  
009BD8  3  00 24 28 70          .byte 0,36,40,112,72,132,132,0
009BDC  3  48 84 84 00  
009BE0  3  00 10 10 20          .byte 0,16,16,32,32,66,124,0
009BE4  3  20 42 7C 00  
009BE8  3  00 14 2A 4A          .byte 0,20,42,74,66,132,132,0
009BEC  3  42 84 84 00  
009BF0  3  00 22 22 54          .byte 0,34,34,84,84,136,136,0
009BF4  3  54 88 88 00  
009BF8  3  00 3C 42 42          .byte 0,60,66,66,132,132,120,0
009BFC  3  84 84 78 00  
009C00  3  00 3C 22 44          .byte 0,60,34,68,120,128,128,0
009C04  3  78 80 80 00  
009C08  3  00 3C 42 42          .byte 0,60,66,66,148,140,122,0
009C0C  3  94 8C 7A 00  
009C10  3  00 3C 22 42          .byte 0,60,34,66,124,136,132,0
009C14  3  7C 88 84 00  
009C18  3  00 3C 42 38          .byte 0,60,66,56,4,132,120,0
009C1C  3  04 84 78 00  
009C20  3  00 7E 08 10          .byte 0,126,8,16,16,32,32,0
009C24  3  10 20 20 00  
009C28  3  00 22 22 44          .byte 0,34,34,68,68,136,240,0
009C2C  3  44 88 F0 00  
009C30  3  00 44 48 48          .byte 0,68,72,72,80,80,96,0
009C34  3  50 50 60 00  
009C38  3  00 21 21 42          .byte 0,33,33,66,82,148,236,0
009C3C  3  52 94 EC 00  
009C40  3  00 22 24 18          .byte 0,34,36,24,24,36,68,0
009C44  3  18 24 44 00  
009C48  3  00 22 44 44          .byte 0,34,68,68,56,8,136,112
009C4C  3  38 08 88 70  
009C50  3  00 3F 02 0C          .byte 0,63,2,12,48,64,252,0
009C54  3  30 40 FC 00  
009C58  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
009C5C  3  18 18 1E 00  
009C60  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
009C64  3  30 18 0C 00  
009C68  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
009C6C  3  30 30 F0 00  
009C70  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
009C74  3  30 30 30 00  
009C78  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
009C7C  3  00 00 00 FF  
009C80  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
009C84  3  60 60 FE 00  
009C88  3  30 46 92 9C          .byte 48,70,146,156,57,73,98,12
009C8C  3  39 49 62 0C  
009C90  3  00 C3 24 08          .byte 0,195,36,8,16,36,195,0
009C94  3  10 24 C3 00  
009C98  3  00 C3 3C 42          .byte 0,195,60,66,66,60,195,0
009C9C  3  42 3C C3 00  
009CA0  3  42 42 24 10          .byte 66,66,36,16,8,36,66,66
009CA4  3  08 24 42 42  
009CA8  3  42 5A 24 24          .byte 66,90,36,36,36,36,90,66
009CAC  3  24 24 5A 42  
009CB0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
009CB4  3  00 00 00 00  
009CB8  3  42 42 24 08          .byte 66,66,36,8,16,36,66,66
009CBC  3  10 24 42 42  
009CC0  3  42 5A 24 24          .byte 66,90,36,36,36,36,90,66
009CC4  3  24 24 5A 42  
009CC8  3  00 C3 24 10          .byte 0,195,36,16,8,36,195,0
009CCC  3  08 24 C3 00  
009CD0  3  00 C3 3C 42          .byte 0,195,60,66,66,60,195,0
009CD4  3  42 3C C3 00  
009CD8  3  00 00 00 08          .byte 0,0,0,8,0,16,0,0
009CDC  3  00 10 00 00  
009CE0  3  0F 1F 3F 3F          .byte 15,31,63,63,102,106,102,106
009CE4  3  66 6A 66 6A  
009CE8  3  E0 F0 F8 FC          .byte 224,240,248,252,156,172,156,188
009CEC  3  9C AC 9C BC  
009CF0  3  FC 9C 6C EC          .byte 252,156,108,236,220,188,124,252
009CF4  3  DC BC 7C FC  
009CF8  3  7F 79 76 77          .byte 127,121,118,119,123,125,126,127
009CFC  3  7B 7D 7E 7F  
009D00  3  00 00 00 00          .byte 0,0,0,0,72,80,82,84
009D04  3  48 50 52 54  
009D08  3  00 00 00 02          .byte 0,0,0,2,1,9,5,21
009D0C  3  01 09 05 15  
009D10  3  00 04 04 08          .byte 0,4,4,8,8,0,16,0
009D14  3  08 00 10 00  
009D18  3  00 78 86 91          .byte 0,120,134,145,96,0,0,0
009D1C  3  60 00 00 00  
009D20  3  00 00 06 89          .byte 0,0,6,137,97,30,0,0
009D24  3  61 1E 00 00  
009D28  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
009D2C  3  CC CC 78 00  
009D30  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
009D34  3  78 78 30 00  
009D38  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
009D3C  3  FC FC 78 00  
009D40  3  21 00 FD 01          .byte 33,0,253,1,64,2,62,8
009D44  3  40 02 3E 08  
009D48  3  5F 7E BB C2          .byte 95,126,187,194,223,124,124,198
009D4C  3  DF 7C 7C C6  
009D50  3  5B 57 5D C5          .byte 91,87,93,197,229,1,7,7
009D54  3  E5 01 07 07  
009D58  3  CD F1 89 E1          .byte 205,241,137,225,193,60,18,35
009D5C  3  C1 3C 12 23  
009D60  3  0B 78 B1 C2          .byte 11,120,177,194,198,124,201,0
009D64  3  C6 7C C9 00  
009D68  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
009D6C  3  30 30 F0 00  
009D70  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
009D74  3  00 00 00 00  
009D78  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
009D7C  3  E3 BB C6 7C  
009D80  3               jtab:
009D80  3  F8 FA FC FE          .byte 248,250,252,254,254,255,255,255,0,0,0,2,3,4,4,5,6,7,8,9,10,99
009D84  3  FE FF FF FF  
009D88  3  00 00 00 02  
009D96  3  0A 08 3F 2F  keys:   .byte 10,8,63,47,33,62,51,31,30,26,24
009D9A  3  21 3E 33 1F  
009D9E  3  1E 1A 18     
009DA1  3               
009DA1  2               
009DA1  1               	.include "lib.inc"
009DA1  2               ;----------------------------------------------------------------------
009DA1  2               ; Atari 800 Platform Specific functions
009DA1  2               ;----------------------------------------------------------------------
009DA1  2               
009DA1  2               ;============================================================
009DA1  2               ; PLATFORM VARIABLES
009DA1  2               ;============================================================
009DA1  2               ;
009DA1  2               ; Memory map:
009DA1  2               ;
009DA1  2               ;	$0000-$01ff	 0.50kB	CPU WS
009DA1  2               ;	$0200-$05ff	 1,00kB	IOCB/Printer/Cassette RAM
009DA1  2               ;	$0600-$06ff	 0,25kB	User RAM
009DA1  2               ;	$0700-$1fff	 6,25kB
009DA1  2               ;	$2000-$ffff	56,00kB	User RAM
009DA1  2               ;
009DA1  2               ; Keyboard matrix:
009DA1  2               ;
009DA1  2               ;		0	1	2	3	4	5	6	7
009DA1  2               ;       ----------------------------------------------------------------------
009DA1  2               ;	$00:	L	J	;:	F1	F2	K	+\	*^
009DA1  2               ;	$08:	O		P	U	Ret	I	-_	=|
009DA1  2               ;	$10:	V	Help	C	F3	F4	B	X	Z
009DA1  2               ;	$18:	4$		3#	6&	Esc	5%	2"	1!
009DA1  2               ;	$20:	,[	Space	.]	N		M	/?	Invert
009DA1  2               ;	$28:	R		E	Y	Tab	T	W	Q
009DA1  2               ;	$30:	9(		0)	7'	Bksp	8@	<	>
009DA1  2               ;	$38:	F	H	D		Caps	G	S	A
009DA1  2               ;
009DA1  2               ; Atari 800 constants:
009DA1  2               
009DA1  2               	LMS		= 64
009DA1  2               	HS		= 16
009DA1  2               	VS		= 32
009DA1  2               	MODE2		= 2
009DA1  2               	MODE3		= 3
009DA1  2               	MODE4		= 4
009DA1  2               	MODE5		= 5
009DA1  2               	MODEB		= $0B
009DA1  2               	MODED		= $0D
009DA1  2               	MODEE		= $0E
009DA1  2               	MODEF		= $0F
009DA1  2               
009DA1  2               	BLANK1		= $00
009DA1  2               	BLANK2		= $10
009DA1  2               	BLANK3		= $20
009DA1  2               	BLANK4		= $30
009DA1  2               	BLANK5		= $40
009DA1  2               	BLANK6		= $50
009DA1  2               	BLANK7		= $60
009DA1  2               	BLANK8		= $70
009DA1  2               
009DA1  2               	DLISTENDJUMP	= $41
009DA1  2               
009DA1  2               ; Atari 800 Addresses
009DA1  2               
009DA1  2               	HPOSP0	= $D000		; HORIZONTAL POSITION P0
009DA1  2               	HPOSP1	= $D001		; HORIZONTAL POSITION P1
009DA1  2               	HPOSP2	= $D002		; HORIZONTAL POSITION P2
009DA1  2               	HPOSP3	= $D003		; HORIZONTAL POSITION P3
009DA1  2               	HPOSM0	= $D004		; HORIZONTAL POSITION M0
009DA1  2               	HPOSM1	= $D005		; HORIZONTAL POSITION M1
009DA1  2               	HPOSM2	= $D006		; HORIZONTAL POSITION M2
009DA1  2               	HPOSM3	= $D007		; HORIZONTAL POSITION M3
009DA1  2               
009DA1  2               	SIZEP0	= $D008		; SIZE P0
009DA1  2               	SIZEP1	= $D009		; SIZE P0
009DA1  2               	SIZEP2	= $D00A		; SIZE P0
009DA1  2               	SIZEP3	= $D00B		; SIZE P0
009DA1  2               	SIZEM	= $D00C		; SIZE M
009DA1  2               
009DA1  2               	GRAFP0	= $D00D
009DA1  2               	GRAFP1	= $D00E
009DA1  2               	GRAFP2	= $D00F
009DA1  2               	GRAFP3	= $D010
009DA1  2               	GRAFM	= $D011
009DA1  2               
009DA1  2               	TRIG0	= $D010
009DA1  2               	TRIG1	= $D011
009DA1  2               
009DA1  2               	COLPM0	= $D012		; COLOR P0/M0
009DA1  2               	COLPM1	= $D013		; COLOR P1/M1
009DA1  2               	COLPM2	= $D014		; COLOR P2/M2
009DA1  2               	COLPM3	= $D015		; COLOR P3/M3
009DA1  2               
009DA1  2               	COLPF0	= $D016
009DA1  2               	COLPF1	= $D017
009DA1  2               	COLPF2	= $D018
009DA1  2               	COLPF3	= $D019
009DA1  2               	COLBK	= $D01A
009DA1  2               
009DA1  2               	KBCODE	= $D209
009DA1  2               	RANDOM	= $D20A
009DA1  2               	IRQEN	= $D20E
009DA1  2               	IRQST	= $D20E
009DA1  2               	SKSTAT	= $D20F
009DA1  2               
009DA1  2               	STICK	= $D300
009DA1  2               	PORTB	= $D301
009DA1  2               	PBCTL	= $D303
009DA1  2               
009DA1  2               	DMACTL	= $D400
009DA1  2               	DLISTL	= $D402
009DA1  2               	DLISTH	= $D403
009DA1  2               	WSYNC	= $D40A
009DA1  2               	VCOUNT	= $D40B
009DA1  2               	NMIEN	= $D40E
009DA1  2               	NMIST	= $D40F
009DA1  2               	NMIRES	= $D40F
009DA1  2               
009DA1  2               	NMI	= $FFFA
009DA1  2               	RESET	= $FFFC
009DA1  2               	IRQ	= $FFFE
009DA1  2               
009DA1  2               ;----------------------------------------------------------------------
009DA1  2               ; Atari 800 hardware fns
009DA1  2               ;----------------------------------------------------------------------
009DA1  2               
009DA1  2               init:
009DA1  2               
009DA1  2               ; Disable interrupts
009DA1  2               
009DA1  2  78           	sei
009DA2  2  A9 00        	lda #0
009DA4  2  8D 0E D2     	sta IRQEN		; Disable IRQ
009DA7  2  8D 0E D4     	sta NMIEN		; Disable NMI
009DAA  2               
009DAA  2               ; Switch BASIC + OS ROMS off
009DAA  2               
009DAA  2  AD 03 D3     	lda PBCTL
009DAD  2  09 02        	ora #%00000010
009DAF  2  8D 03 D3     	sta PBCTL
009DB2  2  AD 01 D3     	lda PORTB
009DB5  2  29 7C        	and #%01111100
009DB7  2  09 82        	ora #%10000010
009DB9  2  8D 01 D3     	sta PORTB
009DBC  2               
009DBC  2               ; Setup new NMI handler
009DBC  2               
009DBC  2  A9 E1        	lda #<nmi_handler
009DBE  2  8D FA FF     	sta NMI
009DC1  2  A9 9D        	lda #>nmi_handler
009DC3  2  8D FB FF     	sta NMI+1
009DC6  2  A9 C0        	lda #%11000000
009DC8  2  8D 0E D4     	sta NMIEN
009DCB  2               
009DCB  2               ; Init video registers
009DCB  2               
009DCB  2  A9 00        	lda #<BITMAP_DLIST
009DCD  2  8D 02 D4     	sta DLISTL
009DD0  2  A9 9F        	lda #>BITMAP_DLIST
009DD2  2  8D 03 D4     	sta DLISTH
009DD5  2               
009DD5  2               ; Screenwidth 32 bytes
009DD5  2               
009DD5  2  A9 31        	lda #%00110001
009DD7  2  8D 00 D4     	sta DMACTL
009DDA  2               
009DDA  2  20 EE 20     	jsr cls
009DDD  2               
009DDD  2  60           	rts
009DDE  2               
009DDE  2               ; NMI interrupt handler
009DDE  2               
009DDE  2  00 00        frame_counter:	.byte 0,0
009DE0  2  00           frames_passed:	.byte 0
009DE1  2               
009DE1  2               nmi_handler:
009DE1  2  2C 0F D4     	bit NMIST
009DE4  2  30 27        	bmi dli_handler
009DE6  2  10 0D        	bpl nmi_not_dli
009DE8  2               nmi_not_vbi:
009DE8  2  A9 20        	lda #%00100000
009DEA  2  2C 0F D4     	bit NMIST
009DED  2  D0 04        	bne nmi_not_reset
009DEF  2  8D 0F D4     	sta NMIRES
009DF2  2  40           	rti
009DF3  2               nmi_not_reset:
009DF3  2  68           	pla
009DF4  2  40           	rti
009DF5  2               nmi_not_dli:
009DF5  2  48           	pha
009DF6  2  50 F0        	bvc nmi_not_vbi
009DF8  2  8A           	txa
009DF9  2  48           	pha
009DFA  2  98           	tya
009DFB  2  48           	pha
009DFC  2               
009DFC  2               ; Used for syncing to 25 Hz
009DFC  2               
009DFC  2  EE E0 9D     	inc frames_passed
009DFF  2               
009DFF  2  EE DE 9D     	inc frame_counter
009E02  2  D0 03        	bne skip_inc_frame_counter
009E04  2  EE DF 9D     	inc frame_counter+1
009E07  2               skip_inc_frame_counter:
009E07  2               
009E07  2               ; Restore registers
009E07  2               
009E07  2  68           	pla
009E08  2  A8           	tay
009E09  2  68           	pla
009E0A  2  AA           	tax
009E0B  2  68           	pla
009E0C  2  40           	rti
009E0D  2               
009E0D  2               dli_handler:
009E0D  2  40           	rti
009E0E  2               
009E0E  2               ;========================================================
009E0E  2               ; KEY AND JOYSTICK ROUTINES
009E0E  2               ;--------------------------------------------------------
009E0E  2               ; Keys
009E0E  2               ;
009E0E  2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
009E0E  2               ;             ||||||||
009E0E  2               ;             |||||||+> Right    KEY 0  - X
009E0E  2               ;             ||||||+-> Left     KEY 1  - Z
009E0E  2               ;             |||||+--> Down     KEY 2  - .
009E0E  2               ;             ||||+---> Up       KEY 3  - ;
009E0E  2               ;             |||+----> Fire1    KEY 4  - SPC
009E0E  2               ;             ||+-----> Fire2    KEY 5  - Q
009E0E  2               ;             |+------> Fire3    KEY 6  - P
009E0E  2               ;             +-------> Not used
009E0E  2               ;
009E0E  2               ;                       Option1  KEY 7  - 1
009E0E  2               ;                       Option2  KEY 8  - 2
009E0E  2               ;                       Option3  KEY 9  - 3
009E0E  2               ;                       Option4  KEY 10 - 4
009E0E  2               ;--------------------------------------------------------
009E0E  2               ;----------------------------------------------------
009E0E  2               ; PRSKEY
009E0E  2               ; Wait for keypress.
009E0E  2               ;----------------------------------------------------
009E0E  2               
009E0E  2               prskey:
009E0E  2  AD 0F D2     	lda SKSTAT		; Check keypress
009E11  2  C9 FF        	cmp #255
009E13  2  F0 03        	beq :+
009E15  2  4C 1F 9E     	jmp prsend
009E18  2               :
009E18  2  20 BE 2B     	jsr joykey		; Check joystick move
009E1B  2  C9 FF        	cmp #255
009E1D  2  F0 EF        	beq prskey
009E1F  2               prsend:
009E1F  2  60           	rts
009E20  2               
009E20  2               ;--------------------------------------------------------
009E20  2               ; KTEST
009E20  2               ; Check if key in A is pressed,
009E20  2               ;  carry clr = key pressed
009E20  2               ;  carry set = key not pressed
009E20  2               ;--------------------------------------------------------
009E20  2               
009E20  2               ktest:
009E20  2  85 rr        	sta tmp
009E22  2  AD 0F D2     	lda SKSTAT		; Check keypress
009E25  2  29 04        	and #4
009E27  2  D0 07        	bne notpressed
009E29  2  A5 rr        	lda tmp
009E2B  2  CD 09 D2     	cmp KBCODE
009E2E  2  F0 02        	beq pressed
009E30  2               notpressed:
009E30  2  38           	sec
009E31  2  60           	rts
009E32  2               pressed:
009E32  2  18           	clc			; key pressed
009E33  2  60           	rts
009E34  2               
009E34  2               ;---------------------------------------------------------------
009E34  2               ; KGET
009E34  2               ; Return keycode when a key is pressed and released
009E34  2               ;---------------------------------------------------------------
009E34  2               
009E34  2               kget:
009E34  2  AD 0F D2     	lda SKSTAT		; Check keypress
009E37  2  29 04        	and #4
009E39  2  D0 F9        	bne kget
009E3B  2  AD 09 D2     	lda KBCODE		; If pressed, get keycode
009E3E  2  48           	pha			; Save keycode pressed
009E3F  2               kget2:
009E3F  2  AD 0F D2     	lda SKSTAT		; Check keypress
009E42  2  29 04        	and #4
009E44  2  F0 F9        	beq kget2
009E46  2  68           	pla
009E47  2  60           	rts
009E48  2               
009E48  2               ;-------------------------------------------------------
009E48  2               ; Joystick routines.
009E48  2               ;
009E48  2               ; contrl = 1, Joystick1
009E48  2               ;          2, Joystick2
009E48  2               ;-------------------------------------------------------
009E48  2               
009E48  2               ; Iitialize joysticks
009E48  2               
009E48  2               joyinit:
009E48  2  60           	rts
009E49  2               
009E49  2               ; Joystick1 controls.
009E49  2               
009E49  2               joy1:
009E49  2  A9 00        	lda #0		 	; zero reading.
009E4B  2  85 rr        	sta joyval
009E4D  2               
009E4D  2  AD 9C 9D     	lda keys+6		; Check Fire3
009E50  2  20 20 9E     	jsr ktest
009E53  2  26 rr        	rol joyval
009E55  2  AD 9B 9D     	lda keys+5		; Check Fire2
009E58  2  20 20 9E     	jsr ktest
009E5B  2  26 rr        	rol joyval
009E5D  2  AD 10 D0     	lda TRIG0		; Check Fire
009E60  2  4A           	lsr
009E61  2  26 rr        	rol joyval
009E63  2               
009E63  2  AD 00 D3     	lda STICK
009E66  2  85 rr        	sta tmp
009E68  2  46 rr        	lsr tmp			; Check up
009E6A  2  26 rr        	rol joyval
009E6C  2  46 rr        	lsr tmp			; Check dwon
009E6E  2  26 rr        	rol joyval
009E70  2  46 rr        	lsr tmp			; Check left
009E72  2  26 rr        	rol joyval
009E74  2  46 rr        	lsr tmp			; Check right
009E76  2  26 rr        	rol joyval
009E78  2               
009E78  2  60           	rts
009E79  2               
009E79  2               ; Joystick2 controls.
009E79  2               
009E79  2               joy2:
009E79  2  A9 00        	lda #0		 	; zero reading.
009E7B  2  85 rr        	sta joyval
009E7D  2               
009E7D  2  AD 9C 9D     	lda keys+6		; Check Fire3
009E80  2  20 20 9E     	jsr ktest
009E83  2  26 rr        	rol joyval
009E85  2  AD 9B 9D     	lda keys+5		; Check Fire2
009E88  2  20 20 9E     	jsr ktest
009E8B  2  26 rr        	rol joyval
009E8D  2  AD 11 D0     	lda TRIG1		; Check Fire
009E90  2  4A           	lsr
009E91  2  26 rr        	rol joyval
009E93  2               
009E93  2  AD 00 D3     	lda STICK
009E96  2  4A           	lsr a
009E97  2  4A           	lsr a
009E98  2  4A           	lsr a
009E99  2  4A           	lsr a
009E9A  2  85 rr        	sta tmp
009E9C  2  46 rr        	lsr tmp			; Check up
009E9E  2  26 rr        	rol joyval
009EA0  2  46 rr        	lsr tmp			; Check dwon
009EA2  2  26 rr        	rol joyval
009EA4  2  46 rr        	lsr tmp			; Check left
009EA6  2  26 rr        	rol joyval
009EA8  2  46 rr        	lsr tmp			; Check right
009EAA  2  26 rr        	rol joyval
009EAC  2               
009EAC  2  60           	rts
009EAD  2  60           	rts
009EAE  2               
009EAE  2               ;---------------------------------------------------------------
009EAE  2               ; Bitmap display list must be aligned at $100
009EAE  2               ;---------------------------------------------------------------
009EAE  2               bitmaplist:
009EAE  2               
009EAE  2               ; Align $100
009EAE  2               
009EAE  2  00 00 00 00  .repeat ((bitmaplist/256)+1)*256-bitmaplist
009EB2  2  00 00 00 00  
009EB6  2  00 00 00 00  
009F00  2               	.byte 0
009F00  2               .endrepeat
009F00  2               
009F00  2               ; Set graphic mode
009F00  2               
009F00  2               .if gflag
009F00  2               	GFXMODE = MODEE
009F00  2               .else
009F00  2               	GFXMODE = MODEF
009F00  2               .endif
009F00  2               
009F00  2               BITMAP_DLIST:
009F00  2  70           	.byte BLANK8
009F01  2  70           	.byte BLANK8
009F02  2  70           	.byte BLANK8
009F03  2               
009F03  2  4F           	.byte LMS+GFXMODE
009F04  2  00 E4        	.word ScreenAddr
009F06  2  0F 0F 0F 0F  	.res 95,GFXMODE
009F0A  2  0F 0F 0F 0F  
009F0E  2  0F 0F 0F 0F  
009F65  2               
009F65  2  4F            	.byte LMS+GFXMODE
009F66  2  00 F0        	.word ScreenAddr+96*32
009F68  2  0F 0F 0F 0F  	.res 95,GFXMODE
009F6C  2  0F 0F 0F 0F  
009F70  2  0F 0F 0F 0F  
009FC7  2               
009FC7  2  41           	.byte DLISTENDJUMP
009FC8  2  00 9F        	.word BITMAP_DLIST
009FCA  2               
009FCA  2               
009FCA  1               	.include "z80.asm"
009FCA  2               ;------------------------------------------------------
009FCA  2               ; z80.asm
009FCA  2               ; spectrum stuff
009FCA  2               ; adresses
009FCA  2               
009FCA  2               
009FCA  2               ; Contains seperatly 1 bit set
009FCA  2               
009FCA  2               _bitmem0	= $f8
009FCA  2               _bitmem1	= $f9
009FCA  2               _bitmem2	= $fa
009FCA  2               _bitmem3	= $fb
009FCA  2               _bitmem4	= $fc
009FCA  2               _bitmem5	= $fd
009FCA  2               _bitmem6	= $fe
009FCA  2               _bitmem7	= $ff
009FCA  2               
009FCA  2               ; constants
009FCA  2               _bitvalue0	= $01
009FCA  2               _bitvalue1	= $02
009FCA  2               _bitvalue2	= $04
009FCA  2               _bitvalue3	= $08
009FCA  2               _bitvalue4	= $10
009FCA  2               _bitvalue5	= $20
009FCA  2               _bitvalue6	= $40
009FCA  2               _bitvalue7	= $80
009FCA  2               
009FCA  2               _notbitvalue0	= $fe
009FCA  2               _notbitvalue1	= $fd
009FCA  2               _notbitvalue2	= $fb
009FCA  2               _notbitvalue3	= $f7
009FCA  2               _notbitvalue4	= $ef
009FCA  2               _notbitvalue5	= $df
009FCA  2               _notbitvalue6	= $bf
009FCA  2               _notbitvalue7	= $7f
009FCA  2               
009FCA  2               
009FCA  2               exx:
009FCA  2  A5 62        		lda z80_c
009FCC  2  A4 6E        		ldy z80_cp
009FCE  2  84 62        		sty z80_c
009FD0  2  85 6E        		sta z80_cp
009FD2  2  A5 63        		lda z80_b
009FD4  2  A4 6F        		ldy z80_bp
009FD6  2  84 63        		sty z80_b
009FD8  2  85 6F        		sta z80_bp
009FDA  2  A5 64        		lda z80_e
009FDC  2  A4 70        		ldy z80_ep
009FDE  2  84 64        		sty z80_e
009FE0  2  85 70        		sta z80_ep
009FE2  2  A5 65        		lda z80_d
009FE4  2  A4 71        		ldy z80_dp
009FE6  2  84 65        		sty z80_d
009FE8  2  85 71        		sta z80_dp
009FEA  2  A5 rr        		lda scraddr
009FEC  2  A4 72        		ldy z80_lp
009FEE  2  84 rr        		sty scraddr
009FF0  2  85 72        		sta z80_lp
009FF2  2  A5 rr        		lda scraddr+1
009FF4  2  A4 73        		ldy z80_hp
009FF6  2  84 rr        		sty scraddr+1
009FF8  2  85 73        		sta z80_hp
009FFA  2  60           		rts
009FFB  2               
009FFB  2               
009FFB  1               eind_asm:
009FFB  1               eop:					; End Of Program
009FFB  1               
009FFB  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(48384-eind_asm + start_asm))
009FFB  1               
