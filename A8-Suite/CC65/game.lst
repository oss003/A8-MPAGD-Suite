ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2000
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 1 ;
000000r 2               mflag = 1 ;
000000r 2               oflag = 1 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2  xx xx        TmpAddr:    .res 2
000059r 2  xx           bwid:	    .res 1     		; box/menu width.
00005Ar 2  xx           blen:	    .res 1     		; box/menu height.
00005Br 2  xx           btop:	    .res 1    	 	; box coordinates.
00005Cr 2  xx           blft:	    .res 1
00005Dr 2               .endif
00005Dr 2               
00005Dr 2               .if sflag .or pflag
00005Dr 2               shrctr:	    .res 1
00005Dr 2               .endif
00005Dr 2               .if pflag
00005Dr 2               explcnt:    .res 1
00005Dr 2               seed3:	    .res 1
00005Dr 2               .endif
00005Dr 2               
00005Dr 2               .if aflag
00005Dr 2               pbptr:       .res 2
00005Dr 2               pbbuf:	     .res 2
00005Dr 2               .endif
00005Dr 2               
00005Dr 2               ;sndtyp:     .res 1
00005Dr 2               
00005Dr 2               .if rflag
00005Dr 2               sprshft:     .res 1
00005Dr 2               .endif
00005Dr 2               
00005Dr 1               
00005Dr 1               .segment "CODE"
000000r 1               .org asm_code-6
001FFA  1  FF FF        	.word $ffff
001FFC  1  00 20        	.word start_asm
001FFE  1  F5 8D        	.word eind_asm
002000  1               
002000  1               start_asm:
002000  1               	.include "game.inc"
002000  2               .include "fogbw.inc"
002000  3               ;--------------------------------------------------------------
002000  3               ; Arcade Game Designer.
002000  3               ; (C) 2008 Jonathan Cauldwell.
002000  3               ; ZX Spectrum Next Engine v0.7.
002000  3               ; Acorn Atom port by K.v.Oss 2018
002000  3               ;--------------------------------------------------------------
002000  3               
002000  3               ; Conditional compilation flags
002000  3               ; Code is installed if flag is set
002000  3               ; Flags are set in commandline assembly or by the compiler
002000  3               
002000  3               ; Flags set by AGD compiler
002000  3               ;	mflag  			; MENU + INV
002000  3               ;	pflag 			; particle engine
002000  3               ;	sflag 			; scrollytext
002000  3               ;	dflag 			; digging mode
002000  3               ;	cflag			; collectable blocks
002000  3               ;	oflag			; objects
002000  3               ;	lflag			; ladders
002000  3               ;
002000  3               ; Flags set manually
002000  3               ;	aflag			; adventure mode
002000  3               ;	bflag			; big sprites (16x24)
002000  3               ;	iflag			; invert mode
002000  3               
002000  3               .if mflag
002000  3               	.out "- MEN/INV enabled"
002000  3               .endif
002000  3               .if pflag
002000  3               	.out "- Particles enabled"
002000  3               .endif
002000  3               .if sflag
002000  3               	.out "- Scrolling enabled"
002000  3               .endif
002000  3               .if dflag
002000  3               	.out "- Digging enabled"
002000  3               .endif
002000  3               .if cflag
002000  3               	.out "- Collectable blocks enabled"
002000  3               .endif
002000  3               .if oflag
002000  3               	.out "- Objects enabled"
002000  3               .endif
002000  3               .if lflag
002000  3               	.out "- Ladders enabled"
002000  3               .endif
002000  3               .if aflag
002000  3               	.out "- Adventure mode enabled"
002000  3               .endif
002000  3               .if bflag
002000  3               	.out "- Big Sprites (16x24) enabled"
002000  3               .endif
002000  3               .if iflag
002000  3               	.out "- Invert mode enabled"
002000  3               .endif
002000  3               .if rflag
002000  3               	.out "- RAM saving mode enabled"
002000  3               .endif
002000  3               
002000  3               ; Global definitions ------------------------------------------------------------
002000  3               
002000  3               	FONT = font		; Font address
002000  3               
002000  3               	green	= $00		; Colour definition filters
002000  3               	yellow	= $55
002000  3               	blue	= $aa
002000  3               	red	= $ff
002000  3               
002000  3               ; Block characteristics.
002000  3               
002000  3               	PLATFM	= 1		; platform.
002000  3               	WALL	= PLATFM + 1	; solid wall.
002000  3               	LADDER	= WALL + 1	; ladder.
002000  3               	FODDER	= LADDER + 1	; fodder block.
002000  3               	DEADLY	= FODDER + 1	; deadly block.
002000  3               	CUSTOM	= DEADLY + 1	; custom block.
002000  3               	WATER	= CUSTOM + 1	; water block.
002000  3                       COLECT	= WATER + 1	; collectable block.
002000  3                       NUMTYP	= COLECT + 1	; number of types.
002000  3               
002000  3               ; Sprites.
002000  3               
002000  3               .if bflag
002000  3               	SPR_HGT	= 24		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 8		; number of sprites.
002000  3               .else				; 16x16 sprites
002000  3               	SPR_HGT = 16		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 12		; number of sprites.
002000  3               .endif
002000  3               
002000  3               	TABSIZ = 17		; size of each entry.
002000  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002000  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002000  3               	var_X  = 8		; new x coordinate of sprite.
002000  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002000  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002000  3               
002000  3               ; Particle engine.
002000  3               
002000  3               	NUMSHR = 55		; pieces of shrapnel.
002000  3               	SHRSIZ = 6		; bytes per particle.
002000  3               
002000  3               ; System constants
002000  3               
002000  3               	ScrSelAddr  = $b000	; Screen selection address
002000  3               	KeyRowAddr  = $b000	; PIA key matrix row
002000  3               	KeyColAddr  = $b001	; PIA key matrix column
002000  3               	SpeakerBit  = $b002	; Speaker bit
002000  3               	CmdReg      = $b400	; Command register AtoMMC
002000  3               	DatReg      = $b401	; Data register AtoMMC
002000  3               	Timer2_Low  = $b808	; Timer 2 low byte
002000  3               	Timer2_High = $b809	; Timer 2 high byte
002000  3               	ScreenAddr  = $e400	; Startaddress video RAM
002000  3               
002000  3               	MAP 	    = $dd00		; properties map buffer (3x256 bytes)
002000  3               	SCADTB_lb   = MAP+3*256		; screen address table lo-byte (256 bytes)
002000  3               	SCADTB_hb   = SCADTB_lb+256	; screen address table hi-byte (256 bytes)
002000  3               	SHRAPN      = SCADTB_hb+256	; shrapnel table (55x6 bytes)
002000  3               
002000  3               ; System calls
002000  3               
002000  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
002000  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
002000  3               	OSRDCH   = $fe94	; get key subroutine
002000  3                       READKEY  = $fe71	; scan key matrix subroutine
002000  3               	OSWRCH	 = $fff4	; write character
002000  3               
002000  3               
002000  3               .if iflag
002000  3               	TxtInvert   = $ff	; Invert byte for character printing
002000  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002000  3               .else
002000  3               	TxtInvert   = $00	; Invert byte for character printing
002000  3               	ScrFillByte = $00	; Screen fill byte for CLS
002000  3               .endif
002000  3               
002000  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002000  3               
002000  3               ;===============================================================
002000  3               ; Game starts here
002000  3               ;===============================================================
002000  3               
002000  3               ;.segment "CODE"
002000  3               
002000  3  20 8E 8B     	jsr init
002003  3               
002003  3               ; Clear variables
002003  3               
002003  3  A9 00        	lda #0
002005  3  A2 00        	ldx #0
002007  3               clrloop:
002007  3  95 00        	sta 0,x
002009  3  E8           	inx
00200A  3  D0 FB        	bne clrloop
00200C  3               
00200C  3               gameloop:
00200C  3  20 77 23     	jsr game	 	; start the game.
00200F  3  4C 0C 20     	jmp gameloop		; Start again
002012  3               
002012  3               ; Definition of variables
002012  3               ; Make sure pointers are arranged in the same order as the data itself.
002012  3               
002012  3  4E 46        msgptr:		.word msgdat	; messages
002014  3  A5 4A        blkptr:		.word chgfx	; block graphics.
002016  3  1D 4D        proptr:		.word bprop	; address of char properties.
002018  3  6C 4D        sptptr:		.word sprgfx	; sprite graphics
00201A  3  EC 60        frmptr:		.word frmlst	; sprite frames.
00201C  3  04 61        scrptr:		.word scdat	; address of screens.
00201E  3  99 83        nmeptr:		.word nmedat	; enemy start positions.
002020  3  75 85        objptr:		.word objdta	; object graphics
002022  3               
002022  3               ;TxtFilter:	.byte $ff
002022  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
002026  3               
002026  3               ; Don't change the order of these four.
002026  3               ; Menu routine relies on winlft following wintop.
002026  3               
002026  3  00           wintop:		.byte WINDOWTOP	; top of window.
002027  3  02           winlft:		.byte WINDOWLFT	; left edge.
002028  3  14           winhgt:		.byte WINDOWHGT	; window height.
002029  3  1C           winwid:		.byte WINDOWWID	; window width.
00202A  3  14           numob:		.byte NUMOBJ	; number of objects in game.
00202B  3               
00202B  3               ; Variables start here.
00202B  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00202B  3               
00202B  3  00           wntopx:		.byte (8 * WINDOWTOP)
00202C  3  10           wnlftx:		.byte (8 * WINDOWLFT)
00202D  3  90           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00202E  3  DE           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00202F  3               
00202F  3               ; Assorted game routines which can go in contended memory.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for inventory called by the INV command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with objects seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected objectnr of INV menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               .if mflag
00202F  3               minve:
00202F  3  A9 3E        	lda #<(invdis)		; routine address.
002031  3  8D 17 21     	sta mod0+1		; set up menu routine.
002034  3  8D 88 20     	sta mod2+1		; set up count routine.
002037  3  A9 22        	lda #>(invdis)
002039  3  8D 18 21     	sta mod0+2
00203C  3  8D 89 20     	sta mod2+2
00203F  3  A9 54        	lda #<(fopt)		; find option from available objects.
002041  3  8D BB 21     	sta mod1+1		; set up routine.
002044  3  A9 22        	lda #>(fopt)
002046  3  8D BC 21     	sta mod1+1+1
002049  3  4C 66 20     	jmp dbox		; do menu routine.
00204C  3               
00204C  3               ;--------------------------------------------------------------
00204C  3               ; Entry for menu called by the MENU command
00204C  3               ;
00204C  3               ; Input:
00204C  3               ;  X   = message nr with menu items seperated with ,
00204C  3               ;
00204C  3               ; Output:
00204C  3               ;  OPT = selected line nr of MENU menu
00204C  3               ;--------------------------------------------------------------
00204C  3               
00204C  3               mmenu:
00204C  3  A9 C6        	lda #<(always)		; routine address.
00204E  3  8D 17 21     	sta mod0+1		; set up routine.
002051  3  8D 88 20     	sta mod2+1		; set up count routine.
002054  3  A9 2C        	lda #>(always)
002056  3  8D 18 21     	sta mod0+2
002059  3  8D 89 20     	sta mod2+2
00205C  3               
00205C  3  A9 E7        	lda #<(fstd)		; standard option selection.
00205E  3  8D BB 21     	sta mod1+1		; set up routine.
002061  3  A9 21        	lda #>(fstd)
002063  3  8D BC 21     	sta mod1+2
002066  3               
002066  3               ; Drop through into box routine.
002066  3               
002066  3               ;--------------------------------------------------------------
002066  3               ; Work out size of box for message or menu.
002066  3               ;--------------------------------------------------------------
002066  3               
002066  3               dbox:
002066  3  A9 4E        	lda #<(msgdat)		; pointer to messages.
002068  3  85 66        	sta z80_l
00206A  3  A9 46        	lda #>(msgdat)
00206C  3  85 67        	sta z80_h
00206E  3               
00206E  3  20 6C 2F     	jsr getwrd		; get message number.
002071  3               
002071  3  A5 67        	lda z80_h		; store pointer to message.
002073  3  85 rr        	sta TmpAddr
002075  3  A5 66        	lda z80_l
002077  3  85 rr        	sta TmpAddr+1
002079  3               
002079  3  A9 01        	lda #1			; height.
00207B  3  85 65        	sta z80_d
00207D  3  A9 00        	lda #0			; start at object zero.
00207F  3  85 rr        	sta combyt		; store number of object in combyt.
002081  3  85 64        	sta z80_e		; maximum width.
002083  3               dbox5:
002083  3  A9 00        	lda #0			; this line"s width.
002085  3  85 63        	sta z80_b
002087  3               mod2:
002087  3  20 C6 2C     	jsr always		; item in player"s possession?
00208A  3  C9 FF        	cmp #255
00208C  3  D0 02        	bne dbox6		; not in inventory, skip this line.
00208E  3  E6 65        	inc z80_d		; add to tally.
002090  3               dbox6:
002090  3  A0 00        	ldy #0			; get character.
002092  3  B1 66        	lda (z80_hl),y
002094  3  85 61        	sta z80_a
002096  3  E6 66        	inc z80_l		; next character.
002098  3  D0 02        	bne :+
00209A  3  E6 67        	inc z80_h
00209C  3               :
00209C  3  A5 61        	lda z80_a		; reached end of line?
00209E  3  C9 2C        	cmp #','
0020A0  3  F0 0D        	beq dbox3		; yes.
0020A2  3  C9 0D        	cmp #13
0020A4  3  F0 09        	beq dbox3		; yes.
0020A6  3  E6 63        	inc z80_b		; add to this line"s width.
0020A8  3  A5 61        	lda z80_a
0020AA  3  30 10        	bmi dbox4		; end of message? yes, end count.
0020AC  3  4C 90 20     	jmp dbox6		; repeat until we find the end.
0020AF  3               dbox3:
0020AF  3  A5 64        	lda z80_e		; maximum line width.
0020B1  3  C5 63        	cmp z80_b		; have we exceeded longest so far?
0020B3  3  10 CE        	bpl dbox5		; no, carry on looking.
0020B5  3  A5 63        	lda z80_b		; make this the widest so far.
0020B7  3  85 64        	sta z80_e
0020B9  3  4C 83 20     	jmp dbox5		; keep looking.
0020BC  3               dbox4:
0020BC  3  A5 64        	lda z80_e		; maximum line width.
0020BE  3  C5 63        	cmp z80_b		; have we exceeded longest so far?
0020C0  3  10 04        	bpl dbox8		; no, carry on looking.
0020C2  3  A5 63        	lda z80_b		; final line is the longest so far.
0020C4  3  85 64        	sta z80_e
0020C6  3               dbox8:
0020C6  3  C6 65        	dec z80_d		; decrement items found.
0020C8  3  D0 07        	bne :+			; total was zero.
0020CA  3  A9 FF        	lda #255
0020CC  3  85 rr        	sta varopt
0020CE  3  4C 11 22     	jmp dbox15
0020D1  3               :
0020D1  3  A5 64        	lda z80_e		; longest line.
0020D3  3  D0 03        	bne :+			; was it zero?
0020D5  3  4C 11 22     	jmp dbox15		; total was zero.
0020D8  3               :
0020D8  3  85 rr        	sta bwid		; set up size.
0020DA  3  A5 65        	lda z80_d
0020DC  3  85 rr        	sta blen
0020DE  3               
0020DE  3               ;--------------------------------------------------------------
0020DE  3               ; That's set up our box size.
0020DE  3               ;--------------------------------------------------------------
0020DE  3               
0020DE  3  AD 28 20     	lda winhgt		; window height in characters.
0020E1  3  38           	sec
0020E2  3  E5 65        	sbc z80_d		; subtract height of box.
0020E4  3  4A           	lsr a			; divide by 2.
0020E5  3  18           	clc
0020E6  3  6D 26 20     	adc wintop		; add top edge of window.
0020E9  3  85 rr        	sta btop		; set up box top.
0020EB  3               
0020EB  3  AD 29 20     	lda winwid		; window width in characters.
0020EE  3  38           	sec
0020EF  3  E5 64        	sbc z80_e		; subtract box width.
0020F1  3  4A           	lsr a			; divide by 2.
0020F2  3  18           	clc
0020F3  3  6D 27 20     	adc winlft		; add left edge of window.
0020F6  3  85 rr        	sta blft		; box left.
0020F8  3               
0020F8  3  A9 6D        	lda #<(FONT-256)		; font.
0020FA  3  8D 44 27     	sta grbase		; set up for text display.
0020FD  3  A9 87        	lda #>(FONT-256)
0020FF  3  8D 45 27     	sta grbase+1
002102  3               
002102  3  A5 rr        	lda TmpAddr+1		; restore message pointer.
002104  3  85 66        	sta z80_l
002106  3  A5 rr        	lda TmpAddr
002108  3  85 67        	sta z80_h
00210A  3               
00210A  3  A5 rr        	lda btop		; box top.
00210C  3  85 rr        	sta dispy		; set display coordinate.
00210E  3  A9 00        	lda #0			; start at object zero.
002110  3  85 rr        	sta combyt		; store number of object in combyt.
002112  3               dbox2:
002112  3  A5 rr        	lda combyt		; get object number.
002114  3  85 61        	sta z80_a
002116  3               mod0:
002116  3  20 C6 2C     	jsr always		; check inventory for display.
002119  3  C9 FF        	cmp #255
00211B  3  F0 03        	beq :+
00211D  3  4C F1 21     	jmp dbox13		; not in inventory, skip this line.
002120  3               :
002120  3  A5 rr        	lda blft		; box left.
002122  3  85 rr        	sta dispx		; set left display position.
002124  3  A5 rr        	lda bwid		; box width.
002126  3  85 63        	sta z80_b		; store width.
002128  3               dbox0:
002128  3  A0 00        	ldy #0
00212A  3  B1 66        	lda (z80_hl),y		; get character.
00212C  3  C9 2C        	cmp #','		; end of line?
00212E  3  F0 59        	beq dbox1		; yes, next one.
002130  3  C9 0D        	cmp #13			; end of line?
002132  3  F0 55        	beq dbox1		; yes, next one.
002134  3               
002134  3  C9 8D        	cmp #141			; end of line?
002136  3  D0 05        	bne :+
002138  3  C6 rr        	dec bwid
00213A  3  4C 97 21     	jmp dbox7		; yes, next one.
00213D  3               :
00213D  3  C6 63        	dec z80_b		; one less to display.
00213F  3  29 7F        	and #127		; remove terminator.
002141  3               
002141  3  20 7C 29     	jsr pchr		; display on screen.
002144  3               
002144  3  A0 00        	ldy #0
002146  3  B1 66        	lda (z80_hl),y		; get character.
002148  3  85 61        	sta z80_a
00214A  3  E6 66        	inc z80_l		; next character.
00214C  3  D0 02        	bne :+
00214E  3  E6 67        	inc z80_h
002150  3               :
002150  3  A5 61        	lda z80_a
002152  3  C9 80        	cmp #128		; end of message?
002154  3  30 03        	bmi :+
002156  3  4C 97 21     	jmp dbox7		; yes, job done.
002159  3               :
002159  3  A5 63        	lda z80_b		; chars remaining.
00215B  3  F0 03        	beq :+			; are any left?
00215D  3  4C 28 21     	jmp dbox0		; yes, continue.
002160  3               :
002160  3               ;---------------------------------------------------
002160  3               ; Reached limit of characters per line.
002160  3               ;---------------------------------------------------
002160  3               
002160  3               dbox9:
002160  3  A0 00        	ldy #0
002162  3  B1 66        	lda (z80_hl),y		; get character.
002164  3  E6 66        	inc z80_l		; next one.
002166  3  D0 02        	bne :+
002168  3  E6 67        	inc z80_h
00216A  3               :
00216A  3  C9 2C        	cmp #','		; another line?
00216C  3  F0 24        	beq dbox10		; yes, do next line.
00216E  3  C9 0D        	cmp #13			; another line?
002170  3  F0 20        	beq dbox10		; yes, do next line.
002172  3  C9 80        	cmp #128		; end of message?
002174  3  B0 03        	bcs :+
002176  3  4C A1 21     	jmp dbox11		; yes, finish message.
002179  3               :
002179  3  4C 60 21     	jmp dbox9
00217C  3               
00217C  3               ;---------------------------------------------------
00217C  3               ; Fill box to end of line.
00217C  3               ;---------------------------------------------------
00217C  3               
00217C  3               dboxf:
00217C  3  A9 20        	lda #32			; space character.
00217E  3  20 7C 29     	jsr pchr		; display character.
002181  3  C6 63        	dec z80_b
002183  3  F0 03        	beq :+
002185  3  4C 7C 21     	jmp dboxf		; repeat for remaining chars on line.
002188  3               :
002188  3  60           	rts
002189  3               dbox1:
002189  3  E6 66        	inc z80_l		; skip character.
00218B  3  D0 02        	bne :+
00218D  3  E6 67        	inc z80_h
00218F  3               :
00218F  3  20 7C 21     	jsr dboxf		; fill box out to right side.
002192  3               dbox10:
002192  3  E6 rr        	inc dispy		; y coordinate down a line next position.
002194  3  4C 12 21     	jmp dbox2		; next line.
002197  3               dbox7:
002197  3  A5 63        	lda z80_b		; chars remaining.
002199  3  D0 03        	bne :+			; are any left?
00219B  3  4C A1 21     	jmp dbox11		; no, nothing to draw.
00219E  3               :
00219E  3  20 7C 21     	jsr dboxf		; fill message to line.
0021A1  3               
0021A1  3               ;------------------------------------------------------
0021A1  3               ; Drawn the box menu, now select option.
0021A1  3               ;------------------------------------------------------
0021A1  3               
0021A1  3               dbox11:
0021A1  3  A5 rr        	lda btop		; box top.
0021A3  3  85 rr        	sta dispy		; set bar position.
0021A5  3               dbox14:
0021A5  3  20 2B 2E     	jsr joykey		; get controls.
0021A8  3  C9 7F        	cmp #$7f		; anything pressed?
0021AA  3  D0 F9        	bne dbox14		; yes, debounce it.
0021AC  3  20 1A 22     	jsr dbar		; draw bar.
0021AF  3               dbox12:
0021AF  3  20 2B 2E     	jsr joykey		; get controls.
0021B2  3  C9 7F        	cmp #$7f		; anything pressed?
0021B4  3  F0 F9        	beq dbox12		; no, nothing.
0021B6  3  29 10        	and #16			; fire button pressed?
0021B8  3  D0 03        	bne :+
0021BA  3               mod1:
0021BA  3  4C E7 21     	jmp fstd		; yes, job done.
0021BD  3               :
0021BD  3  20 1A 22     	jsr dbar		; delete bar.
0021C0  3               
0021C0  3  A5 rr        	lda joyval		; joystick reading.
0021C2  3  29 08        	and #8			; going up?
0021C4  3  F0 13        	beq dboxu		; yes, go up.
0021C6  3               
0021C6  3  A6 rr        	ldx dispy		; vertical position of bar.
0021C8  3  E8           	inx			; look down.
0021C9  3  8A           	txa
0021CA  3  38           	sec
0021CB  3  E5 rr        	sbc btop		; find distance from top.
0021CD  3  C5 rr        	cmp blen		; top of box.
0021CF  3  D0 03        	bne :+
0021D1  3  4C A5 21     	jmp dbox14		; yes, go no further.
0021D4  3               :
0021D4  3  E6 rr        	inc dispy		; move bar.
0021D6  3  4C A5 21     	jmp dbox14		; continue.
0021D9  3               dboxu:
0021D9  3  A5 rr        	lda dispy		; vertical position of bar.
0021DB  3  C5 rr        	cmp btop		; are we at the top?
0021DD  3  D0 03        	bne :+
0021DF  3  4C A5 21     	jmp dbox14		; yes, go no further.
0021E2  3               :
0021E2  3  C6 rr        	dec dispy		; move bar.
0021E4  3  4C A5 21     	jmp dbox14		; continue.
0021E7  3               fstd:
0021E7  3  A5 rr        	lda dispy		; bar position.
0021E9  3  38           	sec
0021EA  3  E5 rr        	sbc btop		; find selected option.
0021EC  3  85 rr        	sta varopt		; store the option.
0021EE  3  4C 1A 23     	jmp redraw		; redraw the screen.
0021F1  3               
0021F1  3               ;------------------------------------------------------
0021F1  3               ; Option not available.  Skip this line.
0021F1  3               ;------------------------------------------------------
0021F1  3               
0021F1  3               dbox13:
0021F1  3  A0 00        	ldy #0
0021F3  3  B1 66        	lda (z80_hl),y		; get character.
0021F5  3  E6 66        	inc z80_l		; next one.
0021F7  3  D0 02        	bne :+
0021F9  3  E6 67        	inc z80_h
0021FB  3               :
0021FB  3  C9 2C        	cmp #','		; another line?
0021FD  3  D0 03        	bne :+
0021FF  3  4C 12 21     	jmp dbox2		; yes, do next line.
002202  3               :
002202  3  C9 0D        	cmp #13			; another line?
002204  3  D0 03        	bne :+
002206  3  4C 12 21     	jmp dbox2		; yes, do next line.
002209  3               :
002209  3               
002209  3  10 03        	bpl :+			; end of message?
00220B  3  4C A1 21     	jmp dbox11		; yes, finish message.
00220E  3               :
00220E  3  4C F1 21     	jmp dbox13
002211  3               dbox15:
002211  3  A5 rr        	lda TmpAddr		; pop message pointer from the stack.
002213  3  85 67        	sta z80_h
002215  3  A5 rr        	lda TmpAddr+1
002217  3  85 66        	sta z80_l
002219  3  60           	rts
00221A  3               
00221A  3               ;------------------------------------------------------
00221A  3               ; Invert bar
00221A  3               ;------------------------------------------------------
00221A  3               
00221A  3               dbar:
00221A  3  A5 rr        	lda blft		; box left.
00221C  3  85 rr        	sta dispx		; set display coordinate.
00221E  3  20 8B 28     	jsr gprad		; get printing address.
002221  3               
002221  3  A5 rr        	lda bwid		; box width.
002223  3  85 62        	sta z80_c		; loop counter in c.
002225  3  A5 67        	lda z80_h
002227  3  85 65        	sta z80_d		; store screen address high byte.
002229  3               dbar1:
002229  3  A2 07        	ldx #7			; pixel height in b.
00222B  3               dbar0:
00222B  3  BC 11 29     	ldy scrtab,x
00222E  3  B1 rr        	lda (scraddr),y		; get screen byte.
002230  3  49 FF        	eor #255		; reverse all bits.
002232  3  91 rr        	sta (scraddr),y		; write back to screen.
002234  3  CA           	dex			; next line down.
002235  3  10 F4        	bpl dbar0		; draw rest of character.
002237  3               
002237  3  E6 rr        	inc scraddr		; one char right.
002239  3  C6 62        	dec z80_c		; decrement character counter.
00223B  3  D0 EC        	bne dbar1		; repeat for whole line.
00223D  3  60           	rts
00223E  3               
00223E  3               ;------------------------------------------------------
00223E  3               ; Point to object
00223E  3               ;
00223E  3               ; Input:
00223E  3               ;  combyt
00223E  3               ;
00223E  3               ; Output:
00223E  3               ;  A = object number, A=255 if already in possession
00223E  3               ;------------------------------------------------------
00223E  3               
00223E  3               invdis:
00223E  3  A5 66        	lda z80_l		; store message text pointer.
002240  3  48           	pha
002241  3  A5 67        	lda z80_h
002243  3  48           	pha
002244  3  A5 rr        	lda combyt		; object number.
002246  3  E6 rr        	inc combyt		; ready for next one.
002248  3  20 F4 25     	jsr gotob		; check if we have object.
00224B  3  A8           	tay
00224C  3  68           	pla
00224D  3  85 67        	sta z80_h
00224F  3  68           	pla
002250  3  85 66        	sta z80_l
002252  3  98           	tya
002253  3  60           	rts
002254  3               
002254  3               ;------------------------------------------------------
002254  3               ; Find option selected.
002254  3               ;
002254  3               ; Input:
002254  3               ;  -
002254  3               ;
002254  3               ; Output:
002254  3               ;  OPT = selected object
002254  3               ;------------------------------------------------------
002254  3               
002254  3               fopt:
002254  3  A5 rr        	lda dispy
002256  3  38           	sec
002257  3  E5 rr        	sbc btop		; find selected option.
002259  3  85 rr        	sta tmp+2		; option selected in b register.
00225B  3  E6 rr        	inc tmp+2
00225D  3               
00225D  3  A9 00        	lda #0			; set to first item.
00225F  3  85 rr        	sta combyt		; object number.
002261  3               fopt0:
002261  3  20 71 22     	jsr fobj		; find next object in inventory.
002264  3  C6 rr        	dec tmp+2
002266  3  D0 F9        	bne fopt0		; repeat for relevant steps down the list.
002268  3               
002268  3  A5 rr        	lda combyt		; get option.
00226A  3  85 rr        	sta varopt		; store the option.
00226C  3  C6 rr        	dec varopt		; one less, due to where we increment combyt.
00226E  3  4C 1A 23     	jmp redraw		; redraw the screen.
002271  3               fobj:
002271  3  A4 rr        	ldy combyt		; object number.
002273  3  E6 rr        	inc combyt		; ready for next item.
002275  3  98           	tya
002276  3  20 F4 25     	jsr gotob		; do we have this item?
002279  3  C9 FF        	cmp #255
00227B  3  D0 01        	bne :+
00227D  3  60           	rts
00227E  3               :
00227E  3  4C 71 22     	jmp fobj		; yes, it's on the list.
002281  3               
002281  3               ;bwid:	.byte 0              ; box/menu width.
002281  3               ;blen:	.byte 0              ; box/menu height.
002281  3               ;btop:	.byte 0              ; box coordinates.
002281  3               ;blft:	.byte 0
002281  3               .endif
002281  3               
002281  3               ;----------------------------------------------------
002281  3               ; Delay routine 1/50 sec
002281  3               ;
002281  3               ; Wait 1/60 sec = 16666 usec
002281  3               ; Wait 208 x 16 =  3328 usec
002281  3               ;                 19994 usec
002281  3               ; rts           =     6 usec
002281  3               ; Total         = 20000 usec
002281  3               ;----------------------------------------------------
002281  3               
002281  3               delay:
002281  3  60             rts
002282  3  85 rr        	sta xtmp
002284  3               del_loop:
002284  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
002287  3               
002287  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
002289  3               delay1:
002289  3  61 80        	adc ($80,x)		;	 6 usec
00228B  3  61 80        	adc ($80,x)		;	 6 usec
00228D  3  88           	dey			;	 2 usec
00228E  3  D0 F9        	bne delay1		;	 2 usec
002290  3  EA           	nop			; 2 usec
002291  3  EA           	nop			; 2 usec
002292  3               				; tot: 20000 usec
002292  3  C6 rr        	dec xtmp
002294  3  D0 EE        	bne del_loop
002296  3  60           	rts
002297  3               
002297  3               ;----------------------------------------------------
002297  3               ; Clear sprite table.
002297  3               ;
002297  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002297  3               ;----------------------------------------------------
002297  3               
002297  3               xspr:
002297  3  A9 FF        	lda #255		; clear byte.
002299  3  A2 00        	ldx #0			; length of table.
00229B  3               xspr0:
00229B  3  9D EE 36     	sta sprtab,x		; sprite table.
00229E  3  E8           	inx			; move to next byte.
00229F  3  E0 CC        	cpx #SPRBUF
0022A1  3  D0 F8        	bne xspr0		; repeat for rest of table.
0022A3  3  60           	rts
0022A4  3               
0022A4  3               ;-------------------------------------------------------------
0022A4  3               ; Initialise all objects.
0022A4  3               ;
0022A4  3               ; Reset current room,y,x to start room,y,x for all objects
0022A4  3               ;-------------------------------------------------------------
0022A4  3               
0022A4  3               .if oflag
0022A4  3               iniob:
0022A4  3  A9 75        	lda #<objdta 		; objects table.
0022A6  3  85 68        	sta z80_x
0022A8  3  A9 85        	lda #>objdta
0022AA  3  85 69        	sta z80_i
0022AC  3               
0022AC  3  AE 2A 20     	ldx numob 		; number of objects in the game.
0022AF  3               iniob0:
0022AF  3  A0 23        	ldy #35
0022B1  3  B1 68        	lda (z80_ix),y 		; start screen.
0022B3  3  A0 20        	ldy #32
0022B5  3  91 68        	sta (z80_ix),y 		; set start screen.
0022B7  3               
0022B7  3  A0 24        	ldy #36
0022B9  3  B1 68        	lda (z80_ix),y 		; find start y.
0022BB  3  A0 21        	ldy #33
0022BD  3  91 68        	sta (z80_ix),y 		; set start y.
0022BF  3               
0022BF  3  A0 25        	ldy #37
0022C1  3  B1 68        	lda (z80_ix),y 		; get initial x.
0022C3  3  A0 22        	ldy #34
0022C5  3  91 68        	sta (z80_ix),y 		; set x coord.
0022C7  3               
0022C7  3  18           	clc 			; point to next object.
0022C8  3  A5 68        	lda z80_x
0022CA  3  69 26        	adc #38			; distance between objects.
0022CC  3  85 68        	sta z80_x
0022CE  3  90 02        	bcc :+
0022D0  3  E6 69        	inc z80_i
0022D2  3               :
0022D2  3  CA           	dex 			; repeat.
0022D3  3  D0 DA        	bne iniob0
0022D5  3               
0022D5  3  60           	rts
0022D6  3               .endif
0022D6  3               
0022D6  3               ;-------------------------------------------------------------
0022D6  3               ; Screen synchronisation.
0022D6  3               ;
0022D6  3               ;  - read joystick/keyboard
0022D6  3               ;  - handle sound
0022D6  3               ;  - sync framerate with clock
0022D6  3               ;  - handle shrapnel every even frame
0022D6  3               ;-------------------------------------------------------------
0022D6  3               
0022D6  3               vsync:
0022D6  3  48           	pha
0022D7  3  98           	tya
0022D8  3  48           	pha
0022D9  3  8A           	txa
0022DA  3  48           	pha
0022DB  3  20 2B 2E     	jsr joykey		; read joystick/keyboard.
0022DE  3  4C 13 23       jmp sndskip
0022E1  3               
0022E1  3               vsync1:
0022E1  3  AD 09 B8     	lda Timer2_High		; sync framerate with clock
0022E4  3  C9 FF        	cmp #$ff
0022E6  3  D0 F9        	bne vsync1
0022E8  3  A9 C3        	lda #>50000
0022EA  3  8D 09 B8     	sta Timer2_High
0022ED  3  A9 50        	lda #<50000
0022EF  3  8D 08 B8     	sta Timer2_Low
0022F2  3               
0022F2  3  A5 rr        	lda clock
0022F4  3  29 01        	and #1
0022F6  3  D0 03        	bne:+
0022F8  3  20 76 23     	jsr proshr		; handle shrapnel every even frame
0022FB  3               :
0022FB  3  AD 19 23     	lda sndtyp
0022FE  3  F0 13        	beq sndskip
002300  3               sndloop:
002300  3  AD 02 B0     	lda SpeakerBit		; handle sound
002303  3  AC 19 23     	ldy sndtyp
002306  3               sndwait:
002306  3  88           	dey
002307  3  D0 FD        	bne sndwait
002309  3  49 04        	eor #4
00230B  3  8D 02 B0     	sta SpeakerBit
00230E  3  CE 19 23     	dec sndtyp
002311  3  D0 ED        	bne sndloop
002313  3               sndskip:
002313  3  68           	pla
002314  3  AA           	tax
002315  3  68           	pla
002316  3  A8           	tay
002317  3  68           	pla
002318  3  60           	rts
002319  3               
002319  3  00           sndtyp:	.byte 0
00231A  3               
00231A  3               ;-----------------------------------------------
00231A  3               ; Redraw the screen.
00231A  3               ;
00231A  3               ; Remove old copy of all sprites for redraw.
00231A  3               ;-----------------------------------------------
00231A  3               
00231A  3               redraw:
00231A  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
00231C  3  48           	pha
00231D  3  A5 68        	lda z80_x
00231F  3  48           	pha
002320  3               
002320  3  20 4E 2A     	jsr droom		; show screen layout.
002323  3               .if oflag
002323  3  20 78 25     	jsr shwob		; draw objects.
002326  3               .endif
002326  3               numsp0:
002326  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002328  3  85 rr        	sta tmp
00232A  3               
00232A  3  A9 EE        	lda #<sprtab		; sprite table.
00232C  3  85 68        	sta z80_x
00232E  3  A9 36        	lda #>sprtab
002330  3  85 69        	sta z80_i
002332  3               redrw0:
002332  3  A0 00        	ldy #0
002334  3  B1 68        	lda (z80_ix),y		; old sprite type.
002336  3  C9 FF        	cmp #255		; is it enabled?
002338  3  F0 0B        	beq redrw1 		; no, find next one.
00233A  3               
00233A  3  A0 03        	ldy #3
00233C  3  B1 68        	lda (z80_ix),y 		; sprite y.
00233E  3  C9 B1        	cmp #177		; beyond maximum?
002340  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002342  3               
002342  3  20 B7 31     	jsr sspria		; show single sprite.
002345  3               redrw1:
002345  3  18           	clc			; next sprite.
002346  3  A5 68        	lda z80_x
002348  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00234A  3  85 68        	sta z80_x
00234C  3  90 02        	bcc :+
00234E  3  E6 69        	inc z80_i
002350  3               :
002350  3  C6 rr        	dec tmp			; repeat for remaining sprites.
002352  3  D0 DE        	bne redrw0
002354  3               rpblc1:
002354  3               ;	jsr dshrp		; redraw shrapnel.
002354  3               
002354  3               .if aflag
002354  3               	jsr rbloc		; draw blocks for this screen
002354  3               .endif
002354  3  68           	pla			; retrieve sprite pointer.
002355  3  85 68        	sta z80_x
002357  3  68           	pla
002358  3  85 69        	sta z80_i
00235A  3               
00235A  3  60           	rts
00235B  3               
00235B  3               ;----------------------------------------------------------------------
00235B  3               ; Clear screen routine.
00235B  3               ;
00235B  3               ; Fill screenmem $e400-$fbff with ScrFillByte
00235B  3               ;----------------------------------------------------------------------
00235B  3               
00235B  3               cls:
00235B  3  A9 E4        	lda #>ScreenAddr		; screen address.
00235D  3  8D 66 23     	sta clsloop+2
002360  3  A9 00        	lda #ScrFillByte
002362  3               .if iflag
002362  3               	eor #$ff
002362  3               .endif
002362  3  A0 00        	ldy #0
002364  3               clsloop:
002364  3  99 00 E4     	sta ScreenAddr,y
002367  3  C8           	iny
002368  3  D0 FA        	bne clsloop
00236A  3  EE 66 23     	inc clsloop+2
00236D  3  AE 66 23     	ldx clsloop+2
002370  3  E0 FC        	cpx #>(ScreenAddr+$1800)
002372  3  D0 F0        	bne clsloop
002374  3  60           	rts
002375  3               
002375  3               ;----------------------------------------------------------------------
002375  3               ; Atomic palette is static
002375  3               ;----------------------------------------------------------------------
002375  3               
002375  3               setpal:
002375  3  60           	rts
002376  3               
002376  3               ;----------------------------------------------------------------------
002376  3               ; FODDER check
002376  3               ;----------------------------------------------------------------------
002376  3               
002376  3               .if pflag .or dflag
002376  3               fdchk:
002376  3               	cmp #FODDER 		; is it fodder?
002376  3               	beq :+
002376  3               	rts 			; no.
002376  3               :
002376  3               	lda #0			; wipe fodder in MAP
002376  3               	ldy #0
002376  3               	sta (bufaddr),y 	; rewrite block type.
002376  3               
002376  3               	lda dispx		; x=x/8
002376  3               	pha
002376  3               	lsr a
002376  3               	lsr a
002376  3               	lsr a
002376  3               	sta dispx
002376  3               
002376  3               	lda dispy		; y=y/8
002376  3               	pha
002376  3               	lsr a
002376  3               	lsr a
002376  3               	lsr a
002376  3               	sta dispy
002376  3               
002376  3               	lda #0 			; block to write.
002376  3               	jsr pattr 		; write block.
002376  3               
002376  3               	pla
002376  3               	sta dispy
002376  3               	pla
002376  3               	sta dispx
002376  3               	rts
002376  3               .endif
002376  3               
002376  3               ;----------------------------------------------------
002376  3               ; Scrolly text and puzzle variables.
002376  3               ;----------------------------------------------------
002376  3               
002376  3               .if sflag
002376  3               txtbit:	.byte 128		; bit to write.
002376  3               txtwid:	.byte 16		; width of ticker message.
002376  3               txtpos:	.word msgdat
002376  3               txtini:	.word msgdat
002376  3               txtscr:	.word ScreenAddr
002376  3               .endif
002376  3               
002376  3               ;----------------------------------------------------
002376  3               ; Specialist routines.
002376  3               ; Process shrapnel.
002376  3               ;----------------------------------------------------
002376  3               proshr:
002376  3               .if pflag
002376  3               	lda #<SHRAPN		; table.
002376  3               	sta z80_x
002376  3               	lda #>SHRAPN
002376  3               	sta z80_i
002376  3               
002376  3               	lda #NUMSHR		; shrapnel pieces to process.
002376  3               	sta shrctr
002376  3               prosh0:
002376  3               	ldy #0
002376  3               	lda (z80_ix),y		; on/off marker.
002376  3               	asl a
002376  3               proshx:
002376  3               	bcs :+
002376  3               	jsr prosh1 		; on, so process it.
002376  3               :
002376  3               	clc
002376  3               	lda z80_x
002376  3               	adc #SHRSIZ
002376  3               	sta z80_x
002376  3               	bcc :+
002376  3               	inc z80_i
002376  3               :
002376  3               	dec shrctr		; round again.
002376  3               	bne prosh0
002376  3               .endif
002376  3               .if sflag
002376  3               	jsr scrly
002376  3               .endif
002376  3  60           	rts
002377  3               
002377  3               .if pflag
002377  3               ;shrctr:	.byte 0
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Proces shrapnel piece
002377  3               ;----------------------------------------------------
002377  3               
002377  3               prosh1:
002377  3               	jsr plot 		; delete the pixel.
002377  3               
002377  3               	lda #<shrptr		; shrapnel routine pointers.
002377  3               	sta z80_l
002377  3               	lda #>shrptr
002377  3               	sta z80_h
002377  3               
002377  3               	ldy #0
002377  3               	lda (z80_ix),y		; restore shrapnel type.
002377  3               	jsr prosh2 		; run the routine.
002377  3               	jsr chkxy		; check x and y are good before we redisplay.
002377  3               
002377  3               	lda #<SHRSIZ 		; distance to next.
002377  3               	sta z80_e
002377  3               	lda #>SHRSIZ
002377  3               	sta z80_d
002377  3               	rts
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Run the routine
002377  3               ;----------------------------------------------------
002377  3               
002377  3               prosh2:
002377  3               	asl a 			; 2 bytes per address.
002377  3               	tay
002377  3               	lda shrptr,y
002377  3               	sta z80_l
002377  3               	lda shrptr+1,y 		; fetch high byte from table.
002377  3               	sta z80_h
002377  3               	jmp (z80_hl) 		; jump to routine.
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Paricle routine table
002377  3               ;----------------------------------------------------
002377  3               
002377  3               shrptr:	.word laser		; laser.
002377  3               	.word trail		; vapour trail.
002377  3               	.word shrap		; shrapnel from explosion.
002377  3               	.word dotl		; horizontal starfield left.
002377  3               	.word dotr		; horizontal starfield right.
002377  3               	.word dotu		; vertical starfield up.
002377  3               	.word dotd		; vertical starfield down.
002377  3               	.word ptcusr		; user particle.
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Explosion shrapnel.
002377  3               ;----------------------------------------------------
002377  3               
002377  3               shrap:
002377  3               	ldy #1
002377  3               	lda (z80_ix),y 		; get the angle.
002377  3               	clc
002377  3               	adc #<shrsin		; shrapnel sine table.
002377  3               	sta z80_l
002377  3               	lda #>shrsin
002377  3               	adc #0
002377  3               	sta z80_h
002377  3               
002377  3               	ldy #0
002377  3               	lda (z80_hl),y 		; fetch value from table.
002377  3               	sta z80_e
002377  3               	inc z80_l 		; next byte of table.
002377  3               	bne :+
002377  3               	inc z80_h
002377  3               :
002377  3               	ldy #0
002377  3               	lda (z80_hl),y		; fetch value from table.
002377  3               	sta z80_d
002377  3               	inc z80_l		; next byte of table.
002377  3               	bne :+
002377  3               	inc z80_h
002377  3               :
002377  3               	ldy #0
002377  3               	lda (z80_hl),y 		; fetch value from table.
002377  3               	sta z80_c
002377  3               	inc z80_l 		; next byte of table.
002377  3               	bne :+
002377  3               	inc z80_h
002377  3               :
002377  3               	ldy #0
002377  3               	lda (z80_hl),y 		; fetch value from table.
002377  3               	sta z80_b
002377  3               
002377  3               	ldy #2
002377  3               	lda (z80_ix),y 		; x coordinate in hl.
002377  3               	clc
002377  3               	adc z80_e		; add sine lb
002377  3               	sta (z80_ix),y		; store new coordinate lb.
002377  3               	ldy #3
002377  3               	lda (z80_ix),y
002377  3               	adc z80_d		; add sine hb
002377  3               	sta (z80_ix),y		; store new coordinate hb.
002377  3               
002377  3               	ldy #4
002377  3               	lda (z80_ix),y	 	; y coordinate in hl.
002377  3               	clc
002377  3               	adc z80_c		; add cosine lb
002377  3               	sta (z80_ix),y		; store new coordinate lb.
002377  3               	ldy #5
002377  3               	lda (z80_ix),y
002377  3               	adc z80_b		; add cosine lb
002377  3               	sta (z80_ix),y		; store new coordinate hb.
002377  3               
002377  3               	rts
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Move dots
002377  3               ;----------------------------------------------------
002377  3               
002377  3               dotl:
002377  3               	ldy #5
002377  3               	lda (z80_ix),y
002377  3               	sec
002377  3               	sbc #1		 	; move left.
002377  3               	sta (z80_ix),y
002377  3               	rts
002377  3               dotr:
002377  3               	ldy #5
002377  3               	lda (z80_ix),y
002377  3               	clc
002377  3               	adc #1		 	; move left.
002377  3               	sta (z80_ix),y
002377  3               	rts
002377  3               dotu:
002377  3               	ldy #3
002377  3               	lda (z80_ix),y
002377  3               	sec
002377  3               	sbc #1		 	; move up.
002377  3               	sta (z80_ix),y
002377  3               	rts
002377  3               dotd:
002377  3               	ldy #3
002377  3               	lda (z80_ix),y
002377  3               	clc
002377  3               	adc #1			; move down.
002377  3               	sta (z80_ix),y
002377  3               	rts
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Check if coordinates are ok before redrawing at new position.
002377  3               ;
002377  3               ; left:   X>L		X=L	Ok
002377  3               ; right:  R+15>X	X=R	Ok
002377  3               ; top:    Y>T		Y=T	Ok
002377  3               ; bottom: B+15>Y	Y=B	Ok
002377  3               ;----------------------------------------------------
002377  3               
002377  3               chkxy:
002377  3               
002377  3               ; top:    Y>T		Y=T	Ok
002377  3               
002377  3               	ldy #3
002377  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002377  3               	cmp wntopx		; window top.
002377  3               	bcs :+			; compare with top window limit.
002377  3               	jmp kilshr		; out of window, kill shrapnel.
002377  3               :
002377  3               ; left:   X>L		X=L	Ok
002377  3               
002377  3               	ldy #5
002377  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002377  3               	cmp wnlftx		; left edge.
002377  3               	bcs :+			; compare with left window limit.
002377  3               	jmp kilshr		; out of window, kill shrapnel.
002377  3               :
002377  3               ; bottom: B+15>Y	Y=B	Ok
002377  3               
002377  3               	lda wnbotx		; point to bottom.
002377  3               	clc
002377  3               	adc #15
002377  3               	ldy #3
002377  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002377  3               	bcs :+			; compare with shrapnel x coordinate.
002377  3               	jmp kilshr		; off screen, kill shrapnel..
002377  3               :
002377  3               ; right:  R+15>X	X=R	Ok
002377  3               
002377  3               	lda wnrgtx		; point to right edge.
002377  3               	clc
002377  3               	adc #15
002377  3               	ldy #5
002377  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002377  3               	bcs :+			; compare with window limit.
002377  3               	jmp kilshr		; off screen, kill shrapnel.
002377  3               :
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Drop through.
002377  3               ; Display shrapnel.
002377  3               ;----------------------------------------------------
002377  3               
002377  3               plot:
002377  3               	ldy #3
002377  3               	lda (z80_ix),y		; y integer.
002377  3               	sta dispy	 	; workspace coordinates.
002377  3               	ldy #5
002377  3               	lda (z80_ix),y	 	; x integer.
002377  3               	sta dispx 		; workspace coordinates.
002377  3               
002377  3               	ldy #0
002377  3               	lda (z80_ix),y 		; type.
002377  3               	bne :+			; is it a laser?
002377  3               	jmp plot1 		; yes, draw laser instead.
002377  3               :
002377  3               plot0:
002377  3               	lda dispx		; which pixel within byte do we
002377  3               	and #7			; want to set first?
002377  3               	tay
002377  3               	lda dots,y 		; table of small pixel positions.
002377  3               	sta z80_e 		; get value.
002377  3               
002377  3               	jsr scadd 		; screen address.
002377  3               	ldy #0
002377  3               	lda (scraddr),y		; see what's already there.
002377  3               	eor z80_e
002377  3               	sta (scraddr),y 	; put back on screen.
002377  3               	rts
002377  3               
002377  3               plot1:
002377  3               	jsr scadd 		; screen address.
002377  3               	ldy #0
002377  3               	lda (scraddr),y 	; fetch byte there.
002377  3               	eor #255 		; toggle all bits.
002377  3               	sta (scraddr),y 	; new byte.
002377  3               	rts
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Switch off shrapnel
002377  3               ;----------------------------------------------------
002377  3               
002377  3               kilshr:
002377  3               	lda #128
002377  3               	ldy #0
002377  3               	sta (z80_ix),y	; switch off shrapnel.
002377  3               	rts
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Sine/cosine table
002377  3               ;----------------------------------------------------
002377  3               
002377  3               shrsin:	.word 0,1024,391,946,724,724,946,391
002377  3               	.word 1024,0,946,65144,724,64811,391,64589
002377  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
002377  3               	.word 64512,0,64589,391,64811,724,65144,946
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Create trail
002377  3               ;----------------------------------------------------
002377  3               
002377  3               trail:
002377  3               	ldy #1
002377  3               	lda (z80_ix),y 	; time remaining.
002377  3               	sec
002377  3               	sbc #1
002377  3               	sta (z80_ix),y
002377  3               	bne :+
002377  3               	jmp trailk		; time to switch it off.
002377  3               :
002377  3               	jsr qrand		; get a random number.
002377  3               	lsr a 			; x or y axis?
002377  3               	bcc :+
002377  3               	jmp trailv		; use y.
002377  3               :
002377  3               ; Trail horizontal
002377  3               
002377  3               	lsr a 			; which direction?
002377  3               	bcc :+
002377  3               	jmp traill		; go left.
002377  3               :
002377  3               ; Trail right
002377  3               
002377  3               	ldy #5
002377  3               	lda (z80_ix),y
002377  3               	clc
002377  3               	adc #1	 		; go right.
002377  3               	sta (z80_ix),y
002377  3               	rts
002377  3               
002377  3               ; Trail left
002377  3               
002377  3               traill:
002377  3               	ldy #5
002377  3               	lda (z80_ix),y
002377  3               	sec
002377  3               	sbc #1 			; go left.
002377  3               	sta (z80_ix),y
002377  3               	rts
002377  3               
002377  3               ; Trail vertical
002377  3               
002377  3               trailv:
002377  3               	lsr a		 	; which direction?
002377  3               	bcc :+
002377  3               	jmp trailu		; go up.
002377  3               :
002377  3               ; Trail down
002377  3               
002377  3               	ldy #3
002377  3               	lda (z80_ix),y
002377  3               	clc
002377  3               	adc #1 			; go down.
002377  3               	sta (z80_ix),y
002377  3               	rts
002377  3               
002377  3               ; Trail up
002377  3               
002377  3               trailu:
002377  3               	ldy #3
002377  3               	lda (z80_ix),y
002377  3               	sec
002377  3               	sbc #1 			; go up.
002377  3               	sta (z80_ix),y
002377  3               	rts
002377  3               
002377  3               ; Kill trail
002377  3               
002377  3               trailk:
002377  3               	lda #200		; set off-screen to kill vapour trail.
002377  3               	ldy #3
002377  3               	sta (z80_ix),y
002377  3               	rts
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Create laser beam
002377  3               ;----------------------------------------------------
002377  3               
002377  3               laser:
002377  3               	ldy #1
002377  3               	lda (z80_ix),y 		; direction.
002377  3               	ror a 			; left or right?
002377  3               	bcs :+
002377  3               	jmp laserl		; move left.
002377  3               :
002377  3               ; Laser right
002377  3               
002377  3               	lda #8			; distance to travel.
002377  3               	sta z80_b
002377  3               	jmp laserm		; move laser.
002377  3               
002377  3               ; Laser left
002377  3               
002377  3               laserl:
002377  3               	lda #248		; distance to travel.
002377  3               	sta z80_b
002377  3               laserm:
002377  3               	ldy #5
002377  3               	lda (z80_ix),y		; x position.
002377  3               	clc
002377  3               	adc z80_b		; add distance.
002377  3               	sta (z80_ix),y		; set new x coordinate.
002377  3               
002377  3               ; Test new block.
002377  3               
002377  3               	sta dispx 		; set x for block collision detection purposes.
002377  3               	ldy #3
002377  3               	lda (z80_ix),y 		; get y.
002377  3               	sta dispy		; set coordinate for collision test.
002377  3               	jsr tstbl 		; get block type there.
002377  3               	cmp #WALL		; is it solid?
002377  3               	bne :+
002377  3               	jmp trailk		; yes, it cannot pass.
002377  3               :
002377  3               .if pflag .or dflag
002377  3                       cmp #FODDER             ; is it fodder?
002377  3                       bne :+
002377  3                       jsr fdchk               ; remove fodder block.
002377  3                       jmp trailk              ; destroy laser.
002377  3               :
002377  3               .endif
002377  3                       rts                     ; no, ignore it.
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Dots mask
002377  3               ;----------------------------------------------------
002377  3               
002377  3               dots:	.byte 128,64,32,16,8,4,2,1
002377  3               
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Plot, preserving de.
002377  3               ;----------------------------------------------------
002377  3               
002377  3               plotde:
002377  3               	lda z80_d 		; put de on stack.
002377  3               	pha
002377  3               	lda z80_e
002377  3               	pha
002377  3               
002377  3               	jsr plot 		; plot pixel.
002377  3               
002377  3               	pla			; restore de from stack.
002377  3               	sta z80_e
002377  3               	pla
002377  3               	sta z80_d
002377  3               
002377  3               	rts
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Shoot a laser.
002377  3               ;----------------------------------------------------
002377  3               
002377  3               shoot:
002377  3               	sta z80_c		; store direction in c register.
002377  3               	ldy #8
002377  3               	lda (z80_ix),y 		; y coordinate.
002377  3               	clc
002377  3               shoot1:
002377  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
002377  3               	sta z80_l 		; puty y coordinate in l.
002377  3               
002377  3               	ldy #9
002377  3               	lda (z80_ix),y 		; x coordinate in h.
002377  3               	sta z80_h
002377  3               
002377  3               	lda z80_i		; store pointer to sprite.
002377  3               	pha
002377  3               	lda z80_x
002377  3               	pha
002377  3               
002377  3               	jsr fpslot 		; find particle slot.
002377  3               	bcs :+
002377  3               	jmp vapou2		; failed, restore ix.
002377  3               :
002377  3               	lda #0
002377  3               	ldy #0
002377  3               	sta (z80_ix),y 		; set up a laser.
002377  3               
002377  3               	lda z80_c
002377  3               	ldy #1
002377  3               	sta (z80_ix),y 		; set the direction.
002377  3               
002377  3               	lda z80_l
002377  3               	ldy #3
002377  3               	sta (z80_ix),y		; set y coordinate.
002377  3               
002377  3               	ror z80_c		; check direction we want.
002377  3               	bcc :+
002377  3               	jmp shootr		; shoot right.
002377  3               :
002377  3               	lda z80_h		; X position.
002377  3               shoot0:
002377  3               	and #248		; align on character boundary.
002377  3               	ldy #5
002377  3               	sta (z80_ix),y		; set x coordinate.
002377  3               	jmp vapou0 		; draw first image.
002377  3               shootr:
002377  3               	lda z80_h		; x position.
002377  3               	clc
002377  3               	adc #15			; look right.
002377  3               	jmp shoot0		; align and continue.
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Create a bit of vapour trail.
002377  3               ;----------------------------------------------------
002377  3               
002377  3               vapour:
002377  3               	lda z80_i		; store pointer to sprite.
002377  3               	pha
002377  3               	lda z80_x
002377  3               	pha
002377  3               
002377  3               	ldy #8
002377  3               	lda (z80_ix),y 		; y coordinate.
002377  3               	clc
002377  3               vapou3:
002377  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
002377  3               	sta z80_l
002377  3               
002377  3               	ldy #9
002377  3               	lda (z80_ix),y 		; x coordinate.
002377  3               	adc #7
002377  3               	sta z80_h
002377  3               
002377  3               	jsr fpslot 		; find particle slot.
002377  3               	bcc :+
002377  3               	jmp vapou1		; no, we can use it.
002377  3               :
002377  3               vapou2:
002377  3               	pla
002377  3               	sta z80_x
002377  3               	pla
002377  3               	sta z80_i
002377  3               	rts
002377  3               vapou1:
002377  3               	lda z80_l
002377  3               	ldy #3
002377  3               	sta (z80_ix),y		; set up y.
002377  3               
002377  3               	lda z80_h
002377  3               	ldy #5
002377  3               	sta (z80_ix),y 		; set up x coordinate.
002377  3               
002377  3               	jsr qrand		; get quick random number.
002377  3               	and #15			; random time.
002377  3               	clc
002377  3               	adc #15			; minimum time on screen.
002377  3               	ldy #1
002377  3               	sta (z80_ix),y		; set time on screen.
002377  3               
002377  3               	lda #1
002377  3               	ldy #0
002377  3               	sta (z80_ix),y		; define particle as vapour trail.
002377  3               vapou0:
002377  3               	jsr chkxy		; plot first position.
002377  3               	jmp vapou2
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Create a user particle.
002377  3               ;----------------------------------------------------
002377  3               
002377  3               ptusr:
002377  3               	sta z80_f		; store timer.
002377  3               
002377  3               	ldy #8
002377  3               	lda (z80_ix),y 		; y coordinate.
002377  3               	clc
002377  3               	adc #7			; mid-point of sprite.
002377  3               	sta z80_l
002377  3               
002377  3               	ldy #9
002377  3               	lda (z80_ix),y 		; x coordinate.
002377  3               	clc
002377  3               	adc #7			; mid-point of sprite.
002377  3               	sta z80_h
002377  3               
002377  3               	jsr fpslot 		; find particle slot.
002377  3               	bcs ptusr1
002377  3               	rts 			; out of slots, can't generate anything.
002377  3               ptusr1:
002377  3               	lda z80_l
002377  3               	ldy #3
002377  3               	sta (z80_ix),y 		; set up y.
002377  3               
002377  3               	lda z80_h
002377  3               	ldy #5
002377  3               	sta (z80_ix),y		; set up x coordinate.
002377  3               
002377  3               	lda z80_f 		; restore timer.
002377  3               	ldy #1
002377  3               	sta (z80_ix),y		; set time on screen.
002377  3               
002377  3               	lda #7
002377  3               	ldy #0
002377  3               	sta (z80_ix),y		; define particle as user particle.
002377  3               
002377  3               	jmp chkxy		; plot first position.
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Create a vertical or horizontal star.
002377  3               ;----------------------------------------------------
002377  3               
002377  3               star:
002377  3               	lda z80_i		; store pointer to sprite.
002377  3               	pha
002377  3               	lda z80_x
002377  3               	pha
002377  3               
002377  3               	jsr fpslot 		; find particle slot.
002377  3               	bcs star7		; found one we can use.
002377  3               star0:
002377  3               	pla 			; restore sprite pointer.
002377  3               	sta z80_x
002377  3               	pla
002377  3               	sta z80_i
002377  3               	rts 			; out of slots, can't generate anything.
002377  3               star7:
002377  3               	lda z80_c		; direction.
002377  3               	and #3 			; is it left?
002377  3               	bne :+
002377  3               	jmp star1 		; yes, it's left.
002377  3               :
002377  3               	cmp #1 			; is it right?
002377  3               	bne :+
002377  3               	jmp star2 		; yes, it's right.
002377  3               :
002377  3               	cmp #2 			; is it up?
002377  3               	bne :+
002377  3               	jmp star3 		; yes, it's up.
002377  3               :
002377  3               	ldy wntopx 		; get edge of screen.
002377  3               	iny			; down one pixel.
002377  3               	tya
002377  3               star8:
002377  3               	ldy #3
002377  3               	sta (z80_ix),y 		; set y coord.
002377  3               	jsr qrand 		; get quick random number.
002377  3               star9:
002377  3               	ldy #5
002377  3               	sta (z80_ix),y		; set x position.
002377  3               
002377  3               	lda z80_c		; direction.
002377  3               	and #3			; zero to three.
002377  3               	clc
002377  3               	adc #3			; 3 to 6 for starfield.
002377  3               	ldy #0
002377  3               	sta (z80_ix),y		; define particle as star.
002377  3               	jsr chkxy		; plot first position.
002377  3               	jmp star0
002377  3               star1:
002377  3               	jsr qrand		; get quick random number.
002377  3               	ldy #3
002377  3               	sta (z80_ix),y 		; set y coord.
002377  3               
002377  3               	lda wnrgtx 		; get edge of screen.
002377  3               	clc
002377  3               	adc #15			; add width of sprite minus 1.
002377  3               	jmp star9
002377  3               star2:
002377  3               	jsr qrand 		; get quick random number.
002377  3               	ldy #3
002377  3               	sta (z80_ix),y		; set y coord.
002377  3               
002377  3               	lda wnlftx		; get edge of screen.
002377  3               	jmp star9
002377  3               star3:
002377  3               	lda wnbotx 		; get edge of screen.
002377  3               	clc
002377  3               	adc #15 		; height of sprite minus one pixel.
002377  3               	jmp star8
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Find particle slot for lasers or vapour trail.
002377  3               ; can't use alternate accumulator.
002377  3               ;----------------------------------------------------
002377  3               
002377  3               fpslot:
002377  3               	lda #<SHRAPN 		; shrapnel table.
002377  3               	sta z80_x
002377  3               	lda #>SHRAPN
002377  3               	sta z80_i
002377  3               
002377  3               	lda #NUMSHR		; number of pieces in table.
002377  3               	sta z80_b
002377  3               fpslt0:
002377  3               	ldy #0
002377  3               	lda (z80_ix),y		; get type.
002377  3               	asl a  			; is this slot in use?
002377  3               	bcc :+
002377  3               	rts			; no, we can use it.
002377  3               :
002377  3               	clc			; point to more shrapnel.
002377  3               	lda z80_x
002377  3               	adc #SHRSIZ
002377  3               	sta z80_x
002377  3               	bcc :+
002377  3               	inc z80_i
002377  3               :
002377  3               	dec z80_b		; repeat for all shrapnel.
002377  3               	bne fpslt0
002377  3               
002377  3               	clc
002377  3               	rts 			; out of slots, can't generate anything.
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Create an explosion at sprite position.
002377  3               ;----------------------------------------------------
002377  3               
002377  3               explod:
002377  3               	sta z80_c 		; particles to create.
002377  3               
002377  3               	lda z80_i 		; store pointer to sprite.
002377  3               	pha
002377  3               	lda z80_x
002377  3               	pha
002377  3               
002377  3               	ldy #8
002377  3               	lda (z80_ix),y 		; y coordinate.
002377  3               	sta z80_l
002377  3               	ldy #9
002377  3               	lda (z80_ix),y		; x coordinate.
002377  3               	sta z80_h
002377  3               
002377  3               	lda #<SHRAPN		; shrapnel table.
002377  3               	sta z80_x
002377  3               	lda #>SHRAPN
002377  3               	sta z80_i
002377  3               
002377  3               	lda #NUMSHR		; number of pieces in table.
002377  3               	sta explcnt
002377  3               expld0:
002377  3               	ldy #0
002377  3               	lda (z80_ix),y		; get type.
002377  3               	asl a 			; is this slot in use?
002377  3               	bcs expld1		; no, we can use it.
002377  3               expld2:
002377  3               	clc
002377  3               	lda z80_x
002377  3               	adc #SHRSIZ
002377  3               	sta z80_x
002377  3               	bcc :+
002377  3               	inc z80_i
002377  3               :
002377  3               	dec explcnt		; repeat for all shrapnel.
002377  3               	bne expld0
002377  3               expld3:
002377  3               	pla			; restore sprite pointer.
002377  3               	sta z80_x
002377  3               	pla
002377  3               	sta z80_i
002377  3               	rts 			; out of slots, can't generate any more.
002377  3               
002377  3               expld1:
002377  3               	lda z80_c		; shrapnel counter.
002377  3               	and #15			; 0 to 15.
002377  3               	clc			; add to x.
002377  3               	adc z80_l
002377  3               	ldy #3
002377  3               	sta (z80_ix),y		; y coord.
002377  3               
002377  3               	lda seed3 		; crap random number.
002377  3               	and #15			; 0 to 15.
002377  3               	clc 			; add to y.
002377  3               	adc z80_h
002377  3               	ldy #5
002377  3               	sta (z80_ix),y		; x coord.
002377  3               
002377  3               	lda #2
002377  3               	ldy #0
002377  3               	sta (z80_ix),y		; switch it on.
002377  3               
002377  3               	jsr chkxy		; plot first position.
002377  3               	jsr qrand		; quick random angle.
002377  3               	and #60 		; keep within range.
002377  3               	ldy #1
002377  3               	sta (z80_ix),y		; angle.
002377  3               
002377  3               	dec z80_c		; one less piece of shrapnel to generate.
002377  3               	bne expld2 		; back to main explosion loop.
002377  3               	jmp expld3 		; restore sprite pointer and exit.
002377  3               
002377  3               ;explcnt:	.byte 0
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Quick random
002377  3               ;----------------------------------------------------
002377  3               
002377  3               qrand:
002377  3               	jsr random		; r register.
002377  3               	eor seed3		; combine with seed.
002377  3               	sta seed3 		; new seed.
002377  3               	rts
002377  3               
002377  3               ;seed3:	.byte 0
002377  3               
002377  3               ;----------------------------------------------------
002377  3               ; Display all shrapnel.
002377  3               ;----------------------------------------------------
002377  3               
002377  3               dshrp:
002377  3               	lda #<plotde		; display routine.
002377  3               	sta proshx+1
002377  3               	lda #>plotde
002377  3               	sta proshx+2
002377  3               	jsr proshr		; process shrapnel.
002377  3               
002377  3               	lda #<prosh1		; processing routine.
002377  3               	sta proshx+1
002377  3               	lda #>prosh1
002377  3               	sta proshx+2
002377  3               	rts
002377  3               
002377  3               ;------------------------------------------------------
002377  3               ; Particle engine.
002377  3               ;
002377  3               ; Init particle data for 55 particles in SHRAPN table.
002377  3               ; Every particle has 6 bytes.
002377  3               ;
002377  3               ; global:	-
002377  3               ; local:	x,y,hl
002377  3               ; calls:	-
002377  3               ;------------------------------------------------------
002377  3               
002377  3               inishr:
002377  3               	lda #<SHRAPN 		; table.
002377  3               	sta z80_l
002377  3               	lda #>SHRAPN
002377  3               	sta z80_h
002377  3               
002377  3               	ldy #0
002377  3               	ldx #NUMSHR		; shrapnel pieces to process.
002377  3               inish0:
002377  3               	lda #255 		; kill the shrapnel.
002377  3               	sta (z80_hl),y
002377  3               
002377  3               	clc 			; point there.
002377  3               	lda z80_l
002377  3               	adc #SHRSIZ		; distance to next.
002377  3               	sta z80_l
002377  3               	bcc :+
002377  3               	inc z80_h
002377  3               :
002377  3               	dex
002377  3               	bne inish0 		; round again.
002377  3               	rts
002377  3               
002377  3               ;------------------------------------------------------
002377  3               ; Check for collision between laser and sprite.
002377  3               ;------------------------------------------------------
002377  3               
002377  3               lcol:
002377  3               	lda #<SHRAPN		; shrapnel table.
002377  3               	sta z80_l
002377  3               	lda #>SHRAPN
002377  3               	sta z80_h
002377  3               
002377  3               	lda #NUMSHR		; number of pieces in table.
002377  3               	sta z80_b
002377  3               lcol0:
002377  3               	ldy #0
002377  3               	lda (z80_hl),y 		; get type.
002377  3               	beq lcol1		; yes, check collision.
002377  3               lcol3:
002377  3               	clc			; point to more shrapnel.
002377  3               	lda z80_l
002377  3               	adc #SHRSIZ
002377  3               	sta z80_l
002377  3               	bcc :+
002377  3               	inc z80_h
002377  3               :
002377  3               	dec z80_b		; repeat for all shrapnel.
002377  3               	bne lcol0
002377  3               	rts 			; no collision, carry not set.
002377  3               lcol1:
002377  3               	ldy #3
002377  3               	lda (z80_hl),y		; get y.
002377  3               	sec
002377  3               	ldy #8
002377  3               	sbc (z80_ix),y		; subtract sprite y.
002377  3               lcolh:
002377  3               	cmp #SPR_HGT 		; within range?
002377  3               	bcc :+
002377  3               	jmp lcol2		; no, missed.
002377  3               :
002377  3               	ldy #5
002377  3               	lda (z80_hl),y 		; get x.
002377  3               	sec
002377  3               	ldy #9
002377  3               	sbc (z80_ix),y 		; subtract sprite y.
002377  3               	cmp #16			; within range?
002377  3               	bcs :+
002377  3               	jmp lcol4 		; yes, collision occurred.
002377  3               :
002377  3               lcol2:
002377  3               	jmp lcol3
002377  3               lcol4:
002377  3               	sec
002377  3               	rts 			; return with carry set for collision.
002377  3               .endif
002377  3               
002377  3               ;------------------------------------------------------
002377  3               ; Main game engine code starts here.
002377  3               ; After initialisation, mloop is the main loop
002377  3               ;------------------------------------------------------
002377  3               
002377  3               game:
002377  3               
002377  3               ; Set up screen address table.
002377  3               
002377  3               setsat:
002377  3  A9 00        	lda #<ScreenAddr		; start of screen.
002379  3  85 rr        	sta scraddr
00237B  3  A9 E4        	lda #>ScreenAddr
00237D  3  85 rr        	sta scraddr+1
00237F  3               
00237F  3  A0 00        	ldy #0			; vertical lines on screen.
002381  3               setsa0:
002381  3  A5 rr        	lda scraddr
002383  3  99 00 E0     	sta SCADTB_lb,y		; write low byte.
002386  3  A5 rr        	lda scraddr+1
002388  3  C0 C0        	cpy #192		; vertical lines on screen.
00238A  3  90 02        	bcc :+
00238C  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
00238E  3               :
00238E  3  99 00 E1     	sta SCADTB_hb,y		; write high byte.
002391  3  20 A0 32     	jsr nline		; next line down.
002394  3  C8           	iny			; next position in table.
002395  3  D0 EA        	bne setsa0
002397  3               
002397  3               ; Init graphics mode
002397  3               
002397  3  A9 F0        	lda #ScrMode		; graphics mode
002399  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
00239C  3  20 75 23     	jsr setpal 		; set up palette.
00239F  3               
00239F  3               ; Init AtoMMC joystick
00239F  3  20 3A 8C     	jsr joyinit		; AtoMMC joystick on PORT B
0023A2  3               
0023A2  3               rpblc2:
0023A2  3               .if pflag
0023A2  3               	jsr inishr 		; initialise particle engine.
0023A2  3               .endif
0023A2  3               evintr:
0023A2  3  20 D0 43     	jsr evnt12 		; call intro/menu event.
0023A5  3               
0023A5  3  A9 02        	lda #WALL 		; write default property.
0023A7  3  A2 00        	ldx #0
0023A9  3               clrmap:
0023A9  3  9D 00 DD     	sta MAP,x 		; block properties.
0023AC  3  9D 00 DE     	sta MAP+256,x
0023AF  3  9D 00 DF     	sta MAP+512,x
0023B2  3  E8           	inx			; next byte.
0023B3  3  D0 F4        	bne clrmap
0023B5  3               .if oflag
0023B5  3  20 A4 22     	jsr iniob 		; initialise objects.
0023B8  3               .endif
0023B8  3  A9 00        	lda #0			; put zero in accumulator.
0023BA  3  85 rr        	sta gamwon		; reset game won flag.
0023BC  3               
0023BC  3  20 28 25     	jsr inisc 		; init the score.
0023BF  3               mapst:
0023BF  3  AD 3D 38     	lda stmap 		; start position on map.
0023C2  3  8D CB 37     	sta roomtb		; set up position in table, if there is one.
0023C5  3               
0023C5  3               inipbl:
0023C5  3               .if aflag
0023C5  3               	lda #<eop		; reset blockpointer
0023C5  3               	sta pbptr
0023C5  3               	lda #>eop
0023C5  3               	sta pbptr+1
0023C5  3               .endif
0023C5  3  20 B3 33     	jsr initsc 		; set up first screen.
0023C8  3               
0023C8  3  A9 BA        	lda #<ssprit 		; default to spare sprite in table.
0023CA  3  85 68        	sta z80_x
0023CC  3  A9 37        	lda #>ssprit
0023CE  3  85 69        	sta z80_i
0023D0  3               evini:
0023D0  3  20 DC 44     	jsr evnt13 		; initialisation.
0023D3  3               
0023D3  3               ; Two restarts.
0023D3  3               ; First restart - clear all sprites and initialise everything.
0023D3  3               
0023D3  3               rstrt:
0023D3  3  20 C8 24     	jsr rsevt 		; restart events.
0023D6  3  20 97 22     	jsr xspr 		; clear sprite table.
0023D9  3  20 1F 35     	jsr sprlst 		; fetch pointer to screen sprites.
0023DC  3  20 A8 35     	jsr ispr 		; initialise sprite table.
0023DF  3               
0023DF  3  4C EE 23     	jmp rstrt0
0023E2  3               
0023E2  3               ; Second restart - clear all but player, and don't initialise him.
0023E2  3               
0023E2  3               rstrtn:
0023E2  3  20 C8 24     	jsr rsevt		; restart events.
0023E5  3  20 4C 35     	jsr nspr 		; clear all non-player sprites.
0023E8  3  20 1F 35     	jsr sprlst 		; fetch pointer to screen sprites.
0023EB  3  20 E5 35     	jsr kspr 		; initialise sprite table, no more players.
0023EE  3               
0023EE  3               ; Set up the player and/or enemy sprites.
0023EE  3               
0023EE  3               rstrt0:
0023EE  3  A9 00        	lda #0 			; zero in accumulator.
0023F0  3  85 rr        	sta nexlev 		; reset next level flag.
0023F2  3  85 rr        	sta restfl 		; reset restart flag.
0023F4  3  85 rr        	sta deadf 		; reset dead flag.
0023F6  3  20 4E 2A     	jsr droom 		; show screen layout.
0023F9  3               rpblc0:
0023F9  3               .if pflag
0023F9  3               	jsr inishr 		; initialise particle engine.
0023F9  3               .endif
0023F9  3               .if aflag
0023F9  3               	jsr rbloc		; draw blocks for this screen
0023F9  3               .endif
0023F9  3               .if oflag
0023F9  3  20 78 25     	jsr shwob		; draw objects.
0023FC  3               .endif
0023FC  3               
0023FC  3  A9 EE        	lda #<sprtab 		; address of sprite table, even sprites.
0023FE  3  85 68        	sta z80_x
002400  3  A9 36        	lda #>sprtab
002402  3  85 69        	sta z80_i
002404  3  20 91 30     	jsr dspr 		; display sprites.
002407  3               
002407  3  A9 FF        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002409  3  85 68        	sta z80_x
00240B  3  A9 36        	lda #>(sprtab+TABSIZ)
00240D  3  85 69        	sta z80_i
00240F  3  20 91 30     	jsr dspr 		; display sprites.
002412  3               mloop:
002412  3  20 D6 22     	jsr vsync 		; synchronise with display.
002415  3  A9 EE        	lda #<sprtab 		; address of sprite table, even sprites.
002417  3  85 68        	sta z80_x
002419  3  A9 36        	lda #>sprtab
00241B  3  85 69        	sta z80_i
00241D  3  20 91 30     	jsr dspr 		; display even sprites.
002420  3               
002420  3               ;	jsr plsnd 		; play sounds.
002420  3               
002420  3  20 76 23     	jsr proshr
002423  3  A9 FF        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002425  3  85 68        	sta z80_x
002427  3  A9 36        	lda #>(sprtab+TABSIZ)
002429  3  85 69        	sta z80_i
00242B  3  20 91 30     	jsr dspr 		; display odd sprites.
00242E  3               
00242E  3  A9 BA        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
002430  3  85 68        	sta z80_x
002432  3  A9 37        	lda #>(ssprit)
002434  3  85 69        	sta z80_i
002436  3               evlp1:
002436  3  20 00 43     	jsr evnt10 		; called once per main loop.
002439  3  20 0F 30     	jsr pspr 		; process sprites.
00243C  3               
00243C  3               ; Main loop events.
00243C  3               
00243C  3  A9 BA        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00243E  3  85 68        	sta z80_x
002440  3  A9 37        	lda #>ssprit
002442  3  85 69        	sta z80_i
002444  3               evlp2:
002444  3  20 CF 43     	jsr evnt11 		; called once per main loop.
002447  3               bsortx:
002447  3  20 85 2F     	jsr bsort 		; sort sprites.
00244A  3               
00244A  3  A5 rr        	lda nexlev		; finished level flag.
00244C  3  F0 03        	beq :+
00244E  3  4C 76 24     	jmp newlev		; is set, go to next level.
002451  3               :
002451  3  A5 rr        	lda gamwon		; finished game flag.
002453  3  F0 03        	beq :+
002455  3  4C 85 24     	jmp evwon		; is set, finish the game.
002458  3               :
002458  3  A5 rr        	lda restfl 		; finished level flag.
00245A  3  C9 01        	cmp #1			; has it been set?
00245C  3  D0 03        	bne :+
00245E  3  4C D3 23     	jmp rstrt		; yes, go to next level.
002461  3               :
002461  3  C9 02        	cmp #2			; has it been set?
002463  3  D0 03        	bne :+
002465  3  4C E2 23     	jmp rstrtn		; yes, go to next level.
002468  3               :
002468  3  A5 rr        	lda deadf 		; dead flag.
00246A  3  F0 03        	beq :+
00246C  3  4C 8B 24     	jmp pdead		; yes, player dead.
00246F  3               :
00246F  3               ; back to start of main loop.
00246F  3               
00246F  3  E6 rr        	inc frmno
002471  3  E6 rr        	inc clock
002473  3  4C 12 24     	jmp mloop		; switched to a jmp mloop during test mode.
002476  3               
002476  3               ;----------------------------------------------------------
002476  3               ; Read blocks from list and update screen accordingly.
002476  3               ;----------------------------------------------------------
002476  3               
002476  3               .if aflag
002476  3               rbloc:
002476  3               	lda #<eop		; reset temp blockpointer
002476  3               	sta pbbuf
002476  3               	lda #>eop
002476  3               	sta pbbuf+1
002476  3               
002476  3               rbloc2:
002476  3               	lda pbbuf			; check for last block
002476  3               	cmp pbptr
002476  3               	bne rbloc1
002476  3               	lda pbbuf+1
002476  3               	cmp pbptr+1
002476  3               	bne rbloc1
002476  3               	rts
002476  3               rbloc1:
002476  3               	ldy #0
002476  3               	lda (pbbuf),y		; check if block for this scno
002476  3               	cmp scno
002476  3               	bne rbloc0		; if not, skip
002476  3               	iny
002476  3               	lda (pbbuf),y		; get y
002476  3               	sta dispy
002476  3               	iny
002476  3               	lda (pbbuf),y		; get x
002476  3               	sta dispx
002476  3               	iny
002476  3               	lda (pbbuf),y		; get blocknr
002476  3               	jsr pattr2		; draw block
002476  3               rbloc0:
002476  3               	clc			; point to next block
002476  3               	lda pbbuf
002476  3               	adc #4
002476  3               	sta pbbuf
002476  3               	bcc rbloc2
002476  3               	inc pbbuf+1
002476  3               	jmp rbloc2
002476  3               .endif
002476  3               
002476  3               ;----------------------------------------------------------
002476  3               ; New level
002476  3               ;----------------------------------------------------------
002476  3               
002476  3               ;.repeat 270
002476  3               ;  .byte 0
002476  3               ;.endrep
002476  3               
002476  3               newlev:
002476  3  A5 rr        	lda scno 			; current screen.
002478  3  18           	clc
002479  3  69 01        	adc #1				; next screen.
00247B  3  CD 98 83     	cmp numsc			; total number of screens.
00247E  3  B0 05        	bcs evwon			; yes, game finished.
002480  3  85 rr        	sta scno			; set new level number.
002482  3  4C D3 23     	jmp rstrt			; restart, clearing all aliens.
002485  3               
002485  3               evwon:
002485  3  20 25 46     	jsr evnt18		 	; game completed.
002488  3  4C 9D 24     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00248B  3               
00248B  3               ;----------------------------------------------------------
00248B  3               ; Player dead.
00248B  3               ;----------------------------------------------------------
00248B  3               
00248B  3               ;.repeat 258
00248B  3               ;  .byte 0
00248B  3               ;.endrep
00248B  3               
00248B  3               pdead:
00248B  3  A9 00        	lda #0				; zeroise accumulator.
00248D  3  85 rr        	sta deadf			; reset dead flag.
00248F  3               evdie:
00248F  3  20 B5 45     	jsr evnt16 			; death subroutine.
002492  3  A5 rr        	lda numlif			; number of lives.
002494  3  F0 03        	beq :+
002496  3  4C D3 23     	jmp rstrt 			; restart game.
002499  3               :
002499  3               evfail:
002499  3  20 E7 45     	jsr evnt17 			; failure event.
00249C  3  60           	rts			; restart game
00249D  3               
00249D  3               ;----------------------------------------------------------
00249D  3               ; Tidy things up
00249D  3               ;----------------------------------------------------------
00249D  3               
00249D  3               ;.repeat 291
00249D  3               ;  .byte 0
00249D  3               ;.endrep
00249D  3               
00249D  3               tidyup:
00249D  3  A0 00        	ldy #0				; digits to check.
00249F  3               tidyu2:
00249F  3  B9 32 27     	lda score,y 			; get score digit.
0024A2  3  CD 38 27     	cmp hiscor 			; are we larger than high score digit?
0024A5  3  90 07        	bcc tidyu0			; high score is bigger.
0024A7  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0024A9  3  C8           	iny				; next digit of high score.
0024AA  3  C0 06        	cpy #6
0024AC  3  D0 F1        	bne tidyu2			; repeat for all digits
0024AE  3               tidyu0:
0024AE  3  A9 32        	lda #<score			; return pointing to score.
0024B0  3  85 62        	sta z80_c
0024B2  3  A9 27        	lda #>score
0024B4  3  85 63        	sta z80_b
0024B6  3  60           	rts
0024B7  3               tidyu1:
0024B7  3  A0 05        	ldy #5
0024B9  3               tidyu3:
0024B9  3  B9 32 27     	lda score,y			; score.
0024BC  3  99 38 27     	sta hiscor,y			; high score.
0024BF  3  88           	dey
0024C0  3  10 F7        	bpl tidyu3 			; copy score to high score.
0024C2  3               evnewh:
0024C2  3  20 4B 46     	jsr evnt19			; new high score event.
0024C5  3  4C AE 24     	jmp tidyu0			; tidy up.
0024C8  3               
0024C8  3               ;--------------------------------------------------
0024C8  3               ; Restart event.
0024C8  3               ;--------------------------------------------------
0024C8  3               
0024C8  3               rsevt:
0024C8  3  A9 BA        	lda #<ssprit 			; default to spare element in table.
0024CA  3  85 68        	sta z80_x
0024CC  3  A9 37        	lda #>ssprit
0024CE  3  85 69        	sta z80_i
0024D0  3               evrs:
0024D0  3  4C B3 45     	jmp evnt14	 		; call restart event.
0024D3  3               
0024D3  3               ;------------------------------------------------------------------
0024D3  3               ; Copy number passed in a to string position bc, right-justified.
0024D3  3               ;
0024D3  3               ; Input:
0024D3  3               ;  A  = number
0024D3  3               ;  BC = string address
0024D3  3               ;
0024D3  3               ; Output:
0024D3  3               ;  BC = string with number
0024D3  3               ;-----------------------------------------------------------------
0024D3  3               
0024D3  3               num2ch:
0024D3  3  85 65        	sta z80_d		; Save number
0024D5  3               
0024D5  3  A9 00        	lda #0
0024D7  3  85 rr        	sta flag
0024D9  3               numdg3:
0024D9  3  A2 64        	ldx #100		; hundreds column.
0024DB  3  86 64        	stx z80_e
0024DD  3  20 ED 24     	jsr numdg		; show digit.
0024E0  3               numdg2:
0024E0  3  A2 0A        	ldx #10			; tens column.
0024E2  3  86 64        	stx z80_e
0024E4  3  20 ED 24     	jsr numdg		; show digit.
0024E7  3               
0024E7  3  E6 rr        	inc flag
0024E9  3  A2 01        	ldx #1			; units column.
0024EB  3  86 64        	stx z80_e
0024ED  3               numdg:
0024ED  3  A9 30        	lda #48			; clear digit.
0024EF  3  85 61        	sta z80_a
0024F1  3               numdg1:
0024F1  3  A5 65        	lda z80_d
0024F3  3  C5 64        	cmp z80_e
0024F5  3  90 0E        	bcc numdg0		; nothing to show.
0024F7  3  38           	sec
0024F8  3  A5 65        	lda z80_d
0024FA  3  E5 64        	sbc z80_e		; subtract from column.
0024FC  3  85 65        	sta z80_d
0024FE  3  E6 61        	inc z80_a		; increment digit.
002500  3  E6 rr        	inc flag
002502  3  4C F1 24     	jmp numdg1		; repeat until column is zero.
002505  3               numdg0:
002505  3  A0 00        	ldy #0
002507  3  A5 61        	lda z80_a
002509  3  91 62        	sta (z80_bc),y		; write digit to buffer.
00250B  3  A5 rr        	lda flag
00250D  3  F0 06        	beq :+
00250F  3  E6 62        	inc z80_c		; next buffer position.
002511  3  D0 02        	bne :+
002513  3  E6 63        	inc z80_b
002515  3               :
002515  3  60           	rts
002516  3               num2dd:
002516  3  85 65        	sta z80_d		; Save number
002518  3               
002518  3  A9 01        	lda #1
00251A  3  85 rr        	sta flag
00251C  3               
00251C  3  4C E0 24     	jmp numdg2
00251F  3               num2td:
00251F  3  85 65        	sta z80_d		; Save number
002521  3               
002521  3  A9 01        	lda #1
002523  3  85 rr        	sta flag
002525  3  4C D9 24     	jmp numdg3
002528  3               
002528  3               ;flag:	.byte 0
002528  3               
002528  3               ;---------------------------------------------------------
002528  3               ; Reset score to "000000"
002528  3               ;---------------------------------------------------------
002528  3               
002528  3               inisc:
002528  3  A9 30        	lda #'0'
00252A  3  A2 05        	ldx #5			; digits to initialise.
00252C  3               inisc0:
00252C  3  9D 32 27     	sta score,x 		; write zero digit.
00252F  3  CA           	dex			; next column.
002530  3  10 FA        	bpl inisc0		; repeat for all digits.
002532  3               
002532  3  60           	rts
002533  3               
002533  3               ;-----------------------------------------------------
002533  3               ; Multiply h by d and return in hl.
002533  3               ;
002533  3               ; Input:
002533  3               ;  H = first number
002533  3               ;  D = second number
002533  3               ;
002533  3               ; Output:
002533  3               ;  HL = result H x D
002533  3               ;-----------------------------------------------------
002533  3               
002533  3               imul:
002533  3  A5 65        	lda z80_d		; HL = H * D
002535  3  85 64        	sta z80_e
002537  3  A5 67        	lda z80_h
002539  3  85 62        	sta z80_c		; make c first multiplier.
00253B  3               imul0:
00253B  3  A9 00        	lda #0			; zeroise total.
00253D  3  85 66        	sta z80_l
00253F  3  85 67        	sta z80_h
002541  3               
002541  3  A5 67        	lda z80_h
002543  3  85 65        	sta z80_d		; zeroise high byte.
002545  3               
002545  3  A9 08        	lda #8			; repeat 8 times.
002547  3  85 63        	sta z80_b
002549  3               imul1:
002549  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
00254B  3  90 0E        	bcc imul2		; wasn't set.
00254D  3  18           	clc			; bit was set, so add de.
00254E  3  A5 66        	lda z80_l
002550  3  65 64        	adc z80_e
002552  3  85 66        	sta z80_l
002554  3  A5 67        	lda z80_h
002556  3  65 65        	adc z80_d
002558  3  85 67        	sta z80_h
00255A  3  18           	clc 			; reset carry.
00255B  3               imul2:
00255B  3  06 64        	asl z80_e 		; shift de 1 bit left.
00255D  3  26 65        	rol z80_d
00255F  3  C6 63        	dec z80_b
002561  3  D0 E6        	bne imul1		; repeat 8 times.
002563  3               
002563  3  60           	rts
002564  3               
002564  3               ;-----------------------------------------------
002564  3               ; Divide d by e and return in d, remainder in a.
002564  3               ;
002564  3               ; Input:
002564  3               ;  D = first number
002564  3               ;  E = second number
002564  3               ;
002564  3               ; Output:
002564  3               ;  D = result D/E
002564  3               ;  A = remainder
002564  3               ;-----------------------------------------------
002564  3               
002564  3               idiv:
002564  3  A9 00        	lda #0
002566  3  A0 08        	ldy #8		 	; bits to shift.
002568  3  06 65        	asl z80_d
00256A  3               idiv0:
00256A  3  2A           	rol a 			; multiply d by 2.
00256B  3  C5 64        	cmp z80_e 		; test if e is smaller.
00256D  3  90 02        	bcc idiv1		; e is greater, no division this time.
00256F  3  E5 64        	sbc z80_e		; subtract it.
002571  3               idiv1:
002571  3  26 65        	rol z80_d		; rotate into d.
002573  3  88           	dey
002574  3  D0 F4        	bne idiv0		; repeat
002576  3  60           	rts
002577  3               
002577  3               ;---------------------------------------------------
002577  3               ; Play AY sound effect
002577  3               ;---------------------------------------------------
002577  3               
002577  3               plsnd:
002577  3  60           	rts
002578  3               
002578  3               ;---------------------------------------------------
002578  3               ; Objects handling.
002578  3               ; 32 bytes for image
002578  3               ; 3 for room, y and x
002578  3               ; 3 for starting room, y and x.
002578  3               ; 254 = disabled.
002578  3               ; 255 = object in player"s pockets.
002578  3               ;---------------------------------------------------
002578  3               
002578  3               ;---------------------------------------------------
002578  3               ; Show items present.
002578  3               ;---------------------------------------------------
002578  3               
002578  3               .if oflag
002578  3               shwob:
002578  3  A9 75        	lda #<objdta 			; objects table.
00257A  3  85 66        	sta z80_l
00257C  3  A9 85        	lda #>objdta
00257E  3  85 67        	sta z80_h
002580  3               
002580  3  AD 2A 20     	lda numob 			; number of objects in the game.
002583  3  85 rr        	sta sprcnt
002585  3               shwob0:
002585  3  A0 20        	ldy #32 			; distance to room number.
002587  3  B1 66        	lda (z80_hl),y 			; same as an item?
002589  3  C5 rr        	cmp scno 			; current location.
00258B  3  D0 03        	bne :+
00258D  3  20 A2 25     	jsr dobj 			; yes, display object.
002590  3               :
002590  3  18           	clc
002591  3  A5 66        	lda z80_l
002593  3  69 26        	adc #38 			; distance to next item.
002595  3  85 66        	sta z80_l
002597  3  A5 67        	lda z80_h
002599  3  69 00        	adc #0
00259B  3  85 67        	sta z80_h	 		; point to it.
00259D  3  C6 rr        	dec sprcnt
00259F  3  D0 E4        	bne shwob0 			; repeat for others.
0025A1  3  60           	rts
0025A2  3               
0025A2  3               ;---------------------------------------------------
0025A2  3               ; Display object.
0025A2  3               ; hl must point to object's start address.
0025A2  3               ;
0025A2  3               ; Input:
0025A2  3               ;  HL = object address
0025A2  3               ;---------------------------------------------------
0025A2  3               
0025A2  3               dobj:
0025A2  3  A0 21        	ldy #33
0025A4  3  B1 66        	lda (z80_hl),y 			; point to y.
0025A6  3  85 rr        	sta dispy
0025A8  3  C8           	iny
0025A9  3  B1 66        	lda (z80_hl),y 			; point to x.
0025AB  3  85 rr        	sta dispx
0025AD  3               dobj1:
0025AD  3  4C 96 29     	jmp sprite 			; draw this sprite.
0025B0  3               
0025B0  3               ;--------------------------------------
0025B0  3               ; Remove an object.
0025B0  3               ;
0025B0  3               ; Input:
0025B0  3               ;  A = object number
0025B0  3               ;--------------------------------------
0025B0  3               
0025B0  3               remob:
0025B0  3  CD 2A 20     	cmp numob			; number of objects in game.
0025B3  3  90 01        	bcc :+				; are we checking past the end?
0025B5  3  60           	rts				; yes, can't get non-existent item.
0025B6  3               :
0025B6  3  48           	pha				; remember object.
0025B7  3  20 C5 25     	jsr getob			; pick it up if we haven't already got it.
0025BA  3  68           	pla				; retrieve object number.
0025BB  3  20 F4 25     	jsr gotob			; get its address.
0025BE  3  A9 FE        	lda #254
0025C0  3  A0 20        	ldy #32
0025C2  3  91 66        	sta (z80_hl),y			; remove it.
0025C4  3  60           	rts
0025C5  3               
0025C5  3               ;---------------------------------------------------
0025C5  3               ; Pick up object number held in the accumulator.
0025C5  3               ;
0025C5  3               ; Input:
0025C5  3               ;  A = object number
0025C5  3               ;---------------------------------------------------
0025C5  3               
0025C5  3               getob:
0025C5  3  CD 2A 20     	cmp numob 		; number of objects in game.
0025C8  3  90 01        	bcc :+			; are we checking past the end?
0025CA  3  60           	rts			; yes, can't get non-existent item.
0025CB  3               :
0025CB  3  20 F4 25     	jsr gotob 		; check if we already have it.
0025CE  3  C9 FF        	cmp #255
0025D0  3  D0 01        	bne :+
0025D2  3  60           	rts			; we already do.
0025D3  3               :
0025D3  3  A0 20        	ldy #32
0025D5  3  B1 66        	lda (z80_hl),y		; is it on this screen?
0025D7  3  C5 rr        	cmp scno 		; current screen.
0025D9  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
0025DB  3               
0025DB  3  A9 FF        	lda #255
0025DD  3  91 66        	sta (z80_hl),y		; pick it up.
0025DF  3  C8           	iny 			; point to y coord.
0025E0  3               getob1:
0025E0  3  A0 21        	ldy #33
0025E2  3  B1 66        	lda (z80_hl),y		; y coord.
0025E4  3  85 rr        	sta dispy
0025E6  3  A0 22        	ldy #34
0025E8  3  B1 66        	lda (z80_hl),y 		; x coord.
0025EA  3  85 rr        	sta dispx
0025EC  3  4C AD 25     	jmp dobj1 		; delete object sprite.
0025EF  3               getob0:
0025EF  3  A9 FF        	lda #255
0025F1  3  91 66        	sta (z80_hl),y 		; pick it up.
0025F3  3  60           	rts
0025F4  3               .endif
0025F4  3               
0025F4  3               ;-----------------------------------------------------------------
0025F4  3               ; Got object check.
0025F4  3               ; Call with object in accumulator, returns zero set if in pockets.
0025F4  3               ;
0025F4  3               ; Input:
0025F4  3               ;  A = object number
0025F4  3               ;-----------------------------------------------------------------
0025F4  3               .if oflag .or mflag
0025F4  3               gotob:
0025F4  3  CD 2A 20     	cmp numob 		; number of objects in game.
0025F7  3  90 03        	bcc :+ 			; are we checking past the end?
0025F9  3  4C 00 26     	jmp gotob0 		; yes, we can't have a non-existent object.
0025FC  3               :
0025FC  3  20 05 26     	jsr findob		; find the object.
0025FF  3               gotob1:
0025FF  3  60           	rts
002600  3               
002600  3               gotob0:
002600  3  A9 FE        	lda #254 		; missing.
002602  3  4C FF 25     	jmp gotob1
002605  3               
002605  3               findob:
002605  3  48           	pha			; save object number
002606  3  A9 75        	lda #<objdta 		; objects.
002608  3  85 66        	sta z80_l
00260A  3  A9 85        	lda #>objdta
00260C  3  85 67        	sta z80_h
00260E  3  68           	pla			; retreive object number
00260F  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
002611  3  AA           	tax 			; loop counter
002612  3               fndob2:
002612  3  18           	clc
002613  3  A5 66        	lda z80_l
002615  3  69 26        	adc #38 		; size of each object.
002617  3  85 66        	sta z80_l
002619  3  90 02        	bcc :+
00261B  3  E6 67        	inc z80_h
00261D  3               :
00261D  3  CA           	dex 			; repeat until we find address.
00261E  3  D0 F2        	bne fndob2
002620  3               fndob1:
002620  3  A0 20        	ldy #32			; distance to room it's in.
002622  3  B1 66        	lda (z80_hl),y		; fetch status.
002624  3  60           	rts
002625  3               .endif
002625  3               
002625  3               ;---------------------------------------------
002625  3               ; Drop object number at (dispx, dispy).
002625  3               ;
002625  3               ; Input:
002625  3               ;  A = object number
002625  3               ;---------------------------------------------
002625  3               
002625  3               .if oflag
002625  3               drpob:
002625  3  CD 2A 20     	cmp numob 		; are we checking past the end?
002628  3  90 01        	bcc :+
00262A  3  60           	rts			; yes, can't drop non-existent item.
00262B  3               :
00262B  3  20 F4 25     	jsr gotob		; make sure object is in inventory.
00262E  3  C5 rr        	cmp scno		; already on this screen?
002630  3  D0 01        	bne :+
002632  3  60           	rts			; yes, nothing to do.
002633  3               :
002633  3  A0 20        	ldy #32
002635  3  A5 rr        	lda scno
002637  3  91 66        	sta (z80_hl),y		; bring onto screen.
002639  3  A5 rr        	lda dispy		; sprite y coordinate.
00263B  3  C8           	iny
00263C  3  91 66        	sta (z80_hl),y		; point to object y.
00263E  3  A5 rr        	lda dispx 		; sprite x coordinate.
002640  3  C8           	iny
002641  3  91 66        	sta (z80_hl),y 		; point to object x
002643  3  4C A2 25     	jmp dobj		; draw the object sprite.
002646  3               
002646  3               ;-----------------------------------------------
002646  3               ; Seek objects at sprite position.
002646  3               ;
002646  3               ; Output:
002646  3               ;  A = object number, if not found A=255
002646  3               ;-----------------------------------------------
002646  3               
002646  3               skobj:
002646  3  A9 75        	lda #<objdta 		; pointer to objects.
002648  3  85 66        	sta z80_l
00264A  3  A9 85        	lda #>objdta
00264C  3  85 67        	sta z80_h
00264E  3               
00264E  3  AD 2A 20     	lda numob 		; number of objects in game.
002651  3  85 63        	sta z80_b 		; set up the loop counter.
002653  3               skobj0:
002653  3  A5 rr        	lda scno		; current room number.
002655  3  A0 20        	ldy #32
002657  3  D1 66        	cmp (z80_hl),y		; is object in here?
002659  3  D0 03        	bne :+
00265B  3  20 70 26     	jsr skobj1		; yes, check coordinates.
00265E  3               :
00265E  3  18           	clc			; point to next object in table.
00265F  3  A5 66        	lda z80_l
002661  3  69 26        	adc #38			; size of each object.
002663  3  85 66        	sta z80_l
002665  3  90 02        	bcc :+
002667  3  E6 67        	inc z80_h
002669  3               :
002669  3  C6 63        	dec z80_b
00266B  3  D0 E6        	bne skobj0		; repeat for all objects.
00266D  3               
00266D  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
00266F  3  60           	rts
002670  3               
002670  3               skobj1:
002670  3  A0 21        	ldy #33			; point to y coordinate.
002672  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
002674  3  38           	sec
002675  3  A0 08        	ldy #8
002677  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
002679  3  18           	clc
00267A  3  69 0F        	adc #15			; add sprite height minus one.
00267C  3  C9 1F        	cmp #31			; within range?
00267E  3  B0 18        	bcs skobj2		; no, ignore object.
002680  3               
002680  3  A0 22        	ldy #34			; point to x coordinate now.
002682  3  B1 66        	lda (z80_hl),y 		; get coordinate.
002684  3  38           	sec
002685  3  A0 09        	ldy #9
002687  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
002689  3  18           	clc			; add sprite width minus one.
00268A  3  69 0F        	adc #15
00268C  3  C9 1F        	cmp #31			; within range?
00268E  3  B0 08        	bcs skobj2		; no, ignore object.
002690  3               
002690  3  68           	pla			; remove return address from stack.
002691  3  68           	pla
002692  3               
002692  3  AD 2A 20     	lda numob 		; objects in game.
002695  3  38           	sec
002696  3  E5 63        	sbc z80_b		; subtract loop counter.
002698  3               skobj2:
002698  3  60           	rts			; accumulator now points to object.
002699  3               .endif
002699  3               
002699  3               ;---------------------------------------------------------------------
002699  3               ; Spawn a new sprite.
002699  3               ;---------------------------------------------------------------------
002699  3               
002699  3                 offset = 20
002699  3               
002699  3               ;.repeat 343
002699  3               ;  .byte 0
002699  3               ;.endrep
002699  3               
002699  3               spawn:
002699  3  A9 EE        	lda #<sprtab		; sprite table.
00269B  3  85 66        	sta z80_l
00269D  3  A9 36        	lda #>sprtab
00269F  3  85 67        	sta z80_h
0026A1  3               numsp1:
0026A1  3  A9 0C        	lda #NUMSPR		; number of sprites.
0026A3  3  85 rr        	sta spcnt
0026A5  3               spaw0:
0026A5  3  A0 00        	ldy #0
0026A7  3  B1 66        	lda (z80_hl),y		; get sprite type.
0026A9  3  C9 FF        	cmp #255		; is it an unused slot?
0026AB  3  F0 0F        	beq spaw1 		; yes, we can use this one.
0026AD  3               
0026AD  3  18           	clc 			; point to next sprite in table.
0026AE  3  A5 66        	lda z80_l
0026B0  3  69 11        	adc #TABSIZ		; size of each entry.
0026B2  3  85 66        	sta z80_l
0026B4  3  90 02        	bcc :+
0026B6  3  E6 67        	inc z80_h
0026B8  3               :
0026B8  3  C6 rr        	dec spcnt		; one less iteration.
0026BA  3  D0 E9        	bne spaw0		; keep going until we find a slot.
0026BC  3               
0026BC  3               ; Didn't find one but drop through and set up a dummy sprite instead.
0026BC  3               
0026BC  3               spaw1:
0026BC  3  A5 69        	lda z80_i		; address of original sprite.
0026BE  3  48           	pha
0026BF  3  A5 68        	lda z80_x
0026C1  3  48           	pha
0026C2  3               
0026C2  3  A5 66        	lda z80_l		; store spawned sprite address.
0026C4  3  85 rr        	sta spptr
0026C6  3  A5 67        	lda z80_h
0026C8  3  85 rr        	sta spptr+1
0026CA  3               
0026CA  3  A5 62        	lda z80_c
0026CC  3  A0 00        	ldy #0
0026CE  3  91 66        	sta (z80_hl),y 		; set the type.
0026D0  3  A0 05        	ldy #5
0026D2  3  91 66        	sta (z80_hl),y		; copy
0026D4  3               
0026D4  3  A5 63        	lda z80_b
0026D6  3  A0 01        	ldy #1
0026D8  3  91 66        	sta (z80_hl),y		; set the image.
0026DA  3  A0 06        	ldy #6
0026DC  3  91 66        	sta (z80_hl),y		; copy
0026DE  3               
0026DE  3  A9 00        	lda #0 			; frame zero.
0026E0  3  A0 02        	ldy #2
0026E2  3  91 66        	sta (z80_hl),y		; set frame.
0026E4  3  A0 07        	ldy #7
0026E6  3  91 66        	sta (z80_hl),y		; copy
0026E8  3               
0026E8  3  A0 08        	ldy #8
0026EA  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0026EC  3  A0 03        	ldy #3
0026EE  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
0026F0  3  A0 08        	ldy #8
0026F2  3  91 66        	sta (z80_hl),y		; copy
0026F4  3               
0026F4  3  A0 09        	ldy #9
0026F6  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0026F8  3  A0 04        	ldy #4
0026FA  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
0026FC  3  A0 09        	ldy #9
0026FE  3  91 66        	sta (z80_hl),y		; copy
002700  3               
002700  3  A0 0A        	ldy #10			; direction of original.
002702  3  B1 68        	lda (z80_ix),y
002704  3  91 66        	sta (z80_hl),y		; direction
002706  3               
002706  3  A9 00        	lda #0
002708  3  A0 0B        	ldy #11
00270A  3  91 66        	sta (z80_hl),y		; reset parameter.
00270C  3  C8           	iny
00270D  3  91 66        	sta (z80_hl),y		; reset parameter.
00270F  3  C8           	iny
002710  3  91 66        	sta (z80_hl),y		; reset parameter.
002712  3  C8           	iny
002713  3  91 66        	sta (z80_hl),y		; reset parameter.
002715  3               rtssp:
002715  3  A5 rr        	lda spptr		; address of new sprite.
002717  3  85 68        	sta z80_x
002719  3  A5 rr        	lda spptr+1
00271B  3  85 69        	sta z80_i
00271D  3               evis1:
00271D  3  20 CC 42     	jsr evnt09 		; call sprite initialisation event.
002720  3               
002720  3  A5 rr        	lda spptr 		; address of new sprite.
002722  3  85 68        	sta z80_x
002724  3  A5 rr        	lda spptr+1
002726  3  85 69        	sta z80_i
002728  3  20 B7 31     	jsr sspria 		; display the new sprite.
00272B  3               
00272B  3  68           	pla			; address of original sprite.
00272C  3  85 68        	sta z80_x
00272E  3  68           	pla
00272F  3  85 69        	sta z80_i
002731  3               
002731  3  60           	rts
002732  3               
002732  3               ;spcnt:	.byte 0
002732  3               ;spptr:	.word 0			; spawned sprite pointer.
002732  3               ;seed:	.byte 0			; seed for random numbers.
002732  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002736  3  30 30        
002738  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
00273C  3  30 30        
00273E  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002742  3  30 30        
002744  3  00 E4        grbase:	.word ScreenAddr	; graphics base address.
002746  3               
002746  3               ;----------------------------------------------------
002746  3               ; Check y-pos
002746  3               ;----------------------------------------------------
002746  3               
002746  3               checkx:
002746  3  A5 rr        	lda dispy		; y position.
002748  3  C9 18        	cmp #24			; off screen?
00274A  3  B0 01        	bcs :+
00274C  3  60           	rts			; no, it's okay.
00274D  3               :
00274D  3  68           	pla			; remove return address from stack.
00274E  3  85 66        	sta z80_l
002750  3  68           	pla
002751  3  85 67        	sta z80_h
002753  3  60           	rts
002754  3               
002754  3               ;-----------------------------------------------
002754  3               ; Displays the current high score.
002754  3               ;-----------------------------------------------
002754  3               
002754  3               dhisc:
002754  3  A9 38        	lda #<hiscor 		; high score text.
002756  3  8D 8B 27     	sta dscor3+1
002759  3  8D A6 27     	sta bscor3+1
00275C  3  A9 27        	lda #>hiscor
00275E  3  8D 8C 27     	sta dscor3+2
002761  3  8D A7 27     	sta bscor3+2
002764  3  4C 77 27     	jmp dscor1		; check in printable range then show 6 digits.
002767  3               
002767  3               ;------------------------------------------------------
002767  3               ; Displays the current score.
002767  3               ;------------------------------------------------------
002767  3               
002767  3               ;.repeat 322
002767  3               ;  .byte 0
002767  3               ;.endrep
002767  3               
002767  3               dscor:
002767  3  A9 32        	lda #<score		; score text.
002769  3  8D 8B 27     	sta dscor3+1
00276C  3  8D A6 27     	sta bscor3+1
00276F  3  A9 27        	lda #>score
002771  3  8D 8C 27     	sta dscor3+2
002774  3  8D A7 27     	sta bscor3+2
002777  3               dscor1:
002777  3  8C A2 27     	sty tmpscr
00277A  3  20 59 2F     	jsr preprt		; set up font and print position.
00277D  3  20 46 27     	jsr checkx		; make sure we're in a printable range.
002780  3               
002780  3               ;	lda #6			; digits to display.
002780  3               ;	sta z80_b
002780  3  A5 rr        	lda prtmod		; get print mode.
002782  3  F0 03        	beq :+			; standard size text?
002784  3  4C A3 27     	jmp bscor0		; no, show double-height.
002787  3               :
002787  3               dscor0:
002787  3               ;	ldy #0
002787  3               ;	lda (z80_hl),y 		; fetch character.
002787  3  AC A2 27     	ldy tmpscr
00278A  3               dscor3:
00278A  3  B9 32 27     	lda score,y
00278D  3  20 DA 28     	jsr pchar 		; display character.
002790  3  E6 rr        	inc dispx		; move along x coordinate
002792  3               
002792  3               ;	inc z80_l		; next score column.
002792  3               ;	bne :+
002792  3               ;	inc z80_h
002792  3               ;:
002792  3  EE A2 27     	inc tmpscr
002795  3  C6 63        	dec z80_b
002797  3  D0 EE        	bne dscor0 		; repeat for all digits.
002799  3               dscor2:
002799  3  A5 rr        	lda dispx 		; set up display coordinates.
00279B  3  85 rr        	sta charx
00279D  3  A5 rr        	lda dispy
00279F  3  85 rr        	sta chary
0027A1  3  60           	rts
0027A2  3               
0027A2  3  00           tmpscr:	.byte 0
0027A3  3               ;------------------------------------------------------
0027A3  3               ; Displays the current score in double-height characters.
0027A3  3               ;
0027A3  3               ; Input:
0027A3  3               ;  B  = digit number
0027A3  3               ;  HL = score string
0027A3  3               ;------------------------------------------------------
0027A3  3               
0027A3  3               bscor0:
0027A3  3               ;	ldy #0
0027A3  3               
0027A3  3               ;	lda (z80_hl),y 		; fetch character.
0027A3  3  A4 rr        	ldy tmp
0027A5  3               bscor3:
0027A5  3  B9 32 27     	lda score,y
0027A8  3  20 E0 2E     	jsr bchar 		; display big char.
0027AB  3               
0027AB  3               ;	inc z80_l 		; next score column.
0027AB  3               ;	bne :+
0027AB  3               ;	inc z80_h
0027AB  3               ;:
0027AB  3  E6 rr        	inc tmp
0027AD  3  C6 63        	dec z80_b
0027AF  3  F0 03        	beq :+
0027B1  3  4C A3 27     	jmp bscor0 		; repeat for all digits.
0027B4  3               :
0027B4  3  4C 99 27     	jmp dscor2 		; tidy up line and column variables.
0027B7  3               
0027B7  3               ;-----------------------------------------------------
0027B7  3               ; Adds number in the hl pair to the score.
0027B7  3               ;-----------------------------------------------------
0027B7  3               
0027B7  3               addsc:
0027B7  3  A9 33        	lda #<(score+1) 	; ten thousands column.
0027B9  3  85 64        	sta z80_e
0027BB  3  A9 27        	lda #>(score+1)
0027BD  3  85 65        	sta z80_d
0027BF  3  A9 10        	lda #<10000		; amount to add each time.
0027C1  3  85 62        	sta z80_c
0027C3  3  A9 27        	lda #>10000
0027C5  3  85 63        	sta z80_b
0027C7  3  20 0B 28     	jsr incsc		; add to score.
0027CA  3               
0027CA  3  E6 64        	inc z80_e		; thousands column.
0027CC  3  D0 02        	bne :+
0027CE  3  E6 65        	inc z80_d
0027D0  3               :
0027D0  3  A9 E8        	lda #<1000		; amount to add each time.
0027D2  3  85 62        	sta z80_c
0027D4  3  A9 03        	lda #>1000
0027D6  3  85 63        	sta z80_b
0027D8  3  20 0B 28     	jsr incsc 		; add to score.
0027DB  3               
0027DB  3  E6 64        	inc z80_e		; hundreds column.
0027DD  3  D0 02        	bne :+
0027DF  3  E6 65        	inc z80_d
0027E1  3               :
0027E1  3  A9 64        	lda #<100		; amount to add each time.
0027E3  3  85 62        	sta z80_c
0027E5  3  A9 00        	lda #>100
0027E7  3  85 63        	sta z80_b
0027E9  3  20 0B 28     	jsr incsc		; add to score.
0027EC  3               
0027EC  3  E6 64        	inc z80_e 		; tens column.
0027EE  3  D0 02        	bne :+
0027F0  3  E6 65        	inc z80_d
0027F2  3               :
0027F2  3  A9 0A        	lda #<10		; amount to add each time.
0027F4  3  85 62        	sta z80_c
0027F6  3  A9 00        	lda #>10
0027F8  3  85 63        	sta z80_b
0027FA  3  20 0B 28     	jsr incsc 		; add to score.
0027FD  3               
0027FD  3  E6 64        	inc z80_e		; units column.
0027FF  3  D0 02        	bne :+
002801  3  E6 65        	inc z80_d
002803  3               :
002803  3  A9 01        	lda #<1			; units.
002805  3  85 62        	sta z80_c
002807  3  A9 00        	lda #>1
002809  3  85 63        	sta z80_b
00280B  3               incsc:
00280B  3  A5 67        	lda z80_h		; store amount to add.
00280D  3  48           	pha
00280E  3  A5 66        	lda z80_l
002810  3  48           	pha
002811  3               
002811  3  38           	sec			; subtract from amount to add.
002812  3  A5 66        	lda z80_l
002814  3  E5 62        	sbc z80_c
002816  3  85 66        	sta z80_l
002818  3  A5 67        	lda z80_h
00281A  3  E5 63        	sbc z80_b
00281C  3  85 67        	sta z80_h
00281E  3  90 14        	bcc incsc0		; too much, restore value.
002820  3               
002820  3  68           	pla			; delete the previous amount from the stack.
002821  3  68           	pla
002822  3               
002822  3  A5 65        	lda z80_d 		; store column position.
002824  3  48           	pha
002825  3  A5 64        	lda z80_e
002827  3  48           	pha
002828  3  20 3B 28     	jsr incsc2		; do the increment.
00282B  3               
00282B  3  68           	pla			; restore column.
00282C  3  85 64        	sta z80_e
00282E  3  68           	pla
00282F  3  85 65        	sta z80_d
002831  3  4C 0B 28     	jmp incsc		; repeat until all added.
002834  3               
002834  3               incsc0:
002834  3  68           	pla			; restore previous value.
002835  3  85 66        	sta z80_l
002837  3  68           	pla
002838  3  85 67        	sta z80_h
00283A  3  60           	rts
00283B  3               incsc2:
00283B  3  A0 00        	ldy #0
00283D  3  B1 64        	lda (z80_de),y 		; get amount.
00283F  3  18           	clc
002840  3  69 01        	adc #1			; add one to column.
002842  3  91 64        	sta (z80_de),y		; write new column total.
002844  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002846  3  B0 01        	bcs :+
002848  3  60           	rts			; no, carry on.
002849  3               :
002849  3  A9 30        	lda #'0'		; make it zero.
00284B  3  91 64        	sta (z80_de),y		; write new column total.
00284D  3  C6 64        	dec z80_e		; back one column.
00284F  3  D0 02        	bne :+
002851  3  C6 65        	dec z80_d
002853  3               :
002853  3  4C 3B 28     	jmp incsc2
002856  3               
002856  3               ;------------------------------------
002856  3               ; Add bonus to score and reset bonus
002856  3               ;------------------------------------
002856  3               
002856  3               addbo:
002856  3  A2 05        	ldx #5			; last digit.
002858  3  18           	clc
002859  3               addbo0:
002859  3  BD 32 27     	lda score,x		; get score.
00285C  3  7D 3E 27     	adc bonus,x		; add bonus.
00285F  3  38           	sec			; 0 to 18.
002860  3  E9 30        	sbc #48
002862  3  48           	pha
002863  3  A9 30        	lda #'0'
002865  3  9D 3E 27     	sta bonus,x
002868  3  68           	pla
002869  3  C9 3A        	cmp #58
00286B  3  90 03        	bcc addbo1
00286D  3  38           	sec
00286E  3  E9 0A        	sbc #10
002870  3               addbo1:
002870  3  9D 32 27     	sta score,x		; zeroise bonus.
002873  3  CA           	dex			; next digit.
002874  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002876  3  60           	rts
002877  3               
002877  3               ;------------------------------------
002877  3               ; Swap score and bonus.
002877  3               ;------------------------------------
002877  3               
002877  3               swpsb:
002877  3  A2 05        	ldx #5			; digits to add.
002879  3               swpsb0:
002879  3  BD 32 27     	lda score,x 		; get score digits.
00287C  3  48           	pha			; save digit
00287D  3  BD 3E 27     	lda bonus,x 		; get bonus digits.
002880  3  9D 32 27     	sta score,x		; switch score-bonus
002883  3  68           	pla
002884  3  9D 3E 27     	sta bonus,x
002887  3  CA           	dex 			; repeat for all 6 digits.
002888  3  10 EF        	bpl swpsb0
00288A  3  60           	rts
00288B  3               
00288B  3               ;----------------------------------------------------
00288B  3               ; Get print address.
00288B  3               ;----------------------------------------------------
00288B  3               
00288B  3               gprad:
00288B  3  A5 rr        	lda dispx		; get x
00288D  3  85 rr        	sta scraddr		; store lb address
00288F  3               
00288F  3  2A           	rol a
002890  3  26 rr        	rol tmp
002892  3  2A           	rol a
002893  3  26 rr        	rol tmp
002895  3  2A           	rol a
002896  3  26 rr        	rol tmp
002898  3  A5 rr        	lda tmp
00289A  3  29 07        	and #7
00289C  3  85 rr        	sta tmp
00289E  3  A5 rr        	lda prtmod
0028A0  3  F0 02        	beq :+
0028A2  3  06 rr        	asl tmp
0028A4  3               :
0028A4  3  A5 rr        	lda tmp
0028A6  3  18           	clc
0028A7  3  65 rr        	adc dispy		; get y
0028A9  3  69 E4        	adc #>ScreenAddr		; add $80
0028AB  3  85 rr        	sta scraddr+1		; store hb address
0028AD  3  60           	rts
0028AE  3               
0028AE  3               ;--------------------------------------------------------------
0028AE  3               ; Get property buffer address of char at (dispx, dispy) in hl.
0028AE  3               ;
0028AE  3               ; Output:
0028AE  3               ;  bufaddr = MAP + dispy*32 + dispx
0028AE  3               ;--------------------------------------------------------------
0028AE  3               
0028AE  3               pradd:
0028AE  3  A5 rr        	lda dispy 		; y coordinate.
0028B0  3  85 rr        	sta bufaddr
0028B2  3  A9 00        	lda #0
0028B4  3  85 rr        	sta bufaddr+1
0028B6  3  06 rr        	asl bufaddr  		; multiply char by 32
0028B8  3  26 rr        	rol bufaddr+1
0028BA  3  06 rr        	asl bufaddr
0028BC  3  26 rr        	rol bufaddr+1
0028BE  3  06 rr        	asl bufaddr
0028C0  3  26 rr        	rol bufaddr+1
0028C2  3  06 rr        	asl bufaddr
0028C4  3  26 rr        	rol bufaddr+1
0028C6  3  06 rr        	asl bufaddr
0028C8  3  26 rr        	rol bufaddr+1
0028CA  3  18           	clc			; add address of MAP graphics.
0028CB  3  A5 rr        	lda bufaddr
0028CD  3  65 rr        	adc dispx
0028CF  3  69 00        	adc #<MAP
0028D1  3  85 rr        	sta bufaddr
0028D3  3  A5 rr        	lda bufaddr+1
0028D5  3  69 DD        	adc #>MAP
0028D7  3  85 rr        	sta bufaddr+1
0028D9  3  60           	rts
0028DA  3               
0028DA  3               ;----------------------------------------------------
0028DA  3               ; Display character in A at dispx,dispy.
0028DA  3               ;
0028DA  3               ; Input:
0028DA  3               ;  A 	   = character to print
0028DA  3               ;----------------------------------------------------
0028DA  3               
0028DA  3               pchar:
0028DA  3  85 rr        	sta fntaddr
0028DC  3  A9 00        	lda #0
0028DE  3  85 rr        	sta fntaddr+1
0028E0  3  06 rr        	asl fntaddr  		; multiply char by 8.
0028E2  3  26 rr        	rol fntaddr+1
0028E4  3  06 rr        	asl fntaddr
0028E6  3  26 rr        	rol fntaddr+1
0028E8  3  06 rr        	asl fntaddr
0028EA  3  26 rr        	rol fntaddr+1
0028EC  3               
0028EC  3  A5 rr        	lda fntaddr
0028EE  3  18           	clc
0028EF  3  69 6D        	adc #<(FONT-256)
0028F1  3  85 rr        	sta fntaddr		; that's the low byte.
0028F3  3  A5 rr        	lda fntaddr+1
0028F5  3  69 87        	adc #>(FONT-256)
0028F7  3  85 rr        	sta fntaddr+1		; add displacement.
0028F9  3               pchark:
0028F9  3  20 8B 28     	jsr gprad		; get screen address.
0028FC  3  A2 07        	ldx #7			; lines to write.
0028FE  3               pchar0:
0028FE  3  A0 00        	ldy #0
002900  3  B1 rr        	lda (fntaddr),y 	; get image byte.
002902  3  BC 11 29     	ldy scrtab,x		; Get rowoffset
002905  3               .if iflag
002905  3               	eor #$ff
002905  3               .endif
002905  3  91 rr        	sta (scraddr),y 	; copy to screen.
002907  3  E6 rr        	inc fntaddr		; next image byte.
002909  3  D0 02        	bne :+
00290B  3  E6 rr        	inc fntaddr+1
00290D  3               :
00290D  3  CA           	dex			; next screen row down.
00290E  3  10 EE        	bpl pchar0		; repeat.
002910  3  60           	rts
002911  3               
002911  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002915  3  60 40 20 00  
002919  3               
002919  3               ;----------------------------------------------
002919  3               
002919  3               ; Print attributes, properties and pixels.
002919  3               ;
002919  3               ; Input:
002919  3               ;  A	= tile number
002919  3               ;----------------------------------------------
002919  3               
002919  3               ;.repeat 294
002919  3               ;  .byte 0
002919  3               ;.endrep
002919  3               
002919  3               pbpattr:			; entry PUTBLOCK command
002919  3  A4 rr        	ldy charx
00291B  3  84 rr        	sty dispx
00291D  3  A4 rr        	ldy chary
00291F  3  84 rr        	sty dispy
002921  3               pattr:
002921  3               .if aflag
002921  3               	pha
002921  3               	jsr wbloc		; save blockinfo
002921  3               	pla
002921  3               .endif
002921  3               
002921  3               pattr2:
002921  3  85 63        	sta z80_b		; store cell in b register for now.
002923  3  AA           	tax
002924  3  BD 1D 4D     	lda bprop,x 		; block properties.
002927  3  85 62        	sta z80_c
002929  3  C9 08        	cmp #COLECT
00292B  3  D0 05        	bne :+
00292D  3  A5 63        	lda z80_b
00292F  3  8D 40 29     	sta colpatt
002932  3               :
002932  3  20 AE 28     	jsr pradd 		; get property buffer address.
002935  3  A5 62        	lda z80_c
002937  3  A0 00        	ldy #0
002939  3  91 rr        	sta (bufaddr),y 	; write property.
00293B  3  A5 63        	lda z80_b 		; restore cell.
00293D  3  4C 41 29     	jmp panp
002940  3               ; Print attributes, no properties.
002940  3               
002940  3               ;.repeat 263
002940  3               ; .byte 0
002940  3               ;.endrep
002940  3               
002940  3  00           colpatt:	.byte 0
002941  3               
002941  3               panp:
002941  3  85 64        	sta z80_e		; displacement in e.
002943  3  A9 00        	lda #0
002945  3  85 65        	sta z80_d		; no high byte.
002947  3  06 64        	asl z80_e  		; multiply char by 8.
002949  3  26 65        	rol z80_d
00294B  3  06 64        	asl z80_e
00294D  3  26 65        	rol z80_d
00294F  3  06 64        	asl z80_e
002951  3  26 65        	rol z80_d
002953  3  18           	clc
002954  3  A5 64        	lda z80_e
002956  3  69 A5        	adc #<chgfx 		; address of graphics.
002958  3  85 rr        	sta tileaddr
00295A  3  A5 65        	lda z80_d
00295C  3  69 4A        	adc #>chgfx
00295E  3  85 rr        	sta tileaddr+1
002960  3  20 8B 28     	jsr gprad 		; get screen address.
002963  3  A2 07        	ldx #7			; number of pixel rows to write.
002965  3               panp0:
002965  3  A0 00        	ldy #0
002967  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002969  3               .if iflag
002969  3               	eor #$ff		; Invert
002969  3               .endif
002969  3  BC 11 29     	ldy scrtab,x
00296C  3  91 rr        	sta (scraddr),y 	; copy to screen.
00296E  3  E6 rr        	inc tileaddr 		; next image byte.
002970  3  D0 02        	bne :+
002972  3  E6 rr        	inc tileaddr+1
002974  3               :
002974  3  CA           	dex	 		; repeat for 8 pixel rows.
002975  3  10 EE        	bpl panp0
002977  3  E6 rr        	inc dispx 		; move along one.
002979  3  E6 rr        	inc charx
00297B  3  60           	rts
00297C  3               
00297C  3               ;----------------------------------------------
00297C  3               ; Write block
00297C  3               ;----------------------------------------------
00297C  3               
00297C  3               .if aflag
00297C  3               wbloc:
00297C  3               	ldy #3
00297C  3               	sta (pbptr),y		; store block number
00297C  3               	dey
00297C  3               	lda dispx
00297C  3               	sta (pbptr),y		; write x position of block.
00297C  3               	dey
00297C  3               	lda dispy
00297C  3               	sta (pbptr),y		; write y position of block.
00297C  3               	dey
00297C  3               	lda scno
00297C  3               	sta (pbptr),y		; write screen.
00297C  3               	clc			; point to next free location
00297C  3               	lda pbptr
00297C  3               	adc #4
00297C  3               	sta pbptr
00297C  3               	bcc :+
00297C  3               	inc pbptr+1
00297C  3               :
00297C  3               	rts
00297C  3               .endif
00297C  3               
00297C  3               ;----------------------------------------------
00297C  3               ; Print character pixels, no more.
00297C  3               ;
00297C  3               ; Input:
00297C  3               ;  A	= character to print
00297C  3               ;----------------------------------------------
00297C  3               
00297C  3               pchr:
00297C  3  20 DA 28     	jsr pchar 		; show character in accumulator.
00297F  3  E6 rr        	inc dispx		; move along one.
002981  3  60           	rts
002982  3               
002982  3               ;----------------------------------------------------
002982  3               ; Shifter sprite routine for objects.
002982  3               ;----------------------------------------------------
002982  3               
002982  3               .if oflag
002982  3               sprit7:
002982  3  A5 63        	lda z80_b
002984  3  F0 0F        	beq sprit0
002986  3  85 61        	sta z80_a
002988  3               sprit3:
002988  3  4E 16 2A     	lsr spr			; shift into position.
00298B  3  6E 17 2A     	ror spr+1
00298E  3  6E 18 2A     	ror spr+2
002991  3  C6 61        	dec z80_a		; one less iteration.
002993  3  D0 F3        	bne sprit3
002995  3               sprit0:
002995  3  60           	rts 			; now apply to screen.
002996  3               
002996  3               ;----------------------------------------------------
002996  3               ; Draw sprite
002996  3               ;----------------------------------------------------
002996  3               
002996  3               sprite:
002996  3  86 rr        	stx xtmp		; Save X-reg
002998  3  20 94 31     	jsr scadd 		; get screen address in scraddr.
00299B  3               
00299B  3  A5 rr        	lda dispx 		; x position.
00299D  3  29 07        	and #7 			; position straddling cells.
00299F  3  85 63        	sta z80_b		; store in b register.
0029A1  3               
0029A1  3  A5 66        	lda z80_l		; store sprite graphic address.
0029A3  3  8D B6 29     	sta sprit1+1
0029A6  3  8D BD 29     	sta sprit2+1
0029A9  3  A5 67        	lda z80_h
0029AB  3  8D B7 29     	sta sprit1+2
0029AE  3  8D BE 29     	sta sprit2+2
0029B1  3               
0029B1  3  A2 00        	ldx #0			; pixel height.
0029B3  3  A0 00        	ldy #0
0029B5  3               sprit1:
0029B5  3  BD 75 85     	lda objdta,x		; fetch first byte.
0029B8  3  8D 16 2A     	sta spr
0029BB  3  E8           	inx
0029BC  3               sprit2:
0029BC  3  BD 75 85     	lda objdta,x
0029BF  3  8D 17 2A     	sta spr+1
0029C2  3               
0029C2  3  A9 00        	lda #0
0029C4  3  8D 18 2A     	sta spr+2
0029C7  3  20 82 29     	jsr sprit7		; shift sprite
0029CA  3               
0029CA  3  CA           	dex
0029CB  3  AD 16 2A     	lda spr			; fetch graphic.
0029CE  3  BC F6 29     	ldy spritetab,x
0029D1  3  51 rr        	eor (scraddr),y		; merge with screen image.
0029D3  3  91 rr        	sta (scraddr),y		; write to screen.
0029D5  3  E8           	inx			; next screen byte.
0029D6  3               
0029D6  3  AD 17 2A     	lda spr+1		; fetch graphic.
0029D9  3  BC F6 29     	ldy spritetab,x
0029DC  3  51 rr        	eor (scraddr),y		; merge with screen image.
0029DE  3  91 rr        	sta (scraddr),y		; write to screen.
0029E0  3  C8           	iny
0029E1  3               
0029E1  3  AD 18 2A     	lda spr+2		; fetch graphic.
0029E4  3  51 rr        	eor (scraddr),y		; merge with screen image.
0029E6  3  91 rr        	sta (scraddr),y		; write to screen.
0029E8  3               
0029E8  3  E8           	inx			; next source byte.
0029E9  3  E0 10        	cpx #16
0029EB  3  D0 02        	bne :+
0029ED  3  E6 rr        	inc scraddr+1
0029EF  3               :
0029EF  3  E0 20        	cpx #32
0029F1  3  D0 C2        	bne sprit1		; repeat
0029F3  3               
0029F3  3  A6 rr        	ldx xtmp		; retreive X-reg
0029F5  3  60           	rts
0029F6  3               
0029F6  3               spritetab:
0029F6  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0029FA  3  40 41 60 61  
0029FE  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002A02  3  C0 C1 E0 E1  
002A06  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002A0A  3  40 41 60 61  
002A0E  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002A12  3  C0 C1 E0 E1  
002A16  3               
002A16  3  00 00 00     spr:	.byte 0,0,0
002A19  3               
002A19  3               ;xtmp:	.byte 0
002A19  3               .endif
002A19  3               
002A19  3               ;-----------------------------------------------------------
002A19  3               ; Get room address.
002A19  3               ;-----------------------------------------------------------
002A19  3               
002A19  3               ;.repeat 273
002A19  3               ;  .byte 0
002A19  3               ;.endrep
002A19  3               
002A19  3               groom:
002A19  3  A6 rr        	ldx scno 		; screen number.
002A1B  3  A0 00        	ldy #0
002A1D  3               groomx:
002A1D  3  A9 04        	lda #<scdat 		; pointer to screens.
002A1F  3  85 66        	sta z80_l
002A21  3  A9 61        	lda #>scdat
002A23  3  85 67        	sta z80_h
002A25  3               groom1:
002A25  3  E0 00        	cpx #0			; is it the first one?
002A27  3  F0 15        	beq groom0 		; no more screens to skip.
002A29  3               
002A29  3  18           	clc
002A2A  3  A5 66        	lda z80_l
002A2C  3  79 04 61     	adc scdat,y 		; low byte of screen size.
002A2F  3  85 66        	sta z80_l
002A31  3  C8           	iny			; point to high byte.
002A32  3  A5 67        	lda z80_h
002A34  3  79 04 61     	adc scdat,y 		; high byte of screen size.
002A37  3  85 67        	sta z80_h
002A39  3  C8           	iny			; next address.
002A3A  3               
002A3A  3  CA           	dex 			; one less iteration.
002A3B  3  4C 25 2A     	jmp groom1 		; loop until we reach the end.
002A3E  3               groom0:
002A3E  3  AD 98 83     	lda numsc 		; add displacement.
002A41  3  0A           	asl a
002A42  3  18           	clc			; add double displacement to address.
002A43  3  65 66        	adc z80_l
002A45  3  85 66        	sta z80_l
002A47  3  A5 67        	lda z80_h
002A49  3  69 00        	adc #0
002A4B  3  85 67        	sta z80_h
002A4D  3  60           	rts
002A4E  3               
002A4E  3               ;-----------------------------------------------------------
002A4E  3               ; Draw present room.
002A4E  3               ;-----------------------------------------------------------
002A4E  3               
002A4E  3               droom:
002A4E  3  AD 26 20     	lda wintop 		; window top.
002A51  3  85 rr        	sta dispy		; set cursor y position.
002A53  3               droom2:
002A53  3  20 19 2A     	jsr groom 		; get address of current room.
002A56  3  A9 00        	lda #0	 		; zero in accumulator.
002A58  3  85 rr        	sta comcnt 		; reset compression counter.
002A5A  3  AD 28 20     	lda winhgt 		; height of window.
002A5D  3  85 rr        	sta rrow		; set row counter
002A5F  3               droom0:
002A5F  3  AD 27 20     	lda winlft 		; window left edge.
002A62  3  85 rr        	sta dispx 		; set cursor x position.
002A64  3  AD 29 20     	lda winwid 		; width of window.
002A67  3  85 rr        	sta rcol		; set column counter
002A69  3               droom1:
002A69  3  20 7A 2A     	jsr flbyt 		; decompress next byte on the fly.
002A6C  3  20 21 29     	jsr pattr2 		; show attributes and block.
002A6F  3  C6 rr        	dec rcol		; one less column.
002A71  3  D0 F6        	bne droom1 		; repeat for entire line.
002A73  3  E6 rr        	inc dispy		; move down one line.
002A75  3  C6 rr        	dec rrow 		; one less row.
002A77  3  D0 E6        	bne droom0 		; repeat for all rows.
002A79  3  60           	rts
002A7A  3               
002A7A  3               ;rcol:	.byte 0
002A7A  3               ;rrow:	.byte 0
002A7A  3               
002A7A  3               ;----------------------------------------------
002A7A  3               ; Decompress bytes on-the-fly.
002A7A  3               ;----------------------------------------------
002A7A  3               
002A7A  3               flbyt:
002A7A  3  A5 rr        	lda comcnt 		; compression counter.
002A7C  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002A7E  3               
002A7E  3  A0 00        	ldy #0
002A80  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002A82  3  E6 66        	inc z80_l 		; point to next cell.
002A84  3  D0 02        	bne :+
002A86  3  E6 67        	inc z80_h
002A88  3               :
002A88  3  C9 FF        	cmp #255 		; is this byte a control code?
002A8A  3  F0 01        	beq :+
002A8C  3  60           	rts 			; no, this byte is uncompressed.
002A8D  3               :
002A8D  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002A8F  3  85 rr        	sta combyt 		; set up the type.
002A91  3  E6 66        	inc z80_l 		; point to quantity.
002A93  3  D0 02        	bne :+
002A95  3  E6 67        	inc z80_h
002A97  3               :
002A97  3  B1 66        	lda (z80_hl),y 		; get quantity.
002A99  3  E6 66        	inc z80_l 		; point to next byte.
002A9B  3  D0 02        	bne :+
002A9D  3  E6 67        	inc z80_h
002A9F  3               :
002A9F  3               flbyt1:
002A9F  3  85 rr        	sta comcnt 		; store new quantity.
002AA1  3  C6 rr        	dec comcnt		; one less.
002AA3  3  A5 rr        	lda combyt 		; byte to expand.
002AA5  3  60           	rts
002AA6  3               
002AA6  3               ;combyt:	.byte 0			; byte type compressed.
002AA6  3               ;comcnt:	.byte 0			; compression counter.
002AA6  3               
002AA6  3               ;------------------------------------------
002AA6  3               ; Ladder down check.
002AA6  3               ;
002AA6  3               ; Input:
002AA6  3               ;  IX = sprite pointer
002AA6  3               ;------------------------------------------
002AA6  3               
002AA6  3               .if lflag
002AA6  3               laddd:
002AA6  3  A0 09        	ldy #9
002AA8  3  B1 68        	lda (z80_ix),y		; x coordinate.
002AAA  3  85 rr        	sta dispx
002AAC  3               
002AAC  3  A0 08        	ldy #8
002AAE  3  B1 68        	lda (z80_ix),y		; y coordinate.
002AB0  3  29 FE        	and #254		; make it even.
002AB2  3  91 68        	sta (z80_ix),y 		; reset it.
002AB4  3  18           	clc 			; look down 16 pixels.
002AB5  3               numsp5:
002AB5  3  69 10        	adc #SPR_HGT
002AB7  3  85 rr        	sta dispy		; coords in dispx,dispy.
002AB9  3  4C CF 2A     	jmp laddv
002ABC  3               
002ABC  3               ;------------------------------------------
002ABC  3               ; Ladder up check.
002ABC  3               ;
002ABC  3               ; Input:
002ABC  3               ;  IX = sprite pointer
002ABC  3               ;
002ABC  3               ; Output:
002ABC  3               ;  A  = 0 is ok, A <>0 is not ok
002ABC  3               ;------------------------------------------
002ABC  3               
002ABC  3               laddu:
002ABC  3  A0 09        	ldy #9
002ABE  3  B1 68        	lda (z80_ix),y		; x coordinate.
002AC0  3  85 rr        	sta dispx
002AC2  3               
002AC2  3  A0 08        	ldy #8
002AC4  3  B1 68        	lda (z80_ix),y		; y coordinate.
002AC6  3  29 FE        	and #254 		; make it even.
002AC8  3  91 68        	sta (z80_ix),y		; reset it.
002ACA  3  18           	clc 			; look 2 pixels above feet.
002ACB  3               numsp6:
002ACB  3  69 0E        	adc #SPR_HGT-2
002ACD  3  85 rr        	sta dispy		; coords in dispx,dispy.
002ACF  3               laddv:
002ACF  3  20 B1 2D     	jsr tstbl 		; get map address.
002AD2  3  20 E8 2C     	jsr ldchk 		; standard ladder check.
002AD5  3  F0 01        	beq :+
002AD7  3  60           	rts 			; no way through.
002AD8  3               :
002AD8  3  E6 rr        	inc bufaddr 		; look right one cell.
002ADA  3  D0 02        	bne :+
002ADC  3  E6 rr        	inc bufaddr+1
002ADE  3               :
002ADE  3  20 E8 2C     	jsr ldchk 		; do the check.
002AE1  3  F0 01        	beq :+
002AE3  3  60           	rts 			; impassable.
002AE4  3               :
002AE4  3  A5 rr        	lda dispx 		; y coordinate.
002AE6  3  29 07        	and #7 			; position straddling block cells.
002AE8  3  D0 01        	bne :+
002AEA  3  60           	rts 			; no more checks needed.
002AEB  3               :
002AEB  3  E6 rr        	inc bufaddr 		; look to third cell.
002AED  3  D0 02        	bne :+
002AEF  3  E6 rr        	inc bufaddr+1
002AF1  3               :
002AF1  3  20 E8 2C     	jsr ldchk 		; do the check.
002AF4  3  60           	rts  			; return with zero flag set accordingly.
002AF5  3               .endif
002AF5  3               
002AF5  3               ;---------------------------------------------------------
002AF5  3               ; Can go up check.
002AF5  3               ;
002AF5  3               ; Input:
002AF5  3               ;  IX = sprite pointer
002AF5  3               ;
002AF5  3               ; Output:
002AF5  3               ;  A  = 0 is ok, A <>0 is not ok
002AF5  3               ;---------------------------------------------------------
002AF5  3               
002AF5  3               cangu:
002AF5  3  A0 09        	ldy #9
002AF7  3  B1 68        	lda (z80_ix),y		; x coordinate.
002AF9  3  85 rr        	sta dispx
002AFB  3  A0 08        	ldy #8
002AFD  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002AFF  3  38           	sec
002B00  3  E9 02        	sbc #2
002B02  3  85 rr        	sta dispy		; coords in dispx,dispy.
002B04  3  20 B1 2D     	jsr tstbl 		; get map address.
002B07  3  20 B7 2C     	jsr lrchk 		; standard left/right check.
002B0A  3  F0 01        	beq :+
002B0C  3  60           	rts			; no way through.
002B0D  3               :
002B0D  3  E6 rr        	inc bufaddr		; look right one cell.
002B0F  3  D0 02        	bne :+
002B11  3  E6 rr        	inc bufaddr+1
002B13  3               :
002B13  3  20 B7 2C     	jsr lrchk 		; do the check.
002B16  3  F0 01        	beq :+
002B18  3  60           	rts			; impassable.
002B19  3               :
002B19  3  A5 rr        	lda dispx		; x coordinate.
002B1B  3  29 07        	and #7			; position straddling block cells.
002B1D  3  D0 01        	bne :+
002B1F  3  60           	rts			; no more checks needed.
002B20  3               :
002B20  3  E6 rr        	inc bufaddr		; look to third cell.
002B22  3  D0 02        	bne :+
002B24  3  E6 rr        	inc bufaddr+1
002B26  3               :
002B26  3  20 B7 2C     	jsr lrchk		; do the check.
002B29  3  60           	rts 			; return with zero flag set accordingly.
002B2A  3               
002B2A  3               ;---------------------------------------------------------
002B2A  3               ; Can go down check.
002B2A  3               ;
002B2A  3               ; Input:
002B2A  3               ;  IX = sprite pointer
002B2A  3               ;
002B2A  3               ; Output:
002B2A  3               ;  A  = 0 is ok, A <>0 is not ok
002B2A  3               ;---------------------------------------------------------
002B2A  3               
002B2A  3               ;.repeat 264
002B2A  3               ;  .byte 0
002B2A  3               ;.endrep
002B2A  3               
002B2A  3               cangd:
002B2A  3  A0 09        	ldy #9
002B2C  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002B2E  3  85 rr        	sta dispx
002B30  3  A0 08        	ldy #8
002B32  3  B1 68        	lda (z80_ix),y		; y coordinate.
002B34  3  18           	clc
002B35  3               numsp3:
002B35  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
002B37  3  85 rr        	sta dispy		; coords in dispx,dispy.
002B39  3  20 B1 2D     	jsr tstbl 		; get map address.
002B3C  3  20 CC 2C     	jsr plchk 		; block, platform check.
002B3F  3  F0 01        	beq :+
002B41  3  60           	rts			; no way through.
002B42  3               :
002B42  3  E6 rr        	inc bufaddr		; look right one cell.
002B44  3  D0 02        	bne :+
002B46  3  E6 rr        	inc bufaddr+1
002B48  3               :
002B48  3  20 CC 2C     	jsr plchk		; block, platform check.
002B4B  3  F0 01        	beq :+
002B4D  3  60           	rts			; impassable.
002B4E  3               :
002B4E  3  A5 rr        	lda dispx		; x coordinate.
002B50  3  29 07        	and #7			; position straddling block cells.
002B52  3  D0 01        	bne :+
002B54  3  60           	rts			; no more checks needed.
002B55  3               :
002B55  3  E6 rr        	inc bufaddr		; look to third cell.
002B57  3  D0 02        	bne :+
002B59  3  E6 rr        	inc bufaddr+1
002B5B  3               :
002B5B  3  20 CC 2C     	jsr plchk		; block, platform check.
002B5E  3  60           	rts			; return with zero flag set accordingly.
002B5F  3               
002B5F  3               ;---------------------------------------------------------
002B5F  3               ; Can go left check.
002B5F  3               ;
002B5F  3               ; Input:
002B5F  3               ;  IX = sprite pointer
002B5F  3               ;
002B5F  3               ; Output:
002B5F  3               ;  A  = 0 is ok, A <>0 is not ok
002B5F  3               ;---------------------------------------------------------
002B5F  3               
002B5F  3               cangl:
002B5F  3  A0 08        	ldy #8
002B61  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002B63  3  85 rr        	sta dispy
002B65  3  A0 09        	ldy #9
002B67  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002B69  3  38           	sec
002B6A  3  E9 02        	sbc #2			; look left 2 pixels.
002B6C  3  85 rr        	sta dispx		; coords in dispx,dispy.
002B6E  3  4C 90 2C     	jmp cangh		; test if we can go there.
002B71  3               
002B71  3               ;---------------------------------------------------------
002B71  3               ; Can go right check.
002B71  3               ;
002B71  3               ; Input:
002B71  3               ;  IX = sprite pointer
002B71  3               ;
002B71  3               ; Output:
002B71  3               ;  A  = 0 is ok, A <>0 is not ok
002B71  3               ;---------------------------------------------------------
002B71  3               
002B71  3  00 00 00 00  .repeat 272
002B75  3  00 00 00 00  
002B79  3  00 00 00 00  
002C81  3                 .byte 0
002C81  3               .endrep
002C81  3               
002C81  3               cangr:
002C81  3  A0 08        	ldy #8
002C83  3  B1 68        	lda (z80_ix),y		; y coordinate.
002C85  3  85 rr        	sta dispy
002C87  3  A0 09        	ldy #9
002C89  3  B1 68        	lda (z80_ix),y		; x coordinate.
002C8B  3  18           	clc
002C8C  3  69 10        	adc #16			; look right 16 pixels.
002C8E  3  85 rr        	sta dispx		; coords in dispx,dispy.
002C90  3               cangh:
002C90  3               cangh2:
002C90  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
002C92  3  85 63        	sta z80_b
002C94  3  A5 rr        	lda dispy		; y position.
002C96  3  29 07        	and #7			; does x straddle cells?
002C98  3  D0 02        	bne cangh0		; yes, loop counter is good.
002C9A  3  C6 63        	dec z80_b		; one less row to write.
002C9C  3               cangh0:
002C9C  3  20 B1 2D     	jsr tstbl		; get map address.
002C9F  3               cangh1:
002C9F  3  20 B7 2C     	jsr lrchk		; standard left/right check.
002CA2  3  F0 01        	beq :+
002CA4  3  60           	rts			; no way through.
002CA5  3               :
002CA5  3  48           	pha
002CA6  3  18           	clc
002CA7  3  A5 rr        	lda bufaddr
002CA9  3  69 20        	adc #32			; look down.
002CAB  3  85 rr        	sta bufaddr
002CAD  3  90 02        	bcc :+
002CAF  3  E6 rr        	inc bufaddr+1
002CB1  3               :
002CB1  3  68           	pla
002CB2  3               
002CB2  3  C6 63        	dec z80_b
002CB4  3  D0 E9        	bne cangh1
002CB6  3  60           	rts
002CB7  3               
002CB7  3               ;-------------------------------------
002CB7  3               ; Check left/right movement is okay.
002CB7  3               ;
002CB7  3               ; Input:
002CB7  3               ;  bufaddr = MAP + x/8 + y/8*32
002CB7  3               ;
002CB7  3               ; Output:
002CB7  3               ;  A  = 0 is ok, A <>0 is not ok
002CB7  3               ;-------------------------------------
002CB7  3               
002CB7  3               lrchk:
002CB7  3  A0 00        	ldy #0
002CB9  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002CBB  3  C9 02        	cmp #WALL 		; is it passable?
002CBD  3  F0 0A        	beq lrchkx		; no.
002CBF  3               
002CBF  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002CC1  3  F0 06        	beq lrchkx		; not passable.
002CC3  3  A9 00        	lda #0
002CC5  3  60           	rts
002CC6  3               
002CC6  3               ;--------------------------------------------------------------
002CC6  3               ; Called by mmenu
002CC6  3               ;--------------------------------------------------------------
002CC6  3               
002CC6  3               always:
002CC6  3  A9 FF        	lda #255		; report it as okay.
002CC8  3  60           	rts
002CC9  3               
002CC9  3               lrchkx:
002CC9  3  A9 01        	lda #1 			; reset all bits.
002CCB  3  60           	rts
002CCC  3               
002CCC  3               
002CCC  3               ;--------------------------------------------------------------
002CCC  3               ; Check platform or solid item is not in way.
002CCC  3               ;
002CCC  3               ; Input:
002CCC  3               ;  bufaddr = MAP + x/8 + y/8*32
002CCC  3               ;
002CCC  3               ; Output:
002CCC  3               ;  A  = 0 is ok, A <>0 is not ok
002CCC  3               ;--------------------------------------------------------------
002CCC  3               
002CCC  3               plchk:
002CCC  3  A0 00        	ldy #0
002CCE  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002CD0  3  C9 02        	cmp #WALL 		; is it passable?
002CD2  3  F0 F5        	beq lrchkx		; no.
002CD4  3               .if pflag .or dflag
002CD4  3               	cmp #FODDER		; fodder has to be dug.
002CD4  3               	beq lrchkx		; not passable.
002CD4  3               .endif
002CD4  3  C9 01        	cmp #PLATFM		; platform is solid.
002CD6  3  F0 07        	beq plchkx		; not passable.
002CD8  3               .if lflag
002CD8  3  C9 03        	cmp #LADDER		; is it a ladder?
002CDA  3  F0 ED        	beq lrchkx		; on ladder, deny movement.
002CDC  3               .endif
002CDC  3               plchk0:
002CDC  3  A9 00        	lda #0			; report as ok
002CDE  3  60           	rts
002CDF  3               plchkx:
002CDF  3  A5 rr        	lda dispy		; x coordinate.
002CE1  3  29 07        	and #7			; position straddling blocks.
002CE3  3  F0 E4        	beq lrchkx		; on platform, deny movement.
002CE5  3  4C DC 2C     	jmp plchk0
002CE8  3               
002CE8  3               ;--------------------------------------------------------------
002CE8  3               ; Check ladder is available.
002CE8  3               ;
002CE8  3               ; Input:
002CE8  3               ;  bufaddr = MAP + x/8 + y/8*32
002CE8  3               ;
002CE8  3               ; Output:
002CE8  3               ;  A  = 0 is ok, A <>0 is not ok
002CE8  3               ;--------------------------------------------------------------
002CE8  3               
002CE8  3               .if lflag
002CE8  3               ldchk:
002CE8  3  A0 00        	ldy #0
002CEA  3  B1 rr        	lda (bufaddr),y 	; fetch cell.
002CEC  3  C9 03        	cmp #LADDER 		; is it a ladder?
002CEE  3  F0 03        	beq :+
002CF0  3  A9 01        	lda #1
002CF2  3  60           	rts  			; return with zero flag set accordingly.
002CF3  3               :
002CF3  3  A9 00        	lda #0
002CF5  3  60           	rts
002CF6  3               .endif
002CF6  3               
002CF6  3               ;--------------------------------------------------------------
002CF6  3               ; Get collectables.
002CF6  3               ;--------------------------------------------------------------
002CF6  3               
002CF6  3               .if cflag
002CF6  3               getcol:
002CF6  3                       lda #COLECT             ; collectable blocks.
002CF6  3                       sta z80_b
002CF6  3                       jsr tded                ; test for collectable blocks.
002CF6  3                       cmp z80_b               ; did we find one?
002CF6  3                       beq :+
002CF6  3                       rts                     ; none were found, job done.
002CF6  3               :
002CF6  3                       jsr gtblk               ; get block.
002CF6  3                       jsr evnt20              ; collected block event.
002CF6  3                       jmp getcol              ; repeat until none left.
002CF6  3               
002CF6  3               ; Get collectable block.
002CF6  3               
002CF6  3               gtblk:
002CF6  3               	ldy #0
002CF6  3               	lda (bufaddr),y
002CF6  3               	sta z80_a
002CF6  3                       lda #0
002CF6  3                       sta (bufaddr),y		; make it empty now.
002CF6  3               
002CF6  3               	lda bufaddr		; set dispx
002CF6  3               	and #31
002CF6  3               	sta dispx
002CF6  3               
002CF6  3               	lda bufaddr+1		; Set dispy
002CF6  3               	sec
002CF6  3               	sbc #>MAP
002CF6  3               	sta bufaddr+1
002CF6  3               	asl bufaddr
002CF6  3               	rol bufaddr+1
002CF6  3               	asl bufaddr
002CF6  3               	rol bufaddr+1
002CF6  3               	asl bufaddr
002CF6  3               	rol bufaddr+1
002CF6  3               	lda bufaddr+1
002CF6  3               	sta dispy
002CF6  3               
002CF6  3               	lda colpatt		; get blocknr
002CF6  3               	sta z80_e		; displacement in e.
002CF6  3               	lda #0
002CF6  3               	sta z80_d		; no high byte.
002CF6  3               	asl z80_e  		; multiply char by 8.
002CF6  3               	rol z80_d
002CF6  3               	asl z80_e
002CF6  3               	rol z80_d
002CF6  3               	asl z80_e
002CF6  3               	rol z80_d
002CF6  3               	clc
002CF6  3               	lda z80_e
002CF6  3               	adc #<chgfx 		; address of graphics.
002CF6  3               	sta tileaddr
002CF6  3               	lda z80_d
002CF6  3               	adc #>chgfx
002CF6  3               	sta tileaddr+1
002CF6  3               	jsr gprad 		; get screen address.
002CF6  3               	ldx #7			; number of pixel rows to write.
002CF6  3               gtblk0:
002CF6  3               	ldy #0
002CF6  3               	lda (tileaddr),y 	; get image byte.
002CF6  3               	ldy scrtab,x
002CF6  3               	eor (scraddr),y 	; XOR tile on screen
002CF6  3               	sta (scraddr),y 	; copy to screen.
002CF6  3               	inc tileaddr 		; next image byte.
002CF6  3               	bne :+
002CF6  3               	inc tileaddr+1
002CF6  3               :
002CF6  3               	dex	 		; repeat for 8 pixel rows.
002CF6  3               	bpl gtblk0
002CF6  3               	rts
002CF6  3               .endif
002CF6  3               
002CF6  3               ;--------------------------------------------------------------
002CF6  3               ; Touched deadly block check.
002CF6  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002CF6  3               ;
002CF6  3               ; Input:
002CF6  3               ;  IX = sprite address
002CF6  3               ;
002CF6  3               ; Output:
002CF6  3               ;  A  = 0 is ok, A=5 is not ok
002CF6  3               ;--------------------------------------------------------------
002CF6  3               
002CF6  3               tded:
002CF6  3  A0 08        	ldy #8
002CF8  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002CFA  3  85 rr        	sta dispy
002CFC  3  C8           	iny
002CFD  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002CFF  3  85 rr        	sta dispx		; coords in dispx,dispy.
002D01  3  20 B1 2D     	jsr tstbl		; get map address.
002D04  3  48           	pha
002D05  3  A9 1F        	lda #31			; default distance to next line down.
002D07  3  85 64        	sta z80_e
002D09  3  68           	pla
002D0A  3  C5 63        	cmp z80_b		; is this the required block?
002D0C  3  D0 01        	bne :+
002D0E  3  60           	rts			; yes.
002D0F  3               :
002D0F  3  E6 rr        	inc bufaddr 		; next cell.
002D11  3  D0 02        	bne :+
002D13  3  E6 rr        	inc bufaddr+1
002D15  3               :
002D15  3  A0 00        	ldy #0
002D17  3  B1 rr        	lda (bufaddr),y		; fetch type.
002D19  3  C5 63        	cmp z80_b 		; is this deadly/custom?
002D1B  3  D0 01        	bne :+
002D1D  3  60           	rts			; yes.
002D1E  3               :
002D1E  3  A5 rr        	lda dispx		; horizontal position.
002D20  3  85 62        	sta z80_c 		; store column in c register.
002D22  3  29 07        	and #7			; is it straddling cells?
002D24  3  D0 03        	bne :+
002D26  3  4C 3A 2D     	jmp tded0		; no.
002D29  3               :
002D29  3  E6 rr        	inc bufaddr 		; last cell.
002D2B  3  D0 02        	bne :+
002D2D  3  E6 rr        	inc bufaddr+1
002D2F  3               :
002D2F  3  A0 00        	ldy #0
002D31  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002D33  3  C5 63        	cmp z80_b		; is this the block?
002D35  3  D0 01        	bne :+
002D37  3  60           	rts			; yes.
002D38  3               :
002D38  3  C6 64        	dec z80_e		; one less cell to next row down.
002D3A  3               tded0:
002D3A  3  18           	clc 			; point to next row.
002D3B  3  A5 rr        	lda bufaddr
002D3D  3  65 64        	adc z80_e
002D3F  3  85 rr        	sta bufaddr
002D41  3  90 02        	bcc :+
002D43  3  E6 rr        	inc bufaddr+1
002D45  3               :
002D45  3  A0 00        	ldy #0
002D47  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
002D49  3  C5 63        	cmp z80_b		; is this fatal?
002D4B  3  D0 01        	bne :+
002D4D  3  60           	rts			; yes.
002D4E  3               :
002D4E  3  E6 rr        	inc bufaddr 		; next cell.
002D50  3  D0 02        	bne :+
002D52  3  E6 rr        	inc bufaddr+1
002D54  3               :
002D54  3  A0 00        	ldy #0
002D56  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002D58  3  C5 63        	cmp z80_b		; is this fatal?
002D5A  3  D0 01        	bne :+
002D5C  3  60           	rts			; yes.
002D5D  3               :
002D5D  3  A5 62        	lda z80_c		; horizontal position.
002D5F  3  29 07        	and #7			; is it straddling cells?
002D61  3  D0 03        	bne :+
002D63  3  4C 75 2D     	jmp tded1 		; no.
002D66  3               :
002D66  3  E6 rr        	inc bufaddr		; last cell.
002D68  3  D0 02        	bne :+
002D6A  3  E6 rr        	inc bufaddr+1
002D6C  3               :
002D6C  3  A0 00        	ldy #0
002D6E  3  B1 rr        	lda (bufaddr),y		; fetch type.
002D70  3  C5 63        	cmp z80_b		; is this fatal?
002D72  3  D0 01        	bne :+
002D74  3  60           	rts			; yes.
002D75  3               :
002D75  3               tded1:
002D75  3  A5 rr        	lda dispy		; vertical position.
002D77  3  29 07        	and #7 			; is it straddling cells?
002D79  3  D0 01        	bne :+
002D7B  3  60           	rts			; no, job done.
002D7C  3               :
002D7C  3  18           	clc			; point to next row.
002D7D  3  A5 rr        	lda bufaddr
002D7F  3  65 64        	adc z80_e
002D81  3  85 rr        	sta bufaddr
002D83  3  90 02        	bcc :+
002D85  3  E6 rr        	inc bufaddr+1
002D87  3               :
002D87  3  A0 00        	ldy #0
002D89  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
002D8B  3  C5 63        	cmp z80_b		; is this fatal?
002D8D  3  D0 01        	bne :+
002D8F  3  60           	rts			; yes.
002D90  3               :
002D90  3  E6 rr        	inc bufaddr		; next cell.
002D92  3  D0 02        	bne :+
002D94  3  E6 rr        	inc bufaddr+1
002D96  3               :
002D96  3  A0 00        	ldy #0
002D98  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002D9A  3  C5 63        	cmp z80_b		; is this fatal?
002D9C  3  D0 01        	bne :+
002D9E  3  60           	rts			; yes.
002D9F  3               :
002D9F  3  A5 62        	lda z80_c		; horizontal position.
002DA1  3  29 07        	and #7			; is it straddling cells?
002DA3  3  D0 01        	bne :+
002DA5  3  60           	rts			; no.
002DA6  3               :
002DA6  3  E6 rr        	inc bufaddr		; last cell.
002DA8  3  D0 02        	bne :+
002DAA  3  E6 rr        	inc bufaddr+1
002DAC  3               :
002DAC  3  A0 00        	ldy #0
002DAE  3  B1 rr        	lda (bufaddr),y		; fetch final type.
002DB0  3  60           	rts 			; return with final type in accumulator.
002DB1  3               
002DB1  3               ;---------------------------------------------------
002DB1  3               ; Fetch block type at (dispx, dispy).
002DB1  3               ;
002DB1  3               ; Output:
002DB1  3               ;  A = block type
002DB1  3               ;---------------------------------------------------
002DB1  3               
002DB1  3               tstbl:
002DB1  3  A5 rr        	lda dispy 		; fetch y coord.
002DB3  3  4A           	lsr a			; bufaddr = y/8
002DB4  3  4A           	lsr a
002DB5  3  4A           	lsr a
002DB6  3  85 rr        	sta chary
002DB8  3               
002DB8  3  85 rr        	sta bufaddr
002DBA  3  A9 00        	lda #0
002DBC  3  85 rr        	sta bufaddr+1
002DBE  3               
002DBE  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
002DC0  3  26 rr        	rol bufaddr+1
002DC2  3  06 rr        	asl bufaddr
002DC4  3  26 rr        	rol bufaddr+1
002DC6  3  06 rr        	asl bufaddr
002DC8  3  26 rr        	rol bufaddr+1
002DCA  3  06 rr        	asl bufaddr
002DCC  3  26 rr        	rol bufaddr+1
002DCE  3  06 rr        	asl bufaddr
002DD0  3  26 rr        	rol bufaddr+1
002DD2  3               
002DD2  3  A5 rr        	lda dispx		; x/8
002DD4  3  4A           	lsr a
002DD5  3  4A           	lsr a
002DD6  3  4A           	lsr a
002DD7  3  85 rr        	sta charx
002DD9  3               
002DD9  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
002DDA  3  65 rr        	adc bufaddr
002DDC  3  69 00        	adc #<MAP
002DDE  3  85 rr        	sta bufaddr
002DE0  3  A5 rr        	lda bufaddr+1
002DE2  3  69 DD        	adc #>MAP
002DE4  3  85 rr        	sta bufaddr+1
002DE6  3               
002DE6  3  A0 00        	ldy #0
002DE8  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002DEA  3  60           	rts
002DEB  3               
002DEB  3               
002DEB  3               ;-------------------------------------------------------------------
002DEB  3               ; Jump - if we can.
002DEB  3               ; Requires initial speed to be set up in accumulator prior to call.
002DEB  3               ;
002DEB  3               ; Input:
002DEB  3               ;  IX = sprite address
002DEB  3               ;-------------------------------------------------------------------
002DEB  3               
002DEB  3               jump:
002DEB  3  A0 0D        	ldy #13
002DED  3  B1 68        	lda (z80_ix),y		; jump table low.
002DEF  3  A0 0E        	ldy #14
002DF1  3  11 68        	ora (z80_ix),y		; jump table high.
002DF3  3  F0 01        	beq :+
002DF5  3  60           	rts			; already in the air.
002DF6  3               :
002DF6  3  A9 8B        	lda #>jtab
002DF8  3  A0 0E        	ldy #14
002DFA  3  91 68        	sta (z80_ix),y		; set jump high.
002DFC  3  A9 6D        	lda #<jtab		; jump table start.
002DFE  3  A0 0D        	ldy #13
002E00  3  91 68        	sta (z80_ix),y		; set jump low.
002E02  3  60           	rts
002E03  3               
002E03  3               ; Jump table.
002E03  3               
002E03  3               ;jtab:
002E03  3               ;	.byte 248,250,252
002E03  3               ;	.byte 254,254,255
002E03  3               ;	.byte 255,255,0,0
002E03  3               ;	.byte 0,1,1,1,2,2
002E03  3               ;	.byte 4,6,8,8,8,99
002E03  3               
002E03  3               ;------------------------------------------------
002E03  3               ; Random numbers code.
002E03  3               ; Pseudo-random number generator, 8-bit.
002E03  3               ;
002E03  3               ; Output:
002E03  3               ;  RND = random number
002E03  3               ;------------------------------------------------
002E03  3               
002E03  3               random:
002E03  3  A5 rr        	lda seed
002E05  3  F0 05        	beq doEor
002E07  3  0A           	asl a
002E08  3  F0 04        	beq noEor
002E0A  3  90 02        	bcc noEor
002E0C  3  49 1D        doEor:	eor #$1d
002E0E  3  85 rr        noEor:	sta seed
002E10  3  60           	rts
002E11  3               
002E11  3  A5 rr        	lda seed		; get last random number.
002E13  3  0A           	asl a
002E14  3  0A           	asl a
002E15  3  18           	clc
002E16  3  65 rr        	adc seed
002E18  3  18           	clc
002E19  3  69 45        	adc #$45
002E1B  3  85 rr        	sta seed		; store new seed.
002E1D  3  85 rr        	sta varrnd		; return number in variable.
002E1F  3  60           	rts
002E20  3               
002E20  3               ;--------------------------------------------------------
002E20  3               ; Keys
002E20  3               ;
002E20  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002E20  3               ;             ||||||||
002E20  3               ;             |||||||+> Right    KEY 0  - X
002E20  3               ;             ||||||+-> Left     KEY 1  - Z
002E20  3               ;             |||||+--> Down     KEY 2  - .
002E20  3               ;             ||||+---> Up       KEY 3  - ;
002E20  3               ;             |||+----> Fire1    KEY 4  - SPC
002E20  3               ;             ||+-----> Fire2    KEY 5  - Q
002E20  3               ;             |+------> Fire3    KEY 6  - P
002E20  3               ;             +-------> Not used
002E20  3               ;
002E20  3               ;                       Option1  KEY 7  - 1
002E20  3               ;                       Option2  KEY 8  - 2
002E20  3               ;                       Option3  KEY 9  - 3
002E20  3               ;                       Option4  KEY 10 - 4
002E20  3               ;--------------------------------------------------------
002E20  3               
002E20  3               ;              X   Z   .   ;  SPC  Q   P
002E20  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002E20  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002E20  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002E24  3  00 04 14     
002E27  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
002E2B  3               
002E2B  3               ;-------------------------------------------------------
002E2B  3               ; Joystick and keyboard reading routines.
002E2B  3               ;
002E2B  3               ; contrl = 0, Keyboard
002E2B  3               ;          1, JoyKeyb
002E2B  3               ;          2, JoyMMC
002E2B  3               ;-------------------------------------------------------
002E2B  3               
002E2B  3               joykey:
002E2B  3  A5 rr        	lda contrl 		; control flag.
002E2D  3  C9 01        	cmp #1
002E2F  3  D0 03        	bne :+
002E31  3  4C 3B 8C     	jmp joy1 		; read keyboard joystick
002E34  3               :
002E34  3  C9 02        	cmp #2
002E36  3  D0 03        	bne :+
002E38  3  4C 6B 8C     	jmp joy2 		; read MMC joystick.
002E3B  3               :
002E3B  3               ; Keyboard controls.
002E3B  3               
002E3B  3  A9 00        	lda #0		 	; zero reading.
002E3D  3  85 64        	sta z80_e
002E3F  3               
002E3F  3  A0 06        	ldy #6	 		; address of last key.
002E41  3               joyke0:
002E41  3  B9 83 8B     	lda keys,y 		; get key from table.
002E44  3  20 12 8C     	jsr ktest		; being pressed?
002E47  3  26 64        	rol z80_e 		; rotate into reading.
002E49  3               
002E49  3  88           	dey		 	; next key.
002E4A  3  10 F5        	bpl joyke0 		; repeat for all keys.
002E4C  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002E4E  3  85 rr        	sta joyval		; remember value.
002E50  3  60           	rts
002E51  3               
002E51  3               ;---------------------------------------------------------------
002E51  3               ; Display message.
002E51  3               ;
002E51  3               ; Input:
002E51  3               ;  A = message number
002E51  3               ;---------------------------------------------------------------
002E51  3               
002E51  3               dmsg:
002E51  3  AA           	tax
002E52  3  A9 4E        	lda #<msgdat		; pointer to messages.
002E54  3  85 66        	sta z80_l
002E56  3  A9 46        	lda #>msgdat
002E58  3  85 67        	sta z80_h
002E5A  3  20 6C 2F     	jsr getwrd		; get message number.
002E5D  3               dmsg3:
002E5D  3  20 59 2F     	jsr preprt		; pre-printing stuff.
002E60  3  20 46 27     	jsr checkx		; make sure we"re in a printable range.
002E63  3  A5 rr        	lda prtmod		; print mode.
002E65  3  D0 47        	bne bmsg1		; no, double-height text.
002E67  3               dmsg0:
002E67  3  A5 67        	lda z80_h		; store string pointer.
002E69  3  48           	pha
002E6A  3  A5 66        	lda z80_l
002E6C  3  48           	pha
002E6D  3               
002E6D  3  A0 00        	ldy #0
002E6F  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
002E71  3  29 7F        	and #127		; remove any end marker.
002E73  3  C9 0D        	cmp #13
002E75  3  F0 24        	beq dmsg1
002E77  3  20 DA 28     	jsr pchar		; display character.
002E7A  3  20 46 2F     	jsr nexpos 		; display position.
002E7D  3  D0 03        	bne dmsg2		; not on a new line.
002E7F  3  20 4B 2F     	jsr nexlin		; next line down.
002E82  3               dmsg2:
002E82  3  68           	pla			; retrieve string pointer
002E83  3  85 66        	sta z80_l
002E85  3  68           	pla
002E86  3  85 67        	sta z80_h
002E88  3               
002E88  3  A0 00        	ldy #0
002E8A  3  B1 66        	lda (z80_hl),y		; fetch last character.
002E8C  3  0A           	asl a  			; was it the end?
002E8D  3  90 03        	bcc :+
002E8F  3  4C 99 27     	jmp dscor2		; yes, job done.
002E92  3               :
002E92  3  E6 66        	inc z80_l		; next character to display.
002E94  3  D0 02        	bne :+
002E96  3  E6 67        	inc z80_h
002E98  3               :
002E98  3  4C 67 2E     	jmp dmsg0
002E9B  3               dmsg1:
002E9B  3  E6 rr        	inc dispy
002E9D  3  A5 rr        	lda dispy
002E9F  3  C9 18        	cmp #24
002EA1  3  90 04        	bcc dmsg4
002EA3  3  A9 00        	lda #0
002EA5  3  85 rr        	sta dispy
002EA7  3               dmsg4:
002EA7  3  A9 00        	lda #0
002EA9  3  85 rr        	sta dispx
002EAB  3  4C 82 2E     	jmp dmsg2
002EAE  3               
002EAE  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
002EAE  3               
002EAE  3               ;----------------------------------------------------------
002EAE  3               ; Display message in big text.
002EAE  3               ;
002EAE  3               ; Input:
002EAE  3               ;  HL = string pointer
002EAE  3               ;----------------------------------------------------------
002EAE  3               
002EAE  3               bmsg1:
002EAE  3  A0 00        	ldy #0
002EB0  3  B1 66        	lda (z80_hl),y 		; get character to display.
002EB2  3  29 7F        	and #127		; only want 7 bits.
002EB4  3  C9 0D        	cmp #13
002EB6  3  F0 13        	beq bmsg2
002EB8  3  20 E0 2E     	jsr bchar 		; display big char.
002EBB  3               bmsg3:
002EBB  3  A0 00        	ldy #0
002EBD  3  B1 66        	lda (z80_hl),y 		; look at last character.
002EBF  3  48           	pha
002EC0  3  E6 66        	inc z80_l 		; next character in list.
002EC2  3  D0 02        	bne :+
002EC4  3  E6 67        	inc z80_h
002EC6  3               :
002EC6  3  68           	pla
002EC7  3  0A           	asl a  			; was terminator flag set?
002EC8  3  90 E4        	bcc bmsg1		; no, keep going.
002ECA  3  60           	rts
002ECB  3               bmsg2:
002ECB  3  A9 00        	lda #0
002ECD  3  85 rr        	sta dispx
002ECF  3  E6 rr        	inc dispy
002ED1  3  E6 rr        	inc dispy
002ED3  3  A5 rr        	lda dispy
002ED5  3  C9 17        	cmp #23
002ED7  3  90 E2        	bcc bmsg3
002ED9  3  A9 00        	lda #0
002EDB  3  85 rr        	sta dispy
002EDD  3  4C BB 2E     	jmp bmsg3
002EE0  3               
002EE0  3               ;----------------------------------------------------------
002EE0  3               ; Big character display.
002EE0  3               ;
002EE0  3               ; Input:
002EE0  3               ;  A = character
002EE0  3               ;----------------------------------------------------------
002EE0  3               
002EE0  3               bchar:
002EE0  3  85 64        	sta z80_e		; save char in lb
002EE2  3  A9 00        	lda #0
002EE4  3  85 65        	sta z80_d		; reset hb
002EE6  3               
002EE6  3  06 64        	asl z80_e 		; multiply char by 8.
002EE8  3  26 65        	rol z80_d
002EEA  3  06 64        	asl z80_e
002EEC  3  26 65        	rol z80_d
002EEE  3  06 64        	asl z80_e
002EF0  3  26 65        	rol z80_d		; de = a*8
002EF2  3               
002EF2  3  18           	clc			; de = Fontpointer + a*8
002EF3  3  A5 64        	lda z80_e
002EF5  3  69 6D        	adc #<(FONT-256) 		; address of font.
002EF7  3  85 64        	sta z80_e
002EF9  3  A5 65        	lda z80_d
002EFB  3  69 87        	adc #>(FONT-256)
002EFD  3  85 65        	sta z80_d
002EFF  3               
002EFF  3  20 8B 28     	jsr gprad 		; get screen address.
002F02  3               
002F02  3  A2 00        	ldx #0			; height of character in font.
002F04  3               bchar0:
002F04  3  A0 00        	ldy #0
002F06  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
002F08  3               
002F08  3               .if iflag
002F08  3               	eor #$ff
002F08  3               .endif
002F08  3               
002F08  3  91 rr        	sta (scraddr),y
002F0A  3  48           	pha
002F0B  3  20 A0 32     	jsr nline 		; next line down.
002F0E  3  68           	pla
002F0F  3  91 rr        	sta (scraddr),y
002F11  3  20 A0 32     	jsr nline 		; next line down.
002F14  3               
002F14  3  18           	clc
002F15  3  E6 64        	inc z80_e 		; next line of font.
002F17  3  D0 02        	bne :+
002F19  3  E6 65        	inc z80_d
002F1B  3               :
002F1B  3  E8           	inx
002F1C  3  E0 08        	cpx #8
002F1E  3  D0 E4        	bne bchar0
002F20  3               
002F20  3  20 46 2F     	jsr nexpos		; display position.
002F23  3  D0 05        	bne bchar2 		; not on a new line.
002F25  3               bchar3:
002F25  3  E6 rr        	inc dispy
002F27  3  20 4B 2F     	jsr nexlin 		; next line check.
002F2A  3               bchar2:
002F2A  3  4C 99 27     	jmp dscor2		; tidy up line and column variables.
002F2D  3               
002F2D  3               
002F2D  3               ;-------------------------------------------------
002F2D  3               ; Display a character.
002F2D  3               ;
002F2D  3               ; Input:
002F2D  3               ;  A = character
002F2D  3               ;-------------------------------------------------
002F2D  3               
002F2D  3               achar:
002F2D  3  85 63        	sta z80_b 		; copy to b.
002F2F  3  20 59 2F     	jsr preprt 		; get ready to print.
002F32  3  A5 63        	lda z80_b		; character in accumulator.
002F34  3  A6 rr        	ldx prtmod 		; print mode.
002F36  3  F0 03        	beq :+
002F38  3  4C E0 2E     	jmp bchar 		; no, double-height text.
002F3B  3               :
002F3B  3  20 DA 28     	jsr pchar 		; display character.
002F3E  3  20 46 2F     	jsr nexpos 		; display position.
002F41  3  F0 E2        	beq bchar3		; next line down.
002F43  3  4C 2A 2F     	jmp bchar2 		; tidy up.
002F46  3               
002F46  3               
002F46  3               ;-------------------------------------------------
002F46  3               ; Get next print column position.
002F46  3               ;-------------------------------------------------
002F46  3               
002F46  3               nexpos:
002F46  3  E6 rr        	inc dispx		; move along one position.
002F48  3  A5 rr        	lda dispx 		; get coordinate.
002F4A  3               ;	and #31
002F4A  3  60           	rts 			; return with status in zero flag.
002F4B  3               
002F4B  3               ;-------------------------------------------------
002F4B  3               ; Get next print line position.
002F4B  3               ;-------------------------------------------------
002F4B  3               
002F4B  3               nexlin:
002F4B  3  E6 rr        	inc dispy 		; newline.
002F4D  3  A5 rr        	lda dispy		; vertical position.
002F4F  3  C9 18        	cmp #24			; past screen edge?
002F51  3  B0 01        	bcs :+
002F53  3  60           	rts			; no, still okay.
002F54  3               :
002F54  3  A9 00        	lda #0			; restart at top.
002F56  3  85 rr        	sta dispy
002F58  3  60           	rts
002F59  3               
002F59  3               ;--------------------------------------------------------
002F59  3               ; Pre-print preliminaries.
002F59  3               ;--------------------------------------------------------
002F59  3               
002F59  3               preprt:
002F59  3  A9 6D        	lda #<(FONT-256)		; font pointer.
002F5B  3  8D 44 27     	sta grbase		; set up graphics base.
002F5E  3  A9 87        	lda #>(FONT-256)
002F60  3  8D 45 27     	sta grbase+1
002F63  3               prescr:
002F63  3  A5 rr        	lda charx 		; display coordinates.
002F65  3  85 rr        	sta dispx		; set up general coordinates.
002F67  3  A5 rr        	lda chary
002F69  3  85 rr        	sta dispy
002F6B  3  60           	rts
002F6C  3               
002F6C  3               ;--------------------------------------------------------------
002F6C  3               ; Get messagenr x in hl
002F6C  3               ;
002F6C  3               ; Input:
002F6C  3               ;  HL = pointer to message list
002F6C  3               ;  X  = message number.
002F6C  3               ;--------------------------------------------------------------
002F6C  3               
002F6C  3               getwrd:
002F6C  3  E0 00        	cpx #0
002F6E  3  D0 01        	bne:+ 			; first word in list?
002F70  3  60           	rts 			; yep, don't search.
002F71  3               :
002F71  3  A0 00        	ldy #0
002F73  3               getwd0:
002F73  3  B1 66        	lda (z80_hl),y
002F75  3  48           	pha
002F76  3  E6 66        	inc z80_l
002F78  3  D0 02        	bne :+
002F7A  3  E6 67        	inc z80_h
002F7C  3               :
002F7C  3  68           	pla
002F7D  3  C9 80        	cmp #128		; found end?
002F7F  3  30 F2        	bmi getwd0		; no, carry on.
002F81  3  CA           	dex			; until we have right number.
002F82  3  D0 EF        	bne getwd0
002F84  3  60           	rts
002F85  3               
002F85  3               ;-----------------------------------------------------------
002F85  3               ; Bubble sort.
002F85  3               ;-----------------------------------------------------------
002F85  3               
002F85  3               bsort:
002F85  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
002F87  3  85 rr        	sta qscnt
002F89  3               
002F89  3  A9 EE        	lda #<sprtab 		; sprite table.
002F8B  3  85 68        	sta z80_x
002F8D  3  A9 36        	lda #>sprtab
002F8F  3  85 69        	sta z80_i
002F91  3               bsort0:
002F91  3  A0 00        	ldy #0
002F93  3  B1 68        	lda (z80_ix),y 		; first sprite type.
002F95  3  C9 FF        	cmp #255 		; is it switched off?
002F97  3  F0 30        	beq swemp		; yes, may need to switch another in here.
002F99  3               
002F99  3  A0 11        	ldy #TABSIZ
002F9B  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
002F9D  3  C9 FF        	cmp #255 		; is it enabled?
002F9F  3  F0 0A        	beq bsort2 		; no, nothing to swap.
002FA1  3               
002FA1  3  A0 14        	ldy #TABSIZ+3
002FA3  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
002FA5  3  A0 03        	ldy #3
002FA7  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
002FA9  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
002FAB  3               bsort2:
002FAB  3  18           	clc
002FAC  3  A5 68        	lda z80_x
002FAE  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002FB0  3  85 68        	sta z80_x
002FB2  3  90 02        	bcc :+
002FB4  3  E6 69        	inc z80_i
002FB6  3               :
002FB6  3  C6 rr        	dec qscnt
002FB8  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
002FBA  3  60           	rts
002FBB  3               
002FBB  3               ;qscnt:	.byte 0
002FBB  3               
002FBB  3               bsort1:
002FBB  3  A0 11        	ldy #TABSIZ
002FBD  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
002FBF  3  C9 FF        	cmp #255		; is it enabled?
002FC1  3  F0 E8        	beq bsort2		; no, nothing to swap.
002FC3  3  20 D7 2F     	jsr swspr		; swap positions.
002FC6  3  4C AB 2F     	jmp bsort2
002FC9  3               swemp:
002FC9  3  A0 11        	ldy #TABSIZ
002FCB  3  B1 68        	lda (z80_ix),y		; next table entry.
002FCD  3  C9 FF        	cmp #255		; is that one on?
002FCF  3  F0 DA        	beq bsort2		; no, nothing to swap.
002FD1  3  20 D7 2F     	jsr swspr		; swap positions.
002FD4  3  4C AB 2F     	jmp bsort2
002FD7  3               
002FD7  3               ; Swap sprites.
002FD7  3               
002FD7  3               swspr:
002FD7  3  A5 68        	lda z80_x		; table address
002FD9  3  85 64        	sta z80_e		; copy to de pair.
002FDB  3  85 66        	sta z80_l		; copy to hl pair.
002FDD  3  A5 69        	lda z80_i
002FDF  3  85 67        	sta z80_h
002FE1  3  85 65        	sta z80_d
002FE3  3               
002FE3  3  18           	clc
002FE4  3  A5 66        	lda z80_l
002FE6  3  69 11        	adc #TABSIZ		; distance to second entry.
002FE8  3  85 66        	sta z80_l
002FEA  3  90 02        	bcc :+
002FEC  3  E6 67        	inc z80_h
002FEE  3               :
002FEE  3  A9 11        	lda #TABSIZ		; bytes to swap.
002FF0  3  85 63        	sta z80_b
002FF2  3  A0 00        	ldy #0
002FF4  3               swspr0:
002FF4  3  B1 66        	lda (z80_hl),y		; fetch second byte.
002FF6  3  48           	pha
002FF7  3  B1 64        	lda (z80_de),y 		; fetch first byte.
002FF9  3  91 66        	sta (z80_hl),y 		; copy to second.
002FFB  3  68           	pla
002FFC  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
002FFE  3               
002FFE  3  E6 64        	inc z80_e 		; next byte.
003000  3  D0 02        	bne :+
003002  3  E6 65        	inc z80_d
003004  3               :
003004  3  E6 66        	inc z80_l 		; next byte.
003006  3  D0 02        	bne :+
003008  3  E6 67        	inc z80_h
00300A  3               :
00300A  3  C6 63        	dec z80_b
00300C  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
00300E  3  60           	rts
00300F  3               
00300F  3               ;----------------------------------------------------
00300F  3               ; Process sprites.
00300F  3               ;----------------------------------------------------
00300F  3               
00300F  3               pspr:
00300F  3  A9 0C        	lda #NUMSPR		; sprites to process.
003011  3  85 rr        	sta sprptr
003013  3               
003013  3  A9 EE        	lda #<sprtab 		; sprite table.
003015  3  85 68        	sta z80_x
003017  3  A9 36        	lda #>sprtab
003019  3  85 69        	sta z80_i
00301B  3               pspr1:
00301B  3  A0 00        	ldy #0
00301D  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
00301F  3  C9 09        	cmp #9 			; within range of sprite types?
003021  3  B0 03        	bcs :+
003023  3  20 36 30     	jsr pspr2 		; yes, process this one.
003026  3               :
003026  3  18           	clc
003027  3  A5 68        	lda z80_x
003029  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00302B  3  85 68        	sta z80_x
00302D  3  90 02        	bcc :+
00302F  3  E6 69        	inc z80_i		; next sprite.
003031  3               :
003031  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
003033  3  D0 E6        	bne pspr1
003035  3  60           	rts
003036  3               
003036  3               ;sprptr:	.byte 0
003036  3               
003036  3               pspr2:
003036  3  A5 68        	lda z80_x 		; store original sprite pointer.
003038  3  85 rr        	sta ogptr
00303A  3  A5 69        	lda z80_i
00303C  3  85 rr        	sta ogptr+1
00303E  3  20 4A 30     	jsr pspr3		; do the routine.
003041  3               rtorg:
003041  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
003043  3  85 68        	sta z80_x
003045  3  A5 rr        	lda ogptr+1
003047  3  85 69        	sta z80_i
003049  3               rtorg0:
003049  3  60           	rts
00304A  3               
00304A  3               pspr3:
00304A  3  A9 7F        	lda #<evtyp0		; sprite type events list.
00304C  3  85 66        	sta z80_l
00304E  3  A9 30        	lda #>evtyp0
003050  3  85 67        	sta z80_h
003052  3               pspr4:
003052  3  B1 68        	lda (z80_ix),y
003054  3  0A           	asl a			; double accumulator.
003055  3  18           	clc
003056  3  65 66        	adc z80_l
003058  3  85 66        	sta z80_l
00305A  3  90 02        	bcc :+
00305C  3  E6 67        	inc z80_h
00305E  3               :
00305E  3  B1 66        	lda (z80_hl),y
003060  3  85 64        	sta z80_e 		; copy to de.
003062  3  48           	pha
003063  3               
003063  3  E6 66        	inc z80_l 		; next byte of address.
003065  3  D0 02        	bne :+
003067  3  E6 67        	inc z80_h
003069  3               :
003069  3  B1 66        	lda (z80_hl),y 		; address high.
00306B  3  85 65        	sta z80_d
00306D  3               
00306D  3  48           	pha	 		; swap address into hl.
00306E  3  A5 67        	lda z80_h
003070  3  85 65        	sta z80_d
003072  3  68           	pla
003073  3  85 67        	sta z80_h
003075  3  68           	pla
003076  3  85 66        	sta z80_l
003078  3  A5 66        	lda z80_l
00307A  3  85 64        	sta z80_e
00307C  3               
00307C  3  6C 66 00     	jmp (z80_hl) 		; go there.
00307F  3               
00307F  3               ;ogptr:	.word 0			; original sprite pointer.
00307F  3               
00307F  3               ; Address of each sprite type's routine.
00307F  3               
00307F  3  3E 38        evtyp0:	.word evnt00
003081  3  C6 3B        evtyp1:	.word evnt01
003083  3  D5 3B        evtyp2:	.word evnt02
003085  3  1F 40        evtyp3:	.word evnt03
003087  3  D8 40        evtyp4:	.word evnt04
003089  3  53 41        evtyp5:	.word evnt05
00308B  3  23 42        evtyp6:	.word evnt06
00308D  3  CA 42        evtyp7:	.word evnt07
00308F  3  CB 42        evtyp8:	.word evnt08
003091  3               
003091  3               ;--------------------------------------------------------------
003091  3               ; Display sprites.
003091  3               ;
003091  3               ; Input:
003091  3               ;  IX = sprite table
003091  3               ;--------------------------------------------------------------
003091  3               
003091  3               dspr:
003091  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
003093  3  85 rr        	sta sprcnt
003095  3               dspr0:
003095  3  A0 00        	ldy #0
003097  3  B1 68        	lda (z80_ix),y 		; get sprite type.
003099  3  C9 FF        	cmp #255 		; is it enabled?
00309B  3  D0 42        	bne dspr1 		; yes, it needs deleting.
00309D  3               dspr5:
00309D  3  A0 05        	ldy #5
00309F  3  B1 68        	lda (z80_ix),y 		; new type.
0030A1  3  C9 FF        	cmp #255		; is it enabled?
0030A3  3  D0 77        	bne dspr3 		; yes, it needs drawing.
0030A5  3               dspr2:
0030A5  3  A0 05        	ldy #5
0030A7  3  B1 68        	lda (z80_ix),y 		; copy new type.
0030A9  3  A0 00        	ldy #0
0030AB  3  91 68        	sta (z80_ix),y
0030AD  3  A0 06        	ldy #6
0030AF  3  B1 68        	lda (z80_ix),y 		; copy new image number.
0030B1  3  A0 01        	ldy #1
0030B3  3  91 68        	sta (z80_ix),y
0030B5  3  A0 07        	ldy #7
0030B7  3  B1 68        	lda (z80_ix),y 		; copy new frame.
0030B9  3  A0 02        	ldy #2
0030BB  3  91 68        	sta (z80_ix),y
0030BD  3  A0 08        	ldy #8
0030BF  3  B1 68        	lda (z80_ix),y 		; copy new y.
0030C1  3  A0 03        	ldy #3
0030C3  3  91 68        	sta (z80_ix),y
0030C5  3  A0 09        	ldy #9
0030C7  3  B1 68        	lda (z80_ix),y 		; copy new x.
0030C9  3  A0 04        	ldy #4
0030CB  3  91 68        	sta (z80_ix),y
0030CD  3               
0030CD  3  18           	clc
0030CE  3  A5 68        	lda z80_x
0030D0  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
0030D2  3  85 68        	sta z80_x
0030D4  3  A5 69        	lda z80_i
0030D6  3  69 00        	adc #0
0030D8  3  85 69        	sta z80_i 		; next sprite.
0030DA  3  C6 rr        	dec sprcnt
0030DC  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
0030DE  3  60           	rts
0030DF  3               dspr1:
0030DF  3  A0 05        	ldy #5
0030E1  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
0030E3  3  C9 FF        	cmp #255		; is this enabled?
0030E5  3  D0 06        	bne dspr4 		; yes, display both.
0030E7  3               dspr6:
0030E7  3  20 B7 31     	jsr sspria 		; show single sprite.
0030EA  3  4C A5 30     	jmp dspr2
0030ED  3               
0030ED  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
0030ED  3               
0030ED  3               dspr4:
0030ED  3  A0 04        	ldy #4
0030EF  3  B1 68        	lda (z80_ix),y		; old x.
0030F1  3  A0 09        	ldy #9
0030F3  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
0030F5  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
0030F7  3               
0030F7  3  A0 03        	ldy #3
0030F9  3  B1 68        	lda (z80_ix),y		; old y.
0030FB  3  A0 08        	ldy #8
0030FD  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0030FF  3  D0 15        	bne dspr7		; they differ, need to redraw.
003101  3               
003101  3  A0 02        	ldy #2
003103  3  B1 68        	lda (z80_ix),y 		; old frame.
003105  3  A0 07        	ldy #7
003107  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003109  3  4C 16 31     	jmp dspr7 		; they differ, need to redraw.
00310C  3               
00310C  3  A0 01        	ldy #1
00310E  3  B1 68        	lda (z80_ix),y 		; old image.
003110  3  A0 06        	ldy #6
003112  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003114  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
003116  3               dspr7:
003116  3  20 E4 31     	jsr sspric 		; delete old sprite, draw new one simultaneously.
003119  3  4C A5 30     	jmp dspr2
00311C  3               dspr3:
00311C  3  20 DE 31     	jsr ssprib 		; show single sprite.
00311F  3  4C A5 30     	jmp dspr2
003122  3               
003122  3               ;sprcnt:	.byte 0
003122  3               
003122  3               ;-----------------------------------------
003122  3               ; Get sprite address calculations.
003122  3               ; gspran = new sprite, gsprad = old sprite.
003122  3               ;
003122  3               ; Input:
003122  3               ;  IX = sprite address
003122  3               ;-----------------------------------------
003122  3               
003122  3               gspran:
003122  3  A0 08        	ldy #8
003124  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
003126  3  85 rr        	sta dispy
003128  3  A0 09        	ldy #9
00312A  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
00312C  3  85 rr        	sta dispx
00312E  3  A0 06        	ldy #6
003130  3  B1 68        	lda (z80_ix),y 		; new sprite image.
003132  3  20 10 35     	jsr gfrm		; fetch start frame for this sprite.
003135  3               
003135  3  A0 00        	ldy #0
003137  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
003139  3  A0 07        	ldy #7
00313B  3  18           	clc
00313C  3  71 68        	adc (z80_ix),y 		; new add frame number.
00313E  3  4C 5D 31     	jmp gspra0
003141  3               
003141  3               ;-----------------------------------------
003141  3               ; Calculate old sprite address
003141  3               ;
003141  3               ; Input:
003141  3               ;  IX = sprite address
003141  3               ;
003141  3               ; Output:
003141  3               ;  B  = right byte mask
003141  3               ;  C  = left byte mask
003141  3               ;  DE = spriteframe address
003141  3               ;  scraddr = screenaddress(dispx,dispy)
003141  3               ;-----------------------------------------
003141  3               
003141  3               gsprad:
003141  3  A0 03        	ldy #3
003143  3  B1 68        	lda (z80_ix),y		; y coordinate.
003145  3  85 rr        	sta dispy
003147  3  A0 04        	ldy #4
003149  3  B1 68        	lda (z80_ix),y		; x coordinate.
00314B  3  85 rr        	sta dispx
00314D  3  A0 01        	ldy #1
00314F  3  B1 68        	lda (z80_ix),y 		; sprite image.
003151  3  20 10 35     	jsr gfrm 		; fetch start frame for this sprite.
003154  3               
003154  3  A0 00        	ldy #0
003156  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
003158  3  A0 02        	ldy #2
00315A  3  18           	clc
00315B  3  71 68        	adc (z80_ix),y 		; add frame number.
00315D  3               gspra0:
00315D  3  4A           	lsr a	  		; multiply by 128.
00315E  3  85 65        	sta z80_d 		; store in d.
003160  3  8D B5 31     	sta tmp1
003163  3  A9 00        	lda #0
003165  3  6A           	ror a
003166  3  85 64        	sta z80_e 		; got low byte.
003168  3  8D B6 31     	sta tmp2
00316B  3               .if bflag
00316B  3               	lsr tmp1
00316B  3               	ror tmp2
00316B  3               	clc
00316B  3               	lda tmp2
00316B  3               	adc z80_e
00316B  3               	sta z80_e
00316B  3               	lda tmp1
00316B  3               	adc z80_d
00316B  3               	sta z80_d
00316B  3               .endif
00316B  3  18           	clc 			; address of play sprites.
00316C  3  A5 64        	lda z80_e
00316E  3  69 6C        	adc #<sprgfx
003170  3  85 64        	sta z80_e
003172  3  A5 65        	lda z80_d
003174  3  69 4D        	adc #>sprgfx
003176  3  85 65        	sta z80_d
003178  3               
003178  3  A5 rr        	lda dispx 		; y coordinate.
00317A  3  29 06        	and #6 			; position within byte boundary.
00317C  3  AA           	tax	 		; low byte of table displacement.
00317D  3               
00317D  3  0A           	asl a	  		; multiply by 32.
00317E  3  0A           	asl a  			; already a multiple
00317F  3  0A           	asl a  			; of 2, so just 4
003180  3               .if bflag
003180  3               	sta tmp1
003180  3               	asl a  			; shifts needed.
003180  3               	clc
003180  3               	adc tmp1
003180  3               .else
003180  3  0A           	asl a  			; shifts needed.
003181  3               .endif
003181  3  18           	clc 			; add to sprite address.
003182  3  65 64        	adc z80_e
003184  3  85 64        	sta z80_e
003186  3  90 02        	bcc :+
003188  3  E6 65        	inc z80_d
00318A  3               :
00318A  3  BD AD 31     	lda spmask,x		 ; pointer to mask table.
00318D  3  85 62        	sta z80_c 		; left mask.
00318F  3  BD AE 31     	lda spmask+1,x
003192  3  85 63        	sta z80_b 		; right mask.
003194  3               
003194  3               ;------------------------------------------------------------------
003194  3               ; Drop into screen address routine.
003194  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
003194  3               ;------------------------------------------------------------------
003194  3               
003194  3               scadd:
003194  3  A6 rr        	ldx dispy
003196  3  E0 C0        	cpx #192
003198  3  90 02        	bcc :+
00319A  3  A2 C0        	ldx #192
00319C  3               :
00319C  3  A5 rr        	lda dispx
00319E  3  4A           	lsr a
00319F  3  4A           	lsr a
0031A0  3  4A           	lsr a
0031A1  3  18           	clc
0031A2  3  7D 00 E0     	adc SCADTB_lb,x
0031A5  3  85 rr        	sta scraddr
0031A7  3  BD 00 E1     	lda SCADTB_hb,x
0031AA  3  85 rr        	sta scraddr+1
0031AC  3  60           	rts
0031AD  3               
0031AD  3  FF 00        spmask:	.byte $ff,$00
0031AF  3  3F C0        	.byte $3f,$c0
0031B1  3  0F F0        	.byte $0f,$f0
0031B3  3  03 FC        	.byte $03,$fc
0031B5  3               
0031B5  3  00           tmp1:	.byte 0
0031B6  3  00           tmp2:	.byte 0
0031B7  3               
0031B7  3               ;-----------------------------------------------------------------
0031B7  3               ; These are the sprite routines.
0031B7  3               ; sspria = single sprite, old (ix).
0031B7  3               ; ssprib = single sprite, new (ix+5).
0031B7  3               ; sspric = both sprites, old (ix) and new (ix+5).
0031B7  3               ;-----------------------------------------------------------------
0031B7  3               
0031B7  3               sspria:
0031B7  3  20 41 31     	jsr gsprad		; get old sprite address.
0031BA  3               sspri2:
0031BA  3  A5 64        	lda z80_e
0031BC  3  8D 2C 32     	sta dline1+1		; Set spritedata address
0031BF  3  8D 3B 32     	sta dline2+1
0031C2  3  A5 65        	lda z80_d
0031C4  3  8D 2D 32     	sta dline1+2
0031C7  3  8D 3C 32     	sta dline2+2
0031CA  3  86 rr        	stx xtmp
0031CC  3  A2 00        	ldx #0			; vertical lines.
0031CE  3               sspri0:
0031CE  3  20 28 32     	jsr dline		; draw a line.
0031D1  3  E0 10        	cpx #16			; detect block boundery
0031D3  3  D0 02        	bne :+			; skip if not
0031D5  3  E6 rr        	inc scraddr+1		; jump to next blockline
0031D7  3               :
0031D7  3  E0 20        	cpx #32			; check finished
0031D9  3               .if bflag
0031D9  3               	bne :+			; skip if not
0031D9  3               	inc scraddr+1		; jump to next blockline
0031D9  3               	inc z80_hlp+1		; jump to next blockline
0031D9  3               :
0031D9  3               	cpx #48			; check finished
0031D9  3               .endif
0031D9  3  D0 F3        	bne sspri0		; no, repeat
0031DB  3  A6 rr        	ldx xtmp
0031DD  3  60           	rts
0031DE  3               
0031DE  3               ;-----------------------------------------------------------------
0031DE  3               
0031DE  3               ssprib:
0031DE  3  20 22 31     	jsr gspran 		; get new sprite address.
0031E1  3  4C BA 31     	jmp sspri2
0031E4  3               
0031E4  3               ;-----------------------------------------------------------------
0031E4  3               
0031E4  3               sspric:
0031E4  3  20 41 31     	jsr gsprad 		; get old sprite address.
0031E7  3  A5 64        	lda z80_e
0031E9  3  8D 50 32     	sta ddline1+1		; Set spritedata address
0031EC  3  8D 5F 32     	sta ddline2+1
0031EF  3  A5 65        	lda z80_d
0031F1  3  8D 51 32     	sta ddline1+2
0031F4  3  8D 60 32     	sta ddline2+2
0031F7  3  20 C4 8D     	jsr exx  		; store addresses.
0031FA  3               
0031FA  3  20 22 31     	jsr gspran 		; get new sprite addresses.
0031FD  3  A5 64        	lda z80_e
0031FF  3  8D 2C 32     	sta dline1+1		; Set spritedata address
003202  3  8D 3B 32     	sta dline2+1
003205  3  A5 65        	lda z80_d
003207  3  8D 2D 32     	sta dline1+2
00320A  3  8D 3C 32     	sta dline2+2
00320D  3               
00320D  3  86 rr        	stx xtmp
00320F  3  A2 00        	ldx #0			; vertical lines.
003211  3               lloop:
003211  3  20 28 32     	jsr dline 		; draw a line.
003214  3  CA           	dex
003215  3  CA           	dex
003216  3  20 4C 32     	jsr ddline 		; delete a line.
003219  3  E0 10        	cpx #16			; detect block boundery
00321B  3  D0 04        	bne :+			; skip if not
00321D  3  E6 rr        	inc scraddr+1		; jump to next blockline
00321F  3  E6 73        	inc z80_hlp+1		; jump to next blockline
003221  3               :
003221  3  E0 20        	cpx #32			; check finished
003223  3               .if bflag
003223  3               	bne :+			; skip if not
003223  3               	inc scraddr+1		; jump to next blockline
003223  3               	inc z80_hlp+1		; jump to next blockline
003223  3               :
003223  3               	cpx #48			; check finished
003223  3               .endif
003223  3  D0 EC        	bne lloop		; no, repeat
003225  3  A6 rr        	ldx xtmp
003227  3  60           	rts
003228  3               
003228  3               
003228  3               ;-----------------------------------------------------------------
003228  3               
003228  3               dline:
003228  3  BC 70 32     	ldy sprline,x		; point to screenleft
00322B  3               dline1:
00322B  3  BD 75 85     	lda objdta,x		; fetch spriteleft byte
00322E  3  85 61        	sta z80_a		; save spriteright byte
003230  3  A5 61        	lda z80_a
003232  3  25 62        	and z80_c		; mask left
003234  3  51 rr        	eor (scraddr),y		; merge with screenleft
003236  3  91 rr        	sta (scraddr),y		; write screenleft
003238  3               sline:
003238  3  E8           	inx			; next spritebyte
003239  3  C8           	iny			; point to screenmiddle
00323A  3               dline2:
00323A  3  BD 75 85     	lda objdta,x		; fetch spritemiddle byte
00323D  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
00323F  3  91 rr        	sta (scraddr),y		; write screenmiddle
003241  3               sline2:
003241  3  C8           	iny			; point to screenright
003242  3  A5 61        	lda z80_a		; fetch spriteright byte
003244  3  25 63        	and z80_b		; mask right
003246  3  51 rr        	eor (scraddr),y		; merge with screenright
003248  3  91 rr        	sta (scraddr),y		; write screenright
00324A  3               sline3:
00324A  3  E8           	inx			; next spritebyte
00324B  3               
00324B  3  60           	rts
00324C  3               
00324C  3               ;-----------------------------------------------------------------
00324C  3               
00324C  3               ddline:
00324C  3  BC 70 32     	ldy sprline,x		; point to screenleft
00324F  3               ddline1:
00324F  3  BD 75 85     	lda objdta,x		; fetch spriteleft byte
003252  3  85 61        	sta z80_a		; save spriteright byte
003254  3  A5 61        	lda z80_a
003256  3  25 6E        	and z80_cp		; mask left
003258  3  51 72        	eor (z80_hlp),y		; merge with screenleft
00325A  3  91 72        	sta (z80_hlp),y		; write screenleft
00325C  3               dsline:
00325C  3  E8           	inx			; next spritebyte
00325D  3  C8           	iny			; point to screenmiddle
00325E  3               ddline2:
00325E  3  BD 75 85     	lda objdta,x		; fetch spritemiddle byte
003261  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
003263  3  91 72        	sta (z80_hlp),y		; write screenmiddle
003265  3               dsline2:
003265  3  C8           	iny			; point to screenright
003266  3  A5 61        	lda z80_a		; fetch spriteright byte
003268  3  25 6F        	and z80_bp		; mask right
00326A  3  51 72        	eor (z80_hlp),y		; merge with screenright
00326C  3  91 72        	sta (z80_hlp),y		; write screenright
00326E  3               dsline3:
00326E  3  E8           	inx			; next spritebyte
00326F  3               
00326F  3  60           	rts
003270  3               
003270  3               sprline:
003270  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
003274  3  40 41 60 61  
003278  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00327C  3  C0 C1 E0 E1  
003280  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
003284  3  40 41 60 61  
003288  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00328C  3  C0 C1 E0 E1  
003290  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
003294  3  40 41 60 61  
003298  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00329C  3  C0 C1 E0 E1  
0032A0  3               
0032A0  3               ;----------------------------------------------------------------------
0032A0  3               ; Line drawn, now work out next target address.
0032A0  3               ;----------------------------------------------------------------------
0032A0  3               
0032A0  3               nline:
0032A0  3  18           	clc
0032A1  3  A5 rr        	lda scraddr 		; get low byte of address.
0032A3  3  69 20        	adc #$20
0032A5  3  85 rr        	sta scraddr 		; new low byte of address.
0032A7  3  90 02        	bcc :+
0032A9  3  E6 rr        	inc scraddr+1 		; new high byte of address.
0032AB  3               :
0032AB  3  60           	rts
0032AC  3               
0032AC  3               ;-------------------------------------------------------------
0032AC  3               ; Line drawn, now work out next target address.
0032AC  3               ;
0032AC  3               ; Input:
0032AC  3               ;  BP  = right mask
0032AC  3               ;  CP  = left mask
0032AC  3               ;  DEP = spriteaddress
0032AC  3               ;  z80_hlp = screen address
0032AC  3               ;-------------------------------------------------------------
0032AC  3               
0032AC  3               
0032AC  3               ;-----------------------------------------------------------
0032AC  3               ; Animates a sprite.
0032AC  3               ;
0032AC  3               ; Input:
0032AC  3               ;  IX = sprite address
0032AC  3               ;  HL = last sprite address
0032AC  3               ;-----------------------------------------------------------
0032AC  3               
0032AC  3               animsp:
0032AC  3  25 rr        	and frmno
0032AE  3  F0 01        	beq :+
0032B0  3  60           	rts
0032B1  3               :
0032B1  3  A0 06        	ldy #6
0032B3  3  B1 68        	lda (z80_ix),y		; sprite image
0032B5  3  20 10 35     	jsr gfrm		; get frame data.
0032B8  3               
0032B8  3  E6 66        	inc z80_l		; point to frames.
0032BA  3  D0 02        	bne :+
0032BC  3  E6 67        	inc z80_h
0032BE  3               :
0032BE  3  A0 07        	ldy #7
0032C0  3  B1 68        	lda (z80_ix),y		; sprite frame.
0032C2  3  18           	clc
0032C3  3  69 01        	adc #1			; next one along.
0032C5  3  A0 00        	ldy #0
0032C7  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
0032C9  3  90 02        	bcc anims0		; no, not yet.
0032CB  3  A9 00        	lda #0			; start at first frame.
0032CD  3               anims0:
0032CD  3  A0 07        	ldy #7
0032CF  3  91 68        	sta (z80_ix),y		; new frame.
0032D1  3  60           	rts
0032D2  3               
0032D2  3               ;--------------------------------------------------------------
0032D2  3               ; Animate back
0032D2  3               ;
0032D2  3               ; Input:
0032D2  3               ;  IX = sprite address
0032D2  3               ;  HL = last sprite address
0032D2  3               ;--------------------------------------------------------------
0032D2  3               
0032D2  3               animbk:
0032D2  3  25 rr        	and frmno
0032D4  3  F0 01        	beq :+
0032D6  3  60           	rts
0032D7  3               :
0032D7  3  A0 06        	ldy #6
0032D9  3  B1 68        	lda (z80_ix),y		; sprite image.
0032DB  3  20 10 35     	jsr gfrm		; get frame data.
0032DE  3               
0032DE  3  E6 66        	inc z80_l 		; point to frames.
0032E0  3  D0 02        	bne :+
0032E2  3  E6 67        	inc z80_h
0032E4  3               :
0032E4  3  A0 07        	ldy #7
0032E6  3  B1 68        	lda (z80_ix),y 		; sprite frame.
0032E8  3  F0 03        	beq :+
0032EA  3  4C F1 32     	jmp rtanb0 		; yes, start at end.
0032ED  3               :
0032ED  3  A0 00        	ldy #0
0032EF  3  B1 66        	lda (z80_hl),y 		; last sprite.
0032F1  3               rtanb0:
0032F1  3  38           	sec
0032F2  3  E9 01        	sbc #1			; next one along.
0032F4  3  4C CD 32     	jmp anims0		; set new frame.
0032F7  3               
0032F7  3               ;--------------------------------------------------------------
0032F7  3               ; Check for collision with other sprite, strict enforcement.
0032F7  3               ;
0032F7  3               ; Input:
0032F7  3               ;  b		= sprite to test for
0032F7  3               ;  ix		= current sprite pointer
0032F7  3               ;
0032F7  3               ; global:	b
0032F7  3               ; local:	x,y,hl,de,skptr
0032F7  3               ; calls:	-
0032F7  3               ;--------------------------------------------------------------
0032F7  3               
0032F7  3               sktyp:
0032F7  3  A9 EE        	lda #<sprtab				; sprite table.
0032F9  3  85 66        	sta z80_l
0032FB  3  A9 36        	lda #>sprtab
0032FD  3  85 67        	sta z80_h
0032FF  3               numsp2:
0032FF  3  A9 0C        	lda #NUMSPR				; number of sprites.
003301  3  85 rr        	sta sktptr
003303  3               sktyp0:
003303  3  A5 66        	lda z80_l 				; store pointer to sprite.
003305  3  85 rr        	sta skptr
003307  3  A5 67        	lda z80_h
003309  3  85 rr        	sta skptr+1
00330B  3               
00330B  3  A0 00        	ldy #0
00330D  3  B1 66        	lda (z80_hl),y 				; get sprite type.
00330F  3  C5 63        	cmp z80_b				; is it the type we seek?
003311  3  F0 1D        	beq coltyp				; yes, we can use this one.
003313  3               sktyp1:
003313  3  18           	clc
003314  3  A5 rr        	lda skptr				; retrieve sprite pointer.
003316  3  69 11        	adc #TABSIZ				; size of each entry.
003318  3  85 66        	sta z80_l
00331A  3  A5 rr        	lda skptr+1
00331C  3  69 00        	adc #0
00331E  3  85 67        	sta z80_h
003320  3  C6 rr        	dec sktptr					; one less iteration.
003322  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
003324  3  A9 00        	lda #0					; default to ROM address - no sprite.
003326  3  85 66        	sta z80_l
003328  3  85 67        	sta z80_h
00332A  3  85 rr        	sta skptr				; store pointer to sprite.
00332C  3  85 rr        	sta skptr+1
00332E  3               
00332E  3  18           	clc					; don't return with zero flag set.
00332F  3  60           	rts 					; didn't find one.
003330  3               
003330  3               ;skptr:	.word 0					; search pointer.
003330  3               ;sktptr:	.byte 0
003330  3               
003330  3               coltyp:
003330  3  A0 00        	ldy #0
003332  3  B1 68        	lda (z80_ix),y				; current sprite type.
003334  3  C5 63        	cmp z80_b				; seeking sprite of same type?
003336  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
003338  3               colty0:
003338  3  A0 09        	ldy #9					; distance to x position in table.
00333A  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
00333C  3  85 64        	sta z80_e
00333E  3  88           	dey
00333F  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
003341  3  85 65        	sta z80_d
003343  3               
003343  3               ; Drop into collision detection.
003343  3               
003343  3               colc16:
003343  3  A0 09        	ldy #9
003345  3  B1 68        	lda (z80_ix),y			 	; x coord.
003347  3  38           	sec					; subtract x.
003348  3  E5 64        	sbc z80_e
00334A  3  B0 05        	bcs  colc1a 				; result is positive.
00334C  3  49 FF        	eor #$ff				; make negative positive.
00334E  3  18           	clc
00334F  3  69 01        	adc #1
003351  3               colc1a:
003351  3  C9 10        	cmp #16 				; within x range?
003353  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
003355  3  85 62        	sta z80_c				; store difference.
003357  3               
003357  3  A0 08        	ldy #8
003359  3  B1 68        	lda (z80_ix),y				; y coord.
00335B  3  38           	sec
00335C  3  E5 65        	sbc z80_d				; subtract y.
00335E  3  B0 05        	bcs colc1b				; result is positive.
003360  3  49 FF        	eor #$ff				; make negative positive.
003362  3  18           	clc
003363  3  69 01        	adc #1
003365  3               colc1b:
003365  3  C9 10        	cmp #16					; within y range?
003367  3  B0 AA        	bcs sktyp1 				; no - they've missed.
003369  3  18           	clc					; add x difference.
00336A  3  65 62        	adc z80_c
00336C  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
00336E  3  B0 02        	bcs :+
003370  3  38           	sec
003371  3  60           	rts 					; carry set if there's a collision.
003372  3               :
003372  3  4C 13 33     	jmp sktyp1				; try next sprite in table.
003375  3               colty1:
003375  3  A5 68        	lda z80_x  				; compare the two.
003377  3  C5 66        	cmp z80_l
003379  3  D0 09        	bne end_col
00337B  3  A5 69        	lda z80_i
00337D  3  C5 67        	cmp z80_h
00337F  3  D0 03        	bne end_col
003381  3  4C 13 33     	jmp sktyp1 				; addresses are identical.
003384  3               end_col:
003384  3  4C 38 33     	jmp colty0
003387  3               
003387  3               ;-----------------------------------------------------------
003387  3               ; Display number, left aligned
003387  3               ;
003387  3               ; Input:
003387  3               ;  a		= number
003387  3               ;
003387  3               ; global:	-
003387  3               ; local:	a,y,bc,hl,displ0
003387  3               ; calls:	num2ch,dmsg3
003387  3               ;-----------------------------------------------------------
003387  3               
003387  3               disply:
003387  3  85 61        	sta z80_a
003389  3  A9 AF        	lda #<displ0				; display workspace.
00338B  3  85 62        	sta z80_c
00338D  3  A9 33        	lda #>displ0
00338F  3  85 63        	sta z80_b
003391  3  A5 61        	lda z80_a
003393  3  20 D3 24     	jsr num2ch				; convert accumulator to string.
003396  3               displ1:
003396  3  C6 62        	dec z80_c				; back one character.
003398  3  D0 02        	bne :+
00339A  3  C6 63        	dec z80_b
00339C  3               :
00339C  3  A0 00        	ldy #0
00339E  3  B1 62        	lda (z80_bc),y				; fetch digit.
0033A0  3  09 80        	ora #128				; insert end marker.
0033A2  3  91 62        	sta (z80_bc),y				; new value.
0033A4  3               
0033A4  3  A9 AF        	lda #<displ0				; display space.
0033A6  3  85 66        	sta z80_l
0033A8  3  A9 33        	lda #>displ0
0033AA  3  85 67        	sta z80_h
0033AC  3  4C 5D 2E     	jmp dmsg3				; display the string.
0033AF  3               
0033AF  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
0033B3  3               
0033B3  3               ;----------------------------------------------------------------
0033B3  3               ; Initialise screen.
0033B3  3               ;
0033B3  3               ; global:	roomtb,scno
0033B3  3               ; local:	-
0033B3  3               ; calls:	tstcs
0033B3  3               ;----------------------------------------------------------------
0033B3  3               
0033B3  3               initsc:
0033B3  3  AD CB 37     	lda roomtb 			; whereabouts in the map are we?
0033B6  3  20 C0 33     	jsr tstsc 			; find displacement.
0033B9  3  C9 FF        	cmp #255 			; is it valid?
0033BB  3  F0 02        	beq init_end 			; no, it's rubbish.
0033BD  3  85 rr        	sta scno			; store new room number.
0033BF  3               init_end:
0033BF  3  60           	rts
0033C0  3               
0033C0  3               ;----------------------------------------------------------------
0033C0  3               ; Test screen.
0033C0  3               ;
0033C0  3               ; global:	-
0033C0  3               ; local:	x
0033C0  3               ; calls:	-
0033C0  3               ;----------------------------------------------------------------
0033C0  3               
0033C0  3               tstsc:
0033C0  3  85 rr        	sta tmproom
0033C2  3  18           	clc
0033C3  3  69 0A        	adc #MAPWID 			; add width in case we"re negative.
0033C5  3  AA           	tax 				; add displacement to map data.
0033C6  3  BD F7 37     	lda mapdat-MAPWID,x 		; find room number there.
0033C9  3  60           	rts
0033CA  3               
0033CA  3               ;tmproom:	.byte 0
0033CA  3               
0033CA  3               ;--------------------------
0033CA  3               ; Screen left.
0033CA  3               ;--------------------------
0033CA  3               
0033CA  3               scrl:
0033CA  3  AD CB 37     	lda roomtb 			; present room table pointer.
0033CD  3  38           	sec
0033CE  3  E9 01        	sbc #1				; room left.
0033D0  3               scrl0:
0033D0  3  20 C0 33     	jsr tstsc			; test screen.
0033D3  3  C9 FF        	cmp #255			; is there a screen this way?
0033D5  3  D0 01        	bne :+
0033D7  3  60           	rts				; no, return to loop.
0033D8  3               :
0033D8  3  A5 rr        	lda tmproom			; restore room displacement.
0033DA  3  8D CB 37     	sta roomtb			; new room table position.
0033DD  3               scrl1:
0033DD  3  20 B3 33     	jsr initsc 			; set new screen.
0033E0  3  A9 02        	lda #2
0033E2  3  85 rr        	sta restfl 			; set it.
0033E4  3  60           	rts
0033E5  3               scrr:
0033E5  3  AD CB 37     	lda roomtb 			; room table pointer.
0033E8  3  18           	clc
0033E9  3  69 01        	adc #1				; room right.
0033EB  3  4C D0 33     	jmp scrl0
0033EE  3               scru:
0033EE  3  AD CB 37     	lda roomtb 			; room table pointer.
0033F1  3  38           	sec
0033F2  3  E9 0A        	sbc #MAPWID 			; room up.
0033F4  3  4C D0 33     	jmp scrl0
0033F7  3               scrd:
0033F7  3  AD CB 37     	lda roomtb 			; room table pointer.
0033FA  3  18           	clc
0033FB  3  69 0A        	adc #MAPWID 			; room down.
0033FD  3  4C D0 33     	jmp scrl0
003400  3               
003400  3               ;-----------------------------------------
003400  3               ; Jump to new screen.
003400  3               ;-----------------------------------------
003400  3               
003400  3               nwscr:
003400  3  A2 00        	ldx #0				; start of map data.
003402  3               nwscr0:
003402  3  DD 01 38     	cmp mapdat,x
003405  3  F0 06        	beq nwscr1			; have we found a match for screen?
003407  3  E8           	inx 				; next room.
003408  3  E0 50        	cpx #80				; zero room count, 80 to search.
00340A  3  D0 F6        	bne nwscr0			; keep looking.
00340C  3  60           	rts
00340D  3               nwscr1:
00340D  3  8E CB 37     	stx roomtb			; set the map position.
003410  3  4C DD 33     	jmp scrl1			; draw new room.
003413  3               
003413  3               
003413  3               ;----------------------------------------------------------
003413  3               ; Gravity processing.
003413  3               ;----------------------------------------------------------
003413  3               
003413  3               grav:
003413  3  A0 0D        	ldy #13
003415  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003417  3  85 66        	sta z80_l
003419  3  A0 0E        	ldy #14
00341B  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00341D  3  85 67        	sta z80_h
00341F  3  05 66        	ora z80_l			; merge in low byte.
003421  3  D0 01        	bne :+
003423  3  60           	rts				; if neither is set, we're not in the air.
003424  3               :
003424  3  A0 00        	ldy #0
003426  3  B1 66        	lda (z80_hl),y			; pixels to move.
003428  3  85 61        	sta z80_a
00342A  3  C9 63        	cmp #99				; reached the end?
00342C  3  D0 0C        	bne grav0			; no, continue.
00342E  3               grav2:
00342E  3  C6 66        	dec z80_l			; go back to previous value.
003430  3  C9 FF        	cmp #$ff
003432  3  D0 02        	bne :+
003434  3  C6 67        	dec z80_h
003436  3               :
003436  3  B1 66        	lda (z80_hl),y			; fetch that from table.
003438  3  85 61        	sta z80_a
00343A  3               grav0:
00343A  3  E6 66        	inc z80_l			; point to next table entry.
00343C  3  D0 02        	bne :+
00343E  3  E6 67        	inc z80_h
003440  3               :
003440  3  A5 66        	lda z80_l
003442  3  A0 0D        	ldy #13
003444  3  91 68        	sta (z80_ix),y			; store new pointer low.
003446  3  A5 67        	lda z80_h
003448  3  A0 0E        	ldy #14
00344A  3  91 68        	sta (z80_ix),y			; store new pointer high.
00344C  3               grav1:
00344C  3  A5 61        	lda z80_a
00344E  3  D0 01        	bne :+				; any movement required?
003450  3  60           	rts				; no, not this time.
003451  3               :
003451  3  A5 61        	lda z80_a
003453  3  C9 80        	cmp #128			; is it up or down?
003455  3  B0 15        	bcs gravu			; it's up.
003457  3               gravd:
003457  3  85 63        	sta z80_b			; set pixels to move.
003459  3               gravd0:
003459  3  20 2A 2B     	jsr cangd			; can we go down?
00345C  3  D0 28        	bne gravst			; can't move down, so stop.
00345E  3  A0 08        	ldy #8
003460  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
003462  3  18           	clc
003463  3  69 01        	adc #1
003465  3  91 68        	sta (z80_ix),y
003467  3  C6 63        	dec z80_b
003469  3  D0 EE        	bne gravd0
00346B  3  60           	rts
00346C  3               gravu:
00346C  3  49 FF        	eor #$ff			; flip the sign so it's positive.
00346E  3  18           	clc
00346F  3  69 01        	adc #1
003471  3  85 63        	sta z80_b			; set pixels to move.
003473  3               gravu0:
003473  3  20 F5 2A     	jsr cangu			; can we go up?
003476  3  D0 6E        	bne ifalls			; can't move up, go down next.
003478  3  A0 08        	ldy #8
00347A  3  B1 68        	lda (z80_ix),y
00347C  3  38           	sec
00347D  3  E9 01        	sbc #1
00347F  3  91 68        	sta (z80_ix),y			; adjust new x coord.
003481  3  C6 63        	dec z80_b
003483  3  D0 EE        	bne gravu0
003485  3  60           	rts
003486  3               gravst:
003486  3  A0 0D        	ldy #13
003488  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00348A  3  85 66        	sta z80_l
00348C  3  A0 0E        	ldy #14
00348E  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003490  3  85 67        	sta z80_h
003492  3               
003492  3  A9 00        	lda #0				; null value in pointer.
003494  3  A0 0D        	ldy #13
003496  3  91 68        	sta (z80_ix),y			; store new pointer low.
003498  3  C8           	iny
003499  3  91 68        	sta (z80_ix),y			; store new pointer high.
00349B  3               
00349B  3  A0 00        	ldy #0
00349D  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
00349F  3  C9 63        	cmp #99				; is it the end marker?
0034A1  3               evftf:
0034A1  3  F0 01        	beq :+				; yes, fallen too far.
0034A3  3  60           	rts
0034A4  3               :
0034A4  3  4C B4 45     	jmp evnt15			; EVENT FELLTOOFAR
0034A7  3               
0034A7  3               ;------------------------------------------------
0034A7  3               ; Initiate fall check.
0034A7  3               ;------------------------------------------------
0034A7  3               
0034A7  3               ifall:
0034A7  3  A0 0D        	ldy #13
0034A9  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0034AB  3  85 66        	sta z80_l
0034AD  3  A0 0E        	ldy #14
0034AF  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0034B1  3  85 67        	sta z80_h			; high byte in accumulator.
0034B3  3  05 66        	ora z80_l			; merge in low byte.
0034B5  3  F0 01        	beq :+
0034B7  3  60           	rts				; if either is set, we're already in the air.
0034B8  3               :
0034B8  3  A0 09        	ldy #9
0034BA  3  B1 68        	lda (z80_ix),y			; y coordinate.
0034BC  3  85 rr        	sta dispx
0034BE  3  A0 08        	ldy #8
0034C0  3  B1 68        	lda (z80_ix),y			; look x coordinate.
0034C2  3  18           	clc
0034C3  3               numsp7:
0034C3  3  69 10        	adc #SPR_HGT			; add 16 pixels.
0034C5  3  85 rr        	sta dispy			; set up test coordinates.
0034C7  3  20 B1 2D     	jsr tstbl			; get map address.
0034CA  3  20 CC 2C     	jsr plchk			; block, platform check.
0034CD  3  F0 01        	beq :+
0034CF  3  60           	rts				; it's solid, don't fall.
0034D0  3               :
0034D0  3  E6 rr        	inc bufaddr			; look right one cell.
0034D2  3  20 CC 2C     	jsr plchk			; block, platform check.
0034D5  3  F0 01        	beq :+
0034D7  3  60           	rts				; it's solid, don't fall.
0034D8  3               :
0034D8  3  A5 rr        	lda dispx			; y coordinate.
0034DA  3  29 07        	and #7				; position straddling block cells.
0034DC  3  F0 08        	beq ifalls			; no more checks needed.
0034DE  3  E6 rr        	inc bufaddr			; look to third cell.
0034E0  3  20 CC 2C     	jsr plchk			; block, platform check.
0034E3  3  F0 01        	beq :+
0034E5  3  60           	rts				; it's solid, don't fall.
0034E6  3               :
0034E6  3               ifalls:
0034E6  3  A9 6D        	lda #<jtab			; jump table start.
0034E8  3  85 66        	sta z80_l
0034EA  3  A9 8B        	lda #>jtab
0034EC  3  85 67        	sta z80_h
0034EE  3               ifal0:
0034EE  3  E6 66        	inc z80_l			; point to next value.
0034F0  3  D0 02        	bne :+
0034F2  3  E6 67        	inc z80_h
0034F4  3               :
0034F4  3  A0 00        	ldy #0
0034F6  3  B1 66        	lda (z80_hl),y			; fetch value.
0034F8  3  F0 F4        	beq ifal0			; no, get next value.
0034FA  3  C9 63        	cmp #99				; reached end of table?
0034FC  3  D0 01        	bne :+
0034FE  3  60           	rts				; yes, don't fall.
0034FF  3               :
0034FF  3  C9 80        	cmp #128			; is it going up?
003501  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
003503  3               
003503  3  A0 0D        	ldy #13
003505  3  A5 66        	lda z80_l
003507  3  91 68        	sta (z80_ix),y 			; set jump low.
003509  3  A0 0E        	ldy #14
00350B  3  A5 67        	lda z80_h
00350D  3  91 68        	sta (z80_ix),y 			; set jump high.
00350F  3  60           	rts
003510  3               
003510  3               
003510  3               ;----------------------------------------------------
003510  3               ; Get frame data for a particular sprite.
003510  3               ; Input:
003510  3               ;  a		= framenumer
003510  3               ; Output:
003510  3               ;  hl		= frame address
003510  3               ;
003510  3               ; global:	hl,frmptr
003510  3               ; local:	-
003510  3               ; calls:	-
003510  3               ;----------------------------------------------------
003510  3               
003510  3               gfrm:
003510  3  0A           	asl a	 		 	; multiple of 2.
003511  3  18           	clc
003512  3  6D 1A 20     	adc frmptr 			; frames used by game.
003515  3  85 66        	sta z80_l
003517  3  AD 1B 20     	lda frmptr+1
00351A  3  69 00        	adc #0
00351C  3  85 67        	sta z80_h 			; point to frame start.
00351E  3  60           	rts
00351F  3               
00351F  3               ;----------------------------------------------------
00351F  3               ; Find sprite list for current room.
00351F  3               ;
00351F  3               ; global:	hl
00351F  3               ; local:	x,y
00351F  3               ; calls:	-
00351F  3               ;----------------------------------------------------
00351F  3               
00351F  3               sprlst:
00351F  3  A9 99        	lda #<nmedat 			; list of enemy sprites.
003521  3  85 66        	sta z80_l
003523  3  A9 83        	lda #>nmedat
003525  3  85 67        	sta z80_h
003527  3  A6 rr        	ldx scno 			; screen number.
003529  3  D0 01        	bne sprls2 			; is it the first screen?
00352B  3  60           	rts 				; yes, don't need to search data.
00352C  3               sprls2:
00352C  3  A0 00        	ldy #0
00352E  3               sprls1:
00352E  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
003530  3  C9 FF        	cmp #255			; is it an end marker?
003532  3  F0 0E        	beq sprls0 			; yes, end of this room.
003534  3               
003534  3  18           	clc 				; point to next sprite in list.
003535  3  A5 66        	lda z80_l
003537  3  69 04        	adc #NMESIZ
003539  3  85 66        	sta z80_l
00353B  3  90 02        	bcc :+
00353D  3  E6 67        	inc z80_h
00353F  3               :
00353F  3  4C 2E 35     	jmp sprls1 			; continue until end of room.
003542  3               sprls0:
003542  3  E6 66        	inc z80_l 			; point to start of next screen.s
003544  3  D0 02        	bne :+
003546  3  E6 67        	inc z80_h
003548  3               :
003548  3  CA           	dex
003549  3  D0 E3        	bne sprls1 			; continue until room found.
00354B  3  60           	rts
00354C  3               
00354C  3               
00354C  3               ;----------------------------------------------------
00354C  3               ; Clear all but a single player sprite.
00354C  3               ;
00354C  3               ; global:	-
00354C  3               ; local:	x,y,ix
00354C  3               ; calls:	-
00354C  3               ;----------------------------------------------------
00354C  3               
00354C  3               nspr:
00354C  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00354E  3  85 rr        	sta sprcnt
003550  3  A9 EE        	lda #<sprtab 			; sprite table.
003552  3  85 68        	sta z80_x
003554  3  A9 36        	lda #>sprtab
003556  3  85 69        	sta z80_i
003558  3               nspr0:
003558  3  A0 00        	ldy #0 				; fetch sprite type.
00355A  3  B1 68        	lda (z80_ix),y 			; is it a player?
00355C  3  F0 1A        	beq nspr1 			; yes, keep this one.
00355E  3               
00355E  3  A9 FF        	lda #255
003560  3  A0 00        	ldy #0 				; fetch sprite type.
003562  3  91 68        	sta (z80_ix),y 			; delete sprite.
003564  3  A0 05        	ldy #5
003566  3  91 68        	sta (z80_ix),y 			; remove next type.
003568  3               
003568  3  18           	clc	 			; next sprite.
003569  3  A5 68        	lda z80_x
00356B  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00356D  3  85 68        	sta z80_x
00356F  3  90 02        	bcc :+
003571  3  E6 69        	inc z80_i
003573  3               :
003573  3  C6 rr        	dec sprcnt	 			; one less space in the table.
003575  3  D0 E1        	bne nspr0
003577  3  60           	rts
003578  3               nspr1:
003578  3  A9 FF        	lda #255
00357A  3  A0 00        	ldy #0
00357C  3  91 68        	sta (z80_ix),y 			; delete sprite.
00357E  3               
00357E  3  18           	clc	 			; point to next sprite.
00357F  3  A5 68        	lda z80_x
003581  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003583  3  85 68        	sta z80_x
003585  3  90 02        	bcc :+
003587  3  E6 69        	inc z80_i
003589  3               :
003589  3  C6 rr        	dec sprcnt	 			; one less to do.
00358B  3  D0 01        	bne nspr2
00358D  3  60           	rts
00358E  3               nspr2:
00358E  3  A9 FF        	lda #255
003590  3  A0 00        	ldy #0
003592  3  91 68        	sta (z80_ix),y 			; delete sprite.
003594  3  A0 05        	ldy #5
003596  3  91 68        	sta (z80_ix),y 			; remove next type.
003598  3               
003598  3  18           	clc	 			; next sprite.
003599  3  A5 68        	lda z80_x
00359B  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00359D  3  85 68        	sta z80_x
00359F  3  90 02        	bcc :+
0035A1  3  E6 69        	inc z80_i
0035A3  3               :
0035A3  3  C6 rr        	dec sprcnt	 			; one less space in table.
0035A5  3  D0 E7        	bne nspr2
0035A7  3  60           	rts
0035A8  3               
0035A8  3               ;----------------------------------------------------------
0035A8  3               ; Two initialisation routines.
0035A8  3               ; Initialise sprites - copy everything from list to table.
0035A8  3               ;
0035A8  3               ; global:	-
0035A8  3               ; local:	x,y,ix
0035A8  3               ; calls:	cpsp
0035A8  3               ;----------------------------------------------------------
0035A8  3               
0035A8  3               ispr:
0035A8  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0035AA  3  85 rr        	sta sprcnt
0035AC  3  A9 EE        	lda #<sprtab			; sprite table.
0035AE  3  85 68        	sta z80_x
0035B0  3  A9 36        	lda #>sprtab
0035B2  3  85 69        	sta z80_i
0035B4  3               ispr2:
0035B4  3  A0 00        	ldy #0
0035B6  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0035B8  3  C9 FF        	cmp #255 			; is it an end marker?
0035BA  3  D0 01        	bne :+
0035BC  3  60           	rts 				; yes, no more to do.
0035BD  3               :
0035BD  3               ispr1:
0035BD  3  A0 00        	ldy #0
0035BF  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
0035C1  3  C9 FF        	cmp #255 			; is it enabled yet?
0035C3  3  D0 08        	bne ispr4			; yes, try another slot.
0035C5  3               
0035C5  3  A0 05        	ldy #5
0035C7  3  B1 68        	lda (z80_ix),y		 	; next type.
0035C9  3  C9 FF        	cmp #255 			; is it enabled yet?
0035CB  3  F0 10        	beq ispr3 			; no, process this one.
0035CD  3               ispr4:
0035CD  3  18           	clc 				; next sprite.
0035CE  3  A5 68        	lda z80_x
0035D0  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0035D2  3  85 68        	sta z80_x
0035D4  3  90 02        	bcc :+
0035D6  3  E6 69        	inc z80_i
0035D8  3               :
0035D8  3  C6 rr        	dec sprcnt
0035DA  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0035DC  3  60           	rts  				; no more room in table.
0035DD  3               ispr3:
0035DD  3  20 30 36     	jsr cpsp			; initialise a sprite.
0035E0  3  C6 rr        	dec sprcnt			; one less space in the table.
0035E2  3  D0 D0        	bne ispr2
0035E4  3  60           	rts
0035E5  3               
0035E5  3               
0035E5  3               ;-----------------------------------------------------------------------
0035E5  3               ; Initialise sprites - but not player, we're keeping the old one.
0035E5  3               ;
0035E5  3               ; global:	-
0035E5  3               ; local:	x,y,ix
0035E5  3               ; calls:	cpsp
0035E5  3               ;-----------------------------------------------------------------------
0035E5  3               
0035E5  3               kspr:
0035E5  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0035E7  3  A9 EE        	lda #<sprtab 			; sprite table.
0035E9  3  85 68        	sta z80_x
0035EB  3  A9 36        	lda #>sprtab
0035ED  3  85 69        	sta z80_i
0035EF  3               kspr2:
0035EF  3  A0 00        	ldy #0
0035F1  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0035F3  3  C9 FF        	cmp #255 			; is it an end marker?
0035F5  3  D0 01        	bne :+
0035F7  3  60           	rts 				; yes, no more to do.
0035F8  3               :
0035F8  3  C9 00        	cmp #0
0035FA  3  D0 0E        	bne kspr1 			; no, add to table as normal.
0035FC  3               
0035FC  3  18           	clc 				; next sprite.
0035FD  3  A5 66        	lda z80_l
0035FF  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
003601  3  85 66        	sta z80_l
003603  3  90 02        	bcc :+
003605  3  E6 67        	inc z80_h
003607  3               :
003607  3  4C EF 35     	jmp kspr2
00360A  3               kspr1:
00360A  3  A0 00        	ldy #0 				; fetch sprite type.
00360C  3  B1 68        	lda (z80_ix),y
00360E  3  C9 FF        	cmp #255 			; is it enabled yet?
003610  3  D0 08        	bne kspr4 			; yes, try another slot.
003612  3               
003612  3  A0 05        	ldy #5 				; next type.
003614  3  B1 68        	lda (z80_ix),y
003616  3  C9 FF        	cmp #255 			; is it enabled yet?
003618  3  F0 0F        	beq kspr3 			; no, process this one.
00361A  3               kspr4:
00361A  3  18           	clc 				; next sprite.
00361B  3  A5 68        	lda z80_x
00361D  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00361F  3  85 68        	sta z80_x
003621  3  90 02        	bcc :+
003623  3  E6 69        	inc z80_i
003625  3               :
003625  3  CA           	dex	 			; repeat for remaining sprites.
003626  3  D0 E2        	bne kspr1
003628  3  60           	rts  				; no more room in table.
003629  3               kspr3:
003629  3  20 30 36     	jsr cpsp 			; copy sprite to table.
00362C  3  CA           	dex	 			; one less space in the table.
00362D  3  D0 C0        	bne kspr2
00362F  3  60           	rts
003630  3               
003630  3               ;----------------------------------------------
003630  3               ; Copy sprite from list to table.
003630  3               ;
003630  3               ; global:	hl,ix
003630  3               ; local:	y
003630  3               ; calls:	evnt09
003630  3               ;----------------------------------------------
003630  3               
003630  3               cpsp:
003630  3  A0 00        	ldy #0				; fetch byte from table.
003632  3  B1 66        	lda (z80_hl),y
003634  3  91 68        	sta (z80_ix),y			; set up type.
003636  3  A0 05        	ldy #PAM1ST
003638  3  91 68        	sta (z80_ix),y 			; set up type.
00363A  3               
00363A  3  E6 66        	inc z80_l 			; move to next byte.
00363C  3  D0 02        	bne :+
00363E  3  E6 67        	inc z80_h
003640  3               :
003640  3  A0 00        	ldy #0 				; fetch byte from table.
003642  3  B1 66        	lda (z80_hl),y
003644  3  A0 06        	ldy #6
003646  3  91 68        	sta (z80_ix),y			; set up image.
003648  3               
003648  3  E6 66        	inc z80_l 			; move to next byte.
00364A  3  D0 02        	bne :+
00364C  3  E6 67        	inc z80_h
00364E  3               :
00364E  3  A0 00        	ldy #0
003650  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
003652  3  A0 08        	ldy #8
003654  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003656  3               
003656  3  A9 C8        	lda #200 			; set initial coordinate off screen.
003658  3  A0 03        	ldy #3
00365A  3  91 68        	sta (z80_ix),y
00365C  3               
00365C  3  E6 66        	inc z80_l 			; move to next byte.
00365E  3  D0 02        	bne :+
003660  3  E6 67        	inc z80_h
003662  3               :
003662  3  A0 00        	ldy #0 				; fetch byte from table.
003664  3  B1 66        	lda (z80_hl),y
003666  3  A0 09        	ldy #9
003668  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00366A  3               
00366A  3  E6 66        	inc z80_l 			; move to next byte.
00366C  3  D0 02        	bne :+
00366E  3  E6 67        	inc z80_h
003670  3               :
003670  3  A9 00        	lda #0				; zeroes in accumulator.
003672  3  A0 07        	ldy #7 				; reset frame number.
003674  3  91 68        	sta (z80_ix),y
003676  3  A0 0A        	ldy #10 			; reset direction.
003678  3  91 68        	sta (z80_ix),y
00367A  3  A0 0D        	ldy #13				; reset jump pointer low.
00367C  3  91 68        	sta (z80_ix),y
00367E  3  A0 0E        	ldy #14	 			; reset jump pointer high.
003680  3  91 68        	sta (z80_ix),y
003682  3               
003682  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
003684  3  A0 10        	ldy #16
003686  3  91 68        	sta (z80_ix),y
003688  3               evis0:
003688  3  A5 69        	lda z80_i
00368A  3  48           	pha
00368B  3  A5 68        	lda z80_x
00368D  3  48           	pha
00368E  3  A5 67        	lda z80_h
003690  3  48           	pha
003691  3  A5 66        	lda z80_l
003693  3  48           	pha
003694  3               
003694  3  20 CC 42     	jsr evnt09 			; perform event.
003697  3               
003697  3  68           	pla
003698  3  85 66        	sta z80_l
00369A  3  68           	pla
00369B  3  85 67        	sta z80_h
00369D  3  68           	pla
00369E  3  85 68        	sta z80_x
0036A0  3  68           	pla
0036A1  3  85 69        	sta z80_i
0036A3  3               
0036A3  3  18           	clc
0036A4  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0036A6  3  69 11        	adc #TABSIZ		 	; next sprite.
0036A8  3  85 68        	sta z80_x
0036AA  3  90 02        	bcc :+
0036AC  3  E6 69        	inc z80_i
0036AE  3               :
0036AE  3  60           	rts
0036AF  3               
0036AF  3               
0036AF  3               ;-------------------------------------
0036AF  3               ; Clear the play area window.
0036AF  3               ;-------------------------------------
0036AF  3               
0036AF  3               clw:
0036AF  3  AD 26 20     	lda wintop			; get coordinates of window.
0036B2  3  85 rr        	sta dispy			; put into dispx for calculation.
0036B4  3  AD 27 20     	lda winlft
0036B7  3  85 rr        	sta dispx
0036B9  3               
0036B9  3  AD 28 20     	lda winhgt			; height of window.
0036BC  3  85 rr        	sta rrow			; copy to b register.
0036BE  3               clw3:
0036BE  3  AD 29 20     	lda winwid 			; width of window.
0036C1  3  85 rr        	sta rcol
0036C3  3               clw2:
0036C3  3  20 8B 28     	jsr gprad 			; get print address.
0036C6  3  A9 00        	lda #0				; zero byte to write.
0036C8  3  A2 07        	ldx #7				; pixel height of each cell.
0036CA  3               clw1:
0036CA  3  BC 11 29     	ldy scrtab,x
0036CD  3  91 rr        	sta (scraddr),y 			; copy to screen.
0036CF  3  CA           	dex				; next screen row down.
0036D0  3  10 F8        	bpl clw1
0036D2  3               
0036D2  3  E6 rr        	inc dispx			; next column.
0036D4  3  C6 rr        	dec rcol			; one less to do.
0036D6  3  D0 EB        	bne clw2			; repeat for remaining columns.
0036D8  3               
0036D8  3  AD 27 20     	lda winlft			; get left edge.
0036DB  3  85 rr        	sta dispx 			; reset x.
0036DD  3  E6 rr        	inc dispy 			; next line down.
0036DF  3               
0036DF  3  C6 rr        	dec rrow
0036E1  3  D0 DB        	bne clw3			; repeat down the screen.
0036E3  3               
0036E3  3  AD 26 20     	lda wintop			; get coordinates of window.
0036E6  3  85 rr        	sta chary			; put into display position.
0036E8  3  AD 27 20     	lda winlft
0036EB  3  85 rr        	sta charx
0036ED  3  60           	rts
0036EE  3               
0036EE  3               
0036EE  3               ;----------------------------------------------------------
0036EE  3               ; Effects code.
0036EE  3               ; Ticker routine is called 25 times per second.
0036EE  3               ;
0036EE  3               ; HL = txtscr = left text screen address
0036EE  3               ; DE = txtscr+txtwid-1 = right text screen address
0036EE  3               ; BC = txtpos = text scroller position
0036EE  3               ;
0036EE  3               ;----------------------------------------------------------
0036EE  3               
0036EE  3               .if sflag
0036EE  3               scrly:
0036EE  3               	rts
0036EE  3               	.word txtscr         	; get left screen address.
0036EE  3               	sta scr_l
0036EE  3               	lda txtscr+1
0036EE  3               	sta scr_l+1
0036EE  3               	sta scr_r+1
0036EE  3               
0036EE  3               	stx xtmp
0036EE  3               
0036EE  3               	clc         		; get right screen address.
0036EE  3               	lda scr_l
0036EE  3               	adc txtwid
0036EE  3               	sta scr_r
0036EE  3               	dec scr_r
0036EE  3               scrly1:
0036EE  3               	ldy txtwid		; set txtwide
0036EE  3               	dey
0036EE  3               	clc
0036EE  3               scrly0:
0036EE  3               	lda (scr_l),y		; scroll 1 line
0036EE  3               	rol a
0036EE  3               	sta (scr_l),y
0036EE  3               	dey
0036EE  3               	bpl scrly0
0036EE  3               
0036EE  3               	clc			; point to next line
0036EE  3               	lda scr_l
0036EE  3               	adc #32
0036EE  3               	sta scr_l
0036EE  3               	bcc scrly1		; repeat 8 times
0036EE  3               
0036EE  3               	lda txtpos 		; get text pointer.
0036EE  3               	sta scr_txt
0036EE  3               	lda txtpos+1
0036EE  3               	sta scr_txt+1
0036EE  3               
0036EE  3               	ldy #0
0036EE  3               	lda (scr_txt),y 		; find character we're displaying.
0036EE  3               	and #127 		; remove end marker bit if applicable.
0036EE  3               	cmp #13			; is it newline?
0036EE  3               	bne scrly5 		; no, it's okay.
0036EE  3               	lda #32			; convert to a space instead.
0036EE  3               scrly5:
0036EE  3               	sta fntaddr		; calculate char address
0036EE  3               	lda #0
0036EE  3               	sta fntaddr+1
0036EE  3               	asl fntaddr  		; multiply char by 8.
0036EE  3               	rol fntaddr+1
0036EE  3               	asl fntaddr
0036EE  3               	rol fntaddr+1
0036EE  3               	asl fntaddr
0036EE  3               	rol fntaddr+1
0036EE  3               	lda fntaddr
0036EE  3               	clc
0036EE  3               	adc #<(FONT-256)
0036EE  3               	sta scrly3+1		; that's the low byte.
0036EE  3               	lda fntaddr+1
0036EE  3               	adc #>(FONT-256)
0036EE  3               	sta scrly3+2		; add displacement.
0036EE  3               
0036EE  3               	ldx #0
0036EE  3               scrly3:
0036EE  3               	lda $3333,x		; get image of char line.
0036EE  3               	and txtbit
0036EE  3               	beq scrly2		; don't plot pixel
0036EE  3               	ldy scrline,x
0036EE  3               	lda (scr_r),y
0036EE  3               	clc
0036EE  3               	ora #1
0036EE  3               	sta (scr_r),y		; plot pixel
0036EE  3               scrly2:
0036EE  3               	inx			; next line of char.
0036EE  3               	cpx #8
0036EE  3               	bne scrly3
0036EE  3               
0036EE  3               	lsr txtbit		; bit of text to display.
0036EE  3               	bcs :+
0036EE  3               	rts
0036EE  3               :
0036EE  3               	ldy #0
0036EE  3               	lda (scr_txt),y 	; what was the character?
0036EE  3               	asl a	  		; end of message?
0036EE  3               	bcs scrly4
0036EE  3               	inc txtpos
0036EE  3               	bne :+
0036EE  3               	inc txtpos+1
0036EE  3               :
0036EE  3               	jmp scrly6 		; not yet - continue.
0036EE  3               scrly4:
0036EE  3               	lda txtini 		; start of scrolling message.
0036EE  3               	sta txtpos
0036EE  3               	lda txtini+1
0036EE  3               	sta txtpos+1
0036EE  3               scrly6:
0036EE  3               	lda #128
0036EE  3               	sta txtbit
0036EE  3               	ldx xtmp
0036EE  3               	rts
0036EE  3               
0036EE  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0036EE  3               
0036EE  3               ;-------------------------------------------------------
0036EE  3               ; Entry TICKER command
0036EE  3               ;
0036EE  3               ; Entry:
0036EE  3               ;  z80_b = message nr
0036EE  3               ;  z80_c = width
0036EE  3               ;-------------------------------------------------------
0036EE  3               
0036EE  3               iscrly:
0036EE  3               	jsr prescr 		; set up display position.
0036EE  3               
0036EE  3               	lda #<msgdat 		; text messages.
0036EE  3               	sta z80_l
0036EE  3               	lda #>msgdat
0036EE  3               	sta z80_h
0036EE  3               
0036EE  3               	lda z80_c 		; width.
0036EE  3               	sec
0036EE  3               	sbc #1			; subtract one.
0036EE  3               	cmp #32 		; is it between 1 and 32?
0036EE  3               	bcc :+
0036EE  3               	lda #$60
0036EE  3               	jmp iscrl0		; no, disable messages.
0036EE  3               :
0036EE  3               	ldx z80_b		; message number.
0036EE  3               	jsr getwrd 		; find message start.
0036EE  3               
0036EE  3               	lda z80_l		; set initial text position.
0036EE  3               	sta txtini
0036EE  3               	lda z80_h
0036EE  3               	sta txtini+1
0036EE  3               
0036EE  3               	lda #$ad		; code for lda adrr
0036EE  3               iscrl0:
0036EE  3               	sta scrly		; enable/disable scrolling routine.
0036EE  3               
0036EE  3               	jsr prescr 		; set up display position.
0036EE  3               	jsr gprad 		; get print address.
0036EE  3               
0036EE  3               	lda scraddr 		; set text screen address.
0036EE  3               	sta txtscr
0036EE  3               	lda scraddr+1
0036EE  3               	sta txtscr+1
0036EE  3               
0036EE  3               	lda z80_c		; width.
0036EE  3               	sta txtwid		; set width in working storage.
0036EE  3               
0036EE  3               	lda #128 		; start with leftmost bit.
0036EE  3               	sta txtbit
0036EE  3               
0036EE  3               	jmp scrly4
0036EE  3               .endif
0036EE  3               
0036EE  3               ;------------------------------------------------------------------
0036EE  3               ; Dig routine, conditional assembly depending on dflag
0036EE  3               ;------------------------------------------------------------------
0036EE  3               .if dflag
0036EE  3               dig:
0036EE  3               	and #3
0036EE  3               	beq digr		; dig right
0036EE  3               	cmp #1
0036EE  3               	beq digl		; dig left
0036EE  3               	cmp #2
0036EE  3               	beq digd		; dig down
0036EE  3               
0036EE  3               ; Dig up.
0036EE  3               
0036EE  3               digu:				; dig up
0036EE  3               	ldy #8
0036EE  3               	lda (z80_ix),y
0036EE  3               	sec
0036EE  3               	sbc #2
0036EE  3               	sta dispy		; set y
0036EE  3               
0036EE  3               	iny
0036EE  3               	lda (z80_ix),y
0036EE  3               	sta dispx		; set x
0036EE  3               	jmp digv
0036EE  3               
0036EE  3               ; Dig down.
0036EE  3               
0036EE  3               digd:
0036EE  3               	ldy #9
0036EE  3               	lda (z80_ix),y
0036EE  3               	sta dispx		; set y
0036EE  3               
0036EE  3               	dey
0036EE  3               	clc
0036EE  3               	lda (z80_ix),y
0036EE  3               	adc #16
0036EE  3               	sta dispy		; set y
0036EE  3               	jmp digv
0036EE  3               
0036EE  3               ; Dig left.
0036EE  3               
0036EE  3               digl:
0036EE  3               	ldy #8
0036EE  3               	lda (z80_ix),y
0036EE  3               	sta dispy		; set y
0036EE  3               
0036EE  3               	iny
0036EE  3               	lda (z80_ix),y
0036EE  3               	sec
0036EE  3               	sbc #2			; x=x-2
0036EE  3               	sta dispx		; set x
0036EE  3               	jmp digh
0036EE  3               
0036EE  3               ; Dig right.
0036EE  3               
0036EE  3               digr:
0036EE  3               	ldy #8
0036EE  3               	lda (z80_ix),y
0036EE  3               	sta dispy		; set y
0036EE  3               
0036EE  3               	iny
0036EE  3               	lda (z80_ix),y
0036EE  3               	clc
0036EE  3               	adc #16
0036EE  3               	sta dispx		; set x+16
0036EE  3               	jmp digh
0036EE  3               
0036EE  3               ; Vertical digging
0036EE  3               
0036EE  3               digv:
0036EE  3               	jsr tstbl		; check blocktype in MAP
0036EE  3               	jsr fdchk		; test if FODDER
0036EE  3               
0036EE  3               	clc
0036EE  3               	lda dispx		; look 1 cell down
0036EE  3               	adc #8
0036EE  3               	sta dispx
0036EE  3               	jsr tstbl		; check blocktype in MAP
0036EE  3               	jsr fdchk
0036EE  3               	lda dispx
0036EE  3               	and #7
0036EE  3               	bne :+
0036EE  3               	rts
0036EE  3               :
0036EE  3               	clc
0036EE  3               	lda dispx		; look 1 cell down
0036EE  3               	adc #8
0036EE  3               	sta dispx
0036EE  3               	jsr tstbl		; check blocktype in MAP
0036EE  3               	jmp fdchk
0036EE  3               
0036EE  3               ; Horizontal digging
0036EE  3               
0036EE  3               digh:
0036EE  3               	jsr tstbl		; check blocktype in MAP
0036EE  3               	jsr fdchk		; test if FODDER
0036EE  3               
0036EE  3               	clc
0036EE  3               	lda dispy		; look 1 cell down
0036EE  3               	adc #8
0036EE  3               	sta dispy
0036EE  3               	jsr tstbl		; check blocktype in MAP
0036EE  3               	jsr fdchk
0036EE  3               	lda dispy
0036EE  3               	and #7
0036EE  3               	bne :+
0036EE  3               	rts
0036EE  3               :
0036EE  3               	clc
0036EE  3               	lda dispy		; look 1 cell down
0036EE  3               	adc #8
0036EE  3               	sta dispy
0036EE  3               	jsr tstbl		; check blocktype in MAP
0036EE  3               	jmp fdchk
0036EE  3               
0036EE  3               digcnt:	.byte 0
0036EE  3               
0036EE  3               .endif
0036EE  3               
0036EE  3               ;------------------------------------------------------------------
0036EE  3               ; Sprite table
0036EE  3               ;------------------------------------------------------------------
0036EE  3               
0036EE  3               
0036EE  3               ; ix+0  = type.
0036EE  3               ; ix+1  = sprite image number.
0036EE  3               ; ix+2  = frame.
0036EE  3               ; ix+3  = y coord.
0036EE  3               ; ix+4  = x coord.
0036EE  3               
0036EE  3               ; ix+5  = new type.
0036EE  3               ; ix+6  = new image number.
0036EE  3               ; ix+7  = new frame.
0036EE  3               ; ix+8  = new y coord.
0036EE  3               ; ix+9  = new x coord.
0036EE  3               
0036EE  3               ; ix+10 = direction.
0036EE  3               ; ix+11 = parameter 1.
0036EE  3               ; ix+12 = parameter 2.
0036EE  3               ; ix+13 = jump pointer low.
0036EE  3               ; ix+14 = jump pointer high.
0036EE  3               ; ix+15 = data pointer low.
0036EE  3               ; ix+16 = data pointer high.
0036EE  3               
0036EE  3               ; block NUMSPR * TABSIZ,255
0036EE  3               
0036EE  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0036F2  3  FF FF FF FF  
0036F6  3  FF FF FF FF  
0037BA  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0037BE  3  FF FF FF 00  
0037C2  3  C0 78 00 00  
0037CB  3  07           roomtb:	.byte 7                      ; start room map offset.
0037CC  3               
0037CC  3               ; User routine.  Put your own code in here to be called with USER instruction.
0037CC  3               ; if USER has an argument it will be passed in the accumulator.
0037CC  3               
0037CC  3               user:
0037CC  3               	.include "user.inc"
0037CC  4  60           	rts
0037CD  4               
0037CD  3               
0037CD  3               setfgcol:
0037CD  3  29 03        	and #3
0037CF  3  A8           	tay
0037D0  3  B9 F2 37     	lda codcol,y
0037D3  3  4C E9 37     	jmp calfgc
0037D6  3               
0037D6  3               setbgcol:
0037D6  3  29 03        	and #3
0037D8  3               calbgc:
0037D8  3  A8           	tay
0037D9  3  B9 F2 37     	lda codcol,y
0037DC  3  48           	pha
0037DD  3  AD F0 37     	lda andeor
0037E0  3  4D F1 37     	eor andeor+1
0037E3  3  AA           	tax
0037E4  3  68           	pla
0037E5  3  8D F1 37     	sta andeor+1
0037E8  3  8A           	txa
0037E9  3               calfgc:
0037E9  3  4D F1 37     	eor andeor+1
0037EC  3  8D F0 37     	sta andeor
0037EF  3               calex1:
0037EF  3  60           	rts
0037F0  3               
0037F0  3  00 00        andeor:	.byte 0,0
0037F2  3  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
0037F6  3               
0037F6  3               ; Everything below here will be generated by the editors.
0037F6  3               
0037F6  3  60                   rts
0037F7  3               WINDOWTOP = 0
0037F7  3               WINDOWLFT = 2
0037F7  3               WINDOWHGT = 20
0037F7  3               WINDOWWID = 28 ;a
0037F7  3               MAPWID = 10
0037F7  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255
0037FB  3  FF FF FF FF  
0037FF  3  FF FF        
003801  3               mapdat:
003801  3  FF 1B FF 14          .byte 255,27,255,20,255,23,255,255,255,255,255,255,255,19,21,22,24,25,26,255,255,255,14,13,12,11,10,18,17,255,255,255,255,15,3,0,4,6,8,255,255,255,255,16,2,1,5,7,9,255
003805  3  FF 17 FF FF  
003809  3  FF FF FF FF  
003833  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255
003837  3  FF FF FF FF  
00383B  3  FF FF        
00383D  3  23           stmap:  .byte 35
00383E  3               
00383E  3               evnt00:
00383E  3  20 2A 2B             jsr cangd	; CANGODOWN
003841  3  F0 03                beq :+
003843  3  4C 49 38             jmp a00026
003846  3               :
003846  3  20 A7 34             jsr ifall	; TABLEFALL
003849  3  20 46 26     a00026: jsr skobj	; DETECTOBJECT
00384C  3  85 rr                sta varobj
00384E  3  A9 FF                lda #255
003850  3  C5 rr                cmp varobj
003852  3  D0 03                bne *+5
003854  3  4C 23 39             jmp a00490
003857  3  A5 rr                lda varobj	; GET
003859  3  20 C5 25             jsr getob
00385C  3  A9 32                lda #50		; BEEP
00385E  3  0A                   asl a
00385F  3  8D 19 23             sta sndtyp
003862  3  A9 01                lda #1
003864  3  C5 rr                cmp scno
003866  3  F0 03                beq *+5
003868  3  4C 7F 38             jmp a00143
00386B  3  A5 rr                lda vark
00386D  3  18                   clc
00386E  3  69 01                adc #1
003870  3  85 rr                sta vark
003872  3  A9 14                lda #20		; AT
003874  3  85 rr                sta chary
003876  3  A9 1D                lda #29
003878  3  85 rr                sta charx
00387A  3  A5 rr                lda vark	; DISPLAY
00387C  3  20 87 33             jsr disply
00387F  3  A9 10        a00143: lda #16
003881  3  C5 rr                cmp scno
003883  3  F0 03                beq *+5
003885  3  4C 9C 38             jmp a00206
003888  3  A5 rr                lda vark
00388A  3  18                   clc
00388B  3  69 01                adc #1
00388D  3  85 rr                sta vark
00388F  3  A9 14                lda #20		; AT
003891  3  85 rr                sta chary
003893  3  A9 1D                lda #29
003895  3  85 rr                sta charx
003897  3  A5 rr                lda vark	; DISPLAY
003899  3  20 87 33             jsr disply
00389C  3  A9 07        a00206: lda #7
00389E  3  C5 rr                cmp scno
0038A0  3  F0 03                beq *+5
0038A2  3  4C C5 38             jmp a00291
0038A5  3  A9 03                lda #3		; GOT
0038A7  3  20 F4 25             jsr gotob
0038AA  3  C9 FF                cmp #255
0038AC  3  F0 03                beq :+
0038AE  3  4C C5 38             jmp a00291
0038B1  3               :
0038B1  3  A5 rr                lda vark
0038B3  3  18                   clc
0038B4  3  69 01                adc #1
0038B6  3  85 rr                sta vark
0038B8  3  A9 14                lda #20		; AT
0038BA  3  85 rr                sta chary
0038BC  3  A9 1D                lda #29
0038BE  3  85 rr                sta charx
0038C0  3  A5 rr                lda vark	; DISPLAY
0038C2  3  20 87 33             jsr disply
0038C5  3  A9 0D        a00291: lda #13
0038C7  3  C5 rr                cmp scno
0038C9  3  F0 03                beq *+5
0038CB  3  4C E1 38             jmp a00346
0038CE  3  A9 09                lda #9		; GOT
0038D0  3  20 F4 25             jsr gotob
0038D3  3  C9 FF                cmp #255
0038D5  3  F0 03                beq :+
0038D7  3  4C E1 38             jmp a00346
0038DA  3               :
0038DA  3  A5 rr                lda varc
0038DC  3  18                   clc
0038DD  3  69 01                adc #1
0038DF  3  85 rr                sta varc
0038E1  3  A9 11        a00346: lda #17
0038E3  3  C5 rr                cmp scno
0038E5  3  F0 03                beq *+5
0038E7  3  4C 02 39             jmp a00418
0038EA  3  A5 rr                lda numlif
0038EC  3  18                   clc
0038ED  3  69 01                adc #1
0038EF  3  85 rr                sta numlif
0038F1  3  A9 15                lda #21		; AT
0038F3  3  85 rr                sta chary
0038F5  3  A9 1D                lda #29
0038F7  3  85 rr                sta charx
0038F9  3  A5 rr                lda numlif	; DISPLAY
0038FB  3  20 87 33             jsr disply
0038FE  3  A9 01                lda #1
003900  3  85 rr                sta varh
003902  3  A9 13        a00418: lda #19
003904  3  C5 rr                cmp scno
003906  3  F0 03                beq *+5
003908  3  4C 23 39             jmp a00490
00390B  3  A5 rr                lda numlif
00390D  3  18                   clc
00390E  3  69 01                adc #1
003910  3  85 rr                sta numlif
003912  3  A9 15                lda #21		; AT
003914  3  85 rr                sta chary
003916  3  A9 1D                lda #29
003918  3  85 rr                sta charx
00391A  3  A5 rr                lda numlif	; DISPLAY
00391C  3  20 87 33             jsr disply
00391F  3  A9 01                lda #1
003921  3  85 rr                sta vari
003923  3  A9 DF        a00490: lda #223
003925  3  A0 09                ldy #9
003927  3  D1 68                cmp (z80_ix),y
003929  3  90 03                bcc *+5
00392B  3  4C 43 39             jmp a00561
00392E  3  20 E5 33             jsr scrr	; SCREENRIGHT
003931  3  A9 20                lda #32
003933  3  A0 09                ldy #9
003935  3  91 68                sta (z80_ix),y
003937  3  A0 08                ldy #8
003939  3  B1 68                lda (z80_ix),y
00393B  3  85 rr                sta varo
00393D  3  A0 09                ldy #9
00393F  3  B1 68                lda (z80_ix),y
003941  3  85 rr                sta varp
003943  3  A9 10        a00561: lda #16
003945  3  A0 09                ldy #9
003947  3  D1 68                cmp (z80_ix),y
003949  3  B0 03                bcs *+5
00394B  3  4C 63 39             jmp a00632
00394E  3  20 CA 33             jsr scrl	; SCREENLEFT
003951  3  A9 D0                lda #208
003953  3  A0 09                ldy #9
003955  3  91 68                sta (z80_ix),y
003957  3  A0 08                ldy #8
003959  3  B1 68                lda (z80_ix),y
00395B  3  85 rr                sta varo
00395D  3  A0 09                ldy #9
00395F  3  B1 68                lda (z80_ix),y
003961  3  85 rr                sta varp
003963  3  A9 02        a00632: lda #2
003965  3  A0 08                ldy #8
003967  3  D1 68                cmp (z80_ix),y
003969  3  B0 03                bcs *+5
00396B  3  4C 83 39             jmp a00702
00396E  3  20 EE 33             jsr scru	; SCREENUP
003971  3  A9 8C                lda #140
003973  3  A0 08                ldy #8
003975  3  91 68                sta (z80_ix),y
003977  3  A0 08                ldy #8
003979  3  B1 68                lda (z80_ix),y
00397B  3  85 rr                sta varo
00397D  3  A0 09                ldy #9
00397F  3  B1 68                lda (z80_ix),y
003981  3  85 rr                sta varp
003983  3  A9 8C        a00702: lda #140
003985  3  A0 08                ldy #8
003987  3  D1 68                cmp (z80_ix),y
003989  3  90 03                bcc *+5
00398B  3  4C A3 39             jmp a00773
00398E  3  20 F7 33             jsr scrd	; SCREENDOWN
003991  3  A9 08                lda #8
003993  3  A0 08                ldy #8
003995  3  91 68                sta (z80_ix),y
003997  3  A0 08                ldy #8
003999  3  B1 68                lda (z80_ix),y
00399B  3  85 rr                sta varo
00399D  3  A0 09                ldy #9
00399F  3  B1 68                lda (z80_ix),y
0039A1  3  85 rr                sta varp
0039A3  3  20 A6 2A     a00773: jsr laddd	; LADDERBELOW
0039A6  3  F0 03                beq :+
0039A8  3  4C BE 39             jmp a00827
0039AB  3               :
0039AB  3  A9 02                lda #2
0039AD  3  85 rr                sta varl
0039AF  3  20 BC 2A             jsr laddu	; CANGOUP
0039B2  3  F0 03                beq :+
0039B4  3  4C BB 39             jmp a00822
0039B7  3               :
0039B7  3  A9 01                lda #1
0039B9  3  85 rr                sta varl
0039BB  3  4C C2 39     a00822: jmp a00835
0039BE  3  A9 00        a00827: lda #0
0039C0  3  85 rr                sta varl
0039C2  3  A5 rr        a00835: lda joyval	; KEY
0039C4  3  29 01                and #1
0039C6  3  F0 03                beq :+
0039C8  3  4C 6D 3A             jmp a01207
0039CB  3               :
0039CB  3  20 81 2C             jsr cangr	; CANGORIGHT
0039CE  3  F0 03                beq :+
0039D0  3  4C 6D 3A             jmp a01207
0039D3  3               :
0039D3  3  A5 rr                lda joyval	; KEY
0039D5  3  29 04                and #4
0039D7  3  F0 03                beq :+
0039D9  3  4C 07 3A             jmp a00983
0039DC  3               :
0039DC  3  20 A6 2A             jsr laddd	; LADDERBELOW
0039DF  3  F0 03                beq :+
0039E1  3  4C E7 39             jmp a00911
0039E4  3               :
0039E4  3  4C 04 3A             jmp a00979
0039E7  3  A9 00        a00911: lda #0
0039E9  3  C5 rr                cmp vara
0039EB  3  F0 03                beq *+5
0039ED  3  4C F5 39             jmp a00939
0039F0  3  A9 00                lda #0		; ANIMATE
0039F2  3  20 AC 32             jsr animsp
0039F5  3  A9 00        a00939: lda #0
0039F7  3  A0 06                ldy #6
0039F9  3  91 68                sta (z80_ix),y
0039FB  3  A0 09                ldy #9 		; SPRITERIGHT
0039FD  3  B1 68                lda (z80_ix),y
0039FF  3  18                   clc
003A00  3  69 02                adc #2
003A02  3  91 68                sta (z80_ix),y
003A04  3  4C 6D 3A     a00979: jmp a01207
003A07  3  A5 rr        a00983: lda joyval	; KEY
003A09  3  29 08                and #8
003A0B  3  F0 03                beq :+
003A0D  3  4C 3B 3A             jmp a01095
003A10  3               :
003A10  3  20 BC 2A             jsr laddu	; CANGOUP
003A13  3  F0 03                beq :+
003A15  3  4C 1B 3A             jmp a01023
003A18  3               :
003A18  3  4C 38 3A             jmp a01090
003A1B  3  A9 00        a01023: lda #0
003A1D  3  A0 06                ldy #6
003A1F  3  91 68                sta (z80_ix),y
003A21  3  A9 00                lda #0
003A23  3  C5 rr                cmp vara
003A25  3  F0 03                beq *+5
003A27  3  4C 2F 3A             jmp a01064
003A2A  3  A9 00                lda #0		; ANIMATE
003A2C  3  20 AC 32             jsr animsp
003A2F  3  A0 09        a01064: ldy #9 		; SPRITERIGHT
003A31  3  B1 68                lda (z80_ix),y
003A33  3  18                   clc
003A34  3  69 02                adc #2
003A36  3  91 68                sta (z80_ix),y
003A38  3  4C 6D 3A     a01090: jmp a01207
003A3B  3  A9 01        a01095: lda #1
003A3D  3  85 rr                sta vard
003A3F  3  A9 00                lda #0
003A41  3  A0 06                ldy #6
003A43  3  91 68                sta (z80_ix),y
003A45  3  A9 00                lda #0
003A47  3  C5 rr                cmp vara
003A49  3  F0 03                beq *+5
003A4B  3  4C 64 3A             jmp a01181
003A4E  3  A9 00                lda #0		; ANIMATE
003A50  3  20 AC 32             jsr animsp
003A53  3  A9 00                lda #0
003A55  3  A0 07                ldy #7
003A57  3  D1 68                cmp (z80_ix),y
003A59  3  F0 03                beq *+5
003A5B  3  4C 64 3A             jmp a01181
003A5E  3  A9 14                lda #20		; BEEP
003A60  3  0A                   asl a
003A61  3  8D 19 23             sta sndtyp
003A64  3  A0 09        a01181: ldy #9 		; SPRITERIGHT
003A66  3  B1 68                lda (z80_ix),y
003A68  3  18                   clc
003A69  3  69 02                adc #2
003A6B  3  91 68                sta (z80_ix),y
003A6D  3  A5 rr        a01207: lda joyval	; KEY
003A6F  3  29 02                and #2
003A71  3  F0 03                beq :+
003A73  3  4C 18 3B             jmp a01577
003A76  3               :
003A76  3  20 5F 2B             jsr cangl	; CANGOLEFT
003A79  3  F0 03                beq :+
003A7B  3  4C 18 3B             jmp a01577
003A7E  3               :
003A7E  3  A5 rr                lda joyval	; KEY
003A80  3  29 04                and #4
003A82  3  F0 03                beq :+
003A84  3  4C B2 3A             jmp a01355
003A87  3               :
003A87  3  20 A6 2A             jsr laddd	; LADDERBELOW
003A8A  3  F0 03                beq :+
003A8C  3  4C 92 3A             jmp a01283
003A8F  3               :
003A8F  3  4C AF 3A             jmp a01350
003A92  3  A9 00        a01283: lda #0
003A94  3  C5 rr                cmp vara
003A96  3  F0 03                beq *+5
003A98  3  4C A0 3A             jmp a01311
003A9B  3  A9 00                lda #0		; ANIMATE
003A9D  3  20 AC 32             jsr animsp
003AA0  3  A9 01        a01311: lda #1
003AA2  3  A0 06                ldy #6
003AA4  3  91 68                sta (z80_ix),y
003AA6  3  A0 09                ldy #9 		; SPRITELEFT
003AA8  3  B1 68                lda (z80_ix),y
003AAA  3  38                   sec
003AAB  3  E9 02                sbc #2
003AAD  3  91 68                sta (z80_ix),y
003AAF  3  4C 18 3B     a01350: jmp a01577
003AB2  3  A5 rr        a01355: lda joyval	; KEY
003AB4  3  29 08                and #8
003AB6  3  F0 03                beq :+
003AB8  3  4C E6 3A             jmp a01466
003ABB  3               :
003ABB  3  20 BC 2A             jsr laddu	; CANGOUP
003ABE  3  F0 03                beq :+
003AC0  3  4C C6 3A             jmp a01394
003AC3  3               :
003AC3  3  4C E3 3A             jmp a01461
003AC6  3  A9 01        a01394: lda #1
003AC8  3  A0 06                ldy #6
003ACA  3  91 68                sta (z80_ix),y
003ACC  3  A9 00                lda #0
003ACE  3  C5 rr                cmp vara
003AD0  3  F0 03                beq *+5
003AD2  3  4C DA 3A             jmp a01436
003AD5  3  A9 00                lda #0		; ANIMATE
003AD7  3  20 AC 32             jsr animsp
003ADA  3  A0 09        a01436: ldy #9 		; SPRITELEFT
003ADC  3  B1 68                lda (z80_ix),y
003ADE  3  38                   sec
003ADF  3  E9 02                sbc #2
003AE1  3  91 68                sta (z80_ix),y
003AE3  3  4C 18 3B     a01461: jmp a01577
003AE6  3  A9 02        a01466: lda #2
003AE8  3  85 rr                sta vard
003AEA  3  A9 01                lda #1
003AEC  3  A0 06                ldy #6
003AEE  3  91 68                sta (z80_ix),y
003AF0  3  A9 00                lda #0
003AF2  3  C5 rr                cmp vara
003AF4  3  F0 03                beq *+5
003AF6  3  4C 0F 3B             jmp a01552
003AF9  3  A9 00                lda #0		; ANIMATE
003AFB  3  20 AC 32             jsr animsp
003AFE  3  A9 00                lda #0
003B00  3  A0 07                ldy #7
003B02  3  D1 68                cmp (z80_ix),y
003B04  3  F0 03                beq *+5
003B06  3  4C 0F 3B             jmp a01552
003B09  3  A9 14                lda #20		; BEEP
003B0B  3  0A                   asl a
003B0C  3  8D 19 23             sta sndtyp
003B0F  3  A0 09        a01552: ldy #9 		; SPRITELEFT
003B11  3  B1 68                lda (z80_ix),y
003B13  3  38                   sec
003B14  3  E9 02                sbc #2
003B16  3  91 68                sta (z80_ix),y
003B18  3  A5 rr        a01577: lda joyval	; KEY
003B1A  3  29 08                and #8
003B1C  3  F0 03                beq :+
003B1E  3  4C 4A 3B             jmp a01687
003B21  3               :
003B21  3  A9 03                lda #3
003B23  3  85 rr                sta vard
003B25  3  20 BC 2A             jsr laddu	; CANGOUP
003B28  3  F0 03                beq :+
003B2A  3  4C 4A 3B             jmp a01687
003B2D  3               :
003B2D  3  A9 02                lda #2
003B2F  3  A0 06                ldy #6
003B31  3  91 68                sta (z80_ix),y
003B33  3  A9 00                lda #0
003B35  3  C5 rr                cmp vara
003B37  3  F0 03                beq *+5
003B39  3  4C 41 3B             jmp a01662
003B3C  3  A9 00                lda #0		; ANIMATE
003B3E  3  20 AC 32             jsr animsp
003B41  3  A0 08        a01662: ldy #8 		; SPRITEUP
003B43  3  B1 68                lda (z80_ix),y
003B45  3  38                   sec
003B46  3  E9 02                sbc #2
003B48  3  91 68                sta (z80_ix),y
003B4A  3  A5 rr        a01687: lda joyval	; KEY
003B4C  3  29 04                and #4
003B4E  3  F0 03                beq :+
003B50  3  4C 7C 3B             jmp a01798
003B53  3               :
003B53  3  A9 03                lda #3
003B55  3  85 rr                sta vard
003B57  3  20 A6 2A             jsr laddd	; LADDERBELOW
003B5A  3  F0 03                beq :+
003B5C  3  4C 7C 3B             jmp a01798
003B5F  3               :
003B5F  3  A9 02                lda #2
003B61  3  A0 06                ldy #6
003B63  3  91 68                sta (z80_ix),y
003B65  3  A9 00                lda #0
003B67  3  C5 rr                cmp vara
003B69  3  F0 03                beq *+5
003B6B  3  4C 73 3B             jmp a01772
003B6E  3  A9 00                lda #0		; ANIMATE
003B70  3  20 AC 32             jsr animsp
003B73  3  A0 08        a01772: ldy #8 		; SPRITEDOWN
003B75  3  B1 68                lda (z80_ix),y
003B77  3  18                   clc
003B78  3  69 02                adc #2
003B7A  3  91 68                sta (z80_ix),y
003B7C  3  A5 rr        a01798: lda joyval	; KEY
003B7E  3  29 10                and #16
003B80  3  F0 03                beq :+
003B82  3  4C A5 3B             jmp a01881
003B85  3               :
003B85  3  A9 01                lda #1
003B87  3  C5 rr                cmp varl
003B89  3  F0 03                beq *+5
003B8B  3  4C 91 3B             jmp a01839
003B8E  3  4C A5 3B             jmp a01881
003B91  3  20 2A 2B     a01839: jsr cangd	; CANGODOWN
003B94  3  F0 03                beq :+
003B96  3  4C 9C 3B             jmp a01860
003B99  3               :
003B99  3  4C A5 3B             jmp a01881
003B9C  3  A9 28        a01860: lda #40		; BEEP
003B9E  3  0A                   asl a
003B9F  3  8D 19 23             sta sndtyp
003BA2  3  20 EB 2D             jsr jump	; TABLEJUMP
003BA5  3  A9 05        a01881: lda #DEADLY	; DEADLY
003BA7  3  85 63                sta z80_b
003BA9  3  20 F6 2C             jsr tded
003BAC  3  C5 63                cmp z80_b
003BAE  3  F0 03                beq :+
003BB0  3  4C C3 3B             jmp a01949
003BB3  3               :
003BB3  3  A5 rr                lda varo
003BB5  3  A0 08                ldy #8
003BB7  3  91 68                sta (z80_ix),y
003BB9  3  A5 rr                lda varp
003BBB  3  A0 09                ldy #9
003BBD  3  91 68                sta (z80_ix),y
003BBF  3  A9 01                lda #1 		; KILL
003BC1  3  85 rr                sta deadf
003BC3  3  4C 13 34     a01949: jmp grav
003BC6  3               evnt01:
003BC6  3  A9 00                lda #0
003BC8  3  C5 rr                cmp vara
003BCA  3  F0 03                beq *+5
003BCC  3  4C D4 3B             jmp b00030
003BCF  3  A9 00                lda #0		; ANIMATE
003BD1  3  20 AC 32             jsr animsp
003BD4  3  60           b00030: rts
003BD5  3               evnt02:
003BD5  3  A9 00                lda #0
003BD7  3  C5 rr                cmp vara
003BD9  3  F0 03                beq *+5
003BDB  3  4C E3 3B             jmp c00030
003BDE  3  A9 00                lda #0		; ANIMATE
003BE0  3  20 AC 32             jsr animsp
003BE3  3  A9 00        c00030: lda #0 	; COLLISION
003BE5  3  85 63                sta z80_b
003BE7  3  20 F7 32             jsr sktyp
003BEA  3  B0 03                bcs :+
003BEC  3  4C 1E 40             jmp c02457
003BEF  3               :
003BEF  3  A5 rr                lda joyval	; KEY
003BF1  3  29 40                and #64
003BF3  3  F0 03                beq :+
003BF5  3  4C 1E 40             jmp c02457
003BF8  3               :
003BF8  3  A9 09                lda #9		; INVENTORY
003BFA  3  AA                   tax
003BFB  3  20 2F 20             jsr minve
003BFE  3  A9 00                lda #0
003C00  3  C5 rr                cmp scno
003C02  3  F0 03                beq *+5
003C04  3  4C 40 3C             jmp c00237
003C07  3  A9 00                lda #0
003C09  3  C5 rr                cmp varopt
003C0B  3  F0 03                beq *+5
003C0D  3  4C 40 3C             jmp c00237
003C10  3  A9 08                lda #8		; AT
003C12  3  85 rr                sta chary
003C14  3  A9 1C                lda #28
003C16  3  85 rr                sta charx
003C18  3  A9 00                lda #0 		; PUTBLOCK
003C1A  3  20 19 29             jsr pbpattr
003C1D  3  A9 00                lda #0 		; PUTBLOCK
003C1F  3  20 19 29             jsr pbpattr
003C22  3  A9 09                lda #9		; AT
003C24  3  85 rr                sta chary
003C26  3  A9 1C                lda #28
003C28  3  85 rr                sta charx
003C2A  3  A9 00                lda #0 		; PUTBLOCK
003C2C  3  20 19 29             jsr pbpattr
003C2F  3  A9 00                lda #0 		; PUTBLOCK
003C31  3  20 19 29             jsr pbpattr
003C34  3  A9 50                lda #80		; BEEP
003C36  3  0A                   asl a
003C37  3  8D 19 23             sta sndtyp
003C3A  3  A9 FF                lda #255	; REMOVE
003C3C  3  A0 05                ldy #5
003C3E  3  91 68                sta (z80_ix),y
003C40  3  A9 0B        c00237: lda #11
003C42  3  C5 rr                cmp scno
003C44  3  F0 03                beq *+5
003C46  3  4C 82 3C             jmp c00386
003C49  3  A9 05                lda #5
003C4B  3  C5 rr                cmp varopt
003C4D  3  F0 03                beq *+5
003C4F  3  4C 82 3C             jmp c00386
003C52  3  A9 02                lda #2		; AT
003C54  3  85 rr                sta chary
003C56  3  A9 14                lda #20
003C58  3  85 rr                sta charx
003C5A  3  A9 00                lda #0 		; PUTBLOCK
003C5C  3  20 19 29             jsr pbpattr
003C5F  3  A9 00                lda #0 		; PUTBLOCK
003C61  3  20 19 29             jsr pbpattr
003C64  3  A9 03                lda #3		; AT
003C66  3  85 rr                sta chary
003C68  3  A9 14                lda #20
003C6A  3  85 rr                sta charx
003C6C  3  A9 00                lda #0 		; PUTBLOCK
003C6E  3  20 19 29             jsr pbpattr
003C71  3  A9 00                lda #0 		; PUTBLOCK
003C73  3  20 19 29             jsr pbpattr
003C76  3  A9 3C                lda #60		; BEEP
003C78  3  0A                   asl a
003C79  3  8D 19 23             sta sndtyp
003C7C  3  A9 FF                lda #255	; REMOVE
003C7E  3  A0 05                ldy #5
003C80  3  91 68                sta (z80_ix),y
003C82  3  A9 04        c00386: lda #4
003C84  3  C5 rr                cmp scno
003C86  3  F0 03                beq *+5
003C88  3  4C E1 3C             jmp c00601
003C8B  3  A9 06                lda #6
003C8D  3  C5 rr                cmp varopt
003C8F  3  F0 03                beq *+5
003C91  3  4C E1 3C             jmp c00601
003C94  3  A9 02                lda #2		; AT
003C96  3  85 rr                sta chary
003C98  3  A9 0B                lda #11
003C9A  3  85 rr                sta charx
003C9C  3  A9 15                lda #21 		; PUTBLOCK
003C9E  3  20 19 29             jsr pbpattr
003CA1  3  A9 16                lda #22 		; PUTBLOCK
003CA3  3  20 19 29             jsr pbpattr
003CA6  3  A9 03                lda #3		; AT
003CA8  3  85 rr                sta chary
003CAA  3  A9 0B                lda #11
003CAC  3  85 rr                sta charx
003CAE  3  A9 15                lda #21 		; PUTBLOCK
003CB0  3  20 19 29             jsr pbpattr
003CB3  3  A9 16                lda #22 		; PUTBLOCK
003CB5  3  20 19 29             jsr pbpattr
003CB8  3  A9 3C                lda #60		; BEEP
003CBA  3  0A                   asl a
003CBB  3  8D 19 23             sta sndtyp
003CBE  3  A9 FF                lda #255	; REMOVE
003CC0  3  A0 05                ldy #5
003CC2  3  91 68                sta (z80_ix),y
003CC4  3  A9 C8                lda #200
003CC6  3  A0 08                ldy #8
003CC8  3  91 68                sta (z80_ix),y
003CCA  3  A9 18                lda #24
003CCC  3  A0 09                ldy #9
003CCE  3  91 68                sta (z80_ix),y
003CD0  3  A0 09                ldy #9
003CD2  3  B1 68                lda (z80_ix),y	; PUT
003CD4  3  85 rr                sta dispx
003CD6  3  A0 08                ldy #8
003CD8  3  B1 68                lda (z80_ix),y
003CDA  3  85 rr                sta dispy
003CDC  3  A9 06                lda #6
003CDE  3  20 25 26             jsr drpob
003CE1  3  A9 09        c00601: lda #9
003CE3  3  C5 rr                cmp scno
003CE5  3  F0 03                beq *+5
003CE7  3  4C 40 3D             jmp c00814
003CEA  3  A9 08                lda #8
003CEC  3  C5 rr                cmp varopt
003CEE  3  F0 03                beq *+5
003CF0  3  4C 40 3D             jmp c00814
003CF3  3  A9 04                lda #4		; AT
003CF5  3  85 rr                sta chary
003CF7  3  A9 02                lda #2
003CF9  3  85 rr                sta charx
003CFB  3  A9 00                lda #0 		; PUTBLOCK
003CFD  3  20 19 29             jsr pbpattr
003D00  3  A9 00                lda #0 		; PUTBLOCK
003D02  3  20 19 29             jsr pbpattr
003D05  3  A9 05                lda #5		; AT
003D07  3  85 rr                sta chary
003D09  3  A9 02                lda #2
003D0B  3  85 rr                sta charx
003D0D  3  A9 00                lda #0 		; PUTBLOCK
003D0F  3  20 19 29             jsr pbpattr
003D12  3  A9 00                lda #0 		; PUTBLOCK
003D14  3  20 19 29             jsr pbpattr
003D17  3  A9 2D                lda #45		; BEEP
003D19  3  0A                   asl a
003D1A  3  8D 19 23             sta sndtyp
003D1D  3  A9 FF                lda #255	; REMOVE
003D1F  3  A0 05                ldy #5
003D21  3  91 68                sta (z80_ix),y
003D23  3  A9 C8                lda #200
003D25  3  A0 08                ldy #8
003D27  3  91 68                sta (z80_ix),y
003D29  3  A9 18                lda #24
003D2B  3  A0 09                ldy #9
003D2D  3  91 68                sta (z80_ix),y
003D2F  3  A0 09                ldy #9
003D31  3  B1 68                lda (z80_ix),y	; PUT
003D33  3  85 rr                sta dispx
003D35  3  A0 08                ldy #8
003D37  3  B1 68                lda (z80_ix),y
003D39  3  85 rr                sta dispy
003D3B  3  A9 08                lda #8
003D3D  3  20 25 26             jsr drpob
003D40  3  A9 14        c00814: lda #20
003D42  3  C5 rr                cmp scno
003D44  3  F0 03                beq *+5
003D46  3  4C 95 3D             jmp c01005
003D49  3  A9 0F                lda #15
003D4B  3  C5 rr                cmp varopt
003D4D  3  F0 03                beq *+5
003D4F  3  4C 95 3D             jmp c01005
003D52  3  A9 04                lda #4		; AT
003D54  3  85 rr                sta chary
003D56  3  A9 08                lda #8
003D58  3  85 rr                sta charx
003D5A  3  A9 3C                lda #60 		; PUTBLOCK
003D5C  3  20 19 29             jsr pbpattr
003D5F  3  A9 05                lda #5		; AT
003D61  3  85 rr                sta chary
003D63  3  A9 08                lda #8
003D65  3  85 rr                sta charx
003D67  3  A9 3D                lda #61 		; PUTBLOCK
003D69  3  20 19 29             jsr pbpattr
003D6C  3  A9 50                lda #80		; BEEP
003D6E  3  0A                   asl a
003D6F  3  8D 19 23             sta sndtyp
003D72  3  A9 FF                lda #255	; REMOVE
003D74  3  A0 05                ldy #5
003D76  3  91 68                sta (z80_ix),y
003D78  3  A9 C8                lda #200
003D7A  3  A0 08                ldy #8
003D7C  3  91 68                sta (z80_ix),y
003D7E  3  A9 D8                lda #216
003D80  3  A0 09                ldy #9
003D82  3  91 68                sta (z80_ix),y
003D84  3  A0 09                ldy #9
003D86  3  B1 68                lda (z80_ix),y	; PUT
003D88  3  85 rr                sta dispx
003D8A  3  A0 08                ldy #8
003D8C  3  B1 68                lda (z80_ix),y
003D8E  3  85 rr                sta dispy
003D90  3  A9 0F                lda #15
003D92  3  20 25 26             jsr drpob
003D95  3  A9 0D        c01005: lda #13
003D97  3  C5 rr                cmp scno
003D99  3  F0 03                beq *+5
003D9B  3  4C E2 3D             jmp c01177
003D9E  3  A9 07                lda #7
003DA0  3  C5 rr                cmp varopt
003DA2  3  F0 03                beq *+5
003DA4  3  4C E2 3D             jmp c01177
003DA7  3  A9 11                lda #17		; AT
003DA9  3  85 rr                sta chary
003DAB  3  A9 0E                lda #14
003DAD  3  85 rr                sta charx
003DAF  3  A9 00                lda #0 		; PUTBLOCK
003DB1  3  20 19 29             jsr pbpattr
003DB4  3  A9 00                lda #0 		; PUTBLOCK
003DB6  3  20 19 29             jsr pbpattr
003DB9  3  A9 2D                lda #45		; BEEP
003DBB  3  0A                   asl a
003DBC  3  8D 19 23             sta sndtyp
003DBF  3  A9 FF                lda #255	; REMOVE
003DC1  3  A0 05                ldy #5
003DC3  3  91 68                sta (z80_ix),y
003DC5  3  A9 C8                lda #200
003DC7  3  A0 08                ldy #8
003DC9  3  91 68                sta (z80_ix),y
003DCB  3  A9 D8                lda #216
003DCD  3  A0 09                ldy #9
003DCF  3  91 68                sta (z80_ix),y
003DD1  3  A0 09                ldy #9
003DD3  3  B1 68                lda (z80_ix),y	; PUT
003DD5  3  85 rr                sta dispx
003DD7  3  A0 08                ldy #8
003DD9  3  B1 68                lda (z80_ix),y
003DDB  3  85 rr                sta dispy
003DDD  3  A9 07                lda #7
003DDF  3  20 25 26             jsr drpob
003DE2  3  A9 0E        c01177: lda #14
003DE4  3  C5 rr                cmp scno
003DE6  3  F0 03                beq *+5
003DE8  3  4C 2A 3E             jmp c01338
003DEB  3  A9 0B                lda #11
003DED  3  C5 rr                cmp varopt
003DEF  3  F0 03                beq *+5
003DF1  3  4C 2A 3E             jmp c01338
003DF4  3  A9 0F                lda #15		; AT
003DF6  3  85 rr                sta chary
003DF8  3  A9 07                lda #7
003DFA  3  85 rr                sta charx
003DFC  3  A9 38                lda #56 		; PUTBLOCK
003DFE  3  20 19 29             jsr pbpattr
003E01  3  A9 50                lda #80		; BEEP
003E03  3  0A                   asl a
003E04  3  8D 19 23             sta sndtyp
003E07  3  A9 FF                lda #255	; REMOVE
003E09  3  A0 05                ldy #5
003E0B  3  91 68                sta (z80_ix),y
003E0D  3  A9 C8                lda #200
003E0F  3  A0 08                ldy #8
003E11  3  91 68                sta (z80_ix),y
003E13  3  A9 18                lda #24
003E15  3  A0 09                ldy #9
003E17  3  91 68                sta (z80_ix),y
003E19  3  A0 09                ldy #9
003E1B  3  B1 68                lda (z80_ix),y	; PUT
003E1D  3  85 rr                sta dispx
003E1F  3  A0 08                ldy #8
003E21  3  B1 68                lda (z80_ix),y
003E23  3  85 rr                sta dispy
003E25  3  A9 0B                lda #11
003E27  3  20 25 26             jsr drpob
003E2A  3  A9 05        c01338: lda #5
003E2C  3  C5 rr                cmp scno
003E2E  3  F0 03                beq *+5
003E30  3  4C AE 3E             jmp c01634
003E33  3  A9 0A                lda #10
003E35  3  C5 rr                cmp varopt
003E37  3  F0 03                beq *+5
003E39  3  4C AE 3E             jmp c01634
003E3C  3  A0 08                ldy #8
003E3E  3  B1 68                lda (z80_ix),y
003E40  3  85 rr                sta vare
003E42  3  A0 09                ldy #9
003E44  3  B1 68                lda (z80_ix),y
003E46  3  85 rr                sta varf
003E48  3  A9 48                lda #72
003E4A  3  A0 08                ldy #8
003E4C  3  91 68                sta (z80_ix),y
003E4E  3  A9 B0                lda #176
003E50  3  A0 09                ldy #9
003E52  3  91 68                sta (z80_ix),y
003E54  3  A0 09                ldy #9
003E56  3  B1 68                lda (z80_ix),y	; PUT
003E58  3  85 rr                sta dispx
003E5A  3  A0 08                ldy #8
003E5C  3  B1 68                lda (z80_ix),y
003E5E  3  85 rr                sta dispy
003E60  3  A9 0A                lda #10
003E62  3  20 25 26             jsr drpob
003E65  3  A9 3C                lda #60		; BEEP
003E67  3  0A                   asl a
003E68  3  8D 19 23             sta sndtyp
003E6B  3  A9 FF                lda #255	; REMOVE
003E6D  3  A0 05                ldy #5
003E6F  3  91 68                sta (z80_ix),y
003E71  3  A5 rr                lda varf
003E73  3  A0 09                ldy #9
003E75  3  91 68                sta (z80_ix),y
003E77  3  A5 rr                lda vare
003E79  3  A0 08                ldy #8
003E7B  3  91 68                sta (z80_ix),y
003E7D  3  A9 4B                lda #75 	; DELAY
003E7F  3  20 81 22             jsr delay
003E82  3  A9 18                lda #24
003E84  3  85 62                sta z80_c
003E86  3  A0 09                ldy #9
003E88  3  B1 68                lda (z80_ix),y
003E8A  3  18                   clc
003E8B  3  65 62                adc z80_c
003E8D  3  A0 09                ldy #9
003E8F  3  91 68                sta (z80_ix),y
003E91  3  A0 09                ldy #9
003E93  3  B1 68                lda (z80_ix),y	; PUT
003E95  3  85 rr                sta dispx
003E97  3  A0 08                ldy #8
003E99  3  B1 68                lda (z80_ix),y
003E9B  3  85 rr                sta dispy
003E9D  3  A9 0E                lda #14
003E9F  3  20 25 26             jsr drpob
003EA2  3  A5 rr                lda varf
003EA4  3  A0 09                ldy #9
003EA6  3  91 68                sta (z80_ix),y
003EA8  3  A9 46                lda #70		; BEEP
003EAA  3  0A                   asl a
003EAB  3  8D 19 23             sta sndtyp
003EAE  3  A9 0E        c01634: lda #14
003EB0  3  C5 rr                cmp scno
003EB2  3  F0 03                beq *+5
003EB4  3  4C 00 3F             jmp c01819
003EB7  3  A9 0E                lda #14
003EB9  3  C5 rr                cmp varopt
003EBB  3  F0 03                beq *+5
003EBD  3  4C 00 3F             jmp c01819
003EC0  3  A9 09                lda #9		; AT
003EC2  3  85 rr                sta chary
003EC4  3  A9 0B                lda #11
003EC6  3  85 rr                sta charx
003EC8  3  A9 37                lda #55 		; PUTBLOCK
003ECA  3  20 19 29             jsr pbpattr
003ECD  3  A9 48                lda #72 		; PUTBLOCK
003ECF  3  20 19 29             jsr pbpattr
003ED2  3  A9 49                lda #73 		; PUTBLOCK
003ED4  3  20 19 29             jsr pbpattr
003ED7  3  A9 3C                lda #60		; BEEP
003ED9  3  0A                   asl a
003EDA  3  8D 19 23             sta sndtyp
003EDD  3  A9 FF                lda #255	; REMOVE
003EDF  3  A0 05                ldy #5
003EE1  3  91 68                sta (z80_ix),y
003EE3  3  A9 C8                lda #200
003EE5  3  A0 08                ldy #8
003EE7  3  91 68                sta (z80_ix),y
003EE9  3  A9 18                lda #24
003EEB  3  A0 09                ldy #9
003EED  3  91 68                sta (z80_ix),y
003EEF  3  A0 09                ldy #9
003EF1  3  B1 68                lda (z80_ix),y	; PUT
003EF3  3  85 rr                sta dispx
003EF5  3  A0 08                ldy #8
003EF7  3  B1 68                lda (z80_ix),y
003EF9  3  85 rr                sta dispy
003EFB  3  A9 0E                lda #14
003EFD  3  20 25 26             jsr drpob
003F00  3  A9 10        c01819: lda #16
003F02  3  C5 rr                cmp scno
003F04  3  F0 03                beq *+5
003F06  3  4C 63 3F             jmp c02039
003F09  3  A9 09                lda #9
003F0B  3  C5 rr                cmp varopt
003F0D  3  F0 03                beq *+5
003F0F  3  4C 63 3F             jmp c02039
003F12  3  A9 48                lda #72
003F14  3  A0 08                ldy #8
003F16  3  91 68                sta (z80_ix),y
003F18  3  A9 78                lda #120
003F1A  3  A0 09                ldy #9
003F1C  3  91 68                sta (z80_ix),y
003F1E  3  A0 09                ldy #9
003F20  3  B1 68                lda (z80_ix),y	; PUT
003F22  3  85 rr                sta dispx
003F24  3  A0 08                ldy #8
003F26  3  B1 68                lda (z80_ix),y
003F28  3  85 rr                sta dispy
003F2A  3  A9 09                lda #9
003F2C  3  20 25 26             jsr drpob
003F2F  3  A9 3C                lda #60		; BEEP
003F31  3  0A                   asl a
003F32  3  8D 19 23             sta sndtyp
003F35  3  A9 FF                lda #255	; REMOVE
003F37  3  A0 05                ldy #5
003F39  3  91 68                sta (z80_ix),y
003F3B  3  A9 32                lda #50 	; DELAY
003F3D  3  20 81 22             jsr delay
003F40  3  A9 50                lda #80		; BEEP
003F42  3  0A                   asl a
003F43  3  8D 19 23             sta sndtyp
003F46  3  A9 80                lda #128
003F48  3  A0 08                ldy #8
003F4A  3  91 68                sta (z80_ix),y
003F4C  3  A9 A8                lda #168
003F4E  3  A0 09                ldy #9
003F50  3  91 68                sta (z80_ix),y
003F52  3  A0 09                ldy #9
003F54  3  B1 68                lda (z80_ix),y	; PUT
003F56  3  85 rr                sta dispx
003F58  3  A0 08                ldy #8
003F5A  3  B1 68                lda (z80_ix),y
003F5C  3  85 rr                sta dispy
003F5E  3  A9 02                lda #2
003F60  3  20 25 26             jsr drpob
003F63  3  A9 0F        c02039: lda #15
003F65  3  C5 rr                cmp scno
003F67  3  F0 03                beq *+5
003F69  3  4C B0 3F             jmp c02212
003F6C  3  A9 11                lda #17
003F6E  3  C5 rr                cmp varopt
003F70  3  F0 03                beq *+5
003F72  3  4C B0 3F             jmp c02212
003F75  3  A9 0F                lda #15		; AT
003F77  3  85 rr                sta chary
003F79  3  A9 14                lda #20
003F7B  3  85 rr                sta charx
003F7D  3  A9 34                lda #52 		; PUTBLOCK
003F7F  3  20 19 29             jsr pbpattr
003F82  3  A9 34                lda #52 		; PUTBLOCK
003F84  3  20 19 29             jsr pbpattr
003F87  3  A9 3C                lda #60		; BEEP
003F89  3  0A                   asl a
003F8A  3  8D 19 23             sta sndtyp
003F8D  3  A9 FF                lda #255	; REMOVE
003F8F  3  A0 05                ldy #5
003F91  3  91 68                sta (z80_ix),y
003F93  3  A9 C8                lda #200
003F95  3  A0 08                ldy #8
003F97  3  91 68                sta (z80_ix),y
003F99  3  A9 18                lda #24
003F9B  3  A0 09                ldy #9
003F9D  3  91 68                sta (z80_ix),y
003F9F  3  A0 09                ldy #9
003FA1  3  B1 68                lda (z80_ix),y	; PUT
003FA3  3  85 rr                sta dispx
003FA5  3  A0 08                ldy #8
003FA7  3  B1 68                lda (z80_ix),y
003FA9  3  85 rr                sta dispy
003FAB  3  A9 11                lda #17
003FAD  3  20 25 26             jsr drpob
003FB0  3  A9 17        c02212: lda #23
003FB2  3  C5 rr                cmp scno
003FB4  3  F0 03                beq *+5
003FB6  3  4C F3 3F             jmp c02362
003FB9  3  A9 12                lda #18
003FBB  3  C5 rr                cmp varopt
003FBD  3  F0 03                beq *+5
003FBF  3  4C F3 3F             jmp c02362
003FC2  3  A9 05                lda #5		; AT
003FC4  3  85 rr                sta chary
003FC6  3  A9 18                lda #24
003FC8  3  85 rr                sta charx
003FCA  3  A9 00                lda #0 		; PUTBLOCK
003FCC  3  20 19 29             jsr pbpattr
003FCF  3  A9 2D                lda #45		; BEEP
003FD1  3  0A                   asl a
003FD2  3  8D 19 23             sta sndtyp
003FD5  3  A9 32                lda #50 	; DELAY
003FD7  3  20 81 22             jsr delay
003FDA  3  A9 06                lda #6		; AT
003FDC  3  85 rr                sta chary
003FDE  3  A9 18                lda #24
003FE0  3  85 rr                sta charx
003FE2  3  A9 00                lda #0 		; PUTBLOCK
003FE4  3  20 19 29             jsr pbpattr
003FE7  3  A9 2D                lda #45		; BEEP
003FE9  3  0A                   asl a
003FEA  3  8D 19 23             sta sndtyp
003FED  3  A9 FF                lda #255	; REMOVE
003FEF  3  A0 05                ldy #5
003FF1  3  91 68                sta (z80_ix),y
003FF3  3  A9 0A        c02362: lda #10
003FF5  3  C5 rr                cmp scno
003FF7  3  F0 03                beq *+5
003FF9  3  4C 1E 40             jmp c02457
003FFC  3  A9 10                lda #16
003FFE  3  C5 rr                cmp varopt
004000  3  F0 03                beq *+5
004002  3  4C 1E 40             jmp c02457
004005  3  A9 04                lda #4		; AT
004007  3  85 rr                sta chary
004009  3  A9 11                lda #17
00400B  3  85 rr                sta charx
00400D  3  A9 00                lda #0 		; PUTBLOCK
00400F  3  20 19 29             jsr pbpattr
004012  3  A9 2D                lda #45		; BEEP
004014  3  0A                   asl a
004015  3  8D 19 23             sta sndtyp
004018  3  A9 FF                lda #255	; REMOVE
00401A  3  A0 05                ldy #5
00401C  3  91 68                sta (z80_ix),y
00401E  3  60           c02457: rts
00401F  3               evnt03:
00401F  3  A9 00                lda #0
004021  3  C5 rr                cmp varc
004023  3  F0 03                beq *+5
004025  3  4C C2 40             jmp d00367
004028  3  A9 00                lda #0
00402A  3  A0 0B                ldy #11
00402C  3  D1 68                cmp (z80_ix),y
00402E  3  F0 03                beq *+5
004030  3  4C 7C 40             jmp d00206
004033  3  20 5F 2B             jsr cangl	; CANGOLEFT
004036  3  F0 03                beq :+
004038  3  4C 73 40             jmp d00188
00403B  3               :
00403B  3  A0 09                ldy #9 		; SPRITELEFT
00403D  3  B1 68                lda (z80_ix),y
00403F  3  38                   sec
004040  3  E9 02                sbc #2
004042  3  91 68                sta (z80_ix),y
004044  3  A9 10                lda #16
004046  3  85 62                sta z80_c
004048  3  A0 09                ldy #9
00404A  3  B1 68                lda (z80_ix),y
00404C  3  38                   sec
00404D  3  E5 62                sbc z80_c
00404F  3  A0 09                ldy #9
004051  3  91 68                sta (z80_ix),y
004053  3  20 2A 2B             jsr cangd	; CANGODOWN
004056  3  F0 03                beq :+
004058  3  4C 61 40             jmp d00148
00405B  3               :
00405B  3  A9 01                lda #1
00405D  3  A0 0B                ldy #11
00405F  3  91 68                sta (z80_ix),y
004061  3  A9 10        d00148: lda #16
004063  3  85 62                sta z80_c
004065  3  A0 09                ldy #9
004067  3  B1 68                lda (z80_ix),y
004069  3  18                   clc
00406A  3  65 62                adc z80_c
00406C  3  A0 09                ldy #9
00406E  3  91 68                sta (z80_ix),y
004070  3  4C 79 40             jmp d00201
004073  3  A9 01        d00188: lda #1
004075  3  A0 0B                ldy #11
004077  3  91 68                sta (z80_ix),y
004079  3  4C C2 40     d00201: jmp d00367
00407C  3  20 81 2C     d00206: jsr cangr	; CANGORIGHT
00407F  3  F0 03                beq :+
004081  3  4C BC 40             jmp d00353
004084  3               :
004084  3  A0 09                ldy #9 		; SPRITERIGHT
004086  3  B1 68                lda (z80_ix),y
004088  3  18                   clc
004089  3  69 02                adc #2
00408B  3  91 68                sta (z80_ix),y
00408D  3  A9 10                lda #16
00408F  3  85 62                sta z80_c
004091  3  A0 09                ldy #9
004093  3  B1 68                lda (z80_ix),y
004095  3  18                   clc
004096  3  65 62                adc z80_c
004098  3  A0 09                ldy #9
00409A  3  91 68                sta (z80_ix),y
00409C  3  20 2A 2B             jsr cangd	; CANGODOWN
00409F  3  F0 03                beq :+
0040A1  3  4C AA 40             jmp d00314
0040A4  3               :
0040A4  3  A9 00                lda #0
0040A6  3  A0 0B                ldy #11
0040A8  3  91 68                sta (z80_ix),y
0040AA  3  A9 10        d00314: lda #16
0040AC  3  85 62                sta z80_c
0040AE  3  A0 09                ldy #9
0040B0  3  B1 68                lda (z80_ix),y
0040B2  3  38                   sec
0040B3  3  E5 62                sbc z80_c
0040B5  3  A0 09                ldy #9
0040B7  3  91 68                sta (z80_ix),y
0040B9  3  4C C2 40             jmp d00367
0040BC  3  A9 00        d00353: lda #0
0040BE  3  A0 0B                ldy #11
0040C0  3  91 68                sta (z80_ix),y
0040C2  3  A9 00        d00367: lda #0		; ANIMATE
0040C4  3  20 AC 32             jsr animsp
0040C7  3  A9 00                lda #0 	; COLLISION
0040C9  3  85 63                sta z80_b
0040CB  3  20 F7 32             jsr sktyp
0040CE  3  B0 03                bcs :+
0040D0  3  4C D7 40             jmp d00414
0040D3  3               :
0040D3  3  A9 01                lda #1 		; KILL
0040D5  3  85 rr                sta deadf
0040D7  3  60           d00414: rts
0040D8  3               evnt04:
0040D8  3  A9 00                lda #0
0040DA  3  A0 0B                ldy #11
0040DC  3  D1 68                cmp (z80_ix),y
0040DE  3  F0 03                beq *+5
0040E0  3  4C 14 41             jmp e00131
0040E3  3  20 2A 2B             jsr cangd	; CANGODOWN
0040E6  3  F0 03                beq :+
0040E8  3  4C 05 41             jmp e00099
0040EB  3               :
0040EB  3  A0 08                ldy #8 		; SPRITEDOWN
0040ED  3  B1 68                lda (z80_ix),y
0040EF  3  18                   clc
0040F0  3  69 02                adc #2
0040F2  3  91 68                sta (z80_ix),y
0040F4  3  A9 00                lda #0
0040F6  3  C5 rr                cmp vara
0040F8  3  F0 03                beq *+5
0040FA  3  4C 02 41             jmp e00094
0040FD  3  A9 00                lda #0		; ANIMATE
0040FF  3  20 AC 32             jsr animsp
004102  3  4C 11 41     e00094: jmp e00127
004105  3  A9 01        e00099: lda #1
004107  3  A0 0B                ldy #11
004109  3  91 68                sta (z80_ix),y
00410B  3  A9 23                lda #35		; BEEP
00410D  3  0A                   asl a
00410E  3  8D 19 23             sta sndtyp
004111  3  4C 42 41     e00127: jmp e00233
004114  3  20 F5 2A     e00131: jsr cangu	; CANGOUP
004117  3  F0 03                beq :+
004119  3  4C 36 41             jmp e00205
00411C  3               :
00411C  3  A0 08                ldy #8 		; SPRITEUP
00411E  3  B1 68                lda (z80_ix),y
004120  3  38                   sec
004121  3  E9 02                sbc #2
004123  3  91 68                sta (z80_ix),y
004125  3  A9 00                lda #0
004127  3  C5 rr                cmp vara
004129  3  F0 03                beq *+5
00412B  3  4C 33 41             jmp e00201
00412E  3  A9 00                lda #0		; ANIMATE
004130  3  20 AC 32             jsr animsp
004133  3  4C 42 41     e00201: jmp e00233
004136  3  A9 00        e00205: lda #0
004138  3  A0 0B                ldy #11
00413A  3  91 68                sta (z80_ix),y
00413C  3  A9 23                lda #35		; BEEP
00413E  3  0A                   asl a
00413F  3  8D 19 23             sta sndtyp
004142  3  A9 00        e00233: lda #0 	; COLLISION
004144  3  85 63                sta z80_b
004146  3  20 F7 32             jsr sktyp
004149  3  B0 03                bcs :+
00414B  3  4C 52 41             jmp e00269
00414E  3               :
00414E  3  A9 01                lda #1 		; KILL
004150  3  85 rr                sta deadf
004152  3  60           e00269: rts
004153  3               evnt05:
004153  3  A9 00                lda #0
004155  3  C5 rr                cmp vara
004157  3  F0 03                beq *+5
004159  3  4C 61 41             jmp f00030
00415C  3  A9 00                lda #0		; ANIMATE
00415E  3  20 AC 32             jsr animsp
004161  3  A9 00        f00030: lda #0 	; COLLISION
004163  3  85 63                sta z80_b
004165  3  20 F7 32             jsr sktyp
004168  3  B0 03                bcs :+
00416A  3  4C 22 42             jmp f00451
00416D  3               :
00416D  3  A5 rr                lda joyval	; KEY
00416F  3  29 40                and #64
004171  3  F0 03                beq :+
004173  3  4C 22 42             jmp f00451
004176  3               :
004176  3  A9 09                lda #9		; INVENTORY
004178  3  AA                   tax
004179  3  20 2F 20             jsr minve
00417C  3  A9 19                lda #25
00417E  3  C5 rr                cmp scno
004180  3  F0 03                beq *+5
004182  3  4C BE 41             jmp f00238
004185  3  A9 04                lda #4
004187  3  C5 rr                cmp varopt
004189  3  F0 03                beq *+5
00418B  3  4C BE 41             jmp f00238
00418E  3  A9 09                lda #9		; AT
004190  3  85 rr                sta chary
004192  3  A9 0E                lda #14
004194  3  85 rr                sta charx
004196  3  A9 00                lda #0 		; PUTBLOCK
004198  3  20 19 29             jsr pbpattr
00419B  3  A9 00                lda #0 		; PUTBLOCK
00419D  3  20 19 29             jsr pbpattr
0041A0  3  A9 0A                lda #10		; AT
0041A2  3  85 rr                sta chary
0041A4  3  A9 0E                lda #14
0041A6  3  85 rr                sta charx
0041A8  3  A9 00                lda #0 		; PUTBLOCK
0041AA  3  20 19 29             jsr pbpattr
0041AD  3  A9 00                lda #0 		; PUTBLOCK
0041AF  3  20 19 29             jsr pbpattr
0041B2  3  A9 32                lda #50		; BEEP
0041B4  3  0A                   asl a
0041B5  3  8D 19 23             sta sndtyp
0041B8  3  A9 FF                lda #255	; REMOVE
0041BA  3  A0 05                ldy #5
0041BC  3  91 68                sta (z80_ix),y
0041BE  3  A9 01        f00238: lda #1
0041C0  3  C5 rr                cmp scno
0041C2  3  F0 03                beq *+5
0041C4  3  4C 00 42             jmp f00387
0041C7  3  A9 04                lda #4
0041C9  3  C5 rr                cmp varopt
0041CB  3  F0 03                beq *+5
0041CD  3  4C 00 42             jmp f00387
0041D0  3  A9 0F                lda #15		; AT
0041D2  3  85 rr                sta chary
0041D4  3  A9 16                lda #22
0041D6  3  85 rr                sta charx
0041D8  3  A9 00                lda #0 		; PUTBLOCK
0041DA  3  20 19 29             jsr pbpattr
0041DD  3  A9 00                lda #0 		; PUTBLOCK
0041DF  3  20 19 29             jsr pbpattr
0041E2  3  A9 10                lda #16		; AT
0041E4  3  85 rr                sta chary
0041E6  3  A9 16                lda #22
0041E8  3  85 rr                sta charx
0041EA  3  A9 00                lda #0 		; PUTBLOCK
0041EC  3  20 19 29             jsr pbpattr
0041EF  3  A9 00                lda #0 		; PUTBLOCK
0041F1  3  20 19 29             jsr pbpattr
0041F4  3  A9 32                lda #50		; BEEP
0041F6  3  0A                   asl a
0041F7  3  8D 19 23             sta sndtyp
0041FA  3  A9 FF                lda #255	; REMOVE
0041FC  3  A0 05                ldy #5
0041FE  3  91 68                sta (z80_ix),y
004200  3  A9 05        f00387: lda #5
004202  3  C5 rr                cmp scno
004204  3  F0 03                beq *+5
004206  3  4C 22 42             jmp f00451
004209  3  A9 03                lda #3
00420B  3  C5 rr                cmp vark
00420D  3  F0 03                beq *+5
00420F  3  4C 22 42             jmp f00451
004212  3  A9 13                lda #19
004214  3  C5 rr                cmp varopt
004216  3  F0 03                beq *+5
004218  3  4C 22 42             jmp f00451
00421B  3  A9 1B                lda #27
00421D  3  85 rr                sta scno
00421F  3  20 00 34             jsr nwscr
004222  3  60           f00451: rts
004223  3               evnt06:
004223  3  A9 00                lda #0
004225  3  A0 0B                ldy #11
004227  3  D1 68                cmp (z80_ix),y
004229  3  F0 03                beq *+5
00422B  3  4C 4B 42             jmp g00089
00422E  3  20 5F 2B             jsr cangl	; CANGOLEFT
004231  3  F0 03                beq :+
004233  3  4C 42 42             jmp g00071
004236  3               :
004236  3  A0 09                ldy #9 		; SPRITELEFT
004238  3  B1 68                lda (z80_ix),y
00423A  3  38                   sec
00423B  3  E9 02                sbc #2
00423D  3  91 68                sta (z80_ix),y
00423F  3  4C 48 42             jmp g00084
004242  3  A9 01        g00071: lda #1
004244  3  A0 0B                ldy #11
004246  3  91 68                sta (z80_ix),y
004248  3  4C 65 42     g00084: jmp g00150
00424B  3  20 81 2C     g00089: jsr cangr	; CANGORIGHT
00424E  3  F0 03                beq :+
004250  3  4C 5F 42             jmp g00137
004253  3               :
004253  3  A0 09                ldy #9 		; SPRITERIGHT
004255  3  B1 68                lda (z80_ix),y
004257  3  18                   clc
004258  3  69 02                adc #2
00425A  3  91 68                sta (z80_ix),y
00425C  3  4C 65 42             jmp g00150
00425F  3  A9 00        g00137: lda #0
004261  3  A0 0B                ldy #11
004263  3  91 68                sta (z80_ix),y
004265  3  A9 01        g00150: lda #1
004267  3  A0 0B                ldy #11
004269  3  D1 68                cmp (z80_ix),y
00426B  3  F0 03                beq *+5
00426D  3  4C 8F 42             jmp g00237
004270  3  A9 00                lda #0
004272  3  C5 rr                cmp vara
004274  3  F0 03                beq *+5
004276  3  4C 8F 42             jmp g00237
004279  3  A9 00                lda #0		; ANIMATE
00427B  3  20 AC 32             jsr animsp
00427E  3  A9 03                lda #3
004280  3  A0 07                ldy #7
004282  3  D1 68                cmp (z80_ix),y
004284  3  F0 03                beq *+5
004286  3  4C 8F 42             jmp g00237
004289  3  A9 23                lda #35		; BEEP
00428B  3  0A                   asl a
00428C  3  8D 19 23             sta sndtyp
00428F  3  A9 00        g00237: lda #0
004291  3  A0 0B                ldy #11
004293  3  D1 68                cmp (z80_ix),y
004295  3  F0 03                beq *+5
004297  3  4C B9 42             jmp g00324
00429A  3  A9 00                lda #0
00429C  3  C5 rr                cmp vara
00429E  3  F0 03                beq *+5
0042A0  3  4C B9 42             jmp g00324
0042A3  3  A9 00                lda #0		; ANIMATEBACK
0042A5  3  20 D2 32             jsr animbk
0042A8  3  A9 03                lda #3
0042AA  3  A0 07                ldy #7
0042AC  3  D1 68                cmp (z80_ix),y
0042AE  3  F0 03                beq *+5
0042B0  3  4C B9 42             jmp g00324
0042B3  3  A9 23                lda #35		; BEEP
0042B5  3  0A                   asl a
0042B6  3  8D 19 23             sta sndtyp
0042B9  3  A9 00        g00324: lda #0 	; COLLISION
0042BB  3  85 63                sta z80_b
0042BD  3  20 F7 32             jsr sktyp
0042C0  3  B0 03                bcs :+
0042C2  3  4C C9 42             jmp g00360
0042C5  3               :
0042C5  3  A9 01                lda #1 		; KILL
0042C7  3  85 rr                sta deadf
0042C9  3  60           g00360: rts
0042CA  3               evnt07:
0042CA  3  60                   rts
0042CB  3               evnt08:
0042CB  3  60                   rts
0042CC  3               evnt09:
0042CC  3  A9 04                lda #4
0042CE  3  A0 05                ldy #5
0042D0  3  D1 68                cmp (z80_ix),y
0042D2  3  F0 03                beq *+5
0042D4  3  4C DD 42             jmp j00037
0042D7  3  A9 01                lda #1
0042D9  3  A0 0B                ldy #11
0042DB  3  91 68                sta (z80_ix),y
0042DD  3  A9 00        j00037: lda #0
0042DF  3  A0 05                ldy #5
0042E1  3  D1 68                cmp (z80_ix),y
0042E3  3  F0 03                beq *+5
0042E5  3  4C FF 42             jmp j00112
0042E8  3  A5 rr                lda varo
0042EA  3  A0 08                ldy #8
0042EC  3  91 68                sta (z80_ix),y
0042EE  3  A5 rr                lda varp
0042F0  3  A0 09                ldy #9
0042F2  3  91 68                sta (z80_ix),y
0042F4  3  A0 08                ldy #8
0042F6  3  B1 68                lda (z80_ix),y
0042F8  3  18                   clc
0042F9  3  69 01                adc #1
0042FB  3  A0 08                ldy #8
0042FD  3  91 68                sta (z80_ix),y
0042FF  3  60           j00112: rts
004300  3               evnt10:
004300  3  A5 rr                lda vara
004302  3  18                   clc
004303  3  69 01                adc #1
004305  3  85 rr                sta vara
004307  3  A9 02                lda #2
004309  3  C5 rr                cmp vara
00430B  3  90 03                bcc *+5
00430D  3  4C 14 43             jmp k00042
004310  3  A9 00                lda #0
004312  3  85 rr                sta vara
004314  3  A9 01        k00042: lda #1
004316  3  C5 rr                cmp varh
004318  3  F0 03                beq *+5
00431A  3  4C 4D 43             jmp k00162
00431D  3  A9 0C                lda #12		; GOT
00431F  3  20 F4 25             jsr gotob
004322  3  C9 FF                cmp #255
004324  3  F0 03                beq :+
004326  3  4C 4D 43             jmp k00162
004329  3               :
004329  3  A9 C8                lda #200
00432B  3  A0 08                ldy #8
00432D  3  91 68                sta (z80_ix),y
00432F  3  A9 58                lda #88
004331  3  A0 09                ldy #9
004333  3  91 68                sta (z80_ix),y
004335  3  A0 09                ldy #9
004337  3  B1 68                lda (z80_ix),y	; PUT
004339  3  85 rr                sta dispx
00433B  3  A0 08                ldy #8
00433D  3  B1 68                lda (z80_ix),y
00433F  3  85 rr                sta dispy
004341  3  A9 0C                lda #12
004343  3  20 25 26             jsr drpob
004346  3  A5 rr                lda varh
004348  3  18                   clc
004349  3  69 01                adc #1
00434B  3  85 rr                sta varh
00434D  3  A9 01        k00162: lda #1
00434F  3  C5 rr                cmp vari
004351  3  F0 03                beq *+5
004353  3  4C 86 43             jmp k00283
004356  3  A9 0D                lda #13		; GOT
004358  3  20 F4 25             jsr gotob
00435B  3  C9 FF                cmp #255
00435D  3  F0 03                beq :+
00435F  3  4C 86 43             jmp k00283
004362  3               :
004362  3  A9 C8                lda #200
004364  3  A0 08                ldy #8
004366  3  91 68                sta (z80_ix),y
004368  3  A9 18                lda #24
00436A  3  A0 09                ldy #9
00436C  3  91 68                sta (z80_ix),y
00436E  3  A0 09                ldy #9
004370  3  B1 68                lda (z80_ix),y	; PUT
004372  3  85 rr                sta dispx
004374  3  A0 08                ldy #8
004376  3  B1 68                lda (z80_ix),y
004378  3  85 rr                sta dispy
00437A  3  A9 0D                lda #13
00437C  3  20 25 26             jsr drpob
00437F  3  A5 rr                lda vari
004381  3  18                   clc
004382  3  69 01                adc #1
004384  3  85 rr                sta vari
004386  3  A9 1B        k00283: lda #27
004388  3  C5 rr                cmp scno
00438A  3  F0 03                beq *+5
00438C  3  4C BE 43             jmp k00402
00438F  3  A9 00                lda #0
004391  3  C5 rr                cmp varg
004393  3  F0 03                beq *+5
004395  3  4C BE 43             jmp k00402
004398  3  A9 02                lda #2		; AT
00439A  3  85 rr                sta chary
00439C  3  A9 03                lda #3
00439E  3  85 rr                sta charx
0043A0  3  A9 0B                lda #11  	; MESSAGE
0043A2  3  20 51 2E             jsr dmsg
0043A5  3  A9 12                lda #18		; AT
0043A7  3  85 rr                sta chary
0043A9  3  A9 0C                lda #12
0043AB  3  85 rr                sta charx
0043AD  3  A9 14                lda #20  	; MESSAGE
0043AF  3  20 51 2E             jsr dmsg
0043B2  3  A5 rr                lda varg
0043B4  3  18                   clc
0043B5  3  69 01                adc #1
0043B7  3  85 rr                sta varg
0043B9  3  A9 19                lda #25 	; DELAY
0043BB  3  20 81 22             jsr delay
0043BE  3  A9 1B        k00402: lda #27
0043C0  3  C5 rr                cmp scno
0043C2  3  F0 03                beq *+5
0043C4  3  4C CE 43             jmp k00437
0043C7  3  20 00 8C             jsr prskey	; WAITKEY
0043CA  3  A9 01                lda #1		; ENDGAME
0043CC  3  85 rr                sta gamwon
0043CE  3  60           k00437: rts
0043CF  3               evnt11:
0043CF  3  60                   rts
0043D0  3               evnt12:
0043D0  3  20 5B 23             jsr cls		; CLS
0043D3  3  A9 02                lda #2		; AT
0043D5  3  85 rr                sta chary
0043D7  3  A9 0A                lda #10
0043D9  3  85 rr                sta charx
0043DB  3  A9 00                lda #0  	; MESSAGE
0043DD  3  20 51 2E             jsr dmsg
0043E0  3  A9 01                lda #1
0043E2  3  85 rr                sta chary
0043E4  3  A9 12                lda #18  	; MESSAGE
0043E6  3  20 51 2E             jsr dmsg
0043E9  3  A9 03                lda #3		; AT
0043EB  3  85 rr                sta chary
0043ED  3  A9 00                lda #0
0043EF  3  85 rr                sta charx
0043F1  3  A9 0C                lda #12  	; MESSAGE
0043F3  3  20 51 2E             jsr dmsg
0043F6  3  A9 11                lda #17		; AT
0043F8  3  85 rr                sta chary
0043FA  3  A9 00                lda #0
0043FC  3  85 rr                sta charx
0043FE  3  A9 0D                lda #13  	; MESSAGE
004400  3  20 51 2E             jsr dmsg
004403  3  A9 01                lda #1		; AT
004405  3  85 rr                sta chary
004407  3  A9 0F                lda #15
004409  3  85 rr                sta charx
00440B  3  A9 0E                lda #14  	; MESSAGE
00440D  3  20 51 2E             jsr dmsg
004410  3  A9 07                lda #7		; AT
004412  3  85 rr                sta chary
004414  3  A9 02                lda #2
004416  3  85 rr                sta charx
004418  3  A9 0F                lda #15  	; MESSAGE
00441A  3  20 51 2E             jsr dmsg
00441D  3  A9 03                lda #3		; AT
00441F  3  85 rr                sta chary
004421  3  A9 1D                lda #29
004423  3  85 rr                sta charx
004425  3  A9 10                lda #16  	; MESSAGE
004427  3  20 51 2E             jsr dmsg
00442A  3  A9 05                lda #5		; AT
00442C  3  85 rr                sta chary
00442E  3  A9 08                lda #8
004430  3  85 rr                sta charx
004432  3  A9 0A                lda #10  	; MESSAGE
004434  3  20 51 2E             jsr dmsg
004437  3  A9 09                lda #9		; AT
004439  3  85 rr                sta chary
00443B  3  A9 08                lda #8
00443D  3  85 rr                sta charx
00443F  3  A9 0A                lda #10  	; MESSAGE
004441  3  20 51 2E             jsr dmsg
004444  3  A9 07                lda #7		; AT
004446  3  85 rr                sta chary
004448  3  A9 17                lda #23
00444A  3  85 rr                sta charx
00444C  3  A9 0A                lda #10  	; MESSAGE
00444E  3  20 51 2E             jsr dmsg
004451  3  A9 08                lda #8		; AT
004453  3  85 rr                sta chary
004455  3  A9 17                lda #23
004457  3  85 rr                sta charx
004459  3  A9 0A                lda #10  	; MESSAGE
00445B  3  20 51 2E             jsr dmsg
00445E  3  A9 03                lda #3		; AT
004460  3  85 rr                sta chary
004462  3  A9 14                lda #20
004464  3  85 rr                sta charx
004466  3  A9 08                lda #8  	; MESSAGE
004468  3  20 51 2E             jsr dmsg
00446B  3  A9 0B                lda #11		; AT
00446D  3  85 rr                sta chary
00446F  3  A9 0A                lda #10
004471  3  85 rr                sta charx
004473  3  A9 08                lda #8  	; MESSAGE
004475  3  20 51 2E             jsr dmsg
004478  3  A9 0B                lda #11		; AT
00447A  3  85 rr                sta chary
00447C  3  A9 0C                lda #12
00447E  3  85 rr                sta charx
004480  3  A9 08                lda #8  	; MESSAGE
004482  3  20 51 2E             jsr dmsg
004485  3  A9 0B                lda #11		; AT
004487  3  85 rr                sta chary
004489  3  A9 0B                lda #11
00448B  3  85 rr                sta charx
00448D  3  A9 08                lda #8  	; MESSAGE
00448F  3  20 51 2E             jsr dmsg
004492  3  A9 13                lda #19		; AT
004494  3  85 rr                sta chary
004496  3  A9 00                lda #0
004498  3  85 rr                sta charx
00449A  3  A9 01                lda #1		; PRINTMODE
00449C  3  85 rr                sta prtmod
00449E  3  A9 11                lda #17  	; MESSAGE
0044A0  3  20 51 2E             jsr dmsg
0044A3  3  A9 00                lda #0		; PRINTMODE
0044A5  3  85 rr                sta prtmod
0044A7  3  A9 15                lda #21		; AT
0044A9  3  85 rr                sta chary
0044AB  3  A9 00                lda #0
0044AD  3  85 rr                sta charx
0044AF  3  A9 16                lda #22  	; MESSAGE
0044B1  3  20 51 2E             jsr dmsg
0044B4  3               
0044B4  3               rtcon:			; CONTROLMENU
0044B4  3  20 D6 22             jsr vsync
0044B7  3  A9 00                lda #0
0044B9  3  85 rr                sta contrl
0044BB  3  AD 8A 8B             lda keys+7
0044BE  3  20 12 8C             jsr ktest
0044C1  3  90 18                bcc rtcon1
0044C3  3  A9 01                lda #1
0044C5  3  85 rr                sta contrl
0044C7  3  AD 8B 8B             lda keys+8
0044CA  3  20 12 8C             jsr ktest
0044CD  3  90 0C                bcc rtcon1
0044CF  3  A9 02                lda #2
0044D1  3  85 rr                sta contrl
0044D3  3  AD 8C 8B             lda keys+9
0044D6  3  20 12 8C             jsr ktest
0044D9  3  B0 D9                bcs rtcon
0044DB  3                       rtcon1:
0044DB  3  60                   rts
0044DC  3               evnt13:
0044DC  3  20 5B 23             jsr cls		; CLS
0044DF  3  A9 14                lda #20		; AT
0044E1  3  85 rr                sta chary
0044E3  3  A9 02                lda #2
0044E5  3  85 rr                sta charx
0044E7  3  A9 00                lda #0  	; MESSAGE
0044E9  3  20 51 2E             jsr dmsg
0044EC  3  A9 00                lda #0
0044EE  3  85 rr                sta varc
0044F0  3  A9 00                lda #0
0044F2  3  85 rr                sta varg
0044F4  3  A9 80                lda #128
0044F6  3  85 rr                sta varo
0044F8  3  A9 20                lda #32
0044FA  3  85 rr                sta varp
0044FC  3  A9 03                lda #3
0044FE  3  85 rr                sta numlif
004500  3  A9 00                lda #0
004502  3  85 rr                sta vark
004504  3  A9 00                lda #0
004506  3  85 rr                sta vare
004508  3  A9 00                lda #0
00450A  3  85 rr                sta varf
00450C  3  A9 00                lda #0		; AT
00450E  3  85 rr                sta chary
004510  3  A9 01                lda #1
004512  3  85 rr                sta charx
004514  3  A9 03                lda #3  	; MESSAGE
004516  3  20 51 2E             jsr dmsg
004519  3  A9 15                lda #21 	; REPEAT
00451B  3  85 rr                sta loopa
00451D  3  A9 01        n00142: lda #1
00451F  3  85 rr                sta charx
004521  3  A9 03                lda #3  	; MESSAGE
004523  3  20 51 2E             jsr dmsg
004526  3  C6 rr                dec loopa	; ENDREPEAT
004528  3  F0 03                beq :+
00452A  3  4C 1D 45             jmp n00142
00452D  3               :
00452D  3  A9 01                lda #1
00452F  3  85 rr                sta charx
004531  3  A9 04                lda #4  	; MESSAGE
004533  3  20 51 2E             jsr dmsg
004536  3  A9 00                lda #0		; AT
004538  3  85 rr                sta chary
00453A  3  A9 1E                lda #30
00453C  3  85 rr                sta charx
00453E  3  A9 03                lda #3  	; MESSAGE
004540  3  20 51 2E             jsr dmsg
004543  3  A9 15                lda #21 	; REPEAT
004545  3  85 rr                sta loopa
004547  3  A9 1E        n00237: lda #30
004549  3  85 rr                sta charx
00454B  3  A9 03                lda #3  	; MESSAGE
00454D  3  20 51 2E             jsr dmsg
004550  3  C6 rr                dec loopa	; ENDREPEAT
004552  3  F0 03                beq :+
004554  3  4C 47 45             jmp n00237
004557  3               :
004557  3  A9 16                lda #22		; AT
004559  3  85 rr                sta chary
00455B  3  A9 02                lda #2
00455D  3  85 rr                sta charx
00455F  3  A9 05                lda #5  	; MESSAGE
004561  3  20 51 2E             jsr dmsg
004564  3  A9 16                lda #22		; AT
004566  3  85 rr                sta chary
004568  3  A9 1E                lda #30
00456A  3  85 rr                sta charx
00456C  3  A9 06                lda #6  	; MESSAGE
00456E  3  20 51 2E             jsr dmsg
004571  3  A9 15                lda #21		; AT
004573  3  85 rr                sta chary
004575  3  A9 0E                lda #14
004577  3  85 rr                sta charx
004579  3  A9 01                lda #1  	; MESSAGE
00457B  3  20 51 2E             jsr dmsg
00457E  3  A9 15                lda #21		; AT
004580  3  85 rr                sta chary
004582  3  A9 1D                lda #29
004584  3  85 rr                sta charx
004586  3  A5 rr                lda numlif	; DISPLAY
004588  3  20 87 33             jsr disply
00458B  3  A9 15                lda #21		; AT
00458D  3  85 rr                sta chary
00458F  3  A9 02                lda #2
004591  3  85 rr                sta charx
004593  3  A9 07                lda #7  	; MESSAGE
004595  3  20 51 2E             jsr dmsg
004598  3  A9 14                lda #20		; AT
00459A  3  85 rr                sta chary
00459C  3  A9 0E                lda #14
00459E  3  85 rr                sta charx
0045A0  3  A9 02                lda #2  	; MESSAGE
0045A2  3  20 51 2E             jsr dmsg
0045A5  3  A9 14                lda #20		; AT
0045A7  3  85 rr                sta chary
0045A9  3  A9 1D                lda #29
0045AB  3  85 rr                sta charx
0045AD  3  A5 rr                lda vark	; DISPLAY
0045AF  3  20 87 33             jsr disply
0045B2  3  60                   rts
0045B3  3               evnt14:
0045B3  3  60                   rts
0045B4  3               evnt15:
0045B4  3  60                   rts
0045B5  3               evnt16:
0045B5  3  A9 3C                lda #60		; BEEP
0045B7  3  0A                   asl a
0045B8  3  8D 19 23             sta sndtyp
0045BB  3  A9 14                lda #20 	; DELAY
0045BD  3  20 81 22             jsr delay
0045C0  3  A9 32                lda #50		; BEEP
0045C2  3  0A                   asl a
0045C3  3  8D 19 23             sta sndtyp
0045C6  3  A5 rr                lda numlif
0045C8  3  38                   sec
0045C9  3  E9 01                sbc #1
0045CB  3  85 rr                sta numlif
0045CD  3  A5 rr                lda varo
0045CF  3  A0 08                ldy #8
0045D1  3  91 68                sta (z80_ix),y
0045D3  3  A5 rr                lda varp
0045D5  3  A0 09                ldy #9
0045D7  3  91 68                sta (z80_ix),y
0045D9  3  A9 15                lda #21		; AT
0045DB  3  85 rr                sta chary
0045DD  3  A9 1D                lda #29
0045DF  3  85 rr                sta charx
0045E1  3  A5 rr                lda numlif	; DISPLAY
0045E3  3  20 87 33             jsr disply
0045E6  3  60                   rts
0045E7  3               evnt17:
0045E7  3  A9 32                lda #50 	; DELAY
0045E9  3  20 81 22             jsr delay
0045EC  3  20 5B 23             jsr cls		; CLS
0045EF  3  A9 0A                lda #10		; AT
0045F1  3  85 rr                sta chary
0045F3  3  A9 0A                lda #10
0045F5  3  85 rr                sta charx
0045F7  3  A9 00                lda #0  	; MESSAGE
0045F9  3  20 51 2E             jsr dmsg
0045FC  3  A9 09                lda #9
0045FE  3  85 rr                sta chary
004600  3  A9 12                lda #18  	; MESSAGE
004602  3  20 51 2E             jsr dmsg
004605  3  A9 0C                lda #12		; AT
004607  3  85 rr                sta chary
004609  3  A9 0C                lda #12
00460B  3  85 rr                sta charx
00460D  3  A9 15                lda #21  	; MESSAGE
00460F  3  20 51 2E             jsr dmsg
004612  3  A9 0E                lda #14		; AT
004614  3  85 rr                sta chary
004616  3  A9 0F                lda #15
004618  3  85 rr                sta charx
00461A  3  A9 0E                lda #14  	; MESSAGE
00461C  3  20 51 2E             jsr dmsg
00461F  3  A9 C8                lda #200 	; DELAY
004621  3  20 81 22             jsr delay
004624  3  60                   rts
004625  3               evnt18:
004625  3  20 5B 23             jsr cls		; CLS
004628  3  A9 32                lda #50 	; DELAY
00462A  3  20 81 22             jsr delay
00462D  3  A9 01                lda #1		; AT
00462F  3  85 rr                sta chary
004631  3  A9 00                lda #0
004633  3  85 rr                sta charx
004635  3  A9 13                lda #19  	; MESSAGE
004637  3  20 51 2E             jsr dmsg
00463A  3  A9 15                lda #21		; AT
00463C  3  85 rr                sta chary
00463E  3  A9 0B                lda #11
004640  3  85 rr                sta charx
004642  3  A9 14                lda #20  	; MESSAGE
004644  3  20 51 2E             jsr dmsg
004647  3  20 00 8C             jsr prskey	; WAITKEY
00464A  3  60                   rts
00464B  3               evnt19:
00464B  3  60                   rts
00464C  3               evnt20:
00464C  3  60                   rts
00464D  3  60           ptcusr: rts
00464E  3               msgdat:
00464E  3  46 4F 47 47          .byte "FOGGYS;QUEST",141
004652  3  59 53 3B 51  
004656  3  55 45 53 54  
00465B  3  20 20 20 20          .byte "        LIVES:",141
00465F  3  20 20 20 20  
004663  3  4C 49 56 45  
00466A  3  20 20 20 20          .byte "     CRYSTALS:",141
00466E  3  20 43 52 59  
004672  3  53 54 41 4C  
004679  3  40 8D                .byte "@",141
00467B  3  60 8D                .byte "`",141
00467D  3  5F 5F 5F 5F          .byte "____________________________",141
004681  3  5F 5F 5F 5F  
004685  3  5F 5F 5F 5F  
00469A  3  24 8D                .byte "$",141
00469C  3  42 59 3A 3B          .byte "BY:;J.BLYTHE",141
0046A0  3  4A 2E 42 4C  
0046A4  3  59 54 48 45  
0046A9  3  78 8D                .byte "x",141
0046AB  3  3B 4B 45 59          .byte ";KEY;BLUE;;",13
0046AF  3  3B 42 4C 55  
0046B3  3  45 3B 3B 0D  
0046B7  3  43 52 59 53          .byte "CRYSTAL;BLU",13
0046BB  3  54 41 4C 3B  
0046BF  3  42 4C 55 0D  
0046C3  3  43 52 59 53          .byte "CRYSTAL;RED",13
0046C7  3  54 41 4C 3B  
0046CB  3  52 45 44 0D  
0046CF  3  43 52 59 53          .byte "CRYSTAL;GRN",13
0046D3  3  54 41 4C 3B  
0046D7  3  47 52 4E 0D  
0046DB  3  3B 3B 4B 45          .byte ";;KEY;RED;;",13
0046DF  3  59 3B 52 45  
0046E3  3  44 3B 3B 0D  
0046E7  3  3B 4B 45 59          .byte ";KEY;PINK;;",13
0046EB  3  3B 50 49 4E  
0046EF  3  4B 3B 3B 0D  
0046F3  3  3B 3B 4C 41          .byte ";;LADDER;;;",13
0046F7  3  44 44 45 52  
0046FB  3  3B 3B 3B 0D  
0046FF  3  3B 3B 3B 42          .byte ";;;BOMB;;;;",13
004703  3  4F 4D 42 3B  
004707  3  3B 3B 3B 0D  
00470B  3  3B 54 48 45          .byte ";THE;CUBE;;",13
00470F  3  3B 43 55 42  
004713  3  45 3B 3B 0D  
004717  3  3B 54 48 45          .byte ";THE;SKULL;",13
00471B  3  3B 53 4B 55  
00471F  3  4C 4C 3B 0D  
004723  3  3B 50 49 54          .byte ";PIT;PLANT;",13
004727  3  3B 50 4C 41  
00472B  3  4E 54 3B 0D  
00472F  3  3B 3B 3B 52          .byte ";;;ROCK;;;;",13
004733  3  4F 43 4B 3B  
004737  3  3B 3B 3B 0D  
00473B  3  45 58 54 52          .byte "EXTRA;LIFE;",13
00473F  3  41 3B 4C 49  
004743  3  46 45 3B 0D  
004747  3  45 58 54 52          .byte "EXTRA;LIFE;",13
00474B  3  41 3B 4C 49  
00474F  3  46 45 3B 0D  
004753  3  3B 3B 41 3B          .byte ";;A;SEED;;;",13
004757  3  53 45 45 44  
00475B  3  3B 3B 3B 0D  
00475F  3  3B 3B 42 41          .byte ";;BALLOON;;",13
004763  3  4C 4C 4F 4F  
004767  3  4E 3B 3B 0D  
00476B  3  3B 50 49 43          .byte ";PICK;AXE;;",13
00476F  3  4B 3B 41 58  
004773  3  45 3B 3B 0D  
004777  3  3B 3B 42 52          .byte ";;BRICKS;;;",13
00477B  3  49 43 4B 53  
00477F  3  3B 3B 3B 0D  
004783  3  3B 49 43 45          .byte ";ICE;DRILL;",13
004787  3  3B 44 52 49  
00478B  3  4C 4C 3B 0D  
00478F  3  3B 3B 53 50          .byte ";;SPLICER;;",141
004793  3  4C 49 43 45  
004797  3  52 3B 3B 8D  
00479B  3  7A 8D                .byte "z",141
00479D  3  57 45 4C 4C          .byte "WELL;DONE;FOGGY!!",141
0047A1  3  3B 44 4F 4E  
0047A5  3  45 3B 46 4F  
0047AF  3  3B 3B 3B 3B          .byte ";;;;;;;;w___________x__y;;;.",13
0047B3  3  3B 3B 3B 3B  
0047B7  3  77 5F 5F 5F  
0047CC  3  3B 2E 3B 3B          .byte ";.;;;;;;@;;;;;;;;;;;;;;@",13
0047D0  3  3B 3B 3B 3B  
0047D4  3  40 3B 3B 3B  
0047E5  3  3B 3B 3B 3B          .byte ";;;;;;;;z;;;CONTROLS;;;@;.",13
0047E9  3  3B 3B 3B 3B  
0047ED  3  7A 3B 3B 3B  
004800  3  3B 3B 3B 3B          .byte ";;;;;.;;@;;;;;;;;;;;;;;@;;;;;;.",13
004804  3  3B 2E 3B 3B  
004808  3  40 3B 3B 3B  
004820  3  3B 3B 3B 3B          .byte ";;;;.;;;@;;1;KEYBOARD;;z",13
004824  3  2E 3B 3B 3B  
004828  3  40 3B 3B 31  
004839  3  3B 3B 3B 3B          .byte ";;;;;;;;@;;2;JOYKEY;;;;@",13
00483D  3  3B 3B 3B 3B  
004841  3  40 3B 3B 32  
004852  3  3B 3B 3B 3B          .byte ";;;;;;;;z;;3;JOYMMC;;;;@;;;;.",13
004856  3  3B 3B 3B 3B  
00485A  3  7A 3B 3B 33  
004870  3  3B 3B 3B 3B          .byte ";;;;;;.;@;;;;;;;;;;;;;;@;;;;;.",13
004874  3  3B 3B 2E 3B  
004878  3  40 3B 3B 3B  
00488F  3  3B 3B 2E 3B          .byte ";;.;;;;;`_xx___________$;;.",13
004893  3  3B 3B 3B 3B  
004897  3  60 5F 78 78  
0048AB  3  0D                   .byte 13
0048AC  3  3B 3B 3B 3B          .byte ";;;;;;;;;;KEYS:O,P,Q,A",13
0048B0  3  3B 3B 3B 3B  
0048B4  3  3B 3B 4B 45  
0048C3  3  3B 3B 3B 3B          .byte ";;;;;;;;;;;;;;;I-INV.",13
0048C7  3  3B 3B 3B 3B  
0048CB  3  3B 3B 3B 3B  
0048D9  3  3B 3B 3B 3B          .byte ";;;;;;;;;;;;;;;SPC-JUMP",141
0048DD  3  3B 3B 3B 3B  
0048E1  3  3B 3B 3B 3B  
0048F1  3  3B 3B 3B 3B          .byte ";;;;;;;;;RUCKSACK;GAMES",13
0048F5  3  3B 3B 3B 3B  
0048F9  3  3B 52 55 43  
004909  3  3B 3B 3B 3B          .byte ";;;;;;;c;2017;JOHN;BLYTHE",141
00490D  3  3B 3B 3B 63  
004911  3  3B 32 30 31  
004923  3  2F 2B 8D             .byte "/+",141
004926  3  3E 8D                .byte ">",141
004928  3  3F 8D                .byte "?",141
00492A  3  3B 3B 3B 3B          .byte ";;;;;;;;;POWERED;BY;AGD",141
00492E  3  3B 3B 3B 3B  
004932  3  3B 50 4F 57  
004942  3  3B 3B 3B 3B          .byte ";;;;;;;;;;v",13
004946  3  3B 3B 3B 3B  
00494A  3  3B 3B 76 0D  
00494E  3  3B 3B 3B 3B          .byte ";;;;;;;;;;u",141
004952  3  3B 3B 3B 3B  
004956  3  3B 3B 75 8D  
00495A  3  3B 3B 3B 48          .byte ";;;HOME;AT;LAST.;FOGGY;TAKES;A",13
00495E  3  4F 4D 45 3B  
004962  3  41 54 3B 4C  
004979  3  3B 0D                .byte ";",13
00497B  3  3B 57 45 4C          .byte ";WELL;EARNED;REST;FROM;HOLIDAYS.",13
00497F  3  4C 3B 45 41  
004983  3  52 4E 45 44  
00499C  3  3B 0D                .byte ";",13
00499E  3  3B 3B 3B 3B          .byte ";;;;TIME;FOR;BIT;OF;TREASURE",13
0049A2  3  54 49 4D 45  
0049A6  3  3B 46 4F 52  
0049BB  3  3B 0D                .byte ";",13
0049BD  3  3B 3B 3B 3B          .byte ";;;;;;;;HUNTING;INSTEAD!!!",13
0049C1  3  3B 3B 3B 3B  
0049C5  3  48 55 4E 54  
0049D8  3  3B 0D                .byte ";",13
0049DA  3  3B 0D                .byte ";",13
0049DC  3  3B 3B 3B 3B          .byte ";;;;;;;THANKS;FOR;PLAYING!",13
0049E0  3  3B 3B 3B 54  
0049E4  3  48 41 4E 4B  
0049F7  3  3B 0D                .byte ";",13
0049F9  3  3B 43 52 45          .byte ";CREDITS..",13
0049FD  3  44 49 54 53  
004A01  3  2E 2E 0D     
004A04  3  3B 0D                .byte ";",13
004A06  3  3B 43 4F 44          .byte ";CODING;AND;GFX;-;JOHN;BLYTHE",13
004A0A  3  49 4E 47 3B  
004A0E  3  41 4E 44 3B  
004A24  3  3B 41 44 44          .byte ";ADDITIONAL;CODE;-;ANDY;JOHNS",13
004A28  3  49 54 49 4F  
004A2C  3  4E 41 4C 3B  
004A42  3  3B 0D                .byte ";",13
004A44  3  3B 4D 41 4E          .byte ";MANY;THANKS;TO..",13
004A48  3  59 3B 54 48  
004A4C  3  41 4E 4B 53  
004A56  3  3B 4A 4F 4E          .byte ";JONATHAN CAULDWELL;FOR;AGD",141
004A5A  3  41 54 48 41  
004A5E  3  4E 20 43 41  
004A72  3  50 52 45 53          .byte "PRESS;A;KEY",141
004A76  3  53 3B 41 3B  
004A7A  3  4B 45 59 8D  
004A7E  3  49 53 3B 4F          .byte "IS;OVER..",141
004A82  3  56 45 52 2E  
004A86  3  2E 8D        
004A88  3  3B 3B 3B 3B          .byte ";;;;;6502;CODE;KEES;VAN;OSS",141
004A8C  3  3B 36 35 30  
004A90  3  32 3B 43 4F  
004AA4  3               nummsg:
004AA4  3  17                   .byte 23
004AA5  3               chgfx:
004AA5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004AA9  3  00 00 00 00  
004AAD  3  0C 6C 61 80          .byte 12,108,97,128,30,222,222,32
004AB1  3  1E DE DE 20  
004AB5  3  46 06 66 61          .byte 70,6,102,97,0,51,179,48
004AB9  3  00 33 B3 30  
004ABD  3  00 08 41 00          .byte 0,8,65,0,16,0,130,32
004AC1  3  10 00 82 20  
004AC5  3  7E 81 8D 8D          .byte 126,129,141,141,129,161,129,126
004AC9  3  81 A1 81 7E  
004ACD  3  FF 7E BD 5A          .byte 255,126,189,90,165,66,129,0
004AD1  3  A5 42 81 00  
004AD5  3  FF 7E BD 5A          .byte 255,126,189,90,165,66,129,0
004AD9  3  A5 42 81 00  
004ADD  3  FF 7E BD 5A          .byte 255,126,189,90,165,66,129,0
004AE1  3  A5 42 81 00  
004AE5  3  FF 7E BD 5A          .byte 255,126,189,90,165,66,129,0
004AE9  3  A5 42 81 00  
004AED  3  EF EF AA 45          .byte 239,239,170,69,170,0,239,0
004AF1  3  AA 00 EF 00  
004AF5  3  F8 FE AE 57          .byte 248,254,174,87,171,23,139,87
004AF9  3  AB 17 8B 57  
004AFD  3  4B 57 4B 57          .byte 75,87,75,87,0,87,75,87
004B01  3  00 57 4B 57  
004B05  3  4B 57 4A 44          .byte 75,87,74,68,34,48,0,0
004B09  3  22 30 00 00  
004B0D  3  7E FF AA 55          .byte 126,255,170,85,3,187,56,66
004B11  3  03 BB 38 42  
004B15  3  B7 B7 00 F8          .byte 183,183,0,248,240,0,192,128
004B19  3  F0 00 C0 80  
004B1D  3  D7 D7 00 1D          .byte 215,215,0,29,13,0,3,1
004B21  3  0D 00 03 01  
004B25  3  0C 19 1E 4C          .byte 12,25,30,76,56,28,14,24
004B29  3  38 1C 0E 18  
004B2D  3  0C 58 30 26          .byte 12,88,48,38,72,68,36,24
004B31  3  48 44 24 18  
004B35  3  EF EF AA 45          .byte 239,239,170,69,170,0,239,0
004B39  3  AA 00 EF 00  
004B3D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004B41  3  00 00 00 00  
004B45  3  B5 00 60 06          .byte 181,0,96,6,0,170,0,85
004B49  3  00 AA 00 55  
004B4D  3  60 60 60 FF          .byte 96,96,96,255,170,0,64,96
004B51  3  AA 00 40 60  
004B55  3  06 06 06 FF          .byte 6,6,6,255,170,0,4,6
004B59  3  AA 00 04 06  
004B5D  3  84 29 10 5A          .byte 132,41,16,90,32,148,1,40
004B61  3  20 94 01 28  
004B65  3  4F 9F 00 4F          .byte 79,159,0,79,0,159,149,79
004B69  3  00 9F 95 4F  
004B6D  3  FA FD 00 FA          .byte 250,253,0,250,0,253,85,250
004B71  3  00 FD 55 FA  
004B75  3  7E 81 8D 8D          .byte 126,129,141,141,129,161,129,126
004B79  3  81 A1 81 7E  
004B7D  3  7E 81 8D 8D          .byte 126,129,141,141,129,161,129,126
004B81  3  81 A1 81 7E  
004B85  3  A8 82 2A A2          .byte 168,130,42,162,136,42,162,42
004B89  3  88 2A A2 2A  
004B8D  3  A8 82 2A A2          .byte 168,130,42,162,136,42,162,42
004B91  3  88 2A A2 2A  
004B95  3  A8 82 2A A2          .byte 168,130,42,162,136,42,162,42
004B99  3  88 2A A2 2A  
004B9D  3  00 00 00 00          .byte 0,0,0,0,66,16,36,255
004BA1  3  42 10 24 FF  
004BA5  3  DB FF 55 AA          .byte 219,255,85,170,255,0,30,12
004BA9  3  FF 00 1E 0C  
004BAD  3  6D FF 55 AA          .byte 109,255,85,170,255,0,120,48
004BB1  3  FF 00 78 30  
004BB5  3  3F 40 B4 A0          .byte 63,64,180,160,128,133,255,0
004BB9  3  80 85 FF 00  
004BBD  3  FC 02 01 05          .byte 252,2,1,5,13,161,255,0
004BC1  3  0D A1 FF 00  
004BC5  3  F0 FC 57 AC          .byte 240,252,87,172,240,44,5,14
004BC9  3  F0 2C 05 0E  
004BCD  3  0D 3F F5 3A          .byte 13,63,245,58,15,26,160,112
004BD1  3  0F 1A A0 70  
004BD5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004BD9  3  00 00 00 00  
004BDD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004BE1  3  00 00 00 00  
004BE5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004BE9  3  00 00 00 00  
004BED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004BF1  3  00 00 00 00  
004BF5  3  FE 7C B8 50          .byte 254,124,184,80,160,64,128,0
004BF9  3  A0 40 80 00  
004BFD  3  7F 3E 1D 0A          .byte 127,62,29,10,5,2,1,0
004C01  3  05 02 01 00  
004C05  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004C09  3  00 00 00 00  
004C0D  3  00 00 00 00          .byte 0,0,0,0,32,0,0,0
004C11  3  20 00 00 00  
004C15  3  00 00 00 08          .byte 0,0,0,8,0,0,0,0
004C19  3  00 00 00 00  
004C1D  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
004C21  3  FF FF FF FF  
004C25  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
004C29  3  FF FF FF FF  
004C2D  3  80 40 A0 D0          .byte 128,64,160,208,232,244,250,253
004C31  3  E8 F4 FA FD  
004C35  3  F7 FF F7 00          .byte 247,255,247,0,127,255,127,255
004C39  3  7F FF 7F FF  
004C3D  3  01 02 05 0B          .byte 1,2,5,11,23,47,95,191
004C41  3  17 2F 5F BF  
004C45  3  00 6A 40 00          .byte 0,106,64,0,64,0,66,0
004C49  3  40 00 42 00  
004C4D  3  18 18 24 24          .byte 24,24,36,36,102,126,231,255
004C51  3  66 7E E7 FF  
004C55  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004C59  3  00 00 00 00  
004C5D  3  36 6F DD DD          .byte 54,111,221,221,122,50,1,0
004C61  3  7A 32 01 00  
004C65  3  7C D6 BF FF          .byte 124,214,191,255,235,213,170,124
004C69  3  EB D5 AA 7C  
004C6D  3  38 FE FF DD          .byte 56,254,255,221,243,127,157,98
004C71  3  F3 7F 9D 62  
004C75  3  00 70 EC DE          .byte 0,112,236,222,254,251,223,62
004C79  3  FE FB DF 3E  
004C7D  3  00 0F 3F 6F          .byte 0,15,63,111,254,249,239,112
004C81  3  FE F9 EF 70  
004C85  3  3C 4E BF FF          .byte 60,78,191,255,245,106,52,24
004C89  3  F5 6A 34 18  
004C8D  3  08 08 04 08          .byte 8,8,4,8,16,32,16,8
004C91  3  10 20 10 08  
004C95  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
004C99  3  FF FF FF FF  
004C9D  3  55 AB 57 AF          .byte 85,171,87,175,95,191,127,255
004CA1  3  5F BF 7F FF  
004CA5  3  01 02 05 0A          .byte 1,2,5,10,21,42,85,170
004CA9  3  15 2A 55 AA  
004CAD  3  3D 68 D0 A8          .byte 61,104,208,168,208,128,192,128
004CB1  3  D0 80 C0 80  
004CB5  3  BC 16 0B 15          .byte 188,22,11,21,11,1,3,1
004CB9  3  0B 01 03 01  
004CBD  3  FF 75 AA 10          .byte 255,117,170,16,66,0,0,0
004CC1  3  42 00 00 00  
004CC5  3  00 AA 00 55          .byte 0,170,0,85,170,85,170,85
004CC9  3  AA 55 AA 55  
004CCD  3  8B C5 E3 F1          .byte 139,197,227,241,185,221,175,151
004CD1  3  B9 DD AF 97  
004CD5  3  FF FA D2 52          .byte 255,250,210,82,64,64,0,0
004CD9  3  40 40 00 00  
004CDD  3  00 00 00 00          .byte 0,0,0,0,0,0,76,255
004CE1  3  00 00 4C FF  
004CE5  3  5A A5 DB 66          .byte 90,165,219,102,189,102,60,90
004CE9  3  BD 66 3C 5A  
004CED  3  4C F6 FB BB          .byte 76,246,251,187,95,70,128,0
004CF1  3  5F 46 80 00  
004CF5  3  0E 17 2D 2C          .byte 14,23,45,44,44,88,224,0
004CF9  3  2C 58 E0 00  
004CFD  3  66 5B A4 5A          .byte 102,91,164,90,219,25,100,154
004D01  3  DB 19 64 9A  
004D05  3  01 82 66 5A          .byte 1,130,102,90,38,28,0,0
004D09  3  26 1C 00 00  
004D0D  3  A7 A7 A7 A7          .byte 167,167,167,167,167,167,167,167
004D11  3  A7 A7 A7 A7  
004D15  3  F2 EA F2 EA          .byte 242,234,242,234,242,234,242,234
004D19  3  F2 EA F2 EA  
004D1D  3               bprop:
004D1D  3  00                   .byte 0
004D1E  3  02                   .byte 2
004D1F  3  02                   .byte 2
004D20  3  02                   .byte 2
004D21  3  02                   .byte 2
004D22  3  02                   .byte 2
004D23  3  02                   .byte 2
004D24  3  02                   .byte 2
004D25  3  02                   .byte 2
004D26  3  00                   .byte 0
004D27  3  00                   .byte 0
004D28  3  00                   .byte 0
004D29  3  00                   .byte 0
004D2A  3  02                   .byte 2
004D2B  3  00                   .byte 0
004D2C  3  00                   .byte 0
004D2D  3  00                   .byte 0
004D2E  3  00                   .byte 0
004D2F  3  00                   .byte 0
004D30  3  00                   .byte 0
004D31  3  05                   .byte 5
004D32  3  03                   .byte 3
004D33  3  03                   .byte 3
004D34  3  02                   .byte 2
004D35  3  02                   .byte 2
004D36  3  02                   .byte 2
004D37  3  02                   .byte 2
004D38  3  02                   .byte 2
004D39  3  02                   .byte 2
004D3A  3  02                   .byte 2
004D3B  3  02                   .byte 2
004D3C  3  00                   .byte 0
004D3D  3  02                   .byte 2
004D3E  3  02                   .byte 2
004D3F  3  02                   .byte 2
004D40  3  02                   .byte 2
004D41  3  02                   .byte 2
004D42  3  02                   .byte 2
004D43  3  00                   .byte 0
004D44  3  00                   .byte 0
004D45  3  00                   .byte 0
004D46  3  00                   .byte 0
004D47  3  00                   .byte 0
004D48  3  00                   .byte 0
004D49  3  02                   .byte 2
004D4A  3  00                   .byte 0
004D4B  3  00                   .byte 0
004D4C  3  00                   .byte 0
004D4D  3  02                   .byte 2
004D4E  3  00                   .byte 0
004D4F  3  02                   .byte 2
004D50  3  00                   .byte 0
004D51  3  03                   .byte 3
004D52  3  00                   .byte 0
004D53  3  00                   .byte 0
004D54  3  01                   .byte 1
004D55  3  02                   .byte 2
004D56  3  01                   .byte 1
004D57  3  01                   .byte 1
004D58  3  01                   .byte 1
004D59  3  02                   .byte 2
004D5A  3  00                   .byte 0
004D5B  3  00                   .byte 0
004D5C  3  00                   .byte 0
004D5D  3  00                   .byte 0
004D5E  3  02                   .byte 2
004D5F  3  02                   .byte 2
004D60  3  02                   .byte 2
004D61  3  02                   .byte 2
004D62  3  02                   .byte 2
004D63  3  00                   .byte 0
004D64  3  00                   .byte 0
004D65  3  01                   .byte 1
004D66  3  01                   .byte 1
004D67  3  00                   .byte 0
004D68  3  00                   .byte 0
004D69  3  00                   .byte 0
004D6A  3  00                   .byte 0
004D6B  3  00                   .byte 0
004D6C  3               sprgfx:
004D6C  3  00 00 0C 00          .byte 0,0,12,0,23,0,7,192,15,224,30,112,61,168,61,36,125,36,126,32,255,252,198,252,187,4,125,250,125,247,60,15
004D70  3  17 00 07 C0  
004D74  3  0F E0 1E 70  
004D8C  3  00 00 03 00          .byte 0,0,3,0,5,192,1,240,3,248,7,156,15,106,15,73,31,73,31,136,63,255,49,191,46,193,159,126,223,125,207,3
004D90  3  05 C0 01 F0  
004D94  3  03 F8 07 9C  
004DAC  3  00 00 00 C0          .byte 0,0,0,192,1,112,0,124,0,254,1,231,131,218,67,210,71,210,7,226,207,255,204,111,75,176,167,223,119,223,243,192
004DB0  3  01 70 00 7C  
004DB4  3  00 FE 01 E7  
004DCC  3  00 00 00 30          .byte 0,0,0,48,0,92,0,31,128,63,192,121,160,246,144,244,145,244,129,248,243,255,243,27,18,236,233,247,221,247,60,240
004DD0  3  00 5C 00 1F  
004DD4  3  80 3F C0 79  
004DEC  3  00 00 1E 00          .byte 0,0,30,0,7,128,7,192,15,224,31,48,62,212,62,144,126,144,127,16,241,252,238,252,95,4,31,120,15,116,0,12
004DF0  3  07 80 07 C0  
004DF4  3  0F E0 1F 30  
004E0C  3  00 00 07 80          .byte 0,0,7,128,1,224,1,240,3,248,7,204,15,181,15,164,31,164,31,196,60,127,59,191,23,193,7,222,3,221,0,3
004E10  3  01 E0 01 F0  
004E14  3  03 F8 07 CC  
004E2C  3  00 00 01 E0          .byte 0,0,1,224,0,120,0,124,0,254,1,243,67,237,3,233,7,233,7,241,207,31,206,239,69,240,129,247,64,247,192,0
004E30  3  00 78 00 7C  
004E34  3  00 FE 01 F3  
004E4C  3  00 00 00 78          .byte 0,0,0,120,0,30,0,31,128,63,192,124,80,251,64,250,65,250,65,252,243,199,243,187,17,124,224,125,208,61,48,0
004E50  3  00 1E 00 1F  
004E54  3  80 3F C0 7C  
004E6C  3  10 00 0E 00          .byte 16,0,14,0,7,128,7,192,15,224,31,144,63,104,63,72,127,72,127,136,255,252,252,124,123,132,55,216,7,208,27,192
004E70  3  07 80 07 C0  
004E74  3  0F E0 1F 90  
004E8C  3  04 00 03 80          .byte 4,0,3,128,1,224,1,240,3,248,7,228,15,218,15,210,31,210,31,226,63,255,63,31,30,225,13,246,1,244,6,240
004E90  3  01 E0 01 F0  
004E94  3  03 F8 07 E4  
004EAC  3  01 00 00 E0          .byte 1,0,0,224,0,120,0,124,0,254,1,249,131,246,131,244,135,244,135,248,207,255,207,199,71,184,131,125,0,125,1,188
004EB0  3  00 78 00 7C  
004EB4  3  00 FE 01 F9  
004ECC  3  00 40 00 38          .byte 0,64,0,56,0,30,0,31,128,63,64,126,160,253,32,253,33,253,33,254,243,255,243,241,17,238,96,223,64,31,0,111
004ED0  3  00 1E 00 1F  
004ED4  3  80 3F 40 7E  
004EEC  3  00 00 1E 00          .byte 0,0,30,0,7,128,7,192,15,224,31,48,62,212,62,144,126,144,127,16,255,252,241,252,110,4,95,120,31,116,15,12
004EF0  3  07 80 07 C0  
004EF4  3  0F E0 1F 30  
004F0C  3  00 00 07 80          .byte 0,0,7,128,1,224,1,240,3,248,7,204,15,181,15,164,31,164,31,196,63,255,60,127,27,129,23,222,7,221,3,195
004F10  3  01 E0 01 F0  
004F14  3  03 F8 07 CC  
004F2C  3  00 00 01 E0          .byte 0,0,1,224,0,120,0,124,0,254,1,243,67,237,3,233,7,233,7,241,207,255,207,31,70,224,133,247,65,247,192,240
004F30  3  00 78 00 7C  
004F34  3  00 FE 01 F3  
004F4C  3  00 00 00 78          .byte 0,0,0,120,0,30,0,31,128,63,192,124,80,251,64,250,65,250,65,252,243,255,243,199,17,184,225,125,208,125,48,60
004F50  3  00 1E 00 1F  
004F54  3  80 3F C0 7C  
004F6C  3  00 00 00 30          .byte 0,0,0,48,0,232,3,224,7,240,14,120,21,188,36,188,36,190,4,126,63,255,63,99,32,221,95,190,239,190,240,60
004F70  3  00 E8 03 E0  
004F74  3  07 F0 0E 78  
004F8C  3  00 00 00 0C          .byte 0,0,0,12,0,58,0,248,1,252,3,158,5,111,9,47,137,47,129,31,207,255,207,216,72,55,151,239,187,239,60,15
004F90  3  00 3A 00 F8  
004F94  3  01 FC 03 9E  
004FAC  3  00 00 00 03          .byte 0,0,0,3,128,14,0,62,0,127,128,231,193,91,194,75,226,75,224,71,243,255,51,246,210,13,229,251,238,251,207,3
004FB0  3  80 0E 00 3E  
004FB4  3  00 7F 80 E7  
004FCC  3  00 00 C0 00          .byte 0,0,192,0,160,3,128,15,192,31,224,57,240,86,240,146,248,146,248,17,252,255,140,253,116,131,249,126,251,190,243,192
004FD0  3  A0 03 80 0F  
004FD4  3  C0 1F E0 39  
004FEC  3  00 00 00 78          .byte 0,0,0,120,1,224,3,224,7,240,12,248,43,124,9,124,9,126,8,254,63,143,63,119,32,250,30,248,46,240,48,0
004FF0  3  01 E0 03 E0  
004FF4  3  07 F0 0C F8  
00500C  3  00 00 00 1E          .byte 0,0,0,30,0,120,0,248,1,252,3,62,10,223,2,95,130,95,130,63,207,227,207,221,136,62,7,190,11,188,12,0
005010  3  00 78 00 F8  
005014  3  01 FC 03 3E  
00502C  3  00 00 80 07          .byte 0,0,128,7,0,30,0,62,0,127,128,207,194,183,192,151,224,151,224,143,243,248,115,247,162,15,129,239,2,239,3,0
005030  3  00 1E 00 3E  
005034  3  00 7F 80 CF  
00504C  3  00 00 E0 01          .byte 0,0,224,1,128,7,128,15,192,31,224,51,240,173,240,37,248,37,248,35,60,254,220,253,232,131,224,123,192,187,0,192
005050  3  80 07 80 0F  
005054  3  C0 1F E0 33  
00506C  3  00 08 00 70          .byte 0,8,0,112,1,224,3,224,7,240,9,248,22,252,18,252,18,254,17,254,63,255,62,63,33,222,27,236,11,224,3,216
005070  3  01 E0 03 E0  
005074  3  07 F0 09 F8  
00508C  3  00 02 00 1C          .byte 0,2,0,28,0,120,0,248,1,252,2,126,5,191,4,191,132,191,132,127,207,255,207,143,136,119,6,251,2,248,0,246
005090  3  00 78 00 F8  
005094  3  01 FC 02 7E  
0050AC  3  80 00 00 07          .byte 128,0,0,7,0,30,0,62,0,127,128,159,193,111,193,47,225,47,225,31,243,255,243,227,226,29,193,190,0,190,128,61
0050B0  3  00 1E 00 3E  
0050B4  3  00 7F 80 9F  
0050CC  3  20 00 C0 01          .byte 32,0,192,1,128,7,128,15,192,31,224,39,240,91,240,75,248,75,248,71,252,255,252,248,120,135,176,111,128,47,96,15
0050D0  3  80 07 80 0F  
0050D4  3  C0 1F E0 27  
0050EC  3  00 00 00 78          .byte 0,0,0,120,1,224,3,224,7,240,12,248,43,124,9,124,9,126,8,254,63,255,63,143,32,118,30,250,46,248,48,240
0050F0  3  01 E0 03 E0  
0050F4  3  07 F0 0C F8  
00510C  3  00 00 00 1E          .byte 0,0,0,30,0,120,0,248,1,252,3,62,10,223,2,95,130,95,130,63,207,255,207,227,136,29,135,190,11,190,12,60
005110  3  00 78 00 F8  
005114  3  01 FC 03 3E  
00512C  3  00 00 80 07          .byte 0,0,128,7,0,30,0,62,0,127,128,207,194,183,192,151,224,151,224,143,243,255,243,248,98,7,161,239,130,239,3,15
005130  3  00 1E 00 3E  
005134  3  00 7F 80 CF  
00514C  3  00 00 E0 01          .byte 0,0,224,1,128,7,128,15,192,31,224,51,240,173,240,37,248,37,248,35,252,255,60,254,216,129,232,123,224,187,192,195
005150  3  80 07 80 0F  
005154  3  C0 1F E0 33  
00516C  3  03 C0 05 A0          .byte 3,192,5,160,14,112,14,240,31,248,31,248,63,252,63,252,63,252,127,254,127,235,23,87,106,173,245,91,247,224,240,0
005170  3  0E 70 0E F0  
005174  3  1F F8 1F F8  
00518C  3  00 F0 01 68          .byte 0,240,1,104,3,156,3,188,7,254,7,254,15,255,15,255,15,255,159,255,223,250,197,213,90,171,253,86,61,248,60,0
005190  3  03 9C 03 BC  
005194  3  07 FE 07 FE  
0051AC  3  00 3C 00 5A          .byte 0,60,0,90,0,231,0,239,129,255,129,255,195,255,195,255,195,255,231,255,183,254,113,117,214,170,191,85,15,126,15,0
0051B0  3  00 E7 00 EF  
0051B4  3  81 FF 81 FF  
0051CC  3  00 0F 80 16          .byte 0,15,128,22,192,57,192,59,224,127,224,127,240,255,240,255,240,255,249,255,173,255,92,93,181,170,111,213,131,223,3,192
0051D0  3  C0 39 C0 3B  
0051D4  3  E0 7F E0 7F  
0051EC  3  03 C0 05 A0          .byte 3,192,5,160,13,112,12,240,31,248,31,248,63,252,63,252,63,252,127,254,111,238,151,215,234,173,245,91,103,231,0,0
0051F0  3  0D 70 0C F0  
0051F4  3  1F F8 1F F8  
00520C  3  00 F0 01 68          .byte 0,240,1,104,3,92,3,60,7,254,7,254,15,255,15,255,15,255,159,255,155,251,229,245,122,171,253,86,217,249,0,0
005210  3  03 5C 03 3C  
005214  3  07 FE 07 FE  
00522C  3  00 3C 00 5A          .byte 0,60,0,90,0,215,0,207,129,255,129,255,195,255,195,255,195,255,231,255,230,254,121,125,222,170,191,85,118,126,0,0
005230  3  00 D7 00 CF  
005234  3  81 FF 81 FF  
00524C  3  00 0F 80 16          .byte 0,15,128,22,192,53,192,51,224,127,224,127,240,255,240,255,240,255,249,255,185,191,94,95,183,170,111,213,157,159,0,0
005250  3  C0 35 C0 33  
005254  3  E0 7F E0 7F  
00526C  3  03 C0 05 A0          .byte 3,192,5,160,14,112,14,240,31,248,31,248,63,252,63,252,63,252,127,254,239,254,213,216,170,166,213,79,7,239,0,15
005270  3  0E 70 0E F0  
005274  3  1F F8 1F F8  
00528C  3  00 F0 01 68          .byte 0,240,1,104,3,156,3,188,7,254,7,254,15,255,15,255,15,255,159,255,187,255,53,118,170,169,245,83,193,251,192,3
005290  3  03 9C 03 BC  
005294  3  07 FE 07 FE  
0052AC  3  00 3C 00 5A          .byte 0,60,0,90,0,231,0,239,129,255,129,255,195,255,195,255,195,255,231,255,238,255,141,93,106,170,253,84,240,126,240,0
0052B0  3  00 E7 00 EF  
0052B4  3  81 FF 81 FF  
0052CC  3  00 0F 80 16          .byte 0,15,128,22,192,57,192,59,224,127,224,127,240,255,240,255,240,255,249,255,251,191,99,87,154,170,63,85,188,31,60,0
0052D0  3  C0 39 C0 3B  
0052D4  3  E0 7F E0 7F  
0052EC  3  03 C0 05 A0          .byte 3,192,5,160,14,176,15,48,31,248,31,248,63,252,63,252,63,252,127,254,111,238,151,215,234,173,245,91,103,231,0,0
0052F0  3  0E B0 0F 30  
0052F4  3  1F F8 1F F8  
00530C  3  00 F0 01 68          .byte 0,240,1,104,3,172,3,204,7,254,7,254,15,255,15,255,15,255,159,255,155,251,229,245,122,171,253,86,217,249,0,0
005310  3  03 AC 03 CC  
005314  3  07 FE 07 FE  
00532C  3  00 3C 00 5A          .byte 0,60,0,90,0,235,0,243,129,255,129,255,195,255,195,255,195,255,231,255,230,254,121,125,222,170,191,85,118,126,0,0
005330  3  00 EB 00 F3  
005334  3  81 FF 81 FF  
00534C  3  00 0F 80 16          .byte 0,15,128,22,192,58,192,60,224,127,224,127,240,255,240,255,240,255,249,255,185,191,94,95,183,170,111,213,157,159,0,0
005350  3  C0 3A C0 3C  
005354  3  E0 7F E0 7F  
00536C  3  66 66 FF FF          .byte 102,102,255,255,128,1,179,205,189,189,191,253,183,237,179,205,179,205,179,205,191,253,191,253,166,101,128,1,255,255,102,102
005370  3  80 01 B3 CD  
005374  3  BD BD BF FD  
00538C  3  99 99 FF FF          .byte 153,153,255,255,96,0,108,243,111,111,111,255,109,251,108,243,108,243,108,243,111,255,111,255,105,153,96,0,255,255,153,153
005390  3  60 00 6C F3  
005394  3  6F 6F 6F FF  
0053AC  3  66 66 FF FF          .byte 102,102,255,255,24,0,219,60,219,219,219,255,219,126,219,60,219,60,219,60,219,255,219,255,90,102,24,0,255,255,102,102
0053B0  3  18 00 DB 3C  
0053B4  3  DB DB DB FF  
0053CC  3  99 99 FF FF          .byte 153,153,255,255,6,0,54,207,246,246,246,255,182,223,54,207,54,207,54,207,246,255,246,255,150,153,6,0,255,255,153,153
0053D0  3  06 00 36 CF  
0053D4  3  F6 F6 F6 FF  
0053EC  3  66 66 FF FF          .byte 102,102,255,255,128,1,191,253,179,205,189,189,191,253,183,237,179,205,179,205,191,253,166,101,160,5,128,1,255,255,102,102
0053F0  3  80 01 BF FD  
0053F4  3  B3 CD BD BD  
00540C  3  99 99 FF FF          .byte 153,153,255,255,96,0,111,255,108,243,111,111,111,255,109,251,108,243,108,243,111,255,105,153,104,1,96,0,255,255,153,153
005410  3  60 00 6F FF  
005414  3  6C F3 6F 6F  
00542C  3  66 66 FF FF          .byte 102,102,255,255,24,0,219,255,219,60,219,219,219,255,219,126,219,60,219,60,219,255,90,102,90,0,24,0,255,255,102,102
005430  3  18 00 DB FF  
005434  3  DB 3C DB DB  
00544C  3  99 99 FF FF          .byte 153,153,255,255,6,0,246,255,54,207,246,246,246,255,182,223,54,207,54,207,246,255,150,153,22,128,6,0,255,255,153,153
005450  3  06 00 F6 FF  
005454  3  36 CF F6 F6  
00546C  3  66 66 FF FF          .byte 102,102,255,255,128,1,191,253,183,237,187,221,189,189,167,229,187,221,191,253,182,109,160,5,160,5,128,1,255,255,102,102
005470  3  80 01 BF FD  
005474  3  B7 ED BB DD  
00548C  3  99 99 FF FF          .byte 153,153,255,255,96,0,111,255,109,251,110,247,111,111,105,249,110,247,111,255,109,155,104,1,104,1,96,0,255,255,153,153
005490  3  60 00 6F FF  
005494  3  6D FB 6E F7  
0054AC  3  66 66 FF FF          .byte 102,102,255,255,24,0,219,255,219,126,219,189,219,219,90,126,219,189,219,255,219,102,90,0,90,0,24,0,255,255,102,102
0054B0  3  18 00 DB FF  
0054B4  3  DB 7E DB BD  
0054CC  3  99 99 FF FF          .byte 153,153,255,255,6,0,246,255,182,223,118,239,246,246,150,159,118,239,246,255,182,217,22,128,22,128,6,0,255,255,153,153
0054D0  3  06 00 F6 FF  
0054D4  3  B6 DF 76 EF  
0054EC  3  30 00 30 00          .byte 48,0,48,0,31,251,56,31,55,236,47,244,47,244,47,52,46,84,46,20,47,52,47,244,240,12,223,248,0,12,0,12
0054F0  3  1F FB 38 1F  
0054F4  3  37 EC 2F F4  
00550C  3  0C 00 0C 00          .byte 12,0,12,0,199,254,206,7,13,251,11,253,11,253,11,205,11,149,11,133,11,205,11,253,60,3,55,254,0,3,0,3
005510  3  C7 FE CE 07  
005514  3  0D FB 0B FD  
00552C  3  03 00 03 00          .byte 3,0,3,0,177,255,243,129,195,126,66,255,66,255,66,243,66,229,66,225,66,243,66,255,207,0,141,255,192,0,192,0
005530  3  B1 FF F3 81  
005534  3  C3 7E 42 FF  
00554C  3  00 C0 00 C0          .byte 0,192,0,192,236,127,124,224,176,223,208,191,208,191,208,188,80,185,80,184,208,188,208,191,51,192,227,127,48,0,48,0
005550  3  EC 7F 7C E0  
005554  3  B0 DF D0 BF  
00556C  3  03 00 03 00          .byte 3,0,3,0,31,248,56,28,55,236,47,244,47,247,46,119,236,180,236,52,46,116,47,244,48,12,31,248,0,192,0,192
005570  3  1F F8 38 1C  
005574  3  37 EC 2F F4  
00558C  3  00 C0 00 C0          .byte 0,192,0,192,7,254,14,7,13,251,11,253,203,253,203,157,59,45,59,13,11,157,11,253,12,3,7,254,0,48,0,48
005590  3  07 FE 0E 07  
005594  3  0D FB 0B FD  
0055AC  3  00 30 00 30          .byte 0,48,0,48,129,255,195,129,195,126,66,255,114,255,114,231,78,203,78,195,66,231,66,255,195,0,129,255,0,12,0,12
0055B0  3  81 FF C3 81  
0055B4  3  C3 7E 42 FF  
0055CC  3  00 0C 00 0C          .byte 0,12,0,12,224,127,112,224,176,223,208,191,220,191,220,185,211,178,211,176,208,185,208,191,48,192,224,127,0,3,0,3
0055D0  3  E0 7F 70 E0  
0055D4  3  B0 DF D0 BF  
0055EC  3  00 30 00 30          .byte 0,48,0,48,31,248,56,28,247,236,239,244,47,244,44,244,41,116,40,116,44,247,47,247,48,12,31,248,12,0,12,0
0055F0  3  1F F8 38 1C  
0055F4  3  F7 EC EF F4  
00560C  3  00 0C 00 0C          .byte 0,12,0,12,7,254,14,7,61,251,59,253,11,253,11,61,10,93,10,29,203,61,203,253,12,3,7,254,3,0,3,0
005610  3  07 FE 0E 07  
005614  3  3D FB 3B FD  
00562C  3  00 03 00 03          .byte 0,3,0,3,129,255,195,129,207,126,78,255,66,255,66,207,66,151,66,135,114,207,114,255,195,0,129,255,0,192,0,192
005630  3  81 FF C3 81  
005634  3  CF 7E 4E FF  
00564C  3  C0 00 C0 00          .byte 192,0,192,0,224,127,112,224,179,223,211,191,208,191,208,179,208,165,208,161,220,179,220,191,48,192,224,127,0,48,0,48
005650  3  E0 7F 70 E0  
005654  3  B3 DF D3 BF  
00566C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
005670  3  00 00 00 00  
005674  3  00 00 00 00  
00568C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
005690  3  00 00 00 00  
005694  3  00 00 00 00  
0056AC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
0056B0  3  00 00 00 00  
0056B4  3  00 00 00 00  
0056CC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
0056D0  3  00 00 00 00  
0056D4  3  00 00 00 00  
0056EC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
0056F0  3  00 00 00 00  
0056F4  3  00 00 00 00  
00570C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
005710  3  00 00 00 00  
005714  3  00 00 00 00  
00572C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
005730  3  00 00 00 00  
005734  3  00 00 00 00  
00574C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
005750  3  00 00 00 00  
005754  3  00 00 00 00  
00576C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
005770  3  00 00 00 00  
005774  3  00 00 00 00  
00578C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
005790  3  00 00 00 00  
005794  3  00 00 00 00  
0057AC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
0057B0  3  00 00 00 00  
0057B4  3  00 00 00 00  
0057CC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
0057D0  3  00 00 00 00  
0057D4  3  00 00 00 00  
0057EC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
0057F0  3  00 00 00 00  
0057F4  3  00 00 55 55  
00580C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
005810  3  00 00 00 00  
005814  3  00 00 55 55  
00582C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
005830  3  00 00 00 00  
005834  3  00 00 55 55  
00584C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
005850  3  00 00 00 00  
005854  3  00 00 55 55  
00586C  3  00 00 38 1C          .byte 0,0,56,28,103,230,92,58,91,218,58,92,58,92,60,60,63,252,56,28,59,220,91,218,92,58,103,230,56,28,0,0
005870  3  67 E6 5C 3A  
005874  3  5B DA 3A 5C  
00588C  3  00 00 0E 07          .byte 0,0,14,7,153,249,151,14,150,246,14,151,14,151,15,15,15,255,14,7,14,247,150,246,151,14,153,249,14,7,0,0
005890  3  99 F9 97 0E  
005894  3  96 F6 0E 97  
0058AC  3  00 00 C3 81          .byte 0,0,195,129,102,126,165,195,165,189,195,165,195,165,195,195,195,255,195,129,195,189,165,189,165,195,102,126,195,129,0,0
0058B0  3  66 7E A5 C3  
0058B4  3  A5 BD C3 A5  
0058CC  3  00 00 70 E0          .byte 0,0,112,224,153,159,233,112,105,111,112,233,112,233,240,240,240,255,112,224,112,239,105,111,233,112,153,159,112,224,0,0
0058D0  3  99 9F E9 70  
0058D4  3  69 6F 70 E9  
0058EC  3  06 00 18 00          .byte 6,0,24,0,7,224,28,58,27,218,59,29,59,29,60,60,63,252,191,252,184,28,91,216,92,56,7,224,0,24,0,96
0058F0  3  07 E0 1C 3A  
0058F4  3  1B DA 3B 1D  
00590C  3  01 80 06 00          .byte 1,128,6,0,1,248,135,14,134,246,78,199,78,199,15,15,15,255,47,255,46,7,22,246,23,14,1,248,0,6,0,24
005910  3  01 F8 87 0E  
005914  3  86 F6 4E C7  
00592C  3  00 60 01 80          .byte 0,96,1,128,0,126,161,195,161,189,211,177,211,177,195,195,195,255,203,255,203,129,133,189,133,195,0,126,128,1,0,6
005930  3  00 7E A1 C3  
005934  3  A1 BD D3 B1  
00594C  3  00 18 00 60          .byte 0,24,0,96,128,31,232,112,104,111,116,236,116,236,240,240,240,255,242,255,114,224,97,111,225,112,128,31,96,0,128,1
005950  3  80 1F E8 70  
005954  3  68 6F 74 EC  
00596C  3  01 E0 00 00          .byte 1,224,0,0,7,224,28,56,27,216,184,220,184,220,188,61,191,253,63,253,59,221,28,56,31,248,7,224,0,0,7,128
005970  3  07 E0 1C 38  
005974  3  1B D8 B8 DC  
00598C  3  00 78 00 00          .byte 0,120,0,0,1,248,7,14,6,246,46,55,46,55,111,15,111,255,79,255,78,247,7,14,7,254,1,248,0,0,1,224
005990  3  01 F8 07 0E  
005994  3  06 F6 2E 37  
0059AC  3  00 1E 00 00          .byte 0,30,0,0,0,126,129,195,129,189,203,141,203,141,219,195,219,255,211,255,211,189,129,195,129,255,0,126,0,0,0,120
0059B0  3  00 7E 81 C3  
0059B4  3  81 BD CB 8D  
0059CC  3  80 07 00 00          .byte 128,7,0,0,128,31,224,112,96,111,114,227,114,227,246,240,246,255,244,255,116,239,224,112,224,127,128,31,0,0,0,30
0059D0  3  80 1F E0 70  
0059D4  3  60 6F 72 E3  
0059EC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
0059F0  3  00 00 00 00  
0059F4  3  00 00 00 00  
005A0C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
005A10  3  00 00 00 00  
005A14  3  00 00 00 00  
005A2C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
005A30  3  00 00 00 00  
005A34  3  00 00 00 00  
005A4C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
005A50  3  00 00 00 00  
005A54  3  00 00 00 00  
005A6C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,222,255,255
005A70  3  00 00 00 00  
005A74  3  00 00 00 00  
005A8C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,247,255,255
005A90  3  00 00 00 00  
005A94  3  00 00 00 00  
005AAC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,253,255,255
005AB0  3  00 00 00 00  
005AB4  3  00 00 00 00  
005ACC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,255,255,255
005AD0  3  00 00 00 00  
005AD4  3  00 00 00 00  
005AEC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,128,95,222,255,255
005AF0  3  00 00 00 00  
005AF4  3  00 00 00 00  
005B0C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,224,151,247,255,255
005B10  3  00 00 00 00  
005B14  3  00 00 00 00  
005B2C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,248,229,253,255,255
005B30  3  00 00 00 00  
005B34  3  00 00 00 00  
005B4C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,121,127,255,255
005B50  3  00 00 00 00  
005B54  3  00 00 00 00  
005B6C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,128,79,204,127,222,255,255
005B70  3  00 00 00 00  
005B74  3  00 00 00 00  
005B8C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,224,19,243,159,247,255,255
005B90  3  00 00 00 00  
005B94  3  00 00 00 00  
005BAC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,248,196,252,231,253,255,255
005BB0  3  00 00 00 00  
005BB4  3  00 00 00 00  
005BCC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,49,63,121,255,255,255
005BD0  3  00 00 00 00  
005BD4  3  00 00 00 00  
005BEC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,63,128,79,204,79,214,63,158,255,255
005BF0  3  00 00 00 00  
005BF4  3  00 00 00 00  
005C0C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,128,15,224,19,243,147,245,143,231,255,255
005C10  3  00 00 00 00  
005C14  3  00 00 00 00  
005C2C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,3,248,196,252,100,253,227,249,255,255
005C30  3  00 00 00 00  
005C34  3  00 00 00 00  
005C4C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,254,49,63,89,63,120,254,255,255
005C50  3  00 00 00 00  
005C54  3  00 00 00 00  
005C6C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,128,17,128,145,32,72,64,72,204,109,214,127,222,63,140,255,255
005C70  3  00 00 00 00  
005C74  3  00 00 00 00  
005C8C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,32,4,96,36,72,18,16,18,51,155,117,159,247,15,227,255,255
005C90  3  00 00 00 00  
005C94  3  00 00 00 00  
005CAC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,8,1,24,9,18,4,132,196,140,102,221,231,253,195,248,255,255
005CB0  3  00 00 00 00  
005CB4  3  00 00 00 00  
005CCC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,70,130,68,1,33,49,35,89,183,121,255,48,254,255,255
005CD0  3  00 00 00 00  
005CD4  3  00 00 00 00  
005CEC  3  00 00 00 00          .byte 0,0,0,0,128,0,0,0,0,64,0,64,0,0,0,12,0,4,0,33,0,17,0,19,128,90,113,158,63,140,255,255
005CF0  3  80 00 00 00  
005CF4  3  00 40 00 40  
005D0C  3  00 00 00 00          .byte 0,0,0,0,32,0,0,0,0,16,0,16,0,0,0,3,0,1,64,8,64,4,192,4,160,22,156,103,15,227,255,255
005D10  3  20 00 00 00  
005D14  3  00 10 00 10  
005D2C  3  00 00 00 00          .byte 0,0,0,0,8,0,0,0,0,4,0,4,0,0,192,0,64,0,16,2,16,1,48,1,168,5,231,25,195,248,255,255
005D30  3  08 00 00 00  
005D34  3  00 04 00 04  
005D4C  3  00 00 00 00          .byte 0,0,0,0,2,0,0,0,0,1,0,1,0,0,48,0,16,0,132,0,68,0,76,0,106,1,121,198,48,254,255,255
005D50  3  02 00 00 00  
005D54  3  00 01 00 01  
005D6C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,4,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,19,127,222,255,255
005D70  3  00 00 00 00  
005D74  3  00 04 00 08  
005D8C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,4,159,247,255,255
005D90  3  00 00 00 00  
005D94  3  00 01 00 02  
005DAC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,64,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,48,1,231,253,255,255
005DB0  3  00 00 00 00  
005DB4  3  40 00 80 00  
005DCC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,76,0,121,255,255,255
005DD0  3  00 00 00 00  
005DD4  3  10 00 20 00  
005DEC  3  7F FE C0 03          .byte 127,254,192,3,160,153,176,77,152,37,172,1,150,65,171,33,181,145,186,201,189,101,158,177,175,89,183,173,192,3,127,254
005DF0  3  A0 99 B0 4D  
005DF4  3  98 25 AC 01  
005E0C  3  9F FF F0 00          .byte 159,255,240,0,104,38,108,19,102,9,107,0,101,144,106,200,109,100,110,178,111,89,103,172,107,214,109,235,240,0,159,255
005E10  3  68 26 6C 13  
005E14  3  66 09 6B 00  
005E2C  3  E7 FF 3C 00          .byte 231,255,60,0,154,9,219,4,89,130,26,192,25,100,26,178,27,89,155,172,91,214,25,235,154,245,219,122,60,0,231,255
005E30  3  9A 09 DB 04  
005E34  3  59 82 1A C0  
005E4C  3  F9 FF 0F 00          .byte 249,255,15,0,102,130,54,193,150,96,6,176,6,89,134,172,70,214,38,235,150,245,198,122,102,189,182,222,15,0,249,255
005E50  3  66 82 36 C1  
005E54  3  96 60 06 B0  
005E6C  3  00 00 00 00          .byte 0,0,0,0,0,8,0,0,0,8,0,4,0,8,0,4,0,2,0,5,0,2,0,33,0,66,0,36,0,66,0,36
005E70  3  00 08 00 00  
005E74  3  00 08 00 04  
005E8C  3  00 00 00 00          .byte 0,0,0,0,0,2,0,0,0,2,0,1,0,2,0,1,128,0,64,1,128,0,64,8,128,16,0,9,128,16,0,9
005E90  3  00 02 00 00  
005E94  3  00 02 00 01  
005EAC  3  00 00 00 00          .byte 0,0,0,0,128,0,0,0,128,0,64,0,128,0,64,0,32,0,80,0,32,0,16,2,32,4,64,2,32,4,64,2
005EB0  3  80 00 00 00  
005EB4  3  80 00 40 00  
005ECC  3  00 00 00 00          .byte 0,0,0,0,32,0,0,0,32,0,16,0,32,0,16,0,8,0,20,0,8,0,132,0,8,1,144,0,8,1,144,0
005ED0  3  20 00 00 00  
005ED4  3  20 00 10 00  
005EEC  3  00 00 00 00          .byte 0,0,0,0,0,2,0,0,0,2,0,4,0,2,0,4,0,10,0,84,0,8,0,84,0,136,0,68,0,34,0,68
005EF0  3  00 02 00 00  
005EF4  3  00 02 00 04  
005F0C  3  00 00 00 00          .byte 0,0,0,0,128,0,0,0,128,0,0,1,128,0,0,1,128,2,0,21,0,2,0,21,0,34,0,17,128,8,0,17
005F10  3  80 00 00 00  
005F14  3  80 00 00 01  
005F2C  3  00 00 00 00          .byte 0,0,0,0,32,0,0,0,32,0,64,0,32,0,64,0,160,0,64,5,128,0,64,5,128,8,64,4,32,2,64,4
005F30  3  20 00 00 00  
005F34  3  20 00 40 00  
005F4C  3  00 00 00 00          .byte 0,0,0,0,8,0,0,0,8,0,16,0,8,0,16,0,40,0,80,1,32,0,80,1,32,2,16,1,136,0,16,1
005F50  3  08 00 00 00  
005F54  3  08 00 10 00  
005F6C  3  03 80 03 80          .byte 3,128,3,128,1,128,3,128,3,128,3,128,3,0,3,0,3,128,3,128,3,128,3,128,1,128,3,128,3,128,3,128
005F70  3  01 80 03 80  
005F74  3  03 80 03 80  
005F8C  3  00 E0 00 E0          .byte 0,224,0,224,0,96,0,224,0,224,0,224,0,192,0,192,0,224,0,224,0,224,0,224,0,96,0,224,0,224,0,224
005F90  3  00 60 00 E0  
005F94  3  00 E0 00 E0  
005FAC  3  00 38 00 38          .byte 0,56,0,56,0,24,0,56,0,56,0,56,0,48,0,48,0,56,0,56,0,56,0,56,0,24,0,56,0,56,0,56
005FB0  3  00 18 00 38  
005FB4  3  00 38 00 38  
005FCC  3  00 0E 00 0E          .byte 0,14,0,14,0,6,0,14,0,14,0,14,0,12,0,12,0,14,0,14,0,14,0,14,0,6,0,14,0,14,0,14
005FD0  3  00 06 00 0E  
005FD4  3  00 0E 00 0E  
005FEC  3  07 E0 07 E0          .byte 7,224,7,224,7,224,3,224,3,224,7,224,7,224,7,224,7,224,7,224,7,224,7,224,7,224,7,192,7,224,7,224
005FF0  3  07 E0 03 E0  
005FF4  3  03 E0 07 E0  
00600C  3  01 F8 01 F8          .byte 1,248,1,248,1,248,0,248,0,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,240,1,248,1,248
006010  3  01 F8 00 F8  
006014  3  00 F8 01 F8  
00602C  3  00 7E 00 7E          .byte 0,126,0,126,0,126,0,62,0,62,0,126,0,126,0,126,0,126,0,126,0,126,0,126,0,126,0,124,0,126,0,126
006030  3  00 7E 00 3E  
006034  3  00 3E 00 7E  
00604C  3  80 1F 80 1F          .byte 128,31,128,31,128,31,128,15,128,15,128,31,128,31,128,31,128,31,128,31,128,31,128,31,128,31,0,31,128,31,128,31
006050  3  80 1F 80 0F  
006054  3  80 0F 80 1F  
00606C  3  1F F8 1F F0          .byte 31,248,31,240,31,240,31,248,31,248,15,248,31,248,31,248,31,248,31,240,31,248,31,248,15,248,15,248,31,248,31,248
006070  3  1F F0 1F F8  
006074  3  1F F8 0F F8  
00608C  3  07 FE 07 FC          .byte 7,254,7,252,7,252,7,254,7,254,3,254,7,254,7,254,7,254,7,252,7,254,7,254,3,254,3,254,7,254,7,254
006090  3  07 FC 07 FE  
006094  3  07 FE 03 FE  
0060AC  3  81 FF 01 FF          .byte 129,255,1,255,1,255,129,255,129,255,128,255,129,255,129,255,129,255,1,255,129,255,129,255,128,255,128,255,129,255,129,255
0060B0  3  01 FF 81 FF  
0060B4  3  81 FF 80 FF  
0060CC  3  E0 7F C0 7F          .byte 224,127,192,127,192,127,224,127,224,127,224,63,224,127,224,127,224,127,192,127,224,127,224,127,224,63,224,63,224,127,224,127
0060D0  3  C0 7F E0 7F  
0060D4  3  E0 7F E0 3F  
0060EC  3               frmlst:
0060EC  3  00 04                .byte 0,4
0060EE  3  04 04                .byte 4,4
0060F0  3  08 04                .byte 8,4
0060F2  3  0C 03                .byte 12,3
0060F4  3  0F 03                .byte 15,3
0060F6  3  12 04                .byte 18,4
0060F8  3  16 03                .byte 22,3
0060FA  3  19 08                .byte 25,8
0060FC  3  21 01                .byte 33,1
0060FE  3  22 02                .byte 34,2
006100  3  24 03 27 00          .byte 36,3,39,0
006104  3               scdat:
006104  3  A9 01 D7 01          .word 425,471,436,372,323,381,312,298,276,343,255,305,230,299,292,268,350,320,349,203,222,352,366,303,202,225
006108  3  B4 01 74 01  
00610C  3  43 01 7D 01  
006138  3  EC 00 7E 01          .word 236,382
00613C  3  02 02 01 01          .byte 2,2,1,1,1,3,1,3,3,2,255,1,4,2,2,1,1,6,2,1,1,1,2,1,3,3,2,1,14,16,16,15,1
006140  3  01 03 01 03  
006144  3  03 02 FF 01  
00615D  3  FF 03 04 01          .byte 255,3,4,1,14,16,16,0,16,0,16,255,0,5,15,1,2,8,3,2,0,17,16,0,15,2,3,1,14,16,0,17,16
006161  3  0E 10 10 00  
006165  3  10 00 10 FF  
00617E  3  4A 10 00 4B          .byte 74,16,0,75,255,0,6,16,15,1,3,0,0,0,17,0,0,15,1,14,0,75,0,0,16,0,17,255,0,7,74,16,76
006182  3  FF 00 06 10  
006186  3  0F 01 03 00  
00619F  3  02 02 FF 00          .byte 2,2,255,0,7,16,255,0,5,17,255,0,10,17,0,1,3,255,13,4,0,0,0,16,76,255,0,17,1,1,1,14,255,0,4
0061A3  3  07 10 FF 00  
0061A7  3  05 11 FF 00  
0061C2  3  4A 10 FF 00          .byte 74,16,255,0,18,2,1,1,255,0,6,17,255,0,8,13,13,255,0,7,4,24,25,1,255,0,8,13,13,13,21,22,0,0
0061C6  3  12 02 01 01  
0061CA  3  FF 00 06 11  
0061E4  3  02 01 10 FF          .byte 2,1,16,255,0,7,28,28,1,255,0,8,17,0,0,21,22,0,0,1,3,2,0,0,0,19,19,0,0,28,28,1,13,13,13
0061E8  3  00 07 1C 1C  
0061EC  3  01 FF 00 08  
006207  3  FF 00 08 15          .byte 255,0,8,21,22,0,0,1,3,1,0,0,0,13,13,13,4,24,25,3,8,1,1,13,13,255,0,6,21,22,0,0,2
00620B  3  16 00 00 01  
00620F  3  03 01 00 00  
006228  3  03 01 FF 00          .byte 3,1,255,0,5,16,15,7,3,2,14,17,16,255,0,8,21,22,0,13,1,3,1,255,0,5,17,0,15,1,1,0,0
00622C  3  05 10 0F 07  
006230  3  03 02 0E 11  
006249  3  11 FF 00 05          .byte 17,255,0,5,255,13,6,2,1,3,2,255,0,8,1,1,255,0,8,15,1,2,5,1,2,1,3,1,14,255,0,8,1
00624D  3  FF 0D 06 02  
006251  3  01 03 02 FF  
00626A  3  02 FF 00 0A          .byte 2,255,0,10,6,1,24,25,18,6,18,9,10,255,0,7,2,1,255,0,5,13,13,13,6,0,15,2,77,78,1,14,0,0
00626E  3  06 01 18 19  
006272  3  12 06 12 09  
00628C  3  0B FF 00 04          .byte 11,255,0,4,19,19,0,1,1,255,0,4,13,7,2,1,13,54,54,2,77,78,2,18,10,0,11,255,0,4,19,19,13
006290  3  13 13 00 01  
006294  3  01 FF 00 04  
0062AD  3  01 01 00 0D          .byte 1,1,0,13,13,13,1,2,3,3,2,54,54,2,24,25,1,0,11,0,11,255,0,4,13,13,5,3,1,13,1,2,1
0062B1  3  0D 0D 01 02  
0062B5  3  03 03 02 36  
0062CE  3  03 03 03 02          .byte 3,3,3,2,2,0,0,1,77,78,1,0,11,0,11,0,0,13,13,1,3,3,1
0062D2  3  02 00 00 01  
0062D6  3  4D 4E 01 00  
0062E5  3  FF 03 05 01          .byte 255,3,5,1,3,1,1,17,0,0,1,77,78,2,0,11,0,11,0,0,6,1,1,8,255,3,4,1,23,23,3,3,3
0062E9  3  03 01 01 11  
0062ED  3  00 00 01 4D  
006306  3  02 10 4C 11          .byte 2,16,76,17,2,24,25,1,0,12,18,11,0,0,0,2,1,3,23,23,1,3,3,3,23,23,23,3,1,16,75,1,3
00630A  3  02 18 19 01  
00630E  3  00 0C 12 0B  
006327  3  0C 0A 01 00          .byte 12,10,1,0,0,0,11,0,0,0,2,3,23,23,0,1,2,1,1,23,0,23,1,3,1,16,2,3,3,11,14,0,0,0
00632B  3  00 00 0B 00  
00632F  3  00 00 02 03  
006349  3  0B 00 00 00          .byte 11,0,0,0,1,3,23,255,0,4,15,1,2,23,23,23,3,1,2,2,3,1,11,255,0,4,11,13,13,13,2,3,23,23
00634D  3  01 03 17 FF  
006351  3  00 04 0F 01  
00636B  3  FF 00 04 11          .byte 255,0,4,17,1,3,3,23,2,3,3,1,3,1,12,9,9,9,18,13,2,1,1,3,23,23,255,0,6,15,1,255,3,6
00636F  3  01 03 03 17  
006373  3  02 03 03 01  
00638D  3  07 02 FF 00          .byte 7,2,255,0,5,1,1,3,3,23,0,0,23,255,0,6,19,19,3,3,3,1,1,1,14,255,0,5,2,3,3,23,0
006391  3  05 01 01 03  
006395  3  03 17 00 00  
0063AE  3  36 36 FF 00          .byte 54,54,255,0,9,1,1,1,14,17,16,76,255,0,5,1,3,23,0,23,54,54,23,0,255,13,5,8,1,1,0,16,0,0
0063B2  3  09 01 01 01  
0063B6  3  0E 11 10 4C  
0063D0  3  10 FF 00 06          .byte 16,255,0,6,2,3,23,0,0,23,23,3,23,1,2,2,2,1,1,2,0,0,16,0,0,17,255,0,5,17,1,1,23,23,23
0063D4  3  02 03 17 00  
0063D8  3  00 17 17 03  
0063F3  3  03 03 01 03          .byte 3,3,1,3,3,2,1,1,14,16,16,76,0,17,255,0,6,13,13,13,1,3,3,23,3,1,255,3,4,1,1,14,74
0063F7  3  03 02 01 01  
0063FB  3  0E 10 10 4C  
006414  3  10 4B FF 00          .byte 16,75,255,0,9,15,1,2,1,3,1,3,1,1,2,1,2,3,6,1,0,0,17,255,0,4,13,13,13,255,0,4,11
006418  3  09 0F 01 02  
00641C  3  01 03 01 03  
006435  3  07 01 02 01          .byte 7,1,2,1,1,0,17,11,0,0,1,2,14,255,0,7,2,1,1,255,0,4,12,9,26,24,25,26,9,18,11,18,9
006439  3  01 00 11 0B  
00643D  3  00 00 01 02  
006456  3  FF 00 08 0D          .byte 255,0,8,13,13,1,5,2,13,17,255,0,5,29,29,0,0,0,11,255,0,9,17,2,1,2,3,3,1,13,13,19,19
00645A  3  0D 01 05 02  
00645E  3  0D 11 FF 00  
006477  3  00 00 1D 1D          .byte 0,0,29,29,0,0,0,11,255,0,8,13,13,1,255,3,5,2,1,13,13,13,26,24,25,26,255,13,11,2,1,1,255,3,6
00647B  3  00 00 00 0B  
00647F  3  FF 00 08 0D  
00649A  3  07 FF 01 04          .byte 7,255,1,4,2,2,255,1,5,2,1,2,2,1,2,1,1,3,3,6,255,3,6,2,255,3,4,1,3,3,3,2,1
00649E  3  02 02 FF 01  
0064A2  3  05 02 01 02  
0064BB  3  03                   .byte 3
0064BC  3  FF 00 05 17          .byte 255,0,5,23,3,3,2,1,1,21,22,1,1,2,1,1,21,22,1,1,1,2,3,23,5,23,255,0,4,23,23,3,1
0064C0  3  03 03 02 01  
0064C4  3  01 15 16 01  
0064DD  3  0E 00 00 15          .byte 14,0,0,21,22,15,14,16,15,1,21,22,17,16,15,1,1,3,23,3,255,0,4,23,3,3,1,0,0,0,21,22,0
0064E1  3  16 0F 0E 10  
0064E5  3  0F 01 15 16  
0064FE  3  4A 10 00 02          .byte 74,16,0,2,21,22,0,16,76,15,2,1,3,1,255,0,5,23,3,2,0,0,0,21,22,0,0,17,0,1,21,22,74
006502  3  15 16 00 10  
006506  3  4C 0F 02 01  
00651F  3  10 00 00 10          .byte 16,0,0,16,15,1,2,255,0,4,23,23,1,14,0,0,0,21,22,255,0,4,8,21,22,0,17,0,0,17,0,16,255,0,5
006523  3  0F 01 02 FF  
006527  3  00 04 17 17  
006542  3  17 03 01 4B          .byte 23,3,1,75,0,0,0,21,22,255,0,4,2,21,22,255,0,6,75,255,0,4,23,3,3,2,1,0,0,0,21,22,255,0,4
006546  3  00 00 00 15  
00654A  3  16 FF 00 04  
006565  3  01 15 16 FF          .byte 1,21,22,255,0,12,23,3,1,14,0,0,0,21,22,255,0,4,1,13,13,17,255,0,11,23,3,1,17,0,0,0,21
006569  3  00 0C 17 03  
00656D  3  01 0E 00 00  
006586  3  16 FF 00 05          .byte 22,255,0,5,2,1,13,13,255,0,9,23,23,3,8,1,13,21,22,13,13,255,0,5,16,1,1,2,255,13,6,0,0,0
00658A  3  02 01 0D 0D  
00658E  3  FF 00 09 17  
0065A8  3  17 03 03 03          .byte 23,3,3,3,2,1,21,22,16,76,255,0,5,16,15,1,7,1,2,1,1,2,1,255,0,4,23,3,1,1,14,21,22
0065AC  3  02 01 15 16  
0065B0  3  10 4C FF 00  
0065C9  3  11 FF 00 06          .byte 17,255,0,6,17,0,0,1,3,3,1,3,3,3,255,0,4,23,3,1,14,0,21,22,255,0,10,15,1,1,23,23,23
0065CD  3  11 00 00 01  
0065D1  3  03 03 01 03  
0065EA  3  03 00 00 00          .byte 3,0,0,0,23,3,3,2,0,0,21,22,255,0,12,15,5,3,1,3,255,0,4,23,3,1,17,0,21,22,255,0,13
0065EE  3  17 03 03 02  
0065F2  3  00 00 15 16  
00660B  3  0F 01 01 01          .byte 15,1,1,1,255,0,4,23,3,1,16,0,21,22,255,0,21,23,3,1,2,0,21,22,0,38,38,255,0,4,38,38,255,0,11
00660F  3  FF 00 04 17  
006613  3  03 01 10 00  
00662E  3  17 17 03 07          .byte 23,23,3,7,1,17,21,22,31,38,38,31,0,0,0,38,38,31,31,255,0,9,23,3,23,3,1,13,13,13,255,20,4
006632  3  01 11 15 16  
006636  3  1F 26 26 1F  
00664F  3  0D 0D 0D FF          .byte 13,13,13,255,20,4,255,13,6,255,0,4,23,23,3,3,1,2,255,1,5,2,1,1,8,255,1,4,2,7,1,2,1
006653  3  14 04 FF 0D  
006657  3  06 FF 00 04  
006670  3  17 03 01 01          .byte 23,3,1,1,3,1,3,3,1,2,2,1,1,2,1,1,7,1,1,255,3,4,1,2,1,1,3,23,1,1,16,1,3,3
006674  3  03 01 03 03  
006678  3  01 02 02 01  
006692  3  01 01 0E 00          .byte 1,1,14,0,16,0,0,16,76,0,0,0,1,2,1,8,1,14,15,2,1,3,2,14,16,15,2,1,14,0,0,74,16
006696  3  10 00 00 10  
00669A  3  4C 00 00 00  
0066B3  3  00 00 11 FF          .byte 0,0,17,255,0,4,16,15,1,17,16,76,0,15,1,1,1,0,16,76,16,255,0,5,75,255,0,7,17,0,1,0,17
0066B7  3  00 04 10 0F  
0066BB  3  01 11 10 4C  
0066D4  3  FF 00 04 01          .byte 255,0,4,1,14,74,16,0,17,255,0,15,1,255,0,6,1,0,0,17,255,0,17,2,1,21,22,13,13,13,1,255,0,13
0066D8  3  0E 4A 10 00  
0066DC  3  11 FF 00 0F  
0066F6  3  0D 0D 0D FF          .byte 13,13,13,255,0,6,21,22,15,2,3,2,255,0,13,7,1,1,255,0,6,21,22,0,1,7,1,255,0,6,13,13,13
0066FA  3  00 06 15 16  
0066FE  3  0F 02 03 02  
006717  3  FF 00 04 01          .byte 255,0,4,1,3,1,255,0,6,21,22,0,15,1,1,255,0,13,1,3,8,255,0,6,21,22,0,0,1,1,13,13,255,0,11
00671B  3  03 01 FF 00  
00671F  3  06 15 16 00  
00673A  3  02 03 01 FF          .byte 2,3,1,255,0,6,21,22,0,0,1,1,14,255,0,12,1,3,1,255,0,8,13,13,1,2,255,0,13,1,1,1,255,0,9
00673E  3  00 06 15 16  
006742  3  00 00 01 01  
00675D  3  0F 02 07 FF          .byte 15,2,7,255,13,6,255,0,7,1,2,1,13,13,255,0,8,1,1,17,6,0,0,6,255,0,8,1,3,2,14,255,0,9
006761  3  0D 06 FF 00  
006765  3  07 01 02 01  
00677F  3  01 01 0D FF          .byte 1,1,13,255,0,9,13,13,13,1,3,1,255,0,7,13,13,13,2,3,8,13,255,0,10,15,8,1,1,255,0,9,15
006783  3  00 09 0D 0D  
006787  3  0D 01 03 01  
0067A0  3  01 17 03 01          .byte 1,23,3,1,13,17,255,0,9,1,3,2,17,255,0,8,17,1,0,23,3,1,255,13,4,255,0,5,17,1,3,1,16
0067A4  3  0D 11 FF 00  
0067A8  3  09 01 03 02  
0067C1  3  00 00 00 11          .byte 0,0,0,17,255,13,5,1,0,23,23,3,1,5,1,2,13,13,13,21,22,13,1,23,3,13,21,22,13,13,255,1,4
0067C5  3  FF 0D 05 01  
0067C9  3  00 17 17 03  
0067E2  3  02 01                .byte 2,1
0067E4  3  FF 00 07 03          .byte 255,0,7,3,1,21,22,1,3,23,255,0,21,3,1,21,22,1,3,23,255,0,20,23,3,1,21,0,2,3,3,23,255,0,18
0067E8  3  01 15 16 01  
0067EC  3  03 17 FF 00  
006807  3  17 03 01 0E          .byte 23,3,1,14,0,0,15,1,2,1,3,23,23,255,0,14,23,3,1,1,255,0,4,74,16,15,2,1,7,3,3,23,255,0,8
00680B  3  00 00 0F 01  
00680F  3  02 01 03 17  
00682A  3  17 17 03 02          .byte 23,23,3,2,1,2,14,255,0,5,16,76,0,15,1,2,1,1,3,23,23,0,23,0,0,3,1,1,2,14,16,0,0,0
00682E  3  01 02 0E FF  
006832  3  00 05 10 4C  
00684C  3  13 13 00 00          .byte 19,19,0,0,17,255,0,4,16,15,1,2,1,1,3,3,23,23,1,14,0,17,0,17,0,0,0,13,13,255,0,7,17
006850  3  11 FF 00 04  
006854  3  10 0F 01 02  
00686D  3  00 00 00 0F          .byte 0,0,0,15,1,1,2,2,1,255,0,42,13,13,255,0,12,255,13,8,17,255,0,19,3,5,1,1,2,1,1,2,13,13
006871  3  01 01 02 02  
006875  3  01 FF 00 2A  
00688F  3  FF 00 12 17          .byte 255,0,18,23,255,3,7,5,2,13,13,13,0,0,0,21,22,255,13,10,255,0,4,23,0,0,23,23,3,3,3,2,0,0,0
006893  3  FF 03 07 05  
006897  3  02 0D 0D 0D  
0068B2  3  15 16 FF 01          .byte 21,22,255,1,5,2,1,1,2,1,255,0,9,23,23,3,1,0,0,0,21,22,2,3,3,3,23,3,3,23,23,3,255,0,10
0068B6  3  05 02 01 01  
0068BA  3  02 01 FF 00  
0068D5  3  17 03 01 00          .byte 23,3,1,0,0,0,21,22,1,3,23,23,0,0,23,0,0,23,255,0,11,3,2,13,13,0,21,22,1,8,23,255,0,8
0068D9  3  00 00 15 16  
0068DD  3  01 03 17 17  
0068F7  3  36 36 FF 00          .byte 54,54,255,0,7,23,3,1,14,0,0,21,22,1,3,255,0,9,54,54,255,0,8,3,1,0,0,0,21,22,2,3,23
0068FB  3  07 17 03 01  
0068FF  3  0E 00 00 15  
006918  3  FF 00 12 03          .byte 255,0,18,3,1,21,22,13,13,13,1,3,255,0,8
00691C  3  01 15 16 0D  
006920  3  0D 0D 01 03  
006927  3  FF 00 0A 17          .byte 255,0,10,23,3,1,21,22,1,1,1,3,3,23,23,0,0,3,3,23,3,255,0,11,3,1,21,22,0,15,255,1,5
00692B  3  03 01 15 16  
00692F  3  01 01 01 03  
006948  3  08 FF 01 05          .byte 8,255,1,5,18,9,9,10,255,0,7,23,1,21,22,0,0,0,16,17,255,0,4,16,76,255,0,5,11,255,0,7,23
00694C  3  12 09 09 0A  
006950  3  FF 00 07 17  
006969  3  01 15 16 00          .byte 1,21,22,0,0,0,17,255,0,5,17,255,0,6,11,255,0,8,1,21,22,255,0,16,11,255,0,7,23,1,13,13,19,19
00696D  3  00 00 11 FF  
006971  3  00 05 11 FF  
00698B  3  11 FF 00 07          .byte 17,255,0,7,17,255,0,5,11,255,0,7,23,3,1,1,255,13,6,0,255,13,6,0,0,0,11,255,0,9,23,3,1,1
00698F  3  11 FF 00 05  
006993  3  0B FF 00 07  
0069AD  3  07 01 01 10          .byte 7,1,1,16,0,15,1,1,3,3,1,0,0,0,12,255,9,5,10,255,0,6,23,23,3,1,17,0,75,1,3,255,23,4
0069B1  3  00 0F 01 01  
0069B5  3  03 03 01 00  
0069CF  3  FF 00 08 0B          .byte 255,0,8,11,0,0,23,255,0,5,1,17,40,39,16,17,1,23,0,0,23,23,0,23,0,0,23,23,3,11,24,25,1
0069D3  3  00 00 17 FF  
0069D7  3  00 05 01 11  
0069F0  3  03 00 17 00          .byte 3,0,23,0,23,1,16,40,40,16,16,1,0,0,0,255,3,4,2,1,1,3,1,12,77,78,15,1,3,0,0,0,3
0069F4  3  17 01 10 28  
0069F8  3  28 10 10 01  
006A11  3  01 0D 0D 01          .byte 1,13,13,1,1,3,0,0,0,1,2,1,1,14,16,16,1,14,17,24,25,0,16,1,255,0,4,23,3,3,23,23,255,0,5
006A15  3  01 03 00 00  
006A19  3  00 01 02 01  
006A34  3  10 00 00 4A          .byte 16,0,0,74,16,17,0,0,0,38,38,0,17,1,23,255,0,12,18,17,18,10,0,17,255,0,4,38,38,0,0,2,23
006A38  3  10 11 00 00  
006A3C  3  00 26 26 00  
006A55  3  FF 00 0F 0B          .byte 255,0,15,11,255,0,6,34,35,0,0,1,23,255,0,15,11,0,0,0,19,19,37,32,33,36,0,7,255,0,13,255,13,14
006A59  3  FF 00 06 22  
006A5D  3  23 00 00 01  
006A77  3  17 17 FF 00          .byte 23,23,255,0,9,54,54,0,2,1,1,3,3,1,5,2,1,3,1,1,3,0,23,255,0,10,54,54,0,23,23,3,3
006A7B  3  09 36 36 00  
006A7F  3  02 01 01 03  
006A98  3  17 00 17 17          .byte 23,0,23,23,3,23,23,0,23,255,0,15
006A9C  3  03 17 17 00  
006AA0  3  17 FF 00 0F  
006AA4  3  00 00 00 17          .byte 0,0,0,23,3,1,0,0,45,255,0,7,8,255,5,5,8,255,0,8,3,1,14,255,0,12,43,6,42,255,0,6,45
006AA8  3  03 01 00 00  
006AAC  3  2D FF 00 07  
006AC5  3  00 00 00 03          .byte 0,0,0,3,1,75,255,0,4,46,255,0,8,5,0,46,255,0,10,8,1,255,0,25,23,3,1,19,19,255,0,11,5
006AC9  3  01 4B FF 00  
006ACD  3  04 2E FF 00  
006AE6  3  FF 00 08 17          .byte 255,0,8,23,23,0,23,3,1,255,5,4,8,0,46,255,0,15,3,3,23,3,1,14,0,0,0,43,5,255,0,8,7
006AEA  3  17 00 17 03  
006AEE  3  01 FF 05 04  
006B07  3  FF 00 08 FF          .byte 255,0,8,255,1,4,14,0,0,0,45,0,5,255,0,18,16,15,14,0,0,0,46,0,0,5,255,0,18,17,255,0,8
006B0B  3  01 04 0E 00  
006B0F  3  00 00 2D 00  
006B28  3  05 05 07 FF          .byte 5,5,7,255,0,13,46,255,0,11,5,42,255,0,26,5,45,255,0,7,7,5,5,5,255,0,5,255,13,4,5,5,7
006B2C  3  00 0D 2E FF  
006B30  3  00 0B 05 2A  
006B49  3  00 00 00 07          .byte 0,0,0,7,255,0,5,7,5,5,42,0,43,7,255,0,5,1,2,1,255,0,17,41,19,8,8,255,0,4,3,7,1
006B4D  3  FF 00 05 07  
006B51  3  05 05 2A 00  
006B6A  3  FF 00 11 29          .byte 255,0,17,41,41,7,42,255,0,4,23,3,3,13,0,0,7,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,5
006B6E  3  29 07 2A FF  
006B72  3  00 04 17 03  
006B8B  3  00 00 00 11          .byte 0,0,0,17,0,0,23,3,1,0,0,38,38,255,0,12,38,38,0,0,17,1,1,2,0,0,3,2,31,31,38,38,255,31,12
006B8F  3  00 00 17 03  
006B93  3  01 00 00 26  
006BAE  3  26 26 1F 1F          .byte 38,38,31,31,2,2,7,3,0,3,3,1,255,20,20,1,3,23,23,0,23,3,1,1,1,2,1,2,1,1,2,255,1,4
006BB2  3  02 02 07 03  
006BB6  3  00 03 03 01  
006BD0  3  02 01 01 05          .byte 2,1,1,5,1,1,1,2,1,3,23,0
006BD4  3  01 01 01 02  
006BD8  3  01 03 17 00  
006BDC  3  03 17 03 17          .byte 3,23,3,23,23,3,3,23,23,3,23,255,0,8,23,3,3,23,23,3,8,3,23,1,1,2,2,1,8,1,1,1,2
006BE0  3  17 03 03 17  
006BE4  3  17 03 17 FF  
006BFD  3  01 03 17 FF          .byte 1,3,23,255,0,4,23,3,255,1,4,2,1,1,2,1,0,16,0,17,0,0,0,16,76,0,15,1,3,255,0,4,3
006C01  3  00 04 17 03  
006C05  3  FF 01 04 02  
006C1E  3  02 0E 10 00          .byte 2,14,16,0,0,74,16,17,15,1,0,17,255,0,5,17,0,0,0,15,1,23,0,0,0,1,14,0,75,0,0,0,17
006C22  3  00 4A 10 11  
006C26  3  0F 01 00 11  
006C3F  3  00 00 01 FF          .byte 0,0,1,255,0,11,17,1,3,23,0,23,1,0,40,40,255,0,7,17,255,0,8,38,0,13,1,23,0,0,0,1,17
006C43  3  00 0B 11 01  
006C47  3  03 17 00 17  
006C60  3  FF 00 07 11          .byte 255,0,7,17,0,255,13,5,0,0,255,13,4,1,3,255,0,4,23,1,13,13,0,0,255,13,5,1,1,2,1,1,0,0
006C64  3  00 FF 0D 05  
006C68  3  00 00 FF 0D  
006C82  3  02 01 03 01          .byte 2,1,3,1,3,23,255,0,5,3,7,2,0,0,1,1,2,3,1,3,23,3,3,2,0,0,1,3,23,23,255,0,8
006C86  3  03 17 FF 00  
006C8A  3  05 03 07 02  
006CA3  3  17 01 00 00          .byte 23,1,0,0,2,3,3,23,3,0,0,23,3,1,0,0,1,3,255,0,11,1,0,0,1,3,23,255,0,5,1,2,0,0
006CA7  3  02 03 03 17  
006CAB  3  03 00 00 17  
006CC5  3  01 17 FF 00          .byte 1,23,255,0,11,2,0,0,1,23,255,0,6,23,1,0,0,1,3,255,0,10,23,3,1,1,3,23,255,0,6,5,1
006CC9  3  0B 02 00 00  
006CCD  3  01 17 FF 00  
006CE6  3  00 00 01 17          .byte 0,0,1,23,255,0,11,23,3,0,23,255,0,6,23,3,1,1,2,3,0,23,255,0,21,23,3,3,23,255,0,161
006CEA  3  FF 00 0B 17  
006CEE  3  03 00 17 FF  
006D06  3  00 00 00 2D          .byte 0,0,0,45,255,0,10,44,255,0,8,7,5,21,22,5,255,0,25,21,22,255,0,12,46,255,0,10,45,0,0,21,22
006D0A  3  FF 00 0A 2C  
006D0E  3  FF 00 08 07  
006D27  3  08 FF 00 19          .byte 8,255,0,25,21,22,255,0,28,5,255,0,16,46,255,0,38,7,255,0,5,46,255,0,13,7,5,5,7,255,0,14,8
006D2B  3  15 16 FF 00  
006D2F  3  1C 05 FF 00  
006D48  3  05 05 08 FF          .byte 5,5,8,255,0,6,12,10,255,0,6,5,255,0,10,11,255,0,9,11,255,0,4,46,255,0,12,11,255,0,9,11,255,0,6
006D4C  3  00 06 0C 0A  
006D50  3  FF 00 06 05  
006D6B  3  FF 05 05 07          .byte 255,5,5,7,255,0,5,11,255,0,9,11,0,0,53,255,0,7,12,255,9,5,18,12,10,255,0,5,45,0,0,11,255,0,6
006D6F  3  FF 00 05 0B  
006D73  3  FF 00 09 0B  
006D8E  3  08 FF 00 09          .byte 8,255,0,9,45,0,11,255,0,6,46,0,11,255,0,10,17,255,0,7,11,255,0,8,11,0,0,53,0,0,0,7,0,0,0
006D92  3  2D 00 0B FF  
006D96  3  00 06 2E 00  
006DB1  3  10 FF 00 07          .byte 16,255,0,7,11,255,0,8,11,255,0,7,255,13,5,17,0,0,7,255,5,5,7,255,0,5,11,255,0,6,5,1,1
006DB5  3  0B FF 00 08  
006DB9  3  0B FF 00 07  
006DD2  3  02 01 01 0D          .byte 2,1,1,13,21,22,5,42,0,11,0,43,5,255,0,5,11,0,0,53,255,0,4,3,23,23,3,1,2,21,22,5,0,0
006DD6  3  15 16 05 2A  
006DDA  3  00 0B 00 2B  
006DF4  3  0C 09 09 05          .byte 12,9,9,5,18,9,9,10,0,11,255,0,6,6,0,0,0,23,3,1,21,22,8,255,0,5,8,21,22,7,5,5,5
006DF8  3  12 09 09 0A  
006DFC  3  00 0B FF 00  
006E15  3  07 FF 00 05          .byte 7,255,0,5,5
006E19  3  05           
006E1A  3  17 17 03 17          .byte 23,23,3,23,3,1,21,22,8,5,0,5,0,5,7,21,22,7,255,0,9,8,3,2,1,1,2,14,21,22,255,0,5
006E1E  3  03 01 15 16  
006E22  3  08 05 00 05  
006E3B  3  2B 05 15 16          .byte 43,5,21,22,255,0,11,2,1,14,16,0,0,21,22,255,0,6,5,21,22,255,0,5,45,255,0,4,5,1,2,0,17
006E3F  3  FF 00 0B 02  
006E43  3  01 0E 10 00  
006E5C  3  00 2B 07 05          .byte 0,43,7,5,0,5,0,5,5,5,8,21,22,255,0,7,46,0,0,0,7,6,255,0,10,46,43,5,21,22,255,0,10
006E60  3  00 05 00 05  
006E64  3  05 05 08 15  
006E7D  3  05 08 05 00          .byte 5,8,5,0,0,0,19,19,255,0,7,5,21,22,0,45,255,0,9,255,13,7,255,0,8,21,22,255,0,9,45,5,255,1,5
006E81  3  00 00 13 13  
006E85  3  FF 00 07 05  
006EA0  3  02 05 05 05          .byte 2,5,5,5,7,255,0,4,5,0,22,255,0,11,3,23,3,23,3,1,14,255,0,20,5,0,0,0,23,3,1,0,0
006EA4  3  07 FF 00 04  
006EA8  3  05 00 16 FF  
006EC1  3  2D FF 00 05          .byte 45,255,0,5,5,255,0,5,7,5,0,0,0,21,22,255,0,5,3,2,0,46,255,0,5,5,7,255,0,10,21,22,5
006EC5  3  05 FF 00 05  
006EC9  3  07 05 00 00  
006EE2  3  00 00 00 17          .byte 0,0,0,23,1,14,255,0,6,5,42,255,0,7,46,0,0,0,21,22,255,0,4,3,1,255,0,20,21,22,5,0,0
006EE6  3  01 0E FF 00  
006EEA  3  06 05 2A FF  
006F03  3  17 01 0E FF          .byte 23,1,14,255,0,10,45,255,0,9,21,0,0,0,23,3,2,17,255,0,4,8,255,0,17,5,0,0,3,1,16,76,255,0,24
006F07  3  00 0A 2D FF  
006F0B  3  00 09 15 00  
006F26  3  17 01 0D 00          .byte 23,1,13,0,0,0,38,38,0,0,7,0,5,0,5,0,5,0,5,7,38,38,0,0,0,5,0,54,54,1,1,31,31,31
006F2A  3  00 00 26 26  
006F2E  3  00 00 07 00  
006F48  3  26 26 FF 1F          .byte 38,38,255,31,12,38,38,31,31,31,5,0,54,54,3,2,255,20,22,13,0,0,0,23,3,2,255,1,7,2,255,1,6
006F4C  3  0C 26 26 1F  
006F50  3  1F 1F 05 00  
006F69  3  02 02 01 01          .byte 2,2,1,1,1,2,1,1
006F6D  3  01 02 01 01  
006F71  3  FF 2C 1C FF          .byte 255,44,28,255,0,33,46,255,0,26,45,255,0,7,19,19,255,0,10,46,0,0,0,8,7,5,5,0,8,0,5,8,0
006F75  3  00 21 2E FF  
006F79  3  00 1A 2D FF  
006F92  3  05 00 07 05          .byte 5,0,7,5,0,6,0,8,5,0,5,0,7,5,0,5,0,8,43,54,54,42,255,0,11,39,38,255,0,10,44,0,54,54
006F96  3  00 06 00 08  
006F9A  3  05 00 05 00  
006FB4  3  FF 00 0B 2D          .byte 255,0,11,45,40,40,255,0,10,17,255,0,24,45,0,0,13,255,0,13,11,255,0,13,1,255,0,8,46,255,0,4,11
006FB8  3  28 28 FF 00  
006FBC  3  0A 11 FF 00  
006FD5  3  00 00 00 2D          .byte 0,0,0,45,255,0,5,46,0,0,0,1,255,0,13,11,255,0,13,1,255,0,13,11,255,0,13,1,255,0,12,11,11
006FD9  3  FF 00 05 2E  
006FDD  3  00 00 00 01  
006FF6  3  FF 00 0D 08          .byte 255,0,13,8,255,0,12,11,11,255,0,13,1,255,0,12,11,12,10,255,0,11,75,2,0,0,0,17,255,0,8,12,18
006FFA  3  FF 00 0C 0B  
006FFE  3  0B FF 00 0D  
007017  3  0B 0A FF 00          .byte 11,10,255,0,9,74,16,1,0,0,0,16,76,255,0,9,11,11,0,0,0,17,255,0,5,17,1,3,255,13,9,21,22
00701B  3  09 4A 10 01  
00701F  3  00 00 00 10  
007038  3  0D 0D 0D 18          .byte 13,13,13,24,25,255,13,10,1,3,1,2,1,1,1,5,1,1,1,21,22,2,1,1,77,78,1,2,1,1,7,1,1
00703C  3  19 FF 0D 0A  
007040  3  01 03 01 02  
007059  3  02 02 01 03          .byte 2,2,1,3,3,255,0,4,23,0,23,3,2,21,22,2,3,23,32,33,255,0,12
00705D  3  03 FF 00 04  
007061  3  17 00 17 03  
007070  3  0E FF 00 09          .byte 14,255,0,9,6,21,22,5,44,44,44,24,77,78,25,255,44,7,255,0,5,46,0,54,54,54,5,21,22,255,0,4,27
007074  3  06 15 16 05  
007078  3  2C 2C 2C 18  
007091  3  18 19 1B 00          .byte 24,25,27,0,0,0,45,255,0,5,45,255,0,4,54,54,54,5,21,22,255,0,5,30,30,255,0,15,54,54,54,7,21
007095  3  00 00 2D FF  
007099  3  00 05 2D FF  
0070B2  3  16 FF 00 05          .byte 22,255,0,5,30,30,0,0,19,19,255,0,14,43,5,5,7,0,0,7,27,24,25,27,7,5,5,7,5,8,5,255,0,7
0070B6  3  1E 1E 00 00  
0070BA  3  13 13 FF 00  
0070D4  3  2D 00 00 00          .byte 45,0,0,0,43,0,42,0,0,43,0,77,78,0,42,43,0,42,43,0,42,255,0,6,46,255,0,11,77,78,255,0,26
0070D8  3  2B 00 2A 00  
0070DC  3  00 2B 00 4D  
0070F5  3  18 19 00 00          .byte 24,25,0,0,45,255,0,18,46,0,0,0,37,32,33,36,255,0,4,46,255,0,17,44,0,0,38,38,255,0,16,75,255,0,9
0070F9  3  2D FF 00 12  
0070FD  3  2E 00 00 00  
007118  3  26 26 FF 00          .byte 38,38,255,0,16,16,76,255,0,8,38,38,255,0,15,74,16,255,0,9,38,38,255,0,15,17,16,255,0,9,38,38,255,0,15
00711C  3  10 10 4C FF  
007120  3  00 08 26 26  
00713B  3  10 10 4C FF          .byte 16,16,76,255,0,8,38,38,0,0,17,255,0,12,16,16,0,17,255,0,7,38,38,0,0,16,76,255,0,10,17,13,13
00713F  3  00 08 26 26  
007143  3  00 00 11 FF  
00715C  3  11 10 FF 00          .byte 17,16,255,0,7,38,38,0,17,16,255,0,5,255,13,7,1,1,255,13,8,66,67,67,65,255,13,7,1,1,1,3,1
007160  3  07 26 26 00  
007164  3  11 10 FF 00  
00717D  3  07 01 0E 0F          .byte 7,1,14,15,1,3,1,1,1,2,1,2,1,66,65,255,1,7,2,0,0,23,255,0,6,23,23,255,0,6,23,0,23
007181  3  01 03 01 01  
007185  3  01 02 01 02  
00719E  3  FF 00 08             .byte 255,0,8
0071A1  3  FF 2C 04 0F          .byte 255,44,4,15,255,1,4,2,1,14,0,44,0,15,2,1,3,23,0,0,0,23,23,3,3,1,255,0,6,15,14,0,16
0071A5  3  FF 01 04 02  
0071A9  3  01 0E 00 2C  
0071C2  3  11 FF 00 06          .byte 17,255,0,6,16,1,3,3,23,3,3,1,1,2,14,255,0,9,75,0,46,255,0,5,17,15,1,2,1,1,2,14,16,16
0071C6  3  10 01 03 03  
0071CA  3  17 03 03 01  
0071E4  3  FF 00 04 2E          .byte 255,0,4,46,255,0,16,17,16,45,0,0,17,16,76,255,0,5,46,255,0,15,17,255,0,4,75,255,0,25,46,255,0,12
0071E8  3  FF 00 10 11  
0071EC  3  10 2D 00 00  
007206  3  2D FF 00 0C          .byte 45,255,0,12,45,255,0,26,45,255,0,23,46,255,0,11,45,255,0,89,75,255,0,27,17,255,0,26,74,16,17,255,0,4
00720A  3  2D FF 00 1A  
00720E  3  2D FF 00 17  
007228  3  0D FF 00 15          .byte 13,255,0,21,16,16,76,0,38,38,5,38,38,255,0,16,17,0,0,13,13,31,31,38,38,5,38,38,31,31,13,13,255,0,4
00722C  3  10 10 4C 00  
007230  3  26 26 05 26  
00724B  3  11 00 00 00          .byte 17,0,0,0,255,13,7,1,1,255,20,4,5,255,20,4,1,2,255,13,8,1,1,1,3,1,7,1,14,15,1,3,1,1
00724F  3  FF 0D 07 01  
007253  3  01 FF 14 04  
00726D  3  06 02 01 02          .byte 6,2,1,2,1,3,8,255,1,7,2,0,0,23,255,0,6,23,23,255,0,8,23,255,0,8
007271  3  01 03 08 FF  
007275  3  01 07 02 00  
007287  3  2C 2C 15 16          .byte 44,44,21,22,0,255,44,4,255,0,4,44,255,0,13,44,0,0,21,22,255,0,26,21,22,255,0,7,46,255,0,18,21
00728B  3  00 FF 2C 04  
00728F  3  FF 00 04 2C  
0072A8  3  16 FF 00 12          .byte 22,255,0,18,45,0,40,19,255,0,4,21,22,0,46,255,0,18,40,19,255,0,4,21,22,255,0,19,59,57,57,57,58
0072AC  3  2D 00 28 13  
0072B0  3  FF 00 04 15  
0072C9  3  3B 39 3A 3B          .byte 59,57,58,59,58,255,0,4,45,255,0,12,45,0,54,54,54,0,0,59,57,58,255,0,17,45,0,0,54,54,54,255,0,12
0072CD  3  3A FF 00 04  
0072D1  3  2D FF 00 0C  
0072EB  3  33 18 19 31          .byte 51,24,25,49,0,0,46,255,0,11,45,255,0,8,51,48,48,48,50,49,255,0,21,51,50,50,255,48,4,49,255,0,19
0072EF  3  00 00 2E FF  
0072F3  3  00 0B 2D FF  
00730C  3  33 30 30 32          .byte 51,48,48,50,255,48,5,49,255,0,17,51,255,47,9,48,49,255,0,15,51,48,255,47,9,50,48,49,255,0,7,17,255,0,5
007310  3  FF 30 05 31  
007314  3  FF 00 11 33  
00732F  3  33 30 30 2F          .byte 51,48,48,47,47,47,48,48,48,50,255,47,5,49,255,0,5,74,16,0,17,0,0,51,50,50,48,48,47,47,47,42,43
007333  3  2F 2F 30 30  
007337  3  30 32 FF 2F  
007350  3  30 FF 2F 06          .byte 48,255,47,6,49,255,0,5,16,0,16,0,51,48,48,50,48,48,47,47,47,0,0,50,48,48,48,50,48,48,48,49,0
007354  3  31 FF 00 05  
007358  3  10 00 10 00  
007371  3  11 00 00 10          .byte 17,0,0,16,255,13,10,50,50,5,5,50,50,255,13,12,1,1,1,3,1,7,1,2,1,1,3,50,52,52,50,1,2
007375  3  FF 0D 0A 32  
007379  3  32 05 05 32  
007392  3  01 03 02 01          .byte 1,3,2,1,7,1,1,8,1,1,2,0,0,23,255,0,6,23,1,50,52,52,50,2,23,0,0,23,23,255,0,7
007396  3  07 01 01 08  
00739A  3  01 01 02 00  
0073B2  3  0D FF 2C 1B          .byte 13,255,44,27,1,17,255,0,7,59,57,57,58,255,0,15,1,16,75,255,0,25,1,16,16,76,255,0,18,45,255,0,5
0073B6  3  01 11 FF 00  
0073BA  3  07 3B 39 39  
0073D3  3  02 0D 0D 11          .byte 2,13,13,17,255,0,24,1,2,1,13,61,255,0,19,46,0,0,0,3,23,3,1,13,255,0,4,45,255,0,10,59,57
0073D7  3  FF 00 18 01  
0073DB  3  02 01 0D 3D  
0073F4  3  3A 00 00 3B          .byte 58,0,0,59,57,58,23,0,23,3,1,255,0,11,59,58,0,0,0,45,255,0,8,3,1,255,0,6,40,39,0,0,59
0073F8  3  39 3A 17 00  
0073FC  3  17 03 01 FF  
007415  3  39 3A 2E FF          .byte 57,58,46,255,0,12,23,1,255,0,6,40,40,255,0,19,2,255,0,6,17,255,0,20,1,17,255,0,4,74,16,255,0,20
007419  3  00 0C 17 01  
00741D  3  FF 00 06 28  
007437  3  03 0D FF 00          .byte 3,13,255,0,5,16,76,255,0,5,75,255,0,13,3,1,255,0,4,17,16,0,0,17,0,0,74,16,255,0,5,17,255,0,7
00743B  3  05 10 4C FF  
00743F  3  00 05 4B FF  
00745A  3  17 02 00 00          .byte 23,2,0,0,0,74,16,16,76,0,16,76,0,0,16,76,17,0,0,0,16,0,75,255,0,5,23,1,0,0,17,0,16,16
00745E  3  00 4A 10 10  
007462  3  4C 00 10 4C  
00747C  3  00 11 10 00          .byte 0,17,16,0,0,17,16,0,16,0,0,74,16,17,16,255,0,5,3,2,13,61,16,0,16,16,0,16,16,19,61,16,16
007480  3  00 11 10 00  
007484  3  10 00 00 4A  
00749D  3  00 10 00 00          .byte 0,16,0,0,61,16,16,16,76,0,0,54,54,23,3,1,255,13,22,0,54,54,0,23,7,255,1,4,3,1,1,1,2
0074A1  3  3D 10 10 10  
0074A5  3  4C 00 00 36  
0074BE  3  01 02 01 03          .byte 1,2,1,3,1,1,1,8,255,1,4,2,255,0,9,23,23,255,0,8,23,255,0,8
0074C2  3  01 01 01 08  
0074C6  3  FF 01 04 02  
0074D6  3  FF 00 0B 32          .byte 255,0,11,50,52,52,50,255,0,24,50,52,52,50,23,255,0,22,23,50,52,52,48,23,23,255,0,19,50,50,50,48,52,52
0074DA  3  34 34 32 FF  
0074DE  3  00 18 32 34  
0074F8  3  FF 32 04 FF          .byte 255,50,4,255,0,17,23,50,255,0,8,50,255,0,18,50,255,0,8,50,23,255,0,17,48,50,50,50,52,52,50,50,50
0074FC  3  00 11 17 32  
007500  3  FF 00 08 32  
007519  3  30 FF 00 13          .byte 48,255,0,19,23,23,50,52,52,50,23,255,0,6,23,255,0,16,48,52,52,50,255,0,4,23,0,23,23,23,255,0,14
00751D  3  17 17 32 34  
007521  3  34 32 17 FF  
00753A  3  17 32 34 34          .byte 23,50,52,52,48,0,0,255,50,4,48,255,50,4,255,0,13,50,52,52,50,23,0,50,255,0,4,39,39,17,50,255,0,13
00753E  3  30 00 00 FF  
007542  3  32 04 30 FF  
00755C  3  32 34 34 32          .byte 50,52,52,50,0,0,50,255,0,4,39,39,0,48,23,255,0,9,255,50,4,52,52,50,23,23,48,0,0,255,50,4,48,48
007560  3  00 00 32 FF  
007564  3  00 04 27 27  
00757E  3  FF 00 09 17          .byte 255,0,9,23,50,0,0,0,52,52,50,48,50,50,0,0,50,23,23,255,0,12,23,48,0,0,0,52,52,255,0,6,50
007582  3  32 00 00 00  
007586  3  34 34 32 30  
00759F  3  17 FF 00 0E          .byte 23,255,0,14,50,19,19,0,52,52,255,0,6,48,255,0,15,255,50,4,52,52,0,0,17,255,50,4,255,0,8,54,54
0075A3  3  32 13 13 00  
0075A7  3  34 34 FF 00  
0075C0  3  FF 00 08 30          .byte 255,0,8,48,52,52,255,50,4,255,0,11,54,54,255,0,7,23,50,52,52,50,255,0,23,50,50,52,52,50,48,255,0,12
0075C4  3  34 34 FF 32  
0075C8  3  04 FF 00 0B  
0075E2  3  FF 00 0B 32          .byte 255,0,11,50,52,52,50,23,255,0,21,23,48,50,52,52,50,48,255,0,20,23,48,50,0,52,52,0,50,48,23,255,0,14
0075E6  3  34 34 32 17  
0075EA  3  FF 00 15 17  
007604  3  17 00 17 17          .byte 23,0,23,23,48,50,0,0,52,52,0,0,50,48,23,0,0,0,23,255,0,8,255,50,4,48,50,0,0,0,52,52,0,0,0
007608  3  30 32 00 00  
00760C  3  34 34 00 00  
007627  3  FF 32 04 30          .byte 255,50,4,48,50,50,50,255,0,6,50,255,0,20,50,255,0,6,48,255,0,20,50,255,0,5,23,50,52,52,50,48,255,50,7
00762B  3  32 32 32 FF  
00762F  3  00 06 32 FF  
00764A  3  30 32 30 FF          .byte 48,50,48,255,50,4,52,52,48,23,255,0,5,50,52,52,50,50,50,48,50,42,255,0,4,43,50,50,48,48,50,52,52
00764E  3  32 04 34 34  
007652  3  30 17 FF 00  
00766B  3  32 FF 00 06          .byte 50,255,0,6,50,255,0,8,44,39,38,44,255,0,8,48,255,0,6,50,255,0,8,51,39,38,49,255,0,8,50,23,255,0,5
00766F  3  32 FF 00 08  
007673  3  2C 27 26 2C  
00768E  3  32 34 34 32          .byte 50,52,52,50,48,50,50,42,0,255,50,4,0,43,48,50,50,50,52,52,50,23,255,0,5,50,52,52,50,42,255,0,12
007692  3  30 32 32 2A  
007696  3  00 FF 32 04  
0076AF  3  2B 32 34 34          .byte 43,50,52,52,50,255,0,5,23,48,52,52,255,0,16,52,52,50,255,0,6,50,52,52,255,0,5,51,0,38,38,0,49
0076B3  3  32 FF 00 05  
0076B7  3  17 30 34 34  
0076D0  3  FF 00 05 34          .byte 255,0,5,52,52,50,255,0,5,23,50,52,52,255,0,5,50,31,38,38,31,50,255,0,5,52,52,48,255,0,6,50,52,52
0076D4  3  34 32 FF 00  
0076D8  3  05 17 32 34  
0076F2  3  FF 00 05 32          .byte 255,0,5,50,255,20,4,50,17,0,38,38,0,52,52,50,255,0,4,54,54,48,52,52,0,0,19,19,0,50,255,68,4
0076F6  3  FF 14 04 32  
0076FA  3  11 00 26 26  
007713  3  32 10 4C 00          .byte 50,16,76,0,0,0,52,52,50,23,0,0,0,54,54,255,50,4,48,255,50,7,48,50,50,50,48,48,255,50,4,255,0,13
007717  3  00 00 34 34  
00771B  3  32 17 00 00  
007735  3  17 00 17 FF          .byte 23,0,23,255,0,6,23,23,255,0,7
007739  3  00 06 17 17  
00773D  3  FF 00 07     
007740  3  FF 2C 1C 00          .byte 255,44,28,0,0,0,45,255,0,5,46,255,0,15,45,0,46,255,0,27,44,255,0,18,7,5,5,5,57,58,0,0,46
007744  3  00 00 2D FF  
007748  3  00 05 2E FF  
007761  3  2C 07 05 05          .byte 44,7,5,5,7,0,6,0,0,8,5,5,7,0,0,5,7,255,0,5,8,255,0,5,44,5,0,0,45,255,0,5,54,54
007765  3  07 00 06 00  
007769  3  00 08 05 05  
007783  3  FF 00 06 2D          .byte 255,0,6,45,255,0,7,59,57,57,5,38,38,0,0,5,0,0,5,54,54,5,0,0,5,255,0,12,44,5,38,38,0
007787  3  FF 00 07 3B  
00778B  3  39 39 05 26  
0077A4  3  3B 3A FF 00          .byte 59,58,255,0,14,59,7,255,0,5,44,8,57,58,0,0,5,0,0,5,45,0,5,0,0,5,255,0,6,5,57,58,0,0
0077A8  3  0E 3B 07 FF  
0077AC  3  00 05 2C 08  
0077C6  3  2E 2C 05 FF          .byte 46,44,5,255,0,4,8,5,5,8,0,0,8,5,5,7,255,0,6,5,45,255,0,4,44,7,59,58,255,0,8,45,0,0,0
0077CA  3  00 04 08 05  
0077CE  3  05 08 00 00  
0077E9  3  3B 39 3A 00          .byte 59,57,58,0,0,0,7,0,0,0,59,57,57,255,0,27,44,255,0,27,44,7,57,58,255,0,4,59,57,57,58,0,0,0
0077ED  3  00 00 07 00  
0077F1  3  00 00 3B 39  
00780B  3  3B 39 39 3A          .byte 59,57,57,58,59,57,57,7,57,58,0,0,0,44,5,0,45,255,0,7,46,255,0,11,46,255,0,4,44,5,255,0,5
00780F  3  3B 39 39 07  
007813  3  39 3A 00 00  
00782C  3  3B 39 3A FF          .byte 59,57,58,255,0,8,59,58,0,0,5,0,0,59,57,57,58,6,255,0,14,46,255,0,11,44,5,17,0,59,58,255,0,16
007830  3  00 08 3B 3A  
007834  3  00 00 05 00  
00784E  3  08 FF 00 05          .byte 8,255,0,5,44,5,16,17,255,0,13,19,19,255,0,4,17,0,0,21,22,44,5,5,8,0,8,0,5,0,5,0,8
007852  3  2C 05 10 11  
007856  3  FF 00 0D 13  
00786F  3  00 08 00 08          .byte 0,8,0,8,0,5,0,7,0,7,5,5,5,7,21,22,8
007873  3  00 05 00 07  
007877  3  00 07 05 05  
007880  3  FF 2C 0B 18          .byte 255,44,11,24,25,24,25,24,25,255,44,11,0,0,45,255,0,4,46,0,0,0,255,47,6,0,0,45,46,0,0,0,45
007884  3  19 18 19 18  
007888  3  19 FF 2C 0B  
0078A1  3  FF 00 0E FF          .byte 255,0,14,255,47,6,255,0,22,255,47,6,255,0,11,8,5,5,7,255,0,4,45,38,38,24,25,24,25,24,25,38,38
0078A5  3  2F 06 FF 00  
0078A9  3  16 FF 2F 06  
0078C2  3  FF 00 05 07          .byte 255,0,5,7,5,8,5,7,42,0,43,5,7,0,0,31,38,38,43,42,43,42,43,42,38,38,31,0,0,7,5,42,0
0078C6  3  05 08 05 07  
0078CA  3  2A 00 2B 05  
0078E3  3  2E 05 4B 00          .byte 46,5,75,0,0,45,0,43,8,5,255,20,12,5,5,42,0,0,45,0,5,13,0,0,0,46,0,43,255,5,14,42,255,0,5
0078E7  3  00 2D 00 2B  
0078EB  3  08 05 FF 14  
007906  3  08 01 0D FF          .byte 8,1,13,255,0,25,5,3,2,255,0,25,5,23,1,17,5,5,21,22,5,7,0,0,0,8,5,5,7,0,0,0,7
00790A  3  00 19 05 03  
00790E  3  02 FF 00 19  
007927  3  05 05 07 15          .byte 5,5,7,21,22,7,5,8,23,1,16,76,0,21,22,43,5,0,0,0,5,42,43,5,0,0,0,5,42,43,5,21,22
00792B  3  16 07 05 08  
00792F  3  17 01 10 4C  
007948  3  00 00 00 03          .byte 0,0,0,3,1,13,0,0,21,22,0,43,5,0,5,42,0,0,43,5,0,5,42,0,0,5,21,22,0,0,0,1,14
00794C  3  01 0D 00 00  
007950  3  15 16 00 2B  
007969  3  00 00 00 15          .byte 0,0,0,21,22,255,0,15,255,5,5,7,1,17,0,0,0,21,22,255,0,20,5,1,255,13,4,5,0,6,0,5,255,0,17
00796D  3  16 FF 00 0F  
007971  3  FF 05 05 07  
00798C  3  07 03 01 01          .byte 7,3,1,1,1,2,17,0,0,0,43,5,0,5,0,7,0,5,0,5,0,7,0,5,0,8,21,22,5,0,23,3,3
007990  3  01 02 11 00  
007994  3  00 00 2B 05  
0079AD  3  01 0D FF 00          .byte 1,13,255,0,19,21,22,5,0,0,0,23,3,2,255,0,19,21,22,6,0,0,23,23,3,1,0,5,0,53,0,7,0
0079B1  3  13 15 16 05  
0079B5  3  00 00 00 17  
0079CE  3  05 00 08 00          .byte 5,0,8,0,7,0,5,0,5,0,8,0,5,0,5
0079D2  3  07 00 05 00  
0079D6  3  05 00 08 00  
0079DD  3  FF 2C 10 00          .byte 255,44,16,0,0,0,255,44,10,54,54,255,0,9,46,255,0,14,44,44,54,54,45,255,0,20,46,0,0,44,44,255,0,15
0079E1  3  00 00 FF 2C  
0079E5  3  0A 36 36 FF  
0079FF  3  3B 39 3A FF          .byte 59,57,58,255,0,6,45,0,44,44,255,0,18,46,255,0,7,44,44,255,0,20,59,58,255,0,4,44,44,255,0,6,59
007A03  3  00 06 2D 00  
007A07  3  2C 2C FF 00  
007A20  3  39 39 3A FF          .byte 57,57,58,255,0,16,44,44,38,38,255,0,24,44,44,38,38,255,0,21,59,57,58,44,44,255,0,6,45,255,0,6,59
007A24  3  00 10 2C 2C  
007A28  3  26 26 FF 00  
007A41  3  3A FF 00 0B          .byte 58,255,0,11,44,44,255,0,26,44,44,255,0,17,45,255,0,5,59,58,0,44,44,255,0,8,59,57,58,255,0,15,44,44
007A45  3  2C 2C FF 00  
007A49  3  1A 2C 2C FF  
007A63  3  2E FF 00 19          .byte 46,255,0,25,44,44,255,0,21,59,58,0,0,0,44,44,255,0,12,59,57,57,58,255,0,10,44,44,255,0,5,59,57
007A67  3  2C 2C FF 00  
007A6B  3  15 3B 3A 00  
007A84  3  3A 00 2E FF          .byte 58,0,46,255,0,14,45,0,44,44,255,0,26,44,59,58,21,22,255,0,8,53,255,0,14,44,44,59,21,22,57,58,255,0,21
007A88  3  00 0E 2D 00  
007A8C  3  2C 2C FF 00  
007AA7  3  2C                   .byte 44
007AA8  3  FF 2C 0F FF          .byte 255,44,15,255,0,12,44,44,255,0,6,46,255,0,16,54,54,54,44,44,0,0,40,39,255,0,11,45,255,0,7,54,54,54
007AAC  3  00 0C 2C 2C  
007AB0  3  FF 00 06 2E  
007ACA  3  2C 2C 00 00          .byte 44,44,0,0,38,41,255,0,22,44,44,59,57,57,57,58,255,0,21,44,44,255,0,24,46,0,44,44,255,0,6,45,0,0,0
007ACE  3  26 29 FF 00  
007AD2  3  16 2C 2C 3B  
007AED  3  3B 3A FF 00          .byte 59,58,255,0,7,45,255,0,6,44,44,255,0,26,44,44,255,0,20,19,19,255,0,4,44,44,0,0,45,255,0,10,59
007AF1  3  07 2D FF 00  
007AF5  3  06 2C 2C FF  
007B0E  3  3A FF 00 04          .byte 58,255,0,4,59,57,57,58,0,0,0,44,44,255,0,26,44,44,255,0,26,44,44,255,0,5,46,255,0,4,59,58,255,0,10
007B12  3  3B 39 39 3A  
007B16  3  00 00 00 2C  
007B31  3  2D 00 00 00          .byte 45,0,0,0,44,44,255,0,26,44,44,0,0,0,59,57,57,58,255,0,19,44,44,255,0,26,44,44,0,0,46,255,0,9
007B35  3  2C 2C FF 00  
007B39  3  1A 2C 2C 00  
007B53  3  3B 39 39 3A          .byte 59,57,57,58,255,0,4,45,255,0,5,44,44,255,0,26,44,44,255,0,8,53,0,0,53,255,0,9,53,0,0,53,0
007B57  3  FF 00 04 2D  
007B5B  3  FF 00 05 2C  
007B74  3  2C 3B 39 39          .byte 44,59,57,57,58,59,57,58,255,0,9,59,57,58,255,0,8,44
007B78  3  3A 3B 39 3A  
007B7C  3  FF 00 09 3B  
007B86  3  FF 2C 0B 17          .byte 255,44,11,23,3,2,68,62,2,3,23,255,44,10,54,54,41,41,44,255,41,6,64,63,62,42,255,41,9,54,54,44,44
007B8A  3  03 02 44 3E  
007B8E  3  02 03 17 FF  
007BA7  3  36 36 FF 29          .byte 54,54,255,41,8,64,63,62,42,255,41,10,54,54,44,44,44,255,41,8,64,63,1,3,23,255,44,6,41,41,41,255,44,5
007BAB  3  08 40 3F 3E  
007BAF  3  2A FF 29 0A  
007BC9  3  FF 29 08 40          .byte 255,41,8,64,3,1,44,0,0,44,255,41,8,44,0,0,44,44,255,41,4,44,44,44,23,23,44,255,0,4,44,255,41,8
007BCD  3  03 01 2C 00  
007BD1  3  00 2C FF 29  
007BEB  3  2C 00 00 2C          .byte 44,0,0,44,44,255,41,4,44,255,0,9,44,41,41,41,255,44,6,0,0,44,44,41,41,41,44,44,255,0,9,44,41,41,41
007BEF  3  2C FF 29 04  
007BF3  3  2C FF 00 09  
007C0E  3  2C FF 00 07          .byte 44,255,0,7,44,44,255,41,4,44,0,255,44,9,41,41,41,44,23,44,23,23,3,1,1,2,44,255,41,4,44,0,66
007C12  3  2C 2C FF 29  
007C16  3  04 2C 00 FF  
007C2F  3  29 26 26 FF          .byte 41,38,38,255,41,12,64,63,62,62,62,44,44,41,41,41,44,0,66,38,38,38,31,38,255,41,9,64,63,255,62,4,44
007C33  3  29 0C 40 3F  
007C37  3  3E 3E 3E 2C  
007C50  3  FF 29 04 2C          .byte 255,41,4,44,0,44,66,47,47,47,65,41,41,41,255,44,4,23,44,23,23,3,1,1,2,44,255,41,4,44,0,0,44
007C54  3  00 2C 42 2F  
007C58  3  2F 2F 41 29  
007C71  3  43 43 43 2C          .byte 67,67,67,44,44,41,41,44,255,0,11,44,41,41,41,44,44,0,255,44,6,41,41,41,255,44,10,0,0,44,255,41,4
007C75  3  2C 29 29 2C  
007C79  3  FF 00 0B 2C  
007C92  3  2C 00 2C FF          .byte 44,0,44,255,41,15,54,54,44,0,0,44,255,41,4,44,0,44,255,41,15,54,54,44,0,0,44,66,38,38,38,44,44,44
007C96  3  29 0F 36 36  
007C9A  3  2C 00 00 2C  
007CB4  3  26 26 26 41          .byte 38,38,38,65,255,44,6,255,41,5,44,44,44,0,0,66,31,31,38,38,255,31,5,38,65,255,0,5,255,44,7,255,0,4
007CB8  3  FF 2C 06 FF  
007CBC  3  29 05 2C 2C  
007CD6  3  42 FF 2F 09          .byte 66,255,47,9,65,44,255,0,16,44,255,67,9,255,0,18
007CDA  3  41 2C FF 00  
007CDE  3  10 2C FF 43  
007CE6  3  03 01 0D 00          .byte 3,1,13,0,71,0,255,71,4,6,21,22,6,71,71,255,0,12,23,3,1,13,255,9,6,18,21,22,18,9,10,255,0,13
007CEA  3  47 00 FF 47  
007CEE  3  04 06 15 16  
007D08  3  17 03 01 00          .byte 23,3,1,0,6,0,0,6,0,7,21,22,5,0,11,71,71,46,71,71,71,255,0,8,3,2,255,0,4,70,0,0,21
007D0C  3  06 00 00 06  
007D10  3  00 07 15 16  
007D29  3  16 00 00 0C          .byte 22,0,0,12,255,9,6,10,255,0,7,1,1,0,0,0,45,0,0,0,21,22,7,255,0,5,44,44,0,11,255,0,6
007D2D  3  FF 09 06 0A  
007D31  3  FF 00 07 01  
007D4A  3  17 01 0E FF          .byte 23,1,14,255,0,7,21,22,255,0,9,11,255,0,5,23,3,2,0,45,255,0,6,21,22,5,0,8,0,8,0,0,0
007D4E  3  00 07 15 16  
007D52  3  FF 00 09 0B  
007D6B  3  05 0B 08 00          .byte 5,11,8,0,5,0,26,3,3,1,255,0,8,21,22,0,45,255,0,7,11,255,0,4,53,2,1,14,255,0,8,21,22
007D6F  3  05 00 1A 03  
007D73  3  03 01 FF 00  
007D8C  3  FF 00 08 2E          .byte 255,0,8,46,11,255,0,27,11,255,0,10,17,255,0,16,11,255,0,4,53,255,13,4,5,16,8,0,5,0,7,21,22
007D90  3  0B FF 00 1B  
007D94  3  0B FF 00 0A  
007DAD  3  07 00 08 00          .byte 7,0,8,0,7,0,8,0,8,11,7,0,5,0,26,1,2,1,1,13,16,255,0,4,5,21,22,255,0,9,12,255,9,5
007DB1  3  07 00 08 00  
007DB5  3  08 0B 07 00  
007DCF  3  03 03 03 02          .byte 3,3,3,2,1,16,76,0,0,0,7,21,22,5,255,0,14,23,0,23,3,1,13,255,0,5,21,22,255,0,6,46,0,0,0
007DD3  3  01 10 4C 00  
007DD7  3  00 00 07 15  
007DF2  3  2D FF 00 07          .byte 45,255,0,7,23,3,1,255,0,4,7,21,22,8,255,0,15,23,3,2,1,14,255,0,4,5,21,22,255,0,4,45,255,0,10
007DF6  3  17 03 01 FF  
007DFA  3  00 04 07 15  
007E15  3  17 03 01 0E          .byte 23,3,1,14,0,0,0,46,0,0,0,21,22,5,255,0,4,45,34,35,255,0,7,3,2,14,0,0,0,45,0,0,0
007E19  3  00 00 00 2E  
007E1D  3  00 00 00 15  
007E36  3  08 15 16 FF          .byte 8,21,22,255,0,5,24,77,78,25,255,0,6,1,14,255,0,8,5,21,22,5,255,0,5,77,78,255,0,7
007E3A  3  00 05 18 4D  
007E3E  3  4E 19 FF 00  
007E54  3  FF 00 04 2D          .byte 255,0,4,45,255,0,37,46,255,0,7,255,6,5,255,0,21,46,0,6,70,70,19,6,255,0,7,46,0,0,0,71,0,0,0
007E58  3  FF 00 25 2E  
007E5C  3  FF 00 07 FF  
007E77  3  47 00 00 00          .byte 71,0,0,0,71,0,71,71,6,19,19,0,6,255,0,11,6,0,6,0,6,0,6,0,6,0,6,24,25,19,19,19,6
007E7B  3  47 00 47 47  
007E7F  3  06 13 13 00  
007E98  3  FF 00 0B 46          .byte 255,0,11,70,255,0,11,69,38,38,19,6,255,0,11,6,0,0,71,71,0,71,0,19,19,71,0,69,38,38,71,6,0,0,0
007E9C  3  FF 00 0B 45  
007EA0  3  26 26 13 06  
007EBB  3  2E FF 00 08          .byte 46,255,0,8,21,22,6,6,0,6,0,6,6,6,24,25,255,6,4,255,0,11,6,21,22,6,0,0,70,0,0,0,70
007EBF  3  15 16 06 06  
007EC3  3  00 06 00 06  
007EDC  3  0B 0B 00 00          .byte 11,11,0,0,70,255,0,9,45,0,0,0,21,22,255,0,7,45,12,11,18,9,10,255,0,8,71,0,71,0,6,21,22
007EE0  3  46 FF 00 09  
007EE4  3  2D 00 00 00  
007EFD  3  06 00 47 FF          .byte 6,0,71,255,0,6,12,255,9,5,255,0,6,255,6,5,21,22,6,6,6,255,0,6,46,0,0,12,9,9,255,0,6
007F01  3  00 06 0C FF  
007F05  3  09 05 FF 00  
007F1E  3  06 00 00 46          .byte 6,0,0,70,255,0,4,70,6,255,0,13,45,255,0,4,6,255,71,4,0,0,71,71,6,255,0,18,255,6,5,21,22
007F22  3  FF 00 04 46  
007F26  3  06 FF 00 0D  
007F3F  3  06 06 06 FF          .byte 6,6,6,255,0,19,70,0,0,6,21,22,6,0,70,255,0,10,45,255,0,5,46,255,0,6,21,22,70,0,0,46,255,0,12
007F43  3  00 13 46 00  
007F47  3  00 06 15 16  
007F62  3  36 36 FF 00          .byte 54,54,255,0,7,6,21,22,6,255,0,6,46,255,0,8,54,54,255,0,8,21,22,255,0,25,6,21,22,6,255,0,14
007F66  3  07 06 15 16  
007F6A  3  06 FF 00 06  
007F83  3  FF 00 17 0B          .byte 255,0,23,11,255,0,9,46,255,0,17,11,255,0,21,45,255,0,5,11,255,0,9,44,0,44,0,44,0,44,0,44,0
007F87  3  FF 00 09 2E  
007F8B  3  FF 00 11 0B  
007FA4  3  2C 00 2C 00          .byte 44,0,44,0,44,0,0,0,11,255,0,27,11,255,0,27,11,255,0,4,5,0,7,0,5,255,0,15,7,0,5,11,5
007FA8  3  2C 00 00 00  
007FAC  3  0B FF 00 1B  
007FC5  3  00 05 FF 00          .byte 0,5,255,0,24,12,10,255,0,27,11,255,0,27,11,255,0,27,12,10,0,0,5,0,59,57,58,0,5,0,5,0,5
007FC9  3  18 0C 0A FF  
007FCD  3  00 1B 0B FF  
007FE6  3  00 08 00 06          .byte 0,8,0,6,0,7,0,5,0,5,0,0,0,7,11,5,0,18,255,9,12,10,255,0,11,12,9,9,7,0,59,58,255,0,9
007FEA  3  00 07 00 05  
007FEE  3  00 05 00 00  
008009  3  0C FF 09 09          .byte 12,255,9,9,18,5,18,9,9,255,0,4,45,255,0,18,6,45,0,0,0,5,0,59,58,255,0,20,5,255,0,13,45
00800D  3  12 05 12 09  
008011  3  09 FF 00 04  
00802A  3  FF 00 11 08          .byte 255,0,17,8,0,5,0,7,0,5,0,5,0,8,0,5,0,7,0,5,0,7,0,5,0,8,0,7,255,0,17,46,255,0,41
00802E  3  00 05 00 07  
008032  3  00 05 00 05  
00804D  3  FF 00 19 0B          .byte 255,0,25,11,255,0,4,45,255,0,19,46,0,0,11,255,0,27,11,255,0,27,11,255,0,8,44,255,0,8,45,255,0,4
008051  3  FF 00 04 2D  
008055  3  FF 00 13 2E  
00806F  3  2C FF 00 04          .byte 44,255,0,4,11,255,0,14,34,35,255,0,11,11,0,0,5,0,7,0,5,0,0,0,5,0,5,8,24,25,5,0,5
008073  3  0B FF 00 0E  
008077  3  22 23 FF 00  
008090  3  00 05 00 00          .byte 0,5,0,0,0,5,0,5,11,5,255,0,5,53,0,0,0,53,0,0,5,24,25,8,0,0,0,53,0,0,0,53,0,0
008094  3  00 05 00 05  
008098  3  0B 05 FF 00  
0080B2  3  0B FF 00 0D          .byte 11,255,0,13,26,24,25,26,255,0,10,11,255,0,14,29,29,255,0,11,11,255,0,10,19,19,0,0,29,29,255,0,11
0080B6  3  1A 18 19 1A  
0080BA  3  FF 00 0A 0B  
0080D3  3  0B 00 00 05          .byte 11,0,0,5,0,5,0,7,0,5,0,5,7,5,26,24,25,26,0,7,0,5,0,5,0,8,0,7,11,5,0,255,9,12
0080D7  3  00 05 00 07  
0080DB  3  00 05 00 05  
0080F5  3  12 0B FF 00          .byte 18,11,255,0,11,12,9,9,9,10,255,0,11,12,255,9,14,0,11,255,0,13,45,255,0,13,11,0,0,45,255,0,24
0080F9  3  0B 0C 09 09  
0080FD  3  09 0A FF 00  
008116  3  0B FF 00 0B          .byte 11,255,0,11,46,255,0,15,11,255,0,22,45,255,0,4,11,255,0,27,11,255,0,26
00811A  3  2E FF 00 0F  
00811E  3  0B FF 00 16  
00812E  3  FF 00 15 18          .byte 255,0,21,24,25,255,0,14,45,255,0,11,77,78,255,0,15,46,0,0,0,44,255,0,6,24,25,255,0,7,45,255,0,18
008132  3  19 FF 00 0E  
008136  3  2D FF 00 0B  
008150  3  27 26 00 00          .byte 39,38,0,0,0,45,255,0,22,39,38,255,0,24,7,7,24,25,7,7,0,0,0,48,0,48,0,48,0,68,0,48,0
008154  3  00 2D FF 00  
008158  3  16 27 26 FF  
008171  3  44 00 44 00          .byte 68,0,68,0,0,8,255,7,4,42,77,78,0,7,255,0,24,43,42,0,26,255,0,24,38,0,0,4,255,0,27,27,255,0,24
008175  3  00 08 FF 07  
008179  3  04 2A 4D 4E  
008194  3  22 23 00 07          .byte 34,35,0,7,0,0,0,48,0,48,0,48,0,68,0,48,0,68,0,68,0,0,8,255,7,5,24,25,7,42,0,0,0
008198  3  00 00 00 30  
00819C  3  00 30 00 30  
0081B5  3  FF 09 0C 0A          .byte 255,9,12,10,0,0,0,12,9,9,9,18,11,11,255,0,5,9,9,10,255,0,9,11,255,0,8,11,11,0,0,0,45
0081B9  3  00 00 00 0C  
0081BD  3  09 09 09 12  
0081D6  3  00 00 00 0B          .byte 0,0,0,11,255,0,14,46,0,0,0,12,11,10,0,45,255,0,4,11,255,0,11,44,255,0,7,11,11,255,0,6,11
0081DA  3  FF 00 0E 2E  
0081DE  3  00 00 00 0C  
0081F7  3  FF 00 13 0B          .byte 255,0,19,11,11,255,0,20,45,255,0,5,11,11,255,0,10,46,255,0,15,11,12,9,9,10,255,0,23,11,0,0,0
0081FB  3  0B FF 00 14  
0081FF  3  2D FF 00 05  
008218  3  0B 00                .byte 11,0
00821A  3  FF 00 05 2E          .byte 255,0,5,46,255,0,6,45,0,45,255,0,5,39,255,0,27,39,0,0,46,255,0,24,11,255,0,6,45,57,58,255,0,15
00821E  3  FF 00 06 2D  
008222  3  00 2D FF 00  
00823C  3  2E 00 00 0B          .byte 46,0,0,11,0,71,71,71,34,35,71,0,0,0,59,57,57,58,0,45,0,0,55,75,73,255,0,6,11,71,1,1,1
008240  3  00 47 47 47  
008244  3  22 23 47 00  
00825D  3  18 19 01 FF          .byte 24,25,1,255,0,12,17,0,0,0,46,0,0,0,11,1,14,0,0,77,78,255,0,4,46,255,0,7,55,16,0,0,59
008261  3  00 0C 11 00  
008265  3  00 00 2E 00  
00827E  3  3A 00 00 47          .byte 58,0,0,71,1,14,23,23,0,77,78,0,72,73,255,0,5,45,55,72,73,0,16,255,0,5,71,1,12,9,9,10,0
008282  3  01 0E 17 17  
008286  3  00 4D 4E 00  
00829F  3  18 19 17 11          .byte 24,25,23,17,255,0,8,17,0,74,16,73,255,0,4,1,14,0,23,0,11,0,15,14,0,16,73,255,0,6,74,16,0,0
0082A3  3  FF 00 08 11  
0082A7  3  00 4A 10 49  
0082C1  3  10 00 2D 4B          .byte 16,0,45,75,0,64,1,0,23,0,0,11,255,0,4,16,255,0,6,61,0,16,73,0,16,76,0,61,0,15,1,255,0,4
0082C5  3  00 40 01 00  
0082C9  3  17 00 00 0B  
0082E3  3  0B FF 00 04          .byte 11,255,0,4,16,61,0,34,35,0,0,61,13,16,0,0,16,0,0,17,0,0,69,255,0,4,11,255,0,4,16,61,37
0082E7  3  10 3D 00 22  
0082EB  3  23 00 00 3D  
008304  3  20 21 24 0D          .byte 32,33,36,13,13,1,13,17,61,16,0,0,16,61,0,69,255,0,4,11,0,0,21,22,13,13,24,25,24,25,1,1,3
008308  3  0D 01 0D 11  
00830C  3  3D 10 00 00  
008325  3  01 FF 0D 10          .byte 1,255,13,16,21,22,1,1,1,2,1,1,3,3,23,3,1,1,2,1,1,1,2,2,255,1,6,2,1,21,22,3,3
008329  3  15 16 01 01  
00832D  3  01 02 01 01  
008346  3  01 01 03 FF          .byte 1,1,3,255,54,4,255,3,14,11,3,1,21,22,23,23,3,3,44,255,54,4,44,23,23,23,0,0,23,0,23,23,0
00834A  3  36 04 FF 03  
00834E  3  0E 0B 03 01  
008367  3  17 00 17 0B          .byte 23,0,23,11,3,2,21,22,0,0,23,23,255,44,6,255,0,4,23,255,0,8,11,3,2,21,22,255,0,6,23,255,0,14
00836B  3  03 02 15 16  
00836F  3  00 00 17 17  
008389  3  17 00 0B 03          .byte 23,0,11,3,2,21,22,255,0,23,11,3,1,21,22
00838D  3  02 15 16 FF  
008391  3  00 17 0B 03  
008398  3               numsc:
008398  3  1C                   .byte 28
008399  3               nmedat:
008399  3  00 00 70 48          .byte 0,0,112,72,4,3,72,176,6,4,40,208,2,5,64,192,255
00839D  3  04 03 48 B0  
0083A1  3  06 04 28 D0  
0083AA  3  06 04 48 98          .byte 6,4,72,152,0,0,16,176,5,5,120,144,255
0083AE  3  00 00 10 B0  
0083B2  3  05 05 78 90  
0083B7  3  06 04 20 88          .byte 6,4,32,136,4,6,120,144,0,0,56,80,1,7,128,112,1,7,128,160,255
0083BB  3  04 06 78 90  
0083BF  3  00 00 38 50  
0083CC  3  00 00 88 58          .byte 0,0,136,88,4,3,72,152,4,6,96,112,255
0083D0  3  04 03 48 98  
0083D4  3  04 06 60 70  
0083D9  3  00 00 40 18          .byte 0,0,64,24,6,4,80,152,2,5,40,88,255
0083DD  3  06 04 50 98  
0083E1  3  02 05 28 58  
0083E6  3  00 00 20 A8          .byte 0,0,32,168,2,5,32,136,5,5,120,72,1,10,104,96,255
0083EA  3  02 05 20 88  
0083EE  3  05 05 78 48  
0083F7  3  00 00 50 20          .byte 0,0,80,32,6,6,104,168,4,3,8,192,4,6,72,144,1,7,128,64,1,7,128,176,255
0083FB  3  06 06 68 A8  
0083FF  3  04 03 08 C0  
008410  3  00 00 20 20          .byte 0,0,32,32,4,3,88,56,4,3,24,184,255
008414  3  04 03 58 38  
008418  3  04 03 18 B8  
00841D  3  00 00 48 20          .byte 0,0,72,32,6,4,32,104,4,6,16,128,255
008421  3  06 04 20 68  
008425  3  04 06 10 80  
00842A  3  00 00 08 50          .byte 0,0,8,80,2,5,32,56,1,7,128,80,1,7,128,192,6,4,56,136,255
00842E  3  02 05 20 38  
008432  3  01 07 80 50  
00843F  3  00 00 78 40          .byte 0,0,120,64,2,5,16,112,1,9,80,104,1,9,48,112,255
008443  3  02 05 10 70  
008447  3  01 09 50 68  
008450  3  00 00 78 D8          .byte 0,0,120,216,4,3,24,128,2,5,16,192,1,10,72,160,1,10,88,160,1,10,104,160,1,10,120,160,255
008454  3  04 03 18 80  
008458  3  02 05 10 C0  
00846D  3  00 00 78 D8          .byte 0,0,120,216,1,7,120,104,1,7,120,128,4,6,16,120,255
008471  3  01 07 78 68  
008475  3  01 07 78 80  
00847E  3  00 00 78 D8          .byte 0,0,120,216,4,3,48,112,2,5,120,96,255
008482  3  04 03 30 70  
008486  3  02 05 78 60  
00848B  3  00 00 78 B0          .byte 0,0,120,176,2,5,120,128,255
00848F  3  02 05 78 80  
008493  3  FF           
008494  3  00 00 08 70          .byte 0,0,8,112,3,3,32,88,3,3,32,136,2,5,112,88,255
008498  3  03 03 20 58  
00849C  3  03 03 20 88  
0084A5  3  00 00 10 70          .byte 0,0,16,112,6,3,40,48,1,7,112,120,2,5,128,80,6,8,72,80,6,8,72,160,255
0084A9  3  06 03 28 30  
0084AD  3  01 07 70 78  
0084BE  3  00 00 80 D8          .byte 0,0,128,216,2,5,136,144,6,4,88,112,4,3,8,64,4,6,40,112,255
0084C2  3  02 05 88 90  
0084C6  3  06 04 58 70  
0084D3  3  00 00 10 D8          .byte 0,0,16,216,1,7,32,88,1,7,32,152,6,6,8,80,6,8,64,120,6,4,104,168,255
0084D7  3  01 07 20 58  
0084DB  3  01 07 20 98  
0084EC  3  00 00 50 60          .byte 0,0,80,96,6,4,56,184,6,6,104,160,255
0084F0  3  06 04 38 B8  
0084F4  3  06 06 68 A0  
0084F9  3  00 00 88 90          .byte 0,0,136,144,2,5,56,184,6,3,80,128,255
0084FD  3  02 05 38 B8  
008501  3  06 03 50 80  
008506  3  00 00 48 D0          .byte 0,0,72,208,1,7,72,88,1,7,128,40,255
00850A  3  01 07 48 58  
00850E  3  01 07 80 28  
008513  3  00 00 48 70          .byte 0,0,72,112,4,3,72,160,255
008517  3  04 03 48 A0  
00851B  3  FF           
00851C  3  00 00 28 68          .byte 0,0,40,104,6,3,96,104,2,5,40,160,255
008520  3  06 03 60 68  
008524  3  02 05 28 A0  
008529  3  00 00 48 20          .byte 0,0,72,32,4,8,40,56,4,8,56,72,4,8,72,88,4,8,40,128,4,8,56,144,4,8,72,160,255
00852D  3  04 08 28 38  
008531  3  04 08 38 48  
008546  3  00 00 48 20          .byte 0,0,72,32,5,5,72,80,4,8,40,56,4,8,40,168,255
00854A  3  05 05 48 50  
00854E  3  04 08 28 38  
008557  3  00 00 48 20          .byte 0,0,72,32,4,8,24,120,4,8,104,120,1,10,24,184,255
00855B  3  04 08 18 78  
00855F  3  04 08 68 78  
008568  3  00 00 78 40          .byte 0,0,120,64,1,9,0,168,1,1,88,176,255
00856C  3  01 09 00 A8  
008570  3  01 01 58 B0  
008575  3               NUMOBJ = 20
008575  3               objdta:
008575  3  3F C0 40 20          .byte 63,192,64,32,95,208,95,232,95,244,81,244,84,20,81,148,95,244,95,244,64,4,127,252,42,168,127,252,127,252,0,0,0,128,208,0,128,208
008579  3  5F D0 5F E8  
00857D  3  5F F4 51 F4  
00859B  3  01 80 02 C0          .byte 1,128,2,192,7,96,14,208,31,248,30,200,31,72,30,200,39,252,79,254,79,234,37,84,0,0,79,254,155,109,159,255,1,56,56,1,56,56
00859F  3  07 60 0E D0  
0085A3  3  1F F8 1E C8  
0085C1  3  01 80 02 C0          .byte 1,128,2,192,7,96,14,208,31,248,30,200,31,72,30,200,39,252,79,254,79,234,37,84,0,0,79,254,155,109,159,255,254,0,16,254,0,16
0085C5  3  07 60 0E D0  
0085C9  3  1F F8 1E C8  
0085E7  3  01 80 02 C0          .byte 1,128,2,192,7,96,14,208,31,248,30,200,31,72,30,200,39,252,79,254,79,234,37,84,0,0,79,254,155,109,159,255,7,32,168,7,32,168
0085EB  3  07 60 0E D0  
0085EF  3  1F F8 1E C8  
00860D  3  3F C0 40 20          .byte 63,192,64,32,95,208,95,232,95,244,81,244,84,20,81,148,95,244,95,244,64,4,127,252,42,168,127,252,127,252,0,0,23,40,200,23,40,200
008611  3  5F D0 5F E8  
008615  3  5F F4 51 F4  
008633  3  3F C0 40 20          .byte 63,192,64,32,95,208,95,232,95,244,81,244,84,20,81,148,95,244,95,244,64,4,127,252,42,168,127,252,127,252,0,0,15,80,192,15,80,192
008637  3  5F D0 5F E8  
00863B  3  5F F4 51 F4  
008659  3  00 04 00 0C          .byte 0,4,0,12,0,0,1,254,0,170,0,0,64,12,96,12,96,12,96,12,0,0,255,254,170,170,0,0,96,12,96,12,9,8,104,9,8,104
00865D  3  00 00 01 FE  
008661  3  00 AA 00 00  
00867F  3  0F 00 11 80          .byte 15,0,17,128,0,0,2,192,2,192,7,224,27,248,39,252,88,126,121,62,120,122,121,54,121,42,56,84,30,184,7,224,6,104,176,6,104,176
008683  3  00 00 02 C0  
008687  3  02 C0 07 E0  
0086A5  3  01 00 03 80          .byte 1,0,3,128,7,64,11,160,23,80,47,168,127,84,255,250,85,84,43,168,21,80,11,160,5,64,2,128,1,0,0,0,20,16,40,20,16,40
0086A9  3  07 40 0B A0  
0086AD  3  17 50 2F A8  
0086CB  3  07 C0 1B B0          .byte 7,192,27,176,61,120,102,204,99,140,97,12,83,148,46,232,20,80,77,100,111,236,53,88,112,28,5,64,123,188,252,126,13,24,208,13,24,208
0086CF  3  3D 78 66 CC  
0086D3  3  63 8C 61 0C  
0086F1  3  07 00 34 00          .byte 7,0,52,0,119,4,244,8,174,12,232,26,238,112,245,192,214,133,187,85,221,223,174,112,87,142,74,250,53,84,15,248,14,64,96,14,64,96
0086F5  3  77 04 F4 08  
0086F9  3  AE 0C E8 1A  
008717  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,46,0,126,0,93,0,235,0,209,0,170,0,124,0,7,32,88,7,32,88
00871B  3  00 00 00 00  
00871F  3  00 00 00 00  
00873D  3  00 00 00 00          .byte 0,0,0,0,3,192,7,224,1,128,63,252,76,50,93,186,113,142,119,238,119,238,113,142,93,186,76,50,63,252,0,0,17,48,24,17,48,24
008741  3  03 C0 07 E0  
008745  3  01 80 3F FC  
008763  3  00 00 00 00          .byte 0,0,0,0,3,192,7,224,1,128,63,252,76,50,93,186,113,142,119,238,119,238,113,142,93,186,76,50,63,252,0,0,19,56,24,19,56,24
008767  3  03 C0 07 E0  
00876B  3  01 80 3F FC  
008789  3  00 00 01 80          .byte 0,0,1,128,7,224,9,112,19,248,19,152,63,188,57,244,121,190,79,254,94,226,127,194,95,194,43,196,149,91,98,166,254,0,16,254,0,16
00878D  3  07 E0 09 70  
008791  3  13 F8 13 98  
0087AF  3  07 C0 09 E0          .byte 7,192,9,224,25,240,23,240,31,240,31,176,15,32,7,192,1,0,1,0,0,128,0,128,0,64,2,32,5,32,0,192,10,40,136,10,40,136
0087B3  3  19 F0 17 F0  
0087B7  3  1F F0 1F B0  
0087D5  3  00 00 78 00          .byte 0,0,120,0,30,0,7,0,3,160,1,80,0,224,1,80,3,184,7,28,14,12,20,6,40,6,80,2,160,2,64,0,21,8,216,21,8,216
0087D9  3  1E 00 07 00  
0087DD  3  03 A0 01 50  
0087FB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,254,234,234,212,212,170,170,212,212,170,170,212,212,14,16,24,14,16,24
0087FF  3  00 00 00 00  
008803  3  00 00 00 00  
008821  3  00 00 00 00          .byte 0,0,0,0,0,0,0,8,55,228,85,122,79,245,86,122,53,164,3,200,4,32,13,176,16,8,53,172,49,140,31,248,6,24,64,6,24,64
008825  3  00 00 00 08  
008829  3  37 E4 55 7A  
008847  3  78 00 84 00          .byte 120,0,132,0,165,80,133,88,132,0,120,26,128,2,192,127,199,201,207,201,204,127,205,89,204,111,237,217,109,239,12,127,26,64,184,26,64,184
00884B  3  A5 50 85 58  
00884F  3  84 00 78 1A  
00886D  3               font:
00886D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
008871  3  00 00 00 00  
008875  3  00 30 78 78          .byte 0,48,120,120,48,48,0,48
008879  3  30 30 00 30  
00887D  3  00 18 06 06          .byte 0,24,6,6,9,17,32,64
008881  3  09 11 20 40  
008885  3  18 34 3C 5E          .byte 24,52,60,94,126,114,114,60
008889  3  7E 72 72 3C  
00888D  3  00 5E 7E 7E          .byte 0,94,126,126,42,82,4,120
008891  3  2A 52 04 78  
008895  3  02 02 0E 42          .byte 2,2,14,66,126,66,126,66
008899  3  7E 42 7E 42  
00889D  3  7E BD 99 5A          .byte 126,189,153,90,36,60,0,24
0088A1  3  24 3C 00 18  
0088A5  3  7C B9 F6 E8          .byte 124,185,246,232,213,239,189,126
0088A9  3  D5 EF BD 7E  
0088AD  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0088B1  3  18 18 0C 00  
0088B5  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0088B9  3  30 30 60 00  
0088BD  3  18 34 72 FF          .byte 24,52,114,255,149,90,52,24
0088C1  3  95 5A 34 18  
0088C5  3  1C 3E 7F 7F          .byte 28,62,127,127,87,71,71,62
0088C9  3  57 47 47 3E  
0088CD  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0088D1  3  00 18 18 30  
0088D5  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0088D9  3  7E 00 00 00  
0088DD  3  00 00 00 00          .byte 0,0,0,0,0,0,16,0
0088E1  3  00 00 10 00  
0088E5  3  38 7C FE FE          .byte 56,124,254,254,234,226,226,124
0088E9  3  EA E2 E2 7C  
0088ED  3  7C FE CE D6          .byte 124,254,206,214,230,254,124,0
0088F1  3  E6 FE 7C 00  
0088F5  3  18 78 78 18          .byte 24,120,120,24,24,126,126,0
0088F9  3  18 7E 7E 00  
0088FD  3  FC FE 06 7C          .byte 252,254,6,124,192,254,254,0
008901  3  C0 FE FE 00  
008905  3  FC FE 06 3E          .byte 252,254,6,62,6,254,252,0
008909  3  06 FE FC 00  
00890D  3  D8 D8 D8 D8          .byte 216,216,216,216,254,254,24,0
008911  3  FE FE 18 00  
008915  3  FE FE C0 FC          .byte 254,254,192,252,6,254,252,0
008919  3  06 FE FC 00  
00891D  3  7C FC C0 FC          .byte 124,252,192,252,198,254,124,0
008921  3  C6 FE 7C 00  
008925  3  FE FE 06 0E          .byte 254,254,6,14,28,24,24,0
008929  3  1C 18 18 00  
00892D  3  7C FE C6 7C          .byte 124,254,198,124,198,254,124,0
008931  3  C6 FE 7C 00  
008935  3  7C FE C6 FE          .byte 124,254,198,254,126,6,6,0
008939  3  7E 06 06 00  
00893D  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
008941  3  00 00 30 00  
008945  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
008949  3  00 00 00 00  
00894D  3  78 7C 7E 7E          .byte 120,124,126,126,126,66,66,126
008951  3  7E 42 42 7E  
008955  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
008959  3  00 00 00 00  
00895D  3  00 18 34 24          .byte 0,24,52,36,126,171,126,36
008961  3  7E AB 7E 24  
008965  3  3C 0E 07 07          .byte 60,14,7,7,7,7,14,60
008969  3  07 07 0E 3C  
00896D  3  00 4E 56 4E          .byte 0,78,86,78,86,78,86,74
008971  3  56 4E 56 4A  
008975  3  3C 7E 06 7E          .byte 60,126,6,126,126,102,102,0
008979  3  7E 66 66 00  
00897D  3  78 7E 06 7C          .byte 120,126,6,124,102,126,124,0
008981  3  66 7E 7C 00  
008985  3  3E 7E 00 60          .byte 62,126,0,96,96,126,62,0
008989  3  60 7E 3E 00  
00898D  3  7C 7E 06 66          .byte 124,126,6,102,102,126,124,0
008991  3  66 7E 7C 00  
008995  3  3E 7E 00 7C          .byte 62,126,0,124,96,126,62,0
008999  3  60 7E 3E 00  
00899D  3  3E 7E 00 7C          .byte 62,126,0,124,96,96,96,0
0089A1  3  60 60 60 00  
0089A5  3  3E 7E 00 6E          .byte 62,126,0,110,102,126,62,0
0089A9  3  66 7E 3E 00  
0089AD  3  66 66 06 7E          .byte 102,102,6,126,102,102,102,0
0089B1  3  66 66 66 00  
0089B5  3  7E 7E 00 18          .byte 126,126,0,24,24,126,126,0
0089B9  3  18 7E 7E 00  
0089BD  3  06 06 00 06          .byte 6,6,0,6,6,126,124,0
0089C1  3  06 7E 7C 00  
0089C5  3  66 6E 1C 78          .byte 102,110,28,120,124,110,102,0
0089C9  3  7C 6E 66 00  
0089CD  3  60 60 00 60          .byte 96,96,0,96,96,126,62,0
0089D1  3  60 7E 3E 00  
0089D5  3  63 77 1F 6B          .byte 99,119,31,107,99,99,99,0
0089D9  3  63 63 63 00  
0089DD  3  7C 7E 06 66          .byte 124,126,6,102,102,102,102,0
0089E1  3  66 66 66 00  
0089E5  3  3C 7E 06 66          .byte 60,126,6,102,102,126,60,0
0089E9  3  66 7E 3C 00  
0089ED  3  7C 7E 06 7E          .byte 124,126,6,126,124,96,96,0
0089F1  3  7C 60 60 00  
0089F5  3  3C 7E 06 66          .byte 60,126,6,102,102,112,54,6
0089F9  3  66 70 36 06  
0089FD  3  7C 7E 06 7E          .byte 124,126,6,126,124,110,102,0
008A01  3  7C 6E 66 00  
008A05  3  3E 7E 00 3C          .byte 62,126,0,60,14,126,124,0
008A09  3  0E 7E 7C 00  
008A0D  3  7E 7E 00 18          .byte 126,126,0,24,24,24,24,0
008A11  3  18 18 18 00  
008A15  3  66 66 06 66          .byte 102,102,6,102,102,126,62,0
008A19  3  66 7E 3E 00  
008A1D  3  66 66 06 66          .byte 102,102,6,102,126,60,24,0
008A21  3  7E 3C 18 00  
008A25  3  63 63 03 6B          .byte 99,99,3,107,127,119,99,0
008A29  3  7F 77 63 00  
008A2D  3  63 77 2E 1C          .byte 99,119,46,28,62,119,99,0
008A31  3  3E 77 63 00  
008A35  3  66 66 06 7E          .byte 102,102,6,126,6,62,60,0
008A39  3  06 3E 3C 00  
008A3D  3  7E 7E 00 0C          .byte 126,126,0,12,24,62,126,0
008A41  3  18 3E 7E 00  
008A45  3  1E 0C 0C 0C          .byte 30,12,12,12,12,12,12,30
008A49  3  0C 0C 0C 1E  
008A4D  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
008A51  3  30 18 0C 00  
008A55  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
008A59  3  30 30 F0 00  
008A5D  3  3C 4E 5E 7E          .byte 60,78,94,126,122,60,8,24
008A61  3  7A 3C 08 18  
008A65  3  00 00 7F 7F          .byte 0,0,127,127,42,85,0,127
008A69  3  2A 55 00 7F  
008A6D  3  00 56 4B 55          .byte 0,86,75,85,74,69,32,31
008A71  3  4A 45 20 1F  
008A75  3  00 00 3C 06          .byte 0,0,60,6,62,102,62,0
008A79  3  3E 66 3E 00  
008A7D  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
008A81  3  66 66 7C 00  
008A85  3  3C 42 99 A1          .byte 60,66,153,161,161,153,66,60
008A89  3  A1 99 42 3C  
008A8D  3  00 06 06 3E          .byte 0,6,6,62,102,102,62,0
008A91  3  66 66 3E 00  
008A95  3  00 00 3C 66          .byte 0,0,60,102,124,96,60,0
008A99  3  7C 60 3C 00  
008A9D  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
008AA1  3  30 30 30 00  
008AA5  3  00 00 38 6C          .byte 0,0,56,108,108,60,12,120
008AA9  3  6C 3C 0C 78  
008AAD  3  00 60 60 7C          .byte 0,96,96,124,102,102,102,0
008AB1  3  66 66 66 00  
008AB5  3  00 18 00 38          .byte 0,24,0,56,24,24,60,0
008AB9  3  18 18 3C 00  
008ABD  3  00 06 00 06          .byte 0,6,0,6,6,6,102,60
008AC1  3  06 06 66 3C  
008AC5  3  00 60 6C 78          .byte 0,96,108,120,120,108,102,0
008AC9  3  78 6C 66 00  
008ACD  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
008AD1  3  30 30 1C 00  
008AD5  3  00 00 36 7F          .byte 0,0,54,127,127,107,99,0
008AD9  3  7F 6B 63 00  
008ADD  3  00 00 7C 66          .byte 0,0,124,102,102,102,102,0
008AE1  3  66 66 66 00  
008AE5  3  00 00 3C 66          .byte 0,0,60,102,102,102,60,0
008AE9  3  66 66 3C 00  
008AED  3  00 00 7C 66          .byte 0,0,124,102,102,124,96,96
008AF1  3  66 7C 60 60  
008AF5  3  00 00 3E 66          .byte 0,0,62,102,102,62,6,7
008AF9  3  66 3E 06 07  
008AFD  3  00 00 1E 33          .byte 0,0,30,51,48,48,48,0
008B01  3  30 30 30 00  
008B05  3  00 00 3E 60          .byte 0,0,62,96,60,6,124,0
008B09  3  3C 06 7C 00  
008B0D  3  00 30 7C 30          .byte 0,48,124,48,48,48,28,0
008B11  3  30 30 1C 00  
008B15  3  D4 E0 E0 E0          .byte 212,224,224,224,224,224,224,192
008B19  3  E0 E0 E0 C0  
008B1D  3  7F FE D5 E0          .byte 127,254,213,224,224,224,252,248
008B21  3  E0 E0 FC F8  
008B25  3  00 00 1F 27          .byte 0,0,31,39,74,85,72,87
008B29  3  4A 55 48 57  
008B2D  3  7E 81 B1 B1          .byte 126,129,177,177,129,133,129,126
008B31  3  81 85 81 7E  
008B35  3  00 00 78 7C          .byte 0,0,120,124,46,86,14,86
008B39  3  2E 56 0E 56  
008B3D  3  00 28 28 5C          .byte 0,40,40,92,92,92,0,40
008B41  3  5C 5C 00 28  
008B45  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
008B49  3  18 18 1E 00  
008B4D  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
008B51  3  18 18 18 00  
008B55  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
008B59  3  30 30 F0 00  
008B5D  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
008B61  3  00 00 00 00  
008B65  3  3C 42 99 A1          .byte 60,66,153,161,161,153,66,60
008B69  3  A1 99 42 3C  
008B6D  3               jtab:
008B6D  3  F9 FA FB FE          .byte 249,250,251,254,254,255,255,255,0,0,0,1,1,1,2,2,6,7,6,15,16,99
008B71  3  FE FF FF FF  
008B75  3  00 00 00 01  
008B83  3  0A 08 3F 2F  keys:   .byte 10,8,63,47,33,23,13,31,30,26,24
008B87  3  21 17 0D 1F  
008B8B  3  1E 1A 18     
008B8E  3               
008B8E  2               
008B8E  1               	.include "lib.inc"
008B8E  2               ;----------------------------------------------------------------------
008B8E  2               ; Atari 800 Platform Specific functions
008B8E  2               ;----------------------------------------------------------------------
008B8E  2               
008B8E  2               ;============================================================
008B8E  2               ; PLATFORM VARIABLES
008B8E  2               ;============================================================
008B8E  2               ;
008B8E  2               ; Memory map:
008B8E  2               ;
008B8E  2               ;	$0000-$01ff	 0.50kB	CPU WS
008B8E  2               ;	$0200-$05ff	 1,00kB	IOCB/Printer/Cassette RAM
008B8E  2               ;	$0600-$06ff	 0,25kB	User RAM
008B8E  2               ;	$0700-$1fff	 6,25kB
008B8E  2               ;	$2000-$ffff	56,0kB	User RAM
008B8E  2               ;
008B8E  2               ; Keyboard matrix:
008B8E  2               ;		0	1	2	3	4	5	6	7
008B8E  2               ;	$00:	L	J	;:	F1	F2	K	+\	*^
008B8E  2               ;	$08:	O		P	U	Ret	I	-_	=|
008B8E  2               ;	$10:	V	Help	C	F3	F4	B	X	Z
008B8E  2               ;	$18:	4$		3#	6&	Esc	5%	2"	1!
008B8E  2               ;	$20:	,[	Space	.]	N		M	/?	Invert
008B8E  2               ;	$28:	R		E	Y	Tab	T	W	Q
008B8E  2               ;	$30:	9(		0)	7'	Bksp	8@	<	>
008B8E  2               ;	$38:	F	H	D		Caps	G	S	A
008B8E  2               ;
008B8E  2               ; Video registers:
008B8E  2               ;
008B8E  2               ; Atari 800 constants:
008B8E  2               
008B8E  2               	LMS		= 64
008B8E  2               	HS		= 16
008B8E  2               	VS		= 32
008B8E  2               	MODE2		= 2
008B8E  2               	MODE3		= 3
008B8E  2               	MODE4		= 4
008B8E  2               	MODE5		= 5
008B8E  2               	MODEB		= $0B
008B8E  2               	MODED		= $0D
008B8E  2               	MODEE		= $0E
008B8E  2               	MODEF		= $0F
008B8E  2               
008B8E  2               	BLANK1		= $00
008B8E  2               	BLANK2		= $10
008B8E  2               	BLANK3		= $20
008B8E  2               	BLANK4		= $30
008B8E  2               	BLANK5		= $40
008B8E  2               	BLANK6		= $50
008B8E  2               	BLANK7		= $60
008B8E  2               	BLANK8		= $70
008B8E  2               
008B8E  2               	DLISTENDJUMP	= $41
008B8E  2               
008B8E  2               ; Atari 800 Addresses
008B8E  2               
008B8E  2               	HPOSP0	= $D000	; HORIZONTAL POSITION P0
008B8E  2               	HPOSP1	= $D001	; HORIZONTAL POSITION P1
008B8E  2               	HPOSP2	= $D002	; HORIZONTAL POSITION P2
008B8E  2               	HPOSP3	= $D003	; HORIZONTAL POSITION P3
008B8E  2               	HPOSM0	= $D004	; HORIZONTAL POSITION M0
008B8E  2               	HPOSM1	= $D005	; HORIZONTAL POSITION M1
008B8E  2               	HPOSM2	= $D006	; HORIZONTAL POSITION M2
008B8E  2               	HPOSM3	= $D007	; HORIZONTAL POSITION M3
008B8E  2               
008B8E  2               	SIZEP0	= $D008	; SIZE P0
008B8E  2               	SIZEP1	= $D009	; SIZE P0
008B8E  2               	SIZEP2	= $D00A	; SIZE P0
008B8E  2               	SIZEP3	= $D00B	; SIZE P0
008B8E  2               	SIZEM	= $D00C	; SIZE M
008B8E  2               
008B8E  2               	GRAFP0	= $D00D
008B8E  2               	GRAFP1	= $D00E
008B8E  2               	GRAFP2	= $D00F
008B8E  2               	GRAFP3	= $D010
008B8E  2               	GRAFM	= $D011
008B8E  2               
008B8E  2               	TRIG0	= $D010
008B8E  2               	TRIG1	= $D011
008B8E  2               
008B8E  2               	COLPM0	= $D012	; COLOR P0/M0
008B8E  2               	COLPM1	= $D013	; COLOR P1/M1
008B8E  2               	COLPM2	= $D014	; COLOR P2/M2
008B8E  2               	COLPM3	= $D015	; COLOR P3/M3
008B8E  2               
008B8E  2               	COLPF0	= $D016
008B8E  2               	COLPF1	= $D017
008B8E  2               	COLPF2	= $D018
008B8E  2               	COLPF3	= $D019
008B8E  2               	COLBK	= $D01A
008B8E  2               
008B8E  2               	KBCODE	= $D209
008B8E  2               	RANDOM	= $D20A
008B8E  2               	IRQEN	= $D20E
008B8E  2               	IRQST	= $D20E
008B8E  2               	SKSTAT	= $D20F
008B8E  2               
008B8E  2               	STICK	= $D300
008B8E  2               	PORTB	= $D301
008B8E  2               	PBCTL	= $D303
008B8E  2               
008B8E  2               	DMACTL	= $D400
008B8E  2               	DLISTL	= $D402
008B8E  2               	DLISTH	= $D403
008B8E  2               	WSYNC	= $D40A
008B8E  2               	VCOUNT	= $D40B
008B8E  2               	NMIEN	= $D40E
008B8E  2               	NMIST	= $D40F
008B8E  2               	NMIRES	= $D40F
008B8E  2               
008B8E  2               	NMI	= $FFFA
008B8E  2               	RESET	= $FFFC
008B8E  2               	IRQ	= $FFFE
008B8E  2               
008B8E  2               ;----------------------------------------------------------------------
008B8E  2               ; Atari 800 hardware fns
008B8E  2               ;----------------------------------------------------------------------
008B8E  2               init:
008B8E  2               
008B8E  2               ; Disable interrupts
008B8E  2               
008B8E  2  78           	sei
008B8F  2  A9 00        	lda #0
008B91  2  8D 0E D2     	sta IRQEN		; Disable IRQ
008B94  2  8D 0E D4     	sta NMIEN		; Disable NMI
008B97  2               
008B97  2               ; Switch BASIC + OS ROMS off
008B97  2               
008B97  2  AD 03 D3     	lda PBCTL
008B9A  2  09 02        	ora #%00000010
008B9C  2  8D 03 D3     	sta PBCTL
008B9F  2  AD 01 D3     	lda PORTB
008BA2  2  29 7C        	and #%01111100
008BA4  2  09 82        	ora #%10000010
008BA6  2  8D 01 D3     	sta PORTB
008BA9  2               
008BA9  2               ; Setup new NMI handler
008BA9  2               
008BA9  2  A9 CB        	lda #<nmi_handler
008BAB  2  8D FA FF     	sta NMI
008BAE  2  A9 8B        	lda #>nmi_handler
008BB0  2  8D FB FF     	sta NMI+1
008BB3  2  A9 C0        	lda #%11000000
008BB5  2  8D 0E D4     	sta NMIEN
008BB8  2               
008BB8  2               ; Init video registers
008BB8  2               
008BB8  2  A9 FA        	lda #<BITMAP_DLIST
008BBA  2  8D 02 D4     	sta DLISTL
008BBD  2  A9 8C        	lda #>BITMAP_DLIST
008BBF  2  8D 03 D4     	sta DLISTH
008BC2  2               
008BC2  2               ; Screenwidth 32 bytes
008BC2  2               
008BC2  2  A9 31        	lda #%00110001
008BC4  2  8D 00 D4     	sta DMACTL
008BC7  2               
008BC7  2  20 5B 23     	jsr cls
008BCA  2               
008BCA  2  60           	rts
008BCB  2               
008BCB  2               nmi_handler:
008BCB  2  2C 0F D4     	bit NMIST
008BCE  2  30 2F        	bmi dli_handler
008BD0  2  10 0D        	bpl nmi_not_dli
008BD2  2               nmi_not_vbi:
008BD2  2  A9 20        	lda #%00100000
008BD4  2  2C 0F D4     	bit NMIST
008BD7  2  D0 04        	bne nmi_not_reset
008BD9  2  8D 0F D4     	sta NMIRES
008BDC  2  40           	rti
008BDD  2               nmi_not_reset:
008BDD  2  68           	pla
008BDE  2  40           	rti
008BDF  2               nmi_not_dli:
008BDF  2  48           	pha
008BE0  2  50 F0        	bvc nmi_not_vbi
008BE2  2  8A           	txa
008BE3  2  48           	pha
008BE4  2  98           	tya
008BE5  2  48           	pha
008BE6  2               
008BE6  2  A9 FF        	lda #$FF
008BE8  2  8D 1A D0     	sta COLBK
008BEB  2  8D 0A D4     	sta WSYNC
008BEE  2  8D 0A D4     	sta WSYNC
008BF1  2  A9 00        	lda #0
008BF3  2  8D 1A D0     	sta COLBK
008BF6  2  8D 0F D4     	sta NMIRES
008BF9  2  68           	pla
008BFA  2  A8           	tay
008BFB  2  68           	pla
008BFC  2  AA           	tax
008BFD  2  68           	pla
008BFE  2  40           	rti
008BFF  2               
008BFF  2               dli_handler:
008BFF  2  40           	rti
008C00  2               
008C00  2               ;========================================================
008C00  2               ; KEY AND JOYSTICK ROUTINES
008C00  2               ;--------------------------------------------------------
008C00  2               ; Keys
008C00  2               ;
008C00  2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
008C00  2               ;             ||||||||
008C00  2               ;             |||||||+> Right    KEY 0  - X
008C00  2               ;             ||||||+-> Left     KEY 1  - Z
008C00  2               ;             |||||+--> Down     KEY 2  - .
008C00  2               ;             ||||+---> Up       KEY 3  - ;
008C00  2               ;             |||+----> Fire1    KEY 4  - SPC
008C00  2               ;             ||+-----> Fire2    KEY 5  - Q
008C00  2               ;             |+------> Fire3    KEY 6  - P
008C00  2               ;             +-------> Not used
008C00  2               ;
008C00  2               ;                       Option1  KEY 7  - 1
008C00  2               ;                       Option2  KEY 8  - 2
008C00  2               ;                       Option3  KEY 9  - 3
008C00  2               ;                       Option4  KEY 10 - 4
008C00  2               ;--------------------------------------------------------
008C00  2               ;----------------------------------------------------
008C00  2               ; PRSKEY
008C00  2               ; Wait for keypress.
008C00  2               ;----------------------------------------------------
008C00  2               
008C00  2               prskey:
008C00  2  AD 0F D2     	lda SKSTAT		; Check keypress
008C03  2  C9 FF        	cmp #255
008C05  2  F0 03        	beq :+
008C07  2  4C 11 8C     	jmp prsend
008C0A  2               :
008C0A  2  20 2B 2E     	jsr joykey		; Check joystick move
008C0D  2  C9 FF        	cmp #255
008C0F  2  F0 EF        	beq prskey
008C11  2               prsend:
008C11  2  60           	rts
008C12  2               
008C12  2               ;--------------------------------------------------------
008C12  2               ; KTEST
008C12  2               ; Check if key in A is pressed,
008C12  2               ;  carry clr = key pressed
008C12  2               ;  carry set = key not pressed
008C12  2               ;--------------------------------------------------------
008C12  2               
008C12  2               ktest:
008C12  2  85 rr        	sta tmp
008C14  2  AD 0F D2     	lda SKSTAT		; Check keypress
008C17  2  29 04        	and #4
008C19  2  D0 07        	bne notpressed
008C1B  2  A5 rr        	lda tmp
008C1D  2  CD 09 D2     	cmp KBCODE
008C20  2  F0 02        	beq pressed
008C22  2               notpressed:
008C22  2  38           	sec
008C23  2  60           	rts
008C24  2               pressed:
008C24  2  18           	clc			; key pressed
008C25  2  60           	rts
008C26  2               
008C26  2               ;---------------------------------------------------------------
008C26  2               ; KGET
008C26  2               ; Return keycode when a key is pressed and released
008C26  2               ;---------------------------------------------------------------
008C26  2               
008C26  2               kget:
008C26  2  AD 0F D2     	lda SKSTAT		; Check keypress
008C29  2  29 04        	and #4
008C2B  2  D0 F9        	bne kget
008C2D  2  AD 09 D2     	lda KBCODE		; If pressed, get keycode
008C30  2  48           	pha			; Save keycode pressed
008C31  2               kget2:
008C31  2  AD 0F D2     	lda SKSTAT		; Check keypress
008C34  2  29 04        	and #4
008C36  2  F0 F9        	beq kget2
008C38  2  68           	pla
008C39  2  60           	rts
008C3A  2               
008C3A  2               ;-------------------------------------------------------
008C3A  2               ; Joystick routines.
008C3A  2               ;
008C3A  2               ; contrl = 1, Joystick1
008C3A  2               ;          2, Joystick2
008C3A  2               ;-------------------------------------------------------
008C3A  2               
008C3A  2               ; Iitialize joysticks
008C3A  2               
008C3A  2               joyinit:
008C3A  2  60           	rts
008C3B  2               
008C3B  2               ; Joystick1 controls.
008C3B  2               
008C3B  2               joy1:
008C3B  2  A9 00        	lda #0		 	; zero reading.
008C3D  2  85 rr        	sta joyval
008C3F  2               
008C3F  2  AD 89 8B     	lda keys+6		; Check Fire3
008C42  2  20 12 8C     	jsr ktest
008C45  2  26 rr        	rol joyval
008C47  2  AD 88 8B     	lda keys+5		; Check Fire2
008C4A  2  20 12 8C     	jsr ktest
008C4D  2  26 rr        	rol joyval
008C4F  2  AD 10 D0     	lda TRIG0		; Check Fire
008C52  2  4A           	lsr
008C53  2  26 rr        	rol joyval
008C55  2               
008C55  2  AD 00 D3     	lda STICK
008C58  2  85 rr        	sta tmp
008C5A  2  46 rr        	lsr tmp			; Check up
008C5C  2  26 rr        	rol joyval
008C5E  2  46 rr        	lsr tmp			; Check dwon
008C60  2  26 rr        	rol joyval
008C62  2  46 rr        	lsr tmp			; Check left
008C64  2  26 rr        	rol joyval
008C66  2  46 rr        	lsr tmp			; Check right
008C68  2  26 rr        	rol joyval
008C6A  2               
008C6A  2  60           	rts
008C6B  2               
008C6B  2               ; Joystick2 controls.
008C6B  2               
008C6B  2               joy2:
008C6B  2  A9 00        	lda #0		 	; zero reading.
008C6D  2  85 rr        	sta joyval
008C6F  2               
008C6F  2  AD 89 8B     	lda keys+6		; Check Fire3
008C72  2  20 12 8C     	jsr ktest
008C75  2  26 rr        	rol joyval
008C77  2  AD 88 8B     	lda keys+5		; Check Fire2
008C7A  2  20 12 8C     	jsr ktest
008C7D  2  26 rr        	rol joyval
008C7F  2  AD 11 D0     	lda TRIG1		; Check Fire
008C82  2  4A           	lsr
008C83  2  26 rr        	rol joyval
008C85  2               
008C85  2  AD 00 D3     	lda STICK
008C88  2  4A           	lsr a
008C89  2  4A           	lsr a
008C8A  2  4A           	lsr a
008C8B  2  4A           	lsr a
008C8C  2  85 rr        	sta tmp
008C8E  2  46 rr        	lsr tmp			; Check up
008C90  2  26 rr        	rol joyval
008C92  2  46 rr        	lsr tmp			; Check dwon
008C94  2  26 rr        	rol joyval
008C96  2  46 rr        	lsr tmp			; Check left
008C98  2  26 rr        	rol joyval
008C9A  2  46 rr        	lsr tmp			; Check right
008C9C  2  26 rr        	rol joyval
008C9E  2               
008C9E  2  60           	rts
008C9F  2  60           	rts
008CA0  2               
008CA0  2               ;---------------------------------------------------------------
008CA0  2               ; Bitmap display list must be aligned at $100
008CA0  2               ;---------------------------------------------------------------
008CA0  2               
008CA0  2  xx xx xx xx  .align $100
008CA4  2  xx xx xx xx  
008CA8  2  xx xx xx xx  
008CFA  2               
008CFA  2               BITMAP_DLIST:
008CFA  2  70           	.byte BLANK8
008CFB  2  70           	.byte BLANK8
008CFC  2  70           	.byte BLANK8
008CFD  2               
008CFD  2  4F           	.byte LMS+MODEF
008CFE  2  00 E4        	.word ScreenAddr
008D00  2  0F 0F 0F 0F  	.res 95,MODEF
008D04  2  0F 0F 0F 0F  
008D08  2  0F 0F 0F 0F  
008D5F  2               
008D5F  2  4F            	.byte LMS+MODEF
008D60  2  00 F0        	.word ScreenAddr+96*32
008D62  2  0F 0F 0F 0F  	.res 95,MODEF
008D66  2  0F 0F 0F 0F  
008D6A  2  0F 0F 0F 0F  
008DC1  2               
008DC1  2  41           	.byte DLISTENDJUMP
008DC2  2  FA 8C        	.word BITMAP_DLIST
008DC4  2               
008DC4  2               
008DC4  1               	.include "z80.asm"
008DC4  2               ;------------------------------------------------------
008DC4  2               ; z80.asm
008DC4  2               ; spectrum stuff
008DC4  2               ; adresses
008DC4  2               
008DC4  2               
008DC4  2               ; Contains seperatly 1 bit set
008DC4  2               
008DC4  2               _bitmem0	= $f8
008DC4  2               _bitmem1	= $f9
008DC4  2               _bitmem2	= $fa
008DC4  2               _bitmem3	= $fb
008DC4  2               _bitmem4	= $fc
008DC4  2               _bitmem5	= $fd
008DC4  2               _bitmem6	= $fe
008DC4  2               _bitmem7	= $ff
008DC4  2               
008DC4  2               ; constants
008DC4  2               _bitvalue0	= $01
008DC4  2               _bitvalue1	= $02
008DC4  2               _bitvalue2	= $04
008DC4  2               _bitvalue3	= $08
008DC4  2               _bitvalue4	= $10
008DC4  2               _bitvalue5	= $20
008DC4  2               _bitvalue6	= $40
008DC4  2               _bitvalue7	= $80
008DC4  2               
008DC4  2               _notbitvalue0	= $fe
008DC4  2               _notbitvalue1	= $fd
008DC4  2               _notbitvalue2	= $fb
008DC4  2               _notbitvalue3	= $f7
008DC4  2               _notbitvalue4	= $ef
008DC4  2               _notbitvalue5	= $df
008DC4  2               _notbitvalue6	= $bf
008DC4  2               _notbitvalue7	= $7f
008DC4  2               
008DC4  2               
008DC4  2               exx:
008DC4  2  A5 62        		lda z80_c
008DC6  2  A4 6E        		ldy z80_cp
008DC8  2  84 62        		sty z80_c
008DCA  2  85 6E        		sta z80_cp
008DCC  2  A5 63        		lda z80_b
008DCE  2  A4 6F        		ldy z80_bp
008DD0  2  84 63        		sty z80_b
008DD2  2  85 6F        		sta z80_bp
008DD4  2  A5 64        		lda z80_e
008DD6  2  A4 70        		ldy z80_ep
008DD8  2  84 64        		sty z80_e
008DDA  2  85 70        		sta z80_ep
008DDC  2  A5 65        		lda z80_d
008DDE  2  A4 71        		ldy z80_dp
008DE0  2  84 65        		sty z80_d
008DE2  2  85 71        		sta z80_dp
008DE4  2  A5 rr        		lda scraddr
008DE6  2  A4 72        		ldy z80_lp
008DE8  2  84 rr        		sty scraddr
008DEA  2  85 72        		sta z80_lp
008DEC  2  A5 rr        		lda scraddr+1
008DEE  2  A4 73        		ldy z80_hp
008DF0  2  84 rr        		sty scraddr+1
008DF2  2  85 73        		sta z80_hp
008DF4  2  60           		rts
008DF5  2               
008DF5  2               
008DF5  1               eind_asm:
008DF5  1               eop:					; End Of Program
008DF5  1               
008DF5  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
008DF5  1               
