ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2000
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               .if rflag
000057r 2               sprshft:     .res 1
000057r 2               .endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               .org asm_code-6
001FFA  1  FF FF        	.word $ffff
001FFC  1  00 20        	.word start_asm
001FFE  1  FB 39        	.word eind_asm
002000  1               
002000  1               start_asm:
002000  1               	.include "game.inc"
002000  2               .include "testbeep.inc"
002000  3               ;--------------------------------------------------------------
002000  3               ; Arcade Game Designer.
002000  3               ; (C) 2008 Jonathan Cauldwell.
002000  3               ; ZX Spectrum Next Engine v0.7.
002000  3               ; Acorn Atom port by K.v.Oss 2018
002000  3               ;--------------------------------------------------------------
002000  3               
002000  3               ; Conditional compilation flags
002000  3               ; Code is installed if flag is set
002000  3               ; Flags are set in commandline assembly or by the compiler
002000  3               
002000  3               ; Flags set by AGD compiler
002000  3               ;	mflag  			; MENU + INV
002000  3               ;	pflag 			; particle engine
002000  3               ;	sflag 			; scrollytext
002000  3               ;	dflag 			; digging mode
002000  3               ;	cflag			; collectable blocks
002000  3               ;	oflag			; objects
002000  3               ;	lflag			; ladders
002000  3               ;
002000  3               ; Flags set manually
002000  3               ;	aflag			; adventure mode
002000  3               ;	bflag			; big sprites (16x24)
002000  3               ;	iflag			; invert mode
002000  3               
002000  3               .if mflag
002000  3               	.out "- MEN/INV enabled"
002000  3               .endif
002000  3               .if pflag
002000  3               	.out "- Particles enabled"
002000  3               .endif
002000  3               .if sflag
002000  3               	.out "- Scrolling enabled"
002000  3               .endif
002000  3               .if dflag
002000  3               	.out "- Digging enabled"
002000  3               .endif
002000  3               .if cflag
002000  3               	.out "- Collectable blocks enabled"
002000  3               .endif
002000  3               .if oflag
002000  3               	.out "- Objects enabled"
002000  3               .endif
002000  3               .if lflag
002000  3               	.out "- Ladders enabled"
002000  3               .endif
002000  3               .if aflag
002000  3               	.out "- Adventure mode enabled"
002000  3               .endif
002000  3               .if bflag
002000  3               	.out "- Big Sprites (16x24) enabled"
002000  3               .endif
002000  3               .if iflag
002000  3               	.out "- Invert mode enabled"
002000  3               .endif
002000  3               .if gflag
002000  3               	.out "- Colour mode enabled"
002000  3               .endif
002000  3               .if rflag
002000  3               	.out "- RAM saving mode enabled"
002000  3               .endif
002000  3               
002000  3               ; Global definitions ------------------------------------------------------------
002000  3               
002000  3               	FONT = font		; Font address
002000  3               
002000  3               	green	= $00		; Colour definition filters
002000  3               	yellow	= $55
002000  3               	blue	= $aa
002000  3               	red	= $ff
002000  3               
002000  3               ; Block characteristics.
002000  3               
002000  3               	PLATFM	= 1		; platform.
002000  3               	WALL	= PLATFM + 1	; solid wall.
002000  3               	LADDER	= WALL + 1	; ladder.
002000  3               	FODDER	= LADDER + 1	; fodder block.
002000  3               	DEADLY	= FODDER + 1	; deadly block.
002000  3               	CUSTOM	= DEADLY + 1	; custom block.
002000  3               	WATER	= CUSTOM + 1	; water block.
002000  3                       COLECT	= WATER + 1	; collectable block.
002000  3                       NUMTYP	= COLECT + 1	; number of types.
002000  3               
002000  3               ; Sprites.
002000  3               
002000  3               .if bflag
002000  3               	SPR_HGT	= 24		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 8		; number of sprites.
002000  3               .else				; 16x16 sprites
002000  3               	SPR_HGT = 16		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 12		; number of sprites.
002000  3               .endif
002000  3               
002000  3               	TABSIZ = 17		; size of each entry.
002000  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002000  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002000  3               	var_X  = 8		; new x coordinate of sprite.
002000  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002000  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002000  3               
002000  3               ; Particle engine.
002000  3               
002000  3               	NUMSHR = 55		; pieces of shrapnel.
002000  3               	SHRSIZ = 6		; bytes per particle.
002000  3               
002000  3               ; System constants
002000  3               
002000  3               	ScrSelAddr  = $b000	; Screen selection address
002000  3               	KeyRowAddr  = $b000	; PIA key matrix row
002000  3               	KeyColAddr  = $b001	; PIA key matrix column
002000  3               	SpeakerBit  = $b002	; Speaker bit
002000  3               	CmdReg      = $b400	; Command register AtoMMC
002000  3               	DatReg      = $b401	; Data register AtoMMC
002000  3               	Timer2_Low  = $b808	; Timer 2 low byte
002000  3               	Timer2_High = $b809	; Timer 2 high byte
002000  3               	ScreenAddr  = $e400	; Startaddress video RAM
002000  3               
002000  3               	MAP 	    = $dd00		; properties map buffer (3x256 bytes)
002000  3               	SCADTB_lb   = MAP+3*256		; screen address table lo-byte (256 bytes)
002000  3               	SCADTB_hb   = SCADTB_lb+256	; screen address table hi-byte (256 bytes)
002000  3               	SHRAPN      = SCADTB_hb+256	; shrapnel table (55x6 bytes)
002000  3               
002000  3               ; System calls
002000  3               
002000  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
002000  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
002000  3               	OSRDCH   = $fe94	; get key subroutine
002000  3                       READKEY  = $fe71	; scan key matrix subroutine
002000  3               	OSWRCH	 = $fff4	; write character
002000  3               
002000  3               
002000  3               .if iflag
002000  3               	TxtInvert   = $ff	; Invert byte for character printing
002000  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002000  3               .else
002000  3               	TxtInvert   = $00	; Invert byte for character printing
002000  3               	ScrFillByte = $00	; Screen fill byte for CLS
002000  3               .endif
002000  3               
002000  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002000  3               
002000  3               ;===============================================================
002000  3               ; Game starts here
002000  3               ;===============================================================
002000  3               
002000  3               ;.segment "CODE"
002000  3               
002000  3  20 A0 37     	jsr init
002003  3               
002003  3               ; Clear variables
002003  3               
002003  3  A9 00        	lda #0
002005  3  A2 00        	ldx #0
002007  3               clrloop:
002007  3  95 00        	sta 0,x
002009  3  E8           	inx
00200A  3  D0 FB        	bne clrloop
00200C  3               
00200C  3               gameloop:
00200C  3  20 E5 20     	jsr game	 	; start the game.
00200F  3  4C 0C 20     	jmp gameloop		; Start again
002012  3               
002012  3               ; Definition of variables
002012  3               ; Make sure pointers are arranged in the same order as the data itself.
002012  3               
002012  3  AF 33        msgptr:		.word msgdat	; messages
002014  3  D0 33        blkptr:		.word chgfx	; block graphics.
002016  3  D8 33        proptr:		.word bprop	; address of char properties.
002018  3  D9 33        sptptr:		.word sprgfx	; sprite graphics
00201A  3  59 34        frmptr:		.word frmlst	; sprite frames.
00201C  3  5D 34        scrptr:		.word scdat	; address of screens.
00201E  3  69 34        nmeptr:		.word nmedat	; enemy start positions.
002020  3  6E 34        objptr:		.word objdta	; object graphics
002022  3               
002022  3               ;TxtFilter:	.byte $ff
002022  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
002026  3               
002026  3               ; Don't change the order of these four.
002026  3               ; Menu routine relies on winlft following wintop.
002026  3               
002026  3  01           wintop:		.byte WINDOWTOP	; top of window.
002027  3  01           winlft:		.byte WINDOWLFT	; left edge.
002028  3  16           winhgt:		.byte WINDOWHGT	; window height.
002029  3  1E           winwid:		.byte WINDOWWID	; window width.
00202A  3  01           numob:		.byte NUMOBJ	; number of objects in game.
00202B  3               
00202B  3               ; Variables start here.
00202B  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00202B  3               
00202B  3  08           wntopx:		.byte (8 * WINDOWTOP)
00202C  3  08           wnlftx:		.byte (8 * WINDOWLFT)
00202D  3  A8           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00202E  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00202F  3               
00202F  3               ; Assorted game routines which can go in contended memory.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for inventory called by the INV command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with objects seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected objectnr of INV menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               .if mflag
00202F  3               minve:
00202F  3               .if gflag
00202F  3               	lda #$ff		; blue frontcolour
00202F  3               	sta andeor
00202F  3               	lda #$aa		; yellow backcoloour
00202F  3               	sta andeor+1
00202F  3               .endif
00202F  3               	lda #<(invdis)		; routine address.
00202F  3               	sta mod0+1		; set up menu routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(invdis)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               	lda #<(fopt)		; find option from available objects.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fopt)
00202F  3               	sta mod1+1+1
00202F  3               	jmp dbox		; do menu routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for menu called by the MENU command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with menu items seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected line nr of MENU menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               mmenu:
00202F  3               	lda #<(always)		; routine address.
00202F  3               	sta mod0+1		; set up routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(always)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               
00202F  3               	lda #<(fstd)		; standard option selection.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fstd)
00202F  3               	sta mod1+2
00202F  3               
00202F  3               ; Drop through into box routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Work out size of box for message or menu.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               dbox:
00202F  3               	lda #<(msgdat)		; pointer to messages.
00202F  3               	sta z80_l
00202F  3               	lda #>(msgdat)
00202F  3               	sta z80_h
00202F  3               
00202F  3               	jsr getwrd		; get message number.
00202F  3               
00202F  3               	lda z80_h		; store pointer to message.
00202F  3               	sta TmpAddr
00202F  3               	lda z80_l
00202F  3               	sta TmpAddr+1
00202F  3               
00202F  3               	lda #1			; height.
00202F  3               	sta z80_d
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               	sta z80_e		; maximum width.
00202F  3               dbox5:
00202F  3               	lda #0			; this line"s width.
00202F  3               	sta z80_b
00202F  3               mod2:
00202F  3               	jsr always		; item in player"s possession?
00202F  3               	cmp #255
00202F  3               	bne dbox6		; not in inventory, skip this line.
00202F  3               	inc z80_d		; add to tally.
00202F  3               dbox6:
00202F  3               	ldy #0			; get character.
00202F  3               	lda (z80_hl),y
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a		; reached end of line?
00202F  3               	cmp #','
00202F  3               	beq dbox3		; yes.
00202F  3               	cmp #13
00202F  3               	beq dbox3		; yes.
00202F  3               	inc z80_b		; add to this line"s width.
00202F  3               	lda z80_a
00202F  3               	bmi dbox4		; end of message? yes, end count.
00202F  3               	jmp dbox6		; repeat until we find the end.
00202F  3               dbox3:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox5		; no, carry on looking.
00202F  3               	lda z80_b		; make this the widest so far.
00202F  3               	sta z80_e
00202F  3               	jmp dbox5		; keep looking.
00202F  3               dbox4:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox8		; no, carry on looking.
00202F  3               	lda z80_b		; final line is the longest so far.
00202F  3               	sta z80_e
00202F  3               dbox8:
00202F  3               	dec z80_d		; decrement items found.
00202F  3               	bne :+			; total was zero.
00202F  3               	lda #255
00202F  3               	sta varopt
00202F  3               	jmp dbox15
00202F  3               :
00202F  3               	lda z80_e		; longest line.
00202F  3               	bne :+			; was it zero?
00202F  3               	jmp dbox15		; total was zero.
00202F  3               :
00202F  3               	sta bwid		; set up size.
00202F  3               	lda z80_d
00202F  3               	sta blen
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; That's set up our box size.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               	lda winhgt		; window height in characters.
00202F  3               	sec
00202F  3               	sbc z80_d		; subtract height of box.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc wintop		; add top edge of window.
00202F  3               	sta btop		; set up box top.
00202F  3               
00202F  3               	lda winwid		; window width in characters.
00202F  3               	sec
00202F  3               	sbc z80_e		; subtract box width.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc winlft		; add left edge of window.
00202F  3               	sta blft		; box left.
00202F  3               
00202F  3               	lda #<(FONT-256)		; font.
00202F  3               	sta grbase		; set up for text display.
00202F  3               	lda #>(FONT-256)
00202F  3               	sta grbase+1
00202F  3               
00202F  3               	lda TmpAddr+1		; restore message pointer.
00202F  3               	sta z80_l
00202F  3               	lda TmpAddr
00202F  3               	sta z80_h
00202F  3               
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set display coordinate.
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               dbox2:
00202F  3               	lda combyt		; get object number.
00202F  3               	sta z80_a
00202F  3               mod0:
00202F  3               	jsr always		; check inventory for display.
00202F  3               	cmp #255
00202F  3               	beq :+
00202F  3               	jmp dbox13		; not in inventory, skip this line.
00202F  3               :
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set left display position.
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_b		; store width.
00202F  3               dbox0:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	cmp #','		; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               	cmp #13			; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               
00202F  3               	cmp #141			; end of line?
00202F  3               	bne :+
00202F  3               	dec bwid
00202F  3               	jmp dbox7		; yes, next one.
00202F  3               :
00202F  3               	dec z80_b		; one less to display.
00202F  3               	and #127		; remove terminator.
00202F  3               
00202F  3               	jsr pchr		; display on screen.
00202F  3               
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a
00202F  3               	cmp #128		; end of message?
00202F  3               	bmi :+
00202F  3               	jmp dbox7		; yes, job done.
00202F  3               :
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	beq :+			; are any left?
00202F  3               	jmp dbox0		; yes, continue.
00202F  3               :
00202F  3               ;---------------------------------------------------
00202F  3               ; Reached limit of characters per line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dbox9:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #13			; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #128		; end of message?
00202F  3               	bcs :+
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox9
00202F  3               
00202F  3               ;---------------------------------------------------
00202F  3               ; Fill box to end of line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dboxf:
00202F  3               	lda #32			; space character.
00202F  3               	jsr pchr		; display character.
00202F  3               	dec z80_b
00202F  3               	beq :+
00202F  3               	jmp dboxf		; repeat for remaining chars on line.
00202F  3               :
00202F  3               	rts
00202F  3               dbox1:
00202F  3               	inc z80_l		; skip character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	jsr dboxf		; fill box out to right side.
00202F  3               dbox10:
00202F  3               	inc dispy		; y coordinate down a line next position.
00202F  3               	jmp dbox2		; next line.
00202F  3               dbox7:
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	bne :+			; are any left?
00202F  3               	jmp dbox11		; no, nothing to draw.
00202F  3               :
00202F  3               	jsr dboxf		; fill message to line.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Drawn the box menu, now select option.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox11:
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set bar position.
00202F  3               dbox14:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	bne dbox14		; yes, debounce it.
00202F  3               	jsr dbar		; draw bar.
00202F  3               dbox12:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	beq dbox12		; no, nothing.
00202F  3               	and #16			; fire button pressed?
00202F  3               	bne :+
00202F  3               mod1:
00202F  3               	jmp fstd		; yes, job done.
00202F  3               :
00202F  3               	jsr dbar		; delete bar.
00202F  3               
00202F  3               	lda joyval		; joystick reading.
00202F  3               	and #8			; going up?
00202F  3               	beq dboxu		; yes, go up.
00202F  3               
00202F  3               	ldx dispy		; vertical position of bar.
00202F  3               	inx			; look down.
00202F  3               	txa
00202F  3               	sec
00202F  3               	sbc btop		; find distance from top.
00202F  3               	cmp blen		; top of box.
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	inc dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               dboxu:
00202F  3               	lda dispy		; vertical position of bar.
00202F  3               	cmp btop		; are we at the top?
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	dec dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               fstd:
00202F  3               	lda dispy		; bar position.
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta varopt		; store the option.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Option not available.  Skip this line.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox13:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               	cmp #13			; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               
00202F  3               	bpl :+			; end of message?
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox13
00202F  3               dbox15:
00202F  3               	lda TmpAddr		; pop message pointer from the stack.
00202F  3               	sta z80_h
00202F  3               	lda TmpAddr+1
00202F  3               	sta z80_l
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Invert bar
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbar:
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set display coordinate.
00202F  3               	jsr gprad		; get printing address.
00202F  3               
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_c		; loop counter in c.
00202F  3               	lda z80_h
00202F  3               	sta z80_d		; store screen address high byte.
00202F  3               dbar1:
00202F  3               	ldx #7			; pixel height in b.
00202F  3               dbar0:
00202F  3               	ldy scrtab,x
00202F  3               	lda (scraddr),y		; get screen byte.
00202F  3               	eor #255		; reverse all bits.
00202F  3               	sta (scraddr),y		; write back to screen.
00202F  3               	dex			; next line down.
00202F  3               	bpl dbar0		; draw rest of character.
00202F  3               
00202F  3               	inc scraddr		; one char right.
00202F  3               	dec z80_c		; decrement character counter.
00202F  3               	bne dbar1		; repeat for whole line.
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Point to object
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  combyt
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  A = object number, A=255 if already in possession
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               invdis:
00202F  3               	lda z80_l		; store message text pointer.
00202F  3               	pha
00202F  3               	lda z80_h
00202F  3               	pha
00202F  3               	lda combyt		; object number.
00202F  3               	inc combyt		; ready for next one.
00202F  3               	jsr gotob		; check if we have object.
00202F  3               	tay
00202F  3               	pla
00202F  3               	sta z80_h
00202F  3               	pla
00202F  3               	sta z80_l
00202F  3               	tya
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Find option selected.
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  -
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected object
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               fopt:
00202F  3               	lda dispy
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta tmp+2		; option selected in b register.
00202F  3               	inc tmp+2
00202F  3               
00202F  3               	lda #0			; set to first item.
00202F  3               	sta combyt		; object number.
00202F  3               fopt0:
00202F  3               	jsr fobj		; find next object in inventory.
00202F  3               	dec tmp+2
00202F  3               	bne fopt0		; repeat for relevant steps down the list.
00202F  3               
00202F  3               	lda combyt		; get option.
00202F  3               	sta varopt		; store the option.
00202F  3               	dec varopt		; one less, due to where we increment combyt.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               fobj:
00202F  3               	ldy combyt		; object number.
00202F  3               	inc combyt		; ready for next item.
00202F  3               	tya
00202F  3               	jsr gotob		; do we have this item?
00202F  3               	cmp #255
00202F  3               	bne :+
00202F  3               	rts
00202F  3               :
00202F  3               	jmp fobj		; yes, it's on the list.
00202F  3               
00202F  3               ;bwid:	.byte 0              ; box/menu width.
00202F  3               ;blen:	.byte 0              ; box/menu height.
00202F  3               ;btop:	.byte 0              ; box coordinates.
00202F  3               ;blft:	.byte 0
00202F  3               .endif
00202F  3               
00202F  3               ;----------------------------------------------------
00202F  3               ; Delay routine 1/50 sec
00202F  3               ;----------------------------------------------------
00202F  3               
00202F  3               delay:
00202F  3  8D E0 37     	sta frames_delay
002032  3               del_loop:
002032  3  AD E0 37     	lda frames_delay
002035  3  D0 FB        	bne del_loop
002037  3  60           	rts
002038  3               
002038  3               ;----------------------------------------------------
002038  3               ; Clear sprite table.
002038  3               ;
002038  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002038  3               ;----------------------------------------------------
002038  3               
002038  3               xspr:
002038  3  A9 FF        	lda #255		; clear byte.
00203A  3  A2 00        	ldx #0			; length of table.
00203C  3               xspr0:
00203C  3  9D 3D 32     	sta sprtab,x		; sprite table.
00203F  3  E8           	inx			; move to next byte.
002040  3  E0 CC        	cpx #SPRBUF
002042  3  D0 F8        	bne xspr0		; repeat for rest of table.
002044  3  60           	rts
002045  3               
002045  3               ;-------------------------------------------------------------
002045  3               ; Initialise all objects.
002045  3               ;
002045  3               ; Reset current room,y,x to start room,y,x for all objects
002045  3               ;-------------------------------------------------------------
002045  3               
002045  3               .if oflag
002045  3               iniob:
002045  3               	lda #<objdta 		; objects table.
002045  3               	sta z80_x
002045  3               	lda #>objdta
002045  3               	sta z80_i
002045  3               
002045  3               	ldx numob 		; number of objects in the game.
002045  3               iniob0:
002045  3               	ldy #35
002045  3               	lda (z80_ix),y 		; start screen.
002045  3               	ldy #32
002045  3               	sta (z80_ix),y 		; set start screen.
002045  3               
002045  3               	ldy #36
002045  3               	lda (z80_ix),y 		; find start y.
002045  3               	ldy #33
002045  3               	sta (z80_ix),y 		; set start y.
002045  3               
002045  3               	ldy #37
002045  3               	lda (z80_ix),y 		; get initial x.
002045  3               	ldy #34
002045  3               	sta (z80_ix),y 		; set x coord.
002045  3               
002045  3               	clc 			; point to next object.
002045  3               	lda z80_x
002045  3               	adc #38			; distance between objects.
002045  3               	sta z80_x
002045  3               	bcc :+
002045  3               	inc z80_i
002045  3               :
002045  3               	dex 			; repeat.
002045  3               	bne iniob0
002045  3               
002045  3               	rts
002045  3               .endif
002045  3               
002045  3               ;-------------------------------------------------------------
002045  3               ; Screen synchronisation.
002045  3               ;
002045  3               ;  - read joystick/keyboard
002045  3               ;  - handle sound
002045  3               ;  - handle shrapnel every even frame
002045  3               ;  - sync framerate to 25 Hz
002045  3               ;-------------------------------------------------------------
002045  3               
002045  3               vsync:
002045  3               
002045  3               ; Save registers
002045  3               
002045  3  48           	pha
002046  3  98           	tya
002047  3  48           	pha
002048  3  8A           	txa
002049  3  48           	pha
00204A  3               
00204A  3               ; Read joystick/keyboard
00204A  3               
00204A  3  20 7A 29     	jsr joykey		; read joystick/keyboard.
00204D  3               
00204D  3               ; Handle shrapnel every even frame
00204D  3               
00204D  3  A5 rr        	lda clock
00204F  3  29 01        	and #1
002051  3  D0 03        	bne:+
002053  3  20 E4 20     	jsr proshr		; handle shrapnel every even frame
002056  3               :
002056  3               
002056  3               ; Handle sound
002056  3               
002056  3  AD 8A 20     	lda sndtyp
002059  3  F0 18        	beq sndskip
00205B  3               sndloop:
00205B  3  AC 8A 20     	ldy sndtyp
00205E  3               sndwait:
00205E  3  88           	dey
00205F  3  D0 FD        	bne sndwait
002061  3  AD 8A 20     	lda sndtyp
002064  3  8D 00 D2     	sta AUDF1
002067  3  A9 0F        	lda #15
002069  3  09 A0        	ora #%10100000
00206B  3  8D 01 D2     	sta AUDC1
00206E  3  CE 8A 20     	dec sndtyp
002071  3  D0 E8        	bne sndloop
002073  3               sndskip:
002073  3  A9 00        	lda #$00
002075  3  8D 01 D2     	sta AUDC1		; disable sound
002078  3               
002078  3               ; Sync framerate to 25 Hz
002078  3               
002078  3               check_if_enough_frames_passed:
002078  3  AD DF 37     	lda frames_passed
00207B  3  C9 02        	cmp #2
00207D  3  90 F9        	bcc check_if_enough_frames_passed
00207F  3               
00207F  3  A9 00        	lda #0			; sync framerate 25 Hz
002081  3  8D DF 37     	sta frames_passed
002084  3               
002084  3               ; Restore registers
002084  3               
002084  3  68           	pla
002085  3  AA           	tax
002086  3  68           	pla
002087  3  A8           	tay
002088  3  68           	pla
002089  3  60           	rts
00208A  3               
00208A  3  00           sndtyp:	.byte 0
00208B  3               
00208B  3               ;-----------------------------------------------
00208B  3               ; Redraw the screen.
00208B  3               ;
00208B  3               ; Remove old copy of all sprites for redraw.
00208B  3               ;-----------------------------------------------
00208B  3               
00208B  3               redraw:
00208B  3               .if gflag
00208B  3               	lda #$ff
00208B  3               	sta andeor
00208B  3               	lda #$00
00208B  3               	sta andeor+1
00208B  3               .endif
00208B  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
00208D  3  48           	pha
00208E  3  A5 68        	lda z80_x
002090  3  48           	pha
002091  3               
002091  3  20 FE 25     	jsr droom		; show screen layout.
002094  3               .if oflag
002094  3               	jsr shwob		; draw objects.
002094  3               .endif
002094  3               numsp0:
002094  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002096  3  85 rr        	sta tmp
002098  3               
002098  3  A9 3D        	lda #<sprtab		; sprite table.
00209A  3  85 68        	sta z80_x
00209C  3  A9 32        	lda #>sprtab
00209E  3  85 69        	sta z80_i
0020A0  3               redrw0:
0020A0  3  A0 00        	ldy #0
0020A2  3  B1 68        	lda (z80_ix),y		; old sprite type.
0020A4  3  C9 FF        	cmp #255		; is it enabled?
0020A6  3  F0 0B        	beq redrw1 		; no, find next one.
0020A8  3               
0020A8  3  A0 03        	ldy #3
0020AA  3  B1 68        	lda (z80_ix),y 		; sprite y.
0020AC  3  C9 B1        	cmp #177		; beyond maximum?
0020AE  3  B0 03        	bcs redrw1		; yes, nothing to draw.
0020B0  3               
0020B0  3  20 06 2D     	jsr sspria		; show single sprite.
0020B3  3               redrw1:
0020B3  3  18           	clc			; next sprite.
0020B4  3  A5 68        	lda z80_x
0020B6  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
0020B8  3  85 68        	sta z80_x
0020BA  3  90 02        	bcc :+
0020BC  3  E6 69        	inc z80_i
0020BE  3               :
0020BE  3  C6 rr        	dec tmp			; repeat for remaining sprites.
0020C0  3  D0 DE        	bne redrw0
0020C2  3               rpblc1:
0020C2  3               ;	jsr dshrp		; redraw shrapnel.
0020C2  3               
0020C2  3               .if aflag
0020C2  3               	jsr rbloc		; draw blocks for this screen
0020C2  3               .endif
0020C2  3  68           	pla			; retrieve sprite pointer.
0020C3  3  85 68        	sta z80_x
0020C5  3  68           	pla
0020C6  3  85 69        	sta z80_i
0020C8  3               
0020C8  3  60           	rts
0020C9  3               
0020C9  3               ;----------------------------------------------------------------------
0020C9  3               ; Clear screen routine.
0020C9  3               ;
0020C9  3               ; Fill screenmem $e400-$fbff with ScrFillByte
0020C9  3               ;----------------------------------------------------------------------
0020C9  3               
0020C9  3               cls:
0020C9  3  A9 E4        	lda #>ScreenAddr		; screen address.
0020CB  3  8D D4 20     	sta clsloop+2
0020CE  3  A9 00        	lda #ScrFillByte
0020D0  3               .if gflag
0020D0  3               	lda andeor+1
0020D0  3               .endif
0020D0  3               .if iflag
0020D0  3               	eor #$ff
0020D0  3               .endif
0020D0  3  A0 00        	ldy #0
0020D2  3               clsloop:
0020D2  3  99 00 E4     	sta ScreenAddr,y
0020D5  3  C8           	iny
0020D6  3  D0 FA        	bne clsloop
0020D8  3  EE D4 20     	inc clsloop+2
0020DB  3  AE D4 20     	ldx clsloop+2
0020DE  3  E0 FC        	cpx #>(ScreenAddr+$1800)
0020E0  3  D0 F0        	bne clsloop
0020E2  3  60           	rts
0020E3  3               
0020E3  3               ;----------------------------------------------------------------------
0020E3  3               ; Atomic palette is static
0020E3  3               ;----------------------------------------------------------------------
0020E3  3               
0020E3  3               setpal:
0020E3  3  60           	rts
0020E4  3               
0020E4  3               ;----------------------------------------------------------------------
0020E4  3               ; FODDER check
0020E4  3               ;----------------------------------------------------------------------
0020E4  3               
0020E4  3               .if pflag .or dflag
0020E4  3               fdchk:
0020E4  3               	cmp #FODDER 		; is it fodder?
0020E4  3               	beq :+
0020E4  3               	rts 			; no.
0020E4  3               :
0020E4  3               	lda #0			; wipe fodder in MAP
0020E4  3               	ldy #0
0020E4  3               	sta (bufaddr),y 	; rewrite block type.
0020E4  3               
0020E4  3               	lda dispx		; x=x/8
0020E4  3               	pha
0020E4  3               	lsr a
0020E4  3               	lsr a
0020E4  3               	lsr a
0020E4  3               	sta dispx
0020E4  3               
0020E4  3               	lda dispy		; y=y/8
0020E4  3               	pha
0020E4  3               	lsr a
0020E4  3               	lsr a
0020E4  3               	lsr a
0020E4  3               	sta dispy
0020E4  3               
0020E4  3               	lda #0 			; block to write.
0020E4  3               	jsr pattr 		; write block.
0020E4  3               
0020E4  3               	pla
0020E4  3               	sta dispy
0020E4  3               	pla
0020E4  3               	sta dispx
0020E4  3               	rts
0020E4  3               .endif
0020E4  3               
0020E4  3               ;----------------------------------------------------
0020E4  3               ; Scrolly text and puzzle variables.
0020E4  3               ;----------------------------------------------------
0020E4  3               
0020E4  3               .if sflag
0020E4  3               txtbit:	.byte 128		; bit to write.
0020E4  3               txtwid:	.byte 16		; width of ticker message.
0020E4  3               txtpos:	.word msgdat
0020E4  3               txtini:	.word msgdat
0020E4  3               txtscr:	.word ScreenAddr
0020E4  3               .endif
0020E4  3               
0020E4  3               ;----------------------------------------------------
0020E4  3               ; Specialist routines.
0020E4  3               ; Process shrapnel.
0020E4  3               ;----------------------------------------------------
0020E4  3               proshr:
0020E4  3               .if pflag
0020E4  3               	lda #<SHRAPN		; table.
0020E4  3               	sta z80_x
0020E4  3               	lda #>SHRAPN
0020E4  3               	sta z80_i
0020E4  3               
0020E4  3               	lda #NUMSHR		; shrapnel pieces to process.
0020E4  3               	sta shrctr
0020E4  3               prosh0:
0020E4  3               	ldy #0
0020E4  3               	lda (z80_ix),y		; on/off marker.
0020E4  3               	asl a
0020E4  3               proshx:
0020E4  3               	bcs :+
0020E4  3               	jsr prosh1 		; on, so process it.
0020E4  3               :
0020E4  3               	clc
0020E4  3               	lda z80_x
0020E4  3               	adc #SHRSIZ
0020E4  3               	sta z80_x
0020E4  3               	bcc :+
0020E4  3               	inc z80_i
0020E4  3               :
0020E4  3               	dec shrctr		; round again.
0020E4  3               	bne prosh0
0020E4  3               .endif
0020E4  3               .if sflag
0020E4  3               	jsr scrly
0020E4  3               .endif
0020E4  3  60           	rts
0020E5  3               
0020E5  3               .if pflag
0020E5  3               ;shrctr:	.byte 0
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Proces shrapnel piece
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               prosh1:
0020E5  3               	jsr plot 		; delete the pixel.
0020E5  3               
0020E5  3               	lda #<shrptr		; shrapnel routine pointers.
0020E5  3               	sta z80_l
0020E5  3               	lda #>shrptr
0020E5  3               	sta z80_h
0020E5  3               
0020E5  3               	ldy #0
0020E5  3               	lda (z80_ix),y		; restore shrapnel type.
0020E5  3               	jsr prosh2 		; run the routine.
0020E5  3               	jsr chkxy		; check x and y are good before we redisplay.
0020E5  3               
0020E5  3               	lda #<SHRSIZ 		; distance to next.
0020E5  3               	sta z80_e
0020E5  3               	lda #>SHRSIZ
0020E5  3               	sta z80_d
0020E5  3               	rts
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Run the routine
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               prosh2:
0020E5  3               	asl a 			; 2 bytes per address.
0020E5  3               	tay
0020E5  3               	lda shrptr,y
0020E5  3               	sta z80_l
0020E5  3               	lda shrptr+1,y 		; fetch high byte from table.
0020E5  3               	sta z80_h
0020E5  3               	jmp (z80_hl) 		; jump to routine.
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Paricle routine table
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               shrptr:	.word laser		; laser.
0020E5  3               	.word trail		; vapour trail.
0020E5  3               	.word shrap		; shrapnel from explosion.
0020E5  3               	.word dotl		; horizontal starfield left.
0020E5  3               	.word dotr		; horizontal starfield right.
0020E5  3               	.word dotu		; vertical starfield up.
0020E5  3               	.word dotd		; vertical starfield down.
0020E5  3               	.word ptcusr		; user particle.
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Explosion shrapnel.
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               shrap:
0020E5  3               	ldy #1
0020E5  3               	lda (z80_ix),y 		; get the angle.
0020E5  3               	clc
0020E5  3               	adc #<shrsin		; shrapnel sine table.
0020E5  3               	sta z80_l
0020E5  3               	lda #>shrsin
0020E5  3               	adc #0
0020E5  3               	sta z80_h
0020E5  3               
0020E5  3               	ldy #0
0020E5  3               	lda (z80_hl),y 		; fetch value from table.
0020E5  3               	sta z80_e
0020E5  3               	inc z80_l 		; next byte of table.
0020E5  3               	bne :+
0020E5  3               	inc z80_h
0020E5  3               :
0020E5  3               	ldy #0
0020E5  3               	lda (z80_hl),y		; fetch value from table.
0020E5  3               	sta z80_d
0020E5  3               	inc z80_l		; next byte of table.
0020E5  3               	bne :+
0020E5  3               	inc z80_h
0020E5  3               :
0020E5  3               	ldy #0
0020E5  3               	lda (z80_hl),y 		; fetch value from table.
0020E5  3               	sta z80_c
0020E5  3               	inc z80_l 		; next byte of table.
0020E5  3               	bne :+
0020E5  3               	inc z80_h
0020E5  3               :
0020E5  3               	ldy #0
0020E5  3               	lda (z80_hl),y 		; fetch value from table.
0020E5  3               	sta z80_b
0020E5  3               
0020E5  3               	ldy #2
0020E5  3               	lda (z80_ix),y 		; x coordinate in hl.
0020E5  3               	clc
0020E5  3               	adc z80_e		; add sine lb
0020E5  3               	sta (z80_ix),y		; store new coordinate lb.
0020E5  3               	ldy #3
0020E5  3               	lda (z80_ix),y
0020E5  3               	adc z80_d		; add sine hb
0020E5  3               	sta (z80_ix),y		; store new coordinate hb.
0020E5  3               
0020E5  3               	ldy #4
0020E5  3               	lda (z80_ix),y	 	; y coordinate in hl.
0020E5  3               	clc
0020E5  3               	adc z80_c		; add cosine lb
0020E5  3               	sta (z80_ix),y		; store new coordinate lb.
0020E5  3               	ldy #5
0020E5  3               	lda (z80_ix),y
0020E5  3               	adc z80_b		; add cosine lb
0020E5  3               	sta (z80_ix),y		; store new coordinate hb.
0020E5  3               
0020E5  3               	rts
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Move dots
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               dotl:
0020E5  3               	ldy #5
0020E5  3               	lda (z80_ix),y
0020E5  3               	sec
0020E5  3               	sbc #1		 	; move left.
0020E5  3               	sta (z80_ix),y
0020E5  3               	rts
0020E5  3               dotr:
0020E5  3               	ldy #5
0020E5  3               	lda (z80_ix),y
0020E5  3               	clc
0020E5  3               	adc #1		 	; move left.
0020E5  3               	sta (z80_ix),y
0020E5  3               	rts
0020E5  3               dotu:
0020E5  3               	ldy #3
0020E5  3               	lda (z80_ix),y
0020E5  3               	sec
0020E5  3               	sbc #1		 	; move up.
0020E5  3               	sta (z80_ix),y
0020E5  3               	rts
0020E5  3               dotd:
0020E5  3               	ldy #3
0020E5  3               	lda (z80_ix),y
0020E5  3               	clc
0020E5  3               	adc #1			; move down.
0020E5  3               	sta (z80_ix),y
0020E5  3               	rts
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Check if coordinates are ok before redrawing at new position.
0020E5  3               ;
0020E5  3               ; left:   X>L		X=L	Ok
0020E5  3               ; right:  R+15>X	X=R	Ok
0020E5  3               ; top:    Y>T		Y=T	Ok
0020E5  3               ; bottom: B+15>Y	Y=B	Ok
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               chkxy:
0020E5  3               
0020E5  3               ; top:    Y>T		Y=T	Ok
0020E5  3               
0020E5  3               	ldy #3
0020E5  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0020E5  3               	cmp wntopx		; window top.
0020E5  3               	bcs :+			; compare with top window limit.
0020E5  3               	jmp kilshr		; out of window, kill shrapnel.
0020E5  3               :
0020E5  3               ; left:   X>L		X=L	Ok
0020E5  3               
0020E5  3               	ldy #5
0020E5  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0020E5  3               	cmp wnlftx		; left edge.
0020E5  3               	bcs :+			; compare with left window limit.
0020E5  3               	jmp kilshr		; out of window, kill shrapnel.
0020E5  3               :
0020E5  3               ; bottom: B+15>Y	Y=B	Ok
0020E5  3               
0020E5  3               	lda wnbotx		; point to bottom.
0020E5  3               	clc
0020E5  3               	adc #15
0020E5  3               	ldy #3
0020E5  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0020E5  3               	bcs :+			; compare with shrapnel x coordinate.
0020E5  3               	jmp kilshr		; off screen, kill shrapnel..
0020E5  3               :
0020E5  3               ; right:  R+15>X	X=R	Ok
0020E5  3               
0020E5  3               	lda wnrgtx		; point to right edge.
0020E5  3               	clc
0020E5  3               	adc #15
0020E5  3               	ldy #5
0020E5  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0020E5  3               	bcs :+			; compare with window limit.
0020E5  3               	jmp kilshr		; off screen, kill shrapnel.
0020E5  3               :
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Drop through.
0020E5  3               ; Display shrapnel.
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               plot:
0020E5  3               	ldy #3
0020E5  3               	lda (z80_ix),y		; y integer.
0020E5  3               	sta dispy	 	; workspace coordinates.
0020E5  3               	ldy #5
0020E5  3               	lda (z80_ix),y	 	; x integer.
0020E5  3               	sta dispx 		; workspace coordinates.
0020E5  3               
0020E5  3               	ldy #0
0020E5  3               	lda (z80_ix),y 		; type.
0020E5  3               	bne :+			; is it a laser?
0020E5  3               	jmp plot1 		; yes, draw laser instead.
0020E5  3               :
0020E5  3               plot0:
0020E5  3               	lda dispx		; which pixel within byte do we
0020E5  3               	and #7			; want to set first?
0020E5  3               	tay
0020E5  3               	lda dots,y 		; table of small pixel positions.
0020E5  3               	sta z80_e 		; get value.
0020E5  3               
0020E5  3               	jsr scadd 		; screen address.
0020E5  3               	ldy #0
0020E5  3               	lda (scraddr),y		; see what's already there.
0020E5  3               	eor z80_e
0020E5  3               	sta (scraddr),y 	; put back on screen.
0020E5  3               	rts
0020E5  3               
0020E5  3               plot1:
0020E5  3               	jsr scadd 		; screen address.
0020E5  3               	ldy #0
0020E5  3               	lda (scraddr),y 	; fetch byte there.
0020E5  3               	eor #255 		; toggle all bits.
0020E5  3               	sta (scraddr),y 	; new byte.
0020E5  3               	rts
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Switch off shrapnel
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               kilshr:
0020E5  3               	lda #128
0020E5  3               	ldy #0
0020E5  3               	sta (z80_ix),y	; switch off shrapnel.
0020E5  3               	rts
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Sine/cosine table
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               shrsin:	.word 0,1024,391,946,724,724,946,391
0020E5  3               	.word 1024,0,946,65144,724,64811,391,64589
0020E5  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0020E5  3               	.word 64512,0,64589,391,64811,724,65144,946
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Create trail
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               trail:
0020E5  3               	ldy #1
0020E5  3               	lda (z80_ix),y 	; time remaining.
0020E5  3               	sec
0020E5  3               	sbc #1
0020E5  3               	sta (z80_ix),y
0020E5  3               	bne :+
0020E5  3               	jmp trailk		; time to switch it off.
0020E5  3               :
0020E5  3               	jsr qrand		; get a random number.
0020E5  3               	lsr a 			; x or y axis?
0020E5  3               	bcc :+
0020E5  3               	jmp trailv		; use y.
0020E5  3               :
0020E5  3               ; Trail horizontal
0020E5  3               
0020E5  3               	lsr a 			; which direction?
0020E5  3               	bcc :+
0020E5  3               	jmp traill		; go left.
0020E5  3               :
0020E5  3               ; Trail right
0020E5  3               
0020E5  3               	ldy #5
0020E5  3               	lda (z80_ix),y
0020E5  3               	clc
0020E5  3               	adc #1	 		; go right.
0020E5  3               	sta (z80_ix),y
0020E5  3               	rts
0020E5  3               
0020E5  3               ; Trail left
0020E5  3               
0020E5  3               traill:
0020E5  3               	ldy #5
0020E5  3               	lda (z80_ix),y
0020E5  3               	sec
0020E5  3               	sbc #1 			; go left.
0020E5  3               	sta (z80_ix),y
0020E5  3               	rts
0020E5  3               
0020E5  3               ; Trail vertical
0020E5  3               
0020E5  3               trailv:
0020E5  3               	lsr a		 	; which direction?
0020E5  3               	bcc :+
0020E5  3               	jmp trailu		; go up.
0020E5  3               :
0020E5  3               ; Trail down
0020E5  3               
0020E5  3               	ldy #3
0020E5  3               	lda (z80_ix),y
0020E5  3               	clc
0020E5  3               	adc #1 			; go down.
0020E5  3               	sta (z80_ix),y
0020E5  3               	rts
0020E5  3               
0020E5  3               ; Trail up
0020E5  3               
0020E5  3               trailu:
0020E5  3               	ldy #3
0020E5  3               	lda (z80_ix),y
0020E5  3               	sec
0020E5  3               	sbc #1 			; go up.
0020E5  3               	sta (z80_ix),y
0020E5  3               	rts
0020E5  3               
0020E5  3               ; Kill trail
0020E5  3               
0020E5  3               trailk:
0020E5  3               	lda #200		; set off-screen to kill vapour trail.
0020E5  3               	ldy #3
0020E5  3               	sta (z80_ix),y
0020E5  3               	rts
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Create laser beam
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               laser:
0020E5  3               	ldy #1
0020E5  3               	lda (z80_ix),y 		; direction.
0020E5  3               	ror a 			; left or right?
0020E5  3               	bcc :+
0020E5  3               	jmp laserl		; move left.
0020E5  3               :
0020E5  3               ; Laser right
0020E5  3               
0020E5  3               	lda #8			; distance to travel.
0020E5  3               	sta z80_b
0020E5  3               	jmp laserm		; move laser.
0020E5  3               
0020E5  3               ; Laser left
0020E5  3               
0020E5  3               laserl:
0020E5  3               	lda #248		; distance to travel.
0020E5  3               	sta z80_b
0020E5  3               laserm:
0020E5  3               	ldy #5
0020E5  3               	lda (z80_ix),y		; x position.
0020E5  3               	clc
0020E5  3               	adc z80_b		; add distance.
0020E5  3               	sta (z80_ix),y		; set new x coordinate.
0020E5  3               
0020E5  3               ; Test new block.
0020E5  3               
0020E5  3               	sta dispx 		; set x for block collision detection purposes.
0020E5  3               	ldy #3
0020E5  3               	lda (z80_ix),y 		; get y.
0020E5  3               	sta dispy		; set coordinate for collision test.
0020E5  3               	jsr tstbl 		; get block type there.
0020E5  3               	cmp #WALL		; is it solid?
0020E5  3               	bne :+
0020E5  3               	jmp trailk		; yes, it cannot pass.
0020E5  3               :
0020E5  3               .if pflag .or dflag
0020E5  3                       cmp #FODDER             ; is it fodder?
0020E5  3                       bne :+
0020E5  3                       jsr fdchk               ; remove fodder block.
0020E5  3                       jmp trailk              ; destroy laser.
0020E5  3               :
0020E5  3               .endif
0020E5  3                       rts                     ; no, ignore it.
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Dots mask
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               dots:	.byte 128,64,32,16,8,4,2,1
0020E5  3               
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Plot, preserving de.
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               plotde:
0020E5  3               	lda z80_d 		; put de on stack.
0020E5  3               	pha
0020E5  3               	lda z80_e
0020E5  3               	pha
0020E5  3               
0020E5  3               	jsr plot 		; plot pixel.
0020E5  3               
0020E5  3               	pla			; restore de from stack.
0020E5  3               	sta z80_e
0020E5  3               	pla
0020E5  3               	sta z80_d
0020E5  3               
0020E5  3               	rts
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Shoot a laser.
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               shoot:
0020E5  3               	sta z80_c		; store direction in c register.
0020E5  3               	ldy #8
0020E5  3               	lda (z80_ix),y 		; y coordinate.
0020E5  3               	clc
0020E5  3               shoot1:
0020E5  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0020E5  3               	sta z80_l 		; puty y coordinate in l.
0020E5  3               
0020E5  3               	ldy #9
0020E5  3               	lda (z80_ix),y 		; x coordinate in h.
0020E5  3               	sta z80_h
0020E5  3               
0020E5  3               	lda z80_i		; store pointer to sprite.
0020E5  3               	pha
0020E5  3               	lda z80_x
0020E5  3               	pha
0020E5  3               
0020E5  3               	jsr fpslot 		; find particle slot.
0020E5  3               	bcs :+
0020E5  3               	jmp vapou2		; failed, restore ix.
0020E5  3               :
0020E5  3               	lda #0
0020E5  3               	ldy #0
0020E5  3               	sta (z80_ix),y 		; set up a laser.
0020E5  3               
0020E5  3               	lda z80_c
0020E5  3               	ldy #1
0020E5  3               	sta (z80_ix),y 		; set the direction.
0020E5  3               
0020E5  3               	lda z80_l
0020E5  3               	ldy #3
0020E5  3               	sta (z80_ix),y		; set y coordinate.
0020E5  3               
0020E5  3               	ror z80_c		; check direction we want.
0020E5  3               	bcc :+
0020E5  3               	jmp shootr		; shoot right.
0020E5  3               :
0020E5  3               	lda z80_h		; X position.
0020E5  3               shoot0:
0020E5  3               	and #248		; align on character boundary.
0020E5  3               	ldy #5
0020E5  3               	sta (z80_ix),y		; set x coordinate.
0020E5  3               	jmp vapou0 		; draw first image.
0020E5  3               shootr:
0020E5  3               	lda z80_h		; x position.
0020E5  3               	clc
0020E5  3               	adc #15			; look right.
0020E5  3               	jmp shoot0		; align and continue.
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Create a bit of vapour trail.
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               vapour:
0020E5  3               	lda z80_i		; store pointer to sprite.
0020E5  3               	pha
0020E5  3               	lda z80_x
0020E5  3               	pha
0020E5  3               
0020E5  3               	ldy #8
0020E5  3               	lda (z80_ix),y 		; y coordinate.
0020E5  3               	clc
0020E5  3               vapou3:
0020E5  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0020E5  3               	sta z80_l
0020E5  3               
0020E5  3               	ldy #9
0020E5  3               	lda (z80_ix),y 		; x coordinate.
0020E5  3               	adc #7
0020E5  3               	sta z80_h
0020E5  3               
0020E5  3               	jsr fpslot 		; find particle slot.
0020E5  3               	bcc :+
0020E5  3               	jmp vapou1		; no, we can use it.
0020E5  3               :
0020E5  3               vapou2:
0020E5  3               	pla
0020E5  3               	sta z80_x
0020E5  3               	pla
0020E5  3               	sta z80_i
0020E5  3               	rts
0020E5  3               vapou1:
0020E5  3               	lda z80_l
0020E5  3               	ldy #3
0020E5  3               	sta (z80_ix),y		; set up y.
0020E5  3               
0020E5  3               	lda z80_h
0020E5  3               	ldy #5
0020E5  3               	sta (z80_ix),y 		; set up x coordinate.
0020E5  3               
0020E5  3               	jsr qrand		; get quick random number.
0020E5  3               	and #15			; random time.
0020E5  3               	clc
0020E5  3               	adc #15			; minimum time on screen.
0020E5  3               	ldy #1
0020E5  3               	sta (z80_ix),y		; set time on screen.
0020E5  3               
0020E5  3               	lda #1
0020E5  3               	ldy #0
0020E5  3               	sta (z80_ix),y		; define particle as vapour trail.
0020E5  3               vapou0:
0020E5  3               	jsr chkxy		; plot first position.
0020E5  3               	jmp vapou2
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Create a user particle.
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               ptusr:
0020E5  3               	sta z80_f		; store timer.
0020E5  3               
0020E5  3               	ldy #8
0020E5  3               	lda (z80_ix),y 		; y coordinate.
0020E5  3               	clc
0020E5  3               	adc #7			; mid-point of sprite.
0020E5  3               	sta z80_l
0020E5  3               
0020E5  3               	ldy #9
0020E5  3               	lda (z80_ix),y 		; x coordinate.
0020E5  3               	clc
0020E5  3               	adc #7			; mid-point of sprite.
0020E5  3               	sta z80_h
0020E5  3               
0020E5  3               	jsr fpslot 		; find particle slot.
0020E5  3               	bcs ptusr1
0020E5  3               	rts 			; out of slots, can't generate anything.
0020E5  3               ptusr1:
0020E5  3               	lda z80_l
0020E5  3               	ldy #3
0020E5  3               	sta (z80_ix),y 		; set up y.
0020E5  3               
0020E5  3               	lda z80_h
0020E5  3               	ldy #5
0020E5  3               	sta (z80_ix),y		; set up x coordinate.
0020E5  3               
0020E5  3               	lda z80_f 		; restore timer.
0020E5  3               	ldy #1
0020E5  3               	sta (z80_ix),y		; set time on screen.
0020E5  3               
0020E5  3               	lda #7
0020E5  3               	ldy #0
0020E5  3               	sta (z80_ix),y		; define particle as user particle.
0020E5  3               
0020E5  3               	jmp chkxy		; plot first position.
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Create a vertical or horizontal star.
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               star:
0020E5  3               	lda z80_i		; store pointer to sprite.
0020E5  3               	pha
0020E5  3               	lda z80_x
0020E5  3               	pha
0020E5  3               
0020E5  3               	jsr fpslot 		; find particle slot.
0020E5  3               	bcs star7		; found one we can use.
0020E5  3               star0:
0020E5  3               	pla 			; restore sprite pointer.
0020E5  3               	sta z80_x
0020E5  3               	pla
0020E5  3               	sta z80_i
0020E5  3               	rts 			; out of slots, can't generate anything.
0020E5  3               star7:
0020E5  3               	lda z80_c		; direction.
0020E5  3               	and #3 			; is it left?
0020E5  3               	bne :+
0020E5  3               	jmp star1 		; yes, it's left.
0020E5  3               :
0020E5  3               	cmp #1 			; is it right?
0020E5  3               	bne :+
0020E5  3               	jmp star2 		; yes, it's right.
0020E5  3               :
0020E5  3               	cmp #2 			; is it up?
0020E5  3               	bne :+
0020E5  3               	jmp star3 		; yes, it's up.
0020E5  3               :
0020E5  3               	ldy wntopx 		; get edge of screen.
0020E5  3               	iny			; down one pixel.
0020E5  3               	tya
0020E5  3               star8:
0020E5  3               	ldy #3
0020E5  3               	sta (z80_ix),y 		; set y coord.
0020E5  3               	jsr qrand 		; get quick random number.
0020E5  3               star9:
0020E5  3               	ldy #5
0020E5  3               	sta (z80_ix),y		; set x position.
0020E5  3               
0020E5  3               	lda z80_c		; direction.
0020E5  3               	and #3			; zero to three.
0020E5  3               	clc
0020E5  3               	adc #3			; 3 to 6 for starfield.
0020E5  3               	ldy #0
0020E5  3               	sta (z80_ix),y		; define particle as star.
0020E5  3               	jsr chkxy		; plot first position.
0020E5  3               	jmp star0
0020E5  3               star1:
0020E5  3               	jsr qrand		; get quick random number.
0020E5  3               	ldy #3
0020E5  3               	sta (z80_ix),y 		; set y coord.
0020E5  3               
0020E5  3               	lda wnrgtx 		; get edge of screen.
0020E5  3               	clc
0020E5  3               	adc #15			; add width of sprite minus 1.
0020E5  3               	jmp star9
0020E5  3               star2:
0020E5  3               	jsr qrand 		; get quick random number.
0020E5  3               	ldy #3
0020E5  3               	sta (z80_ix),y		; set y coord.
0020E5  3               
0020E5  3               	lda wnlftx		; get edge of screen.
0020E5  3               	jmp star9
0020E5  3               star3:
0020E5  3               	lda wnbotx 		; get edge of screen.
0020E5  3               	clc
0020E5  3               	adc #15 		; height of sprite minus one pixel.
0020E5  3               	jmp star8
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Find particle slot for lasers or vapour trail.
0020E5  3               ; can't use alternate accumulator.
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               fpslot:
0020E5  3               	lda #<SHRAPN 		; shrapnel table.
0020E5  3               	sta z80_x
0020E5  3               	lda #>SHRAPN
0020E5  3               	sta z80_i
0020E5  3               
0020E5  3               	lda #NUMSHR		; number of pieces in table.
0020E5  3               	sta z80_b
0020E5  3               fpslt0:
0020E5  3               	ldy #0
0020E5  3               	lda (z80_ix),y		; get type.
0020E5  3               	asl a  			; is this slot in use?
0020E5  3               	bcc :+
0020E5  3               	rts			; no, we can use it.
0020E5  3               :
0020E5  3               	clc			; point to more shrapnel.
0020E5  3               	lda z80_x
0020E5  3               	adc #SHRSIZ
0020E5  3               	sta z80_x
0020E5  3               	bcc :+
0020E5  3               	inc z80_i
0020E5  3               :
0020E5  3               	dec z80_b		; repeat for all shrapnel.
0020E5  3               	bne fpslt0
0020E5  3               
0020E5  3               	clc
0020E5  3               	rts 			; out of slots, can't generate anything.
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Create an explosion at sprite position.
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               explod:
0020E5  3               	sta z80_c 		; particles to create.
0020E5  3               
0020E5  3               	lda z80_i 		; store pointer to sprite.
0020E5  3               	pha
0020E5  3               	lda z80_x
0020E5  3               	pha
0020E5  3               
0020E5  3               	ldy #8
0020E5  3               	lda (z80_ix),y 		; y coordinate.
0020E5  3               	sta z80_l
0020E5  3               	ldy #9
0020E5  3               	lda (z80_ix),y		; x coordinate.
0020E5  3               	sta z80_h
0020E5  3               
0020E5  3               	lda #<SHRAPN		; shrapnel table.
0020E5  3               	sta z80_x
0020E5  3               	lda #>SHRAPN
0020E5  3               	sta z80_i
0020E5  3               
0020E5  3               	lda #NUMSHR		; number of pieces in table.
0020E5  3               	sta explcnt
0020E5  3               expld0:
0020E5  3               	ldy #0
0020E5  3               	lda (z80_ix),y		; get type.
0020E5  3               	asl a 			; is this slot in use?
0020E5  3               	bcs expld1		; no, we can use it.
0020E5  3               expld2:
0020E5  3               	clc
0020E5  3               	lda z80_x
0020E5  3               	adc #SHRSIZ
0020E5  3               	sta z80_x
0020E5  3               	bcc :+
0020E5  3               	inc z80_i
0020E5  3               :
0020E5  3               	dec explcnt		; repeat for all shrapnel.
0020E5  3               	bne expld0
0020E5  3               expld3:
0020E5  3               	pla			; restore sprite pointer.
0020E5  3               	sta z80_x
0020E5  3               	pla
0020E5  3               	sta z80_i
0020E5  3               	rts 			; out of slots, can't generate any more.
0020E5  3               
0020E5  3               expld1:
0020E5  3               	lda z80_c		; shrapnel counter.
0020E5  3               	and #15			; 0 to 15.
0020E5  3               	clc			; add to x.
0020E5  3               	adc z80_l
0020E5  3               	ldy #3
0020E5  3               	sta (z80_ix),y		; y coord.
0020E5  3               
0020E5  3               	lda seed3 		; crap random number.
0020E5  3               	and #15			; 0 to 15.
0020E5  3               	clc 			; add to y.
0020E5  3               	adc z80_h
0020E5  3               	ldy #5
0020E5  3               	sta (z80_ix),y		; x coord.
0020E5  3               
0020E5  3               	lda #2
0020E5  3               	ldy #0
0020E5  3               	sta (z80_ix),y		; switch it on.
0020E5  3               
0020E5  3               	jsr chkxy		; plot first position.
0020E5  3               	jsr qrand		; quick random angle.
0020E5  3               	and #60 		; keep within range.
0020E5  3               	ldy #1
0020E5  3               	sta (z80_ix),y		; angle.
0020E5  3               
0020E5  3               	dec z80_c		; one less piece of shrapnel to generate.
0020E5  3               	bne expld2 		; back to main explosion loop.
0020E5  3               	jmp expld3 		; restore sprite pointer and exit.
0020E5  3               
0020E5  3               ;explcnt:	.byte 0
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Quick random
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               qrand:
0020E5  3               	jsr random		; r register.
0020E5  3               	eor seed3		; combine with seed.
0020E5  3               	sta seed3 		; new seed.
0020E5  3               	rts
0020E5  3               
0020E5  3               ;seed3:	.byte 0
0020E5  3               
0020E5  3               ;----------------------------------------------------
0020E5  3               ; Display all shrapnel.
0020E5  3               ;----------------------------------------------------
0020E5  3               
0020E5  3               dshrp:
0020E5  3               	lda #<plotde		; display routine.
0020E5  3               	sta proshx+1
0020E5  3               	lda #>plotde
0020E5  3               	sta proshx+2
0020E5  3               	jsr proshr		; process shrapnel.
0020E5  3               
0020E5  3               	lda #<prosh1		; processing routine.
0020E5  3               	sta proshx+1
0020E5  3               	lda #>prosh1
0020E5  3               	sta proshx+2
0020E5  3               	rts
0020E5  3               
0020E5  3               ;------------------------------------------------------
0020E5  3               ; Particle engine.
0020E5  3               ;
0020E5  3               ; Init particle data for 55 particles in SHRAPN table.
0020E5  3               ; Every particle has 6 bytes.
0020E5  3               ;
0020E5  3               ; global:	-
0020E5  3               ; local:	x,y,hl
0020E5  3               ; calls:	-
0020E5  3               ;------------------------------------------------------
0020E5  3               
0020E5  3               inishr:
0020E5  3               	lda #<SHRAPN 		; table.
0020E5  3               	sta z80_l
0020E5  3               	lda #>SHRAPN
0020E5  3               	sta z80_h
0020E5  3               
0020E5  3               	ldy #0
0020E5  3               	ldx #NUMSHR		; shrapnel pieces to process.
0020E5  3               inish0:
0020E5  3               	lda #255 		; kill the shrapnel.
0020E5  3               	sta (z80_hl),y
0020E5  3               
0020E5  3               	clc 			; point there.
0020E5  3               	lda z80_l
0020E5  3               	adc #SHRSIZ		; distance to next.
0020E5  3               	sta z80_l
0020E5  3               	bcc :+
0020E5  3               	inc z80_h
0020E5  3               :
0020E5  3               	dex
0020E5  3               	bne inish0 		; round again.
0020E5  3               	rts
0020E5  3               
0020E5  3               ;------------------------------------------------------
0020E5  3               ; Check for collision between laser and sprite.
0020E5  3               ;------------------------------------------------------
0020E5  3               
0020E5  3               lcol:
0020E5  3               	lda #<SHRAPN		; shrapnel table.
0020E5  3               	sta z80_l
0020E5  3               	lda #>SHRAPN
0020E5  3               	sta z80_h
0020E5  3               
0020E5  3               	lda #NUMSHR		; number of pieces in table.
0020E5  3               	sta z80_b
0020E5  3               lcol0:
0020E5  3               	ldy #0
0020E5  3               	lda (z80_hl),y 		; get type.
0020E5  3               	beq lcol1		; yes, check collision.
0020E5  3               lcol3:
0020E5  3               	clc			; point to more shrapnel.
0020E5  3               	lda z80_l
0020E5  3               	adc #SHRSIZ
0020E5  3               	sta z80_l
0020E5  3               	bcc :+
0020E5  3               	inc z80_h
0020E5  3               :
0020E5  3               	dec z80_b		; repeat for all shrapnel.
0020E5  3               	bne lcol0
0020E5  3               	rts 			; no collision, carry not set.
0020E5  3               lcol1:
0020E5  3               	ldy #3
0020E5  3               	lda (z80_hl),y		; get y.
0020E5  3               	sec
0020E5  3               	ldy #8
0020E5  3               	sbc (z80_ix),y		; subtract sprite y.
0020E5  3               lcolh:
0020E5  3               	cmp #SPR_HGT 		; within range?
0020E5  3               	bcc :+
0020E5  3               	jmp lcol2		; no, missed.
0020E5  3               :
0020E5  3               	ldy #5
0020E5  3               	lda (z80_hl),y 		; get x.
0020E5  3               	sec
0020E5  3               	ldy #9
0020E5  3               	sbc (z80_ix),y 		; subtract sprite y.
0020E5  3               	cmp #16			; within range?
0020E5  3               	bcs :+
0020E5  3               	jmp lcol4 		; yes, collision occurred.
0020E5  3               :
0020E5  3               lcol2:
0020E5  3               	jmp lcol3
0020E5  3               lcol4:
0020E5  3               	sec
0020E5  3               	rts 			; return with carry set for collision.
0020E5  3               .endif
0020E5  3               
0020E5  3               ;------------------------------------------------------
0020E5  3               ; Main game engine code starts here.
0020E5  3               ; After initialisation, mloop is the main loop
0020E5  3               ;------------------------------------------------------
0020E5  3               
0020E5  3               game:
0020E5  3               
0020E5  3               ; Set up screen address table.
0020E5  3               
0020E5  3               setsat:
0020E5  3  A9 00        	lda #<ScreenAddr		; start of screen.
0020E7  3  85 rr        	sta scraddr
0020E9  3  A9 E4        	lda #>ScreenAddr
0020EB  3  85 rr        	sta scraddr+1
0020ED  3               
0020ED  3  A0 00        	ldy #0			; vertical lines on screen.
0020EF  3               setsa0:
0020EF  3  A5 rr        	lda scraddr
0020F1  3  99 00 E0     	sta SCADTB_lb,y		; write low byte.
0020F4  3  A5 rr        	lda scraddr+1
0020F6  3  C0 C0        	cpy #192		; vertical lines on screen.
0020F8  3  90 02        	bcc :+
0020FA  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
0020FC  3               :
0020FC  3  99 00 E1     	sta SCADTB_hb,y		; write high byte.
0020FF  3  20 EF 2D     	jsr nline		; next line down.
002102  3  C8           	iny			; next position in table.
002103  3  D0 EA        	bne setsa0
002105  3               
002105  3               ; Init graphics mode
002105  3               
002105  3  A9 F0        	lda #ScrMode		; graphics mode
002107  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
00210A  3  20 E3 20     	jsr setpal 		; set up palette.
00210D  3               
00210D  3               ; Init AtoMMC joystick
00210D  3  20 58 38     	jsr joyinit		; AtoMMC joystick on PORT B
002110  3               
002110  3               rpblc2:
002110  3               .if pflag
002110  3               	jsr inishr 		; initialise particle engine.
002110  3               .endif
002110  3               evintr:
002110  3  20 9E 33     	jsr evnt12 		; call intro/menu event.
002113  3               
002113  3  A9 02        	lda #WALL 		; write default property.
002115  3  A2 00        	ldx #0
002117  3               clrmap:
002117  3  9D 00 DD     	sta MAP,x 		; block properties.
00211A  3  9D 00 DE     	sta MAP+256,x
00211D  3  9D 00 DF     	sta MAP+512,x
002120  3  E8           	inx			; next byte.
002121  3  D0 F4        	bne clrmap
002123  3               .if oflag
002123  3               	jsr iniob 		; initialise objects.
002123  3               .endif
002123  3  A9 00        	lda #0			; put zero in accumulator.
002125  3  85 rr        	sta gamwon		; reset game won flag.
002127  3               
002127  3  20 90 22     	jsr inisc 		; init the score.
00212A  3               mapst:
00212A  3  AD 26 33     	lda stmap 		; start position on map.
00212D  3  8D 1A 33     	sta roomtb		; set up position in table, if there is one.
002130  3               
002130  3               inipbl:
002130  3               .if aflag
002130  3               	lda #<eop		; reset blockpointer
002130  3               	sta pbptr
002130  3               	lda #>eop
002130  3               	sta pbptr+1
002130  3               .endif
002130  3  20 02 2F     	jsr initsc 		; set up first screen.
002133  3               
002133  3  A9 09        	lda #<ssprit 		; default to spare sprite in table.
002135  3  85 68        	sta z80_x
002137  3  A9 33        	lda #>ssprit
002139  3  85 69        	sta z80_i
00213B  3               evini:
00213B  3  20 A2 33     	jsr evnt13 		; initialisation.
00213E  3               
00213E  3               ; Two restarts.
00213E  3               ; First restart - clear all sprites and initialise everything.
00213E  3               
00213E  3               rstrt:
00213E  3  20 30 22     	jsr rsevt 		; restart events.
002141  3  20 38 20     	jsr xspr 		; clear sprite table.
002144  3  20 6E 30     	jsr sprlst 		; fetch pointer to screen sprites.
002147  3  20 F7 30     	jsr ispr 		; initialise sprite table.
00214A  3               
00214A  3  4C 59 21     	jmp rstrt0
00214D  3               
00214D  3               ; Second restart - clear all but player, and don't initialise him.
00214D  3               
00214D  3               rstrtn:
00214D  3  20 30 22     	jsr rsevt		; restart events.
002150  3  20 9B 30     	jsr nspr 		; clear all non-player sprites.
002153  3  20 6E 30     	jsr sprlst 		; fetch pointer to screen sprites.
002156  3  20 34 31     	jsr kspr 		; initialise sprite table, no more players.
002159  3               
002159  3               ; Set up the player and/or enemy sprites.
002159  3               
002159  3               rstrt0:
002159  3  A9 00        	lda #0 			; zero in accumulator.
00215B  3  85 rr        	sta nexlev 		; reset next level flag.
00215D  3  85 rr        	sta restfl 		; reset restart flag.
00215F  3  85 rr        	sta deadf 		; reset dead flag.
002161  3  20 FE 25     	jsr droom 		; show screen layout.
002164  3               rpblc0:
002164  3               .if pflag
002164  3               	jsr inishr 		; initialise particle engine.
002164  3               .endif
002164  3               .if aflag
002164  3               	jsr rbloc		; draw blocks for this screen
002164  3               .endif
002164  3               .if oflag
002164  3               	jsr shwob		; draw objects.
002164  3               .endif
002164  3               
002164  3  A9 3D        	lda #<sprtab 		; address of sprite table, even sprites.
002166  3  85 68        	sta z80_x
002168  3  A9 32        	lda #>sprtab
00216A  3  85 69        	sta z80_i
00216C  3  20 E0 2B     	jsr dspr 		; display sprites.
00216F  3               
00216F  3  A9 4E        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002171  3  85 68        	sta z80_x
002173  3  A9 32        	lda #>(sprtab+TABSIZ)
002175  3  85 69        	sta z80_i
002177  3  20 E0 2B     	jsr dspr 		; display sprites.
00217A  3               mloop:
00217A  3  20 45 20     	jsr vsync 		; synchronise with display.
00217D  3  A9 3D        	lda #<sprtab 		; address of sprite table, even sprites.
00217F  3  85 68        	sta z80_x
002181  3  A9 32        	lda #>sprtab
002183  3  85 69        	sta z80_i
002185  3  20 E0 2B     	jsr dspr 		; display even sprites.
002188  3               
002188  3               ;	jsr plsnd 		; play sounds.
002188  3               
002188  3  20 E4 20     	jsr proshr
00218B  3  A9 4E        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00218D  3  85 68        	sta z80_x
00218F  3  A9 32        	lda #>(sprtab+TABSIZ)
002191  3  85 69        	sta z80_i
002193  3  20 E0 2B     	jsr dspr 		; display odd sprites.
002196  3               
002196  3  A9 09        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
002198  3  85 68        	sta z80_x
00219A  3  A9 33        	lda #>(ssprit)
00219C  3  85 69        	sta z80_i
00219E  3               evlp1:
00219E  3  20 31 33     	jsr evnt10 		; called once per main loop.
0021A1  3  20 5E 2B     	jsr pspr 		; process sprites.
0021A4  3               
0021A4  3               ; Main loop events.
0021A4  3               
0021A4  3  A9 09        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0021A6  3  85 68        	sta z80_x
0021A8  3  A9 33        	lda #>ssprit
0021AA  3  85 69        	sta z80_i
0021AC  3               evlp2:
0021AC  3  20 9D 33     	jsr evnt11 		; called once per main loop.
0021AF  3               bsortx:
0021AF  3  20 D4 2A     	jsr bsort 		; sort sprites.
0021B2  3               
0021B2  3  A5 rr        	lda nexlev		; finished level flag.
0021B4  3  F0 03        	beq :+
0021B6  3  4C DE 21     	jmp newlev		; is set, go to next level.
0021B9  3               :
0021B9  3  A5 rr        	lda gamwon		; finished game flag.
0021BB  3  F0 03        	beq :+
0021BD  3  4C ED 21     	jmp evwon		; is set, finish the game.
0021C0  3               :
0021C0  3  A5 rr        	lda restfl 		; finished level flag.
0021C2  3  C9 01        	cmp #1			; has it been set?
0021C4  3  D0 03        	bne :+
0021C6  3  4C 3E 21     	jmp rstrt		; yes, go to next level.
0021C9  3               :
0021C9  3  C9 02        	cmp #2			; has it been set?
0021CB  3  D0 03        	bne :+
0021CD  3  4C 4D 21     	jmp rstrtn		; yes, go to next level.
0021D0  3               :
0021D0  3  A5 rr        	lda deadf 		; dead flag.
0021D2  3  F0 03        	beq :+
0021D4  3  4C F3 21     	jmp pdead		; yes, player dead.
0021D7  3               :
0021D7  3               ; back to start of main loop.
0021D7  3               
0021D7  3  E6 rr        	inc frmno
0021D9  3  E6 rr        	inc clock
0021DB  3  4C 7A 21     	jmp mloop		; switched to a jmp mloop during test mode.
0021DE  3               
0021DE  3               ;----------------------------------------------------------
0021DE  3               ; Read blocks from list and update screen accordingly.
0021DE  3               ;----------------------------------------------------------
0021DE  3               
0021DE  3               .if aflag
0021DE  3               rbloc:
0021DE  3               	lda #<eop		; reset temp blockpointer
0021DE  3               	sta pbbuf
0021DE  3               	lda #>eop
0021DE  3               	sta pbbuf+1
0021DE  3               
0021DE  3               rbloc2:
0021DE  3               	lda pbbuf			; check for last block
0021DE  3               	cmp pbptr
0021DE  3               	bne rbloc1
0021DE  3               	lda pbbuf+1
0021DE  3               	cmp pbptr+1
0021DE  3               	bne rbloc1
0021DE  3               	rts
0021DE  3               rbloc1:
0021DE  3               	ldy #0
0021DE  3               	lda (pbbuf),y		; check if block for this scno
0021DE  3               	cmp scno
0021DE  3               	bne rbloc0		; if not, skip
0021DE  3               	iny
0021DE  3               	lda (pbbuf),y		; get y
0021DE  3               	sta dispy
0021DE  3               	iny
0021DE  3               	lda (pbbuf),y		; get x
0021DE  3               	sta dispx
0021DE  3               	iny
0021DE  3               	lda (pbbuf),y		; get blocknr
0021DE  3               	jsr pattr2		; draw block
0021DE  3               rbloc0:
0021DE  3               	clc			; point to next block
0021DE  3               	lda pbbuf
0021DE  3               	adc #4
0021DE  3               	sta pbbuf
0021DE  3               	bcc rbloc2
0021DE  3               	inc pbbuf+1
0021DE  3               	jmp rbloc2
0021DE  3               .endif
0021DE  3               
0021DE  3               ;----------------------------------------------------------
0021DE  3               ; New level
0021DE  3               ;----------------------------------------------------------
0021DE  3               
0021DE  3               ;.repeat 270
0021DE  3               ;  .byte 0
0021DE  3               ;.endrep
0021DE  3               
0021DE  3               newlev:
0021DE  3  A5 rr        	lda scno 			; current screen.
0021E0  3  18           	clc
0021E1  3  69 01        	adc #1				; next screen.
0021E3  3  CD 68 34     	cmp numsc			; total number of screens.
0021E6  3  B0 05        	bcs evwon			; yes, game finished.
0021E8  3  85 rr        	sta scno			; set new level number.
0021EA  3  4C 3E 21     	jmp rstrt			; restart, clearing all aliens.
0021ED  3               
0021ED  3               evwon:
0021ED  3  20 AB 33     	jsr evnt18		 	; game completed.
0021F0  3  4C 05 22     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0021F3  3               
0021F3  3               ;----------------------------------------------------------
0021F3  3               ; Player dead.
0021F3  3               ;----------------------------------------------------------
0021F3  3               
0021F3  3               ;.repeat 258
0021F3  3               ;  .byte 0
0021F3  3               ;.endrep
0021F3  3               
0021F3  3               pdead:
0021F3  3  A9 00        	lda #0				; zeroise accumulator.
0021F5  3  85 rr        	sta deadf			; reset dead flag.
0021F7  3               evdie:
0021F7  3  20 A9 33     	jsr evnt16 			; death subroutine.
0021FA  3  A5 rr        	lda numlif			; number of lives.
0021FC  3  F0 03        	beq :+
0021FE  3  4C 3E 21     	jmp rstrt 			; restart game.
002201  3               :
002201  3               evfail:
002201  3  20 AA 33     	jsr evnt17 			; failure event.
002204  3  60           	rts			; restart game
002205  3               
002205  3               ;----------------------------------------------------------
002205  3               ; Tidy things up
002205  3               ;----------------------------------------------------------
002205  3               
002205  3               ;.repeat 291
002205  3               ;  .byte 0
002205  3               ;.endrep
002205  3               
002205  3               tidyup:
002205  3  A0 00        	ldy #0				; digits to check.
002207  3               tidyu2:
002207  3  B9 79 23     	lda score,y 			; get score digit.
00220A  3  CD 7F 23     	cmp hiscor 			; are we larger than high score digit?
00220D  3  90 07        	bcc tidyu0			; high score is bigger.
00220F  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
002211  3  C8           	iny				; next digit of high score.
002212  3  C0 06        	cpy #6
002214  3  D0 F1        	bne tidyu2			; repeat for all digits
002216  3               tidyu0:
002216  3  A9 79        	lda #<score			; return pointing to score.
002218  3  85 62        	sta z80_c
00221A  3  A9 23        	lda #>score
00221C  3  85 63        	sta z80_b
00221E  3  60           	rts
00221F  3               tidyu1:
00221F  3  A0 05        	ldy #5
002221  3               tidyu3:
002221  3  B9 79 23     	lda score,y			; score.
002224  3  99 7F 23     	sta hiscor,y			; high score.
002227  3  88           	dey
002228  3  10 F7        	bpl tidyu3 			; copy score to high score.
00222A  3               evnewh:
00222A  3  20 AC 33     	jsr evnt19			; new high score event.
00222D  3  4C 16 22     	jmp tidyu0			; tidy up.
002230  3               
002230  3               ;--------------------------------------------------
002230  3               ; Restart event.
002230  3               ;--------------------------------------------------
002230  3               
002230  3               rsevt:
002230  3  A9 09        	lda #<ssprit 			; default to spare element in table.
002232  3  85 68        	sta z80_x
002234  3  A9 33        	lda #>ssprit
002236  3  85 69        	sta z80_i
002238  3               evrs:
002238  3  4C A7 33     	jmp evnt14	 		; call restart event.
00223B  3               
00223B  3               ;------------------------------------------------------------------
00223B  3               ; Copy number passed in a to string position bc, right-justified.
00223B  3               ;
00223B  3               ; Input:
00223B  3               ;  A  = number
00223B  3               ;  BC = string address
00223B  3               ;
00223B  3               ; Output:
00223B  3               ;  BC = string with number
00223B  3               ;-----------------------------------------------------------------
00223B  3               
00223B  3               num2ch:
00223B  3  85 65        	sta z80_d		; Save number
00223D  3               
00223D  3  A9 00        	lda #0
00223F  3  85 rr        	sta flag
002241  3               numdg3:
002241  3  A2 64        	ldx #100		; hundreds column.
002243  3  86 64        	stx z80_e
002245  3  20 55 22     	jsr numdg		; show digit.
002248  3               numdg2:
002248  3  A2 0A        	ldx #10			; tens column.
00224A  3  86 64        	stx z80_e
00224C  3  20 55 22     	jsr numdg		; show digit.
00224F  3               
00224F  3  E6 rr        	inc flag
002251  3  A2 01        	ldx #1			; units column.
002253  3  86 64        	stx z80_e
002255  3               numdg:
002255  3  A9 30        	lda #48			; clear digit.
002257  3  85 61        	sta z80_a
002259  3               numdg1:
002259  3  A5 65        	lda z80_d
00225B  3  C5 64        	cmp z80_e
00225D  3  90 0E        	bcc numdg0		; nothing to show.
00225F  3  38           	sec
002260  3  A5 65        	lda z80_d
002262  3  E5 64        	sbc z80_e		; subtract from column.
002264  3  85 65        	sta z80_d
002266  3  E6 61        	inc z80_a		; increment digit.
002268  3  E6 rr        	inc flag
00226A  3  4C 59 22     	jmp numdg1		; repeat until column is zero.
00226D  3               numdg0:
00226D  3  A0 00        	ldy #0
00226F  3  A5 61        	lda z80_a
002271  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002273  3  A5 rr        	lda flag
002275  3  F0 06        	beq :+
002277  3  E6 62        	inc z80_c		; next buffer position.
002279  3  D0 02        	bne :+
00227B  3  E6 63        	inc z80_b
00227D  3               :
00227D  3  60           	rts
00227E  3               num2dd:
00227E  3  85 65        	sta z80_d		; Save number
002280  3               
002280  3  A9 01        	lda #1
002282  3  85 rr        	sta flag
002284  3               
002284  3  4C 48 22     	jmp numdg2
002287  3               num2td:
002287  3  85 65        	sta z80_d		; Save number
002289  3               
002289  3  A9 01        	lda #1
00228B  3  85 rr        	sta flag
00228D  3  4C 41 22     	jmp numdg3
002290  3               
002290  3               ;flag:	.byte 0
002290  3               
002290  3               ;---------------------------------------------------------
002290  3               ; Reset score to "000000"
002290  3               ;---------------------------------------------------------
002290  3               
002290  3               inisc:
002290  3  A9 30        	lda #'0'
002292  3  A2 05        	ldx #5			; digits to initialise.
002294  3               inisc0:
002294  3  9D 79 23     	sta score,x 		; write zero digit.
002297  3  CA           	dex			; next column.
002298  3  10 FA        	bpl inisc0		; repeat for all digits.
00229A  3               
00229A  3  60           	rts
00229B  3               
00229B  3               ;-----------------------------------------------------
00229B  3               ; Multiply h by d and return in hl.
00229B  3               ;
00229B  3               ; Input:
00229B  3               ;  H = first number
00229B  3               ;  D = second number
00229B  3               ;
00229B  3               ; Output:
00229B  3               ;  HL = result H x D
00229B  3               ;-----------------------------------------------------
00229B  3               
00229B  3               imul:
00229B  3  A5 65        	lda z80_d		; HL = H * D
00229D  3  85 64        	sta z80_e
00229F  3  A5 67        	lda z80_h
0022A1  3  85 62        	sta z80_c		; make c first multiplier.
0022A3  3               imul0:
0022A3  3  A9 00        	lda #0			; zeroise total.
0022A5  3  85 66        	sta z80_l
0022A7  3  85 67        	sta z80_h
0022A9  3               
0022A9  3  A5 67        	lda z80_h
0022AB  3  85 65        	sta z80_d		; zeroise high byte.
0022AD  3               
0022AD  3  A9 08        	lda #8			; repeat 8 times.
0022AF  3  85 63        	sta z80_b
0022B1  3               imul1:
0022B1  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
0022B3  3  90 0E        	bcc imul2		; wasn't set.
0022B5  3  18           	clc			; bit was set, so add de.
0022B6  3  A5 66        	lda z80_l
0022B8  3  65 64        	adc z80_e
0022BA  3  85 66        	sta z80_l
0022BC  3  A5 67        	lda z80_h
0022BE  3  65 65        	adc z80_d
0022C0  3  85 67        	sta z80_h
0022C2  3  18           	clc 			; reset carry.
0022C3  3               imul2:
0022C3  3  06 64        	asl z80_e 		; shift de 1 bit left.
0022C5  3  26 65        	rol z80_d
0022C7  3  C6 63        	dec z80_b
0022C9  3  D0 E6        	bne imul1		; repeat 8 times.
0022CB  3               
0022CB  3  60           	rts
0022CC  3               
0022CC  3               ;-----------------------------------------------
0022CC  3               ; Divide d by e and return in d, remainder in a.
0022CC  3               ;
0022CC  3               ; Input:
0022CC  3               ;  D = first number
0022CC  3               ;  E = second number
0022CC  3               ;
0022CC  3               ; Output:
0022CC  3               ;  D = result D/E
0022CC  3               ;  A = remainder
0022CC  3               ;-----------------------------------------------
0022CC  3               
0022CC  3               idiv:
0022CC  3  A9 00        	lda #0
0022CE  3  A0 08        	ldy #8		 	; bits to shift.
0022D0  3  06 65        	asl z80_d
0022D2  3               idiv0:
0022D2  3  2A           	rol a 			; multiply d by 2.
0022D3  3  C5 64        	cmp z80_e 		; test if e is smaller.
0022D5  3  90 02        	bcc idiv1		; e is greater, no division this time.
0022D7  3  E5 64        	sbc z80_e		; subtract it.
0022D9  3               idiv1:
0022D9  3  26 65        	rol z80_d		; rotate into d.
0022DB  3  88           	dey
0022DC  3  D0 F4        	bne idiv0		; repeat
0022DE  3  60           	rts
0022DF  3               
0022DF  3               ;---------------------------------------------------
0022DF  3               ; Play AY sound effect
0022DF  3               ;---------------------------------------------------
0022DF  3               
0022DF  3               plsnd:
0022DF  3  60           	rts
0022E0  3               
0022E0  3               ;---------------------------------------------------
0022E0  3               ; Objects handling.
0022E0  3               ; 32 bytes for image
0022E0  3               ; 3 for room, y and x
0022E0  3               ; 3 for starting room, y and x.
0022E0  3               ; 254 = disabled.
0022E0  3               ; 255 = object in player"s pockets.
0022E0  3               ;---------------------------------------------------
0022E0  3               
0022E0  3               ;---------------------------------------------------
0022E0  3               ; Show items present.
0022E0  3               ;---------------------------------------------------
0022E0  3               
0022E0  3               .if oflag
0022E0  3               shwob:
0022E0  3               	lda #<objdta 			; objects table.
0022E0  3               	sta z80_l
0022E0  3               	lda #>objdta
0022E0  3               	sta z80_h
0022E0  3               
0022E0  3               	lda numob 			; number of objects in the game.
0022E0  3               	sta sprcnt
0022E0  3               shwob0:
0022E0  3               	ldy #32 			; distance to room number.
0022E0  3               	lda (z80_hl),y 			; same as an item?
0022E0  3               	cmp scno 			; current location.
0022E0  3               	bne :+
0022E0  3               	jsr dobj 			; yes, display object.
0022E0  3               :
0022E0  3               	clc
0022E0  3               	lda z80_l
0022E0  3               	adc #38 			; distance to next item.
0022E0  3               	sta z80_l
0022E0  3               	lda z80_h
0022E0  3               	adc #0
0022E0  3               	sta z80_h	 		; point to it.
0022E0  3               	dec sprcnt
0022E0  3               	bne shwob0 			; repeat for others.
0022E0  3               	rts
0022E0  3               
0022E0  3               ;---------------------------------------------------
0022E0  3               ; Display object.
0022E0  3               ; hl must point to object's start address.
0022E0  3               ;
0022E0  3               ; Input:
0022E0  3               ;  HL = object address
0022E0  3               ;---------------------------------------------------
0022E0  3               
0022E0  3               dobj:
0022E0  3               	ldy #33
0022E0  3               	lda (z80_hl),y 			; point to y.
0022E0  3               	sta dispy
0022E0  3               	iny
0022E0  3               	lda (z80_hl),y 			; point to x.
0022E0  3               	sta dispx
0022E0  3               dobj1:
0022E0  3               	jmp sprite 			; draw this sprite.
0022E0  3               
0022E0  3               ;--------------------------------------
0022E0  3               ; Remove an object.
0022E0  3               ;
0022E0  3               ; Input:
0022E0  3               ;  A = object number
0022E0  3               ;--------------------------------------
0022E0  3               
0022E0  3               remob:
0022E0  3               	cmp numob			; number of objects in game.
0022E0  3               	bcc :+				; are we checking past the end?
0022E0  3               	rts				; yes, can't get non-existent item.
0022E0  3               :
0022E0  3               	pha				; remember object.
0022E0  3               	jsr getob			; pick it up if we haven't already got it.
0022E0  3               	pla				; retrieve object number.
0022E0  3               	jsr gotob			; get its address.
0022E0  3               	lda #254
0022E0  3               	ldy #32
0022E0  3               	sta (z80_hl),y			; remove it.
0022E0  3               	rts
0022E0  3               
0022E0  3               ;---------------------------------------------------
0022E0  3               ; Pick up object number held in the accumulator.
0022E0  3               ;
0022E0  3               ; Input:
0022E0  3               ;  A = object number
0022E0  3               ;---------------------------------------------------
0022E0  3               
0022E0  3               getob:
0022E0  3               	cmp numob 		; number of objects in game.
0022E0  3               	bcc :+			; are we checking past the end?
0022E0  3               	rts			; yes, can't get non-existent item.
0022E0  3               :
0022E0  3               	jsr gotob 		; check if we already have it.
0022E0  3               	cmp #255
0022E0  3               	bne :+
0022E0  3               	rts			; we already do.
0022E0  3               :
0022E0  3               	ldy #32
0022E0  3               	lda (z80_hl),y		; is it on this screen?
0022E0  3               	cmp scno 		; current screen.
0022E0  3               	bne getob0		; not on screen, so nothing to delete.
0022E0  3               
0022E0  3               	lda #255
0022E0  3               	sta (z80_hl),y		; pick it up.
0022E0  3               	iny 			; point to y coord.
0022E0  3               getob1:
0022E0  3               	ldy #33
0022E0  3               	lda (z80_hl),y		; y coord.
0022E0  3               	sta dispy
0022E0  3               	ldy #34
0022E0  3               	lda (z80_hl),y 		; x coord.
0022E0  3               	sta dispx
0022E0  3               	jmp dobj1 		; delete object sprite.
0022E0  3               getob0:
0022E0  3               	lda #255
0022E0  3               	sta (z80_hl),y 		; pick it up.
0022E0  3               	rts
0022E0  3               .endif
0022E0  3               
0022E0  3               ;-----------------------------------------------------------------
0022E0  3               ; Got object check.
0022E0  3               ; Call with object in accumulator, returns zero set if in pockets.
0022E0  3               ;
0022E0  3               ; Input:
0022E0  3               ;  A = object number
0022E0  3               ;-----------------------------------------------------------------
0022E0  3               .if oflag .or mflag
0022E0  3               gotob:
0022E0  3               	cmp numob 		; number of objects in game.
0022E0  3               	bcc :+ 			; are we checking past the end?
0022E0  3               	jmp gotob0 		; yes, we can't have a non-existent object.
0022E0  3               :
0022E0  3               	jsr findob		; find the object.
0022E0  3               gotob1:
0022E0  3               	rts
0022E0  3               
0022E0  3               gotob0:
0022E0  3               	lda #254 		; missing.
0022E0  3               	jmp gotob1
0022E0  3               
0022E0  3               findob:
0022E0  3               	pha			; save object number
0022E0  3               	lda #<objdta 		; objects.
0022E0  3               	sta z80_l
0022E0  3               	lda #>objdta
0022E0  3               	sta z80_h
0022E0  3               	pla			; retreive object number
0022E0  3               	beq fndob1 		; is it zero? yes, skip loop.
0022E0  3               	tax 			; loop counter
0022E0  3               fndob2:
0022E0  3               	clc
0022E0  3               	lda z80_l
0022E0  3               	adc #38 		; size of each object.
0022E0  3               	sta z80_l
0022E0  3               	bcc :+
0022E0  3               	inc z80_h
0022E0  3               :
0022E0  3               	dex 			; repeat until we find address.
0022E0  3               	bne fndob2
0022E0  3               fndob1:
0022E0  3               	ldy #32			; distance to room it's in.
0022E0  3               	lda (z80_hl),y		; fetch status.
0022E0  3               	rts
0022E0  3               .endif
0022E0  3               
0022E0  3               ;---------------------------------------------
0022E0  3               ; Drop object number at (dispx, dispy).
0022E0  3               ;
0022E0  3               ; Input:
0022E0  3               ;  A = object number
0022E0  3               ;---------------------------------------------
0022E0  3               
0022E0  3               .if oflag
0022E0  3               drpob:
0022E0  3               	cmp numob 		; are we checking past the end?
0022E0  3               	bcc :+
0022E0  3               	rts			; yes, can't drop non-existent item.
0022E0  3               :
0022E0  3               	jsr gotob		; make sure object is in inventory.
0022E0  3               	cmp scno		; already on this screen?
0022E0  3               	bne :+
0022E0  3               	rts			; yes, nothing to do.
0022E0  3               :
0022E0  3               	ldy #32
0022E0  3               	lda scno
0022E0  3               	sta (z80_hl),y		; bring onto screen.
0022E0  3               	lda dispy		; sprite y coordinate.
0022E0  3               	iny
0022E0  3               	sta (z80_hl),y		; point to object y.
0022E0  3               	lda dispx 		; sprite x coordinate.
0022E0  3               	iny
0022E0  3               	sta (z80_hl),y 		; point to object x
0022E0  3               	jmp dobj		; draw the object sprite.
0022E0  3               
0022E0  3               ;-----------------------------------------------
0022E0  3               ; Seek objects at sprite position.
0022E0  3               ;
0022E0  3               ; Output:
0022E0  3               ;  A = object number, if not found A=255
0022E0  3               ;-----------------------------------------------
0022E0  3               
0022E0  3               skobj:
0022E0  3               	lda #<objdta 		; pointer to objects.
0022E0  3               	sta z80_l
0022E0  3               	lda #>objdta
0022E0  3               	sta z80_h
0022E0  3               
0022E0  3               	lda numob 		; number of objects in game.
0022E0  3               	sta z80_b 		; set up the loop counter.
0022E0  3               skobj0:
0022E0  3               	lda scno		; current room number.
0022E0  3               	ldy #32
0022E0  3               	cmp (z80_hl),y		; is object in here?
0022E0  3               	bne :+
0022E0  3               	jsr skobj1		; yes, check coordinates.
0022E0  3               :
0022E0  3               	clc			; point to next object in table.
0022E0  3               	lda z80_l
0022E0  3               	adc #38			; size of each object.
0022E0  3               	sta z80_l
0022E0  3               	bcc :+
0022E0  3               	inc z80_h
0022E0  3               :
0022E0  3               	dec z80_b
0022E0  3               	bne skobj0		; repeat for all objects.
0022E0  3               
0022E0  3               	lda #255		; end of list and nothing found, return 255.
0022E0  3               	rts
0022E0  3               
0022E0  3               skobj1:
0022E0  3               	ldy #33			; point to y coordinate.
0022E0  3               	lda (z80_hl),y		; point to y coordinate.
0022E0  3               	sec
0022E0  3               	ldy #8
0022E0  3               	sbc (z80_ix),y 		; subtract sprite y.
0022E0  3               	clc
0022E0  3               	adc #15			; add sprite height minus one.
0022E0  3               	cmp #31			; within range?
0022E0  3               	bcs skobj2		; no, ignore object.
0022E0  3               
0022E0  3               	ldy #34			; point to x coordinate now.
0022E0  3               	lda (z80_hl),y 		; get coordinate.
0022E0  3               	sec
0022E0  3               	ldy #9
0022E0  3               	sbc (z80_ix),y 		; subtract the sprite x.
0022E0  3               	clc			; add sprite width minus one.
0022E0  3               	adc #15
0022E0  3               	cmp #31			; within range?
0022E0  3               	bcs skobj2		; no, ignore object.
0022E0  3               
0022E0  3               	pla			; remove return address from stack.
0022E0  3               	pla
0022E0  3               
0022E0  3               	lda numob 		; objects in game.
0022E0  3               	sec
0022E0  3               	sbc z80_b		; subtract loop counter.
0022E0  3               skobj2:
0022E0  3               	rts			; accumulator now points to object.
0022E0  3               .endif
0022E0  3               
0022E0  3               ;---------------------------------------------------------------------
0022E0  3               ; Spawn a new sprite.
0022E0  3               ;---------------------------------------------------------------------
0022E0  3               
0022E0  3                 offset = 20
0022E0  3               
0022E0  3               ;.repeat 343
0022E0  3               ;  .byte 0
0022E0  3               ;.endrep
0022E0  3               
0022E0  3               spawn:
0022E0  3  A9 3D        	lda #<sprtab		; sprite table.
0022E2  3  85 66        	sta z80_l
0022E4  3  A9 32        	lda #>sprtab
0022E6  3  85 67        	sta z80_h
0022E8  3               numsp1:
0022E8  3  A9 0C        	lda #NUMSPR		; number of sprites.
0022EA  3  85 rr        	sta spcnt
0022EC  3               spaw0:
0022EC  3  A0 00        	ldy #0
0022EE  3  B1 66        	lda (z80_hl),y		; get sprite type.
0022F0  3  C9 FF        	cmp #255		; is it an unused slot?
0022F2  3  F0 0F        	beq spaw1 		; yes, we can use this one.
0022F4  3               
0022F4  3  18           	clc 			; point to next sprite in table.
0022F5  3  A5 66        	lda z80_l
0022F7  3  69 11        	adc #TABSIZ		; size of each entry.
0022F9  3  85 66        	sta z80_l
0022FB  3  90 02        	bcc :+
0022FD  3  E6 67        	inc z80_h
0022FF  3               :
0022FF  3  C6 rr        	dec spcnt		; one less iteration.
002301  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002303  3               
002303  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002303  3               
002303  3               spaw1:
002303  3  A5 69        	lda z80_i		; address of original sprite.
002305  3  48           	pha
002306  3  A5 68        	lda z80_x
002308  3  48           	pha
002309  3               
002309  3  A5 66        	lda z80_l		; store spawned sprite address.
00230B  3  85 rr        	sta spptr
00230D  3  A5 67        	lda z80_h
00230F  3  85 rr        	sta spptr+1
002311  3               
002311  3  A5 62        	lda z80_c
002313  3  A0 00        	ldy #0
002315  3  91 66        	sta (z80_hl),y 		; set the type.
002317  3  A0 05        	ldy #5
002319  3  91 66        	sta (z80_hl),y		; copy
00231B  3               
00231B  3  A5 63        	lda z80_b
00231D  3  A0 01        	ldy #1
00231F  3  91 66        	sta (z80_hl),y		; set the image.
002321  3  A0 06        	ldy #6
002323  3  91 66        	sta (z80_hl),y		; copy
002325  3               
002325  3  A9 00        	lda #0 			; frame zero.
002327  3  A0 02        	ldy #2
002329  3  91 66        	sta (z80_hl),y		; set frame.
00232B  3  A0 07        	ldy #7
00232D  3  91 66        	sta (z80_hl),y		; copy
00232F  3               
00232F  3  A0 08        	ldy #8
002331  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002333  3  A0 03        	ldy #3
002335  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002337  3  A0 08        	ldy #8
002339  3  91 66        	sta (z80_hl),y		; copy
00233B  3               
00233B  3  A0 09        	ldy #9
00233D  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00233F  3  A0 04        	ldy #4
002341  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002343  3  A0 09        	ldy #9
002345  3  91 66        	sta (z80_hl),y		; copy
002347  3               
002347  3  A0 0A        	ldy #10			; direction of original.
002349  3  B1 68        	lda (z80_ix),y
00234B  3  91 66        	sta (z80_hl),y		; direction
00234D  3               
00234D  3  A9 00        	lda #0
00234F  3  A0 0B        	ldy #11
002351  3  91 66        	sta (z80_hl),y		; reset parameter.
002353  3  C8           	iny
002354  3  91 66        	sta (z80_hl),y		; reset parameter.
002356  3  C8           	iny
002357  3  91 66        	sta (z80_hl),y		; reset parameter.
002359  3  C8           	iny
00235A  3  91 66        	sta (z80_hl),y		; reset parameter.
00235C  3               rtssp:
00235C  3  A5 rr        	lda spptr		; address of new sprite.
00235E  3  85 68        	sta z80_x
002360  3  A5 rr        	lda spptr+1
002362  3  85 69        	sta z80_i
002364  3               evis1:
002364  3  20 30 33     	jsr evnt09 		; call sprite initialisation event.
002367  3               
002367  3  A5 rr        	lda spptr 		; address of new sprite.
002369  3  85 68        	sta z80_x
00236B  3  A5 rr        	lda spptr+1
00236D  3  85 69        	sta z80_i
00236F  3  20 06 2D     	jsr sspria 		; display the new sprite.
002372  3               
002372  3  68           	pla			; address of original sprite.
002373  3  85 68        	sta z80_x
002375  3  68           	pla
002376  3  85 69        	sta z80_i
002378  3               
002378  3  60           	rts
002379  3               
002379  3               ;spcnt:	.byte 0
002379  3               ;spptr:	.word 0			; spawned sprite pointer.
002379  3               ;seed:	.byte 0			; seed for random numbers.
002379  3  30 30 30 30  score:	.byte "000000"		; player"s score.
00237D  3  30 30        
00237F  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002383  3  30 30        
002385  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002389  3  30 30        
00238B  3  00 E4        grbase:	.word ScreenAddr	; graphics base address.
00238D  3               
00238D  3               ;----------------------------------------------------
00238D  3               ; Check y-pos
00238D  3               ;----------------------------------------------------
00238D  3               
00238D  3               checkx:
00238D  3  A5 rr        	lda dispy		; y position.
00238F  3  C9 18        	cmp #24			; off screen?
002391  3  B0 01        	bcs :+
002393  3  60           	rts			; no, it's okay.
002394  3               :
002394  3  68           	pla			; remove return address from stack.
002395  3  85 66        	sta z80_l
002397  3  68           	pla
002398  3  85 67        	sta z80_h
00239A  3  60           	rts
00239B  3               
00239B  3               ;-----------------------------------------------
00239B  3               ; Displays the current high score.
00239B  3               ;-----------------------------------------------
00239B  3               
00239B  3               dhisc:
00239B  3  A9 7F        	lda #<hiscor 		; high score text.
00239D  3  8D D2 23     	sta dscor3+1
0023A0  3  8D ED 23     	sta bscor3+1
0023A3  3  A9 23        	lda #>hiscor
0023A5  3  8D D3 23     	sta dscor3+2
0023A8  3  8D EE 23     	sta bscor3+2
0023AB  3  4C BE 23     	jmp dscor1		; check in printable range then show 6 digits.
0023AE  3               
0023AE  3               ;------------------------------------------------------
0023AE  3               ; Displays the current score.
0023AE  3               ;------------------------------------------------------
0023AE  3               
0023AE  3               ;.repeat 322
0023AE  3               ;  .byte 0
0023AE  3               ;.endrep
0023AE  3               
0023AE  3               dscor:
0023AE  3  A9 79        	lda #<score		; score text.
0023B0  3  8D D2 23     	sta dscor3+1
0023B3  3  8D ED 23     	sta bscor3+1
0023B6  3  A9 23        	lda #>score
0023B8  3  8D D3 23     	sta dscor3+2
0023BB  3  8D EE 23     	sta bscor3+2
0023BE  3               dscor1:
0023BE  3  8C E9 23     	sty tmpscr
0023C1  3  20 A8 2A     	jsr preprt		; set up font and print position.
0023C4  3  20 8D 23     	jsr checkx		; make sure we're in a printable range.
0023C7  3               
0023C7  3               ;	lda #6			; digits to display.
0023C7  3               ;	sta z80_b
0023C7  3  A5 rr        	lda prtmod		; get print mode.
0023C9  3  F0 03        	beq :+			; standard size text?
0023CB  3  4C EA 23     	jmp bscor0		; no, show double-height.
0023CE  3               :
0023CE  3               dscor0:
0023CE  3               ;	ldy #0
0023CE  3               ;	lda (z80_hl),y 		; fetch character.
0023CE  3  AC E9 23     	ldy tmpscr
0023D1  3               dscor3:
0023D1  3  B9 79 23     	lda score,y
0023D4  3  20 21 25     	jsr pchar 		; display character.
0023D7  3  E6 rr        	inc dispx		; move along x coordinate
0023D9  3               
0023D9  3               ;	inc z80_l		; next score column.
0023D9  3               ;	bne :+
0023D9  3               ;	inc z80_h
0023D9  3               ;:
0023D9  3  EE E9 23     	inc tmpscr
0023DC  3  C6 63        	dec z80_b
0023DE  3  D0 EE        	bne dscor0 		; repeat for all digits.
0023E0  3               dscor2:
0023E0  3  A5 rr        	lda dispx 		; set up display coordinates.
0023E2  3  85 rr        	sta charx
0023E4  3  A5 rr        	lda dispy
0023E6  3  85 rr        	sta chary
0023E8  3  60           	rts
0023E9  3               
0023E9  3  00           tmpscr:	.byte 0
0023EA  3               ;------------------------------------------------------
0023EA  3               ; Displays the current score in double-height characters.
0023EA  3               ;
0023EA  3               ; Input:
0023EA  3               ;  B  = digit number
0023EA  3               ;  HL = score string
0023EA  3               ;------------------------------------------------------
0023EA  3               
0023EA  3               bscor0:
0023EA  3               ;	ldy #0
0023EA  3               
0023EA  3               ;	lda (z80_hl),y 		; fetch character.
0023EA  3  A4 rr        	ldy tmp
0023EC  3               bscor3:
0023EC  3  B9 79 23     	lda score,y
0023EF  3  20 2F 2A     	jsr bchar 		; display big char.
0023F2  3               
0023F2  3               ;	inc z80_l 		; next score column.
0023F2  3               ;	bne :+
0023F2  3               ;	inc z80_h
0023F2  3               ;:
0023F2  3  E6 rr        	inc tmp
0023F4  3  C6 63        	dec z80_b
0023F6  3  F0 03        	beq :+
0023F8  3  4C EA 23     	jmp bscor0 		; repeat for all digits.
0023FB  3               :
0023FB  3  4C E0 23     	jmp dscor2 		; tidy up line and column variables.
0023FE  3               
0023FE  3               ;-----------------------------------------------------
0023FE  3               ; Adds number in the hl pair to the score.
0023FE  3               ;-----------------------------------------------------
0023FE  3               
0023FE  3               addsc:
0023FE  3  A9 7A        	lda #<(score+1) 	; ten thousands column.
002400  3  85 64        	sta z80_e
002402  3  A9 23        	lda #>(score+1)
002404  3  85 65        	sta z80_d
002406  3  A9 10        	lda #<10000		; amount to add each time.
002408  3  85 62        	sta z80_c
00240A  3  A9 27        	lda #>10000
00240C  3  85 63        	sta z80_b
00240E  3  20 52 24     	jsr incsc		; add to score.
002411  3               
002411  3  E6 64        	inc z80_e		; thousands column.
002413  3  D0 02        	bne :+
002415  3  E6 65        	inc z80_d
002417  3               :
002417  3  A9 E8        	lda #<1000		; amount to add each time.
002419  3  85 62        	sta z80_c
00241B  3  A9 03        	lda #>1000
00241D  3  85 63        	sta z80_b
00241F  3  20 52 24     	jsr incsc 		; add to score.
002422  3               
002422  3  E6 64        	inc z80_e		; hundreds column.
002424  3  D0 02        	bne :+
002426  3  E6 65        	inc z80_d
002428  3               :
002428  3  A9 64        	lda #<100		; amount to add each time.
00242A  3  85 62        	sta z80_c
00242C  3  A9 00        	lda #>100
00242E  3  85 63        	sta z80_b
002430  3  20 52 24     	jsr incsc		; add to score.
002433  3               
002433  3  E6 64        	inc z80_e 		; tens column.
002435  3  D0 02        	bne :+
002437  3  E6 65        	inc z80_d
002439  3               :
002439  3  A9 0A        	lda #<10		; amount to add each time.
00243B  3  85 62        	sta z80_c
00243D  3  A9 00        	lda #>10
00243F  3  85 63        	sta z80_b
002441  3  20 52 24     	jsr incsc 		; add to score.
002444  3               
002444  3  E6 64        	inc z80_e		; units column.
002446  3  D0 02        	bne :+
002448  3  E6 65        	inc z80_d
00244A  3               :
00244A  3  A9 01        	lda #<1			; units.
00244C  3  85 62        	sta z80_c
00244E  3  A9 00        	lda #>1
002450  3  85 63        	sta z80_b
002452  3               incsc:
002452  3  A5 67        	lda z80_h		; store amount to add.
002454  3  48           	pha
002455  3  A5 66        	lda z80_l
002457  3  48           	pha
002458  3               
002458  3  38           	sec			; subtract from amount to add.
002459  3  A5 66        	lda z80_l
00245B  3  E5 62        	sbc z80_c
00245D  3  85 66        	sta z80_l
00245F  3  A5 67        	lda z80_h
002461  3  E5 63        	sbc z80_b
002463  3  85 67        	sta z80_h
002465  3  90 14        	bcc incsc0		; too much, restore value.
002467  3               
002467  3  68           	pla			; delete the previous amount from the stack.
002468  3  68           	pla
002469  3               
002469  3  A5 65        	lda z80_d 		; store column position.
00246B  3  48           	pha
00246C  3  A5 64        	lda z80_e
00246E  3  48           	pha
00246F  3  20 82 24     	jsr incsc2		; do the increment.
002472  3               
002472  3  68           	pla			; restore column.
002473  3  85 64        	sta z80_e
002475  3  68           	pla
002476  3  85 65        	sta z80_d
002478  3  4C 52 24     	jmp incsc		; repeat until all added.
00247B  3               
00247B  3               incsc0:
00247B  3  68           	pla			; restore previous value.
00247C  3  85 66        	sta z80_l
00247E  3  68           	pla
00247F  3  85 67        	sta z80_h
002481  3  60           	rts
002482  3               incsc2:
002482  3  A0 00        	ldy #0
002484  3  B1 64        	lda (z80_de),y 		; get amount.
002486  3  18           	clc
002487  3  69 01        	adc #1			; add one to column.
002489  3  91 64        	sta (z80_de),y		; write new column total.
00248B  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
00248D  3  B0 01        	bcs :+
00248F  3  60           	rts			; no, carry on.
002490  3               :
002490  3  A9 30        	lda #'0'		; make it zero.
002492  3  91 64        	sta (z80_de),y		; write new column total.
002494  3  C6 64        	dec z80_e		; back one column.
002496  3  D0 02        	bne :+
002498  3  C6 65        	dec z80_d
00249A  3               :
00249A  3  4C 82 24     	jmp incsc2
00249D  3               
00249D  3               ;------------------------------------
00249D  3               ; Add bonus to score and reset bonus
00249D  3               ;------------------------------------
00249D  3               
00249D  3               addbo:
00249D  3  A2 05        	ldx #5			; last digit.
00249F  3  18           	clc
0024A0  3               addbo0:
0024A0  3  BD 79 23     	lda score,x		; get score.
0024A3  3  7D 85 23     	adc bonus,x		; add bonus.
0024A6  3  38           	sec			; 0 to 18.
0024A7  3  E9 30        	sbc #48
0024A9  3  48           	pha
0024AA  3  A9 30        	lda #'0'
0024AC  3  9D 85 23     	sta bonus,x
0024AF  3  68           	pla
0024B0  3  C9 3A        	cmp #58
0024B2  3  90 03        	bcc addbo1
0024B4  3  38           	sec
0024B5  3  E9 0A        	sbc #10
0024B7  3               addbo1:
0024B7  3  9D 79 23     	sta score,x		; zeroise bonus.
0024BA  3  CA           	dex			; next digit.
0024BB  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0024BD  3  60           	rts
0024BE  3               
0024BE  3               ;------------------------------------
0024BE  3               ; Swap score and bonus.
0024BE  3               ;------------------------------------
0024BE  3               
0024BE  3               swpsb:
0024BE  3  A2 05        	ldx #5			; digits to add.
0024C0  3               swpsb0:
0024C0  3  BD 79 23     	lda score,x 		; get score digits.
0024C3  3  48           	pha			; save digit
0024C4  3  BD 85 23     	lda bonus,x 		; get bonus digits.
0024C7  3  9D 79 23     	sta score,x		; switch score-bonus
0024CA  3  68           	pla
0024CB  3  9D 85 23     	sta bonus,x
0024CE  3  CA           	dex 			; repeat for all 6 digits.
0024CF  3  10 EF        	bpl swpsb0
0024D1  3  60           	rts
0024D2  3               
0024D2  3               ;----------------------------------------------------
0024D2  3               ; Get print address.
0024D2  3               ;----------------------------------------------------
0024D2  3               
0024D2  3               gprad:
0024D2  3  A5 rr        	lda dispx		; get x
0024D4  3  85 rr        	sta scraddr		; store lb address
0024D6  3               
0024D6  3  2A           	rol a
0024D7  3  26 rr        	rol tmp
0024D9  3  2A           	rol a
0024DA  3  26 rr        	rol tmp
0024DC  3  2A           	rol a
0024DD  3  26 rr        	rol tmp
0024DF  3  A5 rr        	lda tmp
0024E1  3  29 07        	and #7
0024E3  3  85 rr        	sta tmp
0024E5  3  A5 rr        	lda prtmod
0024E7  3  F0 02        	beq :+
0024E9  3  06 rr        	asl tmp
0024EB  3               :
0024EB  3  A5 rr        	lda tmp
0024ED  3  18           	clc
0024EE  3  65 rr        	adc dispy		; get y
0024F0  3  69 E4        	adc #>ScreenAddr		; add $80
0024F2  3  85 rr        	sta scraddr+1		; store hb address
0024F4  3  60           	rts
0024F5  3               
0024F5  3               ;--------------------------------------------------------------
0024F5  3               ; Get property buffer address of char at (dispx, dispy) in hl.
0024F5  3               ;
0024F5  3               ; Output:
0024F5  3               ;  bufaddr = MAP + dispy*32 + dispx
0024F5  3               ;--------------------------------------------------------------
0024F5  3               
0024F5  3               pradd:
0024F5  3  A5 rr        	lda dispy 		; y coordinate.
0024F7  3  85 rr        	sta bufaddr
0024F9  3  A9 00        	lda #0
0024FB  3  85 rr        	sta bufaddr+1
0024FD  3  06 rr        	asl bufaddr  		; multiply char by 32
0024FF  3  26 rr        	rol bufaddr+1
002501  3  06 rr        	asl bufaddr
002503  3  26 rr        	rol bufaddr+1
002505  3  06 rr        	asl bufaddr
002507  3  26 rr        	rol bufaddr+1
002509  3  06 rr        	asl bufaddr
00250B  3  26 rr        	rol bufaddr+1
00250D  3  06 rr        	asl bufaddr
00250F  3  26 rr        	rol bufaddr+1
002511  3  18           	clc			; add address of MAP graphics.
002512  3  A5 rr        	lda bufaddr
002514  3  65 rr        	adc dispx
002516  3  69 00        	adc #<MAP
002518  3  85 rr        	sta bufaddr
00251A  3  A5 rr        	lda bufaddr+1
00251C  3  69 DD        	adc #>MAP
00251E  3  85 rr        	sta bufaddr+1
002520  3  60           	rts
002521  3               
002521  3               ;----------------------------------------------------
002521  3               ; Display character in A at dispx,dispy.
002521  3               ;
002521  3               ; Input:
002521  3               ;  A 	   = character to print
002521  3               ;----------------------------------------------------
002521  3               
002521  3               pchar:
002521  3  85 rr        	sta fntaddr
002523  3  A9 00        	lda #0
002525  3  85 rr        	sta fntaddr+1
002527  3  06 rr        	asl fntaddr  		; multiply char by 8.
002529  3  26 rr        	rol fntaddr+1
00252B  3  06 rr        	asl fntaddr
00252D  3  26 rr        	rol fntaddr+1
00252F  3  06 rr        	asl fntaddr
002531  3  26 rr        	rol fntaddr+1
002533  3               
002533  3  A5 rr        	lda fntaddr
002535  3  18           	clc
002536  3  69 94        	adc #<(FONT-256)
002538  3  85 rr        	sta fntaddr		; that's the low byte.
00253A  3  A5 rr        	lda fntaddr+1
00253C  3  69 33        	adc #>(FONT-256)
00253E  3  85 rr        	sta fntaddr+1		; add displacement.
002540  3               pchark:
002540  3  20 D2 24     	jsr gprad		; get screen address.
002543  3  A2 07        	ldx #7			; lines to write.
002545  3               pchar0:
002545  3  A0 00        	ldy #0
002547  3  B1 rr        	lda (fntaddr),y 	; get image byte.
002549  3  BC 58 25     	ldy scrtab,x		; Get rowoffset
00254C  3               .if gflag
00254C  3               	and andeor
00254C  3               	eor andeor+1
00254C  3               .endif
00254C  3               .if iflag
00254C  3               	eor #$ff
00254C  3               .endif
00254C  3  91 rr        	sta (scraddr),y 	; copy to screen.
00254E  3  E6 rr        	inc fntaddr		; next image byte.
002550  3  D0 02        	bne :+
002552  3  E6 rr        	inc fntaddr+1
002554  3               :
002554  3  CA           	dex			; next screen row down.
002555  3  10 EE        	bpl pchar0		; repeat.
002557  3  60           	rts
002558  3               
002558  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
00255C  3  60 40 20 00  
002560  3               
002560  3               ;----------------------------------------------
002560  3               
002560  3               ; Print attributes, properties and pixels.
002560  3               ;
002560  3               ; Input:
002560  3               ;  A	= tile number
002560  3               ;----------------------------------------------
002560  3               
002560  3               ;.repeat 294
002560  3               ;  .byte 0
002560  3               ;.endrep
002560  3               
002560  3               pbpattr:			; entry PUTBLOCK command
002560  3  A4 rr        	ldy charx
002562  3  84 rr        	sty dispx
002564  3  A4 rr        	ldy chary
002566  3  84 rr        	sty dispy
002568  3               pattr:
002568  3               .if aflag
002568  3               	pha
002568  3               	jsr wbloc		; save blockinfo
002568  3               	pla
002568  3               .endif
002568  3               
002568  3               pattr2:
002568  3  85 63        	sta z80_b		; store cell in b register for now.
00256A  3  AA           	tax
00256B  3  BD D8 33     	lda bprop,x 		; block properties.
00256E  3  85 62        	sta z80_c
002570  3  C9 08        	cmp #COLECT
002572  3  D0 05        	bne :+
002574  3  A5 63        	lda z80_b
002576  3  8D 87 25     	sta colpatt
002579  3               :
002579  3  20 F5 24     	jsr pradd 		; get property buffer address.
00257C  3  A5 62        	lda z80_c
00257E  3  A0 00        	ldy #0
002580  3  91 rr        	sta (bufaddr),y 	; write property.
002582  3  A5 63        	lda z80_b 		; restore cell.
002584  3  4C 88 25     	jmp panp
002587  3               ; Print attributes, no properties.
002587  3               
002587  3               ;.repeat 263
002587  3               ; .byte 0
002587  3               ;.endrep
002587  3               
002587  3  00           colpatt:	.byte 0
002588  3               
002588  3               panp:
002588  3  85 64        	sta z80_e		; displacement in e.
00258A  3  A9 00        	lda #0
00258C  3  85 65        	sta z80_d		; no high byte.
00258E  3  06 64        	asl z80_e  		; multiply char by 8.
002590  3  26 65        	rol z80_d
002592  3  06 64        	asl z80_e
002594  3  26 65        	rol z80_d
002596  3  06 64        	asl z80_e
002598  3  26 65        	rol z80_d
00259A  3  18           	clc
00259B  3  A5 64        	lda z80_e
00259D  3  69 D0        	adc #<chgfx 		; address of graphics.
00259F  3  85 rr        	sta tileaddr
0025A1  3  A5 65        	lda z80_d
0025A3  3  69 33        	adc #>chgfx
0025A5  3  85 rr        	sta tileaddr+1
0025A7  3  20 D2 24     	jsr gprad 		; get screen address.
0025AA  3  A2 07        	ldx #7			; number of pixel rows to write.
0025AC  3               panp0:
0025AC  3  A0 00        	ldy #0
0025AE  3  B1 rr        	lda (tileaddr),y 	; get image byte.
0025B0  3               .if iflag
0025B0  3               	eor #$ff		; Invert
0025B0  3               .endif
0025B0  3  BC 58 25     	ldy scrtab,x
0025B3  3  91 rr        	sta (scraddr),y 	; copy to screen.
0025B5  3  E6 rr        	inc tileaddr 		; next image byte.
0025B7  3  D0 02        	bne :+
0025B9  3  E6 rr        	inc tileaddr+1
0025BB  3               :
0025BB  3  CA           	dex	 		; repeat for 8 pixel rows.
0025BC  3  10 EE        	bpl panp0
0025BE  3  E6 rr        	inc dispx 		; move along one.
0025C0  3  E6 rr        	inc charx
0025C2  3  60           	rts
0025C3  3               
0025C3  3               ;----------------------------------------------
0025C3  3               ; Write block
0025C3  3               ;----------------------------------------------
0025C3  3               
0025C3  3               .if aflag
0025C3  3               wbloc:
0025C3  3               	ldy #3
0025C3  3               	sta (pbptr),y		; store block number
0025C3  3               	dey
0025C3  3               	lda dispx
0025C3  3               	sta (pbptr),y		; write x position of block.
0025C3  3               	dey
0025C3  3               	lda dispy
0025C3  3               	sta (pbptr),y		; write y position of block.
0025C3  3               	dey
0025C3  3               	lda scno
0025C3  3               	sta (pbptr),y		; write screen.
0025C3  3               	clc			; point to next free location
0025C3  3               	lda pbptr
0025C3  3               	adc #4
0025C3  3               	sta pbptr
0025C3  3               	bcc :+
0025C3  3               	inc pbptr+1
0025C3  3               :
0025C3  3               	rts
0025C3  3               .endif
0025C3  3               
0025C3  3               ;----------------------------------------------
0025C3  3               ; Print character pixels, no more.
0025C3  3               ;
0025C3  3               ; Input:
0025C3  3               ;  A	= character to print
0025C3  3               ;----------------------------------------------
0025C3  3               
0025C3  3               pchr:
0025C3  3  20 21 25     	jsr pchar 		; show character in accumulator.
0025C6  3  E6 rr        	inc dispx		; move along one.
0025C8  3  60           	rts
0025C9  3               
0025C9  3               ;----------------------------------------------------
0025C9  3               ; Shifter sprite routine for objects.
0025C9  3               ;----------------------------------------------------
0025C9  3               
0025C9  3               .if oflag
0025C9  3               sprit7:
0025C9  3               	lda z80_b
0025C9  3               	beq sprit0
0025C9  3               	sta z80_a
0025C9  3               sprit3:
0025C9  3               	lsr spr			; shift into position.
0025C9  3               	ror spr+1
0025C9  3               	ror spr+2
0025C9  3               	dec z80_a		; one less iteration.
0025C9  3               	bne sprit3
0025C9  3               sprit0:
0025C9  3               	rts 			; now apply to screen.
0025C9  3               
0025C9  3               ;----------------------------------------------------
0025C9  3               ; Draw sprite
0025C9  3               ;----------------------------------------------------
0025C9  3               
0025C9  3               sprite:
0025C9  3               	stx xtmp		; Save X-reg
0025C9  3               	jsr scadd 		; get screen address in scraddr.
0025C9  3               
0025C9  3               	lda dispx 		; x position.
0025C9  3               	and #7 			; position straddling cells.
0025C9  3               	sta z80_b		; store in b register.
0025C9  3               
0025C9  3               	lda z80_l		; store sprite graphic address.
0025C9  3               	sta sprit1+1
0025C9  3               	sta sprit2+1
0025C9  3               	lda z80_h
0025C9  3               	sta sprit1+2
0025C9  3               	sta sprit2+2
0025C9  3               
0025C9  3               	ldx #0			; pixel height.
0025C9  3               	ldy #0
0025C9  3               sprit1:
0025C9  3               	lda objdta,x		; fetch first byte.
0025C9  3               	sta spr
0025C9  3               	inx
0025C9  3               sprit2:
0025C9  3               	lda objdta,x
0025C9  3               	sta spr+1
0025C9  3               
0025C9  3               	lda #0
0025C9  3               	sta spr+2
0025C9  3               	jsr sprit7		; shift sprite
0025C9  3               
0025C9  3               	dex
0025C9  3               	lda spr			; fetch graphic.
0025C9  3               	ldy spritetab,x
0025C9  3               	eor (scraddr),y		; merge with screen image.
0025C9  3               	sta (scraddr),y		; write to screen.
0025C9  3               	inx			; next screen byte.
0025C9  3               
0025C9  3               	lda spr+1		; fetch graphic.
0025C9  3               	ldy spritetab,x
0025C9  3               	eor (scraddr),y		; merge with screen image.
0025C9  3               	sta (scraddr),y		; write to screen.
0025C9  3               	iny
0025C9  3               
0025C9  3               	lda spr+2		; fetch graphic.
0025C9  3               	eor (scraddr),y		; merge with screen image.
0025C9  3               	sta (scraddr),y		; write to screen.
0025C9  3               
0025C9  3               	inx			; next source byte.
0025C9  3               	cpx #16
0025C9  3               	bne :+
0025C9  3               	inc scraddr+1
0025C9  3               :
0025C9  3               	cpx #32
0025C9  3               	bne sprit1		; repeat
0025C9  3               
0025C9  3               	ldx xtmp		; retreive X-reg
0025C9  3               	rts
0025C9  3               
0025C9  3               spritetab:
0025C9  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0025C9  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0025C9  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0025C9  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0025C9  3               
0025C9  3               spr:	.byte 0,0,0
0025C9  3               
0025C9  3               ;xtmp:	.byte 0
0025C9  3               .endif
0025C9  3               
0025C9  3               ;-----------------------------------------------------------
0025C9  3               ; Get room address.
0025C9  3               ;-----------------------------------------------------------
0025C9  3               
0025C9  3               ;.repeat 273
0025C9  3               ;  .byte 0
0025C9  3               ;.endrep
0025C9  3               
0025C9  3               groom:
0025C9  3  A6 rr        	ldx scno 		; screen number.
0025CB  3  A0 00        	ldy #0
0025CD  3               groomx:
0025CD  3  A9 5D        	lda #<scdat 		; pointer to screens.
0025CF  3  85 66        	sta z80_l
0025D1  3  A9 34        	lda #>scdat
0025D3  3  85 67        	sta z80_h
0025D5  3               groom1:
0025D5  3  E0 00        	cpx #0			; is it the first one?
0025D7  3  F0 15        	beq groom0 		; no more screens to skip.
0025D9  3               
0025D9  3  18           	clc
0025DA  3  A5 66        	lda z80_l
0025DC  3  79 5D 34     	adc scdat,y 		; low byte of screen size.
0025DF  3  85 66        	sta z80_l
0025E1  3  C8           	iny			; point to high byte.
0025E2  3  A5 67        	lda z80_h
0025E4  3  79 5D 34     	adc scdat,y 		; high byte of screen size.
0025E7  3  85 67        	sta z80_h
0025E9  3  C8           	iny			; next address.
0025EA  3               
0025EA  3  CA           	dex 			; one less iteration.
0025EB  3  4C D5 25     	jmp groom1 		; loop until we reach the end.
0025EE  3               groom0:
0025EE  3  AD 68 34     	lda numsc 		; add displacement.
0025F1  3  0A           	asl a
0025F2  3  18           	clc			; add double displacement to address.
0025F3  3  65 66        	adc z80_l
0025F5  3  85 66        	sta z80_l
0025F7  3  A5 67        	lda z80_h
0025F9  3  69 00        	adc #0
0025FB  3  85 67        	sta z80_h
0025FD  3  60           	rts
0025FE  3               
0025FE  3               ;-----------------------------------------------------------
0025FE  3               ; Draw present room.
0025FE  3               ;-----------------------------------------------------------
0025FE  3               
0025FE  3               droom:
0025FE  3  AD 26 20     	lda wintop 		; window top.
002601  3  85 rr        	sta dispy		; set cursor y position.
002603  3               droom2:
002603  3  20 C9 25     	jsr groom 		; get address of current room.
002606  3  A9 00        	lda #0	 		; zero in accumulator.
002608  3  85 rr        	sta comcnt 		; reset compression counter.
00260A  3  AD 28 20     	lda winhgt 		; height of window.
00260D  3  85 rr        	sta rrow		; set row counter
00260F  3               droom0:
00260F  3  AD 27 20     	lda winlft 		; window left edge.
002612  3  85 rr        	sta dispx 		; set cursor x position.
002614  3  AD 29 20     	lda winwid 		; width of window.
002617  3  85 rr        	sta rcol		; set column counter
002619  3               droom1:
002619  3  20 2A 26     	jsr flbyt 		; decompress next byte on the fly.
00261C  3  20 68 25     	jsr pattr2 		; show attributes and block.
00261F  3  C6 rr        	dec rcol		; one less column.
002621  3  D0 F6        	bne droom1 		; repeat for entire line.
002623  3  E6 rr        	inc dispy		; move down one line.
002625  3  C6 rr        	dec rrow 		; one less row.
002627  3  D0 E6        	bne droom0 		; repeat for all rows.
002629  3  60           	rts
00262A  3               
00262A  3               ;rcol:	.byte 0
00262A  3               ;rrow:	.byte 0
00262A  3               
00262A  3               ;----------------------------------------------
00262A  3               ; Decompress bytes on-the-fly.
00262A  3               ;----------------------------------------------
00262A  3               
00262A  3               flbyt:
00262A  3  A5 rr        	lda comcnt 		; compression counter.
00262C  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
00262E  3               
00262E  3  A0 00        	ldy #0
002630  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002632  3  E6 66        	inc z80_l 		; point to next cell.
002634  3  D0 02        	bne :+
002636  3  E6 67        	inc z80_h
002638  3               :
002638  3  C9 FF        	cmp #255 		; is this byte a control code?
00263A  3  F0 01        	beq :+
00263C  3  60           	rts 			; no, this byte is uncompressed.
00263D  3               :
00263D  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
00263F  3  85 rr        	sta combyt 		; set up the type.
002641  3  E6 66        	inc z80_l 		; point to quantity.
002643  3  D0 02        	bne :+
002645  3  E6 67        	inc z80_h
002647  3               :
002647  3  B1 66        	lda (z80_hl),y 		; get quantity.
002649  3  E6 66        	inc z80_l 		; point to next byte.
00264B  3  D0 02        	bne :+
00264D  3  E6 67        	inc z80_h
00264F  3               :
00264F  3               flbyt1:
00264F  3  85 rr        	sta comcnt 		; store new quantity.
002651  3  C6 rr        	dec comcnt		; one less.
002653  3  A5 rr        	lda combyt 		; byte to expand.
002655  3  60           	rts
002656  3               
002656  3               ;combyt:	.byte 0			; byte type compressed.
002656  3               ;comcnt:	.byte 0			; compression counter.
002656  3               
002656  3               ;------------------------------------------
002656  3               ; Ladder down check.
002656  3               ;
002656  3               ; Input:
002656  3               ;  IX = sprite pointer
002656  3               ;------------------------------------------
002656  3               
002656  3               .if lflag
002656  3               laddd:
002656  3               	ldy #9
002656  3               	lda (z80_ix),y		; x coordinate.
002656  3               	sta dispx
002656  3               
002656  3               	ldy #8
002656  3               	lda (z80_ix),y		; y coordinate.
002656  3               	and #254		; make it even.
002656  3               	sta (z80_ix),y 		; reset it.
002656  3               	clc 			; look down 16 pixels.
002656  3               numsp5:
002656  3               	adc #SPR_HGT
002656  3               	sta dispy		; coords in dispx,dispy.
002656  3               	jmp laddv
002656  3               
002656  3               ;------------------------------------------
002656  3               ; Ladder up check.
002656  3               ;
002656  3               ; Input:
002656  3               ;  IX = sprite pointer
002656  3               ;
002656  3               ; Output:
002656  3               ;  A  = 0 is ok, A <>0 is not ok
002656  3               ;------------------------------------------
002656  3               
002656  3               laddu:
002656  3               	ldy #9
002656  3               	lda (z80_ix),y		; x coordinate.
002656  3               	sta dispx
002656  3               
002656  3               	ldy #8
002656  3               	lda (z80_ix),y		; y coordinate.
002656  3               	and #254 		; make it even.
002656  3               	sta (z80_ix),y		; reset it.
002656  3               	clc 			; look 2 pixels above feet.
002656  3               numsp6:
002656  3               	adc #SPR_HGT-2
002656  3               	sta dispy		; coords in dispx,dispy.
002656  3               laddv:
002656  3               	jsr tstbl 		; get map address.
002656  3               	jsr ldchk 		; standard ladder check.
002656  3               	beq :+
002656  3               	rts 			; no way through.
002656  3               :
002656  3               	inc bufaddr 		; look right one cell.
002656  3               	bne :+
002656  3               	inc bufaddr+1
002656  3               :
002656  3               	jsr ldchk 		; do the check.
002656  3               	beq :+
002656  3               	rts 			; impassable.
002656  3               :
002656  3               	lda dispx 		; y coordinate.
002656  3               	and #7 			; position straddling block cells.
002656  3               	bne :+
002656  3               	rts 			; no more checks needed.
002656  3               :
002656  3               	inc bufaddr 		; look to third cell.
002656  3               	bne :+
002656  3               	inc bufaddr+1
002656  3               :
002656  3               	jsr ldchk 		; do the check.
002656  3               	rts  			; return with zero flag set accordingly.
002656  3               .endif
002656  3               
002656  3               ;---------------------------------------------------------
002656  3               ; Can go up check.
002656  3               ;
002656  3               ; Input:
002656  3               ;  IX = sprite pointer
002656  3               ;
002656  3               ; Output:
002656  3               ;  A  = 0 is ok, A <>0 is not ok
002656  3               ;---------------------------------------------------------
002656  3               
002656  3               cangu:
002656  3  A0 09        	ldy #9
002658  3  B1 68        	lda (z80_ix),y		; x coordinate.
00265A  3  85 rr        	sta dispx
00265C  3  A0 08        	ldy #8
00265E  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002660  3  38           	sec
002661  3  E9 02        	sbc #2
002663  3  85 rr        	sta dispy		; coords in dispx,dispy.
002665  3  20 00 29     	jsr tstbl 		; get map address.
002668  3  20 18 28     	jsr lrchk 		; standard left/right check.
00266B  3  F0 01        	beq :+
00266D  3  60           	rts			; no way through.
00266E  3               :
00266E  3  E6 rr        	inc bufaddr		; look right one cell.
002670  3  D0 02        	bne :+
002672  3  E6 rr        	inc bufaddr+1
002674  3               :
002674  3  20 18 28     	jsr lrchk 		; do the check.
002677  3  F0 01        	beq :+
002679  3  60           	rts			; impassable.
00267A  3               :
00267A  3  A5 rr        	lda dispx		; x coordinate.
00267C  3  29 07        	and #7			; position straddling block cells.
00267E  3  D0 01        	bne :+
002680  3  60           	rts			; no more checks needed.
002681  3               :
002681  3  E6 rr        	inc bufaddr		; look to third cell.
002683  3  D0 02        	bne :+
002685  3  E6 rr        	inc bufaddr+1
002687  3               :
002687  3  20 18 28     	jsr lrchk		; do the check.
00268A  3  60           	rts 			; return with zero flag set accordingly.
00268B  3               
00268B  3               ;---------------------------------------------------------
00268B  3               ; Can go down check.
00268B  3               ;
00268B  3               ; Input:
00268B  3               ;  IX = sprite pointer
00268B  3               ;
00268B  3               ; Output:
00268B  3               ;  A  = 0 is ok, A <>0 is not ok
00268B  3               ;---------------------------------------------------------
00268B  3               
00268B  3               ;.repeat 264
00268B  3               ;  .byte 0
00268B  3               ;.endrep
00268B  3               
00268B  3               cangd:
00268B  3  A0 09        	ldy #9
00268D  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00268F  3  85 rr        	sta dispx
002691  3  A0 08        	ldy #8
002693  3  B1 68        	lda (z80_ix),y		; y coordinate.
002695  3  18           	clc
002696  3               numsp3:
002696  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
002698  3  85 rr        	sta dispy		; coords in dispx,dispy.
00269A  3  20 00 29     	jsr tstbl 		; get map address.
00269D  3  20 2D 28     	jsr plchk 		; block, platform check.
0026A0  3  F0 01        	beq :+
0026A2  3  60           	rts			; no way through.
0026A3  3               :
0026A3  3  E6 rr        	inc bufaddr		; look right one cell.
0026A5  3  D0 02        	bne :+
0026A7  3  E6 rr        	inc bufaddr+1
0026A9  3               :
0026A9  3  20 2D 28     	jsr plchk		; block, platform check.
0026AC  3  F0 01        	beq :+
0026AE  3  60           	rts			; impassable.
0026AF  3               :
0026AF  3  A5 rr        	lda dispx		; x coordinate.
0026B1  3  29 07        	and #7			; position straddling block cells.
0026B3  3  D0 01        	bne :+
0026B5  3  60           	rts			; no more checks needed.
0026B6  3               :
0026B6  3  E6 rr        	inc bufaddr		; look to third cell.
0026B8  3  D0 02        	bne :+
0026BA  3  E6 rr        	inc bufaddr+1
0026BC  3               :
0026BC  3  20 2D 28     	jsr plchk		; block, platform check.
0026BF  3  60           	rts			; return with zero flag set accordingly.
0026C0  3               
0026C0  3               ;---------------------------------------------------------
0026C0  3               ; Can go left check.
0026C0  3               ;
0026C0  3               ; Input:
0026C0  3               ;  IX = sprite pointer
0026C0  3               ;
0026C0  3               ; Output:
0026C0  3               ;  A  = 0 is ok, A <>0 is not ok
0026C0  3               ;---------------------------------------------------------
0026C0  3               
0026C0  3               cangl:
0026C0  3  A0 08        	ldy #8
0026C2  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0026C4  3  85 rr        	sta dispy
0026C6  3  A0 09        	ldy #9
0026C8  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0026CA  3  38           	sec
0026CB  3  E9 02        	sbc #2			; look left 2 pixels.
0026CD  3  85 rr        	sta dispx		; coords in dispx,dispy.
0026CF  3  4C F1 27     	jmp cangh		; test if we can go there.
0026D2  3               
0026D2  3               ;---------------------------------------------------------
0026D2  3               ; Can go right check.
0026D2  3               ;
0026D2  3               ; Input:
0026D2  3               ;  IX = sprite pointer
0026D2  3               ;
0026D2  3               ; Output:
0026D2  3               ;  A  = 0 is ok, A <>0 is not ok
0026D2  3               ;---------------------------------------------------------
0026D2  3               
0026D2  3  00 00 00 00  .repeat 272
0026D6  3  00 00 00 00  
0026DA  3  00 00 00 00  
0027E2  3                 .byte 0
0027E2  3               .endrep
0027E2  3               
0027E2  3               cangr:
0027E2  3  A0 08        	ldy #8
0027E4  3  B1 68        	lda (z80_ix),y		; y coordinate.
0027E6  3  85 rr        	sta dispy
0027E8  3  A0 09        	ldy #9
0027EA  3  B1 68        	lda (z80_ix),y		; x coordinate.
0027EC  3  18           	clc
0027ED  3  69 10        	adc #16			; look right 16 pixels.
0027EF  3  85 rr        	sta dispx		; coords in dispx,dispy.
0027F1  3               cangh:
0027F1  3               cangh2:
0027F1  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
0027F3  3  85 63        	sta z80_b
0027F5  3  A5 rr        	lda dispy		; y position.
0027F7  3  29 07        	and #7			; does x straddle cells?
0027F9  3  D0 02        	bne cangh0		; yes, loop counter is good.
0027FB  3  C6 63        	dec z80_b		; one less row to write.
0027FD  3               cangh0:
0027FD  3  20 00 29     	jsr tstbl		; get map address.
002800  3               cangh1:
002800  3  20 18 28     	jsr lrchk		; standard left/right check.
002803  3  F0 01        	beq :+
002805  3  60           	rts			; no way through.
002806  3               :
002806  3  48           	pha
002807  3  18           	clc
002808  3  A5 rr        	lda bufaddr
00280A  3  69 20        	adc #32			; look down.
00280C  3  85 rr        	sta bufaddr
00280E  3  90 02        	bcc :+
002810  3  E6 rr        	inc bufaddr+1
002812  3               :
002812  3  68           	pla
002813  3               
002813  3  C6 63        	dec z80_b
002815  3  D0 E9        	bne cangh1
002817  3  60           	rts
002818  3               
002818  3               ;-------------------------------------
002818  3               ; Check left/right movement is okay.
002818  3               ;
002818  3               ; Input:
002818  3               ;  bufaddr = MAP + x/8 + y/8*32
002818  3               ;
002818  3               ; Output:
002818  3               ;  A  = 0 is ok, A <>0 is not ok
002818  3               ;-------------------------------------
002818  3               
002818  3               lrchk:
002818  3  A0 00        	ldy #0
00281A  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
00281C  3  C9 02        	cmp #WALL 		; is it passable?
00281E  3  F0 0A        	beq lrchkx		; no.
002820  3               
002820  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002822  3  F0 06        	beq lrchkx		; not passable.
002824  3  A9 00        	lda #0
002826  3  60           	rts
002827  3               
002827  3               ;--------------------------------------------------------------
002827  3               ; Called by mmenu
002827  3               ;--------------------------------------------------------------
002827  3               
002827  3               always:
002827  3  A9 FF        	lda #255		; report it as okay.
002829  3  60           	rts
00282A  3               
00282A  3               lrchkx:
00282A  3  A9 01        	lda #1 			; reset all bits.
00282C  3  60           	rts
00282D  3               
00282D  3               
00282D  3               ;--------------------------------------------------------------
00282D  3               ; Check platform or solid item is not in way.
00282D  3               ;
00282D  3               ; Input:
00282D  3               ;  bufaddr = MAP + x/8 + y/8*32
00282D  3               ;
00282D  3               ; Output:
00282D  3               ;  A  = 0 is ok, A <>0 is not ok
00282D  3               ;--------------------------------------------------------------
00282D  3               
00282D  3               plchk:
00282D  3  A0 00        	ldy #0
00282F  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002831  3  C9 02        	cmp #WALL 		; is it passable?
002833  3  F0 F5        	beq lrchkx		; no.
002835  3               .if pflag .or dflag
002835  3               	cmp #FODDER		; fodder has to be dug.
002835  3               	beq lrchkx		; not passable.
002835  3               .endif
002835  3  C9 01        	cmp #PLATFM		; platform is solid.
002837  3  F0 03        	beq plchkx		; not passable.
002839  3               .if lflag
002839  3               	cmp #LADDER		; is it a ladder?
002839  3               	beq lrchkx		; on ladder, deny movement.
002839  3               .endif
002839  3               plchk0:
002839  3  A9 00        	lda #0			; report as ok
00283B  3  60           	rts
00283C  3               plchkx:
00283C  3  A5 rr        	lda dispy		; x coordinate.
00283E  3  29 07        	and #7			; position straddling blocks.
002840  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002842  3  4C 39 28     	jmp plchk0
002845  3               
002845  3               ;--------------------------------------------------------------
002845  3               ; Check ladder is available.
002845  3               ;
002845  3               ; Input:
002845  3               ;  bufaddr = MAP + x/8 + y/8*32
002845  3               ;
002845  3               ; Output:
002845  3               ;  A  = 0 is ok, A <>0 is not ok
002845  3               ;--------------------------------------------------------------
002845  3               
002845  3               .if lflag
002845  3               ldchk:
002845  3               	ldy #0
002845  3               	lda (bufaddr),y 	; fetch cell.
002845  3               	cmp #LADDER 		; is it a ladder?
002845  3               	beq :+
002845  3               	lda #1
002845  3               	rts  			; return with zero flag set accordingly.
002845  3               :
002845  3               	lda #0
002845  3               	rts
002845  3               .endif
002845  3               
002845  3               ;--------------------------------------------------------------
002845  3               ; Get collectables.
002845  3               ;--------------------------------------------------------------
002845  3               
002845  3               .if cflag
002845  3               getcol:
002845  3                       lda #COLECT             ; collectable blocks.
002845  3                       sta z80_b
002845  3                       jsr tded                ; test for collectable blocks.
002845  3                       cmp z80_b               ; did we find one?
002845  3                       beq :+
002845  3                       rts                     ; none were found, job done.
002845  3               :
002845  3                       jsr gtblk               ; get block.
002845  3                       jsr evnt20              ; collected block event.
002845  3                       jmp getcol              ; repeat until none left.
002845  3               
002845  3               ; Get collectable block.
002845  3               
002845  3               gtblk:
002845  3               	ldy #0
002845  3               	lda (bufaddr),y
002845  3               	sta z80_a
002845  3                       lda #0
002845  3                       sta (bufaddr),y		; make it empty now.
002845  3               
002845  3               	lda bufaddr		; set dispx
002845  3               	and #31
002845  3               	sta dispx
002845  3               
002845  3               	lda bufaddr+1		; Set dispy
002845  3               	sec
002845  3               	sbc #>MAP
002845  3               	sta bufaddr+1
002845  3               	asl bufaddr
002845  3               	rol bufaddr+1
002845  3               	asl bufaddr
002845  3               	rol bufaddr+1
002845  3               	asl bufaddr
002845  3               	rol bufaddr+1
002845  3               	lda bufaddr+1
002845  3               	sta dispy
002845  3               
002845  3               	lda colpatt		; get blocknr
002845  3               	sta z80_e		; displacement in e.
002845  3               	lda #0
002845  3               	sta z80_d		; no high byte.
002845  3               	asl z80_e  		; multiply char by 8.
002845  3               	rol z80_d
002845  3               	asl z80_e
002845  3               	rol z80_d
002845  3               	asl z80_e
002845  3               	rol z80_d
002845  3               	clc
002845  3               	lda z80_e
002845  3               	adc #<chgfx 		; address of graphics.
002845  3               	sta tileaddr
002845  3               	lda z80_d
002845  3               	adc #>chgfx
002845  3               	sta tileaddr+1
002845  3               	jsr gprad 		; get screen address.
002845  3               	ldx #7			; number of pixel rows to write.
002845  3               gtblk0:
002845  3               	ldy #0
002845  3               	lda (tileaddr),y 	; get image byte.
002845  3               	ldy scrtab,x
002845  3               	eor (scraddr),y 	; XOR tile on screen
002845  3               	sta (scraddr),y 	; copy to screen.
002845  3               	inc tileaddr 		; next image byte.
002845  3               	bne :+
002845  3               	inc tileaddr+1
002845  3               :
002845  3               	dex	 		; repeat for 8 pixel rows.
002845  3               	bpl gtblk0
002845  3               	rts
002845  3               .endif
002845  3               
002845  3               ;--------------------------------------------------------------
002845  3               ; Touched deadly block check.
002845  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002845  3               ;
002845  3               ; Input:
002845  3               ;  IX = sprite address
002845  3               ;
002845  3               ; Output:
002845  3               ;  A  = 0 is ok, A=5 is not ok
002845  3               ;--------------------------------------------------------------
002845  3               
002845  3               tded:
002845  3  A0 08        	ldy #8
002847  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002849  3  85 rr        	sta dispy
00284B  3  C8           	iny
00284C  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00284E  3  85 rr        	sta dispx		; coords in dispx,dispy.
002850  3  20 00 29     	jsr tstbl		; get map address.
002853  3  48           	pha
002854  3  A9 1F        	lda #31			; default distance to next line down.
002856  3  85 64        	sta z80_e
002858  3  68           	pla
002859  3  C5 63        	cmp z80_b		; is this the required block?
00285B  3  D0 01        	bne :+
00285D  3  60           	rts			; yes.
00285E  3               :
00285E  3  E6 rr        	inc bufaddr 		; next cell.
002860  3  D0 02        	bne :+
002862  3  E6 rr        	inc bufaddr+1
002864  3               :
002864  3  A0 00        	ldy #0
002866  3  B1 rr        	lda (bufaddr),y		; fetch type.
002868  3  C5 63        	cmp z80_b 		; is this deadly/custom?
00286A  3  D0 01        	bne :+
00286C  3  60           	rts			; yes.
00286D  3               :
00286D  3  A5 rr        	lda dispx		; horizontal position.
00286F  3  85 62        	sta z80_c 		; store column in c register.
002871  3  29 07        	and #7			; is it straddling cells?
002873  3  D0 03        	bne :+
002875  3  4C 89 28     	jmp tded0		; no.
002878  3               :
002878  3  E6 rr        	inc bufaddr 		; last cell.
00287A  3  D0 02        	bne :+
00287C  3  E6 rr        	inc bufaddr+1
00287E  3               :
00287E  3  A0 00        	ldy #0
002880  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002882  3  C5 63        	cmp z80_b		; is this the block?
002884  3  D0 01        	bne :+
002886  3  60           	rts			; yes.
002887  3               :
002887  3  C6 64        	dec z80_e		; one less cell to next row down.
002889  3               tded0:
002889  3  18           	clc 			; point to next row.
00288A  3  A5 rr        	lda bufaddr
00288C  3  65 64        	adc z80_e
00288E  3  85 rr        	sta bufaddr
002890  3  90 02        	bcc :+
002892  3  E6 rr        	inc bufaddr+1
002894  3               :
002894  3  A0 00        	ldy #0
002896  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
002898  3  C5 63        	cmp z80_b		; is this fatal?
00289A  3  D0 01        	bne :+
00289C  3  60           	rts			; yes.
00289D  3               :
00289D  3  E6 rr        	inc bufaddr 		; next cell.
00289F  3  D0 02        	bne :+
0028A1  3  E6 rr        	inc bufaddr+1
0028A3  3               :
0028A3  3  A0 00        	ldy #0
0028A5  3  B1 rr        	lda (bufaddr),y 	; fetch type.
0028A7  3  C5 63        	cmp z80_b		; is this fatal?
0028A9  3  D0 01        	bne :+
0028AB  3  60           	rts			; yes.
0028AC  3               :
0028AC  3  A5 62        	lda z80_c		; horizontal position.
0028AE  3  29 07        	and #7			; is it straddling cells?
0028B0  3  D0 03        	bne :+
0028B2  3  4C C4 28     	jmp tded1 		; no.
0028B5  3               :
0028B5  3  E6 rr        	inc bufaddr		; last cell.
0028B7  3  D0 02        	bne :+
0028B9  3  E6 rr        	inc bufaddr+1
0028BB  3               :
0028BB  3  A0 00        	ldy #0
0028BD  3  B1 rr        	lda (bufaddr),y		; fetch type.
0028BF  3  C5 63        	cmp z80_b		; is this fatal?
0028C1  3  D0 01        	bne :+
0028C3  3  60           	rts			; yes.
0028C4  3               :
0028C4  3               tded1:
0028C4  3  A5 rr        	lda dispy		; vertical position.
0028C6  3  29 07        	and #7 			; is it straddling cells?
0028C8  3  D0 01        	bne :+
0028CA  3  60           	rts			; no, job done.
0028CB  3               :
0028CB  3  18           	clc			; point to next row.
0028CC  3  A5 rr        	lda bufaddr
0028CE  3  65 64        	adc z80_e
0028D0  3  85 rr        	sta bufaddr
0028D2  3  90 02        	bcc :+
0028D4  3  E6 rr        	inc bufaddr+1
0028D6  3               :
0028D6  3  A0 00        	ldy #0
0028D8  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
0028DA  3  C5 63        	cmp z80_b		; is this fatal?
0028DC  3  D0 01        	bne :+
0028DE  3  60           	rts			; yes.
0028DF  3               :
0028DF  3  E6 rr        	inc bufaddr		; next cell.
0028E1  3  D0 02        	bne :+
0028E3  3  E6 rr        	inc bufaddr+1
0028E5  3               :
0028E5  3  A0 00        	ldy #0
0028E7  3  B1 rr        	lda (bufaddr),y 	; fetch type.
0028E9  3  C5 63        	cmp z80_b		; is this fatal?
0028EB  3  D0 01        	bne :+
0028ED  3  60           	rts			; yes.
0028EE  3               :
0028EE  3  A5 62        	lda z80_c		; horizontal position.
0028F0  3  29 07        	and #7			; is it straddling cells?
0028F2  3  D0 01        	bne :+
0028F4  3  60           	rts			; no.
0028F5  3               :
0028F5  3  E6 rr        	inc bufaddr		; last cell.
0028F7  3  D0 02        	bne :+
0028F9  3  E6 rr        	inc bufaddr+1
0028FB  3               :
0028FB  3  A0 00        	ldy #0
0028FD  3  B1 rr        	lda (bufaddr),y		; fetch final type.
0028FF  3  60           	rts 			; return with final type in accumulator.
002900  3               
002900  3               ;---------------------------------------------------
002900  3               ; Fetch block type at (dispx, dispy).
002900  3               ;
002900  3               ; Output:
002900  3               ;  A = block type
002900  3               ;---------------------------------------------------
002900  3               
002900  3               tstbl:
002900  3  A5 rr        	lda dispy 		; fetch y coord.
002902  3  4A           	lsr a			; bufaddr = y/8
002903  3  4A           	lsr a
002904  3  4A           	lsr a
002905  3  85 rr        	sta chary
002907  3               
002907  3  85 rr        	sta bufaddr
002909  3  A9 00        	lda #0
00290B  3  85 rr        	sta bufaddr+1
00290D  3               
00290D  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
00290F  3  26 rr        	rol bufaddr+1
002911  3  06 rr        	asl bufaddr
002913  3  26 rr        	rol bufaddr+1
002915  3  06 rr        	asl bufaddr
002917  3  26 rr        	rol bufaddr+1
002919  3  06 rr        	asl bufaddr
00291B  3  26 rr        	rol bufaddr+1
00291D  3  06 rr        	asl bufaddr
00291F  3  26 rr        	rol bufaddr+1
002921  3               
002921  3  A5 rr        	lda dispx		; x/8
002923  3  4A           	lsr a
002924  3  4A           	lsr a
002925  3  4A           	lsr a
002926  3  85 rr        	sta charx
002928  3               
002928  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
002929  3  65 rr        	adc bufaddr
00292B  3  69 00        	adc #<MAP
00292D  3  85 rr        	sta bufaddr
00292F  3  A5 rr        	lda bufaddr+1
002931  3  69 DD        	adc #>MAP
002933  3  85 rr        	sta bufaddr+1
002935  3               
002935  3  A0 00        	ldy #0
002937  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002939  3  60           	rts
00293A  3               
00293A  3               
00293A  3               ;-------------------------------------------------------------------
00293A  3               ; Jump - if we can.
00293A  3               ; Requires initial speed to be set up in accumulator prior to call.
00293A  3               ;
00293A  3               ; Input:
00293A  3               ;  IX = sprite address
00293A  3               ;-------------------------------------------------------------------
00293A  3               
00293A  3               jump:
00293A  3  A0 0D        	ldy #13
00293C  3  B1 68        	lda (z80_ix),y		; jump table low.
00293E  3  A0 0E        	ldy #14
002940  3  11 68        	ora (z80_ix),y		; jump table high.
002942  3  F0 01        	beq :+
002944  3  60           	rts			; already in the air.
002945  3               :
002945  3  A9 37        	lda #>jtab
002947  3  A0 0E        	ldy #14
002949  3  91 68        	sta (z80_ix),y		; set jump high.
00294B  3  A9 94        	lda #<jtab		; jump table start.
00294D  3  A0 0D        	ldy #13
00294F  3  91 68        	sta (z80_ix),y		; set jump low.
002951  3  60           	rts
002952  3               
002952  3               ; Jump table.
002952  3               
002952  3               ;jtab:
002952  3               ;	.byte 248,250,252
002952  3               ;	.byte 254,254,255
002952  3               ;	.byte 255,255,0,0
002952  3               ;	.byte 0,1,1,1,2,2
002952  3               ;	.byte 4,6,8,8,8,99
002952  3               
002952  3               ;------------------------------------------------
002952  3               ; Random numbers code.
002952  3               ; Pseudo-random number generator, 8-bit.
002952  3               ;
002952  3               ; Output:
002952  3               ;  RND = random number
002952  3               ;------------------------------------------------
002952  3               
002952  3               random:
002952  3  A5 rr        	lda seed
002954  3  F0 05        	beq doEor
002956  3  0A           	asl a
002957  3  F0 04        	beq noEor
002959  3  90 02        	bcc noEor
00295B  3  49 1D        doEor:	eor #$1d
00295D  3  85 rr        noEor:	sta seed
00295F  3  60           	rts
002960  3               
002960  3  A5 rr        	lda seed		; get last random number.
002962  3  0A           	asl a
002963  3  0A           	asl a
002964  3  18           	clc
002965  3  65 rr        	adc seed
002967  3  18           	clc
002968  3  69 45        	adc #$45
00296A  3  85 rr        	sta seed		; store new seed.
00296C  3  85 rr        	sta varrnd		; return number in variable.
00296E  3  60           	rts
00296F  3               
00296F  3               ;--------------------------------------------------------
00296F  3               ; Keys
00296F  3               ;
00296F  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
00296F  3               ;             ||||||||
00296F  3               ;             |||||||+> Right    KEY 0  - X
00296F  3               ;             ||||||+-> Left     KEY 1  - Z
00296F  3               ;             |||||+--> Down     KEY 2  - .
00296F  3               ;             ||||+---> Up       KEY 3  - ;
00296F  3               ;             |||+----> Fire1    KEY 4  - SPC
00296F  3               ;             ||+-----> Fire2    KEY 5  - Q
00296F  3               ;             |+------> Fire3    KEY 6  - P
00296F  3               ;             +-------> Not used
00296F  3               ;
00296F  3               ;                       Option1  KEY 7  - 1
00296F  3               ;                       Option2  KEY 8  - 2
00296F  3               ;                       Option3  KEY 9  - 3
00296F  3               ;                       Option4  KEY 10 - 4
00296F  3               ;--------------------------------------------------------
00296F  3               
00296F  3               ;              X   Z   .   ;  SPC  Q   P
00296F  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
00296F  3               ;        .byte $21,$11,$01,$92                   ; menu options.
00296F  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002973  3  00 04 14     
002976  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
00297A  3               
00297A  3               ;-------------------------------------------------------
00297A  3               ; Joystick and keyboard reading routines.
00297A  3               ;
00297A  3               ; contrl = 0, Keyboard
00297A  3               ;          1, JoyKeyb
00297A  3               ;          2, JoyMMC
00297A  3               ;-------------------------------------------------------
00297A  3               
00297A  3               joykey:
00297A  3  A5 rr        	lda contrl 		; control flag.
00297C  3  C9 01        	cmp #1
00297E  3  D0 03        	bne :+
002980  3  4C 59 38     	jmp joy1 		; read keyboard joystick
002983  3               :
002983  3  C9 02        	cmp #2
002985  3  D0 03        	bne :+
002987  3  4C 89 38     	jmp joy2 		; read MMC joystick.
00298A  3               :
00298A  3               ; Keyboard controls.
00298A  3               
00298A  3  A9 00        	lda #0		 	; zero reading.
00298C  3  85 64        	sta z80_e
00298E  3               
00298E  3  A0 06        	ldy #6	 		; address of last key.
002990  3               joyke0:
002990  3  B9 95 37     	lda keys,y 		; get key from table.
002993  3  20 30 38     	jsr ktest		; being pressed?
002996  3  26 64        	rol z80_e 		; rotate into reading.
002998  3               
002998  3  88           	dey		 	; next key.
002999  3  10 F5        	bpl joyke0 		; repeat for all keys.
00299B  3  A5 64        	lda z80_e 		; copy e register to accumulator.
00299D  3  85 rr        	sta joyval		; remember value.
00299F  3  60           	rts
0029A0  3               
0029A0  3               ;---------------------------------------------------------------
0029A0  3               ; Display message.
0029A0  3               ;
0029A0  3               ; Input:
0029A0  3               ;  A = message number
0029A0  3               ;---------------------------------------------------------------
0029A0  3               
0029A0  3               dmsg:
0029A0  3  AA           	tax
0029A1  3  A9 AF        	lda #<msgdat		; pointer to messages.
0029A3  3  85 66        	sta z80_l
0029A5  3  A9 33        	lda #>msgdat
0029A7  3  85 67        	sta z80_h
0029A9  3  20 BB 2A     	jsr getwrd		; get message number.
0029AC  3               dmsg3:
0029AC  3  20 A8 2A     	jsr preprt		; pre-printing stuff.
0029AF  3  20 8D 23     	jsr checkx		; make sure we"re in a printable range.
0029B2  3  A5 rr        	lda prtmod		; print mode.
0029B4  3  D0 47        	bne bmsg1		; no, double-height text.
0029B6  3               dmsg0:
0029B6  3  A5 67        	lda z80_h		; store string pointer.
0029B8  3  48           	pha
0029B9  3  A5 66        	lda z80_l
0029BB  3  48           	pha
0029BC  3               
0029BC  3  A0 00        	ldy #0
0029BE  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
0029C0  3  29 7F        	and #127		; remove any end marker.
0029C2  3  C9 0D        	cmp #13
0029C4  3  F0 24        	beq dmsg1
0029C6  3  20 21 25     	jsr pchar		; display character.
0029C9  3  20 95 2A     	jsr nexpos 		; display position.
0029CC  3  D0 03        	bne dmsg2		; not on a new line.
0029CE  3  20 9A 2A     	jsr nexlin		; next line down.
0029D1  3               dmsg2:
0029D1  3  68           	pla			; retrieve string pointer
0029D2  3  85 66        	sta z80_l
0029D4  3  68           	pla
0029D5  3  85 67        	sta z80_h
0029D7  3               
0029D7  3  A0 00        	ldy #0
0029D9  3  B1 66        	lda (z80_hl),y		; fetch last character.
0029DB  3  0A           	asl a  			; was it the end?
0029DC  3  90 03        	bcc :+
0029DE  3  4C E0 23     	jmp dscor2		; yes, job done.
0029E1  3               :
0029E1  3  E6 66        	inc z80_l		; next character to display.
0029E3  3  D0 02        	bne :+
0029E5  3  E6 67        	inc z80_h
0029E7  3               :
0029E7  3  4C B6 29     	jmp dmsg0
0029EA  3               dmsg1:
0029EA  3  E6 rr        	inc dispy
0029EC  3  A5 rr        	lda dispy
0029EE  3  C9 18        	cmp #24
0029F0  3  90 04        	bcc dmsg4
0029F2  3  A9 00        	lda #0
0029F4  3  85 rr        	sta dispy
0029F6  3               dmsg4:
0029F6  3  A9 00        	lda #0
0029F8  3  85 rr        	sta dispx
0029FA  3  4C D1 29     	jmp dmsg2
0029FD  3               
0029FD  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
0029FD  3               
0029FD  3               ;----------------------------------------------------------
0029FD  3               ; Display message in big text.
0029FD  3               ;
0029FD  3               ; Input:
0029FD  3               ;  HL = string pointer
0029FD  3               ;----------------------------------------------------------
0029FD  3               
0029FD  3               bmsg1:
0029FD  3  A0 00        	ldy #0
0029FF  3  B1 66        	lda (z80_hl),y 		; get character to display.
002A01  3  29 7F        	and #127		; only want 7 bits.
002A03  3  C9 0D        	cmp #13
002A05  3  F0 13        	beq bmsg2
002A07  3  20 2F 2A     	jsr bchar 		; display big char.
002A0A  3               bmsg3:
002A0A  3  A0 00        	ldy #0
002A0C  3  B1 66        	lda (z80_hl),y 		; look at last character.
002A0E  3  48           	pha
002A0F  3  E6 66        	inc z80_l 		; next character in list.
002A11  3  D0 02        	bne :+
002A13  3  E6 67        	inc z80_h
002A15  3               :
002A15  3  68           	pla
002A16  3  0A           	asl a  			; was terminator flag set?
002A17  3  90 E4        	bcc bmsg1		; no, keep going.
002A19  3  60           	rts
002A1A  3               bmsg2:
002A1A  3  A9 00        	lda #0
002A1C  3  85 rr        	sta dispx
002A1E  3  E6 rr        	inc dispy
002A20  3  E6 rr        	inc dispy
002A22  3  A5 rr        	lda dispy
002A24  3  C9 17        	cmp #23
002A26  3  90 E2        	bcc bmsg3
002A28  3  A9 00        	lda #0
002A2A  3  85 rr        	sta dispy
002A2C  3  4C 0A 2A     	jmp bmsg3
002A2F  3               
002A2F  3               ;----------------------------------------------------------
002A2F  3               ; Big character display.
002A2F  3               ;
002A2F  3               ; Input:
002A2F  3               ;  A = character
002A2F  3               ;----------------------------------------------------------
002A2F  3               
002A2F  3               bchar:
002A2F  3  85 64        	sta z80_e		; save char in lb
002A31  3  A9 00        	lda #0
002A33  3  85 65        	sta z80_d		; reset hb
002A35  3               
002A35  3  06 64        	asl z80_e 		; multiply char by 8.
002A37  3  26 65        	rol z80_d
002A39  3  06 64        	asl z80_e
002A3B  3  26 65        	rol z80_d
002A3D  3  06 64        	asl z80_e
002A3F  3  26 65        	rol z80_d		; de = a*8
002A41  3               
002A41  3  18           	clc			; de = Fontpointer + a*8
002A42  3  A5 64        	lda z80_e
002A44  3  69 94        	adc #<(FONT-256) 		; address of font.
002A46  3  85 64        	sta z80_e
002A48  3  A5 65        	lda z80_d
002A4A  3  69 33        	adc #>(FONT-256)
002A4C  3  85 65        	sta z80_d
002A4E  3               
002A4E  3  20 D2 24     	jsr gprad 		; get screen address.
002A51  3               
002A51  3  A2 00        	ldx #0			; height of character in font.
002A53  3               bchar0:
002A53  3  A0 00        	ldy #0
002A55  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
002A57  3               
002A57  3               .if gflag
002A57  3               	and andeor
002A57  3               	eor andeor+1
002A57  3               .endif
002A57  3               .if iflag
002A57  3               	eor #$ff
002A57  3               .endif
002A57  3               
002A57  3  91 rr        	sta (scraddr),y
002A59  3  48           	pha
002A5A  3  20 EF 2D     	jsr nline 		; next line down.
002A5D  3  68           	pla
002A5E  3  91 rr        	sta (scraddr),y
002A60  3  20 EF 2D     	jsr nline 		; next line down.
002A63  3               
002A63  3  18           	clc
002A64  3  E6 64        	inc z80_e 		; next line of font.
002A66  3  D0 02        	bne :+
002A68  3  E6 65        	inc z80_d
002A6A  3               :
002A6A  3  E8           	inx
002A6B  3  E0 08        	cpx #8
002A6D  3  D0 E4        	bne bchar0
002A6F  3               
002A6F  3  20 95 2A     	jsr nexpos		; display position.
002A72  3  D0 05        	bne bchar2 		; not on a new line.
002A74  3               bchar3:
002A74  3  E6 rr        	inc dispy
002A76  3  20 9A 2A     	jsr nexlin 		; next line check.
002A79  3               bchar2:
002A79  3  4C E0 23     	jmp dscor2		; tidy up line and column variables.
002A7C  3               
002A7C  3               
002A7C  3               ;-------------------------------------------------
002A7C  3               ; Display a character.
002A7C  3               ;
002A7C  3               ; Input:
002A7C  3               ;  A = character
002A7C  3               ;-------------------------------------------------
002A7C  3               
002A7C  3               achar:
002A7C  3  85 63        	sta z80_b 		; copy to b.
002A7E  3  20 A8 2A     	jsr preprt 		; get ready to print.
002A81  3  A5 63        	lda z80_b		; character in accumulator.
002A83  3  A6 rr        	ldx prtmod 		; print mode.
002A85  3  F0 03        	beq :+
002A87  3  4C 2F 2A     	jmp bchar 		; no, double-height text.
002A8A  3               :
002A8A  3  20 21 25     	jsr pchar 		; display character.
002A8D  3  20 95 2A     	jsr nexpos 		; display position.
002A90  3  F0 E2        	beq bchar3		; next line down.
002A92  3  4C 79 2A     	jmp bchar2 		; tidy up.
002A95  3               
002A95  3               
002A95  3               ;-------------------------------------------------
002A95  3               ; Get next print column position.
002A95  3               ;-------------------------------------------------
002A95  3               
002A95  3               nexpos:
002A95  3  E6 rr        	inc dispx		; move along one position.
002A97  3  A5 rr        	lda dispx 		; get coordinate.
002A99  3               ;	and #31
002A99  3  60           	rts 			; return with status in zero flag.
002A9A  3               
002A9A  3               ;-------------------------------------------------
002A9A  3               ; Get next print line position.
002A9A  3               ;-------------------------------------------------
002A9A  3               
002A9A  3               nexlin:
002A9A  3  E6 rr        	inc dispy 		; newline.
002A9C  3  A5 rr        	lda dispy		; vertical position.
002A9E  3  C9 18        	cmp #24			; past screen edge?
002AA0  3  B0 01        	bcs :+
002AA2  3  60           	rts			; no, still okay.
002AA3  3               :
002AA3  3  A9 00        	lda #0			; restart at top.
002AA5  3  85 rr        	sta dispy
002AA7  3  60           	rts
002AA8  3               
002AA8  3               ;--------------------------------------------------------
002AA8  3               ; Pre-print preliminaries.
002AA8  3               ;--------------------------------------------------------
002AA8  3               
002AA8  3               preprt:
002AA8  3  A9 94        	lda #<(FONT-256)		; font pointer.
002AAA  3  8D 8B 23     	sta grbase		; set up graphics base.
002AAD  3  A9 33        	lda #>(FONT-256)
002AAF  3  8D 8C 23     	sta grbase+1
002AB2  3               prescr:
002AB2  3  A5 rr        	lda charx 		; display coordinates.
002AB4  3  85 rr        	sta dispx		; set up general coordinates.
002AB6  3  A5 rr        	lda chary
002AB8  3  85 rr        	sta dispy
002ABA  3  60           	rts
002ABB  3               
002ABB  3               ;--------------------------------------------------------------
002ABB  3               ; Get messagenr x in hl
002ABB  3               ;
002ABB  3               ; Input:
002ABB  3               ;  HL = pointer to message list
002ABB  3               ;  X  = message number.
002ABB  3               ;--------------------------------------------------------------
002ABB  3               
002ABB  3               getwrd:
002ABB  3  E0 00        	cpx #0
002ABD  3  D0 01        	bne:+ 			; first word in list?
002ABF  3  60           	rts 			; yep, don't search.
002AC0  3               :
002AC0  3  A0 00        	ldy #0
002AC2  3               getwd0:
002AC2  3  B1 66        	lda (z80_hl),y
002AC4  3  48           	pha
002AC5  3  E6 66        	inc z80_l
002AC7  3  D0 02        	bne :+
002AC9  3  E6 67        	inc z80_h
002ACB  3               :
002ACB  3  68           	pla
002ACC  3  C9 80        	cmp #128		; found end?
002ACE  3  30 F2        	bmi getwd0		; no, carry on.
002AD0  3  CA           	dex			; until we have right number.
002AD1  3  D0 EF        	bne getwd0
002AD3  3  60           	rts
002AD4  3               
002AD4  3               ;-----------------------------------------------------------
002AD4  3               ; Bubble sort.
002AD4  3               ;-----------------------------------------------------------
002AD4  3               
002AD4  3               bsort:
002AD4  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
002AD6  3  85 rr        	sta qscnt
002AD8  3               
002AD8  3  A9 3D        	lda #<sprtab 		; sprite table.
002ADA  3  85 68        	sta z80_x
002ADC  3  A9 32        	lda #>sprtab
002ADE  3  85 69        	sta z80_i
002AE0  3               bsort0:
002AE0  3  A0 00        	ldy #0
002AE2  3  B1 68        	lda (z80_ix),y 		; first sprite type.
002AE4  3  C9 FF        	cmp #255 		; is it switched off?
002AE6  3  F0 30        	beq swemp		; yes, may need to switch another in here.
002AE8  3               
002AE8  3  A0 11        	ldy #TABSIZ
002AEA  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
002AEC  3  C9 FF        	cmp #255 		; is it enabled?
002AEE  3  F0 0A        	beq bsort2 		; no, nothing to swap.
002AF0  3               
002AF0  3  A0 14        	ldy #TABSIZ+3
002AF2  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
002AF4  3  A0 03        	ldy #3
002AF6  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
002AF8  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
002AFA  3               bsort2:
002AFA  3  18           	clc
002AFB  3  A5 68        	lda z80_x
002AFD  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002AFF  3  85 68        	sta z80_x
002B01  3  90 02        	bcc :+
002B03  3  E6 69        	inc z80_i
002B05  3               :
002B05  3  C6 rr        	dec qscnt
002B07  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
002B09  3  60           	rts
002B0A  3               
002B0A  3               ;qscnt:	.byte 0
002B0A  3               
002B0A  3               bsort1:
002B0A  3  A0 11        	ldy #TABSIZ
002B0C  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
002B0E  3  C9 FF        	cmp #255		; is it enabled?
002B10  3  F0 E8        	beq bsort2		; no, nothing to swap.
002B12  3  20 26 2B     	jsr swspr		; swap positions.
002B15  3  4C FA 2A     	jmp bsort2
002B18  3               swemp:
002B18  3  A0 11        	ldy #TABSIZ
002B1A  3  B1 68        	lda (z80_ix),y		; next table entry.
002B1C  3  C9 FF        	cmp #255		; is that one on?
002B1E  3  F0 DA        	beq bsort2		; no, nothing to swap.
002B20  3  20 26 2B     	jsr swspr		; swap positions.
002B23  3  4C FA 2A     	jmp bsort2
002B26  3               
002B26  3               ; Swap sprites.
002B26  3               
002B26  3               swspr:
002B26  3  A5 68        	lda z80_x		; table address
002B28  3  85 64        	sta z80_e		; copy to de pair.
002B2A  3  85 66        	sta z80_l		; copy to hl pair.
002B2C  3  A5 69        	lda z80_i
002B2E  3  85 67        	sta z80_h
002B30  3  85 65        	sta z80_d
002B32  3               
002B32  3  18           	clc
002B33  3  A5 66        	lda z80_l
002B35  3  69 11        	adc #TABSIZ		; distance to second entry.
002B37  3  85 66        	sta z80_l
002B39  3  90 02        	bcc :+
002B3B  3  E6 67        	inc z80_h
002B3D  3               :
002B3D  3  A9 11        	lda #TABSIZ		; bytes to swap.
002B3F  3  85 63        	sta z80_b
002B41  3  A0 00        	ldy #0
002B43  3               swspr0:
002B43  3  B1 66        	lda (z80_hl),y		; fetch second byte.
002B45  3  48           	pha
002B46  3  B1 64        	lda (z80_de),y 		; fetch first byte.
002B48  3  91 66        	sta (z80_hl),y 		; copy to second.
002B4A  3  68           	pla
002B4B  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
002B4D  3               
002B4D  3  E6 64        	inc z80_e 		; next byte.
002B4F  3  D0 02        	bne :+
002B51  3  E6 65        	inc z80_d
002B53  3               :
002B53  3  E6 66        	inc z80_l 		; next byte.
002B55  3  D0 02        	bne :+
002B57  3  E6 67        	inc z80_h
002B59  3               :
002B59  3  C6 63        	dec z80_b
002B5B  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
002B5D  3  60           	rts
002B5E  3               
002B5E  3               ;----------------------------------------------------
002B5E  3               ; Process sprites.
002B5E  3               ;----------------------------------------------------
002B5E  3               
002B5E  3               pspr:
002B5E  3  A9 0C        	lda #NUMSPR		; sprites to process.
002B60  3  85 rr        	sta sprptr
002B62  3               
002B62  3  A9 3D        	lda #<sprtab 		; sprite table.
002B64  3  85 68        	sta z80_x
002B66  3  A9 32        	lda #>sprtab
002B68  3  85 69        	sta z80_i
002B6A  3               pspr1:
002B6A  3  A0 00        	ldy #0
002B6C  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
002B6E  3  C9 09        	cmp #9 			; within range of sprite types?
002B70  3  B0 03        	bcs :+
002B72  3  20 85 2B     	jsr pspr2 		; yes, process this one.
002B75  3               :
002B75  3  18           	clc
002B76  3  A5 68        	lda z80_x
002B78  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002B7A  3  85 68        	sta z80_x
002B7C  3  90 02        	bcc :+
002B7E  3  E6 69        	inc z80_i		; next sprite.
002B80  3               :
002B80  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
002B82  3  D0 E6        	bne pspr1
002B84  3  60           	rts
002B85  3               
002B85  3               ;sprptr:	.byte 0
002B85  3               
002B85  3               pspr2:
002B85  3  A5 68        	lda z80_x 		; store original sprite pointer.
002B87  3  85 rr        	sta ogptr
002B89  3  A5 69        	lda z80_i
002B8B  3  85 rr        	sta ogptr+1
002B8D  3  20 99 2B     	jsr pspr3		; do the routine.
002B90  3               rtorg:
002B90  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
002B92  3  85 68        	sta z80_x
002B94  3  A5 rr        	lda ogptr+1
002B96  3  85 69        	sta z80_i
002B98  3               rtorg0:
002B98  3  60           	rts
002B99  3               
002B99  3               pspr3:
002B99  3  A9 CE        	lda #<evtyp0		; sprite type events list.
002B9B  3  85 66        	sta z80_l
002B9D  3  A9 2B        	lda #>evtyp0
002B9F  3  85 67        	sta z80_h
002BA1  3               pspr4:
002BA1  3  B1 68        	lda (z80_ix),y
002BA3  3  0A           	asl a			; double accumulator.
002BA4  3  18           	clc
002BA5  3  65 66        	adc z80_l
002BA7  3  85 66        	sta z80_l
002BA9  3  90 02        	bcc :+
002BAB  3  E6 67        	inc z80_h
002BAD  3               :
002BAD  3  B1 66        	lda (z80_hl),y
002BAF  3  85 64        	sta z80_e 		; copy to de.
002BB1  3  48           	pha
002BB2  3               
002BB2  3  E6 66        	inc z80_l 		; next byte of address.
002BB4  3  D0 02        	bne :+
002BB6  3  E6 67        	inc z80_h
002BB8  3               :
002BB8  3  B1 66        	lda (z80_hl),y 		; address high.
002BBA  3  85 65        	sta z80_d
002BBC  3               
002BBC  3  48           	pha	 		; swap address into hl.
002BBD  3  A5 67        	lda z80_h
002BBF  3  85 65        	sta z80_d
002BC1  3  68           	pla
002BC2  3  85 67        	sta z80_h
002BC4  3  68           	pla
002BC5  3  85 66        	sta z80_l
002BC7  3  A5 66        	lda z80_l
002BC9  3  85 64        	sta z80_e
002BCB  3               
002BCB  3  6C 66 00     	jmp (z80_hl) 		; go there.
002BCE  3               
002BCE  3               ;ogptr:	.word 0			; original sprite pointer.
002BCE  3               
002BCE  3               ; Address of each sprite type's routine.
002BCE  3               
002BCE  3  27 33        evtyp0:	.word evnt00
002BD0  3  28 33        evtyp1:	.word evnt01
002BD2  3  29 33        evtyp2:	.word evnt02
002BD4  3  2A 33        evtyp3:	.word evnt03
002BD6  3  2B 33        evtyp4:	.word evnt04
002BD8  3  2C 33        evtyp5:	.word evnt05
002BDA  3  2D 33        evtyp6:	.word evnt06
002BDC  3  2E 33        evtyp7:	.word evnt07
002BDE  3  2F 33        evtyp8:	.word evnt08
002BE0  3               
002BE0  3               ;--------------------------------------------------------------
002BE0  3               ; Display sprites.
002BE0  3               ;
002BE0  3               ; Input:
002BE0  3               ;  IX = sprite table
002BE0  3               ;--------------------------------------------------------------
002BE0  3               
002BE0  3               dspr:
002BE0  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
002BE2  3  85 rr        	sta sprcnt
002BE4  3               dspr0:
002BE4  3  A0 00        	ldy #0
002BE6  3  B1 68        	lda (z80_ix),y 		; get sprite type.
002BE8  3  C9 FF        	cmp #255 		; is it enabled?
002BEA  3  D0 42        	bne dspr1 		; yes, it needs deleting.
002BEC  3               dspr5:
002BEC  3  A0 05        	ldy #5
002BEE  3  B1 68        	lda (z80_ix),y 		; new type.
002BF0  3  C9 FF        	cmp #255		; is it enabled?
002BF2  3  D0 77        	bne dspr3 		; yes, it needs drawing.
002BF4  3               dspr2:
002BF4  3  A0 05        	ldy #5
002BF6  3  B1 68        	lda (z80_ix),y 		; copy new type.
002BF8  3  A0 00        	ldy #0
002BFA  3  91 68        	sta (z80_ix),y
002BFC  3  A0 06        	ldy #6
002BFE  3  B1 68        	lda (z80_ix),y 		; copy new image number.
002C00  3  A0 01        	ldy #1
002C02  3  91 68        	sta (z80_ix),y
002C04  3  A0 07        	ldy #7
002C06  3  B1 68        	lda (z80_ix),y 		; copy new frame.
002C08  3  A0 02        	ldy #2
002C0A  3  91 68        	sta (z80_ix),y
002C0C  3  A0 08        	ldy #8
002C0E  3  B1 68        	lda (z80_ix),y 		; copy new y.
002C10  3  A0 03        	ldy #3
002C12  3  91 68        	sta (z80_ix),y
002C14  3  A0 09        	ldy #9
002C16  3  B1 68        	lda (z80_ix),y 		; copy new x.
002C18  3  A0 04        	ldy #4
002C1A  3  91 68        	sta (z80_ix),y
002C1C  3               
002C1C  3  18           	clc
002C1D  3  A5 68        	lda z80_x
002C1F  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
002C21  3  85 68        	sta z80_x
002C23  3  A5 69        	lda z80_i
002C25  3  69 00        	adc #0
002C27  3  85 69        	sta z80_i 		; next sprite.
002C29  3  C6 rr        	dec sprcnt
002C2B  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
002C2D  3  60           	rts
002C2E  3               dspr1:
002C2E  3  A0 05        	ldy #5
002C30  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
002C32  3  C9 FF        	cmp #255		; is this enabled?
002C34  3  D0 06        	bne dspr4 		; yes, display both.
002C36  3               dspr6:
002C36  3  20 06 2D     	jsr sspria 		; show single sprite.
002C39  3  4C F4 2B     	jmp dspr2
002C3C  3               
002C3C  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
002C3C  3               
002C3C  3               dspr4:
002C3C  3  A0 04        	ldy #4
002C3E  3  B1 68        	lda (z80_ix),y		; old x.
002C40  3  A0 09        	ldy #9
002C42  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
002C44  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
002C46  3               
002C46  3  A0 03        	ldy #3
002C48  3  B1 68        	lda (z80_ix),y		; old y.
002C4A  3  A0 08        	ldy #8
002C4C  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002C4E  3  D0 15        	bne dspr7		; they differ, need to redraw.
002C50  3               
002C50  3  A0 02        	ldy #2
002C52  3  B1 68        	lda (z80_ix),y 		; old frame.
002C54  3  A0 07        	ldy #7
002C56  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002C58  3  4C 65 2C     	jmp dspr7 		; they differ, need to redraw.
002C5B  3               
002C5B  3  A0 01        	ldy #1
002C5D  3  B1 68        	lda (z80_ix),y 		; old image.
002C5F  3  A0 06        	ldy #6
002C61  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002C63  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
002C65  3               dspr7:
002C65  3  20 33 2D     	jsr sspric 		; delete old sprite, draw new one simultaneously.
002C68  3  4C F4 2B     	jmp dspr2
002C6B  3               dspr3:
002C6B  3  20 2D 2D     	jsr ssprib 		; show single sprite.
002C6E  3  4C F4 2B     	jmp dspr2
002C71  3               
002C71  3               ;sprcnt:	.byte 0
002C71  3               
002C71  3               ;-----------------------------------------
002C71  3               ; Get sprite address calculations.
002C71  3               ; gspran = new sprite, gsprad = old sprite.
002C71  3               ;
002C71  3               ; Input:
002C71  3               ;  IX = sprite address
002C71  3               ;-----------------------------------------
002C71  3               
002C71  3               gspran:
002C71  3  A0 08        	ldy #8
002C73  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
002C75  3  85 rr        	sta dispy
002C77  3  A0 09        	ldy #9
002C79  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
002C7B  3  85 rr        	sta dispx
002C7D  3  A0 06        	ldy #6
002C7F  3  B1 68        	lda (z80_ix),y 		; new sprite image.
002C81  3  20 5F 30     	jsr gfrm		; fetch start frame for this sprite.
002C84  3               
002C84  3  A0 00        	ldy #0
002C86  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002C88  3  A0 07        	ldy #7
002C8A  3  18           	clc
002C8B  3  71 68        	adc (z80_ix),y 		; new add frame number.
002C8D  3  4C AC 2C     	jmp gspra0
002C90  3               
002C90  3               ;-----------------------------------------
002C90  3               ; Calculate old sprite address
002C90  3               ;
002C90  3               ; Input:
002C90  3               ;  IX = sprite address
002C90  3               ;
002C90  3               ; Output:
002C90  3               ;  B  = right byte mask
002C90  3               ;  C  = left byte mask
002C90  3               ;  DE = spriteframe address
002C90  3               ;  scraddr = screenaddress(dispx,dispy)
002C90  3               ;-----------------------------------------
002C90  3               
002C90  3               gsprad:
002C90  3  A0 03        	ldy #3
002C92  3  B1 68        	lda (z80_ix),y		; y coordinate.
002C94  3  85 rr        	sta dispy
002C96  3  A0 04        	ldy #4
002C98  3  B1 68        	lda (z80_ix),y		; x coordinate.
002C9A  3  85 rr        	sta dispx
002C9C  3  A0 01        	ldy #1
002C9E  3  B1 68        	lda (z80_ix),y 		; sprite image.
002CA0  3  20 5F 30     	jsr gfrm 		; fetch start frame for this sprite.
002CA3  3               
002CA3  3  A0 00        	ldy #0
002CA5  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002CA7  3  A0 02        	ldy #2
002CA9  3  18           	clc
002CAA  3  71 68        	adc (z80_ix),y 		; add frame number.
002CAC  3               gspra0:
002CAC  3  4A           	lsr a	  		; multiply by 128.
002CAD  3  85 65        	sta z80_d 		; store in d.
002CAF  3  8D 04 2D     	sta tmp1
002CB2  3  A9 00        	lda #0
002CB4  3  6A           	ror a
002CB5  3  85 64        	sta z80_e 		; got low byte.
002CB7  3  8D 05 2D     	sta tmp2
002CBA  3               .if bflag
002CBA  3               	lsr tmp1
002CBA  3               	ror tmp2
002CBA  3               	clc
002CBA  3               	lda tmp2
002CBA  3               	adc z80_e
002CBA  3               	sta z80_e
002CBA  3               	lda tmp1
002CBA  3               	adc z80_d
002CBA  3               	sta z80_d
002CBA  3               .endif
002CBA  3  18           	clc 			; address of play sprites.
002CBB  3  A5 64        	lda z80_e
002CBD  3  69 D9        	adc #<sprgfx
002CBF  3  85 64        	sta z80_e
002CC1  3  A5 65        	lda z80_d
002CC3  3  69 33        	adc #>sprgfx
002CC5  3  85 65        	sta z80_d
002CC7  3               
002CC7  3  A5 rr        	lda dispx 		; y coordinate.
002CC9  3  29 06        	and #6 			; position within byte boundary.
002CCB  3  AA           	tax	 		; low byte of table displacement.
002CCC  3               
002CCC  3  0A           	asl a	  		; multiply by 32.
002CCD  3  0A           	asl a  			; already a multiple
002CCE  3  0A           	asl a  			; of 2, so just 4
002CCF  3               .if bflag
002CCF  3               	sta tmp1
002CCF  3               	asl a  			; shifts needed.
002CCF  3               	clc
002CCF  3               	adc tmp1
002CCF  3               .else
002CCF  3  0A           	asl a  			; shifts needed.
002CD0  3               .endif
002CD0  3  18           	clc 			; add to sprite address.
002CD1  3  65 64        	adc z80_e
002CD3  3  85 64        	sta z80_e
002CD5  3  90 02        	bcc :+
002CD7  3  E6 65        	inc z80_d
002CD9  3               :
002CD9  3  BD FC 2C     	lda spmask,x		 ; pointer to mask table.
002CDC  3  85 62        	sta z80_c 		; left mask.
002CDE  3  BD FD 2C     	lda spmask+1,x
002CE1  3  85 63        	sta z80_b 		; right mask.
002CE3  3               
002CE3  3               ;------------------------------------------------------------------
002CE3  3               ; Drop into screen address routine.
002CE3  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
002CE3  3               ;------------------------------------------------------------------
002CE3  3               
002CE3  3               scadd:
002CE3  3  A6 rr        	ldx dispy
002CE5  3  E0 C0        	cpx #192
002CE7  3  90 02        	bcc :+
002CE9  3  A2 C0        	ldx #192
002CEB  3               :
002CEB  3  A5 rr        	lda dispx
002CED  3  4A           	lsr a
002CEE  3  4A           	lsr a
002CEF  3  4A           	lsr a
002CF0  3  18           	clc
002CF1  3  7D 00 E0     	adc SCADTB_lb,x
002CF4  3  85 rr        	sta scraddr
002CF6  3  BD 00 E1     	lda SCADTB_hb,x
002CF9  3  85 rr        	sta scraddr+1
002CFB  3  60           	rts
002CFC  3               
002CFC  3  FF 00        spmask:	.byte $ff,$00
002CFE  3  3F C0        	.byte $3f,$c0
002D00  3  0F F0        	.byte $0f,$f0
002D02  3  03 FC        	.byte $03,$fc
002D04  3               
002D04  3  00           tmp1:	.byte 0
002D05  3  00           tmp2:	.byte 0
002D06  3               
002D06  3               ;-----------------------------------------------------------------
002D06  3               ; These are the sprite routines.
002D06  3               ; sspria = single sprite, old (ix).
002D06  3               ; ssprib = single sprite, new (ix+5).
002D06  3               ; sspric = both sprites, old (ix) and new (ix+5).
002D06  3               ;-----------------------------------------------------------------
002D06  3               
002D06  3               sspria:
002D06  3  20 90 2C     	jsr gsprad		; get old sprite address.
002D09  3               sspri2:
002D09  3  A5 64        	lda z80_e
002D0B  3  8D 7B 2D     	sta dline1+1		; Set spritedata address
002D0E  3  8D 8A 2D     	sta dline2+1
002D11  3  A5 65        	lda z80_d
002D13  3  8D 7C 2D     	sta dline1+2
002D16  3  8D 8B 2D     	sta dline2+2
002D19  3  86 rr        	stx xtmp
002D1B  3  A2 00        	ldx #0			; vertical lines.
002D1D  3               sspri0:
002D1D  3  20 77 2D     	jsr dline		; draw a line.
002D20  3  E0 10        	cpx #16			; detect block boundery
002D22  3  D0 02        	bne :+			; skip if not
002D24  3  E6 rr        	inc scraddr+1		; jump to next blockline
002D26  3               :
002D26  3  E0 20        	cpx #32			; check finished
002D28  3               .if bflag
002D28  3               	bne :+			; skip if not
002D28  3               	inc scraddr+1		; jump to next blockline
002D28  3               	inc z80_hlp+1		; jump to next blockline
002D28  3               :
002D28  3               	cpx #48			; check finished
002D28  3               .endif
002D28  3  D0 F3        	bne sspri0		; no, repeat
002D2A  3  A6 rr        	ldx xtmp
002D2C  3  60           	rts
002D2D  3               
002D2D  3               ;-----------------------------------------------------------------
002D2D  3               
002D2D  3               ssprib:
002D2D  3  20 71 2C     	jsr gspran 		; get new sprite address.
002D30  3  4C 09 2D     	jmp sspri2
002D33  3               
002D33  3               ;-----------------------------------------------------------------
002D33  3               
002D33  3               sspric:
002D33  3  20 90 2C     	jsr gsprad 		; get old sprite address.
002D36  3  A5 64        	lda z80_e
002D38  3  8D 9F 2D     	sta ddline1+1		; Set spritedata address
002D3B  3  8D AE 2D     	sta ddline2+1
002D3E  3  A5 65        	lda z80_d
002D40  3  8D A0 2D     	sta ddline1+2
002D43  3  8D AF 2D     	sta ddline2+2
002D46  3  20 CA 39     	jsr exx  		; store addresses.
002D49  3               
002D49  3  20 71 2C     	jsr gspran 		; get new sprite addresses.
002D4C  3  A5 64        	lda z80_e
002D4E  3  8D 7B 2D     	sta dline1+1		; Set spritedata address
002D51  3  8D 8A 2D     	sta dline2+1
002D54  3  A5 65        	lda z80_d
002D56  3  8D 7C 2D     	sta dline1+2
002D59  3  8D 8B 2D     	sta dline2+2
002D5C  3               
002D5C  3  86 rr        	stx xtmp
002D5E  3  A2 00        	ldx #0			; vertical lines.
002D60  3               lloop:
002D60  3  20 77 2D     	jsr dline 		; draw a line.
002D63  3  CA           	dex
002D64  3  CA           	dex
002D65  3  20 9B 2D     	jsr ddline 		; delete a line.
002D68  3  E0 10        	cpx #16			; detect block boundery
002D6A  3  D0 04        	bne :+			; skip if not
002D6C  3  E6 rr        	inc scraddr+1		; jump to next blockline
002D6E  3  E6 73        	inc z80_hlp+1		; jump to next blockline
002D70  3               :
002D70  3  E0 20        	cpx #32			; check finished
002D72  3               .if bflag
002D72  3               	bne :+			; skip if not
002D72  3               	inc scraddr+1		; jump to next blockline
002D72  3               	inc z80_hlp+1		; jump to next blockline
002D72  3               :
002D72  3               	cpx #48			; check finished
002D72  3               .endif
002D72  3  D0 EC        	bne lloop		; no, repeat
002D74  3  A6 rr        	ldx xtmp
002D76  3  60           	rts
002D77  3               
002D77  3               
002D77  3               ;-----------------------------------------------------------------
002D77  3               
002D77  3               dline:
002D77  3  BC BF 2D     	ldy sprline,x		; point to screenleft
002D7A  3               dline1:
002D7A  3  BD 6E 34     	lda objdta,x		; fetch spriteleft byte
002D7D  3  85 61        	sta z80_a		; save spriteright byte
002D7F  3  A5 61        	lda z80_a
002D81  3  25 62        	and z80_c		; mask left
002D83  3  51 rr        	eor (scraddr),y		; merge with screenleft
002D85  3  91 rr        	sta (scraddr),y		; write screenleft
002D87  3               sline:
002D87  3  E8           	inx			; next spritebyte
002D88  3  C8           	iny			; point to screenmiddle
002D89  3               dline2:
002D89  3  BD 6E 34     	lda objdta,x		; fetch spritemiddle byte
002D8C  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
002D8E  3  91 rr        	sta (scraddr),y		; write screenmiddle
002D90  3               sline2:
002D90  3  C8           	iny			; point to screenright
002D91  3  A5 61        	lda z80_a		; fetch spriteright byte
002D93  3  25 63        	and z80_b		; mask right
002D95  3  51 rr        	eor (scraddr),y		; merge with screenright
002D97  3  91 rr        	sta (scraddr),y		; write screenright
002D99  3               sline3:
002D99  3  E8           	inx			; next spritebyte
002D9A  3               
002D9A  3  60           	rts
002D9B  3               
002D9B  3               ;-----------------------------------------------------------------
002D9B  3               
002D9B  3               ddline:
002D9B  3  BC BF 2D     	ldy sprline,x		; point to screenleft
002D9E  3               ddline1:
002D9E  3  BD 6E 34     	lda objdta,x		; fetch spriteleft byte
002DA1  3  85 61        	sta z80_a		; save spriteright byte
002DA3  3  A5 61        	lda z80_a
002DA5  3  25 6E        	and z80_cp		; mask left
002DA7  3  51 72        	eor (z80_hlp),y		; merge with screenleft
002DA9  3  91 72        	sta (z80_hlp),y		; write screenleft
002DAB  3               dsline:
002DAB  3  E8           	inx			; next spritebyte
002DAC  3  C8           	iny			; point to screenmiddle
002DAD  3               ddline2:
002DAD  3  BD 6E 34     	lda objdta,x		; fetch spritemiddle byte
002DB0  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
002DB2  3  91 72        	sta (z80_hlp),y		; write screenmiddle
002DB4  3               dsline2:
002DB4  3  C8           	iny			; point to screenright
002DB5  3  A5 61        	lda z80_a		; fetch spriteright byte
002DB7  3  25 6F        	and z80_bp		; mask right
002DB9  3  51 72        	eor (z80_hlp),y		; merge with screenright
002DBB  3  91 72        	sta (z80_hlp),y		; write screenright
002DBD  3               dsline3:
002DBD  3  E8           	inx			; next spritebyte
002DBE  3               
002DBE  3  60           	rts
002DBF  3               
002DBF  3               sprline:
002DBF  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002DC3  3  40 41 60 61  
002DC7  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002DCB  3  C0 C1 E0 E1  
002DCF  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002DD3  3  40 41 60 61  
002DD7  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002DDB  3  C0 C1 E0 E1  
002DDF  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002DE3  3  40 41 60 61  
002DE7  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002DEB  3  C0 C1 E0 E1  
002DEF  3               .if bflag
002DEF  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002DEF  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002DEF  3               .endif
002DEF  3               
002DEF  3               ;----------------------------------------------------------------------
002DEF  3               ; Line drawn, now work out next target address.
002DEF  3               ;----------------------------------------------------------------------
002DEF  3               
002DEF  3               nline:
002DEF  3  18           	clc
002DF0  3  A5 rr        	lda scraddr 		; get low byte of address.
002DF2  3  69 20        	adc #$20
002DF4  3  85 rr        	sta scraddr 		; new low byte of address.
002DF6  3  90 02        	bcc :+
002DF8  3  E6 rr        	inc scraddr+1 		; new high byte of address.
002DFA  3               :
002DFA  3  60           	rts
002DFB  3               
002DFB  3               ;-------------------------------------------------------------
002DFB  3               ; Line drawn, now work out next target address.
002DFB  3               ;
002DFB  3               ; Input:
002DFB  3               ;  BP  = right mask
002DFB  3               ;  CP  = left mask
002DFB  3               ;  DEP = spriteaddress
002DFB  3               ;  z80_hlp = screen address
002DFB  3               ;-------------------------------------------------------------
002DFB  3               
002DFB  3               
002DFB  3               ;-----------------------------------------------------------
002DFB  3               ; Animates a sprite.
002DFB  3               ;
002DFB  3               ; Input:
002DFB  3               ;  IX = sprite address
002DFB  3               ;  HL = last sprite address
002DFB  3               ;-----------------------------------------------------------
002DFB  3               
002DFB  3               animsp:
002DFB  3  25 rr        	and frmno
002DFD  3  F0 01        	beq :+
002DFF  3  60           	rts
002E00  3               :
002E00  3  A0 06        	ldy #6
002E02  3  B1 68        	lda (z80_ix),y		; sprite image
002E04  3  20 5F 30     	jsr gfrm		; get frame data.
002E07  3               
002E07  3  E6 66        	inc z80_l		; point to frames.
002E09  3  D0 02        	bne :+
002E0B  3  E6 67        	inc z80_h
002E0D  3               :
002E0D  3  A0 07        	ldy #7
002E0F  3  B1 68        	lda (z80_ix),y		; sprite frame.
002E11  3  18           	clc
002E12  3  69 01        	adc #1			; next one along.
002E14  3  A0 00        	ldy #0
002E16  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
002E18  3  90 02        	bcc anims0		; no, not yet.
002E1A  3  A9 00        	lda #0			; start at first frame.
002E1C  3               anims0:
002E1C  3  A0 07        	ldy #7
002E1E  3  91 68        	sta (z80_ix),y		; new frame.
002E20  3  60           	rts
002E21  3               
002E21  3               ;--------------------------------------------------------------
002E21  3               ; Animate back
002E21  3               ;
002E21  3               ; Input:
002E21  3               ;  IX = sprite address
002E21  3               ;  HL = last sprite address
002E21  3               ;--------------------------------------------------------------
002E21  3               
002E21  3               animbk:
002E21  3  25 rr        	and frmno
002E23  3  F0 01        	beq :+
002E25  3  60           	rts
002E26  3               :
002E26  3  A0 06        	ldy #6
002E28  3  B1 68        	lda (z80_ix),y		; sprite image.
002E2A  3  20 5F 30     	jsr gfrm		; get frame data.
002E2D  3               
002E2D  3  E6 66        	inc z80_l 		; point to frames.
002E2F  3  D0 02        	bne :+
002E31  3  E6 67        	inc z80_h
002E33  3               :
002E33  3  A0 07        	ldy #7
002E35  3  B1 68        	lda (z80_ix),y 		; sprite frame.
002E37  3  F0 03        	beq :+
002E39  3  4C 40 2E     	jmp rtanb0 		; yes, start at end.
002E3C  3               :
002E3C  3  A0 00        	ldy #0
002E3E  3  B1 66        	lda (z80_hl),y 		; last sprite.
002E40  3               rtanb0:
002E40  3  38           	sec
002E41  3  E9 01        	sbc #1			; next one along.
002E43  3  4C 1C 2E     	jmp anims0		; set new frame.
002E46  3               
002E46  3               ;--------------------------------------------------------------
002E46  3               ; Check for collision with other sprite, strict enforcement.
002E46  3               ;
002E46  3               ; Input:
002E46  3               ;  b		= sprite to test for
002E46  3               ;  ix		= current sprite pointer
002E46  3               ;
002E46  3               ; global:	b
002E46  3               ; local:	x,y,hl,de,skptr
002E46  3               ; calls:	-
002E46  3               ;--------------------------------------------------------------
002E46  3               
002E46  3               sktyp:
002E46  3  A9 3D        	lda #<sprtab				; sprite table.
002E48  3  85 66        	sta z80_l
002E4A  3  A9 32        	lda #>sprtab
002E4C  3  85 67        	sta z80_h
002E4E  3               numsp2:
002E4E  3  A9 0C        	lda #NUMSPR				; number of sprites.
002E50  3  85 rr        	sta sktptr
002E52  3               sktyp0:
002E52  3  A5 66        	lda z80_l 				; store pointer to sprite.
002E54  3  85 rr        	sta skptr
002E56  3  A5 67        	lda z80_h
002E58  3  85 rr        	sta skptr+1
002E5A  3               
002E5A  3  A0 00        	ldy #0
002E5C  3  B1 66        	lda (z80_hl),y 				; get sprite type.
002E5E  3  C5 63        	cmp z80_b				; is it the type we seek?
002E60  3  F0 1D        	beq coltyp				; yes, we can use this one.
002E62  3               sktyp1:
002E62  3  18           	clc
002E63  3  A5 rr        	lda skptr				; retrieve sprite pointer.
002E65  3  69 11        	adc #TABSIZ				; size of each entry.
002E67  3  85 66        	sta z80_l
002E69  3  A5 rr        	lda skptr+1
002E6B  3  69 00        	adc #0
002E6D  3  85 67        	sta z80_h
002E6F  3  C6 rr        	dec sktptr					; one less iteration.
002E71  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
002E73  3  A9 00        	lda #0					; default to ROM address - no sprite.
002E75  3  85 66        	sta z80_l
002E77  3  85 67        	sta z80_h
002E79  3  85 rr        	sta skptr				; store pointer to sprite.
002E7B  3  85 rr        	sta skptr+1
002E7D  3               
002E7D  3  18           	clc					; don't return with zero flag set.
002E7E  3  60           	rts 					; didn't find one.
002E7F  3               
002E7F  3               ;skptr:	.word 0					; search pointer.
002E7F  3               ;sktptr:	.byte 0
002E7F  3               
002E7F  3               coltyp:
002E7F  3  A0 00        	ldy #0
002E81  3  B1 68        	lda (z80_ix),y				; current sprite type.
002E83  3  C5 63        	cmp z80_b				; seeking sprite of same type?
002E85  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
002E87  3               colty0:
002E87  3  A0 09        	ldy #9					; distance to x position in table.
002E89  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
002E8B  3  85 64        	sta z80_e
002E8D  3  88           	dey
002E8E  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
002E90  3  85 65        	sta z80_d
002E92  3               
002E92  3               ; Drop into collision detection.
002E92  3               
002E92  3               colc16:
002E92  3  A0 09        	ldy #9
002E94  3  B1 68        	lda (z80_ix),y			 	; x coord.
002E96  3  38           	sec					; subtract x.
002E97  3  E5 64        	sbc z80_e
002E99  3  B0 05        	bcs  colc1a 				; result is positive.
002E9B  3  49 FF        	eor #$ff				; make negative positive.
002E9D  3  18           	clc
002E9E  3  69 01        	adc #1
002EA0  3               colc1a:
002EA0  3  C9 10        	cmp #16 				; within x range?
002EA2  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
002EA4  3  85 62        	sta z80_c				; store difference.
002EA6  3               
002EA6  3  A0 08        	ldy #8
002EA8  3  B1 68        	lda (z80_ix),y				; y coord.
002EAA  3  38           	sec
002EAB  3  E5 65        	sbc z80_d				; subtract y.
002EAD  3  B0 05        	bcs colc1b				; result is positive.
002EAF  3  49 FF        	eor #$ff				; make negative positive.
002EB1  3  18           	clc
002EB2  3  69 01        	adc #1
002EB4  3               colc1b:
002EB4  3  C9 10        	cmp #16					; within y range?
002EB6  3  B0 AA        	bcs sktyp1 				; no - they've missed.
002EB8  3  18           	clc					; add x difference.
002EB9  3  65 62        	adc z80_c
002EBB  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
002EBD  3  B0 02        	bcs :+
002EBF  3  38           	sec
002EC0  3  60           	rts 					; carry set if there's a collision.
002EC1  3               :
002EC1  3  4C 62 2E     	jmp sktyp1				; try next sprite in table.
002EC4  3               colty1:
002EC4  3  A5 68        	lda z80_x  				; compare the two.
002EC6  3  C5 66        	cmp z80_l
002EC8  3  D0 09        	bne end_col
002ECA  3  A5 69        	lda z80_i
002ECC  3  C5 67        	cmp z80_h
002ECE  3  D0 03        	bne end_col
002ED0  3  4C 62 2E     	jmp sktyp1 				; addresses are identical.
002ED3  3               end_col:
002ED3  3  4C 87 2E     	jmp colty0
002ED6  3               
002ED6  3               ;-----------------------------------------------------------
002ED6  3               ; Display number, left aligned
002ED6  3               ;
002ED6  3               ; Input:
002ED6  3               ;  a		= number
002ED6  3               ;
002ED6  3               ; global:	-
002ED6  3               ; local:	a,y,bc,hl,displ0
002ED6  3               ; calls:	num2ch,dmsg3
002ED6  3               ;-----------------------------------------------------------
002ED6  3               
002ED6  3               disply:
002ED6  3  85 61        	sta z80_a
002ED8  3  A9 FE        	lda #<displ0				; display workspace.
002EDA  3  85 62        	sta z80_c
002EDC  3  A9 2E        	lda #>displ0
002EDE  3  85 63        	sta z80_b
002EE0  3  A5 61        	lda z80_a
002EE2  3  20 3B 22     	jsr num2ch				; convert accumulator to string.
002EE5  3               displ1:
002EE5  3  C6 62        	dec z80_c				; back one character.
002EE7  3  D0 02        	bne :+
002EE9  3  C6 63        	dec z80_b
002EEB  3               :
002EEB  3  A0 00        	ldy #0
002EED  3  B1 62        	lda (z80_bc),y				; fetch digit.
002EEF  3  09 80        	ora #128				; insert end marker.
002EF1  3  91 62        	sta (z80_bc),y				; new value.
002EF3  3               
002EF3  3  A9 FE        	lda #<displ0				; display space.
002EF5  3  85 66        	sta z80_l
002EF7  3  A9 2E        	lda #>displ0
002EF9  3  85 67        	sta z80_h
002EFB  3  4C AC 29     	jmp dmsg3				; display the string.
002EFE  3               
002EFE  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
002F02  3               
002F02  3               ;----------------------------------------------------------------
002F02  3               ; Initialise screen.
002F02  3               ;
002F02  3               ; global:	roomtb,scno
002F02  3               ; local:	-
002F02  3               ; calls:	tstcs
002F02  3               ;----------------------------------------------------------------
002F02  3               
002F02  3               initsc:
002F02  3  AD 1A 33     	lda roomtb 			; whereabouts in the map are we?
002F05  3  20 0F 2F     	jsr tstsc 			; find displacement.
002F08  3  C9 FF        	cmp #255 			; is it valid?
002F0A  3  F0 02        	beq init_end 			; no, it's rubbish.
002F0C  3  85 rr        	sta scno			; store new room number.
002F0E  3               init_end:
002F0E  3  60           	rts
002F0F  3               
002F0F  3               ;----------------------------------------------------------------
002F0F  3               ; Test screen.
002F0F  3               ;
002F0F  3               ; global:	-
002F0F  3               ; local:	x
002F0F  3               ; calls:	-
002F0F  3               ;----------------------------------------------------------------
002F0F  3               
002F0F  3               tstsc:
002F0F  3  85 rr        	sta tmproom
002F11  3  18           	clc
002F12  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
002F14  3  AA           	tax 				; add displacement to map data.
002F15  3  BD 1D 33     	lda mapdat-MAPWID,x 		; find room number there.
002F18  3  60           	rts
002F19  3               
002F19  3               ;tmproom:	.byte 0
002F19  3               
002F19  3               ;--------------------------
002F19  3               ; Screen left.
002F19  3               ;--------------------------
002F19  3               
002F19  3               scrl:
002F19  3  AD 1A 33     	lda roomtb 			; present room table pointer.
002F1C  3  38           	sec
002F1D  3  E9 01        	sbc #1				; room left.
002F1F  3               scrl0:
002F1F  3  20 0F 2F     	jsr tstsc			; test screen.
002F22  3  C9 FF        	cmp #255			; is there a screen this way?
002F24  3  D0 01        	bne :+
002F26  3  60           	rts				; no, return to loop.
002F27  3               :
002F27  3  A5 rr        	lda tmproom			; restore room displacement.
002F29  3  8D 1A 33     	sta roomtb			; new room table position.
002F2C  3               scrl1:
002F2C  3  20 02 2F     	jsr initsc 			; set new screen.
002F2F  3  A9 02        	lda #2
002F31  3  85 rr        	sta restfl 			; set it.
002F33  3  60           	rts
002F34  3               scrr:
002F34  3  AD 1A 33     	lda roomtb 			; room table pointer.
002F37  3  18           	clc
002F38  3  69 01        	adc #1				; room right.
002F3A  3  4C 1F 2F     	jmp scrl0
002F3D  3               scru:
002F3D  3  AD 1A 33     	lda roomtb 			; room table pointer.
002F40  3  38           	sec
002F41  3  E9 03        	sbc #MAPWID 			; room up.
002F43  3  4C 1F 2F     	jmp scrl0
002F46  3               scrd:
002F46  3  AD 1A 33     	lda roomtb 			; room table pointer.
002F49  3  18           	clc
002F4A  3  69 03        	adc #MAPWID 			; room down.
002F4C  3  4C 1F 2F     	jmp scrl0
002F4F  3               
002F4F  3               ;-----------------------------------------
002F4F  3               ; Jump to new screen.
002F4F  3               ;-----------------------------------------
002F4F  3               
002F4F  3               nwscr:
002F4F  3  A2 00        	ldx #0				; start of map data.
002F51  3               nwscr0:
002F51  3  DD 20 33     	cmp mapdat,x
002F54  3  F0 06        	beq nwscr1			; have we found a match for screen?
002F56  3  E8           	inx 				; next room.
002F57  3  E0 50        	cpx #80				; zero room count, 80 to search.
002F59  3  D0 F6        	bne nwscr0			; keep looking.
002F5B  3  60           	rts
002F5C  3               nwscr1:
002F5C  3  8E 1A 33     	stx roomtb			; set the map position.
002F5F  3  4C 2C 2F     	jmp scrl1			; draw new room.
002F62  3               
002F62  3               
002F62  3               ;----------------------------------------------------------
002F62  3               ; Gravity processing.
002F62  3               ;----------------------------------------------------------
002F62  3               
002F62  3               grav:
002F62  3  A0 0D        	ldy #13
002F64  3  B1 68        	lda (z80_ix),y			; jump pointer low.
002F66  3  85 66        	sta z80_l
002F68  3  A0 0E        	ldy #14
002F6A  3  B1 68        	lda (z80_ix),y			; jump pointer high.
002F6C  3  85 67        	sta z80_h
002F6E  3  05 66        	ora z80_l			; merge in low byte.
002F70  3  D0 01        	bne :+
002F72  3  60           	rts				; if neither is set, we're not in the air.
002F73  3               :
002F73  3  A0 00        	ldy #0
002F75  3  B1 66        	lda (z80_hl),y			; pixels to move.
002F77  3  85 61        	sta z80_a
002F79  3  C9 63        	cmp #99				; reached the end?
002F7B  3  D0 0C        	bne grav0			; no, continue.
002F7D  3               grav2:
002F7D  3  C6 66        	dec z80_l			; go back to previous value.
002F7F  3  C9 FF        	cmp #$ff
002F81  3  D0 02        	bne :+
002F83  3  C6 67        	dec z80_h
002F85  3               :
002F85  3  B1 66        	lda (z80_hl),y			; fetch that from table.
002F87  3  85 61        	sta z80_a
002F89  3               grav0:
002F89  3  E6 66        	inc z80_l			; point to next table entry.
002F8B  3  D0 02        	bne :+
002F8D  3  E6 67        	inc z80_h
002F8F  3               :
002F8F  3  A5 66        	lda z80_l
002F91  3  A0 0D        	ldy #13
002F93  3  91 68        	sta (z80_ix),y			; store new pointer low.
002F95  3  A5 67        	lda z80_h
002F97  3  A0 0E        	ldy #14
002F99  3  91 68        	sta (z80_ix),y			; store new pointer high.
002F9B  3               grav1:
002F9B  3  A5 61        	lda z80_a
002F9D  3  D0 01        	bne :+				; any movement required?
002F9F  3  60           	rts				; no, not this time.
002FA0  3               :
002FA0  3  A5 61        	lda z80_a
002FA2  3  C9 80        	cmp #128			; is it up or down?
002FA4  3  B0 15        	bcs gravu			; it's up.
002FA6  3               gravd:
002FA6  3  85 63        	sta z80_b			; set pixels to move.
002FA8  3               gravd0:
002FA8  3  20 8B 26     	jsr cangd			; can we go down?
002FAB  3  D0 28        	bne gravst			; can't move down, so stop.
002FAD  3  A0 08        	ldy #8
002FAF  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
002FB1  3  18           	clc
002FB2  3  69 01        	adc #1
002FB4  3  91 68        	sta (z80_ix),y
002FB6  3  C6 63        	dec z80_b
002FB8  3  D0 EE        	bne gravd0
002FBA  3  60           	rts
002FBB  3               gravu:
002FBB  3  49 FF        	eor #$ff			; flip the sign so it's positive.
002FBD  3  18           	clc
002FBE  3  69 01        	adc #1
002FC0  3  85 63        	sta z80_b			; set pixels to move.
002FC2  3               gravu0:
002FC2  3  20 56 26     	jsr cangu			; can we go up?
002FC5  3  D0 6E        	bne ifalls			; can't move up, go down next.
002FC7  3  A0 08        	ldy #8
002FC9  3  B1 68        	lda (z80_ix),y
002FCB  3  38           	sec
002FCC  3  E9 01        	sbc #1
002FCE  3  91 68        	sta (z80_ix),y			; adjust new x coord.
002FD0  3  C6 63        	dec z80_b
002FD2  3  D0 EE        	bne gravu0
002FD4  3  60           	rts
002FD5  3               gravst:
002FD5  3  A0 0D        	ldy #13
002FD7  3  B1 68        	lda (z80_ix),y			; jump pointer low.
002FD9  3  85 66        	sta z80_l
002FDB  3  A0 0E        	ldy #14
002FDD  3  B1 68        	lda (z80_ix),y			; jump pointer high.
002FDF  3  85 67        	sta z80_h
002FE1  3               
002FE1  3  A9 00        	lda #0				; null value in pointer.
002FE3  3  A0 0D        	ldy #13
002FE5  3  91 68        	sta (z80_ix),y			; store new pointer low.
002FE7  3  C8           	iny
002FE8  3  91 68        	sta (z80_ix),y			; store new pointer high.
002FEA  3               
002FEA  3  A0 00        	ldy #0
002FEC  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
002FEE  3  C9 63        	cmp #99				; is it the end marker?
002FF0  3               evftf:
002FF0  3  F0 01        	beq :+				; yes, fallen too far.
002FF2  3  60           	rts
002FF3  3               :
002FF3  3  4C A8 33     	jmp evnt15			; EVENT FELLTOOFAR
002FF6  3               
002FF6  3               ;------------------------------------------------
002FF6  3               ; Initiate fall check.
002FF6  3               ;------------------------------------------------
002FF6  3               
002FF6  3               ifall:
002FF6  3  A0 0D        	ldy #13
002FF8  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
002FFA  3  85 66        	sta z80_l
002FFC  3  A0 0E        	ldy #14
002FFE  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
003000  3  85 67        	sta z80_h			; high byte in accumulator.
003002  3  05 66        	ora z80_l			; merge in low byte.
003004  3  F0 01        	beq :+
003006  3  60           	rts				; if either is set, we're already in the air.
003007  3               :
003007  3  A0 09        	ldy #9
003009  3  B1 68        	lda (z80_ix),y			; y coordinate.
00300B  3  85 rr        	sta dispx
00300D  3  A0 08        	ldy #8
00300F  3  B1 68        	lda (z80_ix),y			; look x coordinate.
003011  3  18           	clc
003012  3               numsp7:
003012  3  69 10        	adc #SPR_HGT			; add 16 pixels.
003014  3  85 rr        	sta dispy			; set up test coordinates.
003016  3  20 00 29     	jsr tstbl			; get map address.
003019  3  20 2D 28     	jsr plchk			; block, platform check.
00301C  3  F0 01        	beq :+
00301E  3  60           	rts				; it's solid, don't fall.
00301F  3               :
00301F  3  E6 rr        	inc bufaddr			; look right one cell.
003021  3  20 2D 28     	jsr plchk			; block, platform check.
003024  3  F0 01        	beq :+
003026  3  60           	rts				; it's solid, don't fall.
003027  3               :
003027  3  A5 rr        	lda dispx			; y coordinate.
003029  3  29 07        	and #7				; position straddling block cells.
00302B  3  F0 08        	beq ifalls			; no more checks needed.
00302D  3  E6 rr        	inc bufaddr			; look to third cell.
00302F  3  20 2D 28     	jsr plchk			; block, platform check.
003032  3  F0 01        	beq :+
003034  3  60           	rts				; it's solid, don't fall.
003035  3               :
003035  3               ifalls:
003035  3  A9 94        	lda #<jtab			; jump table start.
003037  3  85 66        	sta z80_l
003039  3  A9 37        	lda #>jtab
00303B  3  85 67        	sta z80_h
00303D  3               ifal0:
00303D  3  E6 66        	inc z80_l			; point to next value.
00303F  3  D0 02        	bne :+
003041  3  E6 67        	inc z80_h
003043  3               :
003043  3  A0 00        	ldy #0
003045  3  B1 66        	lda (z80_hl),y			; fetch value.
003047  3  F0 F4        	beq ifal0			; no, get next value.
003049  3  C9 63        	cmp #99				; reached end of table?
00304B  3  D0 01        	bne :+
00304D  3  60           	rts				; yes, don't fall.
00304E  3               :
00304E  3  C9 80        	cmp #128			; is it going up?
003050  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
003052  3               
003052  3  A0 0D        	ldy #13
003054  3  A5 66        	lda z80_l
003056  3  91 68        	sta (z80_ix),y 			; set jump low.
003058  3  A0 0E        	ldy #14
00305A  3  A5 67        	lda z80_h
00305C  3  91 68        	sta (z80_ix),y 			; set jump high.
00305E  3  60           	rts
00305F  3               
00305F  3               
00305F  3               ;----------------------------------------------------
00305F  3               ; Get frame data for a particular sprite.
00305F  3               ; Input:
00305F  3               ;  a		= framenumer
00305F  3               ; Output:
00305F  3               ;  hl		= frame address
00305F  3               ;
00305F  3               ; global:	hl,frmptr
00305F  3               ; local:	-
00305F  3               ; calls:	-
00305F  3               ;----------------------------------------------------
00305F  3               
00305F  3               gfrm:
00305F  3  0A           	asl a	 		 	; multiple of 2.
003060  3  18           	clc
003061  3  6D 1A 20     	adc frmptr 			; frames used by game.
003064  3  85 66        	sta z80_l
003066  3  AD 1B 20     	lda frmptr+1
003069  3  69 00        	adc #0
00306B  3  85 67        	sta z80_h 			; point to frame start.
00306D  3  60           	rts
00306E  3               
00306E  3               ;----------------------------------------------------
00306E  3               ; Find sprite list for current room.
00306E  3               ;
00306E  3               ; global:	hl
00306E  3               ; local:	x,y
00306E  3               ; calls:	-
00306E  3               ;----------------------------------------------------
00306E  3               
00306E  3               sprlst:
00306E  3  A9 69        	lda #<nmedat 			; list of enemy sprites.
003070  3  85 66        	sta z80_l
003072  3  A9 34        	lda #>nmedat
003074  3  85 67        	sta z80_h
003076  3  A6 rr        	ldx scno 			; screen number.
003078  3  D0 01        	bne sprls2 			; is it the first screen?
00307A  3  60           	rts 				; yes, don't need to search data.
00307B  3               sprls2:
00307B  3  A0 00        	ldy #0
00307D  3               sprls1:
00307D  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
00307F  3  C9 FF        	cmp #255			; is it an end marker?
003081  3  F0 0E        	beq sprls0 			; yes, end of this room.
003083  3               
003083  3  18           	clc 				; point to next sprite in list.
003084  3  A5 66        	lda z80_l
003086  3  69 04        	adc #NMESIZ
003088  3  85 66        	sta z80_l
00308A  3  90 02        	bcc :+
00308C  3  E6 67        	inc z80_h
00308E  3               :
00308E  3  4C 7D 30     	jmp sprls1 			; continue until end of room.
003091  3               sprls0:
003091  3  E6 66        	inc z80_l 			; point to start of next screen.s
003093  3  D0 02        	bne :+
003095  3  E6 67        	inc z80_h
003097  3               :
003097  3  CA           	dex
003098  3  D0 E3        	bne sprls1 			; continue until room found.
00309A  3  60           	rts
00309B  3               
00309B  3               
00309B  3               ;----------------------------------------------------
00309B  3               ; Clear all but a single player sprite.
00309B  3               ;
00309B  3               ; global:	-
00309B  3               ; local:	x,y,ix
00309B  3               ; calls:	-
00309B  3               ;----------------------------------------------------
00309B  3               
00309B  3               nspr:
00309B  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00309D  3  85 rr        	sta sprcnt
00309F  3  A9 3D        	lda #<sprtab 			; sprite table.
0030A1  3  85 68        	sta z80_x
0030A3  3  A9 32        	lda #>sprtab
0030A5  3  85 69        	sta z80_i
0030A7  3               nspr0:
0030A7  3  A0 00        	ldy #0 				; fetch sprite type.
0030A9  3  B1 68        	lda (z80_ix),y 			; is it a player?
0030AB  3  F0 1A        	beq nspr1 			; yes, keep this one.
0030AD  3               
0030AD  3  A9 FF        	lda #255
0030AF  3  A0 00        	ldy #0 				; fetch sprite type.
0030B1  3  91 68        	sta (z80_ix),y 			; delete sprite.
0030B3  3  A0 05        	ldy #5
0030B5  3  91 68        	sta (z80_ix),y 			; remove next type.
0030B7  3               
0030B7  3  18           	clc	 			; next sprite.
0030B8  3  A5 68        	lda z80_x
0030BA  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0030BC  3  85 68        	sta z80_x
0030BE  3  90 02        	bcc :+
0030C0  3  E6 69        	inc z80_i
0030C2  3               :
0030C2  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0030C4  3  D0 E1        	bne nspr0
0030C6  3  60           	rts
0030C7  3               nspr1:
0030C7  3  A9 FF        	lda #255
0030C9  3  A0 00        	ldy #0
0030CB  3  91 68        	sta (z80_ix),y 			; delete sprite.
0030CD  3               
0030CD  3  18           	clc	 			; point to next sprite.
0030CE  3  A5 68        	lda z80_x
0030D0  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0030D2  3  85 68        	sta z80_x
0030D4  3  90 02        	bcc :+
0030D6  3  E6 69        	inc z80_i
0030D8  3               :
0030D8  3  C6 rr        	dec sprcnt	 			; one less to do.
0030DA  3  D0 01        	bne nspr2
0030DC  3  60           	rts
0030DD  3               nspr2:
0030DD  3  A9 FF        	lda #255
0030DF  3  A0 00        	ldy #0
0030E1  3  91 68        	sta (z80_ix),y 			; delete sprite.
0030E3  3  A0 05        	ldy #5
0030E5  3  91 68        	sta (z80_ix),y 			; remove next type.
0030E7  3               
0030E7  3  18           	clc	 			; next sprite.
0030E8  3  A5 68        	lda z80_x
0030EA  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0030EC  3  85 68        	sta z80_x
0030EE  3  90 02        	bcc :+
0030F0  3  E6 69        	inc z80_i
0030F2  3               :
0030F2  3  C6 rr        	dec sprcnt	 			; one less space in table.
0030F4  3  D0 E7        	bne nspr2
0030F6  3  60           	rts
0030F7  3               
0030F7  3               ;----------------------------------------------------------
0030F7  3               ; Two initialisation routines.
0030F7  3               ; Initialise sprites - copy everything from list to table.
0030F7  3               ;
0030F7  3               ; global:	-
0030F7  3               ; local:	x,y,ix
0030F7  3               ; calls:	cpsp
0030F7  3               ;----------------------------------------------------------
0030F7  3               
0030F7  3               ispr:
0030F7  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0030F9  3  85 rr        	sta sprcnt
0030FB  3  A9 3D        	lda #<sprtab			; sprite table.
0030FD  3  85 68        	sta z80_x
0030FF  3  A9 32        	lda #>sprtab
003101  3  85 69        	sta z80_i
003103  3               ispr2:
003103  3  A0 00        	ldy #0
003105  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003107  3  C9 FF        	cmp #255 			; is it an end marker?
003109  3  D0 01        	bne :+
00310B  3  60           	rts 				; yes, no more to do.
00310C  3               :
00310C  3               ispr1:
00310C  3  A0 00        	ldy #0
00310E  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
003110  3  C9 FF        	cmp #255 			; is it enabled yet?
003112  3  D0 08        	bne ispr4			; yes, try another slot.
003114  3               
003114  3  A0 05        	ldy #5
003116  3  B1 68        	lda (z80_ix),y		 	; next type.
003118  3  C9 FF        	cmp #255 			; is it enabled yet?
00311A  3  F0 10        	beq ispr3 			; no, process this one.
00311C  3               ispr4:
00311C  3  18           	clc 				; next sprite.
00311D  3  A5 68        	lda z80_x
00311F  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003121  3  85 68        	sta z80_x
003123  3  90 02        	bcc :+
003125  3  E6 69        	inc z80_i
003127  3               :
003127  3  C6 rr        	dec sprcnt
003129  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
00312B  3  60           	rts  				; no more room in table.
00312C  3               ispr3:
00312C  3  20 7F 31     	jsr cpsp			; initialise a sprite.
00312F  3  C6 rr        	dec sprcnt			; one less space in the table.
003131  3  D0 D0        	bne ispr2
003133  3  60           	rts
003134  3               
003134  3               
003134  3               ;-----------------------------------------------------------------------
003134  3               ; Initialise sprites - but not player, we're keeping the old one.
003134  3               ;
003134  3               ; global:	-
003134  3               ; local:	x,y,ix
003134  3               ; calls:	cpsp
003134  3               ;-----------------------------------------------------------------------
003134  3               
003134  3               kspr:
003134  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
003136  3  A9 3D        	lda #<sprtab 			; sprite table.
003138  3  85 68        	sta z80_x
00313A  3  A9 32        	lda #>sprtab
00313C  3  85 69        	sta z80_i
00313E  3               kspr2:
00313E  3  A0 00        	ldy #0
003140  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003142  3  C9 FF        	cmp #255 			; is it an end marker?
003144  3  D0 01        	bne :+
003146  3  60           	rts 				; yes, no more to do.
003147  3               :
003147  3  C9 00        	cmp #0
003149  3  D0 0E        	bne kspr1 			; no, add to table as normal.
00314B  3               
00314B  3  18           	clc 				; next sprite.
00314C  3  A5 66        	lda z80_l
00314E  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
003150  3  85 66        	sta z80_l
003152  3  90 02        	bcc :+
003154  3  E6 67        	inc z80_h
003156  3               :
003156  3  4C 3E 31     	jmp kspr2
003159  3               kspr1:
003159  3  A0 00        	ldy #0 				; fetch sprite type.
00315B  3  B1 68        	lda (z80_ix),y
00315D  3  C9 FF        	cmp #255 			; is it enabled yet?
00315F  3  D0 08        	bne kspr4 			; yes, try another slot.
003161  3               
003161  3  A0 05        	ldy #5 				; next type.
003163  3  B1 68        	lda (z80_ix),y
003165  3  C9 FF        	cmp #255 			; is it enabled yet?
003167  3  F0 0F        	beq kspr3 			; no, process this one.
003169  3               kspr4:
003169  3  18           	clc 				; next sprite.
00316A  3  A5 68        	lda z80_x
00316C  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00316E  3  85 68        	sta z80_x
003170  3  90 02        	bcc :+
003172  3  E6 69        	inc z80_i
003174  3               :
003174  3  CA           	dex	 			; repeat for remaining sprites.
003175  3  D0 E2        	bne kspr1
003177  3  60           	rts  				; no more room in table.
003178  3               kspr3:
003178  3  20 7F 31     	jsr cpsp 			; copy sprite to table.
00317B  3  CA           	dex	 			; one less space in the table.
00317C  3  D0 C0        	bne kspr2
00317E  3  60           	rts
00317F  3               
00317F  3               ;----------------------------------------------
00317F  3               ; Copy sprite from list to table.
00317F  3               ;
00317F  3               ; global:	hl,ix
00317F  3               ; local:	y
00317F  3               ; calls:	evnt09
00317F  3               ;----------------------------------------------
00317F  3               
00317F  3               cpsp:
00317F  3  A0 00        	ldy #0				; fetch byte from table.
003181  3  B1 66        	lda (z80_hl),y
003183  3  91 68        	sta (z80_ix),y			; set up type.
003185  3  A0 05        	ldy #PAM1ST
003187  3  91 68        	sta (z80_ix),y 			; set up type.
003189  3               
003189  3  E6 66        	inc z80_l 			; move to next byte.
00318B  3  D0 02        	bne :+
00318D  3  E6 67        	inc z80_h
00318F  3               :
00318F  3  A0 00        	ldy #0 				; fetch byte from table.
003191  3  B1 66        	lda (z80_hl),y
003193  3  A0 06        	ldy #6
003195  3  91 68        	sta (z80_ix),y			; set up image.
003197  3               
003197  3  E6 66        	inc z80_l 			; move to next byte.
003199  3  D0 02        	bne :+
00319B  3  E6 67        	inc z80_h
00319D  3               :
00319D  3  A0 00        	ldy #0
00319F  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0031A1  3  A0 08        	ldy #8
0031A3  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0031A5  3               
0031A5  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0031A7  3  A0 03        	ldy #3
0031A9  3  91 68        	sta (z80_ix),y
0031AB  3               
0031AB  3  E6 66        	inc z80_l 			; move to next byte.
0031AD  3  D0 02        	bne :+
0031AF  3  E6 67        	inc z80_h
0031B1  3               :
0031B1  3  A0 00        	ldy #0 				; fetch byte from table.
0031B3  3  B1 66        	lda (z80_hl),y
0031B5  3  A0 09        	ldy #9
0031B7  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0031B9  3               
0031B9  3  E6 66        	inc z80_l 			; move to next byte.
0031BB  3  D0 02        	bne :+
0031BD  3  E6 67        	inc z80_h
0031BF  3               :
0031BF  3  A9 00        	lda #0				; zeroes in accumulator.
0031C1  3  A0 07        	ldy #7 				; reset frame number.
0031C3  3  91 68        	sta (z80_ix),y
0031C5  3  A0 0A        	ldy #10 			; reset direction.
0031C7  3  91 68        	sta (z80_ix),y
0031C9  3  A0 0D        	ldy #13				; reset jump pointer low.
0031CB  3  91 68        	sta (z80_ix),y
0031CD  3  A0 0E        	ldy #14	 			; reset jump pointer high.
0031CF  3  91 68        	sta (z80_ix),y
0031D1  3               
0031D1  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
0031D3  3  A0 10        	ldy #16
0031D5  3  91 68        	sta (z80_ix),y
0031D7  3               evis0:
0031D7  3  A5 69        	lda z80_i
0031D9  3  48           	pha
0031DA  3  A5 68        	lda z80_x
0031DC  3  48           	pha
0031DD  3  A5 67        	lda z80_h
0031DF  3  48           	pha
0031E0  3  A5 66        	lda z80_l
0031E2  3  48           	pha
0031E3  3               
0031E3  3  20 30 33     	jsr evnt09 			; perform event.
0031E6  3               
0031E6  3  68           	pla
0031E7  3  85 66        	sta z80_l
0031E9  3  68           	pla
0031EA  3  85 67        	sta z80_h
0031EC  3  68           	pla
0031ED  3  85 68        	sta z80_x
0031EF  3  68           	pla
0031F0  3  85 69        	sta z80_i
0031F2  3               
0031F2  3  18           	clc
0031F3  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0031F5  3  69 11        	adc #TABSIZ		 	; next sprite.
0031F7  3  85 68        	sta z80_x
0031F9  3  90 02        	bcc :+
0031FB  3  E6 69        	inc z80_i
0031FD  3               :
0031FD  3  60           	rts
0031FE  3               
0031FE  3               
0031FE  3               ;-------------------------------------
0031FE  3               ; Clear the play area window.
0031FE  3               ;-------------------------------------
0031FE  3               
0031FE  3               clw:
0031FE  3  AD 26 20     	lda wintop			; get coordinates of window.
003201  3  85 rr        	sta dispy			; put into dispx for calculation.
003203  3  AD 27 20     	lda winlft
003206  3  85 rr        	sta dispx
003208  3               
003208  3  AD 28 20     	lda winhgt			; height of window.
00320B  3  85 rr        	sta rrow			; copy to b register.
00320D  3               clw3:
00320D  3  AD 29 20     	lda winwid 			; width of window.
003210  3  85 rr        	sta rcol
003212  3               clw2:
003212  3  20 D2 24     	jsr gprad 			; get print address.
003215  3  A9 00        	lda #0				; zero byte to write.
003217  3  A2 07        	ldx #7				; pixel height of each cell.
003219  3               clw1:
003219  3  BC 58 25     	ldy scrtab,x
00321C  3  91 rr        	sta (scraddr),y 			; copy to screen.
00321E  3  CA           	dex				; next screen row down.
00321F  3  10 F8        	bpl clw1
003221  3               
003221  3  E6 rr        	inc dispx			; next column.
003223  3  C6 rr        	dec rcol			; one less to do.
003225  3  D0 EB        	bne clw2			; repeat for remaining columns.
003227  3               
003227  3  AD 27 20     	lda winlft			; get left edge.
00322A  3  85 rr        	sta dispx 			; reset x.
00322C  3  E6 rr        	inc dispy 			; next line down.
00322E  3               
00322E  3  C6 rr        	dec rrow
003230  3  D0 DB        	bne clw3			; repeat down the screen.
003232  3               
003232  3  AD 26 20     	lda wintop			; get coordinates of window.
003235  3  85 rr        	sta chary			; put into display position.
003237  3  AD 27 20     	lda winlft
00323A  3  85 rr        	sta charx
00323C  3  60           	rts
00323D  3               
00323D  3               
00323D  3               ;----------------------------------------------------------
00323D  3               ; Effects code.
00323D  3               ; Ticker routine is called 25 times per second.
00323D  3               ;
00323D  3               ; HL = txtscr = left text screen address
00323D  3               ; DE = txtscr+txtwid-1 = right text screen address
00323D  3               ; BC = txtpos = text scroller position
00323D  3               ;
00323D  3               ;----------------------------------------------------------
00323D  3               
00323D  3               .if sflag
00323D  3               scrly:
00323D  3               	rts
00323D  3               	.word txtscr         	; get left screen address.
00323D  3               	sta scr_l
00323D  3               	lda txtscr+1
00323D  3               	sta scr_l+1
00323D  3               	sta scr_r+1
00323D  3               
00323D  3               	stx xtmp
00323D  3               
00323D  3               	clc         		; get right screen address.
00323D  3               	lda scr_l
00323D  3               	adc txtwid
00323D  3               	sta scr_r
00323D  3               	dec scr_r
00323D  3               scrly1:
00323D  3               	ldy txtwid		; set txtwide
00323D  3               	dey
00323D  3               	clc
00323D  3               scrly0:
00323D  3               	lda (scr_l),y		; scroll 1 line
00323D  3               	rol a
00323D  3               	sta (scr_l),y
00323D  3               	dey
00323D  3               	bpl scrly0
00323D  3               
00323D  3               	clc			; point to next line
00323D  3               	lda scr_l
00323D  3               	adc #32
00323D  3               	sta scr_l
00323D  3               	bcc scrly1		; repeat 8 times
00323D  3               
00323D  3               	lda txtpos 		; get text pointer.
00323D  3               	sta scr_txt
00323D  3               	lda txtpos+1
00323D  3               	sta scr_txt+1
00323D  3               
00323D  3               	ldy #0
00323D  3               	lda (scr_txt),y 		; find character we're displaying.
00323D  3               	and #127 		; remove end marker bit if applicable.
00323D  3               	cmp #13			; is it newline?
00323D  3               	bne scrly5 		; no, it's okay.
00323D  3               	lda #32			; convert to a space instead.
00323D  3               scrly5:
00323D  3               	sta fntaddr		; calculate char address
00323D  3               	lda #0
00323D  3               	sta fntaddr+1
00323D  3               	asl fntaddr  		; multiply char by 8.
00323D  3               	rol fntaddr+1
00323D  3               	asl fntaddr
00323D  3               	rol fntaddr+1
00323D  3               	asl fntaddr
00323D  3               	rol fntaddr+1
00323D  3               	lda fntaddr
00323D  3               	clc
00323D  3               	adc #<(FONT-256)
00323D  3               	sta scrly3+1		; that's the low byte.
00323D  3               	lda fntaddr+1
00323D  3               	adc #>(FONT-256)
00323D  3               	sta scrly3+2		; add displacement.
00323D  3               
00323D  3               	ldx #0
00323D  3               scrly3:
00323D  3               	lda $3333,x		; get image of char line.
00323D  3               	and txtbit
00323D  3               	beq scrly2		; don't plot pixel
00323D  3               	ldy scrline,x
00323D  3               	lda (scr_r),y
00323D  3               	clc
00323D  3               	ora #1
00323D  3               	sta (scr_r),y		; plot pixel
00323D  3               scrly2:
00323D  3               	inx			; next line of char.
00323D  3               	cpx #8
00323D  3               	bne scrly3
00323D  3               
00323D  3               	lsr txtbit		; bit of text to display.
00323D  3               	bcs :+
00323D  3               	rts
00323D  3               :
00323D  3               	ldy #0
00323D  3               	lda (scr_txt),y 	; what was the character?
00323D  3               	asl a	  		; end of message?
00323D  3               	bcs scrly4
00323D  3               	inc txtpos
00323D  3               	bne :+
00323D  3               	inc txtpos+1
00323D  3               :
00323D  3               	jmp scrly6 		; not yet - continue.
00323D  3               scrly4:
00323D  3               	lda txtini 		; start of scrolling message.
00323D  3               	sta txtpos
00323D  3               	lda txtini+1
00323D  3               	sta txtpos+1
00323D  3               scrly6:
00323D  3               	lda #128
00323D  3               	sta txtbit
00323D  3               	ldx xtmp
00323D  3               	rts
00323D  3               
00323D  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
00323D  3               
00323D  3               ;-------------------------------------------------------
00323D  3               ; Entry TICKER command
00323D  3               ;
00323D  3               ; Entry:
00323D  3               ;  z80_b = message nr
00323D  3               ;  z80_c = width
00323D  3               ;-------------------------------------------------------
00323D  3               
00323D  3               iscrly:
00323D  3               	jsr prescr 		; set up display position.
00323D  3               
00323D  3               	lda #<msgdat 		; text messages.
00323D  3               	sta z80_l
00323D  3               	lda #>msgdat
00323D  3               	sta z80_h
00323D  3               
00323D  3               	lda z80_c 		; width.
00323D  3               	sec
00323D  3               	sbc #1			; subtract one.
00323D  3               	cmp #32 		; is it between 1 and 32?
00323D  3               	bcc :+
00323D  3               	lda #$60
00323D  3               	jmp iscrl0		; no, disable messages.
00323D  3               :
00323D  3               	ldx z80_b		; message number.
00323D  3               	jsr getwrd 		; find message start.
00323D  3               
00323D  3               	lda z80_l		; set initial text position.
00323D  3               	sta txtini
00323D  3               	lda z80_h
00323D  3               	sta txtini+1
00323D  3               
00323D  3               	lda #$ad		; code for lda adrr
00323D  3               iscrl0:
00323D  3               	sta scrly		; enable/disable scrolling routine.
00323D  3               
00323D  3               	jsr prescr 		; set up display position.
00323D  3               	jsr gprad 		; get print address.
00323D  3               
00323D  3               	lda scraddr 		; set text screen address.
00323D  3               	sta txtscr
00323D  3               	lda scraddr+1
00323D  3               	sta txtscr+1
00323D  3               
00323D  3               	lda z80_c		; width.
00323D  3               	sta txtwid		; set width in working storage.
00323D  3               
00323D  3               	lda #128 		; start with leftmost bit.
00323D  3               	sta txtbit
00323D  3               
00323D  3               	jmp scrly4
00323D  3               .endif
00323D  3               
00323D  3               ;------------------------------------------------------------------
00323D  3               ; Dig routine, conditional assembly depending on dflag
00323D  3               ;------------------------------------------------------------------
00323D  3               .if dflag
00323D  3               dig:
00323D  3               	and #3
00323D  3               	beq digr		; dig right
00323D  3               	cmp #1
00323D  3               	beq digl		; dig left
00323D  3               	cmp #2
00323D  3               	beq digd		; dig down
00323D  3               
00323D  3               ; Dig up.
00323D  3               
00323D  3               digu:				; dig up
00323D  3               	ldy #8
00323D  3               	lda (z80_ix),y
00323D  3               	sec
00323D  3               	sbc #2
00323D  3               	sta dispy		; set y
00323D  3               
00323D  3               	iny
00323D  3               	lda (z80_ix),y
00323D  3               	sta dispx		; set x
00323D  3               	jmp digv
00323D  3               
00323D  3               ; Dig down.
00323D  3               
00323D  3               digd:
00323D  3               	ldy #9
00323D  3               	lda (z80_ix),y
00323D  3               	sta dispx		; set y
00323D  3               
00323D  3               	dey
00323D  3               	clc
00323D  3               	lda (z80_ix),y
00323D  3               	adc #16
00323D  3               	sta dispy		; set y
00323D  3               	jmp digv
00323D  3               
00323D  3               ; Dig left.
00323D  3               
00323D  3               digl:
00323D  3               	ldy #8
00323D  3               	lda (z80_ix),y
00323D  3               	sta dispy		; set y
00323D  3               
00323D  3               	iny
00323D  3               	lda (z80_ix),y
00323D  3               	sec
00323D  3               	sbc #2			; x=x-2
00323D  3               	sta dispx		; set x
00323D  3               	jmp digh
00323D  3               
00323D  3               ; Dig right.
00323D  3               
00323D  3               digr:
00323D  3               	ldy #8
00323D  3               	lda (z80_ix),y
00323D  3               	sta dispy		; set y
00323D  3               
00323D  3               	iny
00323D  3               	lda (z80_ix),y
00323D  3               	clc
00323D  3               	adc #16
00323D  3               	sta dispx		; set x+16
00323D  3               	jmp digh
00323D  3               
00323D  3               ; Vertical digging
00323D  3               
00323D  3               digv:
00323D  3               	jsr tstbl		; check blocktype in MAP
00323D  3               	jsr fdchk		; test if FODDER
00323D  3               
00323D  3               	clc
00323D  3               	lda dispx		; look 1 cell down
00323D  3               	adc #8
00323D  3               	sta dispx
00323D  3               	jsr tstbl		; check blocktype in MAP
00323D  3               	jsr fdchk
00323D  3               	lda dispx
00323D  3               	and #7
00323D  3               	bne :+
00323D  3               	rts
00323D  3               :
00323D  3               	clc
00323D  3               	lda dispx		; look 1 cell down
00323D  3               	adc #8
00323D  3               	sta dispx
00323D  3               	jsr tstbl		; check blocktype in MAP
00323D  3               	jmp fdchk
00323D  3               
00323D  3               ; Horizontal digging
00323D  3               
00323D  3               digh:
00323D  3               	jsr tstbl		; check blocktype in MAP
00323D  3               	jsr fdchk		; test if FODDER
00323D  3               
00323D  3               	clc
00323D  3               	lda dispy		; look 1 cell down
00323D  3               	adc #8
00323D  3               	sta dispy
00323D  3               	jsr tstbl		; check blocktype in MAP
00323D  3               	jsr fdchk
00323D  3               	lda dispy
00323D  3               	and #7
00323D  3               	bne :+
00323D  3               	rts
00323D  3               :
00323D  3               	clc
00323D  3               	lda dispy		; look 1 cell down
00323D  3               	adc #8
00323D  3               	sta dispy
00323D  3               	jsr tstbl		; check blocktype in MAP
00323D  3               	jmp fdchk
00323D  3               
00323D  3               digcnt:	.byte 0
00323D  3               
00323D  3               .endif
00323D  3               
00323D  3               ;------------------------------------------------------------------
00323D  3               ; Sprite table
00323D  3               ;------------------------------------------------------------------
00323D  3               
00323D  3               
00323D  3               ; ix+0  = type.
00323D  3               ; ix+1  = sprite image number.
00323D  3               ; ix+2  = frame.
00323D  3               ; ix+3  = y coord.
00323D  3               ; ix+4  = x coord.
00323D  3               
00323D  3               ; ix+5  = new type.
00323D  3               ; ix+6  = new image number.
00323D  3               ; ix+7  = new frame.
00323D  3               ; ix+8  = new y coord.
00323D  3               ; ix+9  = new x coord.
00323D  3               
00323D  3               ; ix+10 = direction.
00323D  3               ; ix+11 = parameter 1.
00323D  3               ; ix+12 = parameter 2.
00323D  3               ; ix+13 = jump pointer low.
00323D  3               ; ix+14 = jump pointer high.
00323D  3               ; ix+15 = data pointer low.
00323D  3               ; ix+16 = data pointer high.
00323D  3               
00323D  3               ; block NUMSPR * TABSIZ,255
00323D  3               
00323D  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
003241  3  FF FF FF FF  
003245  3  FF FF FF FF  
003309  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00330D  3  FF FF FF 00  
003311  3  C0 78 00 00  
00331A  3  07           roomtb:	.byte 7                      ; start room map offset.
00331B  3               
00331B  3               ; User routine.  Put your own code in here to be called with USER instruction.
00331B  3               ; if USER has an argument it will be passed in the accumulator.
00331B  3               
00331B  3               user:
00331B  3               	.include "user.inc"
00331B  4  60           	rts
00331C  4               
00331C  3               
00331C  3               ; Everything below here will be generated by the editors.
00331C  3               
00331C  3  60                   rts
00331D  3               WINDOWTOP = 1
00331D  3               WINDOWLFT = 1
00331D  3               WINDOWHGT = 22
00331D  3               WINDOWWID = 30 ;a
00331D  3               MAPWID = 3
00331D  3  FF FF FF             .byte 255,255,255
003320  3               mapdat:
003320  3  FF 00 FF             .byte 255,0,255
003323  3  FF FF FF             .byte 255,255,255
003326  3  01           stmap:  .byte 1
003327  3               
003327  3               evnt00:
003327  3  60                   rts
003328  3               evnt01:
003328  3  60                   rts
003329  3               evnt02:
003329  3  60                   rts
00332A  3               evnt03:
00332A  3  60                   rts
00332B  3               evnt04:
00332B  3  60                   rts
00332C  3               evnt05:
00332C  3  60                   rts
00332D  3               evnt06:
00332D  3  60                   rts
00332E  3               evnt07:
00332E  3  60                   rts
00332F  3               evnt08:
00332F  3  60                   rts
003330  3               evnt09:
003330  3  60                   rts
003331  3               evnt10:
003331  3  A9 00                lda #0		; AT
003333  3  85 rr                sta chary
003335  3  A9 00                lda #0
003337  3  85 rr                sta charx
003339  3  A9 01                lda #1		; PRINTMODE
00333B  3  85 rr                sta prtmod
00333D  3  A9 00                lda #0		; PRINT
00333F  3  20 A0 29             jsr dmsg
003342  3  A9 00                lda #0		; PRINTMODE
003344  3  85 rr                sta prtmod
003346  3  A9 03                lda #3		; AT
003348  3  85 rr                sta chary
00334A  3  A9 00                lda #0
00334C  3  85 rr                sta charx
00334E  3  A9 01                lda #1		; PRINT
003350  3  20 A0 29             jsr dmsg
003353  3  A9 05                lda #5		; AT
003355  3  85 rr                sta chary
003357  3  A9 00                lda #0
003359  3  85 rr                sta charx
00335B  3  A9 FE                lda #<displ0	; DISPLAYTRIPLE
00335D  3  85 62                sta z80_c
00335F  3  A9 2E                lda #>displ0
003361  3  85 63                sta z80_b
003363  3  A5 rr                lda vara
003365  3  20 87 22             jsr num2td
003368  3  20 E5 2E             jsr displ1
00336B  3  A9 02                lda #2		; PRINT
00336D  3  20 A0 29             jsr dmsg
003370  3  A5 rr                lda joyval	; KEY
003372  3  29 08                and #8
003374  3  F0 03                beq :+
003376  3  4C 86 33             jmp k00196
003379  3               :
003379  3  A5 rr                lda vara	; BEEP
00337B  3  0A                   asl a
00337C  3  8D 8A 20             sta sndtyp
00337F  3  A5 rr                lda vara
003381  3  18                   clc
003382  3  69 01                adc #1
003384  3  85 rr                sta vara
003386  3  A5 rr        k00196: lda joyval	; KEY
003388  3  29 04                and #4
00338A  3  F0 03                beq :+
00338C  3  4C 9C 33             jmp k00244
00338F  3               :
00338F  3  A5 rr                lda vara	; BEEP
003391  3  0A                   asl a
003392  3  8D 8A 20             sta sndtyp
003395  3  A5 rr                lda vara
003397  3  38                   sec
003398  3  E9 01                sbc #1
00339A  3  85 rr                sta vara
00339C  3  60           k00244: rts
00339D  3               evnt11:
00339D  3  60                   rts
00339E  3               evnt12:
00339E  3  20 C9 20             jsr cls		; CLS
0033A1  3  60                   rts
0033A2  3               evnt13:
0033A2  3  A9 50                lda #80
0033A4  3  85 rr                sta vara
0033A6  3  60                   rts
0033A7  3               evnt14:
0033A7  3  60                   rts
0033A8  3               evnt15:
0033A8  3  60                   rts
0033A9  3               evnt16:
0033A9  3  60                   rts
0033AA  3               evnt17:
0033AA  3  60                   rts
0033AB  3               evnt18:
0033AB  3  60                   rts
0033AC  3               evnt19:
0033AC  3  60                   rts
0033AD  3               evnt20:
0033AD  3  60                   rts
0033AE  3  60           ptcusr: rts
0033AF  3               msgdat:
0033AF  3  42 45 45 50          .byte "BEEP TES",212
0033B3  3  20 54 45 53  
0033B7  3  D4           
0033B8  3  44 45 43 52          .byte "DECREASE=Q INCREASE=",193
0033BC  3  45 41 53 45  
0033C0  3  3D 51 20 49  
0033CD  3  20 A0                .byte " ",160
0033CF  3               nummsg:
0033CF  3  03                   .byte 3
0033D0  3               chgfx:
0033D0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0033D4  3  00 00 00 00  
0033D8  3               bprop:
0033D8  3  00                   .byte 0
0033D9  3               sprgfx:
0033D9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0033DD  3  00 00 00 00  
0033E1  3  00 00 00 00  
0033F9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0033FD  3  00 00 00 00  
003401  3  00 00 00 00  
003419  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00341D  3  00 00 00 00  
003421  3  00 00 00 00  
003439  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00343D  3  00 00 00 00  
003441  3  00 00 00 00  
003459  3               frmlst:
003459  3  00 01 01 00          .byte 0,1,1,0
00345D  3               scdat:
00345D  3  09 00                .word 9
00345F  3  FF 00 00 FF          .byte 255,0,0,255,0,0,255,0,148
003463  3  00 00 FF 00  
003467  3  94           
003468  3               numsc:
003468  3  01                   .byte 1
003469  3               nmedat:
003469  3  42 00 58 80          .byte 66,0,88,128,255
00346D  3  FF           
00346E  3               NUMOBJ = 1
00346E  3               objdta:
00346E  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,32,0,160,32
003472  3  00 00 00 00  
003476  3  00 00 00 00  
003494  3               font:
003494  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003498  3  00 00 00 00  
00349C  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
0034A0  3  30 00 30 00  
0034A4  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
0034A8  3  00 00 00 00  
0034AC  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
0034B0  3  6C FE 6C 00  
0034B4  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
0034B8  3  7E 1E 7E 18  
0034BC  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
0034C0  3  30 6E CE 00  
0034C4  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
0034C8  3  7E CC 7E 00  
0034CC  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0034D0  3  00 00 00 00  
0034D4  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0034D8  3  18 18 0C 00  
0034DC  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0034E0  3  30 30 60 00  
0034E4  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0034E8  3  7E 18 3C 00  
0034EC  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0034F0  3  7E 18 18 00  
0034F4  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0034F8  3  00 18 18 30  
0034FC  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
003500  3  7E 00 00 00  
003504  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
003508  3  00 38 38 00  
00350C  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
003510  3  18 30 60 00  
003514  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
003518  3  F6 E6 7C 00  
00351C  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
003520  3  18 18 7E 00  
003524  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
003528  3  7C C0 FE 00  
00352C  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
003530  3  06 C6 7C 00  
003534  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
003538  3  D8 FE 18 00  
00353C  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
003540  3  06 C6 7C 00  
003544  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
003548  3  C6 C6 7C 00  
00354C  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
003550  3  18 30 30 00  
003554  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
003558  3  C6 C6 7C 00  
00355C  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
003560  3  7E 06 7C 00  
003564  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
003568  3  00 00 30 00  
00356C  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
003570  3  00 30 30 60  
003574  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
003578  3  30 18 0C 00  
00357C  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
003580  3  00 7E 00 00  
003584  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
003588  3  0C 18 30 00  
00358C  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
003590  3  18 00 18 00  
003594  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
003598  3  FE C0 7C 00  
00359C  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
0035A0  3  FE C6 C6 00  
0035A4  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
0035A8  3  C6 C6 FC 00  
0035AC  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
0035B0  3  C0 C6 7C 00  
0035B4  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
0035B8  3  C6 CC F8 00  
0035BC  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
0035C0  3  C0 C0 FE 00  
0035C4  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
0035C8  3  C0 C0 C0 00  
0035CC  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
0035D0  3  DE C6 7C 00  
0035D4  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0035D8  3  C6 C6 C6 00  
0035DC  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
0035E0  3  18 18 7E 00  
0035E4  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
0035E8  3  C6 C6 7C 00  
0035EC  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
0035F0  3  D8 CC C6 00  
0035F4  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0035F8  3  C0 C0 FE 00  
0035FC  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
003600  3  C6 C6 C6 00  
003604  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
003608  3  DE CE C6 00  
00360C  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
003610  3  C6 C6 7C 00  
003614  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
003618  3  FC C0 C0 00  
00361C  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
003620  3  F6 DE 7C 00  
003624  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
003628  3  FC CC C6 00  
00362C  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
003630  3  06 C6 7C 00  
003634  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
003638  3  30 30 30 00  
00363C  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
003640  3  C6 C6 7C 00  
003644  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
003648  3  C6 6C 38 00  
00364C  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
003650  3  C6 FE 6C 00  
003654  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
003658  3  38 6C C6 00  
00365C  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
003660  3  30 30 30 00  
003664  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
003668  3  30 60 FE 00  
00366C  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
003670  3  18 18 1E 00  
003674  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
003678  3  30 18 0C 00  
00367C  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
003680  3  30 30 F0 00  
003684  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
003688  3  30 30 30 00  
00368C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003690  3  00 00 00 FF  
003694  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
003698  3  60 60 FE 00  
00369C  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
0036A0  3  7C CC 7C 00  
0036A4  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
0036A8  3  66 66 7C 00  
0036AC  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
0036B0  3  60 60 3C 00  
0036B4  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
0036B8  3  CC CC 7C 00  
0036BC  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
0036C0  3  F8 C0 7C 00  
0036C4  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
0036C8  3  30 30 30 00  
0036CC  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0036D0  3  CC 7C 0C 78  
0036D4  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0036D8  3  CC CC CC 00  
0036DC  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0036E0  3  30 30 78 00  
0036E4  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
0036E8  3  0C 0C 6C 38  
0036EC  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0036F0  3  70 78 6C 00  
0036F4  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0036F8  3  30 30 1C 00  
0036FC  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
003700  3  FC FC FC 00  
003704  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
003708  3  CC CC CC 00  
00370C  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
003710  3  CC CC 78 00  
003714  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
003718  3  CC F8 C0 C0  
00371C  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
003720  3  CC 7C 0C 0E  
003724  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
003728  3  60 60 60 00  
00372C  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
003730  3  78 0C F8 00  
003734  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
003738  3  30 30 1C 00  
00373C  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
003740  3  CC CC 78 00  
003744  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
003748  3  78 78 30 00  
00374C  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
003750  3  FC FC 78 00  
003754  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
003758  3  30 78 CC 00  
00375C  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
003760  3  CC 7C 0C 78  
003764  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
003768  3  30 60 FC 00  
00376C  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
003770  3  18 18 1E 00  
003774  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
003778  3  18 18 18 00  
00377C  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
003780  3  30 30 F0 00  
003784  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
003788  3  00 00 00 00  
00378C  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
003790  3  E3 BB C6 7C  
003794  3               jtab:
003794  3  63                   .byte 99
003795  3  0A 08 3F 2F  keys:   .byte 10,8,63,47,33,35,37,31,30,26,24
003799  3  21 23 25 1F  
00379D  3  1E 1A 18     
0037A0  3               
0037A0  2               
0037A0  1               	.include "lib.inc"
0037A0  2               ;----------------------------------------------------------------------
0037A0  2               ; Atari 800 Platform Specific functions
0037A0  2               ;----------------------------------------------------------------------
0037A0  2               
0037A0  2               ;============================================================
0037A0  2               ; PLATFORM VARIABLES
0037A0  2               ;============================================================
0037A0  2               ;
0037A0  2               ; Memory map:
0037A0  2               ;
0037A0  2               ;	$0000-$01ff	 0.50kB	CPU WS
0037A0  2               ;	$0200-$05ff	 1,00kB	IOCB/Printer/Cassette RAM
0037A0  2               ;	$0600-$06ff	 0,25kB	User RAM
0037A0  2               ;	$0700-$1fff	 6,25kB
0037A0  2               ;	$2000-$ffff	56,00kB	User RAM
0037A0  2               ;
0037A0  2               ; Keyboard matrix:
0037A0  2               ;
0037A0  2               ;		0	1	2	3	4	5	6	7
0037A0  2               ;       ----------------------------------------------------------------------
0037A0  2               ;	$00:	L	J	;:	F1	F2	K	+\	*^
0037A0  2               ;	$08:	O		P	U	Ret	I	-_	=|
0037A0  2               ;	$10:	V	Help	C	F3	F4	B	X	Z
0037A0  2               ;	$18:	4$		3#	6&	Esc	5%	2"	1!
0037A0  2               ;	$20:	,[	Space	.]	N		M	/?	Invert
0037A0  2               ;	$28:	R		E	Y	Tab	T	W	Q
0037A0  2               ;	$30:	9(		0)	7'	Bksp	8@	<	>
0037A0  2               ;	$38:	F	H	D		Caps	G	S	A
0037A0  2               ;
0037A0  2               ; Atari 800 constants:
0037A0  2               
0037A0  2               	LMS		= 64
0037A0  2               	HS		= 16
0037A0  2               	VS		= 32
0037A0  2               	MODE2		= 2
0037A0  2               	MODE3		= 3
0037A0  2               	MODE4		= 4
0037A0  2               	MODE5		= 5
0037A0  2               	MODEB		= $0B
0037A0  2               	MODED		= $0D
0037A0  2               	MODEE		= $0E
0037A0  2               	MODEF		= $0F
0037A0  2               
0037A0  2               	BLANK1		= $00
0037A0  2               	BLANK2		= $10
0037A0  2               	BLANK3		= $20
0037A0  2               	BLANK4		= $30
0037A0  2               	BLANK5		= $40
0037A0  2               	BLANK6		= $50
0037A0  2               	BLANK7		= $60
0037A0  2               	BLANK8		= $70
0037A0  2               
0037A0  2               	DLISTENDJUMP	= $41
0037A0  2               
0037A0  2               ; Atari 800 Addresses
0037A0  2               
0037A0  2               	HPOSP0	= $D000		; HORIZONTAL POSITION P0
0037A0  2               	HPOSP1	= $D001		; HORIZONTAL POSITION P1
0037A0  2               	HPOSP2	= $D002		; HORIZONTAL POSITION P2
0037A0  2               	HPOSP3	= $D003		; HORIZONTAL POSITION P3
0037A0  2               	HPOSM0	= $D004		; HORIZONTAL POSITION M0
0037A0  2               	HPOSM1	= $D005		; HORIZONTAL POSITION M1
0037A0  2               	HPOSM2	= $D006		; HORIZONTAL POSITION M2
0037A0  2               	HPOSM3	= $D007		; HORIZONTAL POSITION M3
0037A0  2               
0037A0  2               	SIZEP0	= $D008		; SIZE P0
0037A0  2               	SIZEP1	= $D009		; SIZE P0
0037A0  2               	SIZEP2	= $D00A		; SIZE P0
0037A0  2               	SIZEP3	= $D00B		; SIZE P0
0037A0  2               	SIZEM	= $D00C		; SIZE M
0037A0  2               
0037A0  2               	GRAFP0	= $D00D
0037A0  2               	GRAFP1	= $D00E
0037A0  2               	GRAFP2	= $D00F
0037A0  2               	GRAFP3	= $D010
0037A0  2               	GRAFM	= $D011
0037A0  2               
0037A0  2               	TRIG0	= $D010
0037A0  2               	TRIG1	= $D011
0037A0  2               
0037A0  2               	COLPM0	= $D012		; COLOR P0/M0
0037A0  2               	COLPM1	= $D013		; COLOR P1/M1
0037A0  2               	COLPM2	= $D014		; COLOR P2/M2
0037A0  2               	COLPM3	= $D015		; COLOR P3/M3
0037A0  2               
0037A0  2               	COLPF0	= $D016
0037A0  2               	COLPF1	= $D017
0037A0  2               	COLPF2	= $D018
0037A0  2               	COLPF3	= $D019
0037A0  2               	COLBK	= $D01A
0037A0  2               
0037A0  2               
0037A0  2               	AUDF1	= $D200
0037A0  2               	AUDC1	= $D201
0037A0  2               	AUDF2	= $D202
0037A0  2               	AUDC2	= $D203
0037A0  2               	AUDF3	= $D204
0037A0  2               	AUDC3	= $D205
0037A0  2               	AUDF4	= $D206
0037A0  2               	AUDC4	= $D207
0037A0  2               	AUDCTL	= $D208
0037A0  2               
0037A0  2               	KBCODE	= $D209
0037A0  2               	RANDOM	= $D20A
0037A0  2               	IRQEN	= $D20E
0037A0  2               	IRQST	= $D20E
0037A0  2               	SKSTAT	= $D20F
0037A0  2               
0037A0  2               	STICK	= $D300
0037A0  2               	PORTB	= $D301
0037A0  2               	PBCTL	= $D303
0037A0  2               
0037A0  2               	DMACTL	= $D400
0037A0  2               	DLISTL	= $D402
0037A0  2               	DLISTH	= $D403
0037A0  2               	WSYNC	= $D40A
0037A0  2               	VCOUNT	= $D40B
0037A0  2               	NMIEN	= $D40E
0037A0  2               	NMIST	= $D40F
0037A0  2               	NMIRES	= $D40F
0037A0  2               
0037A0  2               	NMI	= $FFFA
0037A0  2               	RESET	= $FFFC
0037A0  2               	IRQ	= $FFFE
0037A0  2               
0037A0  2               ;----------------------------------------------------------------------
0037A0  2               ; Atari 800 hardware fns
0037A0  2               ;----------------------------------------------------------------------
0037A0  2               
0037A0  2               init:
0037A0  2               
0037A0  2               ; Disable interrupts
0037A0  2               
0037A0  2  78           	sei
0037A1  2  A9 00        	lda #0
0037A3  2  8D 0E D2     	sta IRQEN		; Disable IRQ
0037A6  2  8D 0E D4     	sta NMIEN		; Disable NMI
0037A9  2               
0037A9  2               ; Switch BASIC + OS ROMS off
0037A9  2               
0037A9  2  AD 03 D3     	lda PBCTL
0037AC  2  09 02        	ora #%00000010
0037AE  2  8D 03 D3     	sta PBCTL
0037B1  2  AD 01 D3     	lda PORTB
0037B4  2  29 7C        	and #%01111100
0037B6  2  09 82        	ora #%10000010
0037B8  2  8D 01 D3     	sta PORTB
0037BB  2               
0037BB  2               ; Setup new NMI handler
0037BB  2               
0037BB  2  A9 E1        	lda #<nmi_handler
0037BD  2  8D FA FF     	sta NMI
0037C0  2  A9 37        	lda #>nmi_handler
0037C2  2  8D FB FF     	sta NMI+1
0037C5  2  A9 C0        	lda #%11000000
0037C7  2  8D 0E D4     	sta NMIEN
0037CA  2               
0037CA  2               ; Init video registers
0037CA  2               
0037CA  2  A9 00        	lda #<BITMAP_DLIST
0037CC  2  8D 02 D4     	sta DLISTL
0037CF  2  A9 39        	lda #>BITMAP_DLIST
0037D1  2  8D 03 D4     	sta DLISTH
0037D4  2               
0037D4  2               ; Screenwidth 32 bytes
0037D4  2               
0037D4  2  A9 31        	lda #%00110001
0037D6  2  8D 00 D4     	sta DMACTL
0037D9  2               
0037D9  2  20 C9 20     	jsr cls
0037DC  2               
0037DC  2  60           	rts
0037DD  2               
0037DD  2               ; NMI interrupt handler
0037DD  2               
0037DD  2  00 00        frame_counter:	.byte 0,0
0037DF  2  00           frames_passed:	.byte 0
0037E0  2  00           frames_delay:	.byte 0
0037E1  2               
0037E1  2               nmi_handler:
0037E1  2  2C 0F D4     	bit NMIST
0037E4  2  30 2A        	bmi dli_handler
0037E6  2  10 0D        	bpl nmi_not_dli
0037E8  2               nmi_not_vbi:
0037E8  2  A9 20        	lda #%00100000
0037EA  2  2C 0F D4     	bit NMIST
0037ED  2  D0 04        	bne nmi_not_reset
0037EF  2  8D 0F D4     	sta NMIRES
0037F2  2  40           	rti
0037F3  2               nmi_not_reset:
0037F3  2  68           	pla
0037F4  2  40           	rti
0037F5  2               nmi_not_dli:
0037F5  2  48           	pha
0037F6  2  50 F0        	bvc nmi_not_vbi
0037F8  2  8A           	txa
0037F9  2  48           	pha
0037FA  2  98           	tya
0037FB  2  48           	pha
0037FC  2               
0037FC  2               ; Used for syncing to 25 Hz
0037FC  2               
0037FC  2  EE DF 37     	inc frames_passed
0037FF  2               
0037FF  2  EE DD 37     	inc frame_counter
003802  2  D0 03        	bne skip_inc_frame_counter
003804  2  EE DE 37     	inc frame_counter+1
003807  2               skip_inc_frame_counter:
003807  2               
003807  2               ; Adjust delay counter
003807  2               
003807  2  CE E0 37     	dec frames_delay
00380A  2               
00380A  2               ; Restore registers
00380A  2               
00380A  2  68           	pla
00380B  2  A8           	tay
00380C  2  68           	pla
00380D  2  AA           	tax
00380E  2  68           	pla
00380F  2  40           	rti
003810  2               
003810  2               dli_handler:
003810  2  40           	rti
003811  2               
003811  2               ;========================================================
003811  2               ; KEY AND JOYSTICK ROUTINES
003811  2               ;--------------------------------------------------------
003811  2               ; Keys
003811  2               ;
003811  2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
003811  2               ;             ||||||||
003811  2               ;             |||||||+> Right    KEY 0  - X
003811  2               ;             ||||||+-> Left     KEY 1  - Z
003811  2               ;             |||||+--> Down     KEY 2  - .
003811  2               ;             ||||+---> Up       KEY 3  - ;
003811  2               ;             |||+----> Fire1    KEY 4  - SPC
003811  2               ;             ||+-----> Fire2    KEY 5  - Q
003811  2               ;             |+------> Fire3    KEY 6  - P
003811  2               ;             +-------> Not used
003811  2               ;
003811  2               ;                       Option1  KEY 7  - 1
003811  2               ;                       Option2  KEY 8  - 2
003811  2               ;                       Option3  KEY 9  - 3
003811  2               ;                       Option4  KEY 10 - 4
003811  2               ;--------------------------------------------------------
003811  2               ;----------------------------------------------------
003811  2               ; PRSKEY
003811  2               ; Wait for keypress.
003811  2               ;----------------------------------------------------
003811  2               
003811  2               prskey:
003811  2  AD 0F D2     	lda SKSTAT		; Check keypress
003814  2  29 7F        	and #127
003816  2  C9 7F        	cmp #127
003818  2  F0 03        	beq :+
00381A  2  4C 26 38     	jmp prsend
00381D  2               :
00381D  2  20 7A 29     	jsr joykey		; Check joystick move
003820  2  29 7F        	and #127
003822  2  C9 7F        	cmp #127
003824  2  F0 EB        	beq prskey
003826  2               prsend:
003826  2  AD 0F D2     	lda SKSTAT		; Check release
003829  2  29 7F        	and #127
00382B  2  C9 7F        	cmp #127
00382D  2  D0 F7        	bne prsend
00382F  2  60           	rts
003830  2               
003830  2               ;--------------------------------------------------------
003830  2               ; KTEST
003830  2               ; Check if key in A is pressed,
003830  2               ;  carry clr = key pressed
003830  2               ;  carry set = key not pressed
003830  2               ;--------------------------------------------------------
003830  2               
003830  2               ktest:
003830  2  85 rr        	sta tmp
003832  2  AD 0F D2     	lda SKSTAT		; Check keypress
003835  2  29 04        	and #4
003837  2  D0 07        	bne notpressed
003839  2  A5 rr        	lda tmp
00383B  2  CD 09 D2     	cmp KBCODE
00383E  2  F0 02        	beq pressed
003840  2               notpressed:
003840  2  38           	sec
003841  2  60           	rts
003842  2               pressed:
003842  2  18           	clc			; key pressed
003843  2  60           	rts
003844  2               
003844  2               ;---------------------------------------------------------------
003844  2               ; KGET
003844  2               ; Return keycode when a key is pressed and released
003844  2               ;---------------------------------------------------------------
003844  2               
003844  2               kget:
003844  2  AD 0F D2     	lda SKSTAT		; Check keypress
003847  2  29 04        	and #4
003849  2  D0 F9        	bne kget
00384B  2  AD 09 D2     	lda KBCODE		; If pressed, get keycode
00384E  2  48           	pha			; Save keycode pressed
00384F  2               kget2:
00384F  2  AD 0F D2     	lda SKSTAT		; Check keypress
003852  2  29 04        	and #4
003854  2  F0 F9        	beq kget2
003856  2  68           	pla
003857  2  60           	rts
003858  2               
003858  2               ;-------------------------------------------------------
003858  2               ; Joystick routines.
003858  2               ;
003858  2               ; contrl = 1, Joystick1
003858  2               ;          2, Joystick2
003858  2               ;-------------------------------------------------------
003858  2               
003858  2               ; Iitialize joysticks
003858  2               
003858  2               joyinit:
003858  2  60           	rts
003859  2               
003859  2               ; Joystick1 controls.
003859  2               
003859  2               joy1:
003859  2  A9 00        	lda #0		 	; zero reading.
00385B  2  85 rr        	sta joyval
00385D  2               
00385D  2  AD 9B 37     	lda keys+6		; Check Fire3
003860  2  20 30 38     	jsr ktest
003863  2  26 rr        	rol joyval
003865  2  AD 9A 37     	lda keys+5		; Check Fire2
003868  2  20 30 38     	jsr ktest
00386B  2  26 rr        	rol joyval
00386D  2  AD 10 D0     	lda TRIG0		; Check Fire
003870  2  4A           	lsr
003871  2  26 rr        	rol joyval
003873  2               
003873  2  AD 00 D3     	lda STICK
003876  2  85 rr        	sta tmp
003878  2  46 rr        	lsr tmp			; Check up
00387A  2  26 rr        	rol joyval
00387C  2  46 rr        	lsr tmp			; Check dwon
00387E  2  26 rr        	rol joyval
003880  2  46 rr        	lsr tmp			; Check left
003882  2  26 rr        	rol joyval
003884  2  46 rr        	lsr tmp			; Check right
003886  2  26 rr        	rol joyval
003888  2               
003888  2  60           	rts
003889  2               
003889  2               ; Joystick2 controls.
003889  2               
003889  2               joy2:
003889  2  A9 00        	lda #0		 	; zero reading.
00388B  2  85 rr        	sta joyval
00388D  2               
00388D  2  AD 9B 37     	lda keys+6		; Check Fire3
003890  2  20 30 38     	jsr ktest
003893  2  26 rr        	rol joyval
003895  2  AD 9A 37     	lda keys+5		; Check Fire2
003898  2  20 30 38     	jsr ktest
00389B  2  26 rr        	rol joyval
00389D  2  AD 11 D0     	lda TRIG1		; Check Fire
0038A0  2  4A           	lsr
0038A1  2  26 rr        	rol joyval
0038A3  2               
0038A3  2  AD 00 D3     	lda STICK
0038A6  2  4A           	lsr a
0038A7  2  4A           	lsr a
0038A8  2  4A           	lsr a
0038A9  2  4A           	lsr a
0038AA  2  85 rr        	sta tmp
0038AC  2  46 rr        	lsr tmp			; Check up
0038AE  2  26 rr        	rol joyval
0038B0  2  46 rr        	lsr tmp			; Check dwon
0038B2  2  26 rr        	rol joyval
0038B4  2  46 rr        	lsr tmp			; Check left
0038B6  2  26 rr        	rol joyval
0038B8  2  46 rr        	lsr tmp			; Check right
0038BA  2  26 rr        	rol joyval
0038BC  2               
0038BC  2  60           	rts
0038BD  2               
0038BD  2               ;-------------------------------------------------------
0038BD  2               ; Colours
0038BD  2               ;-------------------------------------------------------
0038BD  2               
0038BD  2               ; INK sets foreground colour
0038BD  2               
0038BD  2               setfgcol:
0038BD  2  29 03        	and #3
0038BF  2  A8           	tay
0038C0  2  B9 E2 38     	lda codcol,y
0038C3  2  4C D9 38     	jmp calfgc
0038C6  2               
0038C6  2               ; PAPER sets background colour
0038C6  2               
0038C6  2               setbgcol:
0038C6  2  29 03        	and #3
0038C8  2               calbgc:
0038C8  2  A8           	tay
0038C9  2  B9 E2 38     	lda codcol,y
0038CC  2  48           	pha
0038CD  2  AD E0 38     	lda andeor
0038D0  2  4D E1 38     	eor andeor+1
0038D3  2  AA           	tax
0038D4  2  68           	pla
0038D5  2  8D E1 38     	sta andeor+1
0038D8  2  8A           	txa
0038D9  2               calfgc:
0038D9  2  4D E1 38     	eor andeor+1
0038DC  2  8D E0 38     	sta andeor
0038DF  2               calex1:
0038DF  2  60           	rts
0038E0  2               
0038E0  2  00 00        andeor:	.byte 0,0
0038E2  2  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
0038E6  2               
0038E6  2               ;---------------------------------------------------------------
0038E6  2               ; Bitmap display list must be aligned at $100
0038E6  2               ;---------------------------------------------------------------
0038E6  2               bitmaplist:
0038E6  2               
0038E6  2               ; Align $100
0038E6  2               
0038E6  2  00 00 00 00  .repeat ((bitmaplist/256)+1)*256-bitmaplist
0038EA  2  00 00 00 00  
0038EE  2  00 00 00 00  
003900  2               	.byte 0
003900  2               .endrepeat
003900  2               
003900  2               ; Set graphic mode
003900  2               
003900  2               .if gflag
003900  2               	GFXMODE = MODEE
003900  2               .else
003900  2               	GFXMODE = MODEF
003900  2               .endif
003900  2               
003900  2               BITMAP_DLIST:
003900  2  70           	.byte BLANK8
003901  2  70           	.byte BLANK8
003902  2  70           	.byte BLANK8
003903  2               
003903  2  4F           	.byte LMS+GFXMODE
003904  2  00 E4        	.word ScreenAddr
003906  2  0F 0F 0F 0F  	.res 95,GFXMODE
00390A  2  0F 0F 0F 0F  
00390E  2  0F 0F 0F 0F  
003965  2               
003965  2  4F            	.byte LMS+GFXMODE
003966  2  00 F0        	.word ScreenAddr+96*32
003968  2  0F 0F 0F 0F  	.res 95,GFXMODE
00396C  2  0F 0F 0F 0F  
003970  2  0F 0F 0F 0F  
0039C7  2               
0039C7  2  41           	.byte DLISTENDJUMP
0039C8  2  00 39        	.word BITMAP_DLIST
0039CA  2               
0039CA  2               
0039CA  1               	.include "z80.asm"
0039CA  2               ;------------------------------------------------------
0039CA  2               ; z80.asm
0039CA  2               ; spectrum stuff
0039CA  2               ; adresses
0039CA  2               
0039CA  2               
0039CA  2               ; Contains seperatly 1 bit set
0039CA  2               
0039CA  2               _bitmem0	= $f8
0039CA  2               _bitmem1	= $f9
0039CA  2               _bitmem2	= $fa
0039CA  2               _bitmem3	= $fb
0039CA  2               _bitmem4	= $fc
0039CA  2               _bitmem5	= $fd
0039CA  2               _bitmem6	= $fe
0039CA  2               _bitmem7	= $ff
0039CA  2               
0039CA  2               ; constants
0039CA  2               _bitvalue0	= $01
0039CA  2               _bitvalue1	= $02
0039CA  2               _bitvalue2	= $04
0039CA  2               _bitvalue3	= $08
0039CA  2               _bitvalue4	= $10
0039CA  2               _bitvalue5	= $20
0039CA  2               _bitvalue6	= $40
0039CA  2               _bitvalue7	= $80
0039CA  2               
0039CA  2               _notbitvalue0	= $fe
0039CA  2               _notbitvalue1	= $fd
0039CA  2               _notbitvalue2	= $fb
0039CA  2               _notbitvalue3	= $f7
0039CA  2               _notbitvalue4	= $ef
0039CA  2               _notbitvalue5	= $df
0039CA  2               _notbitvalue6	= $bf
0039CA  2               _notbitvalue7	= $7f
0039CA  2               
0039CA  2               
0039CA  2               exx:
0039CA  2  A5 62        		lda z80_c
0039CC  2  A4 6E        		ldy z80_cp
0039CE  2  84 62        		sty z80_c
0039D0  2  85 6E        		sta z80_cp
0039D2  2  A5 63        		lda z80_b
0039D4  2  A4 6F        		ldy z80_bp
0039D6  2  84 63        		sty z80_b
0039D8  2  85 6F        		sta z80_bp
0039DA  2  A5 64        		lda z80_e
0039DC  2  A4 70        		ldy z80_ep
0039DE  2  84 64        		sty z80_e
0039E0  2  85 70        		sta z80_ep
0039E2  2  A5 65        		lda z80_d
0039E4  2  A4 71        		ldy z80_dp
0039E6  2  84 65        		sty z80_d
0039E8  2  85 71        		sta z80_dp
0039EA  2  A5 rr        		lda scraddr
0039EC  2  A4 72        		ldy z80_lp
0039EE  2  84 rr        		sty scraddr
0039F0  2  85 72        		sta z80_lp
0039F2  2  A5 rr        		lda scraddr+1
0039F4  2  A4 73        		ldy z80_hp
0039F6  2  84 rr        		sty scraddr+1
0039F8  2  85 73        		sta z80_hp
0039FA  2  60           		rts
0039FB  2               
0039FB  2               
0039FB  1               eind_asm:
0039FB  1               eop:					; End Of Program
0039FB  1               
0039FB  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(48384-eind_asm + start_asm))
0039FB  1               
