ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2000
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag   = 0 ;
000000r 2               pflag   = 0 ;
000000r 2               sflag   = 0 ;
000000r 2               dflag   = 0 ;
000000r 2               cflag   = 0 ;
000000r 2               oflag   = 0 ;
000000r 2               lflag   = 0 ;
000000r 2               crflag  = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               .if rflag
000057r 2               sprshft:     .res 1
000057r 2               .endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               .org asm_code-6
001FFA  1  FF FF        	.word $ffff
001FFC  1  00 20        	.word start_asm
001FFE  1  F5 39        	.word eind_asm
002000  1               
002000  1               
002000  1               
002000  1               exec:
002000  1               start_asm:
002000  1               	.include "game.inc"
002000  2               .include "testclock.inc"
002000  3               ;--------------------------------------------------------------
002000  3               ; Arcade Game Designer.
002000  3               ; (C) 2008 Jonathan Cauldwell.
002000  3               ; ZX Spectrum Next Engine v0.7.
002000  3               ; Acorn Atom port by K.v.Oss 2018
002000  3               ;--------------------------------------------------------------
002000  3               
002000  3               ; Conditional compilation flags
002000  3               ; Code is installed if flag is set
002000  3               ; Flags are set in commandline assembly or by the compiler
002000  3               
002000  3               ; Flags set by AGD compiler
002000  3               ;	mflag  			; MENU + INV
002000  3               ;	pflag 			; particle engine
002000  3               ;	sflag 			; scrollytext
002000  3               ;	dflag 			; digging mode
002000  3               ;	cflag			; collectable blocks
002000  3               ;	oflag			; objects
002000  3               ;	lflag			; ladders
002000  3               ;
002000  3               ; Flags set manually
002000  3               ;	aflag			; adventure mode
002000  3               ;	bflag			; big sprites (16x24)
002000  3               ;	iflag			; invert mode
002000  3               
002000  3               .if mflag
002000  3               	.out "- MEN/INV enabled"
002000  3               .endif
002000  3               .if pflag
002000  3               	.out "- Particles enabled"
002000  3               .endif
002000  3               .if sflag
002000  3               	.out "- Scrolling enabled"
002000  3               .endif
002000  3               .if dflag
002000  3               	.out "- Digging enabled"
002000  3               .endif
002000  3               .if cflag
002000  3               	.out "- Collectable blocks enabled"
002000  3               .endif
002000  3               .if oflag
002000  3               	.out "- Objects enabled"
002000  3               .endif
002000  3               .if lflag
002000  3               	.out "- Ladders enabled"
002000  3               .endif
002000  3               .if aflag
002000  3               	.out "- Adventure mode enabled"
002000  3               .endif
002000  3               .if bflag
002000  3               	.out "- Big Sprites (16x24) enabled"
002000  3               .endif
002000  3               .if iflag
002000  3               	.out "- Invert mode enabled"
002000  3               .endif
002000  3               
002000  3               ; Global definitions ------------------------------------------------------------
002000  3               
002000  3               	FONT = font		; Font address
002000  3               
002000  3               	green	= $00		; Colour definition filters
002000  3               	yellow	= $55
002000  3               	blue	= $aa
002000  3               	red	= $ff
002000  3               
002000  3               ; Block characteristics.
002000  3               
002000  3               	PLATFM	= 1		; platform.
002000  3               	WALL	= PLATFM + 1	; solid wall.
002000  3               	LADDER	= WALL + 1	; ladder.
002000  3               	FODDER	= LADDER + 1	; fodder block.
002000  3               	DEADLY	= FODDER + 1	; deadly block.
002000  3               	CUSTOM	= DEADLY + 1	; custom block.
002000  3               	WATER	= CUSTOM + 1	; water block.
002000  3                       COLECT	= WATER + 1	; collectable block.
002000  3                       NUMTYP	= COLECT + 1	; number of types.
002000  3               
002000  3               ; Sprites.
002000  3               
002000  3               .if bflag
002000  3               	SPR_HGT	= 24		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 8		; number of sprites.
002000  3               .else				; 16x16 sprites
002000  3               	SPR_HGT = 16		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 12		; number of sprites.
002000  3               .endif
002000  3               
002000  3               	TABSIZ = 17		; size of each entry.
002000  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002000  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002000  3               	var_X  = 8		; new x coordinate of sprite.
002000  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002000  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002000  3               
002000  3               ; Particle engine.
002000  3               
002000  3               	NUMSHR = 55		; pieces of shrapnel.
002000  3               	SHRSIZ = 6		; bytes per particle.
002000  3               
002000  3               ; System constants
002000  3               
002000  3               	ScreenAddr  = $e400	; Startaddress video RAM
002000  3               	ScrSelAddr  = $b000	; Screen selection address
002000  3               	KeyRowAddr  = $b000	; PIA key matrix row
002000  3               	KeyColAddr  = $b001	; PIA key matrix column
002000  3               	SpeakerBit  = $b002	; Speaker bit
002000  3               	CmdReg      = $b400	; Command register AtoMMC
002000  3               	DatReg      = $b401	; Data register AtoMMC
002000  3               	Timer2_Low  = $b808	; Timer 2 low byte
002000  3               	Timer2_High = $b809	; Timer 2 high byte
002000  3               
002000  3               ; System calls
002000  3               
002000  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
002000  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
002000  3               	OSRDCH   = $fe94	; get key subroutine
002000  3                       READKEY  = $fe71	; scan key matrix subroutine
002000  3               	OSWRCH	 = $fff4	; write character
002000  3               
002000  3               
002000  3               .if iflag
002000  3               	TxtInvert   = $ff	; Invert byte for character printing
002000  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002000  3               .else
002000  3               	TxtInvert   = $00	; Invert byte for character printing
002000  3               	ScrFillByte = $00	; Screen fill byte for CLS
002000  3               .endif
002000  3               
002000  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002000  3               
002000  3               ;===============================================================
002000  3               ; Game starts here
002000  3               ;===============================================================
002000  3               
002000  3               ;.segment "CODE"
002000  3               
002000  3  20 9E 38     	jsr systeminit
002003  3               
002003  3               ; Clear variables
002003  3               
002003  3  A9 00        	lda #0
002005  3  A2 00        	ldx #0
002007  3               clrloop:
002007  3  95 00        	sta 0,x
002009  3  E8           	inx
00200A  3  D0 FB        	bne clrloop
00200C  3               
00200C  3  20 04 21     	jsr game	 	; start the game.
00200F  3  A9 0C        	lda #12			; Clear screen + exit to Basic
002011  3  20 F4 FF     	jsr OSWRCH
002014  3  4C B2 C2     	jmp $C2B2		; Back to Basic
002017  3               
002017  3               ; Definition of variables
002017  3               ; Make sure pointers are arranged in the same order as the data itself.
002017  3               
002017  3  A0 34        msgptr:		.word msgdat	; messages
002019  3  CE 34        blkptr:		.word chgfx	; block graphics.
00201B  3  D6 34        proptr:		.word bprop	; address of char properties.
00201D  3  D7 34        sptptr:		.word sprgfx	; sprite graphics
00201F  3  57 35        frmptr:		.word frmlst	; sprite frames.
002021  3  5B 35        scrptr:		.word scdat	; address of screens.
002023  3  67 35        nmeptr:		.word nmedat	; enemy start positions.
002025  3  6C 35        objptr:		.word objdta	; object graphics
002027  3               
002027  3               ;TxtFilter:	.byte $ff
002027  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
00202B  3               
00202B  3               ; Don't change the order of these four.
00202B  3               ; Menu routine relies on winlft following wintop.
00202B  3               
00202B  3  01           wintop:		.byte WINDOWTOP	; top of window.
00202C  3  01           winlft:		.byte WINDOWLFT	; left edge.
00202D  3  16           winhgt:		.byte WINDOWHGT	; window height.
00202E  3  1E           winwid:		.byte WINDOWWID	; window width.
00202F  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002030  3               
002030  3               ; Variables start here.
002030  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002030  3               
002030  3  08           wntopx:		.byte (8 * WINDOWTOP)
002031  3  08           wnlftx:		.byte (8 * WINDOWLFT)
002032  3  A8           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
002033  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
002034  3               
002034  3               ; Assorted game routines which can go in contended memory.
002034  3               
002034  3               ;--------------------------------------------------------------
002034  3               ; Entry for inventory called by the INV command
002034  3               ;
002034  3               ; Input:
002034  3               ;  X   = message nr with objects seperated with ,
002034  3               ;
002034  3               ; Output:
002034  3               ;  OPT = selected objectnr of INV menu
002034  3               ;--------------------------------------------------------------
002034  3               
002034  3               .if mflag
002034  3               minve:
002034  3               	lda #<(invdis)		; routine address.
002034  3               	sta mod0+1		; set up menu routine.
002034  3               	sta mod2+1		; set up count routine.
002034  3               	lda #>(invdis)
002034  3               	sta mod0+2
002034  3               	sta mod2+2
002034  3               	lda #<(fopt)		; find option from available objects.
002034  3               	sta mod1+1		; set up routine.
002034  3               	lda #>(fopt)
002034  3               	sta mod1+1+1
002034  3               	jmp dbox		; do menu routine.
002034  3               
002034  3               ;--------------------------------------------------------------
002034  3               ; Entry for menu called by the MENU command
002034  3               ;
002034  3               ; Input:
002034  3               ;  X   = message nr with menu items seperated with ,
002034  3               ;
002034  3               ; Output:
002034  3               ;  OPT = selected line nr of MENU menu
002034  3               ;--------------------------------------------------------------
002034  3               
002034  3               mmenu:
002034  3               	lda #<(always)		; routine address.
002034  3               	sta mod0+1		; set up routine.
002034  3               	sta mod2+1		; set up count routine.
002034  3               	lda #>(always)
002034  3               	sta mod0+2
002034  3               	sta mod2+2
002034  3               
002034  3               	lda #<(fstd)		; standard option selection.
002034  3               	sta mod1+1		; set up routine.
002034  3               	lda #>(fstd)
002034  3               	sta mod1+2
002034  3               
002034  3               ; Drop through into box routine.
002034  3               
002034  3               ;--------------------------------------------------------------
002034  3               ; Work out size of box for message or menu.
002034  3               ;--------------------------------------------------------------
002034  3               
002034  3               dbox:
002034  3               	lda #<(msgdat)		; pointer to messages.
002034  3               	sta z80_l
002034  3               	lda #>(msgdat)
002034  3               	sta z80_h
002034  3               
002034  3               	jsr getwrd		; get message number.
002034  3               
002034  3               	lda z80_h		; store pointer to message.
002034  3               	sta TmpAddr
002034  3               	lda z80_l
002034  3               	sta TmpAddr+1
002034  3               
002034  3               	lda #1			; height.
002034  3               	sta z80_d
002034  3               	lda #0			; start at object zero.
002034  3               	sta combyt		; store number of object in combyt.
002034  3               	sta z80_e		; maximum width.
002034  3               dbox5:
002034  3               	lda #0			; this line"s width.
002034  3               	sta z80_b
002034  3               mod2:
002034  3               	jsr always		; item in player"s possession?
002034  3               	cmp #255
002034  3               	bne dbox6		; not in inventory, skip this line.
002034  3               	inc z80_d		; add to tally.
002034  3               dbox6:
002034  3               	ldy #0			; get character.
002034  3               	lda (z80_hl),y
002034  3               	sta z80_a
002034  3               	inc z80_l		; next character.
002034  3               	bne :+
002034  3               	inc z80_h
002034  3               :
002034  3               	lda z80_a		; reached end of line?
002034  3               	cmp #','
002034  3               	beq dbox3		; yes.
002034  3               	cmp #13
002034  3               	beq dbox3		; yes.
002034  3               	inc z80_b		; add to this line"s width.
002034  3               	lda z80_a
002034  3               	bmi dbox4		; end of message? yes, end count.
002034  3               	jmp dbox6		; repeat until we find the end.
002034  3               dbox3:
002034  3               	lda z80_e		; maximum line width.
002034  3               	cmp z80_b		; have we exceeded longest so far?
002034  3               	bpl dbox5		; no, carry on looking.
002034  3               	lda z80_b		; make this the widest so far.
002034  3               	sta z80_e
002034  3               	jmp dbox5		; keep looking.
002034  3               dbox4:
002034  3               	lda z80_e		; maximum line width.
002034  3               	cmp z80_b		; have we exceeded longest so far?
002034  3               	bpl dbox8		; no, carry on looking.
002034  3               	lda z80_b		; final line is the longest so far.
002034  3               	sta z80_e
002034  3               dbox8:
002034  3               	dec z80_d		; decrement items found.
002034  3               	bne :+			; total was zero.
002034  3               	lda #255
002034  3               	sta varopt
002034  3               	jmp dbox15
002034  3               :
002034  3               	lda z80_e		; longest line.
002034  3               	bne :+			; was it zero?
002034  3               	jmp dbox15		; total was zero.
002034  3               :
002034  3               	sta bwid		; set up size.
002034  3               	lda z80_d
002034  3               	sta blen
002034  3               
002034  3               ;--------------------------------------------------------------
002034  3               ; That's set up our box size.
002034  3               ;--------------------------------------------------------------
002034  3               
002034  3               	lda winhgt		; window height in characters.
002034  3               	sec
002034  3               	sbc z80_d		; subtract height of box.
002034  3               	lsr a			; divide by 2.
002034  3               	clc
002034  3               	adc wintop		; add top edge of window.
002034  3               	sta btop		; set up box top.
002034  3               
002034  3               	lda winwid		; window width in characters.
002034  3               	sec
002034  3               	sbc z80_e		; subtract box width.
002034  3               	lsr a			; divide by 2.
002034  3               	clc
002034  3               	adc winlft		; add left edge of window.
002034  3               	sta blft		; box left.
002034  3               
002034  3               	lda #<(FONT-256)		; font.
002034  3               	sta grbase		; set up for text display.
002034  3               	lda #>(FONT-256)
002034  3               	sta grbase+1
002034  3               
002034  3               	lda TmpAddr+1		; restore message pointer.
002034  3               	sta z80_l
002034  3               	lda TmpAddr
002034  3               	sta z80_h
002034  3               
002034  3               	lda btop		; box top.
002034  3               	sta dispy		; set display coordinate.
002034  3               	lda #0			; start at object zero.
002034  3               	sta combyt		; store number of object in combyt.
002034  3               dbox2:
002034  3               	lda combyt		; get object number.
002034  3               	sta z80_a
002034  3               mod0:
002034  3               	jsr always		; check inventory for display.
002034  3               	cmp #255
002034  3               	beq :+
002034  3               	jmp dbox13		; not in inventory, skip this line.
002034  3               :
002034  3               	lda blft		; box left.
002034  3               	sta dispx		; set left display position.
002034  3               	lda bwid		; box width.
002034  3               	sta z80_b		; store width.
002034  3               dbox0:
002034  3               	ldy #0
002034  3               	lda (z80_hl),y		; get character.
002034  3               	cmp #','		; end of line?
002034  3               	beq dbox1		; yes, next one.
002034  3               	cmp #13			; end of line?
002034  3               	beq dbox1		; yes, next one.
002034  3               
002034  3               	cmp #141			; end of line?
002034  3               	bne :+
002034  3               	dec bwid
002034  3               	jmp dbox7		; yes, next one.
002034  3               :
002034  3               	dec z80_b		; one less to display.
002034  3               	and #127		; remove terminator.
002034  3               
002034  3               	jsr pchr		; display on screen.
002034  3               
002034  3               	ldy #0
002034  3               	lda (z80_hl),y		; get character.
002034  3               	sta z80_a
002034  3               	inc z80_l		; next character.
002034  3               	bne :+
002034  3               	inc z80_h
002034  3               :
002034  3               	lda z80_a
002034  3               	cmp #128		; end of message?
002034  3               	bmi :+
002034  3               	jmp dbox7		; yes, job done.
002034  3               :
002034  3               	lda z80_b		; chars remaining.
002034  3               	beq :+			; are any left?
002034  3               	jmp dbox0		; yes, continue.
002034  3               :
002034  3               ;---------------------------------------------------
002034  3               ; Reached limit of characters per line.
002034  3               ;---------------------------------------------------
002034  3               
002034  3               dbox9:
002034  3               	ldy #0
002034  3               	lda (z80_hl),y		; get character.
002034  3               	inc z80_l		; next one.
002034  3               	bne :+
002034  3               	inc z80_h
002034  3               :
002034  3               	cmp #','		; another line?
002034  3               	beq dbox10		; yes, do next line.
002034  3               	cmp #13			; another line?
002034  3               	beq dbox10		; yes, do next line.
002034  3               	cmp #128		; end of message?
002034  3               	bcs :+
002034  3               	jmp dbox11		; yes, finish message.
002034  3               :
002034  3               	jmp dbox9
002034  3               
002034  3               ;---------------------------------------------------
002034  3               ; Fill box to end of line.
002034  3               ;---------------------------------------------------
002034  3               
002034  3               dboxf:
002034  3               	lda #32			; space character.
002034  3               	jsr pchr		; display character.
002034  3               	dec z80_b
002034  3               	beq :+
002034  3               	jmp dboxf		; repeat for remaining chars on line.
002034  3               :
002034  3               	rts
002034  3               dbox1:
002034  3               	inc z80_l		; skip character.
002034  3               	bne :+
002034  3               	inc z80_h
002034  3               :
002034  3               	jsr dboxf		; fill box out to right side.
002034  3               dbox10:
002034  3               	inc dispy		; y coordinate down a line next position.
002034  3               	jmp dbox2		; next line.
002034  3               dbox7:
002034  3               	lda z80_b		; chars remaining.
002034  3               	bne :+			; are any left?
002034  3               	jmp dbox11		; no, nothing to draw.
002034  3               :
002034  3               	jsr dboxf		; fill message to line.
002034  3               
002034  3               ;------------------------------------------------------
002034  3               ; Drawn the box menu, now select option.
002034  3               ;------------------------------------------------------
002034  3               
002034  3               dbox11:
002034  3               	lda btop		; box top.
002034  3               	sta dispy		; set bar position.
002034  3               dbox14:
002034  3               	jsr joykey		; get controls.
002034  3               	cmp #$7f		; anything pressed?
002034  3               	bne dbox14		; yes, debounce it.
002034  3               	jsr dbar		; draw bar.
002034  3               dbox12:
002034  3               	jsr joykey		; get controls.
002034  3               	cmp #$7f		; anything pressed?
002034  3               	beq dbox12		; no, nothing.
002034  3               	and #16			; fire button pressed?
002034  3               	bne :+
002034  3               mod1:
002034  3               	jmp fstd		; yes, job done.
002034  3               :
002034  3               	jsr dbar		; delete bar.
002034  3               
002034  3               	lda joyval		; joystick reading.
002034  3               	and #8			; going up?
002034  3               	beq dboxu		; yes, go up.
002034  3               
002034  3               	ldx dispy		; vertical position of bar.
002034  3               	inx			; look down.
002034  3               	txa
002034  3               	sec
002034  3               	sbc btop		; find distance from top.
002034  3               	cmp blen		; top of box.
002034  3               	bne :+
002034  3               	jmp dbox14		; yes, go no further.
002034  3               :
002034  3               	inc dispy		; move bar.
002034  3               	jmp dbox14		; continue.
002034  3               dboxu:
002034  3               	lda dispy		; vertical position of bar.
002034  3               	cmp btop		; are we at the top?
002034  3               	bne :+
002034  3               	jmp dbox14		; yes, go no further.
002034  3               :
002034  3               	dec dispy		; move bar.
002034  3               	jmp dbox14		; continue.
002034  3               fstd:
002034  3               	lda dispy		; bar position.
002034  3               	sec
002034  3               	sbc btop		; find selected option.
002034  3               	sta varopt		; store the option.
002034  3               	jmp redraw		; redraw the screen.
002034  3               
002034  3               ;------------------------------------------------------
002034  3               ; Option not available.  Skip this line.
002034  3               ;------------------------------------------------------
002034  3               
002034  3               dbox13:
002034  3               	ldy #0
002034  3               	lda (z80_hl),y		; get character.
002034  3               	inc z80_l		; next one.
002034  3               	bne :+
002034  3               	inc z80_h
002034  3               :
002034  3               	cmp #','		; another line?
002034  3               	bne :+
002034  3               	jmp dbox2		; yes, do next line.
002034  3               :
002034  3               	cmp #13			; another line?
002034  3               	bne :+
002034  3               	jmp dbox2		; yes, do next line.
002034  3               :
002034  3               
002034  3               	bpl :+			; end of message?
002034  3               	jmp dbox11		; yes, finish message.
002034  3               :
002034  3               	jmp dbox13
002034  3               dbox15:
002034  3               	lda TmpAddr		; pop message pointer from the stack.
002034  3               	sta z80_h
002034  3               	lda TmpAddr+1
002034  3               	sta z80_l
002034  3               	rts
002034  3               
002034  3               ;------------------------------------------------------
002034  3               ; Invert bar
002034  3               ;------------------------------------------------------
002034  3               
002034  3               dbar:
002034  3               	lda blft		; box left.
002034  3               	sta dispx		; set display coordinate.
002034  3               	jsr gprad		; get printing address.
002034  3               
002034  3               	lda bwid		; box width.
002034  3               	sta z80_c		; loop counter in c.
002034  3               	lda z80_h
002034  3               	sta z80_d		; store screen address high byte.
002034  3               dbar1:
002034  3               	ldx #7			; pixel height in b.
002034  3               dbar0:
002034  3               	ldy scrtab,x
002034  3               	lda (scraddr),y		; get screen byte.
002034  3               	eor #255		; reverse all bits.
002034  3               	sta (scraddr),y		; write back to screen.
002034  3               	dex			; next line down.
002034  3               	bpl dbar0		; draw rest of character.
002034  3               
002034  3               	inc scraddr		; one char right.
002034  3               	dec z80_c		; decrement character counter.
002034  3               	bne dbar1		; repeat for whole line.
002034  3               	rts
002034  3               
002034  3               ;------------------------------------------------------
002034  3               ; Point to object
002034  3               ;
002034  3               ; Input:
002034  3               ;  combyt
002034  3               ;
002034  3               ; Output:
002034  3               ;  A = object number, A=255 if already in possession
002034  3               ;------------------------------------------------------
002034  3               
002034  3               invdis:
002034  3               	lda z80_l		; store message text pointer.
002034  3               	pha
002034  3               	lda z80_h
002034  3               	pha
002034  3               	lda combyt		; object number.
002034  3               	inc combyt		; ready for next one.
002034  3               	jsr gotob		; check if we have object.
002034  3               	tay
002034  3               	pla
002034  3               	sta z80_h
002034  3               	pla
002034  3               	sta z80_l
002034  3               	tya
002034  3               	rts
002034  3               
002034  3               ;------------------------------------------------------
002034  3               ; Find option selected.
002034  3               ;
002034  3               ; Input:
002034  3               ;  -
002034  3               ;
002034  3               ; Output:
002034  3               ;  OPT = selected object
002034  3               ;------------------------------------------------------
002034  3               
002034  3               fopt:
002034  3               	lda dispy
002034  3               	sec
002034  3               	sbc btop		; find selected option.
002034  3               	sta tmp+2		; option selected in b register.
002034  3               	inc tmp+2
002034  3               
002034  3               	lda #0			; set to first item.
002034  3               	sta combyt		; object number.
002034  3               fopt0:
002034  3               	jsr fobj		; find next object in inventory.
002034  3               	dec tmp+2
002034  3               	bne fopt0		; repeat for relevant steps down the list.
002034  3               
002034  3               	lda combyt		; get option.
002034  3               	sta varopt		; store the option.
002034  3               	dec varopt		; one less, due to where we increment combyt.
002034  3               	jmp redraw		; redraw the screen.
002034  3               fobj:
002034  3               	ldy combyt		; object number.
002034  3               	inc combyt		; ready for next item.
002034  3               	tya
002034  3               	jsr gotob		; do we have this item?
002034  3               	cmp #255
002034  3               	bne :+
002034  3               	rts
002034  3               :
002034  3               	jmp fobj		; yes, it's on the list.
002034  3               
002034  3               ;bwid:	.byte 0              ; box/menu width.
002034  3               ;blen:	.byte 0              ; box/menu height.
002034  3               ;btop:	.byte 0              ; box coordinates.
002034  3               ;blft:	.byte 0
002034  3               .endif
002034  3               
002034  3               ;----------------------------------------------------
002034  3               ; Wait for keypress.
002034  3               ;----------------------------------------------------
002034  3               
002034  3               prskey:
002034  3  98           	tya
002035  3  48           	pha
002036  3               prsloop:
002036  3  20 68 20     	jsr vsync
002039  3  20 71 FE     	jsr READKEY
00203C  3  C0 FF        	cpy #255
00203E  3  F0 F6        	beq prsloop		; wait until key pressed
002040  3  20 BD 29     	jsr joykey
002043  3  68           	pla
002044  3  A8           	tay
002045  3  60           	rts
002046  3               
002046  3               ;----------------------------------------------------
002046  3               ; Delay routine 1/50 sec
002046  3               ;
002046  3               ; Wait 1/60 sec = 16666 usec
002046  3               ; Wait 208 x 16 =  3328 usec
002046  3               ;                 19994 usec
002046  3               ; rts           =     6 usec
002046  3               ; Total         = 20000 usec
002046  3               ;----------------------------------------------------
002046  3               
002046  3               delay:
002046  3  85 rr        	sta xtmp
002048  3               del_loop:
002048  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
00204B  3               
00204B  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
00204D  3               delay1:
00204D  3  61 80        	adc ($80,x)		;	 6 usec
00204F  3  61 80        	adc ($80,x)		;	 6 usec
002051  3  88           	dey			;	 2 usec
002052  3  D0 F9        	bne delay1		;	 2 usec
002054  3  EA           	nop			; 2 usec
002055  3  EA           	nop			; 2 usec
002056  3               				; tot: 20000 usec
002056  3  C6 rr        	dec xtmp
002058  3  D0 EE        	bne del_loop
00205A  3  60           	rts
00205B  3               
00205B  3               ;----------------------------------------------------
00205B  3               ; Clear sprite table.
00205B  3               ;
00205B  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00205B  3               ;----------------------------------------------------
00205B  3               
00205B  3               xspr:
00205B  3  A9 FF        	lda #255		; clear byte.
00205D  3  A2 00        	ldx #0			; length of table.
00205F  3               xspr0:
00205F  3  9D 15 33     	sta sprtab,x		; sprite table.
002062  3  E8           	inx			; move to next byte.
002063  3  E0 CC        	cpx #SPRBUF
002065  3  D0 F8        	bne xspr0		; repeat for rest of table.
002067  3  60           	rts
002068  3               
002068  3               ;-------------------------------------------------------------
002068  3               ; Initialise all objects.
002068  3               ;
002068  3               ; Reset current room,y,x to start room,y,x for all objects
002068  3               ;-------------------------------------------------------------
002068  3               
002068  3               .if oflag
002068  3               iniob:
002068  3               	lda #<objdta 		; objects table.
002068  3               	sta z80_x
002068  3               	lda #>objdta
002068  3               	sta z80_i
002068  3               
002068  3               	ldx numob 		; number of objects in the game.
002068  3               iniob0:
002068  3               	ldy #35
002068  3               	lda (z80_ix),y 		; start screen.
002068  3               	ldy #32
002068  3               	sta (z80_ix),y 		; set start screen.
002068  3               
002068  3               	ldy #36
002068  3               	lda (z80_ix),y 		; find start y.
002068  3               	ldy #33
002068  3               	sta (z80_ix),y 		; set start y.
002068  3               
002068  3               	ldy #37
002068  3               	lda (z80_ix),y 		; get initial x.
002068  3               	ldy #34
002068  3               	sta (z80_ix),y 		; set x coord.
002068  3               
002068  3               	clc 			; point to next object.
002068  3               	lda z80_x
002068  3               	adc #38			; distance between objects.
002068  3               	sta z80_x
002068  3               	bcc :+
002068  3               	inc z80_i
002068  3               :
002068  3               	dex 			; repeat.
002068  3               	bne iniob0
002068  3               
002068  3               	rts
002068  3               .endif
002068  3               
002068  3               ;-------------------------------------------------------------
002068  3               ; Screen synchronisation.
002068  3               ;
002068  3               ;  - read joystick/keyboard
002068  3               ;  - handle sound
002068  3               ;  - sync framerate with clock
002068  3               ;  - handle shrapnel every even frame
002068  3               ;-------------------------------------------------------------
002068  3               
002068  3               vsync:
002068  3  48           	pha
002069  3  98           	tya
00206A  3  48           	pha
00206B  3  8A           	txa
00206C  3  48           	pha
00206D  3  20 BD 29     	jsr joykey		; read joystick/keyboard.
002070  3               vsync1:
002070  3  AD 09 B8     	lda Timer2_High		; sync framerate with clock
002073  3  C9 FF        	cmp #$ff
002075  3  D0 F9        	bne vsync1
002077  3  A9 C3        	lda #>50000
002079  3  8D 09 B8     	sta Timer2_High
00207C  3  A9 50        	lda #<50000
00207E  3  8D 08 B8     	sta Timer2_Low
002081  3               
002081  3  A5 rr        	lda clock
002083  3  29 01        	and #1
002085  3  D0 03        	bne:+
002087  3  20 03 21     	jsr proshr		; handle shrapnel every even frame
00208A  3               :
00208A  3  AD A8 20     	lda sndtyp
00208D  3  F0 13        	beq sndskip
00208F  3               sndloop:
00208F  3  AD 02 B0     	lda SpeakerBit		; handle sound
002092  3  AC A8 20     	ldy sndtyp
002095  3               sndwait:
002095  3  88           	dey
002096  3  D0 FD        	bne sndwait
002098  3  49 04        	eor #4
00209A  3  8D 02 B0     	sta SpeakerBit
00209D  3  CE A8 20     	dec sndtyp
0020A0  3  D0 ED        	bne sndloop
0020A2  3               sndskip:
0020A2  3  68           	pla
0020A3  3  AA           	tax
0020A4  3  68           	pla
0020A5  3  A8           	tay
0020A6  3  68           	pla
0020A7  3  60           	rts
0020A8  3               
0020A8  3  00           sndtyp:	.byte 0
0020A9  3               
0020A9  3               ;-----------------------------------------------
0020A9  3               ; Redraw the screen.
0020A9  3               ;
0020A9  3               ; Remove old copy of all sprites for redraw.
0020A9  3               ;-----------------------------------------------
0020A9  3               
0020A9  3               redraw:
0020A9  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
0020AB  3  48           	pha
0020AC  3  A5 68        	lda z80_x
0020AE  3  48           	pha
0020AF  3               
0020AF  3  20 1F 26     	jsr droom		; show screen layout.
0020B2  3               .if oflag
0020B2  3               	jsr shwob		; draw objects.
0020B2  3               .endif
0020B2  3               numsp0:
0020B2  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0020B4  3  85 rr        	sta tmp
0020B6  3               
0020B6  3  A9 15        	lda #<sprtab		; sprite table.
0020B8  3  85 68        	sta z80_x
0020BA  3  A9 33        	lda #>sprtab
0020BC  3  85 69        	sta z80_i
0020BE  3               redrw0:
0020BE  3  A0 00        	ldy #0
0020C0  3  B1 68        	lda (z80_ix),y		; old sprite type.
0020C2  3  C9 FF        	cmp #255		; is it enabled?
0020C4  3  F0 0B        	beq redrw1 		; no, find next one.
0020C6  3               
0020C6  3  A0 03        	ldy #3
0020C8  3  B1 68        	lda (z80_ix),y 		; sprite y.
0020CA  3  C9 B1        	cmp #177		; beyond maximum?
0020CC  3  B0 03        	bcs redrw1		; yes, nothing to draw.
0020CE  3               
0020CE  3  20 DE 2D     	jsr sspria		; show single sprite.
0020D1  3               redrw1:
0020D1  3  18           	clc			; next sprite.
0020D2  3  A5 68        	lda z80_x
0020D4  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
0020D6  3  85 68        	sta z80_x
0020D8  3  90 02        	bcc :+
0020DA  3  E6 69        	inc z80_i
0020DC  3               :
0020DC  3  C6 rr        	dec tmp			; repeat for remaining sprites.
0020DE  3  D0 DE        	bne redrw0
0020E0  3               rpblc1:
0020E0  3               ;	jsr dshrp		; redraw shrapnel.
0020E0  3               
0020E0  3               .if aflag
0020E0  3               	jsr rbloc		; draw blocks for this screen
0020E0  3               .endif
0020E0  3  68           	pla			; retrieve sprite pointer.
0020E1  3  85 68        	sta z80_x
0020E3  3  68           	pla
0020E4  3  85 69        	sta z80_i
0020E6  3               
0020E6  3  60           	rts
0020E7  3               
0020E7  3               ;----------------------------------------------------------------------
0020E7  3               ; Clear screen routine.
0020E7  3               ;
0020E7  3               ; Fill screenmem $8000-$97ff with ScrFillByte
0020E7  3               ;----------------------------------------------------------------------
0020E7  3               
0020E7  3               cls:
0020E7  3  A9 E4        	lda #>ScreenAddr		; screen address.
0020E9  3  8D F3 20     	sta clsloop+2
0020EC  3  AD 18 34     	lda andeor+1
0020EF  3               .if iflag
0020EF  3               	eor #$ff
0020EF  3               .endif
0020EF  3  A0 00        	ldy #0
0020F1  3               clsloop:
0020F1  3  99 00 E4     	sta ScreenAddr,y
0020F4  3  C8           	iny
0020F5  3  D0 FA        	bne clsloop
0020F7  3  EE F3 20     	inc clsloop+2
0020FA  3  AE F3 20     	ldx clsloop+2
0020FD  3  E0 FC        	cpx #>(ScreenAddr+$1800)
0020FF  3  D0 F0        	bne clsloop
002101  3  60           	rts
002102  3               
002102  3               ;----------------------------------------------------------------------
002102  3               ; Atomic palette is static
002102  3               ;----------------------------------------------------------------------
002102  3               
002102  3               setpal:
002102  3  60           	rts
002103  3               
002103  3               ;----------------------------------------------------------------------
002103  3               ; FODDER check
002103  3               ;----------------------------------------------------------------------
002103  3               
002103  3               .if pflag .or dflag
002103  3               fdchk:
002103  3               	cmp #FODDER 		; is it fodder?
002103  3               	beq :+
002103  3               	rts 			; no.
002103  3               :
002103  3               	lda #0			; wipe fodder in MAP
002103  3               	ldy #0
002103  3               	sta (bufaddr),y 	; rewrite block type.
002103  3               
002103  3               	lda dispx		; x=x/8
002103  3               	pha
002103  3               	lsr a
002103  3               	lsr a
002103  3               	lsr a
002103  3               	sta dispx
002103  3               
002103  3               	lda dispy		; y=y/8
002103  3               	pha
002103  3               	lsr a
002103  3               	lsr a
002103  3               	lsr a
002103  3               	sta dispy
002103  3               
002103  3               	lda #0 			; block to write.
002103  3               	jsr pattr 		; write block.
002103  3               
002103  3               	pla
002103  3               	sta dispy
002103  3               	pla
002103  3               	sta dispx
002103  3               	rts
002103  3               .endif
002103  3               
002103  3               ;----------------------------------------------------
002103  3               ; Scrolly text and puzzle variables.
002103  3               ;----------------------------------------------------
002103  3               
002103  3               .if sflag
002103  3               txtbit:	.byte 128		; bit to write.
002103  3               txtwid:	.byte 16		; width of ticker message.
002103  3               txtpos:	.word msgdat
002103  3               txtini:	.word msgdat
002103  3               txtscr:	.word ScreenAddr
002103  3               .endif
002103  3               
002103  3               ;----------------------------------------------------
002103  3               ; Specialist routines.
002103  3               ; Process shrapnel.
002103  3               ;----------------------------------------------------
002103  3               proshr:
002103  3               .if pflag
002103  3               	lda #<SHRAPN		; table.
002103  3               	sta z80_x
002103  3               	lda #>SHRAPN
002103  3               	sta z80_i
002103  3               
002103  3               	lda #NUMSHR		; shrapnel pieces to process.
002103  3               	sta shrctr
002103  3               prosh0:
002103  3               	ldy #0
002103  3               	lda (z80_ix),y		; on/off marker.
002103  3               	asl a
002103  3               proshx:
002103  3               	bcs :+
002103  3               	jsr prosh1 		; on, so process it.
002103  3               :
002103  3               	clc
002103  3               	lda z80_x
002103  3               	adc #SHRSIZ
002103  3               	sta z80_x
002103  3               	bcc :+
002103  3               	inc z80_i
002103  3               :
002103  3               	dec shrctr		; round again.
002103  3               	bne prosh0
002103  3               .endif
002103  3               .if sflag
002103  3               	jsr scrly
002103  3               .endif
002103  3  60           	rts
002104  3               
002104  3               .if pflag
002104  3               ;shrctr:	.byte 0
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Proces shrapnel piece
002104  3               ;----------------------------------------------------
002104  3               
002104  3               prosh1:
002104  3               	jsr plot 		; delete the pixel.
002104  3               
002104  3               	lda #<shrptr		; shrapnel routine pointers.
002104  3               	sta z80_l
002104  3               	lda #>shrptr
002104  3               	sta z80_h
002104  3               
002104  3               	ldy #0
002104  3               	lda (z80_ix),y		; restore shrapnel type.
002104  3               	jsr prosh2 		; run the routine.
002104  3               	jsr chkxy		; check x and y are good before we redisplay.
002104  3               
002104  3               	lda #<SHRSIZ 		; distance to next.
002104  3               	sta z80_e
002104  3               	lda #>SHRSIZ
002104  3               	sta z80_d
002104  3               	rts
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Run the routine
002104  3               ;----------------------------------------------------
002104  3               
002104  3               prosh2:
002104  3               	asl a 			; 2 bytes per address.
002104  3               	tay
002104  3               	lda shrptr,y
002104  3               	sta z80_l
002104  3               	lda shrptr+1,y 		; fetch high byte from table.
002104  3               	sta z80_h
002104  3               	jmp (z80_hl) 		; jump to routine.
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Paricle routine table
002104  3               ;----------------------------------------------------
002104  3               
002104  3               shrptr:	.word laser		; laser.
002104  3               	.word trail		; vapour trail.
002104  3               	.word shrap		; shrapnel from explosion.
002104  3               	.word dotl		; horizontal starfield left.
002104  3               	.word dotr		; horizontal starfield right.
002104  3               	.word dotu		; vertical starfield up.
002104  3               	.word dotd		; vertical starfield down.
002104  3               	.word ptcusr		; user particle.
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Explosion shrapnel.
002104  3               ;----------------------------------------------------
002104  3               
002104  3               shrap:
002104  3               	ldy #1
002104  3               	lda (z80_ix),y 		; get the angle.
002104  3               	clc
002104  3               	adc #<shrsin		; shrapnel sine table.
002104  3               	sta z80_l
002104  3               	lda #>shrsin
002104  3               	adc #0
002104  3               	sta z80_h
002104  3               
002104  3               	ldy #0
002104  3               	lda (z80_hl),y 		; fetch value from table.
002104  3               	sta z80_e
002104  3               	inc z80_l 		; next byte of table.
002104  3               	bne :+
002104  3               	inc z80_h
002104  3               :
002104  3               	ldy #0
002104  3               	lda (z80_hl),y		; fetch value from table.
002104  3               	sta z80_d
002104  3               	inc z80_l		; next byte of table.
002104  3               	bne :+
002104  3               	inc z80_h
002104  3               :
002104  3               	ldy #0
002104  3               	lda (z80_hl),y 		; fetch value from table.
002104  3               	sta z80_c
002104  3               	inc z80_l 		; next byte of table.
002104  3               	bne :+
002104  3               	inc z80_h
002104  3               :
002104  3               	ldy #0
002104  3               	lda (z80_hl),y 		; fetch value from table.
002104  3               	sta z80_b
002104  3               
002104  3               	ldy #2
002104  3               	lda (z80_ix),y 		; x coordinate in hl.
002104  3               	clc
002104  3               	adc z80_e		; add sine lb
002104  3               	sta (z80_ix),y		; store new coordinate lb.
002104  3               	ldy #3
002104  3               	lda (z80_ix),y
002104  3               	adc z80_d		; add sine hb
002104  3               	sta (z80_ix),y		; store new coordinate hb.
002104  3               
002104  3               	ldy #4
002104  3               	lda (z80_ix),y	 	; y coordinate in hl.
002104  3               	clc
002104  3               	adc z80_c		; add cosine lb
002104  3               	sta (z80_ix),y		; store new coordinate lb.
002104  3               	ldy #5
002104  3               	lda (z80_ix),y
002104  3               	adc z80_b		; add cosine lb
002104  3               	sta (z80_ix),y		; store new coordinate hb.
002104  3               
002104  3               	rts
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Move dots
002104  3               ;----------------------------------------------------
002104  3               
002104  3               dotl:
002104  3               	ldy #5
002104  3               	lda (z80_ix),y
002104  3               	sec
002104  3               	sbc #1		 	; move left.
002104  3               	sta (z80_ix),y
002104  3               	rts
002104  3               dotr:
002104  3               	ldy #5
002104  3               	lda (z80_ix),y
002104  3               	clc
002104  3               	adc #1		 	; move left.
002104  3               	sta (z80_ix),y
002104  3               	rts
002104  3               dotu:
002104  3               	ldy #3
002104  3               	lda (z80_ix),y
002104  3               	sec
002104  3               	sbc #1		 	; move up.
002104  3               	sta (z80_ix),y
002104  3               	rts
002104  3               dotd:
002104  3               	ldy #3
002104  3               	lda (z80_ix),y
002104  3               	clc
002104  3               	adc #1			; move down.
002104  3               	sta (z80_ix),y
002104  3               	rts
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Check if coordinates are ok before redrawing at new position.
002104  3               ;
002104  3               ; left:   X>L		X=L	Ok
002104  3               ; right:  R+15>X	X=R	Ok
002104  3               ; top:    Y>T		Y=T	Ok
002104  3               ; bottom: B+15>Y	Y=B	Ok
002104  3               ;----------------------------------------------------
002104  3               
002104  3               chkxy:
002104  3               
002104  3               ; top:    Y>T		Y=T	Ok
002104  3               
002104  3               	ldy #3
002104  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002104  3               	cmp wntopx		; window top.
002104  3               	bcs :+			; compare with top window limit.
002104  3               	jmp kilshr		; out of window, kill shrapnel.
002104  3               :
002104  3               ; left:   X>L		X=L	Ok
002104  3               
002104  3               	ldy #5
002104  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002104  3               	cmp wnlftx		; left edge.
002104  3               	bcs :+			; compare with left window limit.
002104  3               	jmp kilshr		; out of window, kill shrapnel.
002104  3               :
002104  3               ; bottom: B+15>Y	Y=B	Ok
002104  3               
002104  3               	lda wnbotx		; point to bottom.
002104  3               	clc
002104  3               	adc #15
002104  3               	ldy #3
002104  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002104  3               	bcs :+			; compare with shrapnel x coordinate.
002104  3               	jmp kilshr		; off screen, kill shrapnel..
002104  3               :
002104  3               ; right:  R+15>X	X=R	Ok
002104  3               
002104  3               	lda wnrgtx		; point to right edge.
002104  3               	clc
002104  3               	adc #15
002104  3               	ldy #5
002104  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002104  3               	bcs :+			; compare with window limit.
002104  3               	jmp kilshr		; off screen, kill shrapnel.
002104  3               :
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Drop through.
002104  3               ; Display shrapnel.
002104  3               ;----------------------------------------------------
002104  3               
002104  3               plot:
002104  3               	ldy #3
002104  3               	lda (z80_ix),y		; y integer.
002104  3               	sta dispy	 	; workspace coordinates.
002104  3               	ldy #5
002104  3               	lda (z80_ix),y	 	; x integer.
002104  3               	sta dispx 		; workspace coordinates.
002104  3               
002104  3               	ldy #0
002104  3               	lda (z80_ix),y 		; type.
002104  3               	bne :+			; is it a laser?
002104  3               	jmp plot1 		; yes, draw laser instead.
002104  3               :
002104  3               plot0:
002104  3               	lda dispx		; which pixel within byte do we
002104  3               	and #7			; want to set first?
002104  3               	tay
002104  3               	lda dots,y 		; table of small pixel positions.
002104  3               	sta z80_e 		; get value.
002104  3               
002104  3               	jsr scadd 		; screen address.
002104  3               	ldy #0
002104  3               	lda (scraddr),y		; see what's already there.
002104  3               	eor z80_e
002104  3               	sta (scraddr),y 	; put back on screen.
002104  3               	rts
002104  3               
002104  3               plot1:
002104  3               	jsr scadd 		; screen address.
002104  3               	ldy #0
002104  3               	lda (scraddr),y 	; fetch byte there.
002104  3               	eor #255 		; toggle all bits.
002104  3               	sta (scraddr),y 	; new byte.
002104  3               	rts
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Switch off shrapnel
002104  3               ;----------------------------------------------------
002104  3               
002104  3               kilshr:
002104  3               	lda #128
002104  3               	ldy #0
002104  3               	sta (z80_ix),y	; switch off shrapnel.
002104  3               	rts
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Sine/cosine table
002104  3               ;----------------------------------------------------
002104  3               
002104  3               shrsin:	.word 0,1024,391,946,724,724,946,391
002104  3               	.word 1024,0,946,65144,724,64811,391,64589
002104  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
002104  3               	.word 64512,0,64589,391,64811,724,65144,946
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Create trail
002104  3               ;----------------------------------------------------
002104  3               
002104  3               trail:
002104  3               	ldy #1
002104  3               	lda (z80_ix),y 	; time remaining.
002104  3               	sec
002104  3               	sbc #1
002104  3               	sta (z80_ix),y
002104  3               	bne :+
002104  3               	jmp trailk		; time to switch it off.
002104  3               :
002104  3               	jsr qrand		; get a random number.
002104  3               	lsr a 			; x or y axis?
002104  3               	bcc :+
002104  3               	jmp trailv		; use y.
002104  3               :
002104  3               ; Trail horizontal
002104  3               
002104  3               	lsr a 			; which direction?
002104  3               	bcc :+
002104  3               	jmp traill		; go left.
002104  3               :
002104  3               ; Trail right
002104  3               
002104  3               	ldy #5
002104  3               	lda (z80_ix),y
002104  3               	clc
002104  3               	adc #1	 		; go right.
002104  3               	sta (z80_ix),y
002104  3               	rts
002104  3               
002104  3               ; Trail left
002104  3               
002104  3               traill:
002104  3               	ldy #5
002104  3               	lda (z80_ix),y
002104  3               	sec
002104  3               	sbc #1 			; go left.
002104  3               	sta (z80_ix),y
002104  3               	rts
002104  3               
002104  3               ; Trail vertical
002104  3               
002104  3               trailv:
002104  3               	lsr a		 	; which direction?
002104  3               	bcc :+
002104  3               	jmp trailu		; go up.
002104  3               :
002104  3               ; Trail down
002104  3               
002104  3               	ldy #3
002104  3               	lda (z80_ix),y
002104  3               	clc
002104  3               	adc #1 			; go down.
002104  3               	sta (z80_ix),y
002104  3               	rts
002104  3               
002104  3               ; Trail up
002104  3               
002104  3               trailu:
002104  3               	ldy #3
002104  3               	lda (z80_ix),y
002104  3               	sec
002104  3               	sbc #1 			; go up.
002104  3               	sta (z80_ix),y
002104  3               	rts
002104  3               
002104  3               ; Kill trail
002104  3               
002104  3               trailk:
002104  3               	lda #200		; set off-screen to kill vapour trail.
002104  3               	ldy #3
002104  3               	sta (z80_ix),y
002104  3               	rts
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Create laser beam
002104  3               ;----------------------------------------------------
002104  3               
002104  3               laser:
002104  3               	ldy #1
002104  3               	lda (z80_ix),y 		; direction.
002104  3               	ror a 			; left or right?
002104  3               	bcs :+
002104  3               	jmp laserl		; move left.
002104  3               :
002104  3               ; Laser right
002104  3               
002104  3               	lda #8			; distance to travel.
002104  3               	sta z80_b
002104  3               	jmp laserm		; move laser.
002104  3               
002104  3               ; Laser left
002104  3               
002104  3               laserl:
002104  3               	lda #248		; distance to travel.
002104  3               	sta z80_b
002104  3               laserm:
002104  3               	ldy #5
002104  3               	lda (z80_ix),y		; x position.
002104  3               	clc
002104  3               	adc z80_b		; add distance.
002104  3               	sta (z80_ix),y		; set new x coordinate.
002104  3               
002104  3               ; Test new block.
002104  3               
002104  3               	sta dispx 		; set x for block collision detection purposes.
002104  3               	ldy #3
002104  3               	lda (z80_ix),y 		; get y.
002104  3               	sta dispy		; set coordinate for collision test.
002104  3               	jsr tstbl 		; get block type there.
002104  3               	cmp #WALL		; is it solid?
002104  3               	bne :+
002104  3               	jmp trailk		; yes, it cannot pass.
002104  3               :
002104  3               .if pflag .or dflag
002104  3                       cmp #FODDER             ; is it fodder?
002104  3                       bne :+
002104  3                       jsr fdchk               ; remove fodder block.
002104  3                       jmp trailk              ; destroy laser.
002104  3               :
002104  3               .endif
002104  3                       rts                     ; no, ignore it.
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Dots mask
002104  3               ;----------------------------------------------------
002104  3               
002104  3               dots:	.byte 128,64,32,16,8,4,2,1
002104  3               
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Plot, preserving de.
002104  3               ;----------------------------------------------------
002104  3               
002104  3               plotde:
002104  3               	lda z80_d 		; put de on stack.
002104  3               	pha
002104  3               	lda z80_e
002104  3               	pha
002104  3               
002104  3               	jsr plot 		; plot pixel.
002104  3               
002104  3               	pla			; restore de from stack.
002104  3               	sta z80_e
002104  3               	pla
002104  3               	sta z80_d
002104  3               
002104  3               	rts
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Shoot a laser.
002104  3               ;----------------------------------------------------
002104  3               
002104  3               shoot:
002104  3               	sta z80_c		; store direction in c register.
002104  3               	ldy #8
002104  3               	lda (z80_ix),y 		; y coordinate.
002104  3               	clc
002104  3               shoot1:
002104  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
002104  3               	sta z80_l 		; puty y coordinate in l.
002104  3               
002104  3               	ldy #9
002104  3               	lda (z80_ix),y 		; x coordinate in h.
002104  3               	sta z80_h
002104  3               
002104  3               	lda z80_i		; store pointer to sprite.
002104  3               	pha
002104  3               	lda z80_x
002104  3               	pha
002104  3               
002104  3               	jsr fpslot 		; find particle slot.
002104  3               	bcs :+
002104  3               	jmp vapou2		; failed, restore ix.
002104  3               :
002104  3               	lda #0
002104  3               	ldy #0
002104  3               	sta (z80_ix),y 		; set up a laser.
002104  3               
002104  3               	lda z80_c
002104  3               	ldy #1
002104  3               	sta (z80_ix),y 		; set the direction.
002104  3               
002104  3               	lda z80_l
002104  3               	ldy #3
002104  3               	sta (z80_ix),y		; set y coordinate.
002104  3               
002104  3               	ror z80_c		; check direction we want.
002104  3               	bcc :+
002104  3               	jmp shootr		; shoot right.
002104  3               :
002104  3               	lda z80_h		; X position.
002104  3               shoot0:
002104  3               	and #248		; align on character boundary.
002104  3               	ldy #5
002104  3               	sta (z80_ix),y		; set x coordinate.
002104  3               	jmp vapou0 		; draw first image.
002104  3               shootr:
002104  3               	lda z80_h		; x position.
002104  3               	clc
002104  3               	adc #15			; look right.
002104  3               	jmp shoot0		; align and continue.
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Create a bit of vapour trail.
002104  3               ;----------------------------------------------------
002104  3               
002104  3               vapour:
002104  3               	lda z80_i		; store pointer to sprite.
002104  3               	pha
002104  3               	lda z80_x
002104  3               	pha
002104  3               
002104  3               	ldy #8
002104  3               	lda (z80_ix),y 		; y coordinate.
002104  3               	clc
002104  3               vapou3:
002104  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
002104  3               	sta z80_l
002104  3               
002104  3               	ldy #9
002104  3               	lda (z80_ix),y 		; x coordinate.
002104  3               	adc #7
002104  3               	sta z80_h
002104  3               
002104  3               	jsr fpslot 		; find particle slot.
002104  3               	bcc :+
002104  3               	jmp vapou1		; no, we can use it.
002104  3               :
002104  3               vapou2:
002104  3               	pla
002104  3               	sta z80_x
002104  3               	pla
002104  3               	sta z80_i
002104  3               	rts
002104  3               vapou1:
002104  3               	lda z80_l
002104  3               	ldy #3
002104  3               	sta (z80_ix),y		; set up y.
002104  3               
002104  3               	lda z80_h
002104  3               	ldy #5
002104  3               	sta (z80_ix),y 		; set up x coordinate.
002104  3               
002104  3               	jsr qrand		; get quick random number.
002104  3               	and #15			; random time.
002104  3               	clc
002104  3               	adc #15			; minimum time on screen.
002104  3               	ldy #1
002104  3               	sta (z80_ix),y		; set time on screen.
002104  3               
002104  3               	lda #1
002104  3               	ldy #0
002104  3               	sta (z80_ix),y		; define particle as vapour trail.
002104  3               vapou0:
002104  3               	jsr chkxy		; plot first position.
002104  3               	jmp vapou2
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Create a user particle.
002104  3               ;----------------------------------------------------
002104  3               
002104  3               ptusr:
002104  3               	sta z80_f		; store timer.
002104  3               
002104  3               	ldy #8
002104  3               	lda (z80_ix),y 		; y coordinate.
002104  3               	clc
002104  3               	adc #7			; mid-point of sprite.
002104  3               	sta z80_l
002104  3               
002104  3               	ldy #9
002104  3               	lda (z80_ix),y 		; x coordinate.
002104  3               	clc
002104  3               	adc #7			; mid-point of sprite.
002104  3               	sta z80_h
002104  3               
002104  3               	jsr fpslot 		; find particle slot.
002104  3               	bcs ptusr1
002104  3               	rts 			; out of slots, can't generate anything.
002104  3               ptusr1:
002104  3               	lda z80_l
002104  3               	ldy #3
002104  3               	sta (z80_ix),y 		; set up y.
002104  3               
002104  3               	lda z80_h
002104  3               	ldy #5
002104  3               	sta (z80_ix),y		; set up x coordinate.
002104  3               
002104  3               	lda z80_f 		; restore timer.
002104  3               	ldy #1
002104  3               	sta (z80_ix),y		; set time on screen.
002104  3               
002104  3               	lda #7
002104  3               	ldy #0
002104  3               	sta (z80_ix),y		; define particle as user particle.
002104  3               
002104  3               	jmp chkxy		; plot first position.
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Create a vertical or horizontal star.
002104  3               ;----------------------------------------------------
002104  3               
002104  3               star:
002104  3               	lda z80_i		; store pointer to sprite.
002104  3               	pha
002104  3               	lda z80_x
002104  3               	pha
002104  3               
002104  3               	jsr fpslot 		; find particle slot.
002104  3               	bcs star7		; found one we can use.
002104  3               star0:
002104  3               	pla 			; restore sprite pointer.
002104  3               	sta z80_x
002104  3               	pla
002104  3               	sta z80_i
002104  3               	rts 			; out of slots, can't generate anything.
002104  3               star7:
002104  3               	lda z80_c		; direction.
002104  3               	and #3 			; is it left?
002104  3               	bne :+
002104  3               	jmp star1 		; yes, it's left.
002104  3               :
002104  3               	cmp #1 			; is it right?
002104  3               	bne :+
002104  3               	jmp star2 		; yes, it's right.
002104  3               :
002104  3               	cmp #2 			; is it up?
002104  3               	bne :+
002104  3               	jmp star3 		; yes, it's up.
002104  3               :
002104  3               	ldy wntopx 		; get edge of screen.
002104  3               	iny			; down one pixel.
002104  3               	tya
002104  3               star8:
002104  3               	ldy #3
002104  3               	sta (z80_ix),y 		; set y coord.
002104  3               	jsr qrand 		; get quick random number.
002104  3               star9:
002104  3               	ldy #5
002104  3               	sta (z80_ix),y		; set x position.
002104  3               
002104  3               	lda z80_c		; direction.
002104  3               	and #3			; zero to three.
002104  3               	clc
002104  3               	adc #3			; 3 to 6 for starfield.
002104  3               	ldy #0
002104  3               	sta (z80_ix),y		; define particle as star.
002104  3               	jsr chkxy		; plot first position.
002104  3               	jmp star0
002104  3               star1:
002104  3               	jsr qrand		; get quick random number.
002104  3               	ldy #3
002104  3               	sta (z80_ix),y 		; set y coord.
002104  3               
002104  3               	lda wnrgtx 		; get edge of screen.
002104  3               	clc
002104  3               	adc #15			; add width of sprite minus 1.
002104  3               	jmp star9
002104  3               star2:
002104  3               	jsr qrand 		; get quick random number.
002104  3               	ldy #3
002104  3               	sta (z80_ix),y		; set y coord.
002104  3               
002104  3               	lda wnlftx		; get edge of screen.
002104  3               	jmp star9
002104  3               star3:
002104  3               	lda wnbotx 		; get edge of screen.
002104  3               	clc
002104  3               	adc #15 		; height of sprite minus one pixel.
002104  3               	jmp star8
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Find particle slot for lasers or vapour trail.
002104  3               ; can't use alternate accumulator.
002104  3               ;----------------------------------------------------
002104  3               
002104  3               fpslot:
002104  3               	lda #<SHRAPN 		; shrapnel table.
002104  3               	sta z80_x
002104  3               	lda #>SHRAPN
002104  3               	sta z80_i
002104  3               
002104  3               	lda #NUMSHR		; number of pieces in table.
002104  3               	sta z80_b
002104  3               fpslt0:
002104  3               	ldy #0
002104  3               	lda (z80_ix),y		; get type.
002104  3               	asl a  			; is this slot in use?
002104  3               	bcc :+
002104  3               	rts			; no, we can use it.
002104  3               :
002104  3               	clc			; point to more shrapnel.
002104  3               	lda z80_x
002104  3               	adc #SHRSIZ
002104  3               	sta z80_x
002104  3               	bcc :+
002104  3               	inc z80_i
002104  3               :
002104  3               	dec z80_b		; repeat for all shrapnel.
002104  3               	bne fpslt0
002104  3               
002104  3               	clc
002104  3               	rts 			; out of slots, can't generate anything.
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Create an explosion at sprite position.
002104  3               ;----------------------------------------------------
002104  3               
002104  3               explod:
002104  3               	sta z80_c 		; particles to create.
002104  3               
002104  3               	lda z80_i 		; store pointer to sprite.
002104  3               	pha
002104  3               	lda z80_x
002104  3               	pha
002104  3               
002104  3               	ldy #8
002104  3               	lda (z80_ix),y 		; y coordinate.
002104  3               	sta z80_l
002104  3               	ldy #9
002104  3               	lda (z80_ix),y		; x coordinate.
002104  3               	sta z80_h
002104  3               
002104  3               	lda #<SHRAPN		; shrapnel table.
002104  3               	sta z80_x
002104  3               	lda #>SHRAPN
002104  3               	sta z80_i
002104  3               
002104  3               	lda #NUMSHR		; number of pieces in table.
002104  3               	sta explcnt
002104  3               expld0:
002104  3               	ldy #0
002104  3               	lda (z80_ix),y		; get type.
002104  3               	asl a 			; is this slot in use?
002104  3               	bcs expld1		; no, we can use it.
002104  3               expld2:
002104  3               	clc
002104  3               	lda z80_x
002104  3               	adc #SHRSIZ
002104  3               	sta z80_x
002104  3               	bcc :+
002104  3               	inc z80_i
002104  3               :
002104  3               	dec explcnt		; repeat for all shrapnel.
002104  3               	bne expld0
002104  3               expld3:
002104  3               	pla			; restore sprite pointer.
002104  3               	sta z80_x
002104  3               	pla
002104  3               	sta z80_i
002104  3               	rts 			; out of slots, can't generate any more.
002104  3               
002104  3               expld1:
002104  3               	lda z80_c		; shrapnel counter.
002104  3               	and #15			; 0 to 15.
002104  3               	clc			; add to x.
002104  3               	adc z80_l
002104  3               	ldy #3
002104  3               	sta (z80_ix),y		; y coord.
002104  3               
002104  3               	lda seed3 		; crap random number.
002104  3               	and #15			; 0 to 15.
002104  3               	clc 			; add to y.
002104  3               	adc z80_h
002104  3               	ldy #5
002104  3               	sta (z80_ix),y		; x coord.
002104  3               
002104  3               	lda #2
002104  3               	ldy #0
002104  3               	sta (z80_ix),y		; switch it on.
002104  3               
002104  3               	jsr chkxy		; plot first position.
002104  3               	jsr qrand		; quick random angle.
002104  3               	and #60 		; keep within range.
002104  3               	ldy #1
002104  3               	sta (z80_ix),y		; angle.
002104  3               
002104  3               	dec z80_c		; one less piece of shrapnel to generate.
002104  3               	bne expld2 		; back to main explosion loop.
002104  3               	jmp expld3 		; restore sprite pointer and exit.
002104  3               
002104  3               ;explcnt:	.byte 0
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Quick random
002104  3               ;----------------------------------------------------
002104  3               
002104  3               qrand:
002104  3               	jsr random		; r register.
002104  3               	eor seed3		; combine with seed.
002104  3               	sta seed3 		; new seed.
002104  3               	rts
002104  3               
002104  3               ;seed3:	.byte 0
002104  3               
002104  3               ;----------------------------------------------------
002104  3               ; Display all shrapnel.
002104  3               ;----------------------------------------------------
002104  3               
002104  3               dshrp:
002104  3               	lda #<plotde		; display routine.
002104  3               	sta proshx+1
002104  3               	lda #>plotde
002104  3               	sta proshx+2
002104  3               	jsr proshr		; process shrapnel.
002104  3               
002104  3               	lda #<prosh1		; processing routine.
002104  3               	sta proshx+1
002104  3               	lda #>prosh1
002104  3               	sta proshx+2
002104  3               	rts
002104  3               
002104  3               ;------------------------------------------------------
002104  3               ; Particle engine.
002104  3               ;
002104  3               ; Init particle data for 55 particles in SHRAPN table.
002104  3               ; Every particle has 6 bytes.
002104  3               ;
002104  3               ; global:	-
002104  3               ; local:	x,y,hl
002104  3               ; calls:	-
002104  3               ;------------------------------------------------------
002104  3               
002104  3               inishr:
002104  3               	lda #<SHRAPN 		; table.
002104  3               	sta z80_l
002104  3               	lda #>SHRAPN
002104  3               	sta z80_h
002104  3               
002104  3               	ldy #0
002104  3               	ldx #NUMSHR		; shrapnel pieces to process.
002104  3               inish0:
002104  3               	lda #255 		; kill the shrapnel.
002104  3               	sta (z80_hl),y
002104  3               
002104  3               	clc 			; point there.
002104  3               	lda z80_l
002104  3               	adc #SHRSIZ		; distance to next.
002104  3               	sta z80_l
002104  3               	bcc :+
002104  3               	inc z80_h
002104  3               :
002104  3               	dex
002104  3               	bne inish0 		; round again.
002104  3               	rts
002104  3               
002104  3               ;------------------------------------------------------
002104  3               ; Check for collision between laser and sprite.
002104  3               ;------------------------------------------------------
002104  3               
002104  3               lcol:
002104  3               	lda #<SHRAPN		; shrapnel table.
002104  3               	sta z80_l
002104  3               	lda #>SHRAPN
002104  3               	sta z80_h
002104  3               
002104  3               	lda #NUMSHR		; number of pieces in table.
002104  3               	sta z80_b
002104  3               lcol0:
002104  3               	ldy #0
002104  3               	lda (z80_hl),y 		; get type.
002104  3               	beq lcol1		; yes, check collision.
002104  3               lcol3:
002104  3               	clc			; point to more shrapnel.
002104  3               	lda z80_l
002104  3               	adc #SHRSIZ
002104  3               	sta z80_l
002104  3               	bcc :+
002104  3               	inc z80_h
002104  3               :
002104  3               	dec z80_b		; repeat for all shrapnel.
002104  3               	bne lcol0
002104  3               	rts 			; no collision, carry not set.
002104  3               lcol1:
002104  3               	ldy #3
002104  3               	lda (z80_hl),y		; get y.
002104  3               	sec
002104  3               	ldy #8
002104  3               	sbc (z80_ix),y		; subtract sprite y.
002104  3               lcolh:
002104  3               	cmp #SPR_HGT 		; within range?
002104  3               	bcc :+
002104  3               	jmp lcol2		; no, missed.
002104  3               :
002104  3               	ldy #5
002104  3               	lda (z80_hl),y 		; get x.
002104  3               	sec
002104  3               	ldy #9
002104  3               	sbc (z80_ix),y 		; subtract sprite y.
002104  3               	cmp #16			; within range?
002104  3               	bcs :+
002104  3               	jmp lcol4 		; yes, collision occurred.
002104  3               :
002104  3               lcol2:
002104  3               	jmp lcol3
002104  3               lcol4:
002104  3               	sec
002104  3               	rts 			; return with carry set for collision.
002104  3               .endif
002104  3               
002104  3               ;------------------------------------------------------
002104  3               ; Main game engine code starts here.
002104  3               ; After initialisation, mloop is the main loop
002104  3               ;------------------------------------------------------
002104  3               
002104  3               game:
002104  3               
002104  3               ; Set up screen address table.
002104  3               
002104  3               setsat:
002104  3  A9 00        	lda #<ScreenAddr		; start of screen.
002106  3  85 rr        	sta scraddr
002108  3  A9 E4        	lda #>ScreenAddr
00210A  3  85 rr        	sta scraddr+1
00210C  3               
00210C  3  A0 00        	ldy #0			; vertical lines on screen.
00210E  3               setsa0:
00210E  3  A5 rr        	lda scraddr
002110  3  99 00 9B     	sta SCADTB_lb,y		; write low byte.
002113  3  A5 rr        	lda scraddr+1
002115  3  C0 C0        	cpy #192		; vertical lines on screen.
002117  3  90 02        	bcc :+
002119  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
00211B  3               :
00211B  3  99 00 9C     	sta SCADTB_hb,y		; write high byte.
00211E  3  20 C7 2E     	jsr nline		; next line down.
002121  3  C8           	iny			; next position in table.
002122  3  D0 EA        	bne setsa0
002124  3               
002124  3               ; Init graphics mode
002124  3               
002124  3  A9 F0        	lda #ScrMode		; graphics mode
002126  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
002129  3  20 02 21     	jsr setpal 		; set up palette.
00212C  3               
00212C  3               ; Init AtoMMC joystick
00212C  3  20 F7 29     	jsr joyinit		; AtoMMC joystick on PORT B
00212F  3               
00212F  3               rpblc2:
00212F  3               .if pflag
00212F  3               	jsr inishr 		; initialise particle engine.
00212F  3               .endif
00212F  3               evintr:
00212F  3  20 93 34     	jsr evnt12 		; call intro/menu event.
002132  3               
002132  3  A9 02        	lda #WALL 		; write default property.
002134  3  A2 00        	ldx #0
002136  3               clrmap:
002136  3  9D 00 98     	sta MAP,x 		; block properties.
002139  3  9D 00 99     	sta MAP+256,x
00213C  3  9D 00 9A     	sta MAP+512,x
00213F  3  E8           	inx			; next byte.
002140  3  D0 F4        	bne clrmap
002142  3               .if oflag
002142  3               	jsr iniob 		; initialise objects.
002142  3               .endif
002142  3  A9 00        	lda #0			; put zero in accumulator.
002144  3  85 rr        	sta gamwon		; reset game won flag.
002146  3               
002146  3  20 B1 22     	jsr inisc 		; init the score.
002149  3               mapst:
002149  3  AD 26 34     	lda stmap 		; start position on map.
00214C  3  8D F2 33     	sta roomtb		; set up position in table, if there is one.
00214F  3               
00214F  3               inipbl:
00214F  3               .if aflag
00214F  3               	lda #<eop		; reset blockpointer
00214F  3               	sta pbptr
00214F  3               	lda #>eop
00214F  3               	sta pbptr+1
00214F  3               .endif
00214F  3  20 DA 2F     	jsr initsc 		; set up first screen.
002152  3               
002152  3  A9 E1        	lda #<ssprit 		; default to spare sprite in table.
002154  3  85 68        	sta z80_x
002156  3  A9 33        	lda #>ssprit
002158  3  85 69        	sta z80_i
00215A  3               evini:
00215A  3  20 97 34     	jsr evnt13 		; initialisation.
00215D  3               
00215D  3               ; Two restarts.
00215D  3               ; First restart - clear all sprites and initialise everything.
00215D  3               
00215D  3               rstrt:
00215D  3  20 51 22     	jsr rsevt 		; restart events.
002160  3  20 5B 20     	jsr xspr 		; clear sprite table.
002163  3  20 46 31     	jsr sprlst 		; fetch pointer to screen sprites.
002166  3  20 CF 31     	jsr ispr 		; initialise sprite table.
002169  3               
002169  3  4C 78 21     	jmp rstrt0
00216C  3               
00216C  3               ; Second restart - clear all but player, and don't initialise him.
00216C  3               
00216C  3               rstrtn:
00216C  3  20 51 22     	jsr rsevt		; restart events.
00216F  3  20 73 31     	jsr nspr 		; clear all non-player sprites.
002172  3  20 46 31     	jsr sprlst 		; fetch pointer to screen sprites.
002175  3  20 0C 32     	jsr kspr 		; initialise sprite table, no more players.
002178  3               
002178  3               ; Set up the player and/or enemy sprites.
002178  3               
002178  3               rstrt0:
002178  3  A9 00        	lda #0 			; zero in accumulator.
00217A  3  85 rr        	sta nexlev 		; reset next level flag.
00217C  3  85 rr        	sta restfl 		; reset restart flag.
00217E  3  85 rr        	sta deadf 		; reset dead flag.
002180  3  20 1F 26     	jsr droom 		; show screen layout.
002183  3               rpblc0:
002183  3               .if pflag
002183  3               	jsr inishr 		; initialise particle engine.
002183  3               .endif
002183  3               .if aflag
002183  3               	jsr rbloc		; draw blocks for this screen
002183  3               .endif
002183  3               .if oflag
002183  3               	jsr shwob		; draw objects.
002183  3               .endif
002183  3               
002183  3  A9 15        	lda #<sprtab 		; address of sprite table, even sprites.
002185  3  85 68        	sta z80_x
002187  3  A9 33        	lda #>sprtab
002189  3  85 69        	sta z80_i
00218B  3  20 B8 2C     	jsr dspr 		; display sprites.
00218E  3               
00218E  3  A9 26        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002190  3  85 68        	sta z80_x
002192  3  A9 33        	lda #>(sprtab+TABSIZ)
002194  3  85 69        	sta z80_i
002196  3  20 B8 2C     	jsr dspr 		; display sprites.
002199  3               mloop:
002199  3  20 68 20     	jsr vsync 		; synchronise with display.
00219C  3  A9 15        	lda #<sprtab 		; address of sprite table, even sprites.
00219E  3  85 68        	sta z80_x
0021A0  3  A9 33        	lda #>sprtab
0021A2  3  85 69        	sta z80_i
0021A4  3  20 B8 2C     	jsr dspr 		; display even sprites.
0021A7  3               
0021A7  3               ;	jsr plsnd 		; play sounds.
0021A7  3               
0021A7  3  20 03 21     	jsr proshr
0021AA  3  A9 26        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0021AC  3  85 68        	sta z80_x
0021AE  3  A9 33        	lda #>(sprtab+TABSIZ)
0021B0  3  85 69        	sta z80_i
0021B2  3  20 B8 2C     	jsr dspr 		; display odd sprites.
0021B5  3               
0021B5  3  A9 E1        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
0021B7  3  85 68        	sta z80_x
0021B9  3  A9 33        	lda #>(ssprit)
0021BB  3  85 69        	sta z80_i
0021BD  3               evlp1:
0021BD  3  20 31 34     	jsr evnt10 		; called once per main loop.
0021C0  3  20 36 2C     	jsr pspr 		; process sprites.
0021C3  3               
0021C3  3               ; Main loop events.
0021C3  3               
0021C3  3  A9 E1        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0021C5  3  85 68        	sta z80_x
0021C7  3  A9 33        	lda #>ssprit
0021C9  3  85 69        	sta z80_i
0021CB  3               evlp2:
0021CB  3  20 92 34     	jsr evnt11 		; called once per main loop.
0021CE  3               bsortx:
0021CE  3  20 AC 2B     	jsr bsort 		; sort sprites.
0021D1  3               
0021D1  3  A5 rr        	lda nexlev		; finished level flag.
0021D3  3  F0 03        	beq :+
0021D5  3  4C FD 21     	jmp newlev		; is set, go to next level.
0021D8  3               :
0021D8  3  A5 rr        	lda gamwon		; finished game flag.
0021DA  3  F0 03        	beq :+
0021DC  3  4C 0C 22     	jmp evwon		; is set, finish the game.
0021DF  3               :
0021DF  3  A5 rr        	lda restfl 		; finished level flag.
0021E1  3  C9 01        	cmp #1			; has it been set?
0021E3  3  D0 03        	bne :+
0021E5  3  4C 5D 21     	jmp rstrt		; yes, go to next level.
0021E8  3               :
0021E8  3  C9 02        	cmp #2			; has it been set?
0021EA  3  D0 03        	bne :+
0021EC  3  4C 6C 21     	jmp rstrtn		; yes, go to next level.
0021EF  3               :
0021EF  3  A5 rr        	lda deadf 		; dead flag.
0021F1  3  F0 03        	beq :+
0021F3  3  4C 12 22     	jmp pdead		; yes, player dead.
0021F6  3               :
0021F6  3               ; back to start of main loop.
0021F6  3               
0021F6  3  E6 rr        	inc frmno
0021F8  3  E6 rr        	inc clock
0021FA  3  4C 99 21     	jmp mloop		; switched to a jmp mloop during test mode.
0021FD  3               
0021FD  3               ;----------------------------------------------------------
0021FD  3               ; Read blocks from list and update screen accordingly.
0021FD  3               ;----------------------------------------------------------
0021FD  3               
0021FD  3               .if aflag
0021FD  3               rbloc:
0021FD  3               	lda #<eop		; reset temp blockpointer
0021FD  3               	sta pbbuf
0021FD  3               	lda #>eop
0021FD  3               	sta pbbuf+1
0021FD  3               
0021FD  3               rbloc2:
0021FD  3               	lda pbbuf			; check for last block
0021FD  3               	cmp pbptr
0021FD  3               	bne rbloc1
0021FD  3               	lda pbbuf+1
0021FD  3               	cmp pbptr+1
0021FD  3               	bne rbloc1
0021FD  3               	rts
0021FD  3               rbloc1:
0021FD  3               	ldy #0
0021FD  3               	lda (pbbuf),y		; check if block for this scno
0021FD  3               	cmp scno
0021FD  3               	bne rbloc0		; if not, skip
0021FD  3               	iny
0021FD  3               	lda (pbbuf),y		; get y
0021FD  3               	sta dispy
0021FD  3               	iny
0021FD  3               	lda (pbbuf),y		; get x
0021FD  3               	sta dispx
0021FD  3               	iny
0021FD  3               	lda (pbbuf),y		; get blocknr
0021FD  3               	jsr pattr2		; draw block
0021FD  3               rbloc0:
0021FD  3               	clc			; point to next block
0021FD  3               	lda pbbuf
0021FD  3               	adc #4
0021FD  3               	sta pbbuf
0021FD  3               	bcc rbloc2
0021FD  3               	inc pbbuf+1
0021FD  3               	jmp rbloc2
0021FD  3               .endif
0021FD  3               
0021FD  3               ;----------------------------------------------------------
0021FD  3               ; New level
0021FD  3               ;----------------------------------------------------------
0021FD  3               
0021FD  3               ;.repeat 270
0021FD  3               ;  .byte 0
0021FD  3               ;.endrep
0021FD  3               
0021FD  3               newlev:
0021FD  3  A5 rr        	lda scno 			; current screen.
0021FF  3  18           	clc
002200  3  69 01        	adc #1				; next screen.
002202  3  CD 66 35     	cmp numsc			; total number of screens.
002205  3  B0 05        	bcs evwon			; yes, game finished.
002207  3  85 rr        	sta scno			; set new level number.
002209  3  4C 5D 21     	jmp rstrt			; restart, clearing all aliens.
00220C  3               
00220C  3               evwon:
00220C  3  20 9C 34     	jsr evnt18		 	; game completed.
00220F  3  4C 26 22     	jmp tidyup			; tidy up and return to BASIC/calling routine.
002212  3               
002212  3               ;----------------------------------------------------------
002212  3               ; Player dead.
002212  3               ;----------------------------------------------------------
002212  3               
002212  3               ;.repeat 258
002212  3               ;  .byte 0
002212  3               ;.endrep
002212  3               
002212  3               pdead:
002212  3  A9 00        	lda #0				; zeroise accumulator.
002214  3  85 rr        	sta deadf			; reset dead flag.
002216  3               evdie:
002216  3  20 9A 34     	jsr evnt16 			; death subroutine.
002219  3  A5 rr        	lda numlif			; number of lives.
00221B  3  F0 03        	beq :+
00221D  3  4C 5D 21     	jmp rstrt 			; restart game.
002220  3               :
002220  3               evfail:
002220  3  20 9B 34     	jsr evnt17 			; failure event.
002223  3  4C 04 21     	jmp game			; restart game
002226  3               
002226  3               ;----------------------------------------------------------
002226  3               ; Tidy things up
002226  3               ;----------------------------------------------------------
002226  3               
002226  3               ;.repeat 291
002226  3               ;  .byte 0
002226  3               ;.endrep
002226  3               
002226  3               tidyup:
002226  3  A0 00        	ldy #0				; digits to check.
002228  3               tidyu2:
002228  3  B9 9A 23     	lda score,y 			; get score digit.
00222B  3  CD A0 23     	cmp hiscor 			; are we larger than high score digit?
00222E  3  90 07        	bcc tidyu0			; high score is bigger.
002230  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
002232  3  C8           	iny				; next digit of high score.
002233  3  C0 06        	cpy #6
002235  3  D0 F1        	bne tidyu2			; repeat for all digits
002237  3               tidyu0:
002237  3  A9 9A        	lda #<score			; return pointing to score.
002239  3  85 62        	sta z80_c
00223B  3  A9 23        	lda #>score
00223D  3  85 63        	sta z80_b
00223F  3  60           	rts
002240  3               tidyu1:
002240  3  A0 05        	ldy #5
002242  3               tidyu3:
002242  3  B9 9A 23     	lda score,y			; score.
002245  3  99 A0 23     	sta hiscor,y			; high score.
002248  3  88           	dey
002249  3  10 F7        	bpl tidyu3 			; copy score to high score.
00224B  3               evnewh:
00224B  3  20 9D 34     	jsr evnt19			; new high score event.
00224E  3  4C 37 22     	jmp tidyu0			; tidy up.
002251  3               
002251  3               ;--------------------------------------------------
002251  3               ; Restart event.
002251  3               ;--------------------------------------------------
002251  3               
002251  3               rsevt:
002251  3  A9 E1        	lda #<ssprit 			; default to spare element in table.
002253  3  85 68        	sta z80_x
002255  3  A9 33        	lda #>ssprit
002257  3  85 69        	sta z80_i
002259  3               evrs:
002259  3  4C 98 34     	jmp evnt14	 		; call restart event.
00225C  3               
00225C  3               ;------------------------------------------------------------------
00225C  3               ; Copy number passed in a to string position bc, right-justified.
00225C  3               ;
00225C  3               ; Input:
00225C  3               ;  A  = number
00225C  3               ;  BC = string address
00225C  3               ;
00225C  3               ; Output:
00225C  3               ;  BC = string with number
00225C  3               ;-----------------------------------------------------------------
00225C  3               
00225C  3               num2ch:
00225C  3  85 65        	sta z80_d		; Save number
00225E  3               
00225E  3  A9 00        	lda #0
002260  3  85 rr        	sta flag
002262  3               numdg3:
002262  3  A2 64        	ldx #100		; hundreds column.
002264  3  86 64        	stx z80_e
002266  3  20 76 22     	jsr numdg		; show digit.
002269  3               numdg2:
002269  3  A2 0A        	ldx #10			; tens column.
00226B  3  86 64        	stx z80_e
00226D  3  20 76 22     	jsr numdg		; show digit.
002270  3               
002270  3  E6 rr        	inc flag
002272  3  A2 01        	ldx #1			; units column.
002274  3  86 64        	stx z80_e
002276  3               numdg:
002276  3  A9 30        	lda #48			; clear digit.
002278  3  85 61        	sta z80_a
00227A  3               numdg1:
00227A  3  A5 65        	lda z80_d
00227C  3  C5 64        	cmp z80_e
00227E  3  90 0E        	bcc numdg0		; nothing to show.
002280  3  38           	sec
002281  3  A5 65        	lda z80_d
002283  3  E5 64        	sbc z80_e		; subtract from column.
002285  3  85 65        	sta z80_d
002287  3  E6 61        	inc z80_a		; increment digit.
002289  3  E6 rr        	inc flag
00228B  3  4C 7A 22     	jmp numdg1		; repeat until column is zero.
00228E  3               numdg0:
00228E  3  A0 00        	ldy #0
002290  3  A5 61        	lda z80_a
002292  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002294  3  A5 rr        	lda flag
002296  3  F0 06        	beq :+
002298  3  E6 62        	inc z80_c		; next buffer position.
00229A  3  D0 02        	bne :+
00229C  3  E6 63        	inc z80_b
00229E  3               :
00229E  3  60           	rts
00229F  3               num2dd:
00229F  3  85 65        	sta z80_d		; Save number
0022A1  3               
0022A1  3  A9 01        	lda #1
0022A3  3  85 rr        	sta flag
0022A5  3               
0022A5  3  4C 69 22     	jmp numdg2
0022A8  3               num2td:
0022A8  3  85 65        	sta z80_d		; Save number
0022AA  3               
0022AA  3  A9 01        	lda #1
0022AC  3  85 rr        	sta flag
0022AE  3  4C 62 22     	jmp numdg3
0022B1  3               
0022B1  3               ;flag:	.byte 0
0022B1  3               
0022B1  3               ;---------------------------------------------------------
0022B1  3               ; Reset score to "000000"
0022B1  3               ;---------------------------------------------------------
0022B1  3               
0022B1  3               inisc:
0022B1  3  A9 30        	lda #'0'
0022B3  3  A2 05        	ldx #5			; digits to initialise.
0022B5  3               inisc0:
0022B5  3  9D 9A 23     	sta score,x 		; write zero digit.
0022B8  3  CA           	dex			; next column.
0022B9  3  10 FA        	bpl inisc0		; repeat for all digits.
0022BB  3               
0022BB  3  60           	rts
0022BC  3               
0022BC  3               ;-----------------------------------------------------
0022BC  3               ; Multiply h by d and return in hl.
0022BC  3               ;
0022BC  3               ; Input:
0022BC  3               ;  H = first number
0022BC  3               ;  D = second number
0022BC  3               ;
0022BC  3               ; Output:
0022BC  3               ;  HL = result H x D
0022BC  3               ;-----------------------------------------------------
0022BC  3               
0022BC  3               imul:
0022BC  3  A5 65        	lda z80_d		; HL = H * D
0022BE  3  85 64        	sta z80_e
0022C0  3  A5 67        	lda z80_h
0022C2  3  85 62        	sta z80_c		; make c first multiplier.
0022C4  3               imul0:
0022C4  3  A9 00        	lda #0			; zeroise total.
0022C6  3  85 66        	sta z80_l
0022C8  3  85 67        	sta z80_h
0022CA  3               
0022CA  3  A5 67        	lda z80_h
0022CC  3  85 65        	sta z80_d		; zeroise high byte.
0022CE  3               
0022CE  3  A9 08        	lda #8			; repeat 8 times.
0022D0  3  85 63        	sta z80_b
0022D2  3               imul1:
0022D2  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
0022D4  3  90 0E        	bcc imul2		; wasn't set.
0022D6  3  18           	clc			; bit was set, so add de.
0022D7  3  A5 66        	lda z80_l
0022D9  3  65 64        	adc z80_e
0022DB  3  85 66        	sta z80_l
0022DD  3  A5 67        	lda z80_h
0022DF  3  65 65        	adc z80_d
0022E1  3  85 67        	sta z80_h
0022E3  3  18           	clc 			; reset carry.
0022E4  3               imul2:
0022E4  3  06 64        	asl z80_e 		; shift de 1 bit left.
0022E6  3  26 65        	rol z80_d
0022E8  3  C6 63        	dec z80_b
0022EA  3  D0 E6        	bne imul1		; repeat 8 times.
0022EC  3               
0022EC  3  60           	rts
0022ED  3               
0022ED  3               ;-----------------------------------------------
0022ED  3               ; Divide d by e and return in d, remainder in a.
0022ED  3               ;
0022ED  3               ; Input:
0022ED  3               ;  D = first number
0022ED  3               ;  E = second number
0022ED  3               ;
0022ED  3               ; Output:
0022ED  3               ;  D = result D/E
0022ED  3               ;  A = remainder
0022ED  3               ;-----------------------------------------------
0022ED  3               
0022ED  3               idiv:
0022ED  3  A9 00        	lda #0
0022EF  3  A0 08        	ldy #8		 	; bits to shift.
0022F1  3  06 65        	asl z80_d
0022F3  3               idiv0:
0022F3  3  2A           	rol a 			; multiply d by 2.
0022F4  3  C5 64        	cmp z80_e 		; test if e is smaller.
0022F6  3  90 02        	bcc idiv1		; e is greater, no division this time.
0022F8  3  E5 64        	sbc z80_e		; subtract it.
0022FA  3               idiv1:
0022FA  3  26 65        	rol z80_d		; rotate into d.
0022FC  3  88           	dey
0022FD  3  D0 F4        	bne idiv0		; repeat
0022FF  3  60           	rts
002300  3               
002300  3               ;---------------------------------------------------
002300  3               ; Play AY sound effect
002300  3               ;---------------------------------------------------
002300  3               
002300  3               plsnd:
002300  3  60           	rts
002301  3               
002301  3               ;---------------------------------------------------
002301  3               ; Objects handling.
002301  3               ; 32 bytes for image
002301  3               ; 3 for room, y and x
002301  3               ; 3 for starting room, y and x.
002301  3               ; 254 = disabled.
002301  3               ; 255 = object in player"s pockets.
002301  3               ;---------------------------------------------------
002301  3               
002301  3               ;---------------------------------------------------
002301  3               ; Show items present.
002301  3               ;---------------------------------------------------
002301  3               
002301  3               .if oflag
002301  3               shwob:
002301  3               	lda #<objdta 			; objects table.
002301  3               	sta z80_l
002301  3               	lda #>objdta
002301  3               	sta z80_h
002301  3               
002301  3               	lda numob 			; number of objects in the game.
002301  3               	sta sprcnt
002301  3               shwob0:
002301  3               	ldy #32 			; distance to room number.
002301  3               	lda (z80_hl),y 			; same as an item?
002301  3               	cmp scno 			; current location.
002301  3               	bne :+
002301  3               	jsr dobj 			; yes, display object.
002301  3               :
002301  3               	clc
002301  3               	lda z80_l
002301  3               	adc #38 			; distance to next item.
002301  3               	sta z80_l
002301  3               	lda z80_h
002301  3               	adc #0
002301  3               	sta z80_h	 		; point to it.
002301  3               	dec sprcnt
002301  3               	bne shwob0 			; repeat for others.
002301  3               	rts
002301  3               
002301  3               ;---------------------------------------------------
002301  3               ; Display object.
002301  3               ; hl must point to object's start address.
002301  3               ;
002301  3               ; Input:
002301  3               ;  HL = object address
002301  3               ;---------------------------------------------------
002301  3               
002301  3               dobj:
002301  3               	ldy #33
002301  3               	lda (z80_hl),y 			; point to y.
002301  3               	sta dispy
002301  3               	iny
002301  3               	lda (z80_hl),y 			; point to x.
002301  3               	sta dispx
002301  3               dobj1:
002301  3               	jmp sprite 			; draw this sprite.
002301  3               
002301  3               ;--------------------------------------
002301  3               ; Remove an object.
002301  3               ;
002301  3               ; Input:
002301  3               ;  A = object number
002301  3               ;--------------------------------------
002301  3               
002301  3               remob:
002301  3               	cmp numob			; number of objects in game.
002301  3               	bcc :+				; are we checking past the end?
002301  3               	rts				; yes, can't get non-existent item.
002301  3               :
002301  3               	pha				; remember object.
002301  3               	jsr getob			; pick it up if we haven't already got it.
002301  3               	pla				; retrieve object number.
002301  3               	jsr gotob			; get its address.
002301  3               	lda #254
002301  3               	ldy #32
002301  3               	sta (z80_hl),y			; remove it.
002301  3               	rts
002301  3               
002301  3               ;---------------------------------------------------
002301  3               ; Pick up object number held in the accumulator.
002301  3               ;
002301  3               ; Input:
002301  3               ;  A = object number
002301  3               ;---------------------------------------------------
002301  3               
002301  3               getob:
002301  3               	cmp numob 		; number of objects in game.
002301  3               	bcc :+			; are we checking past the end?
002301  3               	rts			; yes, can't get non-existent item.
002301  3               :
002301  3               	jsr gotob 		; check if we already have it.
002301  3               	cmp #255
002301  3               	bne :+
002301  3               	rts			; we already do.
002301  3               :
002301  3               	ldy #32
002301  3               	lda (z80_hl),y		; is it on this screen?
002301  3               	cmp scno 		; current screen.
002301  3               	bne getob0		; not on screen, so nothing to delete.
002301  3               
002301  3               	lda #255
002301  3               	sta (z80_hl),y		; pick it up.
002301  3               	iny 			; point to y coord.
002301  3               getob1:
002301  3               	ldy #33
002301  3               	lda (z80_hl),y		; y coord.
002301  3               	sta dispy
002301  3               	ldy #34
002301  3               	lda (z80_hl),y 		; x coord.
002301  3               	sta dispx
002301  3               	jmp dobj1 		; delete object sprite.
002301  3               getob0:
002301  3               	lda #255
002301  3               	sta (z80_hl),y 		; pick it up.
002301  3               	rts
002301  3               .endif
002301  3               
002301  3               ;-----------------------------------------------------------------
002301  3               ; Got object check.
002301  3               ; Call with object in accumulator, returns zero set if in pockets.
002301  3               ;
002301  3               ; Input:
002301  3               ;  A = object number
002301  3               ;-----------------------------------------------------------------
002301  3               .if oflag .or mflag
002301  3               gotob:
002301  3               	cmp numob 		; number of objects in game.
002301  3               	bcc :+ 			; are we checking past the end?
002301  3               	jmp gotob0 		; yes, we can't have a non-existent object.
002301  3               :
002301  3               	jsr findob		; find the object.
002301  3               gotob1:
002301  3               	rts
002301  3               
002301  3               gotob0:
002301  3               	lda #254 		; missing.
002301  3               	jmp gotob1
002301  3               
002301  3               findob:
002301  3               	pha			; save object number
002301  3               	lda #<objdta 		; objects.
002301  3               	sta z80_l
002301  3               	lda #>objdta
002301  3               	sta z80_h
002301  3               	pla			; retreive object number
002301  3               	beq fndob1 		; is it zero? yes, skip loop.
002301  3               	tax 			; loop counter
002301  3               fndob2:
002301  3               	clc
002301  3               	lda z80_l
002301  3               	adc #38 		; size of each object.
002301  3               	sta z80_l
002301  3               	bcc :+
002301  3               	inc z80_h
002301  3               :
002301  3               	dex 			; repeat until we find address.
002301  3               	bne fndob2
002301  3               fndob1:
002301  3               	ldy #32			; distance to room it's in.
002301  3               	lda (z80_hl),y		; fetch status.
002301  3               	rts
002301  3               .endif
002301  3               
002301  3               ;---------------------------------------------
002301  3               ; Drop object number at (dispx, dispy).
002301  3               ;
002301  3               ; Input:
002301  3               ;  A = object number
002301  3               ;---------------------------------------------
002301  3               
002301  3               .if oflag
002301  3               drpob:
002301  3               	cmp numob 		; are we checking past the end?
002301  3               	bcc :+
002301  3               	rts			; yes, can't drop non-existent item.
002301  3               :
002301  3               	jsr gotob		; make sure object is in inventory.
002301  3               	cmp scno		; already on this screen?
002301  3               	bne :+
002301  3               	rts			; yes, nothing to do.
002301  3               :
002301  3               	ldy #32
002301  3               	lda scno
002301  3               	sta (z80_hl),y		; bring onto screen.
002301  3               	lda dispy		; sprite y coordinate.
002301  3               	iny
002301  3               	sta (z80_hl),y		; point to object y.
002301  3               	lda dispx 		; sprite x coordinate.
002301  3               	iny
002301  3               	sta (z80_hl),y 		; point to object x
002301  3               	jmp dobj		; draw the object sprite.
002301  3               
002301  3               ;-----------------------------------------------
002301  3               ; Seek objects at sprite position.
002301  3               ;
002301  3               ; Output:
002301  3               ;  A = object number, if not found A=255
002301  3               ;-----------------------------------------------
002301  3               
002301  3               skobj:
002301  3               	lda #<objdta 		; pointer to objects.
002301  3               	sta z80_l
002301  3               	lda #>objdta
002301  3               	sta z80_h
002301  3               
002301  3               	lda numob 		; number of objects in game.
002301  3               	sta z80_b 		; set up the loop counter.
002301  3               skobj0:
002301  3               	lda scno		; current room number.
002301  3               	ldy #32
002301  3               	cmp (z80_hl),y		; is object in here?
002301  3               	bne :+
002301  3               	jsr skobj1		; yes, check coordinates.
002301  3               :
002301  3               	clc			; point to next object in table.
002301  3               	lda z80_l
002301  3               	adc #38			; size of each object.
002301  3               	sta z80_l
002301  3               	bcc :+
002301  3               	inc z80_h
002301  3               :
002301  3               	dec z80_b
002301  3               	bne skobj0		; repeat for all objects.
002301  3               
002301  3               	lda #255		; end of list and nothing found, return 255.
002301  3               	rts
002301  3               
002301  3               skobj1:
002301  3               	ldy #33			; point to y coordinate.
002301  3               	lda (z80_hl),y		; point to y coordinate.
002301  3               	sec
002301  3               	ldy #8
002301  3               	sbc (z80_ix),y 		; subtract sprite y.
002301  3               	clc
002301  3               	adc #15			; add sprite height minus one.
002301  3               	cmp #31			; within range?
002301  3               	bcs skobj2		; no, ignore object.
002301  3               
002301  3               	ldy #34			; point to x coordinate now.
002301  3               	lda (z80_hl),y 		; get coordinate.
002301  3               	sec
002301  3               	ldy #9
002301  3               	sbc (z80_ix),y 		; subtract the sprite x.
002301  3               	clc			; add sprite width minus one.
002301  3               	adc #15
002301  3               	cmp #31			; within range?
002301  3               	bcs skobj2		; no, ignore object.
002301  3               
002301  3               	pla			; remove return address from stack.
002301  3               	pla
002301  3               
002301  3               	lda numob 		; objects in game.
002301  3               	sec
002301  3               	sbc z80_b		; subtract loop counter.
002301  3               skobj2:
002301  3               	rts			; accumulator now points to object.
002301  3               .endif
002301  3               
002301  3               ;---------------------------------------------------------------------
002301  3               ; Spawn a new sprite.
002301  3               ;---------------------------------------------------------------------
002301  3               
002301  3                 offset = 20
002301  3               
002301  3               ;.repeat 343
002301  3               ;  .byte 0
002301  3               ;.endrep
002301  3               
002301  3               spawn:
002301  3  A9 15        	lda #<sprtab		; sprite table.
002303  3  85 66        	sta z80_l
002305  3  A9 33        	lda #>sprtab
002307  3  85 67        	sta z80_h
002309  3               numsp1:
002309  3  A9 0C        	lda #NUMSPR		; number of sprites.
00230B  3  85 rr        	sta spcnt
00230D  3               spaw0:
00230D  3  A0 00        	ldy #0
00230F  3  B1 66        	lda (z80_hl),y		; get sprite type.
002311  3  C9 FF        	cmp #255		; is it an unused slot?
002313  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002315  3               
002315  3  18           	clc 			; point to next sprite in table.
002316  3  A5 66        	lda z80_l
002318  3  69 11        	adc #TABSIZ		; size of each entry.
00231A  3  85 66        	sta z80_l
00231C  3  90 02        	bcc :+
00231E  3  E6 67        	inc z80_h
002320  3               :
002320  3  C6 rr        	dec spcnt		; one less iteration.
002322  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002324  3               
002324  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002324  3               
002324  3               spaw1:
002324  3  A5 69        	lda z80_i		; address of original sprite.
002326  3  48           	pha
002327  3  A5 68        	lda z80_x
002329  3  48           	pha
00232A  3               
00232A  3  A5 66        	lda z80_l		; store spawned sprite address.
00232C  3  85 rr        	sta spptr
00232E  3  A5 67        	lda z80_h
002330  3  85 rr        	sta spptr+1
002332  3               
002332  3  A5 62        	lda z80_c
002334  3  A0 00        	ldy #0
002336  3  91 66        	sta (z80_hl),y 		; set the type.
002338  3  A0 05        	ldy #5
00233A  3  91 66        	sta (z80_hl),y		; copy
00233C  3               
00233C  3  A5 63        	lda z80_b
00233E  3  A0 01        	ldy #1
002340  3  91 66        	sta (z80_hl),y		; set the image.
002342  3  A0 06        	ldy #6
002344  3  91 66        	sta (z80_hl),y		; copy
002346  3               
002346  3  A9 00        	lda #0 			; frame zero.
002348  3  A0 02        	ldy #2
00234A  3  91 66        	sta (z80_hl),y		; set frame.
00234C  3  A0 07        	ldy #7
00234E  3  91 66        	sta (z80_hl),y		; copy
002350  3               
002350  3  A0 08        	ldy #8
002352  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002354  3  A0 03        	ldy #3
002356  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002358  3  A0 08        	ldy #8
00235A  3  91 66        	sta (z80_hl),y		; copy
00235C  3               
00235C  3  A0 09        	ldy #9
00235E  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002360  3  A0 04        	ldy #4
002362  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002364  3  A0 09        	ldy #9
002366  3  91 66        	sta (z80_hl),y		; copy
002368  3               
002368  3  A0 0A        	ldy #10			; direction of original.
00236A  3  B1 68        	lda (z80_ix),y
00236C  3  91 66        	sta (z80_hl),y		; direction
00236E  3               
00236E  3  A9 00        	lda #0
002370  3  A0 0B        	ldy #11
002372  3  91 66        	sta (z80_hl),y		; reset parameter.
002374  3  C8           	iny
002375  3  91 66        	sta (z80_hl),y		; reset parameter.
002377  3  C8           	iny
002378  3  91 66        	sta (z80_hl),y		; reset parameter.
00237A  3  C8           	iny
00237B  3  91 66        	sta (z80_hl),y		; reset parameter.
00237D  3               rtssp:
00237D  3  A5 rr        	lda spptr		; address of new sprite.
00237F  3  85 68        	sta z80_x
002381  3  A5 rr        	lda spptr+1
002383  3  85 69        	sta z80_i
002385  3               evis1:
002385  3  20 30 34     	jsr evnt09 		; call sprite initialisation event.
002388  3               
002388  3  A5 rr        	lda spptr 		; address of new sprite.
00238A  3  85 68        	sta z80_x
00238C  3  A5 rr        	lda spptr+1
00238E  3  85 69        	sta z80_i
002390  3  20 DE 2D     	jsr sspria 		; display the new sprite.
002393  3               
002393  3  68           	pla			; address of original sprite.
002394  3  85 68        	sta z80_x
002396  3  68           	pla
002397  3  85 69        	sta z80_i
002399  3               
002399  3  60           	rts
00239A  3               
00239A  3               ;spcnt:	.byte 0
00239A  3               ;spptr:	.word 0			; spawned sprite pointer.
00239A  3               ;seed:	.byte 0			; seed for random numbers.
00239A  3  30 30 30 30  score:	.byte "000000"		; player"s score.
00239E  3  30 30        
0023A0  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
0023A4  3  30 30        
0023A6  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
0023AA  3  30 30        
0023AC  3  00 E4        grbase:	.word ScreenAddr	; graphics base address.
0023AE  3               
0023AE  3               ;----------------------------------------------------
0023AE  3               ; Check y-pos
0023AE  3               ;----------------------------------------------------
0023AE  3               
0023AE  3               checkx:
0023AE  3  A5 rr        	lda dispy		; y position.
0023B0  3  C9 18        	cmp #24			; off screen?
0023B2  3  B0 01        	bcs :+
0023B4  3  60           	rts			; no, it's okay.
0023B5  3               :
0023B5  3  68           	pla			; remove return address from stack.
0023B6  3  85 66        	sta z80_l
0023B8  3  68           	pla
0023B9  3  85 67        	sta z80_h
0023BB  3  60           	rts
0023BC  3               
0023BC  3               ;-----------------------------------------------
0023BC  3               ; Displays the current high score.
0023BC  3               ;-----------------------------------------------
0023BC  3               
0023BC  3               dhisc:
0023BC  3  A9 A0        	lda #<hiscor 		; high score text.
0023BE  3  8D F3 23     	sta dscor3+1
0023C1  3  8D 0E 24     	sta bscor3+1
0023C4  3  A9 23        	lda #>hiscor
0023C6  3  8D F4 23     	sta dscor3+2
0023C9  3  8D 0F 24     	sta bscor3+2
0023CC  3  4C DF 23     	jmp dscor1		; check in printable range then show 6 digits.
0023CF  3               
0023CF  3               ;------------------------------------------------------
0023CF  3               ; Displays the current score.
0023CF  3               ;------------------------------------------------------
0023CF  3               
0023CF  3               ;.repeat 322
0023CF  3               ;  .byte 0
0023CF  3               ;.endrep
0023CF  3               
0023CF  3               dscor:
0023CF  3  A9 9A        	lda #<score		; score text.
0023D1  3  8D F3 23     	sta dscor3+1
0023D4  3  8D 0E 24     	sta bscor3+1
0023D7  3  A9 23        	lda #>score
0023D9  3  8D F4 23     	sta dscor3+2
0023DC  3  8D 0F 24     	sta bscor3+2
0023DF  3               dscor1:
0023DF  3  8C 0A 24     	sty tmpscr
0023E2  3  20 80 2B     	jsr preprt		; set up font and print position.
0023E5  3  20 AE 23     	jsr checkx		; make sure we're in a printable range.
0023E8  3               
0023E8  3               ;	lda #6			; digits to display.
0023E8  3               ;	sta z80_b
0023E8  3  A5 rr        	lda prtmod		; get print mode.
0023EA  3  F0 03        	beq :+			; standard size text?
0023EC  3  4C 0B 24     	jmp bscor0		; no, show double-height.
0023EF  3               :
0023EF  3               dscor0:
0023EF  3               ;	ldy #0
0023EF  3               ;	lda (z80_hl),y 		; fetch character.
0023EF  3  AC 0A 24     	ldy tmpscr
0023F2  3               dscor3:
0023F2  3  B9 9A 23     	lda score,y
0023F5  3  20 42 25     	jsr pchar 		; display character.
0023F8  3  E6 rr        	inc dispx		; move along x coordinate
0023FA  3               
0023FA  3               ;	inc z80_l		; next score column.
0023FA  3               ;	bne :+
0023FA  3               ;	inc z80_h
0023FA  3               ;:
0023FA  3  EE 0A 24     	inc tmpscr
0023FD  3  C6 63        	dec z80_b
0023FF  3  D0 EE        	bne dscor0 		; repeat for all digits.
002401  3               dscor2:
002401  3  A5 rr        	lda dispx 		; set up display coordinates.
002403  3  85 rr        	sta charx
002405  3  A5 rr        	lda dispy
002407  3  85 rr        	sta chary
002409  3  60           	rts
00240A  3               
00240A  3  00           tmpscr:	.byte 0
00240B  3               ;------------------------------------------------------
00240B  3               ; Displays the current score in double-height characters.
00240B  3               ;
00240B  3               ; Input:
00240B  3               ;  B  = digit number
00240B  3               ;  HL = score string
00240B  3               ;------------------------------------------------------
00240B  3               
00240B  3               bscor0:
00240B  3               ;	ldy #0
00240B  3               
00240B  3               ;	lda (z80_hl),y 		; fetch character.
00240B  3  A4 rr        	ldy tmp
00240D  3               bscor3:
00240D  3  B9 9A 23     	lda score,y
002410  3  20 07 2B     	jsr bchar 		; display big char.
002413  3               
002413  3               ;	inc z80_l 		; next score column.
002413  3               ;	bne :+
002413  3               ;	inc z80_h
002413  3               ;:
002413  3  E6 rr        	inc tmp
002415  3  C6 63        	dec z80_b
002417  3  F0 03        	beq :+
002419  3  4C 0B 24     	jmp bscor0 		; repeat for all digits.
00241C  3               :
00241C  3  4C 01 24     	jmp dscor2 		; tidy up line and column variables.
00241F  3               
00241F  3               ;-----------------------------------------------------
00241F  3               ; Adds number in the hl pair to the score.
00241F  3               ;-----------------------------------------------------
00241F  3               
00241F  3               addsc:
00241F  3  A9 9B        	lda #<(score+1) 	; ten thousands column.
002421  3  85 64        	sta z80_e
002423  3  A9 23        	lda #>(score+1)
002425  3  85 65        	sta z80_d
002427  3  A9 10        	lda #<10000		; amount to add each time.
002429  3  85 62        	sta z80_c
00242B  3  A9 27        	lda #>10000
00242D  3  85 63        	sta z80_b
00242F  3  20 73 24     	jsr incsc		; add to score.
002432  3               
002432  3  E6 64        	inc z80_e		; thousands column.
002434  3  D0 02        	bne :+
002436  3  E6 65        	inc z80_d
002438  3               :
002438  3  A9 E8        	lda #<1000		; amount to add each time.
00243A  3  85 62        	sta z80_c
00243C  3  A9 03        	lda #>1000
00243E  3  85 63        	sta z80_b
002440  3  20 73 24     	jsr incsc 		; add to score.
002443  3               
002443  3  E6 64        	inc z80_e		; hundreds column.
002445  3  D0 02        	bne :+
002447  3  E6 65        	inc z80_d
002449  3               :
002449  3  A9 64        	lda #<100		; amount to add each time.
00244B  3  85 62        	sta z80_c
00244D  3  A9 00        	lda #>100
00244F  3  85 63        	sta z80_b
002451  3  20 73 24     	jsr incsc		; add to score.
002454  3               
002454  3  E6 64        	inc z80_e 		; tens column.
002456  3  D0 02        	bne :+
002458  3  E6 65        	inc z80_d
00245A  3               :
00245A  3  A9 0A        	lda #<10		; amount to add each time.
00245C  3  85 62        	sta z80_c
00245E  3  A9 00        	lda #>10
002460  3  85 63        	sta z80_b
002462  3  20 73 24     	jsr incsc 		; add to score.
002465  3               
002465  3  E6 64        	inc z80_e		; units column.
002467  3  D0 02        	bne :+
002469  3  E6 65        	inc z80_d
00246B  3               :
00246B  3  A9 01        	lda #<1			; units.
00246D  3  85 62        	sta z80_c
00246F  3  A9 00        	lda #>1
002471  3  85 63        	sta z80_b
002473  3               incsc:
002473  3  A5 67        	lda z80_h		; store amount to add.
002475  3  48           	pha
002476  3  A5 66        	lda z80_l
002478  3  48           	pha
002479  3               
002479  3  38           	sec			; subtract from amount to add.
00247A  3  A5 66        	lda z80_l
00247C  3  E5 62        	sbc z80_c
00247E  3  85 66        	sta z80_l
002480  3  A5 67        	lda z80_h
002482  3  E5 63        	sbc z80_b
002484  3  85 67        	sta z80_h
002486  3  90 14        	bcc incsc0		; too much, restore value.
002488  3               
002488  3  68           	pla			; delete the previous amount from the stack.
002489  3  68           	pla
00248A  3               
00248A  3  A5 65        	lda z80_d 		; store column position.
00248C  3  48           	pha
00248D  3  A5 64        	lda z80_e
00248F  3  48           	pha
002490  3  20 A3 24     	jsr incsc2		; do the increment.
002493  3               
002493  3  68           	pla			; restore column.
002494  3  85 64        	sta z80_e
002496  3  68           	pla
002497  3  85 65        	sta z80_d
002499  3  4C 73 24     	jmp incsc		; repeat until all added.
00249C  3               
00249C  3               incsc0:
00249C  3  68           	pla			; restore previous value.
00249D  3  85 66        	sta z80_l
00249F  3  68           	pla
0024A0  3  85 67        	sta z80_h
0024A2  3  60           	rts
0024A3  3               incsc2:
0024A3  3  A0 00        	ldy #0
0024A5  3  B1 64        	lda (z80_de),y 		; get amount.
0024A7  3  18           	clc
0024A8  3  69 01        	adc #1			; add one to column.
0024AA  3  91 64        	sta (z80_de),y		; write new column total.
0024AC  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
0024AE  3  B0 01        	bcs :+
0024B0  3  60           	rts			; no, carry on.
0024B1  3               :
0024B1  3  A9 30        	lda #'0'		; make it zero.
0024B3  3  91 64        	sta (z80_de),y		; write new column total.
0024B5  3  C6 64        	dec z80_e		; back one column.
0024B7  3  D0 02        	bne :+
0024B9  3  C6 65        	dec z80_d
0024BB  3               :
0024BB  3  4C A3 24     	jmp incsc2
0024BE  3               
0024BE  3               ;------------------------------------
0024BE  3               ; Add bonus to score and reset bonus
0024BE  3               ;------------------------------------
0024BE  3               
0024BE  3               addbo:
0024BE  3  A2 05        	ldx #5			; last digit.
0024C0  3  18           	clc
0024C1  3               addbo0:
0024C1  3  BD 9A 23     	lda score,x		; get score.
0024C4  3  7D A6 23     	adc bonus,x		; add bonus.
0024C7  3  38           	sec			; 0 to 18.
0024C8  3  E9 30        	sbc #48
0024CA  3  48           	pha
0024CB  3  A9 30        	lda #'0'
0024CD  3  9D A6 23     	sta bonus,x
0024D0  3  68           	pla
0024D1  3  C9 3A        	cmp #58
0024D3  3  90 03        	bcc addbo1
0024D5  3  38           	sec
0024D6  3  E9 0A        	sbc #10
0024D8  3               addbo1:
0024D8  3  9D 9A 23     	sta score,x		; zeroise bonus.
0024DB  3  CA           	dex			; next digit.
0024DC  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0024DE  3  60           	rts
0024DF  3               
0024DF  3               ;------------------------------------
0024DF  3               ; Swap score and bonus.
0024DF  3               ;------------------------------------
0024DF  3               
0024DF  3               swpsb:
0024DF  3  A2 05        	ldx #5			; digits to add.
0024E1  3               swpsb0:
0024E1  3  BD 9A 23     	lda score,x 		; get score digits.
0024E4  3  48           	pha			; save digit
0024E5  3  BD A6 23     	lda bonus,x 		; get bonus digits.
0024E8  3  9D 9A 23     	sta score,x		; switch score-bonus
0024EB  3  68           	pla
0024EC  3  9D A6 23     	sta bonus,x
0024EF  3  CA           	dex 			; repeat for all 6 digits.
0024F0  3  10 EF        	bpl swpsb0
0024F2  3  60           	rts
0024F3  3               
0024F3  3               ;----------------------------------------------------
0024F3  3               ; Get print address.
0024F3  3               ;----------------------------------------------------
0024F3  3               
0024F3  3               gprad:
0024F3  3  A5 rr        	lda dispx		; get x
0024F5  3  85 rr        	sta scraddr		; store lb address
0024F7  3               
0024F7  3  2A           	rol a
0024F8  3  26 rr        	rol tmp
0024FA  3  2A           	rol a
0024FB  3  26 rr        	rol tmp
0024FD  3  2A           	rol a
0024FE  3  26 rr        	rol tmp
002500  3  A5 rr        	lda tmp
002502  3  29 07        	and #7
002504  3  85 rr        	sta tmp
002506  3  A5 rr        	lda prtmod
002508  3  F0 02        	beq :+
00250A  3  06 rr        	asl tmp
00250C  3               :
00250C  3  A5 rr        	lda tmp
00250E  3  18           	clc
00250F  3  65 rr        	adc dispy		; get y
002511  3  09 80        	ora #$80		; add $80
002513  3  85 rr        	sta scraddr+1		; store hb address
002515  3  60           	rts
002516  3               
002516  3               ;--------------------------------------------------------------
002516  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002516  3               ;
002516  3               ; Output:
002516  3               ;  bufaddr = MAP + dispy*32 + dispx
002516  3               ;--------------------------------------------------------------
002516  3               
002516  3               pradd:
002516  3  A5 rr        	lda dispy 		; y coordinate.
002518  3  85 rr        	sta bufaddr
00251A  3  A9 00        	lda #0
00251C  3  85 rr        	sta bufaddr+1
00251E  3  06 rr        	asl bufaddr  		; multiply char by 32
002520  3  26 rr        	rol bufaddr+1
002522  3  06 rr        	asl bufaddr
002524  3  26 rr        	rol bufaddr+1
002526  3  06 rr        	asl bufaddr
002528  3  26 rr        	rol bufaddr+1
00252A  3  06 rr        	asl bufaddr
00252C  3  26 rr        	rol bufaddr+1
00252E  3  06 rr        	asl bufaddr
002530  3  26 rr        	rol bufaddr+1
002532  3  18           	clc			; add address of MAP graphics.
002533  3  A5 rr        	lda bufaddr
002535  3  65 rr        	adc dispx
002537  3  69 00        	adc #<MAP
002539  3  85 rr        	sta bufaddr
00253B  3  A5 rr        	lda bufaddr+1
00253D  3  69 98        	adc #>MAP
00253F  3  85 rr        	sta bufaddr+1
002541  3  60           	rts
002542  3               
002542  3               ;----------------------------------------------------
002542  3               ; Display character in A at dispx,dispy.
002542  3               ;
002542  3               ; Input:
002542  3               ;  A 	   = character to print
002542  3               ;----------------------------------------------------
002542  3               
002542  3               pchar:
002542  3  85 rr        	sta fntaddr
002544  3  A9 00        	lda #0
002546  3  85 rr        	sta fntaddr+1
002548  3  06 rr        	asl fntaddr  		; multiply char by 8.
00254A  3  26 rr        	rol fntaddr+1
00254C  3  06 rr        	asl fntaddr
00254E  3  26 rr        	rol fntaddr+1
002550  3  06 rr        	asl fntaddr
002552  3  26 rr        	rol fntaddr+1
002554  3               
002554  3  A5 rr        	lda fntaddr
002556  3  18           	clc
002557  3  69 92        	adc #<(FONT-256)
002559  3  85 rr        	sta fntaddr		; that's the low byte.
00255B  3  A5 rr        	lda fntaddr+1
00255D  3  69 34        	adc #>(FONT-256)
00255F  3  85 rr        	sta fntaddr+1		; add displacement.
002561  3               pchark:
002561  3  20 F3 24     	jsr gprad		; get screen address.
002564  3  A2 07        	ldx #7			; lines to write.
002566  3               pchar0:
002566  3  A0 00        	ldy #0
002568  3  B1 rr        	lda (fntaddr),y 	; get image byte.
00256A  3  BC 79 25     	ldy scrtab,x		; Get rowoffset
00256D  3               .if iflag
00256D  3               	eor #$ff
00256D  3               .endif
00256D  3  91 rr        	sta (scraddr),y 	; copy to screen.
00256F  3  E6 rr        	inc fntaddr		; next image byte.
002571  3  D0 02        	bne :+
002573  3  E6 rr        	inc fntaddr+1
002575  3               :
002575  3  CA           	dex			; next screen row down.
002576  3  10 EE        	bpl pchar0		; repeat.
002578  3  60           	rts
002579  3               
002579  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
00257D  3  60 40 20 00  
002581  3               
002581  3               ;----------------------------------------------
002581  3               
002581  3               ; Print attributes, properties and pixels.
002581  3               ;
002581  3               ; Input:
002581  3               ;  A	= tile number
002581  3               ;----------------------------------------------
002581  3               
002581  3               ;.repeat 294
002581  3               ;  .byte 0
002581  3               ;.endrep
002581  3               
002581  3               pbpattr:			; entry PUTBLOCK command
002581  3  A4 rr        	ldy charx
002583  3  84 rr        	sty dispx
002585  3  A4 rr        	ldy chary
002587  3  84 rr        	sty dispy
002589  3               pattr:
002589  3               .if aflag
002589  3               	pha
002589  3               	jsr wbloc		; save blockinfo
002589  3               	pla
002589  3               .endif
002589  3               
002589  3               pattr2:
002589  3  85 63        	sta z80_b		; store cell in b register for now.
00258B  3  AA           	tax
00258C  3  BD D6 34     	lda bprop,x 		; block properties.
00258F  3  85 62        	sta z80_c
002591  3  C9 08        	cmp #COLECT
002593  3  D0 05        	bne :+
002595  3  A5 63        	lda z80_b
002597  3  8D A8 25     	sta colpatt
00259A  3               :
00259A  3  20 16 25     	jsr pradd 		; get property buffer address.
00259D  3  A5 62        	lda z80_c
00259F  3  A0 00        	ldy #0
0025A1  3  91 rr        	sta (bufaddr),y 	; write property.
0025A3  3  A5 63        	lda z80_b 		; restore cell.
0025A5  3  4C A9 25     	jmp panp
0025A8  3               ; Print attributes, no properties.
0025A8  3               
0025A8  3               ;.repeat 263
0025A8  3               ; .byte 0
0025A8  3               ;.endrep
0025A8  3               
0025A8  3  00           colpatt:	.byte 0
0025A9  3               
0025A9  3               panp:
0025A9  3  85 64        	sta z80_e		; displacement in e.
0025AB  3  A9 00        	lda #0
0025AD  3  85 65        	sta z80_d		; no high byte.
0025AF  3  06 64        	asl z80_e  		; multiply char by 8.
0025B1  3  26 65        	rol z80_d
0025B3  3  06 64        	asl z80_e
0025B5  3  26 65        	rol z80_d
0025B7  3  06 64        	asl z80_e
0025B9  3  26 65        	rol z80_d
0025BB  3  18           	clc
0025BC  3  A5 64        	lda z80_e
0025BE  3  69 CE        	adc #<chgfx 		; address of graphics.
0025C0  3  85 rr        	sta tileaddr
0025C2  3  A5 65        	lda z80_d
0025C4  3  69 34        	adc #>chgfx
0025C6  3  85 rr        	sta tileaddr+1
0025C8  3  20 F3 24     	jsr gprad 		; get screen address.
0025CB  3  A2 07        	ldx #7			; number of pixel rows to write.
0025CD  3               panp0:
0025CD  3  A0 00        	ldy #0
0025CF  3  B1 rr        	lda (tileaddr),y 	; get image byte.
0025D1  3               .if iflag
0025D1  3               	eor #$ff		; Invert
0025D1  3               .endif
0025D1  3  BC 79 25     	ldy scrtab,x
0025D4  3  91 rr        	sta (scraddr),y 	; copy to screen.
0025D6  3  E6 rr        	inc tileaddr 		; next image byte.
0025D8  3  D0 02        	bne :+
0025DA  3  E6 rr        	inc tileaddr+1
0025DC  3               :
0025DC  3  CA           	dex	 		; repeat for 8 pixel rows.
0025DD  3  10 EE        	bpl panp0
0025DF  3  E6 rr        	inc dispx 		; move along one.
0025E1  3  E6 rr        	inc charx
0025E3  3  60           	rts
0025E4  3               
0025E4  3               ;----------------------------------------------
0025E4  3               ; Write block
0025E4  3               ;----------------------------------------------
0025E4  3               
0025E4  3               .if aflag
0025E4  3               wbloc:
0025E4  3               	ldy #3
0025E4  3               	sta (pbptr),y		; store block number
0025E4  3               	dey
0025E4  3               	lda dispx
0025E4  3               	sta (pbptr),y		; write x position of block.
0025E4  3               	dey
0025E4  3               	lda dispy
0025E4  3               	sta (pbptr),y		; write y position of block.
0025E4  3               	dey
0025E4  3               	lda scno
0025E4  3               	sta (pbptr),y		; write screen.
0025E4  3               	clc			; point to next free location
0025E4  3               	lda pbptr
0025E4  3               	adc #4
0025E4  3               	sta pbptr
0025E4  3               	bcc :+
0025E4  3               	inc pbptr+1
0025E4  3               :
0025E4  3               	rts
0025E4  3               .endif
0025E4  3               
0025E4  3               ;----------------------------------------------
0025E4  3               ; Print character pixels, no more.
0025E4  3               ;
0025E4  3               ; Input:
0025E4  3               ;  A	= character to print
0025E4  3               ;----------------------------------------------
0025E4  3               
0025E4  3               pchr:
0025E4  3  20 42 25     	jsr pchar 		; show character in accumulator.
0025E7  3  E6 rr        	inc dispx		; move along one.
0025E9  3  60           	rts
0025EA  3               
0025EA  3               ;----------------------------------------------------
0025EA  3               ; Shifter sprite routine for objects.
0025EA  3               ;----------------------------------------------------
0025EA  3               
0025EA  3               .if oflag
0025EA  3               sprit7:
0025EA  3               	lda z80_b
0025EA  3               	beq sprit0
0025EA  3               	sta z80_a
0025EA  3               sprit3:
0025EA  3               	lsr spr			; shift into position.
0025EA  3               	ror spr+1
0025EA  3               	ror spr+2
0025EA  3               	dec z80_a		; one less iteration.
0025EA  3               	bne sprit3
0025EA  3               sprit0:
0025EA  3               	rts 			; now apply to screen.
0025EA  3               
0025EA  3               ;----------------------------------------------------
0025EA  3               ; Draw sprite
0025EA  3               ;----------------------------------------------------
0025EA  3               
0025EA  3               sprite:
0025EA  3               	stx xtmp		; Save X-reg
0025EA  3               	jsr scadd 		; get screen address in scraddr.
0025EA  3               
0025EA  3               	lda dispx 		; x position.
0025EA  3               	and #7 			; position straddling cells.
0025EA  3               	sta z80_b		; store in b register.
0025EA  3               
0025EA  3               	lda z80_l		; store sprite graphic address.
0025EA  3               	sta sprit1+1
0025EA  3               	sta sprit2+1
0025EA  3               	lda z80_h
0025EA  3               	sta sprit1+2
0025EA  3               	sta sprit2+2
0025EA  3               
0025EA  3               	ldx #0			; pixel height.
0025EA  3               	ldy #0
0025EA  3               sprit1:
0025EA  3               	lda objdta,x		; fetch first byte.
0025EA  3               	sta spr
0025EA  3               	inx
0025EA  3               sprit2:
0025EA  3               	lda objdta,x
0025EA  3               	sta spr+1
0025EA  3               
0025EA  3               	lda #0
0025EA  3               	sta spr+2
0025EA  3               	jsr sprit7		; shift sprite
0025EA  3               
0025EA  3               	dex
0025EA  3               	lda spr			; fetch graphic.
0025EA  3               	ldy spritetab,x
0025EA  3               	eor (scraddr),y		; merge with screen image.
0025EA  3               	sta (scraddr),y		; write to screen.
0025EA  3               	inx			; next screen byte.
0025EA  3               
0025EA  3               	lda spr+1		; fetch graphic.
0025EA  3               	ldy spritetab,x
0025EA  3               	eor (scraddr),y		; merge with screen image.
0025EA  3               	sta (scraddr),y		; write to screen.
0025EA  3               	iny
0025EA  3               
0025EA  3               	lda spr+2		; fetch graphic.
0025EA  3               	eor (scraddr),y		; merge with screen image.
0025EA  3               	sta (scraddr),y		; write to screen.
0025EA  3               
0025EA  3               	inx			; next source byte.
0025EA  3               	cpx #16
0025EA  3               	bne :+
0025EA  3               	inc scraddr+1
0025EA  3               :
0025EA  3               	cpx #32
0025EA  3               	bne sprit1		; repeat
0025EA  3               
0025EA  3               	ldx xtmp		; retreive X-reg
0025EA  3               	rts
0025EA  3               
0025EA  3               spritetab:
0025EA  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0025EA  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0025EA  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0025EA  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0025EA  3               
0025EA  3               spr:	.byte 0,0,0
0025EA  3               
0025EA  3               ;xtmp:	.byte 0
0025EA  3               .endif
0025EA  3               
0025EA  3               ;-----------------------------------------------------------
0025EA  3               ; Get room address.
0025EA  3               ;-----------------------------------------------------------
0025EA  3               
0025EA  3               ;.repeat 273
0025EA  3               ;  .byte 0
0025EA  3               ;.endrep
0025EA  3               
0025EA  3               groom:
0025EA  3  A6 rr        	ldx scno 		; screen number.
0025EC  3  A0 00        	ldy #0
0025EE  3               groomx:
0025EE  3  A9 5B        	lda #<scdat 		; pointer to screens.
0025F0  3  85 66        	sta z80_l
0025F2  3  A9 35        	lda #>scdat
0025F4  3  85 67        	sta z80_h
0025F6  3               groom1:
0025F6  3  E0 00        	cpx #0			; is it the first one?
0025F8  3  F0 15        	beq groom0 		; no more screens to skip.
0025FA  3               
0025FA  3  18           	clc
0025FB  3  A5 66        	lda z80_l
0025FD  3  79 5B 35     	adc scdat,y 		; low byte of screen size.
002600  3  85 66        	sta z80_l
002602  3  C8           	iny			; point to high byte.
002603  3  A5 67        	lda z80_h
002605  3  79 5B 35     	adc scdat,y 		; high byte of screen size.
002608  3  85 67        	sta z80_h
00260A  3  C8           	iny			; next address.
00260B  3               
00260B  3  CA           	dex 			; one less iteration.
00260C  3  4C F6 25     	jmp groom1 		; loop until we reach the end.
00260F  3               groom0:
00260F  3  AD 66 35     	lda numsc 		; add displacement.
002612  3  0A           	asl a
002613  3  18           	clc			; add double displacement to address.
002614  3  65 66        	adc z80_l
002616  3  85 66        	sta z80_l
002618  3  A5 67        	lda z80_h
00261A  3  69 00        	adc #0
00261C  3  85 67        	sta z80_h
00261E  3  60           	rts
00261F  3               
00261F  3               ;-----------------------------------------------------------
00261F  3               ; Draw present room.
00261F  3               ;-----------------------------------------------------------
00261F  3               
00261F  3               droom:
00261F  3  AD 2B 20     	lda wintop 		; window top.
002622  3  85 rr        	sta dispy		; set cursor y position.
002624  3               droom2:
002624  3  20 EA 25     	jsr groom 		; get address of current room.
002627  3  A9 00        	lda #0	 		; zero in accumulator.
002629  3  85 rr        	sta comcnt 		; reset compression counter.
00262B  3  AD 2D 20     	lda winhgt 		; height of window.
00262E  3  85 rr        	sta rrow		; set row counter
002630  3               droom0:
002630  3  AD 2C 20     	lda winlft 		; window left edge.
002633  3  85 rr        	sta dispx 		; set cursor x position.
002635  3  AD 2E 20     	lda winwid 		; width of window.
002638  3  85 rr        	sta rcol		; set column counter
00263A  3               droom1:
00263A  3  20 4B 26     	jsr flbyt 		; decompress next byte on the fly.
00263D  3  20 89 25     	jsr pattr2 		; show attributes and block.
002640  3  C6 rr        	dec rcol		; one less column.
002642  3  D0 F6        	bne droom1 		; repeat for entire line.
002644  3  E6 rr        	inc dispy		; move down one line.
002646  3  C6 rr        	dec rrow 		; one less row.
002648  3  D0 E6        	bne droom0 		; repeat for all rows.
00264A  3  60           	rts
00264B  3               
00264B  3               ;rcol:	.byte 0
00264B  3               ;rrow:	.byte 0
00264B  3               
00264B  3               ;----------------------------------------------
00264B  3               ; Decompress bytes on-the-fly.
00264B  3               ;----------------------------------------------
00264B  3               
00264B  3               flbyt:
00264B  3  A5 rr        	lda comcnt 		; compression counter.
00264D  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
00264F  3               
00264F  3  A0 00        	ldy #0
002651  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002653  3  E6 66        	inc z80_l 		; point to next cell.
002655  3  D0 02        	bne :+
002657  3  E6 67        	inc z80_h
002659  3               :
002659  3  C9 FF        	cmp #255 		; is this byte a control code?
00265B  3  F0 01        	beq :+
00265D  3  60           	rts 			; no, this byte is uncompressed.
00265E  3               :
00265E  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002660  3  85 rr        	sta combyt 		; set up the type.
002662  3  E6 66        	inc z80_l 		; point to quantity.
002664  3  D0 02        	bne :+
002666  3  E6 67        	inc z80_h
002668  3               :
002668  3  B1 66        	lda (z80_hl),y 		; get quantity.
00266A  3  E6 66        	inc z80_l 		; point to next byte.
00266C  3  D0 02        	bne :+
00266E  3  E6 67        	inc z80_h
002670  3               :
002670  3               flbyt1:
002670  3  85 rr        	sta comcnt 		; store new quantity.
002672  3  C6 rr        	dec comcnt		; one less.
002674  3  A5 rr        	lda combyt 		; byte to expand.
002676  3  60           	rts
002677  3               
002677  3               ;combyt:	.byte 0			; byte type compressed.
002677  3               ;comcnt:	.byte 0			; compression counter.
002677  3               
002677  3               ;------------------------------------------
002677  3               ; Ladder down check.
002677  3               ;
002677  3               ; Input:
002677  3               ;  IX = sprite pointer
002677  3               ;------------------------------------------
002677  3               
002677  3               .if lflag
002677  3               laddd:
002677  3               	ldy #9
002677  3               	lda (z80_ix),y		; x coordinate.
002677  3               	sta dispx
002677  3               
002677  3               	ldy #8
002677  3               	lda (z80_ix),y		; y coordinate.
002677  3               	and #254		; make it even.
002677  3               	sta (z80_ix),y 		; reset it.
002677  3               	clc 			; look down 16 pixels.
002677  3               numsp5:
002677  3               	adc #SPR_HGT
002677  3               	sta dispy		; coords in dispx,dispy.
002677  3               	jmp laddv
002677  3               
002677  3               ;------------------------------------------
002677  3               ; Ladder up check.
002677  3               ;
002677  3               ; Input:
002677  3               ;  IX = sprite pointer
002677  3               ;
002677  3               ; Output:
002677  3               ;  A  = 0 is ok, A <>0 is not ok
002677  3               ;------------------------------------------
002677  3               
002677  3               laddu:
002677  3               	ldy #9
002677  3               	lda (z80_ix),y		; x coordinate.
002677  3               	sta dispx
002677  3               
002677  3               	ldy #8
002677  3               	lda (z80_ix),y		; y coordinate.
002677  3               	and #254 		; make it even.
002677  3               	sta (z80_ix),y		; reset it.
002677  3               	clc 			; look 2 pixels above feet.
002677  3               numsp6:
002677  3               	adc #SPR_HGT-2
002677  3               	sta dispy		; coords in dispx,dispy.
002677  3               laddv:
002677  3               	jsr tstbl 		; get map address.
002677  3               	jsr ldchk 		; standard ladder check.
002677  3               	beq :+
002677  3               	rts 			; no way through.
002677  3               :
002677  3               	inc bufaddr 		; look right one cell.
002677  3               	bne :+
002677  3               	inc bufaddr+1
002677  3               :
002677  3               	jsr ldchk 		; do the check.
002677  3               	beq :+
002677  3               	rts 			; impassable.
002677  3               :
002677  3               	lda dispx 		; y coordinate.
002677  3               	and #7 			; position straddling block cells.
002677  3               	bne :+
002677  3               	rts 			; no more checks needed.
002677  3               :
002677  3               	inc bufaddr 		; look to third cell.
002677  3               	bne :+
002677  3               	inc bufaddr+1
002677  3               :
002677  3               	jsr ldchk 		; do the check.
002677  3               	rts  			; return with zero flag set accordingly.
002677  3               .endif
002677  3               
002677  3               ;---------------------------------------------------------
002677  3               ; Can go up check.
002677  3               ;
002677  3               ; Input:
002677  3               ;  IX = sprite pointer
002677  3               ;
002677  3               ; Output:
002677  3               ;  A  = 0 is ok, A <>0 is not ok
002677  3               ;---------------------------------------------------------
002677  3               
002677  3               cangu:
002677  3  A0 09        	ldy #9
002679  3  B1 68        	lda (z80_ix),y		; x coordinate.
00267B  3  85 rr        	sta dispx
00267D  3  A0 08        	ldy #8
00267F  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002681  3  38           	sec
002682  3  E9 02        	sbc #2
002684  3  85 rr        	sta dispy		; coords in dispx,dispy.
002686  3  20 21 29     	jsr tstbl 		; get map address.
002689  3  20 39 28     	jsr lrchk 		; standard left/right check.
00268C  3  F0 01        	beq :+
00268E  3  60           	rts			; no way through.
00268F  3               :
00268F  3  E6 rr        	inc bufaddr		; look right one cell.
002691  3  D0 02        	bne :+
002693  3  E6 rr        	inc bufaddr+1
002695  3               :
002695  3  20 39 28     	jsr lrchk 		; do the check.
002698  3  F0 01        	beq :+
00269A  3  60           	rts			; impassable.
00269B  3               :
00269B  3  A5 rr        	lda dispx		; x coordinate.
00269D  3  29 07        	and #7			; position straddling block cells.
00269F  3  D0 01        	bne :+
0026A1  3  60           	rts			; no more checks needed.
0026A2  3               :
0026A2  3  E6 rr        	inc bufaddr		; look to third cell.
0026A4  3  D0 02        	bne :+
0026A6  3  E6 rr        	inc bufaddr+1
0026A8  3               :
0026A8  3  20 39 28     	jsr lrchk		; do the check.
0026AB  3  60           	rts 			; return with zero flag set accordingly.
0026AC  3               
0026AC  3               ;---------------------------------------------------------
0026AC  3               ; Can go down check.
0026AC  3               ;
0026AC  3               ; Input:
0026AC  3               ;  IX = sprite pointer
0026AC  3               ;
0026AC  3               ; Output:
0026AC  3               ;  A  = 0 is ok, A <>0 is not ok
0026AC  3               ;---------------------------------------------------------
0026AC  3               
0026AC  3               ;.repeat 264
0026AC  3               ;  .byte 0
0026AC  3               ;.endrep
0026AC  3               
0026AC  3               cangd:
0026AC  3  A0 09        	ldy #9
0026AE  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0026B0  3  85 rr        	sta dispx
0026B2  3  A0 08        	ldy #8
0026B4  3  B1 68        	lda (z80_ix),y		; y coordinate.
0026B6  3  18           	clc
0026B7  3               numsp3:
0026B7  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
0026B9  3  85 rr        	sta dispy		; coords in dispx,dispy.
0026BB  3  20 21 29     	jsr tstbl 		; get map address.
0026BE  3  20 4E 28     	jsr plchk 		; block, platform check.
0026C1  3  F0 01        	beq :+
0026C3  3  60           	rts			; no way through.
0026C4  3               :
0026C4  3  E6 rr        	inc bufaddr		; look right one cell.
0026C6  3  D0 02        	bne :+
0026C8  3  E6 rr        	inc bufaddr+1
0026CA  3               :
0026CA  3  20 4E 28     	jsr plchk		; block, platform check.
0026CD  3  F0 01        	beq :+
0026CF  3  60           	rts			; impassable.
0026D0  3               :
0026D0  3  A5 rr        	lda dispx		; x coordinate.
0026D2  3  29 07        	and #7			; position straddling block cells.
0026D4  3  D0 01        	bne :+
0026D6  3  60           	rts			; no more checks needed.
0026D7  3               :
0026D7  3  E6 rr        	inc bufaddr		; look to third cell.
0026D9  3  D0 02        	bne :+
0026DB  3  E6 rr        	inc bufaddr+1
0026DD  3               :
0026DD  3  20 4E 28     	jsr plchk		; block, platform check.
0026E0  3  60           	rts			; return with zero flag set accordingly.
0026E1  3               
0026E1  3               ;---------------------------------------------------------
0026E1  3               ; Can go left check.
0026E1  3               ;
0026E1  3               ; Input:
0026E1  3               ;  IX = sprite pointer
0026E1  3               ;
0026E1  3               ; Output:
0026E1  3               ;  A  = 0 is ok, A <>0 is not ok
0026E1  3               ;---------------------------------------------------------
0026E1  3               
0026E1  3               cangl:
0026E1  3  A0 08        	ldy #8
0026E3  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0026E5  3  85 rr        	sta dispy
0026E7  3  A0 09        	ldy #9
0026E9  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0026EB  3  38           	sec
0026EC  3  E9 02        	sbc #2			; look left 2 pixels.
0026EE  3  85 rr        	sta dispx		; coords in dispx,dispy.
0026F0  3  4C 12 28     	jmp cangh		; test if we can go there.
0026F3  3               
0026F3  3               ;---------------------------------------------------------
0026F3  3               ; Can go right check.
0026F3  3               ;
0026F3  3               ; Input:
0026F3  3               ;  IX = sprite pointer
0026F3  3               ;
0026F3  3               ; Output:
0026F3  3               ;  A  = 0 is ok, A <>0 is not ok
0026F3  3               ;---------------------------------------------------------
0026F3  3               
0026F3  3  00 00 00 00  .repeat 272
0026F7  3  00 00 00 00  
0026FB  3  00 00 00 00  
002803  3                 .byte 0
002803  3               .endrep
002803  3               
002803  3               cangr:
002803  3  A0 08        	ldy #8
002805  3  B1 68        	lda (z80_ix),y		; y coordinate.
002807  3  85 rr        	sta dispy
002809  3  A0 09        	ldy #9
00280B  3  B1 68        	lda (z80_ix),y		; x coordinate.
00280D  3  18           	clc
00280E  3  69 10        	adc #16			; look right 16 pixels.
002810  3  85 rr        	sta dispx		; coords in dispx,dispy.
002812  3               cangh:
002812  3               cangh2:
002812  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
002814  3  85 63        	sta z80_b
002816  3  A5 rr        	lda dispy		; y position.
002818  3  29 07        	and #7			; does x straddle cells?
00281A  3  D0 02        	bne cangh0		; yes, loop counter is good.
00281C  3  C6 63        	dec z80_b		; one less row to write.
00281E  3               cangh0:
00281E  3  20 21 29     	jsr tstbl		; get map address.
002821  3               cangh1:
002821  3  20 39 28     	jsr lrchk		; standard left/right check.
002824  3  F0 01        	beq :+
002826  3  60           	rts			; no way through.
002827  3               :
002827  3  48           	pha
002828  3  18           	clc
002829  3  A5 rr        	lda bufaddr
00282B  3  69 20        	adc #32			; look down.
00282D  3  85 rr        	sta bufaddr
00282F  3  90 02        	bcc :+
002831  3  E6 rr        	inc bufaddr+1
002833  3               :
002833  3  68           	pla
002834  3               
002834  3  C6 63        	dec z80_b
002836  3  D0 E9        	bne cangh1
002838  3  60           	rts
002839  3               
002839  3               ;-------------------------------------
002839  3               ; Check left/right movement is okay.
002839  3               ;
002839  3               ; Input:
002839  3               ;  bufaddr = MAP + x/8 + y/8*32
002839  3               ;
002839  3               ; Output:
002839  3               ;  A  = 0 is ok, A <>0 is not ok
002839  3               ;-------------------------------------
002839  3               
002839  3               lrchk:
002839  3  A0 00        	ldy #0
00283B  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
00283D  3  C9 02        	cmp #WALL 		; is it passable?
00283F  3  F0 0A        	beq lrchkx		; no.
002841  3               
002841  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002843  3  F0 06        	beq lrchkx		; not passable.
002845  3  A9 00        	lda #0
002847  3  60           	rts
002848  3               
002848  3               ;--------------------------------------------------------------
002848  3               ; Called by mmenu
002848  3               ;--------------------------------------------------------------
002848  3               
002848  3               always:
002848  3  A9 FF        	lda #255		; report it as okay.
00284A  3  60           	rts
00284B  3               
00284B  3               lrchkx:
00284B  3  A9 01        	lda #1 			; reset all bits.
00284D  3  60           	rts
00284E  3               
00284E  3               
00284E  3               ;--------------------------------------------------------------
00284E  3               ; Check platform or solid item is not in way.
00284E  3               ;
00284E  3               ; Input:
00284E  3               ;  bufaddr = MAP + x/8 + y/8*32
00284E  3               ;
00284E  3               ; Output:
00284E  3               ;  A  = 0 is ok, A <>0 is not ok
00284E  3               ;--------------------------------------------------------------
00284E  3               
00284E  3               plchk:
00284E  3  A0 00        	ldy #0
002850  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002852  3  C9 02        	cmp #WALL 		; is it passable?
002854  3  F0 F5        	beq lrchkx		; no.
002856  3               .if pflag .or dflag
002856  3               	cmp #FODDER		; fodder has to be dug.
002856  3               	beq lrchkx		; not passable.
002856  3               .endif
002856  3  C9 01        	cmp #PLATFM		; platform is solid.
002858  3  F0 03        	beq plchkx		; not passable.
00285A  3               .if lflag
00285A  3               	cmp #LADDER		; is it a ladder?
00285A  3               	beq lrchkx		; on ladder, deny movement.
00285A  3               .endif
00285A  3               plchk0:
00285A  3  A9 00        	lda #0			; report as ok
00285C  3  60           	rts
00285D  3               plchkx:
00285D  3  A5 rr        	lda dispy		; x coordinate.
00285F  3  29 07        	and #7			; position straddling blocks.
002861  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002863  3  4C 5A 28     	jmp plchk0
002866  3               
002866  3               ;--------------------------------------------------------------
002866  3               ; Check ladder is available.
002866  3               ;
002866  3               ; Input:
002866  3               ;  bufaddr = MAP + x/8 + y/8*32
002866  3               ;
002866  3               ; Output:
002866  3               ;  A  = 0 is ok, A <>0 is not ok
002866  3               ;--------------------------------------------------------------
002866  3               
002866  3               .if lflag
002866  3               ldchk:
002866  3               	ldy #0
002866  3               	lda (bufaddr),y 	; fetch cell.
002866  3               	cmp #LADDER 		; is it a ladder?
002866  3               	beq :+
002866  3               	lda #1
002866  3               	rts  			; return with zero flag set accordingly.
002866  3               :
002866  3               	lda #0
002866  3               	rts
002866  3               .endif
002866  3               
002866  3               ;--------------------------------------------------------------
002866  3               ; Get collectables.
002866  3               ;--------------------------------------------------------------
002866  3               
002866  3               .if cflag
002866  3               getcol:
002866  3                       lda #COLECT             ; collectable blocks.
002866  3                       sta z80_b
002866  3                       jsr tded                ; test for collectable blocks.
002866  3                       cmp z80_b               ; did we find one?
002866  3                       beq :+
002866  3                       rts                     ; none were found, job done.
002866  3               :
002866  3                       jsr gtblk               ; get block.
002866  3                       jsr evnt20              ; collected block event.
002866  3                       jmp getcol              ; repeat until none left.
002866  3               
002866  3               ; Get collectable block.
002866  3               
002866  3               gtblk:
002866  3               	ldy #0
002866  3               	lda (bufaddr),y
002866  3               	sta z80_a
002866  3                       lda #0
002866  3                       sta (bufaddr),y		; make it empty now.
002866  3               
002866  3               	lda bufaddr		; set dispx
002866  3               	and #31
002866  3               	sta dispx
002866  3               
002866  3               	lda bufaddr+1		; Set dispy
002866  3               	sec
002866  3               	sbc #>MAP
002866  3               	sta bufaddr+1
002866  3               	asl bufaddr
002866  3               	rol bufaddr+1
002866  3               	asl bufaddr
002866  3               	rol bufaddr+1
002866  3               	asl bufaddr
002866  3               	rol bufaddr+1
002866  3               	lda bufaddr+1
002866  3               	sta dispy
002866  3               
002866  3               	lda colpatt		; get blocknr
002866  3               	sta z80_e		; displacement in e.
002866  3               	lda #0
002866  3               	sta z80_d		; no high byte.
002866  3               	asl z80_e  		; multiply char by 8.
002866  3               	rol z80_d
002866  3               	asl z80_e
002866  3               	rol z80_d
002866  3               	asl z80_e
002866  3               	rol z80_d
002866  3               	clc
002866  3               	lda z80_e
002866  3               	adc #<chgfx 		; address of graphics.
002866  3               	sta tileaddr
002866  3               	lda z80_d
002866  3               	adc #>chgfx
002866  3               	sta tileaddr+1
002866  3               	jsr gprad 		; get screen address.
002866  3               	ldx #7			; number of pixel rows to write.
002866  3               gtblk0:
002866  3               	ldy #0
002866  3               	lda (tileaddr),y 	; get image byte.
002866  3               	ldy scrtab,x
002866  3               	eor (scraddr),y 	; XOR tile on screen
002866  3               	sta (scraddr),y 	; copy to screen.
002866  3               	inc tileaddr 		; next image byte.
002866  3               	bne :+
002866  3               	inc tileaddr+1
002866  3               :
002866  3               	dex	 		; repeat for 8 pixel rows.
002866  3               	bpl gtblk0
002866  3               	rts
002866  3               .endif
002866  3               
002866  3               ;--------------------------------------------------------------
002866  3               ; Touched deadly block check.
002866  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002866  3               ;
002866  3               ; Input:
002866  3               ;  IX = sprite address
002866  3               ;
002866  3               ; Output:
002866  3               ;  A  = 0 is ok, A=5 is not ok
002866  3               ;--------------------------------------------------------------
002866  3               
002866  3               tded:
002866  3  A0 08        	ldy #8
002868  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00286A  3  85 rr        	sta dispy
00286C  3  C8           	iny
00286D  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00286F  3  85 rr        	sta dispx		; coords in dispx,dispy.
002871  3  20 21 29     	jsr tstbl		; get map address.
002874  3  48           	pha
002875  3  A9 1F        	lda #31			; default distance to next line down.
002877  3  85 64        	sta z80_e
002879  3  68           	pla
00287A  3  C5 63        	cmp z80_b		; is this the required block?
00287C  3  D0 01        	bne :+
00287E  3  60           	rts			; yes.
00287F  3               :
00287F  3  E6 rr        	inc bufaddr 		; next cell.
002881  3  D0 02        	bne :+
002883  3  E6 rr        	inc bufaddr+1
002885  3               :
002885  3  A0 00        	ldy #0
002887  3  B1 rr        	lda (bufaddr),y		; fetch type.
002889  3  C5 63        	cmp z80_b 		; is this deadly/custom?
00288B  3  D0 01        	bne :+
00288D  3  60           	rts			; yes.
00288E  3               :
00288E  3  A5 rr        	lda dispx		; horizontal position.
002890  3  85 62        	sta z80_c 		; store column in c register.
002892  3  29 07        	and #7			; is it straddling cells?
002894  3  D0 03        	bne :+
002896  3  4C AA 28     	jmp tded0		; no.
002899  3               :
002899  3  E6 rr        	inc bufaddr 		; last cell.
00289B  3  D0 02        	bne :+
00289D  3  E6 rr        	inc bufaddr+1
00289F  3               :
00289F  3  A0 00        	ldy #0
0028A1  3  B1 rr        	lda (bufaddr),y 	; fetch type.
0028A3  3  C5 63        	cmp z80_b		; is this the block?
0028A5  3  D0 01        	bne :+
0028A7  3  60           	rts			; yes.
0028A8  3               :
0028A8  3  C6 64        	dec z80_e		; one less cell to next row down.
0028AA  3               tded0:
0028AA  3  18           	clc 			; point to next row.
0028AB  3  A5 rr        	lda bufaddr
0028AD  3  65 64        	adc z80_e
0028AF  3  85 rr        	sta bufaddr
0028B1  3  90 02        	bcc :+
0028B3  3  E6 rr        	inc bufaddr+1
0028B5  3               :
0028B5  3  A0 00        	ldy #0
0028B7  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
0028B9  3  C5 63        	cmp z80_b		; is this fatal?
0028BB  3  D0 01        	bne :+
0028BD  3  60           	rts			; yes.
0028BE  3               :
0028BE  3  E6 rr        	inc bufaddr 		; next cell.
0028C0  3  D0 02        	bne :+
0028C2  3  E6 rr        	inc bufaddr+1
0028C4  3               :
0028C4  3  A0 00        	ldy #0
0028C6  3  B1 rr        	lda (bufaddr),y 	; fetch type.
0028C8  3  C5 63        	cmp z80_b		; is this fatal?
0028CA  3  D0 01        	bne :+
0028CC  3  60           	rts			; yes.
0028CD  3               :
0028CD  3  A5 62        	lda z80_c		; horizontal position.
0028CF  3  29 07        	and #7			; is it straddling cells?
0028D1  3  D0 03        	bne :+
0028D3  3  4C E5 28     	jmp tded1 		; no.
0028D6  3               :
0028D6  3  E6 rr        	inc bufaddr		; last cell.
0028D8  3  D0 02        	bne :+
0028DA  3  E6 rr        	inc bufaddr+1
0028DC  3               :
0028DC  3  A0 00        	ldy #0
0028DE  3  B1 rr        	lda (bufaddr),y		; fetch type.
0028E0  3  C5 63        	cmp z80_b		; is this fatal?
0028E2  3  D0 01        	bne :+
0028E4  3  60           	rts			; yes.
0028E5  3               :
0028E5  3               tded1:
0028E5  3  A5 rr        	lda dispy		; vertical position.
0028E7  3  29 07        	and #7 			; is it straddling cells?
0028E9  3  D0 01        	bne :+
0028EB  3  60           	rts			; no, job done.
0028EC  3               :
0028EC  3  18           	clc			; point to next row.
0028ED  3  A5 rr        	lda bufaddr
0028EF  3  65 64        	adc z80_e
0028F1  3  85 rr        	sta bufaddr
0028F3  3  90 02        	bcc :+
0028F5  3  E6 rr        	inc bufaddr+1
0028F7  3               :
0028F7  3  A0 00        	ldy #0
0028F9  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
0028FB  3  C5 63        	cmp z80_b		; is this fatal?
0028FD  3  D0 01        	bne :+
0028FF  3  60           	rts			; yes.
002900  3               :
002900  3  E6 rr        	inc bufaddr		; next cell.
002902  3  D0 02        	bne :+
002904  3  E6 rr        	inc bufaddr+1
002906  3               :
002906  3  A0 00        	ldy #0
002908  3  B1 rr        	lda (bufaddr),y 	; fetch type.
00290A  3  C5 63        	cmp z80_b		; is this fatal?
00290C  3  D0 01        	bne :+
00290E  3  60           	rts			; yes.
00290F  3               :
00290F  3  A5 62        	lda z80_c		; horizontal position.
002911  3  29 07        	and #7			; is it straddling cells?
002913  3  D0 01        	bne :+
002915  3  60           	rts			; no.
002916  3               :
002916  3  E6 rr        	inc bufaddr		; last cell.
002918  3  D0 02        	bne :+
00291A  3  E6 rr        	inc bufaddr+1
00291C  3               :
00291C  3  A0 00        	ldy #0
00291E  3  B1 rr        	lda (bufaddr),y		; fetch final type.
002920  3  60           	rts 			; return with final type in accumulator.
002921  3               
002921  3               ;---------------------------------------------------
002921  3               ; Fetch block type at (dispx, dispy).
002921  3               ;
002921  3               ; Output:
002921  3               ;  A = block type
002921  3               ;---------------------------------------------------
002921  3               
002921  3               tstbl:
002921  3  A5 rr        	lda dispy 		; fetch y coord.
002923  3  4A           	lsr a			; bufaddr = y/8
002924  3  4A           	lsr a
002925  3  4A           	lsr a
002926  3  85 rr        	sta chary
002928  3               
002928  3  85 rr        	sta bufaddr
00292A  3  A9 00        	lda #0
00292C  3  85 rr        	sta bufaddr+1
00292E  3               
00292E  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
002930  3  26 rr        	rol bufaddr+1
002932  3  06 rr        	asl bufaddr
002934  3  26 rr        	rol bufaddr+1
002936  3  06 rr        	asl bufaddr
002938  3  26 rr        	rol bufaddr+1
00293A  3  06 rr        	asl bufaddr
00293C  3  26 rr        	rol bufaddr+1
00293E  3  06 rr        	asl bufaddr
002940  3  26 rr        	rol bufaddr+1
002942  3               
002942  3  A5 rr        	lda dispx		; x/8
002944  3  4A           	lsr a
002945  3  4A           	lsr a
002946  3  4A           	lsr a
002947  3  85 rr        	sta charx
002949  3               
002949  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
00294A  3  65 rr        	adc bufaddr
00294C  3  69 00        	adc #<MAP
00294E  3  85 rr        	sta bufaddr
002950  3  A5 rr        	lda bufaddr+1
002952  3  69 98        	adc #>MAP
002954  3  85 rr        	sta bufaddr+1
002956  3               
002956  3  A0 00        	ldy #0
002958  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
00295A  3  60           	rts
00295B  3               
00295B  3               
00295B  3               ;-------------------------------------------------------------------
00295B  3               ; Jump - if we can.
00295B  3               ; Requires initial speed to be set up in accumulator prior to call.
00295B  3               ;
00295B  3               ; Input:
00295B  3               ;  IX = sprite address
00295B  3               ;-------------------------------------------------------------------
00295B  3               
00295B  3               jump:
00295B  3  A0 0D        	ldy #13
00295D  3  B1 68        	lda (z80_ix),y		; jump table low.
00295F  3  A0 0E        	ldy #14
002961  3  11 68        	ora (z80_ix),y		; jump table high.
002963  3  F0 01        	beq :+
002965  3  60           	rts			; already in the air.
002966  3               :
002966  3  A9 38        	lda #>jtab
002968  3  A0 0E        	ldy #14
00296A  3  91 68        	sta (z80_ix),y		; set jump high.
00296C  3  A9 92        	lda #<jtab		; jump table start.
00296E  3  A0 0D        	ldy #13
002970  3  91 68        	sta (z80_ix),y		; set jump low.
002972  3  60           	rts
002973  3               
002973  3               ; Jump table.
002973  3               
002973  3               ;jtab:
002973  3               ;	.byte 248,250,252
002973  3               ;	.byte 254,254,255
002973  3               ;	.byte 255,255,0,0
002973  3               ;	.byte 0,1,1,1,2,2
002973  3               ;	.byte 4,6,8,8,8,99
002973  3               
002973  3               ;------------------------------------------------
002973  3               ; Random numbers code.
002973  3               ; Pseudo-random number generator, 8-bit.
002973  3               ;
002973  3               ; Output:
002973  3               ;  RND = random number
002973  3               ;------------------------------------------------
002973  3               
002973  3               random:
002973  3  A5 rr        	lda seed
002975  3  F0 05        	beq doEor
002977  3  0A           	asl a
002978  3  F0 04        	beq noEor
00297A  3  90 02        	bcc noEor
00297C  3  49 1D        doEor:	eor #$1d
00297E  3  85 rr        noEor:	sta seed
002980  3  60           	rts
002981  3               
002981  3  A5 rr        	lda seed		; get last random number.
002983  3  0A           	asl a
002984  3  0A           	asl a
002985  3  18           	clc
002986  3  65 rr        	adc seed
002988  3  18           	clc
002989  3  69 45        	adc #$45
00298B  3  85 rr        	sta seed		; store new seed.
00298D  3  85 rr        	sta varrnd		; return number in variable.
00298F  3  60           	rts
002990  3               
002990  3               ;--------------------------------------------------------
002990  3               ; Keys
002990  3               ;
002990  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002990  3               ;             ||||||||
002990  3               ;             |||||||+> Right    KEY 0  - X
002990  3               ;             ||||||+-> Left     KEY 1  - Z
002990  3               ;             |||||+--> Down     KEY 2  - .
002990  3               ;             ||||+---> Up       KEY 3  - ;
002990  3               ;             |||+----> Fire1    KEY 4  - SPC
002990  3               ;             ||+-----> Fire2    KEY 5  - Q
002990  3               ;             |+------> Fire3    KEY 6  - P
002990  3               ;             +-------> Not used
002990  3               ;
002990  3               ;                       Option1  KEY 7  - 1
002990  3               ;                       Option2  KEY 8  - 2
002990  3               ;                       Option3  KEY 9  - 3
002990  3               ;                       Option4  KEY 10 - 4
002990  3               ;--------------------------------------------------------
002990  3               
002990  3               ;              X   Z   .   ;  SPC  Q   P
002990  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002990  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002990  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002994  3  00 04 14     
002997  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
00299B  3               
00299B  3               ;--------------------------------------------------------
00299B  3               ; Keyboard test routine.
00299B  3               ;
00299B  3               ; Input:
00299B  3               ;  A = key to read, high nibble=row and low nibble=col
00299B  3               ;
00299B  3               ; Output:
00299B  3               ;  carry clr = key pressed
00299B  3               ;  carry set = key not pressed
00299B  3               ;--------------------------------------------------------
00299B  3               
00299B  3               ktest:
00299B  3  85 61        	sta z80_a		; save key
00299D  3               
00299D  3  4A           	lsr a			; set row
00299E  3  4A           	lsr a
00299F  3  4A           	lsr a
0029A0  3  4A           	lsr a
0029A1  3  09 F0        	ora #ScrMode		; don't flip screenmode
0029A3  3  8D 00 B0     	sta KeyRowAddr
0029A6  3               
0029A6  3  A5 61        	lda z80_a
0029A8  3  29 0F        	and #$0f
0029AA  3  AA           	tax
0029AB  3  AD 01 B0     	lda KeyColAddr		; read column
0029AE  3               
0029AE  3  3D B7 29     	and keymask,x		; check key pressed
0029B1  3  F0 02        	beq pressed
0029B3  3  38           	sec			; key not pressed
0029B4  3  60           	rts
0029B5  3               pressed:
0029B5  3  18           	clc			; key pressed
0029B6  3  60           	rts
0029B7  3               
0029B7  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
0029BB  3  10 20        
0029BD  3               
0029BD  3               ;-------------------------------------------------------
0029BD  3               ; Joystick and keyboard reading routines.
0029BD  3               ;
0029BD  3               ; contrl = 0, Keyboard
0029BD  3               ;          1, JoyKeyb
0029BD  3               ;          2, JoyMMC
0029BD  3               ;-------------------------------------------------------
0029BD  3               
0029BD  3               joykey:
0029BD  3  A5 rr        	lda contrl 		; control flag.
0029BF  3  C9 01        	cmp #1
0029C1  3  D0 03        	bne :+
0029C3  3  4C E1 29     	jmp joyjoy 		; read keyboard joystick
0029C6  3               :
0029C6  3  C9 02        	cmp #2
0029C8  3  D0 03        	bne :+
0029CA  3  4C 0A 2A     	jmp joysin 		; read MMC joystick.
0029CD  3               :
0029CD  3               ; Keyboard controls.
0029CD  3               
0029CD  3  A9 00        	lda #0		 	; zero reading.
0029CF  3  85 64        	sta z80_e
0029D1  3               
0029D1  3  A0 06        	ldy #6	 		; address of last key.
0029D3  3               joyke0:
0029D3  3  B9 93 38     	lda keys,y 		; get key from table.
0029D6  3  20 9B 29     	jsr ktest		; being pressed?
0029D9  3  26 64        	rol z80_e 		; rotate into reading.
0029DB  3               
0029DB  3  88           	dey		 	; next key.
0029DC  3  10 F5        	bpl joyke0 		; repeat for all keys.
0029DE  3  4C F2 29     	jmp joyjo1 		; store the value.
0029E1  3               
0029E1  3               ; Keyboard joystick controls.
0029E1  3               
0029E1  3               joyjoy:
0029E1  3  A9 00        	lda #0		 	; zero reading.
0029E3  3  85 64        	sta z80_e
0029E5  3               
0029E5  3  A0 06        	ldy #6	 		; address of last key.
0029E7  3               joyjo3:
0029E7  3  B9 90 29     	lda jkeys,y 		; get key from table.
0029EA  3  20 9B 29     	jsr ktest		; being pressed?
0029ED  3  26 64        	rol z80_e 		; rotate into reading.
0029EF  3               
0029EF  3  88           	dey		 	; next key.
0029F0  3  10 F5        	bpl joyjo3 		; repeat for all keys.
0029F2  3               joyjo1:
0029F2  3  A5 64        	lda z80_e 		; copy e register to accumulator.
0029F4  3               joyjo2:
0029F4  3  85 rr        	sta joyval		; remember value.
0029F6  3  60           	rts
0029F7  3               
0029F7  3               
0029F7  3               ; AtoMMC joystick controls.
0029F7  3               
0029F7  3               ; Set PORTB direction
0029F7  3               
0029F7  3               joyinit:
0029F7  3  A9 FF        	lda #$ff   		; Write value to latch, bits 0-7 input
0029F9  3  8D 01 B4     	sta DatReg
0029FC  3  20 38 2A     	jsr interwritedelay
0029FF  3  A9 A1        	lda #$a1   		; Write direction in latch to PORTB
002A01  3  8D 00 B4     	sta CmdReg
002A04  3               
002A04  3               wait_until_not_busy:
002A04  3  AD 00 B4     	lda CmdReg
002A07  3  30 FB        	bmi wait_until_not_busy
002A09  3  60           	rts
002A0A  3               
002A0A  3               ; Get PORTB value
002A0A  3               
002A0A  3               joysin:
002A0A  3  A9 A2        	lda #$a2   		; Read value PORTB in latch
002A0C  3  8D 00 B4     	sta CmdReg
002A0F  3  20 38 2A     	jsr interwritedelay
002A12  3               
002A12  3  AD 01 B4     	lda DatReg		; Read joystick status
002A15  3  29 7F        	and #$7f
002A17  3  85 rr        	sta joyval
002A19  3  85 F0        	sta $f0
002A1B  3               
002A1B  3  AD 98 38     	lda keys+5		; check fire2
002A1E  3  20 9B 29     	jsr ktest
002A21  3  B0 06        	bcs :+
002A23  3  A5 rr        	lda joyval
002A25  3  29 DF        	and #$df
002A27  3  85 rr        	sta joyval
002A29  3               :
002A29  3  AD 99 38     	lda keys+6		; check fire3
002A2C  3  20 9B 29     	jsr ktest
002A2F  3  B0 06        	bcs :+
002A31  3  A5 rr        	lda joyval
002A33  3  29 BF        	and #$bf
002A35  3  85 rr        	sta joyval
002A37  3               :
002A37  3  60           	rts
002A38  3               
002A38  3               ; Short delay
002A38  3               ; Enough to intersperse 2 writes to the FATPIC.
002A38  3               
002A38  3               interwritedelay:
002A38  3  A9 08        	lda  #8
002A3A  3  38           	sec
002A3B  3               loop:
002A3B  3  E9 01        	sbc  #1
002A3D  3  D0 FC        	bne  loop
002A3F  3  60           	rts
002A40  3               
002A40  3               ;tmp_byte:   .byte 0
002A40  3               
002A40  3               ;---------------------------------------------------------------
002A40  3               ; Getkey in column,row format
002A40  3               ;
002A40  3               ; Output:
002A40  3               ;  A = high nibble=row and low nibble=column key in matrix
002A40  3               ;---------------------------------------------------------------
002A40  3               
002A40  3               kget:
002A40  3  A9 F0        	lda #ScrMode		; high-mono mode.
002A42  3  8D 00 B0     	sta ScrSelAddr		; screen select port
002A45  3  86 rr        	stx xtmp
002A47  3               kget4:
002A47  3  20 71 FE     	jsr READKEY		; read key until pressed
002A4A  3  C0 FF        	cpy #255
002A4C  3  F0 F9        	beq kget4
002A4E  3  85 rr        	sta rcol		; save column
002A50  3  86 rr        	stx rrow		; determine row
002A52  3               kget3:
002A52  3  20 71 FE     	jsr READKEY		; wait until key released
002A55  3  C0 FF        	cpy #255
002A57  3  D0 F9        	bne kget3
002A59  3               
002A59  3  38           	sec			; calculate matrix row
002A5A  3  A9 0A        	lda #10
002A5C  3  E5 rr        	sbc rrow
002A5E  3  0A           	asl a
002A5F  3  0A           	asl a
002A60  3  0A           	asl a
002A61  3  0A           	asl a
002A62  3  85 rr        	sta rrow
002A64  3               
002A64  3  A0 FF        	ldy #255		; find column mask
002A66  3               kget1:
002A66  3  C8           	iny
002A67  3  B9 B7 29     	lda keymask,y
002A6A  3  C5 rr        	cmp rcol
002A6C  3  F0 03        	beq kget2
002A6E  3  4C 66 2A     	jmp kget1
002A71  3               kget2:
002A71  3  98           	tya			; determine column
002A72  3  18           	clc
002A73  3  65 rr        	adc rrow
002A75  3  A6 rr        	ldx xtmp
002A77  3  60           	rts
002A78  3               
002A78  3               ;---------------------------------------------------------------
002A78  3               ; Display message.
002A78  3               ;
002A78  3               ; Input:
002A78  3               ;  A = message number
002A78  3               ;---------------------------------------------------------------
002A78  3               
002A78  3               dmsg:
002A78  3  AA           	tax
002A79  3  A9 A0        	lda #<msgdat		; pointer to messages.
002A7B  3  85 66        	sta z80_l
002A7D  3  A9 34        	lda #>msgdat
002A7F  3  85 67        	sta z80_h
002A81  3  20 93 2B     	jsr getwrd		; get message number.
002A84  3               dmsg3:
002A84  3  20 80 2B     	jsr preprt		; pre-printing stuff.
002A87  3  20 AE 23     	jsr checkx		; make sure we"re in a printable range.
002A8A  3  A5 rr        	lda prtmod		; print mode.
002A8C  3  D0 47        	bne bmsg1		; no, double-height text.
002A8E  3               dmsg0:
002A8E  3  A5 67        	lda z80_h		; store string pointer.
002A90  3  48           	pha
002A91  3  A5 66        	lda z80_l
002A93  3  48           	pha
002A94  3               
002A94  3  A0 00        	ldy #0
002A96  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
002A98  3  29 7F        	and #127		; remove any end marker.
002A9A  3  C9 0D        	cmp #13
002A9C  3  F0 24        	beq dmsg1
002A9E  3  20 42 25     	jsr pchar		; display character.
002AA1  3  20 6D 2B     	jsr nexpos 		; display position.
002AA4  3  D0 03        	bne dmsg2		; not on a new line.
002AA6  3  20 72 2B     	jsr nexlin		; next line down.
002AA9  3               dmsg2:
002AA9  3  68           	pla			; retrieve string pointer
002AAA  3  85 66        	sta z80_l
002AAC  3  68           	pla
002AAD  3  85 67        	sta z80_h
002AAF  3               
002AAF  3  A0 00        	ldy #0
002AB1  3  B1 66        	lda (z80_hl),y		; fetch last character.
002AB3  3  0A           	asl a  			; was it the end?
002AB4  3  90 03        	bcc :+
002AB6  3  4C 01 24     	jmp dscor2		; yes, job done.
002AB9  3               :
002AB9  3  E6 66        	inc z80_l		; next character to display.
002ABB  3  D0 02        	bne :+
002ABD  3  E6 67        	inc z80_h
002ABF  3               :
002ABF  3  4C 8E 2A     	jmp dmsg0
002AC2  3               dmsg1:
002AC2  3  E6 rr        	inc dispy
002AC4  3  A5 rr        	lda dispy
002AC6  3  C9 18        	cmp #24
002AC8  3  90 04        	bcc dmsg4
002ACA  3  A9 00        	lda #0
002ACC  3  85 rr        	sta dispy
002ACE  3               dmsg4:
002ACE  3  A9 00        	lda #0
002AD0  3  85 rr        	sta dispx
002AD2  3  4C A9 2A     	jmp dmsg2
002AD5  3               
002AD5  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
002AD5  3               
002AD5  3               ;----------------------------------------------------------
002AD5  3               ; Display message in big text.
002AD5  3               ;
002AD5  3               ; Input:
002AD5  3               ;  HL = string pointer
002AD5  3               ;----------------------------------------------------------
002AD5  3               
002AD5  3               bmsg1:
002AD5  3  A0 00        	ldy #0
002AD7  3  B1 66        	lda (z80_hl),y 		; get character to display.
002AD9  3  29 7F        	and #127		; only want 7 bits.
002ADB  3  C9 0D        	cmp #13
002ADD  3  F0 13        	beq bmsg2
002ADF  3  20 07 2B     	jsr bchar 		; display big char.
002AE2  3               bmsg3:
002AE2  3  A0 00        	ldy #0
002AE4  3  B1 66        	lda (z80_hl),y 		; look at last character.
002AE6  3  48           	pha
002AE7  3  E6 66        	inc z80_l 		; next character in list.
002AE9  3  D0 02        	bne :+
002AEB  3  E6 67        	inc z80_h
002AED  3               :
002AED  3  68           	pla
002AEE  3  0A           	asl a  			; was terminator flag set?
002AEF  3  90 E4        	bcc bmsg1		; no, keep going.
002AF1  3  60           	rts
002AF2  3               bmsg2:
002AF2  3  A9 00        	lda #0
002AF4  3  85 rr        	sta dispx
002AF6  3  E6 rr        	inc dispy
002AF8  3  E6 rr        	inc dispy
002AFA  3  A5 rr        	lda dispy
002AFC  3  C9 17        	cmp #23
002AFE  3  90 E2        	bcc bmsg3
002B00  3  A9 00        	lda #0
002B02  3  85 rr        	sta dispy
002B04  3  4C E2 2A     	jmp bmsg3
002B07  3               
002B07  3               ;----------------------------------------------------------
002B07  3               ; Big character display.
002B07  3               ;
002B07  3               ; Input:
002B07  3               ;  A = character
002B07  3               ;----------------------------------------------------------
002B07  3               
002B07  3               bchar:
002B07  3  85 64        	sta z80_e		; save char in lb
002B09  3  A9 00        	lda #0
002B0B  3  85 65        	sta z80_d		; reset hb
002B0D  3               
002B0D  3  06 64        	asl z80_e 		; multiply char by 8.
002B0F  3  26 65        	rol z80_d
002B11  3  06 64        	asl z80_e
002B13  3  26 65        	rol z80_d
002B15  3  06 64        	asl z80_e
002B17  3  26 65        	rol z80_d		; de = a*8
002B19  3               
002B19  3  18           	clc			; de = Fontpointer + a*8
002B1A  3  A5 64        	lda z80_e
002B1C  3  69 92        	adc #<(FONT-256) 		; address of font.
002B1E  3  85 64        	sta z80_e
002B20  3  A5 65        	lda z80_d
002B22  3  69 34        	adc #>(FONT-256)
002B24  3  85 65        	sta z80_d
002B26  3               
002B26  3  20 F3 24     	jsr gprad 		; get screen address.
002B29  3               
002B29  3  A2 00        	ldx #0			; height of character in font.
002B2B  3               bchar0:
002B2B  3  A0 00        	ldy #0
002B2D  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
002B2F  3               
002B2F  3               .if iflag
002B2F  3               	eor #$ff
002B2F  3               .endif
002B2F  3               
002B2F  3  91 rr        	sta (scraddr),y
002B31  3  48           	pha
002B32  3  20 C7 2E     	jsr nline 		; next line down.
002B35  3  68           	pla
002B36  3  91 rr        	sta (scraddr),y
002B38  3  20 C7 2E     	jsr nline 		; next line down.
002B3B  3               
002B3B  3  18           	clc
002B3C  3  E6 64        	inc z80_e 		; next line of font.
002B3E  3  D0 02        	bne :+
002B40  3  E6 65        	inc z80_d
002B42  3               :
002B42  3  E8           	inx
002B43  3  E0 08        	cpx #8
002B45  3  D0 E4        	bne bchar0
002B47  3               
002B47  3  20 6D 2B     	jsr nexpos		; display position.
002B4A  3  D0 05        	bne bchar2 		; not on a new line.
002B4C  3               bchar3:
002B4C  3  E6 rr        	inc dispy
002B4E  3  20 72 2B     	jsr nexlin 		; next line check.
002B51  3               bchar2:
002B51  3  4C 01 24     	jmp dscor2		; tidy up line and column variables.
002B54  3               
002B54  3               
002B54  3               ;-------------------------------------------------
002B54  3               ; Display a character.
002B54  3               ;
002B54  3               ; Input:
002B54  3               ;  A = character
002B54  3               ;-------------------------------------------------
002B54  3               
002B54  3               achar:
002B54  3  85 63        	sta z80_b 		; copy to b.
002B56  3  20 80 2B     	jsr preprt 		; get ready to print.
002B59  3  A5 63        	lda z80_b		; character in accumulator.
002B5B  3  A6 rr        	ldx prtmod 		; print mode.
002B5D  3  F0 03        	beq :+
002B5F  3  4C 07 2B     	jmp bchar 		; no, double-height text.
002B62  3               :
002B62  3  20 42 25     	jsr pchar 		; display character.
002B65  3  20 6D 2B     	jsr nexpos 		; display position.
002B68  3  F0 E2        	beq bchar3		; next line down.
002B6A  3  4C 51 2B     	jmp bchar2 		; tidy up.
002B6D  3               
002B6D  3               
002B6D  3               ;-------------------------------------------------
002B6D  3               ; Get next print column position.
002B6D  3               ;-------------------------------------------------
002B6D  3               
002B6D  3               nexpos:
002B6D  3  E6 rr        	inc dispx		; move along one position.
002B6F  3  A5 rr        	lda dispx 		; get coordinate.
002B71  3               ;	and #31
002B71  3  60           	rts 			; return with status in zero flag.
002B72  3               
002B72  3               ;-------------------------------------------------
002B72  3               ; Get next print line position.
002B72  3               ;-------------------------------------------------
002B72  3               
002B72  3               nexlin:
002B72  3  E6 rr        	inc dispy 		; newline.
002B74  3  A5 rr        	lda dispy		; vertical position.
002B76  3  C9 18        	cmp #24			; past screen edge?
002B78  3  B0 01        	bcs :+
002B7A  3  60           	rts			; no, still okay.
002B7B  3               :
002B7B  3  A9 00        	lda #0			; restart at top.
002B7D  3  85 rr        	sta dispy
002B7F  3  60           	rts
002B80  3               
002B80  3               ;--------------------------------------------------------
002B80  3               ; Pre-print preliminaries.
002B80  3               ;--------------------------------------------------------
002B80  3               
002B80  3               preprt:
002B80  3  A9 92        	lda #<(FONT-256)		; font pointer.
002B82  3  8D AC 23     	sta grbase		; set up graphics base.
002B85  3  A9 34        	lda #>(FONT-256)
002B87  3  8D AD 23     	sta grbase+1
002B8A  3               prescr:
002B8A  3  A5 rr        	lda charx 		; display coordinates.
002B8C  3  85 rr        	sta dispx		; set up general coordinates.
002B8E  3  A5 rr        	lda chary
002B90  3  85 rr        	sta dispy
002B92  3  60           	rts
002B93  3               
002B93  3               ;--------------------------------------------------------------
002B93  3               ; Get messagenr x in hl
002B93  3               ;
002B93  3               ; Input:
002B93  3               ;  HL = pointer to message list
002B93  3               ;  X  = message number.
002B93  3               ;--------------------------------------------------------------
002B93  3               
002B93  3               getwrd:
002B93  3  E0 00        	cpx #0
002B95  3  D0 01        	bne:+ 			; first word in list?
002B97  3  60           	rts 			; yep, don't search.
002B98  3               :
002B98  3  A0 00        	ldy #0
002B9A  3               getwd0:
002B9A  3  B1 66        	lda (z80_hl),y
002B9C  3  48           	pha
002B9D  3  E6 66        	inc z80_l
002B9F  3  D0 02        	bne :+
002BA1  3  E6 67        	inc z80_h
002BA3  3               :
002BA3  3  68           	pla
002BA4  3  C9 80        	cmp #128		; found end?
002BA6  3  30 F2        	bmi getwd0		; no, carry on.
002BA8  3  CA           	dex			; until we have right number.
002BA9  3  D0 EF        	bne getwd0
002BAB  3  60           	rts
002BAC  3               
002BAC  3               ;-----------------------------------------------------------
002BAC  3               ; Bubble sort.
002BAC  3               ;-----------------------------------------------------------
002BAC  3               
002BAC  3               bsort:
002BAC  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
002BAE  3  85 rr        	sta qscnt
002BB0  3               
002BB0  3  A9 15        	lda #<sprtab 		; sprite table.
002BB2  3  85 68        	sta z80_x
002BB4  3  A9 33        	lda #>sprtab
002BB6  3  85 69        	sta z80_i
002BB8  3               bsort0:
002BB8  3  A0 00        	ldy #0
002BBA  3  B1 68        	lda (z80_ix),y 		; first sprite type.
002BBC  3  C9 FF        	cmp #255 		; is it switched off?
002BBE  3  F0 30        	beq swemp		; yes, may need to switch another in here.
002BC0  3               
002BC0  3  A0 11        	ldy #TABSIZ
002BC2  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
002BC4  3  C9 FF        	cmp #255 		; is it enabled?
002BC6  3  F0 0A        	beq bsort2 		; no, nothing to swap.
002BC8  3               
002BC8  3  A0 14        	ldy #TABSIZ+3
002BCA  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
002BCC  3  A0 03        	ldy #3
002BCE  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
002BD0  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
002BD2  3               bsort2:
002BD2  3  18           	clc
002BD3  3  A5 68        	lda z80_x
002BD5  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002BD7  3  85 68        	sta z80_x
002BD9  3  90 02        	bcc :+
002BDB  3  E6 69        	inc z80_i
002BDD  3               :
002BDD  3  C6 rr        	dec qscnt
002BDF  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
002BE1  3  60           	rts
002BE2  3               
002BE2  3               ;qscnt:	.byte 0
002BE2  3               
002BE2  3               bsort1:
002BE2  3  A0 11        	ldy #TABSIZ
002BE4  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
002BE6  3  C9 FF        	cmp #255		; is it enabled?
002BE8  3  F0 E8        	beq bsort2		; no, nothing to swap.
002BEA  3  20 FE 2B     	jsr swspr		; swap positions.
002BED  3  4C D2 2B     	jmp bsort2
002BF0  3               swemp:
002BF0  3  A0 11        	ldy #TABSIZ
002BF2  3  B1 68        	lda (z80_ix),y		; next table entry.
002BF4  3  C9 FF        	cmp #255		; is that one on?
002BF6  3  F0 DA        	beq bsort2		; no, nothing to swap.
002BF8  3  20 FE 2B     	jsr swspr		; swap positions.
002BFB  3  4C D2 2B     	jmp bsort2
002BFE  3               
002BFE  3               ; Swap sprites.
002BFE  3               
002BFE  3               swspr:
002BFE  3  A5 68        	lda z80_x		; table address
002C00  3  85 64        	sta z80_e		; copy to de pair.
002C02  3  85 66        	sta z80_l		; copy to hl pair.
002C04  3  A5 69        	lda z80_i
002C06  3  85 67        	sta z80_h
002C08  3  85 65        	sta z80_d
002C0A  3               
002C0A  3  18           	clc
002C0B  3  A5 66        	lda z80_l
002C0D  3  69 11        	adc #TABSIZ		; distance to second entry.
002C0F  3  85 66        	sta z80_l
002C11  3  90 02        	bcc :+
002C13  3  E6 67        	inc z80_h
002C15  3               :
002C15  3  A9 11        	lda #TABSIZ		; bytes to swap.
002C17  3  85 63        	sta z80_b
002C19  3  A0 00        	ldy #0
002C1B  3               swspr0:
002C1B  3  B1 66        	lda (z80_hl),y		; fetch second byte.
002C1D  3  48           	pha
002C1E  3  B1 64        	lda (z80_de),y 		; fetch first byte.
002C20  3  91 66        	sta (z80_hl),y 		; copy to second.
002C22  3  68           	pla
002C23  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
002C25  3               
002C25  3  E6 64        	inc z80_e 		; next byte.
002C27  3  D0 02        	bne :+
002C29  3  E6 65        	inc z80_d
002C2B  3               :
002C2B  3  E6 66        	inc z80_l 		; next byte.
002C2D  3  D0 02        	bne :+
002C2F  3  E6 67        	inc z80_h
002C31  3               :
002C31  3  C6 63        	dec z80_b
002C33  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
002C35  3  60           	rts
002C36  3               
002C36  3               ;----------------------------------------------------
002C36  3               ; Process sprites.
002C36  3               ;----------------------------------------------------
002C36  3               
002C36  3               pspr:
002C36  3  A9 0C        	lda #NUMSPR		; sprites to process.
002C38  3  85 rr        	sta sprptr
002C3A  3               
002C3A  3  A9 15        	lda #<sprtab 		; sprite table.
002C3C  3  85 68        	sta z80_x
002C3E  3  A9 33        	lda #>sprtab
002C40  3  85 69        	sta z80_i
002C42  3               pspr1:
002C42  3  A0 00        	ldy #0
002C44  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
002C46  3  C9 09        	cmp #9 			; within range of sprite types?
002C48  3  B0 03        	bcs :+
002C4A  3  20 5D 2C     	jsr pspr2 		; yes, process this one.
002C4D  3               :
002C4D  3  18           	clc
002C4E  3  A5 68        	lda z80_x
002C50  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002C52  3  85 68        	sta z80_x
002C54  3  90 02        	bcc :+
002C56  3  E6 69        	inc z80_i		; next sprite.
002C58  3               :
002C58  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
002C5A  3  D0 E6        	bne pspr1
002C5C  3  60           	rts
002C5D  3               
002C5D  3               ;sprptr:	.byte 0
002C5D  3               
002C5D  3               pspr2:
002C5D  3  A5 68        	lda z80_x 		; store original sprite pointer.
002C5F  3  85 rr        	sta ogptr
002C61  3  A5 69        	lda z80_i
002C63  3  85 rr        	sta ogptr+1
002C65  3  20 71 2C     	jsr pspr3		; do the routine.
002C68  3               rtorg:
002C68  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
002C6A  3  85 68        	sta z80_x
002C6C  3  A5 rr        	lda ogptr+1
002C6E  3  85 69        	sta z80_i
002C70  3               rtorg0:
002C70  3  60           	rts
002C71  3               
002C71  3               pspr3:
002C71  3  A9 A6        	lda #<evtyp0		; sprite type events list.
002C73  3  85 66        	sta z80_l
002C75  3  A9 2C        	lda #>evtyp0
002C77  3  85 67        	sta z80_h
002C79  3               pspr4:
002C79  3  B1 68        	lda (z80_ix),y
002C7B  3  0A           	asl a			; double accumulator.
002C7C  3  18           	clc
002C7D  3  65 66        	adc z80_l
002C7F  3  85 66        	sta z80_l
002C81  3  90 02        	bcc :+
002C83  3  E6 67        	inc z80_h
002C85  3               :
002C85  3  B1 66        	lda (z80_hl),y
002C87  3  85 64        	sta z80_e 		; copy to de.
002C89  3  48           	pha
002C8A  3               
002C8A  3  E6 66        	inc z80_l 		; next byte of address.
002C8C  3  D0 02        	bne :+
002C8E  3  E6 67        	inc z80_h
002C90  3               :
002C90  3  B1 66        	lda (z80_hl),y 		; address high.
002C92  3  85 65        	sta z80_d
002C94  3               
002C94  3  48           	pha	 		; swap address into hl.
002C95  3  A5 67        	lda z80_h
002C97  3  85 65        	sta z80_d
002C99  3  68           	pla
002C9A  3  85 67        	sta z80_h
002C9C  3  68           	pla
002C9D  3  85 66        	sta z80_l
002C9F  3  A5 66        	lda z80_l
002CA1  3  85 64        	sta z80_e
002CA3  3               
002CA3  3  6C 66 00     	jmp (z80_hl) 		; go there.
002CA6  3               
002CA6  3               ;ogptr:	.word 0			; original sprite pointer.
002CA6  3               
002CA6  3               ; Address of each sprite type's routine.
002CA6  3               
002CA6  3  27 34        evtyp0:	.word evnt00
002CA8  3  28 34        evtyp1:	.word evnt01
002CAA  3  29 34        evtyp2:	.word evnt02
002CAC  3  2A 34        evtyp3:	.word evnt03
002CAE  3  2B 34        evtyp4:	.word evnt04
002CB0  3  2C 34        evtyp5:	.word evnt05
002CB2  3  2D 34        evtyp6:	.word evnt06
002CB4  3  2E 34        evtyp7:	.word evnt07
002CB6  3  2F 34        evtyp8:	.word evnt08
002CB8  3               
002CB8  3               ;--------------------------------------------------------------
002CB8  3               ; Display sprites.
002CB8  3               ;
002CB8  3               ; Input:
002CB8  3               ;  IX = sprite table
002CB8  3               ;--------------------------------------------------------------
002CB8  3               
002CB8  3               dspr:
002CB8  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
002CBA  3  85 rr        	sta sprcnt
002CBC  3               dspr0:
002CBC  3  A0 00        	ldy #0
002CBE  3  B1 68        	lda (z80_ix),y 		; get sprite type.
002CC0  3  C9 FF        	cmp #255 		; is it enabled?
002CC2  3  D0 42        	bne dspr1 		; yes, it needs deleting.
002CC4  3               dspr5:
002CC4  3  A0 05        	ldy #5
002CC6  3  B1 68        	lda (z80_ix),y 		; new type.
002CC8  3  C9 FF        	cmp #255		; is it enabled?
002CCA  3  D0 77        	bne dspr3 		; yes, it needs drawing.
002CCC  3               dspr2:
002CCC  3  A0 05        	ldy #5
002CCE  3  B1 68        	lda (z80_ix),y 		; copy new type.
002CD0  3  A0 00        	ldy #0
002CD2  3  91 68        	sta (z80_ix),y
002CD4  3  A0 06        	ldy #6
002CD6  3  B1 68        	lda (z80_ix),y 		; copy new image number.
002CD8  3  A0 01        	ldy #1
002CDA  3  91 68        	sta (z80_ix),y
002CDC  3  A0 07        	ldy #7
002CDE  3  B1 68        	lda (z80_ix),y 		; copy new frame.
002CE0  3  A0 02        	ldy #2
002CE2  3  91 68        	sta (z80_ix),y
002CE4  3  A0 08        	ldy #8
002CE6  3  B1 68        	lda (z80_ix),y 		; copy new y.
002CE8  3  A0 03        	ldy #3
002CEA  3  91 68        	sta (z80_ix),y
002CEC  3  A0 09        	ldy #9
002CEE  3  B1 68        	lda (z80_ix),y 		; copy new x.
002CF0  3  A0 04        	ldy #4
002CF2  3  91 68        	sta (z80_ix),y
002CF4  3               
002CF4  3  18           	clc
002CF5  3  A5 68        	lda z80_x
002CF7  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
002CF9  3  85 68        	sta z80_x
002CFB  3  A5 69        	lda z80_i
002CFD  3  69 00        	adc #0
002CFF  3  85 69        	sta z80_i 		; next sprite.
002D01  3  C6 rr        	dec sprcnt
002D03  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
002D05  3  60           	rts
002D06  3               dspr1:
002D06  3  A0 05        	ldy #5
002D08  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
002D0A  3  C9 FF        	cmp #255		; is this enabled?
002D0C  3  D0 06        	bne dspr4 		; yes, display both.
002D0E  3               dspr6:
002D0E  3  20 DE 2D     	jsr sspria 		; show single sprite.
002D11  3  4C CC 2C     	jmp dspr2
002D14  3               
002D14  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
002D14  3               
002D14  3               dspr4:
002D14  3  A0 04        	ldy #4
002D16  3  B1 68        	lda (z80_ix),y		; old x.
002D18  3  A0 09        	ldy #9
002D1A  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
002D1C  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
002D1E  3               
002D1E  3  A0 03        	ldy #3
002D20  3  B1 68        	lda (z80_ix),y		; old y.
002D22  3  A0 08        	ldy #8
002D24  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002D26  3  D0 15        	bne dspr7		; they differ, need to redraw.
002D28  3               
002D28  3  A0 02        	ldy #2
002D2A  3  B1 68        	lda (z80_ix),y 		; old frame.
002D2C  3  A0 07        	ldy #7
002D2E  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002D30  3  4C 3D 2D     	jmp dspr7 		; they differ, need to redraw.
002D33  3               
002D33  3  A0 01        	ldy #1
002D35  3  B1 68        	lda (z80_ix),y 		; old image.
002D37  3  A0 06        	ldy #6
002D39  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002D3B  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
002D3D  3               dspr7:
002D3D  3  20 0B 2E     	jsr sspric 		; delete old sprite, draw new one simultaneously.
002D40  3  4C CC 2C     	jmp dspr2
002D43  3               dspr3:
002D43  3  20 05 2E     	jsr ssprib 		; show single sprite.
002D46  3  4C CC 2C     	jmp dspr2
002D49  3               
002D49  3               ;sprcnt:	.byte 0
002D49  3               
002D49  3               ;-----------------------------------------
002D49  3               ; Get sprite address calculations.
002D49  3               ; gspran = new sprite, gsprad = old sprite.
002D49  3               ;
002D49  3               ; Input:
002D49  3               ;  IX = sprite address
002D49  3               ;-----------------------------------------
002D49  3               
002D49  3               gspran:
002D49  3  A0 08        	ldy #8
002D4B  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
002D4D  3  85 rr        	sta dispy
002D4F  3  A0 09        	ldy #9
002D51  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
002D53  3  85 rr        	sta dispx
002D55  3  A0 06        	ldy #6
002D57  3  B1 68        	lda (z80_ix),y 		; new sprite image.
002D59  3  20 37 31     	jsr gfrm		; fetch start frame for this sprite.
002D5C  3               
002D5C  3  A0 00        	ldy #0
002D5E  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002D60  3  A0 07        	ldy #7
002D62  3  18           	clc
002D63  3  71 68        	adc (z80_ix),y 		; new add frame number.
002D65  3  4C 84 2D     	jmp gspra0
002D68  3               
002D68  3               ;-----------------------------------------
002D68  3               ; Calculate old sprite address
002D68  3               ;
002D68  3               ; Input:
002D68  3               ;  IX = sprite address
002D68  3               ;
002D68  3               ; Output:
002D68  3               ;  B  = right byte mask
002D68  3               ;  C  = left byte mask
002D68  3               ;  DE = spriteframe address
002D68  3               ;  scraddr = screenaddress(dispx,dispy)
002D68  3               ;-----------------------------------------
002D68  3               
002D68  3               gsprad:
002D68  3  A0 03        	ldy #3
002D6A  3  B1 68        	lda (z80_ix),y		; y coordinate.
002D6C  3  85 rr        	sta dispy
002D6E  3  A0 04        	ldy #4
002D70  3  B1 68        	lda (z80_ix),y		; x coordinate.
002D72  3  85 rr        	sta dispx
002D74  3  A0 01        	ldy #1
002D76  3  B1 68        	lda (z80_ix),y 		; sprite image.
002D78  3  20 37 31     	jsr gfrm 		; fetch start frame for this sprite.
002D7B  3               
002D7B  3  A0 00        	ldy #0
002D7D  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002D7F  3  A0 02        	ldy #2
002D81  3  18           	clc
002D82  3  71 68        	adc (z80_ix),y 		; add frame number.
002D84  3               gspra0:
002D84  3  4A           	lsr a	  		; multiply by 128.
002D85  3  85 65        	sta z80_d 		; store in d.
002D87  3  8D DC 2D     	sta tmp1
002D8A  3  A9 00        	lda #0
002D8C  3  6A           	ror a
002D8D  3  85 64        	sta z80_e 		; got low byte.
002D8F  3  8D DD 2D     	sta tmp2
002D92  3               .if bflag
002D92  3               	lsr tmp1
002D92  3               	ror tmp2
002D92  3               	clc
002D92  3               	lda tmp2
002D92  3               	adc z80_e
002D92  3               	sta z80_e
002D92  3               	lda tmp1
002D92  3               	adc z80_d
002D92  3               	sta z80_d
002D92  3               .endif
002D92  3  18           	clc 			; address of play sprites.
002D93  3  A5 64        	lda z80_e
002D95  3  69 D7        	adc #<sprgfx
002D97  3  85 64        	sta z80_e
002D99  3  A5 65        	lda z80_d
002D9B  3  69 34        	adc #>sprgfx
002D9D  3  85 65        	sta z80_d
002D9F  3               
002D9F  3  A5 rr        	lda dispx 		; y coordinate.
002DA1  3  29 06        	and #6 			; position within byte boundary.
002DA3  3  AA           	tax	 		; low byte of table displacement.
002DA4  3               
002DA4  3  0A           	asl a	  		; multiply by 32.
002DA5  3  0A           	asl a  			; already a multiple
002DA6  3  0A           	asl a  			; of 2, so just 4
002DA7  3               .if bflag
002DA7  3               	sta tmp1
002DA7  3               	asl a  			; shifts needed.
002DA7  3               	clc
002DA7  3               	adc tmp1
002DA7  3               .else
002DA7  3  0A           	asl a  			; shifts needed.
002DA8  3               .endif
002DA8  3  18           	clc 			; add to sprite address.
002DA9  3  65 64        	adc z80_e
002DAB  3  85 64        	sta z80_e
002DAD  3  90 02        	bcc :+
002DAF  3  E6 65        	inc z80_d
002DB1  3               :
002DB1  3  BD D4 2D     	lda spmask,x		 ; pointer to mask table.
002DB4  3  85 62        	sta z80_c 		; left mask.
002DB6  3  BD D5 2D     	lda spmask+1,x
002DB9  3  85 63        	sta z80_b 		; right mask.
002DBB  3               
002DBB  3               ;------------------------------------------------------------------
002DBB  3               ; Drop into screen address routine.
002DBB  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
002DBB  3               ;------------------------------------------------------------------
002DBB  3               
002DBB  3               scadd:
002DBB  3  A6 rr        	ldx dispy
002DBD  3  E0 C0        	cpx #192
002DBF  3  90 02        	bcc :+
002DC1  3  A2 C0        	ldx #192
002DC3  3               :
002DC3  3  A5 rr        	lda dispx
002DC5  3  4A           	lsr a
002DC6  3  4A           	lsr a
002DC7  3  4A           	lsr a
002DC8  3  18           	clc
002DC9  3  7D 00 9B     	adc SCADTB_lb,x
002DCC  3  85 rr        	sta scraddr
002DCE  3  BD 00 9C     	lda SCADTB_hb,x
002DD1  3  85 rr        	sta scraddr+1
002DD3  3  60           	rts
002DD4  3               
002DD4  3  FF 00        spmask:	.byte $ff,$00
002DD6  3  3F C0        	.byte $3f,$c0
002DD8  3  0F F0        	.byte $0f,$f0
002DDA  3  03 FC        	.byte $03,$fc
002DDC  3               
002DDC  3  00           tmp1:	.byte 0
002DDD  3  00           tmp2:	.byte 0
002DDE  3               
002DDE  3               ;-----------------------------------------------------------------
002DDE  3               ; These are the sprite routines.
002DDE  3               ; sspria = single sprite, old (ix).
002DDE  3               ; ssprib = single sprite, new (ix+5).
002DDE  3               ; sspric = both sprites, old (ix) and new (ix+5).
002DDE  3               ;-----------------------------------------------------------------
002DDE  3               
002DDE  3               sspria:
002DDE  3  20 68 2D     	jsr gsprad		; get old sprite address.
002DE1  3               sspri2:
002DE1  3  A5 64        	lda z80_e
002DE3  3  8D 53 2E     	sta dline1+1		; Set spritedata address
002DE6  3  8D 62 2E     	sta dline2+1
002DE9  3  A5 65        	lda z80_d
002DEB  3  8D 54 2E     	sta dline1+2
002DEE  3  8D 63 2E     	sta dline2+2
002DF1  3  86 rr        	stx xtmp
002DF3  3  A2 00        	ldx #0			; vertical lines.
002DF5  3               sspri0:
002DF5  3  20 4F 2E     	jsr dline		; draw a line.
002DF8  3  E0 10        	cpx #16			; detect block boundery
002DFA  3  D0 02        	bne :+			; skip if not
002DFC  3  E6 rr        	inc scraddr+1		; jump to next blockline
002DFE  3               :
002DFE  3  E0 20        	cpx #32			; check finished
002E00  3               .if bflag
002E00  3               	bne :+			; skip if not
002E00  3               	inc scraddr+1		; jump to next blockline
002E00  3               	inc z80_hlp+1		; jump to next blockline
002E00  3               :
002E00  3               	cpx #48			; check finished
002E00  3               .endif
002E00  3  D0 F3        	bne sspri0		; no, repeat
002E02  3  A6 rr        	ldx xtmp
002E04  3  60           	rts
002E05  3               
002E05  3               ;-----------------------------------------------------------------
002E05  3               
002E05  3               ssprib:
002E05  3  20 49 2D     	jsr gspran 		; get new sprite address.
002E08  3  4C E1 2D     	jmp sspri2
002E0B  3               
002E0B  3               ;-----------------------------------------------------------------
002E0B  3               
002E0B  3               sspric:
002E0B  3  20 68 2D     	jsr gsprad 		; get old sprite address.
002E0E  3  A5 64        	lda z80_e
002E10  3  8D 77 2E     	sta ddline1+1		; Set spritedata address
002E13  3  8D 86 2E     	sta ddline2+1
002E16  3  A5 65        	lda z80_d
002E18  3  8D 78 2E     	sta ddline1+2
002E1B  3  8D 87 2E     	sta ddline2+2
002E1E  3  20 C4 39     	jsr exx  		; store addresses.
002E21  3               
002E21  3  20 49 2D     	jsr gspran 		; get new sprite addresses.
002E24  3  A5 64        	lda z80_e
002E26  3  8D 53 2E     	sta dline1+1		; Set spritedata address
002E29  3  8D 62 2E     	sta dline2+1
002E2C  3  A5 65        	lda z80_d
002E2E  3  8D 54 2E     	sta dline1+2
002E31  3  8D 63 2E     	sta dline2+2
002E34  3               
002E34  3  86 rr        	stx xtmp
002E36  3  A2 00        	ldx #0			; vertical lines.
002E38  3               lloop:
002E38  3  20 4F 2E     	jsr dline 		; draw a line.
002E3B  3  CA           	dex
002E3C  3  CA           	dex
002E3D  3  20 73 2E     	jsr ddline 		; delete a line.
002E40  3  E0 10        	cpx #16			; detect block boundery
002E42  3  D0 04        	bne :+			; skip if not
002E44  3  E6 rr        	inc scraddr+1		; jump to next blockline
002E46  3  E6 73        	inc z80_hlp+1		; jump to next blockline
002E48  3               :
002E48  3  E0 20        	cpx #32			; check finished
002E4A  3               .if bflag
002E4A  3               	bne :+			; skip if not
002E4A  3               	inc scraddr+1		; jump to next blockline
002E4A  3               	inc z80_hlp+1		; jump to next blockline
002E4A  3               :
002E4A  3               	cpx #48			; check finished
002E4A  3               .endif
002E4A  3  D0 EC        	bne lloop		; no, repeat
002E4C  3  A6 rr        	ldx xtmp
002E4E  3  60           	rts
002E4F  3               
002E4F  3               
002E4F  3               ;-----------------------------------------------------------------
002E4F  3               
002E4F  3               dline:
002E4F  3  BC 97 2E     	ldy sprline,x		; point to screenleft
002E52  3               dline1:
002E52  3  BD 6C 35     	lda objdta,x		; fetch spriteleft byte
002E55  3  85 61        	sta z80_a		; save spriteright byte
002E57  3  A5 61        	lda z80_a
002E59  3  25 62        	and z80_c		; mask left
002E5B  3  51 rr        	eor (scraddr),y		; merge with screenleft
002E5D  3  91 rr        	sta (scraddr),y		; write screenleft
002E5F  3               sline:
002E5F  3  E8           	inx			; next spritebyte
002E60  3  C8           	iny			; point to screenmiddle
002E61  3               dline2:
002E61  3  BD 6C 35     	lda objdta,x		; fetch spritemiddle byte
002E64  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
002E66  3  91 rr        	sta (scraddr),y		; write screenmiddle
002E68  3               sline2:
002E68  3  C8           	iny			; point to screenright
002E69  3  A5 61        	lda z80_a		; fetch spriteright byte
002E6B  3  25 63        	and z80_b		; mask right
002E6D  3  51 rr        	eor (scraddr),y		; merge with screenright
002E6F  3  91 rr        	sta (scraddr),y		; write screenright
002E71  3               sline3:
002E71  3  E8           	inx			; next spritebyte
002E72  3               
002E72  3  60           	rts
002E73  3               
002E73  3               ;-----------------------------------------------------------------
002E73  3               
002E73  3               ddline:
002E73  3  BC 97 2E     	ldy sprline,x		; point to screenleft
002E76  3               ddline1:
002E76  3  BD 6C 35     	lda objdta,x		; fetch spriteleft byte
002E79  3  85 61        	sta z80_a		; save spriteright byte
002E7B  3  A5 61        	lda z80_a
002E7D  3  25 6E        	and z80_cp		; mask left
002E7F  3  51 72        	eor (z80_hlp),y		; merge with screenleft
002E81  3  91 72        	sta (z80_hlp),y		; write screenleft
002E83  3               dsline:
002E83  3  E8           	inx			; next spritebyte
002E84  3  C8           	iny			; point to screenmiddle
002E85  3               ddline2:
002E85  3  BD 6C 35     	lda objdta,x		; fetch spritemiddle byte
002E88  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
002E8A  3  91 72        	sta (z80_hlp),y		; write screenmiddle
002E8C  3               dsline2:
002E8C  3  C8           	iny			; point to screenright
002E8D  3  A5 61        	lda z80_a		; fetch spriteright byte
002E8F  3  25 6F        	and z80_bp		; mask right
002E91  3  51 72        	eor (z80_hlp),y		; merge with screenright
002E93  3  91 72        	sta (z80_hlp),y		; write screenright
002E95  3               dsline3:
002E95  3  E8           	inx			; next spritebyte
002E96  3               
002E96  3  60           	rts
002E97  3               
002E97  3               sprline:
002E97  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002E9B  3  40 41 60 61  
002E9F  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002EA3  3  C0 C1 E0 E1  
002EA7  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002EAB  3  40 41 60 61  
002EAF  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002EB3  3  C0 C1 E0 E1  
002EB7  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002EBB  3  40 41 60 61  
002EBF  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002EC3  3  C0 C1 E0 E1  
002EC7  3               
002EC7  3               ;----------------------------------------------------------------------
002EC7  3               ; Line drawn, now work out next target address.
002EC7  3               ;----------------------------------------------------------------------
002EC7  3               
002EC7  3               nline:
002EC7  3  18           	clc
002EC8  3  A5 rr        	lda scraddr 		; get low byte of address.
002ECA  3  69 20        	adc #$20
002ECC  3  85 rr        	sta scraddr 		; new low byte of address.
002ECE  3  90 02        	bcc :+
002ED0  3  E6 rr        	inc scraddr+1 		; new high byte of address.
002ED2  3               :
002ED2  3  60           	rts
002ED3  3               
002ED3  3               ;-------------------------------------------------------------
002ED3  3               ; Line drawn, now work out next target address.
002ED3  3               ;
002ED3  3               ; Input:
002ED3  3               ;  BP  = right mask
002ED3  3               ;  CP  = left mask
002ED3  3               ;  DEP = spriteaddress
002ED3  3               ;  z80_hlp = screen address
002ED3  3               ;-------------------------------------------------------------
002ED3  3               
002ED3  3               
002ED3  3               ;-----------------------------------------------------------
002ED3  3               ; Animates a sprite.
002ED3  3               ;
002ED3  3               ; Input:
002ED3  3               ;  IX = sprite address
002ED3  3               ;  HL = last sprite address
002ED3  3               ;-----------------------------------------------------------
002ED3  3               
002ED3  3               animsp:
002ED3  3  25 rr        	and frmno
002ED5  3  F0 01        	beq :+
002ED7  3  60           	rts
002ED8  3               :
002ED8  3  A0 06        	ldy #6
002EDA  3  B1 68        	lda (z80_ix),y		; sprite image
002EDC  3  20 37 31     	jsr gfrm		; get frame data.
002EDF  3               
002EDF  3  E6 66        	inc z80_l		; point to frames.
002EE1  3  D0 02        	bne :+
002EE3  3  E6 67        	inc z80_h
002EE5  3               :
002EE5  3  A0 07        	ldy #7
002EE7  3  B1 68        	lda (z80_ix),y		; sprite frame.
002EE9  3  18           	clc
002EEA  3  69 01        	adc #1			; next one along.
002EEC  3  A0 00        	ldy #0
002EEE  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
002EF0  3  90 02        	bcc anims0		; no, not yet.
002EF2  3  A9 00        	lda #0			; start at first frame.
002EF4  3               anims0:
002EF4  3  A0 07        	ldy #7
002EF6  3  91 68        	sta (z80_ix),y		; new frame.
002EF8  3  60           	rts
002EF9  3               
002EF9  3               ;--------------------------------------------------------------
002EF9  3               ; Animate back
002EF9  3               ;
002EF9  3               ; Input:
002EF9  3               ;  IX = sprite address
002EF9  3               ;  HL = last sprite address
002EF9  3               ;--------------------------------------------------------------
002EF9  3               
002EF9  3               animbk:
002EF9  3  25 rr        	and frmno
002EFB  3  F0 01        	beq :+
002EFD  3  60           	rts
002EFE  3               :
002EFE  3  A0 06        	ldy #6
002F00  3  B1 68        	lda (z80_ix),y		; sprite image.
002F02  3  20 37 31     	jsr gfrm		; get frame data.
002F05  3               
002F05  3  E6 66        	inc z80_l 		; point to frames.
002F07  3  D0 02        	bne :+
002F09  3  E6 67        	inc z80_h
002F0B  3               :
002F0B  3  A0 07        	ldy #7
002F0D  3  B1 68        	lda (z80_ix),y 		; sprite frame.
002F0F  3  F0 03        	beq :+
002F11  3  4C 18 2F     	jmp rtanb0 		; yes, start at end.
002F14  3               :
002F14  3  A0 00        	ldy #0
002F16  3  B1 66        	lda (z80_hl),y 		; last sprite.
002F18  3               rtanb0:
002F18  3  38           	sec
002F19  3  E9 01        	sbc #1			; next one along.
002F1B  3  4C F4 2E     	jmp anims0		; set new frame.
002F1E  3               
002F1E  3               ;--------------------------------------------------------------
002F1E  3               ; Check for collision with other sprite, strict enforcement.
002F1E  3               ;
002F1E  3               ; Input:
002F1E  3               ;  b		= sprite to test for
002F1E  3               ;  ix		= current sprite pointer
002F1E  3               ;
002F1E  3               ; global:	b
002F1E  3               ; local:	x,y,hl,de,skptr
002F1E  3               ; calls:	-
002F1E  3               ;--------------------------------------------------------------
002F1E  3               
002F1E  3               sktyp:
002F1E  3  A9 15        	lda #<sprtab				; sprite table.
002F20  3  85 66        	sta z80_l
002F22  3  A9 33        	lda #>sprtab
002F24  3  85 67        	sta z80_h
002F26  3               numsp2:
002F26  3  A9 0C        	lda #NUMSPR				; number of sprites.
002F28  3  85 rr        	sta sktptr
002F2A  3               sktyp0:
002F2A  3  A5 66        	lda z80_l 				; store pointer to sprite.
002F2C  3  85 rr        	sta skptr
002F2E  3  A5 67        	lda z80_h
002F30  3  85 rr        	sta skptr+1
002F32  3               
002F32  3  A0 00        	ldy #0
002F34  3  B1 66        	lda (z80_hl),y 				; get sprite type.
002F36  3  C5 63        	cmp z80_b				; is it the type we seek?
002F38  3  F0 1D        	beq coltyp				; yes, we can use this one.
002F3A  3               sktyp1:
002F3A  3  18           	clc
002F3B  3  A5 rr        	lda skptr				; retrieve sprite pointer.
002F3D  3  69 11        	adc #TABSIZ				; size of each entry.
002F3F  3  85 66        	sta z80_l
002F41  3  A5 rr        	lda skptr+1
002F43  3  69 00        	adc #0
002F45  3  85 67        	sta z80_h
002F47  3  C6 rr        	dec sktptr					; one less iteration.
002F49  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
002F4B  3  A9 00        	lda #0					; default to ROM address - no sprite.
002F4D  3  85 66        	sta z80_l
002F4F  3  85 67        	sta z80_h
002F51  3  85 rr        	sta skptr				; store pointer to sprite.
002F53  3  85 rr        	sta skptr+1
002F55  3               
002F55  3  18           	clc					; don't return with zero flag set.
002F56  3  60           	rts 					; didn't find one.
002F57  3               
002F57  3               ;skptr:	.word 0					; search pointer.
002F57  3               ;sktptr:	.byte 0
002F57  3               
002F57  3               coltyp:
002F57  3  A0 00        	ldy #0
002F59  3  B1 68        	lda (z80_ix),y				; current sprite type.
002F5B  3  C5 63        	cmp z80_b				; seeking sprite of same type?
002F5D  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
002F5F  3               colty0:
002F5F  3  A0 09        	ldy #9					; distance to x position in table.
002F61  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
002F63  3  85 64        	sta z80_e
002F65  3  88           	dey
002F66  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
002F68  3  85 65        	sta z80_d
002F6A  3               
002F6A  3               ; Drop into collision detection.
002F6A  3               
002F6A  3               colc16:
002F6A  3  A0 09        	ldy #9
002F6C  3  B1 68        	lda (z80_ix),y			 	; x coord.
002F6E  3  38           	sec					; subtract x.
002F6F  3  E5 64        	sbc z80_e
002F71  3  B0 05        	bcs  colc1a 				; result is positive.
002F73  3  49 FF        	eor #$ff				; make negative positive.
002F75  3  18           	clc
002F76  3  69 01        	adc #1
002F78  3               colc1a:
002F78  3  C9 10        	cmp #16 				; within x range?
002F7A  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
002F7C  3  85 62        	sta z80_c				; store difference.
002F7E  3               
002F7E  3  A0 08        	ldy #8
002F80  3  B1 68        	lda (z80_ix),y				; y coord.
002F82  3  38           	sec
002F83  3  E5 65        	sbc z80_d				; subtract y.
002F85  3  B0 05        	bcs colc1b				; result is positive.
002F87  3  49 FF        	eor #$ff				; make negative positive.
002F89  3  18           	clc
002F8A  3  69 01        	adc #1
002F8C  3               colc1b:
002F8C  3  C9 10        	cmp #16					; within y range?
002F8E  3  B0 AA        	bcs sktyp1 				; no - they've missed.
002F90  3  18           	clc					; add x difference.
002F91  3  65 62        	adc z80_c
002F93  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
002F95  3  B0 02        	bcs :+
002F97  3  38           	sec
002F98  3  60           	rts 					; carry set if there's a collision.
002F99  3               :
002F99  3  4C 3A 2F     	jmp sktyp1				; try next sprite in table.
002F9C  3               colty1:
002F9C  3  A5 68        	lda z80_x  				; compare the two.
002F9E  3  C5 66        	cmp z80_l
002FA0  3  D0 09        	bne end_col
002FA2  3  A5 69        	lda z80_i
002FA4  3  C5 67        	cmp z80_h
002FA6  3  D0 03        	bne end_col
002FA8  3  4C 3A 2F     	jmp sktyp1 				; addresses are identical.
002FAB  3               end_col:
002FAB  3  4C 5F 2F     	jmp colty0
002FAE  3               
002FAE  3               ;-----------------------------------------------------------
002FAE  3               ; Display number, left aligned
002FAE  3               ;
002FAE  3               ; Input:
002FAE  3               ;  a		= number
002FAE  3               ;
002FAE  3               ; global:	-
002FAE  3               ; local:	a,y,bc,hl,displ0
002FAE  3               ; calls:	num2ch,dmsg3
002FAE  3               ;-----------------------------------------------------------
002FAE  3               
002FAE  3               disply:
002FAE  3  85 61        	sta z80_a
002FB0  3  A9 D6        	lda #<displ0				; display workspace.
002FB2  3  85 62        	sta z80_c
002FB4  3  A9 2F        	lda #>displ0
002FB6  3  85 63        	sta z80_b
002FB8  3  A5 61        	lda z80_a
002FBA  3  20 5C 22     	jsr num2ch				; convert accumulator to string.
002FBD  3               displ1:
002FBD  3  C6 62        	dec z80_c				; back one character.
002FBF  3  D0 02        	bne :+
002FC1  3  C6 63        	dec z80_b
002FC3  3               :
002FC3  3  A0 00        	ldy #0
002FC5  3  B1 62        	lda (z80_bc),y				; fetch digit.
002FC7  3  09 80        	ora #128				; insert end marker.
002FC9  3  91 62        	sta (z80_bc),y				; new value.
002FCB  3               
002FCB  3  A9 D6        	lda #<displ0				; display space.
002FCD  3  85 66        	sta z80_l
002FCF  3  A9 2F        	lda #>displ0
002FD1  3  85 67        	sta z80_h
002FD3  3  4C 84 2A     	jmp dmsg3				; display the string.
002FD6  3               
002FD6  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
002FDA  3               
002FDA  3               ;----------------------------------------------------------------
002FDA  3               ; Initialise screen.
002FDA  3               ;
002FDA  3               ; global:	roomtb,scno
002FDA  3               ; local:	-
002FDA  3               ; calls:	tstcs
002FDA  3               ;----------------------------------------------------------------
002FDA  3               
002FDA  3               initsc:
002FDA  3  AD F2 33     	lda roomtb 			; whereabouts in the map are we?
002FDD  3  20 E7 2F     	jsr tstsc 			; find displacement.
002FE0  3  C9 FF        	cmp #255 			; is it valid?
002FE2  3  F0 02        	beq init_end 			; no, it's rubbish.
002FE4  3  85 rr        	sta scno			; store new room number.
002FE6  3               init_end:
002FE6  3  60           	rts
002FE7  3               
002FE7  3               ;----------------------------------------------------------------
002FE7  3               ; Test screen.
002FE7  3               ;
002FE7  3               ; global:	-
002FE7  3               ; local:	x
002FE7  3               ; calls:	-
002FE7  3               ;----------------------------------------------------------------
002FE7  3               
002FE7  3               tstsc:
002FE7  3  85 rr        	sta tmproom
002FE9  3  18           	clc
002FEA  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
002FEC  3  AA           	tax 				; add displacement to map data.
002FED  3  BD 1D 34     	lda mapdat-MAPWID,x 		; find room number there.
002FF0  3  60           	rts
002FF1  3               
002FF1  3               ;tmproom:	.byte 0
002FF1  3               
002FF1  3               ;--------------------------
002FF1  3               ; Screen left.
002FF1  3               ;--------------------------
002FF1  3               
002FF1  3               scrl:
002FF1  3  AD F2 33     	lda roomtb 			; present room table pointer.
002FF4  3  38           	sec
002FF5  3  E9 01        	sbc #1				; room left.
002FF7  3               scrl0:
002FF7  3  20 E7 2F     	jsr tstsc			; test screen.
002FFA  3  C9 FF        	cmp #255			; is there a screen this way?
002FFC  3  D0 01        	bne :+
002FFE  3  60           	rts				; no, return to loop.
002FFF  3               :
002FFF  3  A5 rr        	lda tmproom			; restore room displacement.
003001  3  8D F2 33     	sta roomtb			; new room table position.
003004  3               scrl1:
003004  3  20 DA 2F     	jsr initsc 			; set new screen.
003007  3  A9 02        	lda #2
003009  3  85 rr        	sta restfl 			; set it.
00300B  3  60           	rts
00300C  3               scrr:
00300C  3  AD F2 33     	lda roomtb 			; room table pointer.
00300F  3  18           	clc
003010  3  69 01        	adc #1				; room right.
003012  3  4C F7 2F     	jmp scrl0
003015  3               scru:
003015  3  AD F2 33     	lda roomtb 			; room table pointer.
003018  3  38           	sec
003019  3  E9 03        	sbc #MAPWID 			; room up.
00301B  3  4C F7 2F     	jmp scrl0
00301E  3               scrd:
00301E  3  AD F2 33     	lda roomtb 			; room table pointer.
003021  3  18           	clc
003022  3  69 03        	adc #MAPWID 			; room down.
003024  3  4C F7 2F     	jmp scrl0
003027  3               
003027  3               ;-----------------------------------------
003027  3               ; Jump to new screen.
003027  3               ;-----------------------------------------
003027  3               
003027  3               nwscr:
003027  3  A2 00        	ldx #0				; start of map data.
003029  3               nwscr0:
003029  3  DD 20 34     	cmp mapdat,x
00302C  3  F0 06        	beq nwscr1			; have we found a match for screen?
00302E  3  E8           	inx 				; next room.
00302F  3  E0 50        	cpx #80				; zero room count, 80 to search.
003031  3  D0 F6        	bne nwscr0			; keep looking.
003033  3  60           	rts
003034  3               nwscr1:
003034  3  8E F2 33     	stx roomtb			; set the map position.
003037  3  4C 04 30     	jmp scrl1			; draw new room.
00303A  3               
00303A  3               
00303A  3               ;----------------------------------------------------------
00303A  3               ; Gravity processing.
00303A  3               ;----------------------------------------------------------
00303A  3               
00303A  3               grav:
00303A  3  A0 0D        	ldy #13
00303C  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00303E  3  85 66        	sta z80_l
003040  3  A0 0E        	ldy #14
003042  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003044  3  85 67        	sta z80_h
003046  3  05 66        	ora z80_l			; merge in low byte.
003048  3  D0 01        	bne :+
00304A  3  60           	rts				; if neither is set, we're not in the air.
00304B  3               :
00304B  3  A0 00        	ldy #0
00304D  3  B1 66        	lda (z80_hl),y			; pixels to move.
00304F  3  85 61        	sta z80_a
003051  3  C9 63        	cmp #99				; reached the end?
003053  3  D0 0C        	bne grav0			; no, continue.
003055  3               grav2:
003055  3  C6 66        	dec z80_l			; go back to previous value.
003057  3  C9 FF        	cmp #$ff
003059  3  D0 02        	bne :+
00305B  3  C6 67        	dec z80_h
00305D  3               :
00305D  3  B1 66        	lda (z80_hl),y			; fetch that from table.
00305F  3  85 61        	sta z80_a
003061  3               grav0:
003061  3  E6 66        	inc z80_l			; point to next table entry.
003063  3  D0 02        	bne :+
003065  3  E6 67        	inc z80_h
003067  3               :
003067  3  A5 66        	lda z80_l
003069  3  A0 0D        	ldy #13
00306B  3  91 68        	sta (z80_ix),y			; store new pointer low.
00306D  3  A5 67        	lda z80_h
00306F  3  A0 0E        	ldy #14
003071  3  91 68        	sta (z80_ix),y			; store new pointer high.
003073  3               grav1:
003073  3  A5 61        	lda z80_a
003075  3  D0 01        	bne :+				; any movement required?
003077  3  60           	rts				; no, not this time.
003078  3               :
003078  3  A5 61        	lda z80_a
00307A  3  C9 80        	cmp #128			; is it up or down?
00307C  3  B0 15        	bcs gravu			; it's up.
00307E  3               gravd:
00307E  3  85 63        	sta z80_b			; set pixels to move.
003080  3               gravd0:
003080  3  20 AC 26     	jsr cangd			; can we go down?
003083  3  D0 28        	bne gravst			; can't move down, so stop.
003085  3  A0 08        	ldy #8
003087  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
003089  3  18           	clc
00308A  3  69 01        	adc #1
00308C  3  91 68        	sta (z80_ix),y
00308E  3  C6 63        	dec z80_b
003090  3  D0 EE        	bne gravd0
003092  3  60           	rts
003093  3               gravu:
003093  3  49 FF        	eor #$ff			; flip the sign so it's positive.
003095  3  18           	clc
003096  3  69 01        	adc #1
003098  3  85 63        	sta z80_b			; set pixels to move.
00309A  3               gravu0:
00309A  3  20 77 26     	jsr cangu			; can we go up?
00309D  3  D0 6E        	bne ifalls			; can't move up, go down next.
00309F  3  A0 08        	ldy #8
0030A1  3  B1 68        	lda (z80_ix),y
0030A3  3  38           	sec
0030A4  3  E9 01        	sbc #1
0030A6  3  91 68        	sta (z80_ix),y			; adjust new x coord.
0030A8  3  C6 63        	dec z80_b
0030AA  3  D0 EE        	bne gravu0
0030AC  3  60           	rts
0030AD  3               gravst:
0030AD  3  A0 0D        	ldy #13
0030AF  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0030B1  3  85 66        	sta z80_l
0030B3  3  A0 0E        	ldy #14
0030B5  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0030B7  3  85 67        	sta z80_h
0030B9  3               
0030B9  3  A9 00        	lda #0				; null value in pointer.
0030BB  3  A0 0D        	ldy #13
0030BD  3  91 68        	sta (z80_ix),y			; store new pointer low.
0030BF  3  C8           	iny
0030C0  3  91 68        	sta (z80_ix),y			; store new pointer high.
0030C2  3               
0030C2  3  A0 00        	ldy #0
0030C4  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
0030C6  3  C9 63        	cmp #99				; is it the end marker?
0030C8  3               evftf:
0030C8  3  F0 01        	beq :+				; yes, fallen too far.
0030CA  3  60           	rts
0030CB  3               :
0030CB  3  4C 99 34     	jmp evnt15			; EVENT FELLTOOFAR
0030CE  3               
0030CE  3               ;------------------------------------------------
0030CE  3               ; Initiate fall check.
0030CE  3               ;------------------------------------------------
0030CE  3               
0030CE  3               ifall:
0030CE  3  A0 0D        	ldy #13
0030D0  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0030D2  3  85 66        	sta z80_l
0030D4  3  A0 0E        	ldy #14
0030D6  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0030D8  3  85 67        	sta z80_h			; high byte in accumulator.
0030DA  3  05 66        	ora z80_l			; merge in low byte.
0030DC  3  F0 01        	beq :+
0030DE  3  60           	rts				; if either is set, we're already in the air.
0030DF  3               :
0030DF  3  A0 09        	ldy #9
0030E1  3  B1 68        	lda (z80_ix),y			; y coordinate.
0030E3  3  85 rr        	sta dispx
0030E5  3  A0 08        	ldy #8
0030E7  3  B1 68        	lda (z80_ix),y			; look x coordinate.
0030E9  3  18           	clc
0030EA  3               numsp7:
0030EA  3  69 10        	adc #SPR_HGT			; add 16 pixels.
0030EC  3  85 rr        	sta dispy			; set up test coordinates.
0030EE  3  20 21 29     	jsr tstbl			; get map address.
0030F1  3  20 4E 28     	jsr plchk			; block, platform check.
0030F4  3  F0 01        	beq :+
0030F6  3  60           	rts				; it's solid, don't fall.
0030F7  3               :
0030F7  3  E6 rr        	inc bufaddr			; look right one cell.
0030F9  3  20 4E 28     	jsr plchk			; block, platform check.
0030FC  3  F0 01        	beq :+
0030FE  3  60           	rts				; it's solid, don't fall.
0030FF  3               :
0030FF  3  A5 rr        	lda dispx			; y coordinate.
003101  3  29 07        	and #7				; position straddling block cells.
003103  3  F0 08        	beq ifalls			; no more checks needed.
003105  3  E6 rr        	inc bufaddr			; look to third cell.
003107  3  20 4E 28     	jsr plchk			; block, platform check.
00310A  3  F0 01        	beq :+
00310C  3  60           	rts				; it's solid, don't fall.
00310D  3               :
00310D  3               ifalls:
00310D  3  A9 92        	lda #<jtab			; jump table start.
00310F  3  85 66        	sta z80_l
003111  3  A9 38        	lda #>jtab
003113  3  85 67        	sta z80_h
003115  3               ifal0:
003115  3  E6 66        	inc z80_l			; point to next value.
003117  3  D0 02        	bne :+
003119  3  E6 67        	inc z80_h
00311B  3               :
00311B  3  A0 00        	ldy #0
00311D  3  B1 66        	lda (z80_hl),y			; fetch value.
00311F  3  F0 F4        	beq ifal0			; no, get next value.
003121  3  C9 63        	cmp #99				; reached end of table?
003123  3  D0 01        	bne :+
003125  3  60           	rts				; yes, don't fall.
003126  3               :
003126  3  C9 80        	cmp #128			; is it going up?
003128  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
00312A  3               
00312A  3  A0 0D        	ldy #13
00312C  3  A5 66        	lda z80_l
00312E  3  91 68        	sta (z80_ix),y 			; set jump low.
003130  3  A0 0E        	ldy #14
003132  3  A5 67        	lda z80_h
003134  3  91 68        	sta (z80_ix),y 			; set jump high.
003136  3  60           	rts
003137  3               
003137  3               
003137  3               ;----------------------------------------------------
003137  3               ; Get frame data for a particular sprite.
003137  3               ; Input:
003137  3               ;  a		= framenumer
003137  3               ; Output:
003137  3               ;  hl		= frame address
003137  3               ;
003137  3               ; global:	hl,frmptr
003137  3               ; local:	-
003137  3               ; calls:	-
003137  3               ;----------------------------------------------------
003137  3               
003137  3               gfrm:
003137  3  0A           	asl a	 		 	; multiple of 2.
003138  3  18           	clc
003139  3  6D 1F 20     	adc frmptr 			; frames used by game.
00313C  3  85 66        	sta z80_l
00313E  3  AD 20 20     	lda frmptr+1
003141  3  69 00        	adc #0
003143  3  85 67        	sta z80_h 			; point to frame start.
003145  3  60           	rts
003146  3               
003146  3               ;----------------------------------------------------
003146  3               ; Find sprite list for current room.
003146  3               ;
003146  3               ; global:	hl
003146  3               ; local:	x,y
003146  3               ; calls:	-
003146  3               ;----------------------------------------------------
003146  3               
003146  3               sprlst:
003146  3  A9 67        	lda #<nmedat 			; list of enemy sprites.
003148  3  85 66        	sta z80_l
00314A  3  A9 35        	lda #>nmedat
00314C  3  85 67        	sta z80_h
00314E  3  A6 rr        	ldx scno 			; screen number.
003150  3  D0 01        	bne sprls2 			; is it the first screen?
003152  3  60           	rts 				; yes, don't need to search data.
003153  3               sprls2:
003153  3  A0 00        	ldy #0
003155  3               sprls1:
003155  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
003157  3  C9 FF        	cmp #255			; is it an end marker?
003159  3  F0 0E        	beq sprls0 			; yes, end of this room.
00315B  3               
00315B  3  18           	clc 				; point to next sprite in list.
00315C  3  A5 66        	lda z80_l
00315E  3  69 04        	adc #NMESIZ
003160  3  85 66        	sta z80_l
003162  3  90 02        	bcc :+
003164  3  E6 67        	inc z80_h
003166  3               :
003166  3  4C 55 31     	jmp sprls1 			; continue until end of room.
003169  3               sprls0:
003169  3  E6 66        	inc z80_l 			; point to start of next screen.s
00316B  3  D0 02        	bne :+
00316D  3  E6 67        	inc z80_h
00316F  3               :
00316F  3  CA           	dex
003170  3  D0 E3        	bne sprls1 			; continue until room found.
003172  3  60           	rts
003173  3               
003173  3               
003173  3               ;----------------------------------------------------
003173  3               ; Clear all but a single player sprite.
003173  3               ;
003173  3               ; global:	-
003173  3               ; local:	x,y,ix
003173  3               ; calls:	-
003173  3               ;----------------------------------------------------
003173  3               
003173  3               nspr:
003173  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003175  3  85 rr        	sta sprcnt
003177  3  A9 15        	lda #<sprtab 			; sprite table.
003179  3  85 68        	sta z80_x
00317B  3  A9 33        	lda #>sprtab
00317D  3  85 69        	sta z80_i
00317F  3               nspr0:
00317F  3  A0 00        	ldy #0 				; fetch sprite type.
003181  3  B1 68        	lda (z80_ix),y 			; is it a player?
003183  3  F0 1A        	beq nspr1 			; yes, keep this one.
003185  3               
003185  3  A9 FF        	lda #255
003187  3  A0 00        	ldy #0 				; fetch sprite type.
003189  3  91 68        	sta (z80_ix),y 			; delete sprite.
00318B  3  A0 05        	ldy #5
00318D  3  91 68        	sta (z80_ix),y 			; remove next type.
00318F  3               
00318F  3  18           	clc	 			; next sprite.
003190  3  A5 68        	lda z80_x
003192  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003194  3  85 68        	sta z80_x
003196  3  90 02        	bcc :+
003198  3  E6 69        	inc z80_i
00319A  3               :
00319A  3  C6 rr        	dec sprcnt	 			; one less space in the table.
00319C  3  D0 E1        	bne nspr0
00319E  3  60           	rts
00319F  3               nspr1:
00319F  3  A9 FF        	lda #255
0031A1  3  A0 00        	ldy #0
0031A3  3  91 68        	sta (z80_ix),y 			; delete sprite.
0031A5  3               
0031A5  3  18           	clc	 			; point to next sprite.
0031A6  3  A5 68        	lda z80_x
0031A8  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0031AA  3  85 68        	sta z80_x
0031AC  3  90 02        	bcc :+
0031AE  3  E6 69        	inc z80_i
0031B0  3               :
0031B0  3  C6 rr        	dec sprcnt	 			; one less to do.
0031B2  3  D0 01        	bne nspr2
0031B4  3  60           	rts
0031B5  3               nspr2:
0031B5  3  A9 FF        	lda #255
0031B7  3  A0 00        	ldy #0
0031B9  3  91 68        	sta (z80_ix),y 			; delete sprite.
0031BB  3  A0 05        	ldy #5
0031BD  3  91 68        	sta (z80_ix),y 			; remove next type.
0031BF  3               
0031BF  3  18           	clc	 			; next sprite.
0031C0  3  A5 68        	lda z80_x
0031C2  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0031C4  3  85 68        	sta z80_x
0031C6  3  90 02        	bcc :+
0031C8  3  E6 69        	inc z80_i
0031CA  3               :
0031CA  3  C6 rr        	dec sprcnt	 			; one less space in table.
0031CC  3  D0 E7        	bne nspr2
0031CE  3  60           	rts
0031CF  3               
0031CF  3               ;----------------------------------------------------------
0031CF  3               ; Two initialisation routines.
0031CF  3               ; Initialise sprites - copy everything from list to table.
0031CF  3               ;
0031CF  3               ; global:	-
0031CF  3               ; local:	x,y,ix
0031CF  3               ; calls:	cpsp
0031CF  3               ;----------------------------------------------------------
0031CF  3               
0031CF  3               ispr:
0031CF  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0031D1  3  85 rr        	sta sprcnt
0031D3  3  A9 15        	lda #<sprtab			; sprite table.
0031D5  3  85 68        	sta z80_x
0031D7  3  A9 33        	lda #>sprtab
0031D9  3  85 69        	sta z80_i
0031DB  3               ispr2:
0031DB  3  A0 00        	ldy #0
0031DD  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0031DF  3  C9 FF        	cmp #255 			; is it an end marker?
0031E1  3  D0 01        	bne :+
0031E3  3  60           	rts 				; yes, no more to do.
0031E4  3               :
0031E4  3               ispr1:
0031E4  3  A0 00        	ldy #0
0031E6  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
0031E8  3  C9 FF        	cmp #255 			; is it enabled yet?
0031EA  3  D0 08        	bne ispr4			; yes, try another slot.
0031EC  3               
0031EC  3  A0 05        	ldy #5
0031EE  3  B1 68        	lda (z80_ix),y		 	; next type.
0031F0  3  C9 FF        	cmp #255 			; is it enabled yet?
0031F2  3  F0 10        	beq ispr3 			; no, process this one.
0031F4  3               ispr4:
0031F4  3  18           	clc 				; next sprite.
0031F5  3  A5 68        	lda z80_x
0031F7  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0031F9  3  85 68        	sta z80_x
0031FB  3  90 02        	bcc :+
0031FD  3  E6 69        	inc z80_i
0031FF  3               :
0031FF  3  C6 rr        	dec sprcnt
003201  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
003203  3  60           	rts  				; no more room in table.
003204  3               ispr3:
003204  3  20 57 32     	jsr cpsp			; initialise a sprite.
003207  3  C6 rr        	dec sprcnt			; one less space in the table.
003209  3  D0 D0        	bne ispr2
00320B  3  60           	rts
00320C  3               
00320C  3               
00320C  3               ;-----------------------------------------------------------------------
00320C  3               ; Initialise sprites - but not player, we're keeping the old one.
00320C  3               ;
00320C  3               ; global:	-
00320C  3               ; local:	x,y,ix
00320C  3               ; calls:	cpsp
00320C  3               ;-----------------------------------------------------------------------
00320C  3               
00320C  3               kspr:
00320C  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
00320E  3  A9 15        	lda #<sprtab 			; sprite table.
003210  3  85 68        	sta z80_x
003212  3  A9 33        	lda #>sprtab
003214  3  85 69        	sta z80_i
003216  3               kspr2:
003216  3  A0 00        	ldy #0
003218  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00321A  3  C9 FF        	cmp #255 			; is it an end marker?
00321C  3  D0 01        	bne :+
00321E  3  60           	rts 				; yes, no more to do.
00321F  3               :
00321F  3  C9 00        	cmp #0
003221  3  D0 0E        	bne kspr1 			; no, add to table as normal.
003223  3               
003223  3  18           	clc 				; next sprite.
003224  3  A5 66        	lda z80_l
003226  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
003228  3  85 66        	sta z80_l
00322A  3  90 02        	bcc :+
00322C  3  E6 67        	inc z80_h
00322E  3               :
00322E  3  4C 16 32     	jmp kspr2
003231  3               kspr1:
003231  3  A0 00        	ldy #0 				; fetch sprite type.
003233  3  B1 68        	lda (z80_ix),y
003235  3  C9 FF        	cmp #255 			; is it enabled yet?
003237  3  D0 08        	bne kspr4 			; yes, try another slot.
003239  3               
003239  3  A0 05        	ldy #5 				; next type.
00323B  3  B1 68        	lda (z80_ix),y
00323D  3  C9 FF        	cmp #255 			; is it enabled yet?
00323F  3  F0 0F        	beq kspr3 			; no, process this one.
003241  3               kspr4:
003241  3  18           	clc 				; next sprite.
003242  3  A5 68        	lda z80_x
003244  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003246  3  85 68        	sta z80_x
003248  3  90 02        	bcc :+
00324A  3  E6 69        	inc z80_i
00324C  3               :
00324C  3  CA           	dex	 			; repeat for remaining sprites.
00324D  3  D0 E2        	bne kspr1
00324F  3  60           	rts  				; no more room in table.
003250  3               kspr3:
003250  3  20 57 32     	jsr cpsp 			; copy sprite to table.
003253  3  CA           	dex	 			; one less space in the table.
003254  3  D0 C0        	bne kspr2
003256  3  60           	rts
003257  3               
003257  3               ;----------------------------------------------
003257  3               ; Copy sprite from list to table.
003257  3               ;
003257  3               ; global:	hl,ix
003257  3               ; local:	y
003257  3               ; calls:	evnt09
003257  3               ;----------------------------------------------
003257  3               
003257  3               cpsp:
003257  3  A0 00        	ldy #0				; fetch byte from table.
003259  3  B1 66        	lda (z80_hl),y
00325B  3  91 68        	sta (z80_ix),y			; set up type.
00325D  3  A0 05        	ldy #PAM1ST
00325F  3  91 68        	sta (z80_ix),y 			; set up type.
003261  3               
003261  3  E6 66        	inc z80_l 			; move to next byte.
003263  3  D0 02        	bne :+
003265  3  E6 67        	inc z80_h
003267  3               :
003267  3  A0 00        	ldy #0 				; fetch byte from table.
003269  3  B1 66        	lda (z80_hl),y
00326B  3  A0 06        	ldy #6
00326D  3  91 68        	sta (z80_ix),y			; set up image.
00326F  3               
00326F  3  E6 66        	inc z80_l 			; move to next byte.
003271  3  D0 02        	bne :+
003273  3  E6 67        	inc z80_h
003275  3               :
003275  3  A0 00        	ldy #0
003277  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
003279  3  A0 08        	ldy #8
00327B  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00327D  3               
00327D  3  A9 C8        	lda #200 			; set initial coordinate off screen.
00327F  3  A0 03        	ldy #3
003281  3  91 68        	sta (z80_ix),y
003283  3               
003283  3  E6 66        	inc z80_l 			; move to next byte.
003285  3  D0 02        	bne :+
003287  3  E6 67        	inc z80_h
003289  3               :
003289  3  A0 00        	ldy #0 				; fetch byte from table.
00328B  3  B1 66        	lda (z80_hl),y
00328D  3  A0 09        	ldy #9
00328F  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003291  3               
003291  3  E6 66        	inc z80_l 			; move to next byte.
003293  3  D0 02        	bne :+
003295  3  E6 67        	inc z80_h
003297  3               :
003297  3  A9 00        	lda #0				; zeroes in accumulator.
003299  3  A0 07        	ldy #7 				; reset frame number.
00329B  3  91 68        	sta (z80_ix),y
00329D  3  A0 0A        	ldy #10 			; reset direction.
00329F  3  91 68        	sta (z80_ix),y
0032A1  3  A0 0D        	ldy #13				; reset jump pointer low.
0032A3  3  91 68        	sta (z80_ix),y
0032A5  3  A0 0E        	ldy #14	 			; reset jump pointer high.
0032A7  3  91 68        	sta (z80_ix),y
0032A9  3               
0032A9  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
0032AB  3  A0 10        	ldy #16
0032AD  3  91 68        	sta (z80_ix),y
0032AF  3               evis0:
0032AF  3  A5 69        	lda z80_i
0032B1  3  48           	pha
0032B2  3  A5 68        	lda z80_x
0032B4  3  48           	pha
0032B5  3  A5 67        	lda z80_h
0032B7  3  48           	pha
0032B8  3  A5 66        	lda z80_l
0032BA  3  48           	pha
0032BB  3               
0032BB  3  20 30 34     	jsr evnt09 			; perform event.
0032BE  3               
0032BE  3  68           	pla
0032BF  3  85 66        	sta z80_l
0032C1  3  68           	pla
0032C2  3  85 67        	sta z80_h
0032C4  3  68           	pla
0032C5  3  85 68        	sta z80_x
0032C7  3  68           	pla
0032C8  3  85 69        	sta z80_i
0032CA  3               
0032CA  3  18           	clc
0032CB  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0032CD  3  69 11        	adc #TABSIZ		 	; next sprite.
0032CF  3  85 68        	sta z80_x
0032D1  3  90 02        	bcc :+
0032D3  3  E6 69        	inc z80_i
0032D5  3               :
0032D5  3  60           	rts
0032D6  3               
0032D6  3               
0032D6  3               ;-------------------------------------
0032D6  3               ; Clear the play area window.
0032D6  3               ;-------------------------------------
0032D6  3               
0032D6  3               clw:
0032D6  3  AD 2B 20     	lda wintop			; get coordinates of window.
0032D9  3  85 rr        	sta dispy			; put into dispx for calculation.
0032DB  3  AD 2C 20     	lda winlft
0032DE  3  85 rr        	sta dispx
0032E0  3               
0032E0  3  AD 2D 20     	lda winhgt			; height of window.
0032E3  3  85 rr        	sta rrow			; copy to b register.
0032E5  3               clw3:
0032E5  3  AD 2E 20     	lda winwid 			; width of window.
0032E8  3  85 rr        	sta rcol
0032EA  3               clw2:
0032EA  3  20 F3 24     	jsr gprad 			; get print address.
0032ED  3  A9 00        	lda #0				; zero byte to write.
0032EF  3  A2 07        	ldx #7				; pixel height of each cell.
0032F1  3               clw1:
0032F1  3  BC 79 25     	ldy scrtab,x
0032F4  3  91 rr        	sta (scraddr),y 			; copy to screen.
0032F6  3  CA           	dex				; next screen row down.
0032F7  3  10 F8        	bpl clw1
0032F9  3               
0032F9  3  E6 rr        	inc dispx			; next column.
0032FB  3  C6 rr        	dec rcol			; one less to do.
0032FD  3  D0 EB        	bne clw2			; repeat for remaining columns.
0032FF  3               
0032FF  3  AD 2C 20     	lda winlft			; get left edge.
003302  3  85 rr        	sta dispx 			; reset x.
003304  3  E6 rr        	inc dispy 			; next line down.
003306  3               
003306  3  C6 rr        	dec rrow
003308  3  D0 DB        	bne clw3			; repeat down the screen.
00330A  3               
00330A  3  AD 2B 20     	lda wintop			; get coordinates of window.
00330D  3  85 rr        	sta chary			; put into display position.
00330F  3  AD 2C 20     	lda winlft
003312  3  85 rr        	sta charx
003314  3  60           	rts
003315  3               
003315  3               
003315  3               ;----------------------------------------------------------
003315  3               ; Effects code.
003315  3               ; Ticker routine is called 25 times per second.
003315  3               ;
003315  3               ; HL = txtscr = left text screen address
003315  3               ; DE = txtscr+txtwid-1 = right text screen address
003315  3               ; BC = txtpos = text scroller position
003315  3               ;
003315  3               ;----------------------------------------------------------
003315  3               
003315  3               .if sflag
003315  3               scrly:
003315  3               	rts
003315  3               	.word txtscr         	; get left screen address.
003315  3               	sta scr_l
003315  3               	lda txtscr+1
003315  3               	sta scr_l+1
003315  3               	sta scr_r+1
003315  3               
003315  3               	stx xtmp
003315  3               
003315  3               	clc         		; get right screen address.
003315  3               	lda scr_l
003315  3               	adc txtwid
003315  3               	sta scr_r
003315  3               	dec scr_r
003315  3               scrly1:
003315  3               	ldy txtwid		; set txtwide
003315  3               	dey
003315  3               	clc
003315  3               scrly0:
003315  3               	lda (scr_l),y		; scroll 1 line
003315  3               	rol a
003315  3               	sta (scr_l),y
003315  3               	dey
003315  3               	bpl scrly0
003315  3               
003315  3               	clc			; point to next line
003315  3               	lda scr_l
003315  3               	adc #32
003315  3               	sta scr_l
003315  3               	bcc scrly1		; repeat 8 times
003315  3               
003315  3               	lda txtpos 		; get text pointer.
003315  3               	sta scr_txt
003315  3               	lda txtpos+1
003315  3               	sta scr_txt+1
003315  3               
003315  3               	ldy #0
003315  3               	lda (scr_txt),y 		; find character we're displaying.
003315  3               	and #127 		; remove end marker bit if applicable.
003315  3               	cmp #13			; is it newline?
003315  3               	bne scrly5 		; no, it's okay.
003315  3               	lda #32			; convert to a space instead.
003315  3               scrly5:
003315  3               	sta fntaddr		; calculate char address
003315  3               	lda #0
003315  3               	sta fntaddr+1
003315  3               	asl fntaddr  		; multiply char by 8.
003315  3               	rol fntaddr+1
003315  3               	asl fntaddr
003315  3               	rol fntaddr+1
003315  3               	asl fntaddr
003315  3               	rol fntaddr+1
003315  3               	lda fntaddr
003315  3               	clc
003315  3               	adc #<(FONT-256)
003315  3               	sta scrly3+1		; that's the low byte.
003315  3               	lda fntaddr+1
003315  3               	adc #>(FONT-256)
003315  3               	sta scrly3+2		; add displacement.
003315  3               
003315  3               	ldx #0
003315  3               scrly3:
003315  3               	lda $3333,x		; get image of char line.
003315  3               	and txtbit
003315  3               	beq scrly2		; don't plot pixel
003315  3               	ldy scrline,x
003315  3               	lda (scr_r),y
003315  3               	clc
003315  3               	ora #1
003315  3               	sta (scr_r),y		; plot pixel
003315  3               scrly2:
003315  3               	inx			; next line of char.
003315  3               	cpx #8
003315  3               	bne scrly3
003315  3               
003315  3               	lsr txtbit		; bit of text to display.
003315  3               	bcs :+
003315  3               	rts
003315  3               :
003315  3               	ldy #0
003315  3               	lda (scr_txt),y 	; what was the character?
003315  3               	asl a	  		; end of message?
003315  3               	bcs scrly4
003315  3               	inc txtpos
003315  3               	bne :+
003315  3               	inc txtpos+1
003315  3               :
003315  3               	jmp scrly6 		; not yet - continue.
003315  3               scrly4:
003315  3               	lda txtini 		; start of scrolling message.
003315  3               	sta txtpos
003315  3               	lda txtini+1
003315  3               	sta txtpos+1
003315  3               scrly6:
003315  3               	lda #128
003315  3               	sta txtbit
003315  3               	ldx xtmp
003315  3               	rts
003315  3               
003315  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003315  3               
003315  3               ;-------------------------------------------------------
003315  3               ; Entry TICKER command
003315  3               ;
003315  3               ; Entry:
003315  3               ;  z80_b = message nr
003315  3               ;  z80_c = width
003315  3               ;-------------------------------------------------------
003315  3               
003315  3               iscrly:
003315  3               	jsr prescr 		; set up display position.
003315  3               
003315  3               	lda #<msgdat 		; text messages.
003315  3               	sta z80_l
003315  3               	lda #>msgdat
003315  3               	sta z80_h
003315  3               
003315  3               	lda z80_c 		; width.
003315  3               	sec
003315  3               	sbc #1			; subtract one.
003315  3               	cmp #32 		; is it between 1 and 32?
003315  3               	bcc :+
003315  3               	lda #$60
003315  3               	jmp iscrl0		; no, disable messages.
003315  3               :
003315  3               	ldx z80_b		; message number.
003315  3               	jsr getwrd 		; find message start.
003315  3               
003315  3               	lda z80_l		; set initial text position.
003315  3               	sta txtini
003315  3               	lda z80_h
003315  3               	sta txtini+1
003315  3               
003315  3               	lda #$ad		; code for lda adrr
003315  3               iscrl0:
003315  3               	sta scrly		; enable/disable scrolling routine.
003315  3               
003315  3               	jsr prescr 		; set up display position.
003315  3               	jsr gprad 		; get print address.
003315  3               
003315  3               	lda scraddr 		; set text screen address.
003315  3               	sta txtscr
003315  3               	lda scraddr+1
003315  3               	sta txtscr+1
003315  3               
003315  3               	lda z80_c		; width.
003315  3               	sta txtwid		; set width in working storage.
003315  3               
003315  3               	lda #128 		; start with leftmost bit.
003315  3               	sta txtbit
003315  3               
003315  3               	jmp scrly4
003315  3               .endif
003315  3               
003315  3               ;------------------------------------------------------------------
003315  3               ; Dig routine, conditional assembly depending on dflag
003315  3               ;------------------------------------------------------------------
003315  3               .if dflag
003315  3               dig:
003315  3               	and #3
003315  3               	beq digr		; dig right
003315  3               	cmp #1
003315  3               	beq digl		; dig left
003315  3               	cmp #2
003315  3               	beq digd		; dig down
003315  3               
003315  3               ; Dig up.
003315  3               
003315  3               digu:				; dig up
003315  3               	ldy #8
003315  3               	lda (z80_ix),y
003315  3               	sec
003315  3               	sbc #2
003315  3               	sta dispy		; set y
003315  3               
003315  3               	iny
003315  3               	lda (z80_ix),y
003315  3               	sta dispx		; set x
003315  3               	jmp digv
003315  3               
003315  3               ; Dig down.
003315  3               
003315  3               digd:
003315  3               	ldy #9
003315  3               	lda (z80_ix),y
003315  3               	sta dispx		; set y
003315  3               
003315  3               	dey
003315  3               	clc
003315  3               	lda (z80_ix),y
003315  3               	adc #16
003315  3               	sta dispy		; set y
003315  3               	jmp digv
003315  3               
003315  3               ; Dig left.
003315  3               
003315  3               digl:
003315  3               	ldy #8
003315  3               	lda (z80_ix),y
003315  3               	sta dispy		; set y
003315  3               
003315  3               	iny
003315  3               	lda (z80_ix),y
003315  3               	sec
003315  3               	sbc #2			; x=x-2
003315  3               	sta dispx		; set x
003315  3               	jmp digh
003315  3               
003315  3               ; Dig right.
003315  3               
003315  3               digr:
003315  3               	ldy #8
003315  3               	lda (z80_ix),y
003315  3               	sta dispy		; set y
003315  3               
003315  3               	iny
003315  3               	lda (z80_ix),y
003315  3               	clc
003315  3               	adc #16
003315  3               	sta dispx		; set x+16
003315  3               	jmp digh
003315  3               
003315  3               ; Vertical digging
003315  3               
003315  3               digv:
003315  3               	jsr tstbl		; check blocktype in MAP
003315  3               	jsr fdchk		; test if FODDER
003315  3               
003315  3               	clc
003315  3               	lda dispx		; look 1 cell down
003315  3               	adc #8
003315  3               	sta dispx
003315  3               	jsr tstbl		; check blocktype in MAP
003315  3               	jsr fdchk
003315  3               	lda dispx
003315  3               	and #7
003315  3               	bne :+
003315  3               	rts
003315  3               :
003315  3               	clc
003315  3               	lda dispx		; look 1 cell down
003315  3               	adc #8
003315  3               	sta dispx
003315  3               	jsr tstbl		; check blocktype in MAP
003315  3               	jmp fdchk
003315  3               
003315  3               ; Horizontal digging
003315  3               
003315  3               digh:
003315  3               	jsr tstbl		; check blocktype in MAP
003315  3               	jsr fdchk		; test if FODDER
003315  3               
003315  3               	clc
003315  3               	lda dispy		; look 1 cell down
003315  3               	adc #8
003315  3               	sta dispy
003315  3               	jsr tstbl		; check blocktype in MAP
003315  3               	jsr fdchk
003315  3               	lda dispy
003315  3               	and #7
003315  3               	bne :+
003315  3               	rts
003315  3               :
003315  3               	clc
003315  3               	lda dispy		; look 1 cell down
003315  3               	adc #8
003315  3               	sta dispy
003315  3               	jsr tstbl		; check blocktype in MAP
003315  3               	jmp fdchk
003315  3               
003315  3               digcnt:	.byte 0
003315  3               
003315  3               .endif
003315  3               
003315  3               ;------------------------------------------------------------------
003315  3               ; Sprite table
003315  3               ;------------------------------------------------------------------
003315  3               
003315  3               
003315  3               ; ix+0  = type.
003315  3               ; ix+1  = sprite image number.
003315  3               ; ix+2  = frame.
003315  3               ; ix+3  = y coord.
003315  3               ; ix+4  = x coord.
003315  3               
003315  3               ; ix+5  = new type.
003315  3               ; ix+6  = new image number.
003315  3               ; ix+7  = new frame.
003315  3               ; ix+8  = new y coord.
003315  3               ; ix+9  = new x coord.
003315  3               
003315  3               ; ix+10 = direction.
003315  3               ; ix+11 = parameter 1.
003315  3               ; ix+12 = parameter 2.
003315  3               ; ix+13 = jump pointer low.
003315  3               ; ix+14 = jump pointer high.
003315  3               ; ix+15 = data pointer low.
003315  3               ; ix+16 = data pointer high.
003315  3               
003315  3               ; block NUMSPR * TABSIZ,255
003315  3               
003315  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
003319  3  FF FF FF FF  
00331D  3  FF FF FF FF  
0033E1  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0033E5  3  FF FF FF 00  
0033E9  3  C0 78 00 00  
0033F2  3  07           roomtb:	.byte 7                      ; start room map offset.
0033F3  3               
0033F3  3               ; User routine.  Put your own code in here to be called with USER instruction.
0033F3  3               ; if USER has an argument it will be passed in the accumulator.
0033F3  3               
0033F3  3               user:
0033F3  3               	.include "user.inc"
0033F3  4  60           	rts
0033F4  4               
0033F4  3               
0033F4  3               ;----------------------------------------------------
0033F4  3               ; Missing vars
0033F4  3               ;----------------------------------------------------
0033F4  3               
0033F4  3               MAP 		= $9800			; properties map buffer (3x256 bytes)
0033F4  3               SCADTB_lb 	= MAP+3*256		; screen address table lo-byte (256 bytes)
0033F4  3               SCADTB_hb 	= SCADTB_lb+256		; screen address table hi-byte (256 bytes)
0033F4  3               SHRAPN 		= SCADTB_hb+256		; shrapnel table (55x6 bytes)
0033F4  3               
0033F4  3               ;Fontpointer:	.byte 0,0
0033F4  3               ;TmpAddr:	.byte 0,0
0033F4  3               
0033F4  3               ;loopa:		.byte 0
0033F4  3               ;loopb:		.byte 0
0033F4  3               ;loopc:		.byte 0
0033F4  3               
0033F4  3               setfgcol:
0033F4  3  29 03        	and #3
0033F6  3  A8           	tay
0033F7  3  B9 19 34     	lda codcol,y
0033FA  3  4C 10 34     	jmp calfgc
0033FD  3               
0033FD  3               setbgcol:
0033FD  3  29 03        	and #3
0033FF  3               calbgc:
0033FF  3  A8           	tay
003400  3  B9 19 34     	lda codcol,y
003403  3  48           	pha
003404  3  AD 17 34     	lda andeor
003407  3  4D 18 34     	eor andeor+1
00340A  3  AA           	tax
00340B  3  68           	pla
00340C  3  8D 18 34     	sta andeor+1
00340F  3  8A           	txa
003410  3               calfgc:
003410  3  4D 18 34     	eor andeor+1
003413  3  8D 17 34     	sta andeor
003416  3               calex1:
003416  3  60           	rts
003417  3               
003417  3  00 00        andeor:	.byte 0,0
003419  3  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
00341D  3               
00341D  3               ; Everything below here will be generated by the editors.
00341D  3               
00341D  3               WINDOWTOP = 1
00341D  3               WINDOWLFT = 1
00341D  3               WINDOWHGT = 22
00341D  3               WINDOWWID = 30 ;a
00341D  3               MAPWID = 3
00341D  3  FF FF FF             .byte 255,255,255
003420  3               mapdat:
003420  3  FF 00 FF             .byte 255,0,255
003423  3  FF FF FF             .byte 255,255,255
003426  3  01           stmap:  .byte 1
003427  3               
003427  3               evnt00:
003427  3  60                   rts
003428  3               evnt01:
003428  3  60                   rts
003429  3               evnt02:
003429  3  60                   rts
00342A  3               evnt03:
00342A  3  60                   rts
00342B  3               evnt04:
00342B  3  60                   rts
00342C  3               evnt05:
00342C  3  60                   rts
00342D  3               evnt06:
00342D  3  60                   rts
00342E  3               evnt07:
00342E  3  60                   rts
00342F  3               evnt08:
00342F  3  60                   rts
003430  3               evnt09:
003430  3  60                   rts
003431  3               evnt10:
003431  3  A9 00                lda #0		; AT
003433  3  85 rr                sta chary
003435  3  A9 01                lda #1
003437  3  85 rr                sta charx
003439  3  A9 01                lda #1		; PRINTMODE
00343B  3  85 rr                sta prtmod
00343D  3  A9 00                lda #0		; PRINT
00343F  3  20 78 2A             jsr dmsg
003442  3  A9 00                lda #0		; PRINTMODE
003444  3  85 rr                sta prtmod
003446  3  A9 03                lda #3		; AT
003448  3  85 rr                sta chary
00344A  3  A9 01                lda #1
00344C  3  85 rr                sta charx
00344E  3  A9 01                lda #1		; PRINT
003450  3  20 78 2A             jsr dmsg
003453  3  A5 rr                lda clock	; DISPLAY
003455  3  20 AE 2F             jsr disply
003458  3  A9 02                lda #2		; PRINT
00345A  3  20 78 2A             jsr dmsg
00345D  3  A9 06                lda #6		; AT
00345F  3  85 rr                sta chary
003461  3  A9 01                lda #1
003463  3  85 rr                sta charx
003465  3  A9 03                lda #3		; PRINT
003467  3  20 78 2A             jsr dmsg
00346A  3  A5 rr                lda clock		; DISPLAYCLOCK
00346C  3  85 65                sta z80_d
00346E  3  A9 3C                lda #60
003470  3  85 64                sta z80_e
003472  3  20 ED 22             jsr idiv
003475  3  48                   pha
003476  3  A5 65                lda z80_d
003478  3  20 AE 2F             jsr disply
00347B  3  E6 rr                inc charx
00347D  3  A9 D6                lda #<displ0
00347F  3  85 62                sta z80_c
003481  3  A9 2F                lda #>displ0
003483  3  85 63                sta z80_b
003485  3  68                   pla
003486  3  20 9F 22             jsr num2dd
003489  3  20 BD 2F             jsr displ1
00348C  3  A9 04                lda #4		; PRINT
00348E  3  20 78 2A             jsr dmsg
003491  3  60                   rts
003492  3               evnt11:
003492  3  60                   rts
003493  3               evnt12:
003493  3  20 E7 20             jsr cls		; CLS
003496  3  60                   rts
003497  3               evnt13:
003497  3  60                   rts
003498  3               evnt14:
003498  3  60                   rts
003499  3               evnt15:
003499  3  60                   rts
00349A  3               evnt16:
00349A  3  60                   rts
00349B  3               evnt17:
00349B  3  60                   rts
00349C  3               evnt18:
00349C  3  60                   rts
00349D  3               evnt19:
00349D  3  60                   rts
00349E  3               evnt20:
00349E  3  60                   rts
00349F  3  60           ptcusr: rts
0034A0  3               msgdat:
0034A0  3  43 4C 4F 43          .byte "CLOCK TEST:",160
0034A4  3  4B 20 54 45  
0034A8  3  53 54 3A A0  
0034AC  3  43 55 52 52          .byte "CURRENT CLOCK:",160
0034B0  3  45 4E 54 20  
0034B4  3  43 4C 4F 43  
0034BB  3  20 A0                .byte " ",160
0034BD  3  43 55 52 52          .byte "CURRENT TIME:",160
0034C1  3  45 4E 54 20  
0034C5  3  54 49 4D 45  
0034CB  3  20 A0                .byte " ",160
0034CD  3               nummsg:
0034CD  3  05                   .byte 5
0034CE  3               chgfx:
0034CE  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0034D2  3  00 00 00 00  
0034D6  3               bprop:
0034D6  3  00                   .byte 0
0034D7  3               sprgfx:
0034D7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0034DB  3  00 00 00 00  
0034DF  3  00 00 00 00  
0034F7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0034FB  3  00 00 00 00  
0034FF  3  00 00 00 00  
003517  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00351B  3  00 00 00 00  
00351F  3  00 00 00 00  
003537  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00353B  3  00 00 00 00  
00353F  3  00 00 00 00  
003557  3               
003557  3               frmlst:
003557  3  00 01 01 00          .byte 0,1,1,0
00355B  3               scdat:
00355B  3  09 00                .word 9
00355D  3  FF 00 00 FF          .byte 255,0,0,255,0,0,255,0,148
003561  3  00 00 FF 00  
003565  3  94           
003566  3               numsc:
003566  3  01                   .byte 1
003567  3               nmedat:
003567  3  00 00 58 80          .byte 0,0,88,128,255
00356B  3  FF           
00356C  3               NUMOBJ = 1
00356C  3               objdta:
00356C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,32,0,160,32
003570  3  00 00 00 00  
003574  3  00 00 00 00  
003592  3               font:
003592  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003596  3  00 00 00 00  
00359A  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
00359E  3  30 00 30 00  
0035A2  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
0035A6  3  00 00 00 00  
0035AA  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
0035AE  3  6C FE 6C 00  
0035B2  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
0035B6  3  7E 1E 7E 18  
0035BA  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
0035BE  3  30 6E CE 00  
0035C2  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
0035C6  3  7E CC 7E 00  
0035CA  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0035CE  3  00 00 00 00  
0035D2  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0035D6  3  18 18 0C 00  
0035DA  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0035DE  3  30 30 60 00  
0035E2  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0035E6  3  7E 18 3C 00  
0035EA  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0035EE  3  7E 18 18 00  
0035F2  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0035F6  3  00 18 18 30  
0035FA  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0035FE  3  7E 00 00 00  
003602  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
003606  3  00 38 38 00  
00360A  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
00360E  3  18 30 60 00  
003612  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
003616  3  F6 E6 7C 00  
00361A  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
00361E  3  18 18 7E 00  
003622  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
003626  3  7C C0 FE 00  
00362A  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
00362E  3  06 C6 7C 00  
003632  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
003636  3  D8 FE 18 00  
00363A  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
00363E  3  06 C6 7C 00  
003642  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
003646  3  C6 C6 7C 00  
00364A  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
00364E  3  18 30 30 00  
003652  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
003656  3  C6 C6 7C 00  
00365A  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
00365E  3  7E 06 7C 00  
003662  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
003666  3  00 00 30 00  
00366A  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
00366E  3  00 30 30 60  
003672  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
003676  3  30 18 0C 00  
00367A  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
00367E  3  00 7E 00 00  
003682  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
003686  3  0C 18 30 00  
00368A  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
00368E  3  18 00 18 00  
003692  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
003696  3  FE C0 7C 00  
00369A  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
00369E  3  FE C6 C6 00  
0036A2  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
0036A6  3  C6 C6 FC 00  
0036AA  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
0036AE  3  C0 C6 7C 00  
0036B2  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
0036B6  3  C6 CC F8 00  
0036BA  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
0036BE  3  C0 C0 FE 00  
0036C2  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
0036C6  3  C0 C0 C0 00  
0036CA  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
0036CE  3  DE C6 7C 00  
0036D2  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0036D6  3  C6 C6 C6 00  
0036DA  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
0036DE  3  18 18 7E 00  
0036E2  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
0036E6  3  C6 C6 7C 00  
0036EA  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
0036EE  3  D8 CC C6 00  
0036F2  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0036F6  3  C0 C0 FE 00  
0036FA  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0036FE  3  C6 C6 C6 00  
003702  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
003706  3  DE CE C6 00  
00370A  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
00370E  3  C6 C6 7C 00  
003712  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
003716  3  FC C0 C0 00  
00371A  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
00371E  3  F6 DE 7C 00  
003722  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
003726  3  FC CC C6 00  
00372A  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
00372E  3  06 C6 7C 00  
003732  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
003736  3  30 30 30 00  
00373A  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
00373E  3  C6 C6 7C 00  
003742  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
003746  3  C6 6C 38 00  
00374A  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
00374E  3  C6 FE 6C 00  
003752  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
003756  3  38 6C C6 00  
00375A  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
00375E  3  30 30 30 00  
003762  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
003766  3  30 60 FE 00  
00376A  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
00376E  3  18 18 1E 00  
003772  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
003776  3  30 18 0C 00  
00377A  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
00377E  3  30 30 F0 00  
003782  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
003786  3  30 30 30 00  
00378A  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
00378E  3  00 00 00 FF  
003792  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
003796  3  60 60 FE 00  
00379A  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
00379E  3  7C CC 7C 00  
0037A2  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
0037A6  3  66 66 7C 00  
0037AA  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
0037AE  3  60 60 3C 00  
0037B2  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
0037B6  3  CC CC 7C 00  
0037BA  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
0037BE  3  F8 C0 7C 00  
0037C2  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
0037C6  3  30 30 30 00  
0037CA  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0037CE  3  CC 7C 0C 78  
0037D2  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0037D6  3  CC CC CC 00  
0037DA  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0037DE  3  30 30 78 00  
0037E2  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
0037E6  3  0C 0C 6C 38  
0037EA  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0037EE  3  70 78 6C 00  
0037F2  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0037F6  3  30 30 1C 00  
0037FA  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0037FE  3  FC FC FC 00  
003802  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
003806  3  CC CC CC 00  
00380A  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
00380E  3  CC CC 78 00  
003812  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
003816  3  CC F8 C0 C0  
00381A  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
00381E  3  CC 7C 0C 0E  
003822  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
003826  3  60 60 60 00  
00382A  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
00382E  3  78 0C F8 00  
003832  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
003836  3  30 30 1C 00  
00383A  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
00383E  3  CC CC 78 00  
003842  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
003846  3  78 78 30 00  
00384A  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
00384E  3  FC FC 78 00  
003852  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
003856  3  30 78 CC 00  
00385A  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
00385E  3  CC 7C 0C 78  
003862  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
003866  3  30 60 FC 00  
00386A  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
00386E  3  18 18 1E 00  
003872  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
003876  3  18 18 18 00  
00387A  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
00387E  3  30 30 F0 00  
003882  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
003886  3  00 00 00 00  
00388A  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
00388E  3  E3 BB C6 7C  
003892  3               jtab:
003892  3  63                   .byte 99
003893  3  35 15 93 22  keys:   .byte 53,21,147,34,144,4,20,33,17,1,146
003897  3  90 04 14 21  
00389B  3  11 01 92     
00389E  3               
00389E  2               
00389E  1               	.include "lib.inc"
00389E  2               ; Atari 800 hardware specific routines
00389E  2               
00389E  2               systeminit:
00389E  2               
00389E  2  78           	sei			; Disable interrupts
00389F  2               
00389F  2               ; Switch ROMS off
00389F  2               
00389F  2  AD 03 D3     	lda PBCTL
0038A2  2  09 02        	ora #%00000010
0038A4  2  8D 03 D3     	sta PBCTL
0038A7  2  AD 01 D3     	lda PORTB
0038AA  2  29 7C        	and #%01111100
0038AC  2  09 82        	ora #%10000010
0038AE  2  8D 01 D3     	sta PORTB
0038B1  2               
0038B1  2               ; Init video registers
0038B1  2               
0038B1  2  A9 FA        	lda #<BITMAP_DLIST
0038B3  2  8D 02 D4     	sta DLISTL
0038B6  2  A9 38        	lda #>BITMAP_DLIST
0038B8  2  8D 03 D4     	sta DLISTH
0038BB  2               
0038BB  2               ; Screenwidth 32 bytes
0038BB  2               
0038BB  2  A9 31        	lda #%00110001
0038BD  2  8D 00 D4     	sta DMACTL
0038C0  2               
0038C0  2  20 E7 20     	jsr cls
0038C3  2               
0038C3  2               endtest:
0038C3  2  4C C3 38     	jmp endtest
0038C6  2               
0038C6  2  xx xx xx xx  .align $100
0038CA  2  xx xx xx xx  
0038CE  2  xx xx xx xx  
0038FA  2               
0038FA  2               PORTB		= $D301
0038FA  2               PBCTL		= $D303
0038FA  2               DMACTL		= $D400
0038FA  2               DLISTL		= $D402
0038FA  2               DLISTH		= $D403
0038FA  2               GFX_MEM		= $E000
0038FA  2               
0038FA  2               LMS		= 64
0038FA  2               HS		= 16
0038FA  2               VS		= 32
0038FA  2               MODE2		= 2
0038FA  2               MODE3		= 3
0038FA  2               MODE4		= 4
0038FA  2               MODE5		= 5
0038FA  2               MODEB		= $0B
0038FA  2               MODED		= $0D
0038FA  2               MODEE		= $0E
0038FA  2               MODEF		= $0F
0038FA  2               
0038FA  2               BLANK1		= $00
0038FA  2               BLANK2		= $10
0038FA  2               BLANK3		= $20
0038FA  2               BLANK4		= $30
0038FA  2               BLANK5		= $40
0038FA  2               BLANK6		= $50
0038FA  2               BLANK7		= $60
0038FA  2               BLANK8		= $70
0038FA  2               
0038FA  2               DLISTENDJUMP	= $41
0038FA  2               
0038FA  2               BITMAP_DLIST:
0038FA  2  70           	.byte BLANK8
0038FB  2  70           	.byte BLANK8
0038FC  2  70           	.byte BLANK8
0038FD  2               
0038FD  2  4F           	.byte LMS+MODEF
0038FE  2  00 E4        	.word ScreenAddr
003900  2  0F 0F 0F 0F  	.res 95,MODEF
003904  2  0F 0F 0F 0F  
003908  2  0F 0F 0F 0F  
00395F  2               
00395F  2  4F            	.byte LMS+MODEF
003960  2  00 FC        	.word $fc00
003962  2  0F 0F 0F 0F  	.res 95,MODEF
003966  2  0F 0F 0F 0F  
00396A  2  0F 0F 0F 0F  
0039C1  2               
0039C1  2  41           	.byte DLISTENDJUMP
0039C2  2  FA 38        	.word BITMAP_DLIST
0039C4  2               
0039C4  1               	.include "z80.asm"
0039C4  2               ;------------------------------------------------------
0039C4  2               ; z80.asm
0039C4  2               ; spectrum stuff
0039C4  2               ; adresses
0039C4  2               
0039C4  2               
0039C4  2               ; Contains seperatly 1 bit set
0039C4  2               
0039C4  2               _bitmem0	= $f8
0039C4  2               _bitmem1	= $f9
0039C4  2               _bitmem2	= $fa
0039C4  2               _bitmem3	= $fb
0039C4  2               _bitmem4	= $fc
0039C4  2               _bitmem5	= $fd
0039C4  2               _bitmem6	= $fe
0039C4  2               _bitmem7	= $ff
0039C4  2               
0039C4  2               ; constants
0039C4  2               _bitvalue0	= $01
0039C4  2               _bitvalue1	= $02
0039C4  2               _bitvalue2	= $04
0039C4  2               _bitvalue3	= $08
0039C4  2               _bitvalue4	= $10
0039C4  2               _bitvalue5	= $20
0039C4  2               _bitvalue6	= $40
0039C4  2               _bitvalue7	= $80
0039C4  2               
0039C4  2               _notbitvalue0	= $fe
0039C4  2               _notbitvalue1	= $fd
0039C4  2               _notbitvalue2	= $fb
0039C4  2               _notbitvalue3	= $f7
0039C4  2               _notbitvalue4	= $ef
0039C4  2               _notbitvalue5	= $df
0039C4  2               _notbitvalue6	= $bf
0039C4  2               _notbitvalue7	= $7f
0039C4  2               
0039C4  2               
0039C4  2               exx:
0039C4  2  A5 62        		lda z80_c
0039C6  2  A4 6E        		ldy z80_cp
0039C8  2  84 62        		sty z80_c
0039CA  2  85 6E        		sta z80_cp
0039CC  2  A5 63        		lda z80_b
0039CE  2  A4 6F        		ldy z80_bp
0039D0  2  84 63        		sty z80_b
0039D2  2  85 6F        		sta z80_bp
0039D4  2  A5 64        		lda z80_e
0039D6  2  A4 70        		ldy z80_ep
0039D8  2  84 64        		sty z80_e
0039DA  2  85 70        		sta z80_ep
0039DC  2  A5 65        		lda z80_d
0039DE  2  A4 71        		ldy z80_dp
0039E0  2  84 65        		sty z80_d
0039E2  2  85 71        		sta z80_dp
0039E4  2  A5 rr        		lda scraddr
0039E6  2  A4 72        		ldy z80_lp
0039E8  2  84 rr        		sty scraddr
0039EA  2  85 72        		sta z80_lp
0039EC  2  A5 rr        		lda scraddr+1
0039EE  2  A4 73        		ldy z80_hp
0039F0  2  84 rr        		sty scraddr+1
0039F2  2  85 73        		sta z80_hp
0039F4  2  60           		rts
0039F5  2               
0039F5  2               
0039F5  1               eind_asm:
0039F5  1               eop:					; End Of Program
0039F5  1               
0039F5  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(32000-eind_asm + start_asm))
0039F5  1               
