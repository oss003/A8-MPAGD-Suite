ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2000
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag   = 0 ;
000000r 2               pflag   = 0 ;
000000r 2               sflag   = 0 ;
000000r 2               dflag   = 0 ;
000000r 2               cflag   = 0 ;
000000r 2               oflag   = 0 ;
000000r 2               lflag   = 0 ;
000000r 2               crflag  = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               .if rflag
000057r 2               sprshft:     .res 1
000057r 2               .endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               .org asm_code-6
001FFA  1  FF FF        	.word $ffff
001FFC  1  00 20        	.word start_asm
001FFE  1  F5 3A        	.word eind_asm
002000  1               
002000  1               
002000  1               
002000  1               exec:
002000  1               start_asm:
002000  1               	.include "game.inc"
002000  2               .include "testclock.inc"
002000  3               ;--------------------------------------------------------------
002000  3               ; Arcade Game Designer.
002000  3               ; (C) 2008 Jonathan Cauldwell.
002000  3               ; ZX Spectrum Next Engine v0.7.
002000  3               ; Acorn Atom port by K.v.Oss 2018
002000  3               ;--------------------------------------------------------------
002000  3               
002000  3               ; Conditional compilation flags
002000  3               ; Code is installed if flag is set
002000  3               ; Flags are set in commandline assembly or by the compiler
002000  3               
002000  3               ; Flags set by AGD compiler
002000  3               ;	mflag  			; MENU + INV
002000  3               ;	pflag 			; particle engine
002000  3               ;	sflag 			; scrollytext
002000  3               ;	dflag 			; digging mode
002000  3               ;	cflag			; collectable blocks
002000  3               ;	oflag			; objects
002000  3               ;	lflag			; ladders
002000  3               ;
002000  3               ; Flags set manually
002000  3               ;	aflag			; adventure mode
002000  3               ;	bflag			; big sprites (16x24)
002000  3               ;	iflag			; invert mode
002000  3               
002000  3               .if mflag
002000  3               	.out "- MEN/INV enabled"
002000  3               .endif
002000  3               .if pflag
002000  3               	.out "- Particles enabled"
002000  3               .endif
002000  3               .if sflag
002000  3               	.out "- Scrolling enabled"
002000  3               .endif
002000  3               .if dflag
002000  3               	.out "- Digging enabled"
002000  3               .endif
002000  3               .if cflag
002000  3               	.out "- Collectable blocks enabled"
002000  3               .endif
002000  3               .if oflag
002000  3               	.out "- Objects enabled"
002000  3               .endif
002000  3               .if lflag
002000  3               	.out "- Ladders enabled"
002000  3               .endif
002000  3               .if aflag
002000  3               	.out "- Adventure mode enabled"
002000  3               .endif
002000  3               .if bflag
002000  3               	.out "- Big Sprites (16x24) enabled"
002000  3               .endif
002000  3               .if iflag
002000  3               	.out "- Invert mode enabled"
002000  3               .endif
002000  3               
002000  3               ; Global definitions ------------------------------------------------------------
002000  3               
002000  3               	FONT = font		; Font address
002000  3               
002000  3               	green	= $00		; Colour definition filters
002000  3               	yellow	= $55
002000  3               	blue	= $aa
002000  3               	red	= $ff
002000  3               
002000  3               ; Block characteristics.
002000  3               
002000  3               	PLATFM	= 1		; platform.
002000  3               	WALL	= PLATFM + 1	; solid wall.
002000  3               	LADDER	= WALL + 1	; ladder.
002000  3               	FODDER	= LADDER + 1	; fodder block.
002000  3               	DEADLY	= FODDER + 1	; deadly block.
002000  3               	CUSTOM	= DEADLY + 1	; custom block.
002000  3               	WATER	= CUSTOM + 1	; water block.
002000  3                       COLECT	= WATER + 1	; collectable block.
002000  3                       NUMTYP	= COLECT + 1	; number of types.
002000  3               
002000  3               ; Sprites.
002000  3               
002000  3               .if bflag
002000  3               	SPR_HGT	= 24		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 8		; number of sprites.
002000  3               .else				; 16x16 sprites
002000  3               	SPR_HGT = 16		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 12		; number of sprites.
002000  3               .endif
002000  3               
002000  3               	TABSIZ = 17		; size of each entry.
002000  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002000  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002000  3               	var_X  = 8		; new x coordinate of sprite.
002000  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002000  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002000  3               
002000  3               ; Particle engine.
002000  3               
002000  3               	NUMSHR = 55		; pieces of shrapnel.
002000  3               	SHRSIZ = 6		; bytes per particle.
002000  3               
002000  3               ; System constants
002000  3               
002000  3               	ScrSelAddr  = $b000	; Screen selection address
002000  3               	KeyRowAddr  = $b000	; PIA key matrix row
002000  3               	KeyColAddr  = $b001	; PIA key matrix column
002000  3               	SpeakerBit  = $b002	; Speaker bit
002000  3               	CmdReg      = $b400	; Command register AtoMMC
002000  3               	DatReg      = $b401	; Data register AtoMMC
002000  3               	Timer2_Low  = $b808	; Timer 2 low byte
002000  3               	Timer2_High = $b809	; Timer 2 high byte
002000  3               	ScreenAddr  = $e400	; Startaddress video RAM
002000  3               
002000  3               	MAP 	    = $dd00		; properties map buffer (3x256 bytes)
002000  3               	SCADTB_lb   = MAP+3*256		; screen address table lo-byte (256 bytes)
002000  3               	SCADTB_hb   = SCADTB_lb+256	; screen address table hi-byte (256 bytes)
002000  3               	SHRAPN      = SCADTB_hb+256	; shrapnel table (55x6 bytes)
002000  3               
002000  3               ; System calls
002000  3               
002000  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
002000  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
002000  3               	OSRDCH   = $fe94	; get key subroutine
002000  3                       READKEY  = $fe71	; scan key matrix subroutine
002000  3               	OSWRCH	 = $fff4	; write character
002000  3               
002000  3               
002000  3               .if iflag
002000  3               	TxtInvert   = $ff	; Invert byte for character printing
002000  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002000  3               .else
002000  3               	TxtInvert   = $00	; Invert byte for character printing
002000  3               	ScrFillByte = $00	; Screen fill byte for CLS
002000  3               .endif
002000  3               
002000  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002000  3               
002000  3               ;===============================================================
002000  3               ; Game starts here
002000  3               ;===============================================================
002000  3               
002000  3               ;.segment "CODE"
002000  3               
002000  3  20 91 38     	jsr systeminit
002003  3               
002003  3               ; Clear variables
002003  3               
002003  3               ;	lda #0
002003  3               ;	ldx #0
002003  3               ;clrloop:
002003  3               ;	sta 0,x
002003  3               ;	inx
002003  3               ;	bne clrloop
002003  3               
002003  3               gameloop:
002003  3  20 F6 20     	jsr game	 	; start the game.
002006  3  4C 03 20     	jmp gameloop		; Start again
002009  3               
002009  3               ; Definition of variables
002009  3               ; Make sure pointers are arranged in the same order as the data itself.
002009  3               
002009  3  93 34        msgptr:		.word msgdat	; messages
00200B  3  C1 34        blkptr:		.word chgfx	; block graphics.
00200D  3  C9 34        proptr:		.word bprop	; address of char properties.
00200F  3  CA 34        sptptr:		.word sprgfx	; sprite graphics
002011  3  4A 35        frmptr:		.word frmlst	; sprite frames.
002013  3  4E 35        scrptr:		.word scdat	; address of screens.
002015  3  5A 35        nmeptr:		.word nmedat	; enemy start positions.
002017  3  5F 35        objptr:		.word objdta	; object graphics
002019  3               
002019  3               ;TxtFilter:	.byte $ff
002019  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
00201D  3               
00201D  3               ; Don't change the order of these four.
00201D  3               ; Menu routine relies on winlft following wintop.
00201D  3               
00201D  3  01           wintop:		.byte WINDOWTOP	; top of window.
00201E  3  01           winlft:		.byte WINDOWLFT	; left edge.
00201F  3  16           winhgt:		.byte WINDOWHGT	; window height.
002020  3  1E           winwid:		.byte WINDOWWID	; window width.
002021  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002022  3               
002022  3               ; Variables start here.
002022  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002022  3               
002022  3  08           wntopx:		.byte (8 * WINDOWTOP)
002023  3  08           wnlftx:		.byte (8 * WINDOWLFT)
002024  3  A8           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
002025  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
002026  3               
002026  3               ; Assorted game routines which can go in contended memory.
002026  3               
002026  3               ;--------------------------------------------------------------
002026  3               ; Entry for inventory called by the INV command
002026  3               ;
002026  3               ; Input:
002026  3               ;  X   = message nr with objects seperated with ,
002026  3               ;
002026  3               ; Output:
002026  3               ;  OPT = selected objectnr of INV menu
002026  3               ;--------------------------------------------------------------
002026  3               
002026  3               .if mflag
002026  3               minve:
002026  3               	lda #<(invdis)		; routine address.
002026  3               	sta mod0+1		; set up menu routine.
002026  3               	sta mod2+1		; set up count routine.
002026  3               	lda #>(invdis)
002026  3               	sta mod0+2
002026  3               	sta mod2+2
002026  3               	lda #<(fopt)		; find option from available objects.
002026  3               	sta mod1+1		; set up routine.
002026  3               	lda #>(fopt)
002026  3               	sta mod1+1+1
002026  3               	jmp dbox		; do menu routine.
002026  3               
002026  3               ;--------------------------------------------------------------
002026  3               ; Entry for menu called by the MENU command
002026  3               ;
002026  3               ; Input:
002026  3               ;  X   = message nr with menu items seperated with ,
002026  3               ;
002026  3               ; Output:
002026  3               ;  OPT = selected line nr of MENU menu
002026  3               ;--------------------------------------------------------------
002026  3               
002026  3               mmenu:
002026  3               	lda #<(always)		; routine address.
002026  3               	sta mod0+1		; set up routine.
002026  3               	sta mod2+1		; set up count routine.
002026  3               	lda #>(always)
002026  3               	sta mod0+2
002026  3               	sta mod2+2
002026  3               
002026  3               	lda #<(fstd)		; standard option selection.
002026  3               	sta mod1+1		; set up routine.
002026  3               	lda #>(fstd)
002026  3               	sta mod1+2
002026  3               
002026  3               ; Drop through into box routine.
002026  3               
002026  3               ;--------------------------------------------------------------
002026  3               ; Work out size of box for message or menu.
002026  3               ;--------------------------------------------------------------
002026  3               
002026  3               dbox:
002026  3               	lda #<(msgdat)		; pointer to messages.
002026  3               	sta z80_l
002026  3               	lda #>(msgdat)
002026  3               	sta z80_h
002026  3               
002026  3               	jsr getwrd		; get message number.
002026  3               
002026  3               	lda z80_h		; store pointer to message.
002026  3               	sta TmpAddr
002026  3               	lda z80_l
002026  3               	sta TmpAddr+1
002026  3               
002026  3               	lda #1			; height.
002026  3               	sta z80_d
002026  3               	lda #0			; start at object zero.
002026  3               	sta combyt		; store number of object in combyt.
002026  3               	sta z80_e		; maximum width.
002026  3               dbox5:
002026  3               	lda #0			; this line"s width.
002026  3               	sta z80_b
002026  3               mod2:
002026  3               	jsr always		; item in player"s possession?
002026  3               	cmp #255
002026  3               	bne dbox6		; not in inventory, skip this line.
002026  3               	inc z80_d		; add to tally.
002026  3               dbox6:
002026  3               	ldy #0			; get character.
002026  3               	lda (z80_hl),y
002026  3               	sta z80_a
002026  3               	inc z80_l		; next character.
002026  3               	bne :+
002026  3               	inc z80_h
002026  3               :
002026  3               	lda z80_a		; reached end of line?
002026  3               	cmp #','
002026  3               	beq dbox3		; yes.
002026  3               	cmp #13
002026  3               	beq dbox3		; yes.
002026  3               	inc z80_b		; add to this line"s width.
002026  3               	lda z80_a
002026  3               	bmi dbox4		; end of message? yes, end count.
002026  3               	jmp dbox6		; repeat until we find the end.
002026  3               dbox3:
002026  3               	lda z80_e		; maximum line width.
002026  3               	cmp z80_b		; have we exceeded longest so far?
002026  3               	bpl dbox5		; no, carry on looking.
002026  3               	lda z80_b		; make this the widest so far.
002026  3               	sta z80_e
002026  3               	jmp dbox5		; keep looking.
002026  3               dbox4:
002026  3               	lda z80_e		; maximum line width.
002026  3               	cmp z80_b		; have we exceeded longest so far?
002026  3               	bpl dbox8		; no, carry on looking.
002026  3               	lda z80_b		; final line is the longest so far.
002026  3               	sta z80_e
002026  3               dbox8:
002026  3               	dec z80_d		; decrement items found.
002026  3               	bne :+			; total was zero.
002026  3               	lda #255
002026  3               	sta varopt
002026  3               	jmp dbox15
002026  3               :
002026  3               	lda z80_e		; longest line.
002026  3               	bne :+			; was it zero?
002026  3               	jmp dbox15		; total was zero.
002026  3               :
002026  3               	sta bwid		; set up size.
002026  3               	lda z80_d
002026  3               	sta blen
002026  3               
002026  3               ;--------------------------------------------------------------
002026  3               ; That's set up our box size.
002026  3               ;--------------------------------------------------------------
002026  3               
002026  3               	lda winhgt		; window height in characters.
002026  3               	sec
002026  3               	sbc z80_d		; subtract height of box.
002026  3               	lsr a			; divide by 2.
002026  3               	clc
002026  3               	adc wintop		; add top edge of window.
002026  3               	sta btop		; set up box top.
002026  3               
002026  3               	lda winwid		; window width in characters.
002026  3               	sec
002026  3               	sbc z80_e		; subtract box width.
002026  3               	lsr a			; divide by 2.
002026  3               	clc
002026  3               	adc winlft		; add left edge of window.
002026  3               	sta blft		; box left.
002026  3               
002026  3               	lda #<(FONT-256)		; font.
002026  3               	sta grbase		; set up for text display.
002026  3               	lda #>(FONT-256)
002026  3               	sta grbase+1
002026  3               
002026  3               	lda TmpAddr+1		; restore message pointer.
002026  3               	sta z80_l
002026  3               	lda TmpAddr
002026  3               	sta z80_h
002026  3               
002026  3               	lda btop		; box top.
002026  3               	sta dispy		; set display coordinate.
002026  3               	lda #0			; start at object zero.
002026  3               	sta combyt		; store number of object in combyt.
002026  3               dbox2:
002026  3               	lda combyt		; get object number.
002026  3               	sta z80_a
002026  3               mod0:
002026  3               	jsr always		; check inventory for display.
002026  3               	cmp #255
002026  3               	beq :+
002026  3               	jmp dbox13		; not in inventory, skip this line.
002026  3               :
002026  3               	lda blft		; box left.
002026  3               	sta dispx		; set left display position.
002026  3               	lda bwid		; box width.
002026  3               	sta z80_b		; store width.
002026  3               dbox0:
002026  3               	ldy #0
002026  3               	lda (z80_hl),y		; get character.
002026  3               	cmp #','		; end of line?
002026  3               	beq dbox1		; yes, next one.
002026  3               	cmp #13			; end of line?
002026  3               	beq dbox1		; yes, next one.
002026  3               
002026  3               	cmp #141			; end of line?
002026  3               	bne :+
002026  3               	dec bwid
002026  3               	jmp dbox7		; yes, next one.
002026  3               :
002026  3               	dec z80_b		; one less to display.
002026  3               	and #127		; remove terminator.
002026  3               
002026  3               	jsr pchr		; display on screen.
002026  3               
002026  3               	ldy #0
002026  3               	lda (z80_hl),y		; get character.
002026  3               	sta z80_a
002026  3               	inc z80_l		; next character.
002026  3               	bne :+
002026  3               	inc z80_h
002026  3               :
002026  3               	lda z80_a
002026  3               	cmp #128		; end of message?
002026  3               	bmi :+
002026  3               	jmp dbox7		; yes, job done.
002026  3               :
002026  3               	lda z80_b		; chars remaining.
002026  3               	beq :+			; are any left?
002026  3               	jmp dbox0		; yes, continue.
002026  3               :
002026  3               ;---------------------------------------------------
002026  3               ; Reached limit of characters per line.
002026  3               ;---------------------------------------------------
002026  3               
002026  3               dbox9:
002026  3               	ldy #0
002026  3               	lda (z80_hl),y		; get character.
002026  3               	inc z80_l		; next one.
002026  3               	bne :+
002026  3               	inc z80_h
002026  3               :
002026  3               	cmp #','		; another line?
002026  3               	beq dbox10		; yes, do next line.
002026  3               	cmp #13			; another line?
002026  3               	beq dbox10		; yes, do next line.
002026  3               	cmp #128		; end of message?
002026  3               	bcs :+
002026  3               	jmp dbox11		; yes, finish message.
002026  3               :
002026  3               	jmp dbox9
002026  3               
002026  3               ;---------------------------------------------------
002026  3               ; Fill box to end of line.
002026  3               ;---------------------------------------------------
002026  3               
002026  3               dboxf:
002026  3               	lda #32			; space character.
002026  3               	jsr pchr		; display character.
002026  3               	dec z80_b
002026  3               	beq :+
002026  3               	jmp dboxf		; repeat for remaining chars on line.
002026  3               :
002026  3               	rts
002026  3               dbox1:
002026  3               	inc z80_l		; skip character.
002026  3               	bne :+
002026  3               	inc z80_h
002026  3               :
002026  3               	jsr dboxf		; fill box out to right side.
002026  3               dbox10:
002026  3               	inc dispy		; y coordinate down a line next position.
002026  3               	jmp dbox2		; next line.
002026  3               dbox7:
002026  3               	lda z80_b		; chars remaining.
002026  3               	bne :+			; are any left?
002026  3               	jmp dbox11		; no, nothing to draw.
002026  3               :
002026  3               	jsr dboxf		; fill message to line.
002026  3               
002026  3               ;------------------------------------------------------
002026  3               ; Drawn the box menu, now select option.
002026  3               ;------------------------------------------------------
002026  3               
002026  3               dbox11:
002026  3               	lda btop		; box top.
002026  3               	sta dispy		; set bar position.
002026  3               dbox14:
002026  3               	jsr joykey		; get controls.
002026  3               	cmp #$7f		; anything pressed?
002026  3               	bne dbox14		; yes, debounce it.
002026  3               	jsr dbar		; draw bar.
002026  3               dbox12:
002026  3               	jsr joykey		; get controls.
002026  3               	cmp #$7f		; anything pressed?
002026  3               	beq dbox12		; no, nothing.
002026  3               	and #16			; fire button pressed?
002026  3               	bne :+
002026  3               mod1:
002026  3               	jmp fstd		; yes, job done.
002026  3               :
002026  3               	jsr dbar		; delete bar.
002026  3               
002026  3               	lda joyval		; joystick reading.
002026  3               	and #8			; going up?
002026  3               	beq dboxu		; yes, go up.
002026  3               
002026  3               	ldx dispy		; vertical position of bar.
002026  3               	inx			; look down.
002026  3               	txa
002026  3               	sec
002026  3               	sbc btop		; find distance from top.
002026  3               	cmp blen		; top of box.
002026  3               	bne :+
002026  3               	jmp dbox14		; yes, go no further.
002026  3               :
002026  3               	inc dispy		; move bar.
002026  3               	jmp dbox14		; continue.
002026  3               dboxu:
002026  3               	lda dispy		; vertical position of bar.
002026  3               	cmp btop		; are we at the top?
002026  3               	bne :+
002026  3               	jmp dbox14		; yes, go no further.
002026  3               :
002026  3               	dec dispy		; move bar.
002026  3               	jmp dbox14		; continue.
002026  3               fstd:
002026  3               	lda dispy		; bar position.
002026  3               	sec
002026  3               	sbc btop		; find selected option.
002026  3               	sta varopt		; store the option.
002026  3               	jmp redraw		; redraw the screen.
002026  3               
002026  3               ;------------------------------------------------------
002026  3               ; Option not available.  Skip this line.
002026  3               ;------------------------------------------------------
002026  3               
002026  3               dbox13:
002026  3               	ldy #0
002026  3               	lda (z80_hl),y		; get character.
002026  3               	inc z80_l		; next one.
002026  3               	bne :+
002026  3               	inc z80_h
002026  3               :
002026  3               	cmp #','		; another line?
002026  3               	bne :+
002026  3               	jmp dbox2		; yes, do next line.
002026  3               :
002026  3               	cmp #13			; another line?
002026  3               	bne :+
002026  3               	jmp dbox2		; yes, do next line.
002026  3               :
002026  3               
002026  3               	bpl :+			; end of message?
002026  3               	jmp dbox11		; yes, finish message.
002026  3               :
002026  3               	jmp dbox13
002026  3               dbox15:
002026  3               	lda TmpAddr		; pop message pointer from the stack.
002026  3               	sta z80_h
002026  3               	lda TmpAddr+1
002026  3               	sta z80_l
002026  3               	rts
002026  3               
002026  3               ;------------------------------------------------------
002026  3               ; Invert bar
002026  3               ;------------------------------------------------------
002026  3               
002026  3               dbar:
002026  3               	lda blft		; box left.
002026  3               	sta dispx		; set display coordinate.
002026  3               	jsr gprad		; get printing address.
002026  3               
002026  3               	lda bwid		; box width.
002026  3               	sta z80_c		; loop counter in c.
002026  3               	lda z80_h
002026  3               	sta z80_d		; store screen address high byte.
002026  3               dbar1:
002026  3               	ldx #7			; pixel height in b.
002026  3               dbar0:
002026  3               	ldy scrtab,x
002026  3               	lda (scraddr),y		; get screen byte.
002026  3               	eor #255		; reverse all bits.
002026  3               	sta (scraddr),y		; write back to screen.
002026  3               	dex			; next line down.
002026  3               	bpl dbar0		; draw rest of character.
002026  3               
002026  3               	inc scraddr		; one char right.
002026  3               	dec z80_c		; decrement character counter.
002026  3               	bne dbar1		; repeat for whole line.
002026  3               	rts
002026  3               
002026  3               ;------------------------------------------------------
002026  3               ; Point to object
002026  3               ;
002026  3               ; Input:
002026  3               ;  combyt
002026  3               ;
002026  3               ; Output:
002026  3               ;  A = object number, A=255 if already in possession
002026  3               ;------------------------------------------------------
002026  3               
002026  3               invdis:
002026  3               	lda z80_l		; store message text pointer.
002026  3               	pha
002026  3               	lda z80_h
002026  3               	pha
002026  3               	lda combyt		; object number.
002026  3               	inc combyt		; ready for next one.
002026  3               	jsr gotob		; check if we have object.
002026  3               	tay
002026  3               	pla
002026  3               	sta z80_h
002026  3               	pla
002026  3               	sta z80_l
002026  3               	tya
002026  3               	rts
002026  3               
002026  3               ;------------------------------------------------------
002026  3               ; Find option selected.
002026  3               ;
002026  3               ; Input:
002026  3               ;  -
002026  3               ;
002026  3               ; Output:
002026  3               ;  OPT = selected object
002026  3               ;------------------------------------------------------
002026  3               
002026  3               fopt:
002026  3               	lda dispy
002026  3               	sec
002026  3               	sbc btop		; find selected option.
002026  3               	sta tmp+2		; option selected in b register.
002026  3               	inc tmp+2
002026  3               
002026  3               	lda #0			; set to first item.
002026  3               	sta combyt		; object number.
002026  3               fopt0:
002026  3               	jsr fobj		; find next object in inventory.
002026  3               	dec tmp+2
002026  3               	bne fopt0		; repeat for relevant steps down the list.
002026  3               
002026  3               	lda combyt		; get option.
002026  3               	sta varopt		; store the option.
002026  3               	dec varopt		; one less, due to where we increment combyt.
002026  3               	jmp redraw		; redraw the screen.
002026  3               fobj:
002026  3               	ldy combyt		; object number.
002026  3               	inc combyt		; ready for next item.
002026  3               	tya
002026  3               	jsr gotob		; do we have this item?
002026  3               	cmp #255
002026  3               	bne :+
002026  3               	rts
002026  3               :
002026  3               	jmp fobj		; yes, it's on the list.
002026  3               
002026  3               ;bwid:	.byte 0              ; box/menu width.
002026  3               ;blen:	.byte 0              ; box/menu height.
002026  3               ;btop:	.byte 0              ; box coordinates.
002026  3               ;blft:	.byte 0
002026  3               .endif
002026  3               
002026  3               ;----------------------------------------------------
002026  3               ; Wait for keypress.
002026  3               ;----------------------------------------------------
002026  3               
002026  3               prskey:
002026  3  98           	tya
002027  3  48           	pha
002028  3               prsloop:
002028  3  20 5A 20     	jsr vsync
00202B  3  20 71 FE     	jsr READKEY
00202E  3  C0 FF        	cpy #255
002030  3  F0 F6        	beq prsloop		; wait until key pressed
002032  3  20 AF 29     	jsr joykey
002035  3  68           	pla
002036  3  A8           	tay
002037  3  60           	rts
002038  3               
002038  3               ;----------------------------------------------------
002038  3               ; Delay routine 1/50 sec
002038  3               ;
002038  3               ; Wait 1/60 sec = 16666 usec
002038  3               ; Wait 208 x 16 =  3328 usec
002038  3               ;                 19994 usec
002038  3               ; rts           =     6 usec
002038  3               ; Total         = 20000 usec
002038  3               ;----------------------------------------------------
002038  3               
002038  3               delay:
002038  3  85 rr        	sta xtmp
00203A  3               del_loop:
00203A  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
00203D  3               
00203D  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
00203F  3               delay1:
00203F  3  61 80        	adc ($80,x)		;	 6 usec
002041  3  61 80        	adc ($80,x)		;	 6 usec
002043  3  88           	dey			;	 2 usec
002044  3  D0 F9        	bne delay1		;	 2 usec
002046  3  EA           	nop			; 2 usec
002047  3  EA           	nop			; 2 usec
002048  3               				; tot: 20000 usec
002048  3  C6 rr        	dec xtmp
00204A  3  D0 EE        	bne del_loop
00204C  3  60           	rts
00204D  3               
00204D  3               ;----------------------------------------------------
00204D  3               ; Clear sprite table.
00204D  3               ;
00204D  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00204D  3               ;----------------------------------------------------
00204D  3               
00204D  3               xspr:
00204D  3  A9 FF        	lda #255		; clear byte.
00204F  3  A2 00        	ldx #0			; length of table.
002051  3               xspr0:
002051  3  9D 08 33     	sta sprtab,x		; sprite table.
002054  3  E8           	inx			; move to next byte.
002055  3  E0 CC        	cpx #SPRBUF
002057  3  D0 F8        	bne xspr0		; repeat for rest of table.
002059  3  60           	rts
00205A  3               
00205A  3               ;-------------------------------------------------------------
00205A  3               ; Initialise all objects.
00205A  3               ;
00205A  3               ; Reset current room,y,x to start room,y,x for all objects
00205A  3               ;-------------------------------------------------------------
00205A  3               
00205A  3               .if oflag
00205A  3               iniob:
00205A  3               	lda #<objdta 		; objects table.
00205A  3               	sta z80_x
00205A  3               	lda #>objdta
00205A  3               	sta z80_i
00205A  3               
00205A  3               	ldx numob 		; number of objects in the game.
00205A  3               iniob0:
00205A  3               	ldy #35
00205A  3               	lda (z80_ix),y 		; start screen.
00205A  3               	ldy #32
00205A  3               	sta (z80_ix),y 		; set start screen.
00205A  3               
00205A  3               	ldy #36
00205A  3               	lda (z80_ix),y 		; find start y.
00205A  3               	ldy #33
00205A  3               	sta (z80_ix),y 		; set start y.
00205A  3               
00205A  3               	ldy #37
00205A  3               	lda (z80_ix),y 		; get initial x.
00205A  3               	ldy #34
00205A  3               	sta (z80_ix),y 		; set x coord.
00205A  3               
00205A  3               	clc 			; point to next object.
00205A  3               	lda z80_x
00205A  3               	adc #38			; distance between objects.
00205A  3               	sta z80_x
00205A  3               	bcc :+
00205A  3               	inc z80_i
00205A  3               :
00205A  3               	dex 			; repeat.
00205A  3               	bne iniob0
00205A  3               
00205A  3               	rts
00205A  3               .endif
00205A  3               
00205A  3               ;-------------------------------------------------------------
00205A  3               ; Screen synchronisation.
00205A  3               ;
00205A  3               ;  - read joystick/keyboard
00205A  3               ;  - handle sound
00205A  3               ;  - sync framerate with clock
00205A  3               ;  - handle shrapnel every even frame
00205A  3               ;-------------------------------------------------------------
00205A  3               
00205A  3               vsync:
00205A  3  60             rts
00205B  3  48           	pha
00205C  3  98           	tya
00205D  3  48           	pha
00205E  3  8A           	txa
00205F  3  48           	pha
002060  3  20 AF 29     	jsr joykey		; read joystick/keyboard.
002063  3               vsync1:
002063  3  AD 09 B8     	lda Timer2_High		; sync framerate with clock
002066  3  C9 FF        	cmp #$ff
002068  3  D0 F9        	bne vsync1
00206A  3  A9 C3        	lda #>50000
00206C  3  8D 09 B8     	sta Timer2_High
00206F  3  A9 50        	lda #<50000
002071  3  8D 08 B8     	sta Timer2_Low
002074  3               
002074  3  A5 rr        	lda clock
002076  3  29 01        	and #1
002078  3  D0 03        	bne:+
00207A  3  20 F5 20     	jsr proshr		; handle shrapnel every even frame
00207D  3               :
00207D  3  AD 9B 20     	lda sndtyp
002080  3  F0 13        	beq sndskip
002082  3               sndloop:
002082  3  AD 02 B0     	lda SpeakerBit		; handle sound
002085  3  AC 9B 20     	ldy sndtyp
002088  3               sndwait:
002088  3  88           	dey
002089  3  D0 FD        	bne sndwait
00208B  3  49 04        	eor #4
00208D  3  8D 02 B0     	sta SpeakerBit
002090  3  CE 9B 20     	dec sndtyp
002093  3  D0 ED        	bne sndloop
002095  3               sndskip:
002095  3  68           	pla
002096  3  AA           	tax
002097  3  68           	pla
002098  3  A8           	tay
002099  3  68           	pla
00209A  3  60           	rts
00209B  3               
00209B  3  00           sndtyp:	.byte 0
00209C  3               
00209C  3               ;-----------------------------------------------
00209C  3               ; Redraw the screen.
00209C  3               ;
00209C  3               ; Remove old copy of all sprites for redraw.
00209C  3               ;-----------------------------------------------
00209C  3               
00209C  3               redraw:
00209C  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
00209E  3  48           	pha
00209F  3  A5 68        	lda z80_x
0020A1  3  48           	pha
0020A2  3               
0020A2  3  20 11 26     	jsr droom		; show screen layout.
0020A5  3               .if oflag
0020A5  3               	jsr shwob		; draw objects.
0020A5  3               .endif
0020A5  3               numsp0:
0020A5  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0020A7  3  85 rr        	sta tmp
0020A9  3               
0020A9  3  A9 08        	lda #<sprtab		; sprite table.
0020AB  3  85 68        	sta z80_x
0020AD  3  A9 33        	lda #>sprtab
0020AF  3  85 69        	sta z80_i
0020B1  3               redrw0:
0020B1  3  A0 00        	ldy #0
0020B3  3  B1 68        	lda (z80_ix),y		; old sprite type.
0020B5  3  C9 FF        	cmp #255		; is it enabled?
0020B7  3  F0 0B        	beq redrw1 		; no, find next one.
0020B9  3               
0020B9  3  A0 03        	ldy #3
0020BB  3  B1 68        	lda (z80_ix),y 		; sprite y.
0020BD  3  C9 B1        	cmp #177		; beyond maximum?
0020BF  3  B0 03        	bcs redrw1		; yes, nothing to draw.
0020C1  3               
0020C1  3  20 D1 2D     	jsr sspria		; show single sprite.
0020C4  3               redrw1:
0020C4  3  18           	clc			; next sprite.
0020C5  3  A5 68        	lda z80_x
0020C7  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
0020C9  3  85 68        	sta z80_x
0020CB  3  90 02        	bcc :+
0020CD  3  E6 69        	inc z80_i
0020CF  3               :
0020CF  3  C6 rr        	dec tmp			; repeat for remaining sprites.
0020D1  3  D0 DE        	bne redrw0
0020D3  3               rpblc1:
0020D3  3               ;	jsr dshrp		; redraw shrapnel.
0020D3  3               
0020D3  3               .if aflag
0020D3  3               	jsr rbloc		; draw blocks for this screen
0020D3  3               .endif
0020D3  3  68           	pla			; retrieve sprite pointer.
0020D4  3  85 68        	sta z80_x
0020D6  3  68           	pla
0020D7  3  85 69        	sta z80_i
0020D9  3               
0020D9  3  60           	rts
0020DA  3               
0020DA  3               ;----------------------------------------------------------------------
0020DA  3               ; Clear screen routine.
0020DA  3               ;
0020DA  3               ; Fill screenmem $e400-$fbff with ScrFillByte
0020DA  3               ;----------------------------------------------------------------------
0020DA  3               
0020DA  3               cls:
0020DA  3  A9 E4        	lda #>ScreenAddr		; screen address.
0020DC  3  8D E5 20     	sta clsloop+2
0020DF  3  A9 00        	lda #ScrFillByte
0020E1  3               .if iflag
0020E1  3               	eor #$ff
0020E1  3               .endif
0020E1  3  A0 00        	ldy #0
0020E3  3               clsloop:
0020E3  3  99 00 E4     	sta ScreenAddr,y
0020E6  3  C8           	iny
0020E7  3  D0 FA        	bne clsloop
0020E9  3  EE E5 20     	inc clsloop+2
0020EC  3  AE E5 20     	ldx clsloop+2
0020EF  3  E0 FC        	cpx #>(ScreenAddr+$1800)
0020F1  3  D0 F0        	bne clsloop
0020F3  3  60           	rts
0020F4  3               
0020F4  3               ;----------------------------------------------------------------------
0020F4  3               ; Atomic palette is static
0020F4  3               ;----------------------------------------------------------------------
0020F4  3               
0020F4  3               setpal:
0020F4  3  60           	rts
0020F5  3               
0020F5  3               ;----------------------------------------------------------------------
0020F5  3               ; FODDER check
0020F5  3               ;----------------------------------------------------------------------
0020F5  3               
0020F5  3               .if pflag .or dflag
0020F5  3               fdchk:
0020F5  3               	cmp #FODDER 		; is it fodder?
0020F5  3               	beq :+
0020F5  3               	rts 			; no.
0020F5  3               :
0020F5  3               	lda #0			; wipe fodder in MAP
0020F5  3               	ldy #0
0020F5  3               	sta (bufaddr),y 	; rewrite block type.
0020F5  3               
0020F5  3               	lda dispx		; x=x/8
0020F5  3               	pha
0020F5  3               	lsr a
0020F5  3               	lsr a
0020F5  3               	lsr a
0020F5  3               	sta dispx
0020F5  3               
0020F5  3               	lda dispy		; y=y/8
0020F5  3               	pha
0020F5  3               	lsr a
0020F5  3               	lsr a
0020F5  3               	lsr a
0020F5  3               	sta dispy
0020F5  3               
0020F5  3               	lda #0 			; block to write.
0020F5  3               	jsr pattr 		; write block.
0020F5  3               
0020F5  3               	pla
0020F5  3               	sta dispy
0020F5  3               	pla
0020F5  3               	sta dispx
0020F5  3               	rts
0020F5  3               .endif
0020F5  3               
0020F5  3               ;----------------------------------------------------
0020F5  3               ; Scrolly text and puzzle variables.
0020F5  3               ;----------------------------------------------------
0020F5  3               
0020F5  3               .if sflag
0020F5  3               txtbit:	.byte 128		; bit to write.
0020F5  3               txtwid:	.byte 16		; width of ticker message.
0020F5  3               txtpos:	.word msgdat
0020F5  3               txtini:	.word msgdat
0020F5  3               txtscr:	.word ScreenAddr
0020F5  3               .endif
0020F5  3               
0020F5  3               ;----------------------------------------------------
0020F5  3               ; Specialist routines.
0020F5  3               ; Process shrapnel.
0020F5  3               ;----------------------------------------------------
0020F5  3               proshr:
0020F5  3               .if pflag
0020F5  3               	lda #<SHRAPN		; table.
0020F5  3               	sta z80_x
0020F5  3               	lda #>SHRAPN
0020F5  3               	sta z80_i
0020F5  3               
0020F5  3               	lda #NUMSHR		; shrapnel pieces to process.
0020F5  3               	sta shrctr
0020F5  3               prosh0:
0020F5  3               	ldy #0
0020F5  3               	lda (z80_ix),y		; on/off marker.
0020F5  3               	asl a
0020F5  3               proshx:
0020F5  3               	bcs :+
0020F5  3               	jsr prosh1 		; on, so process it.
0020F5  3               :
0020F5  3               	clc
0020F5  3               	lda z80_x
0020F5  3               	adc #SHRSIZ
0020F5  3               	sta z80_x
0020F5  3               	bcc :+
0020F5  3               	inc z80_i
0020F5  3               :
0020F5  3               	dec shrctr		; round again.
0020F5  3               	bne prosh0
0020F5  3               .endif
0020F5  3               .if sflag
0020F5  3               	jsr scrly
0020F5  3               .endif
0020F5  3  60           	rts
0020F6  3               
0020F6  3               .if pflag
0020F6  3               ;shrctr:	.byte 0
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Proces shrapnel piece
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               prosh1:
0020F6  3               	jsr plot 		; delete the pixel.
0020F6  3               
0020F6  3               	lda #<shrptr		; shrapnel routine pointers.
0020F6  3               	sta z80_l
0020F6  3               	lda #>shrptr
0020F6  3               	sta z80_h
0020F6  3               
0020F6  3               	ldy #0
0020F6  3               	lda (z80_ix),y		; restore shrapnel type.
0020F6  3               	jsr prosh2 		; run the routine.
0020F6  3               	jsr chkxy		; check x and y are good before we redisplay.
0020F6  3               
0020F6  3               	lda #<SHRSIZ 		; distance to next.
0020F6  3               	sta z80_e
0020F6  3               	lda #>SHRSIZ
0020F6  3               	sta z80_d
0020F6  3               	rts
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Run the routine
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               prosh2:
0020F6  3               	asl a 			; 2 bytes per address.
0020F6  3               	tay
0020F6  3               	lda shrptr,y
0020F6  3               	sta z80_l
0020F6  3               	lda shrptr+1,y 		; fetch high byte from table.
0020F6  3               	sta z80_h
0020F6  3               	jmp (z80_hl) 		; jump to routine.
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Paricle routine table
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               shrptr:	.word laser		; laser.
0020F6  3               	.word trail		; vapour trail.
0020F6  3               	.word shrap		; shrapnel from explosion.
0020F6  3               	.word dotl		; horizontal starfield left.
0020F6  3               	.word dotr		; horizontal starfield right.
0020F6  3               	.word dotu		; vertical starfield up.
0020F6  3               	.word dotd		; vertical starfield down.
0020F6  3               	.word ptcusr		; user particle.
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Explosion shrapnel.
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               shrap:
0020F6  3               	ldy #1
0020F6  3               	lda (z80_ix),y 		; get the angle.
0020F6  3               	clc
0020F6  3               	adc #<shrsin		; shrapnel sine table.
0020F6  3               	sta z80_l
0020F6  3               	lda #>shrsin
0020F6  3               	adc #0
0020F6  3               	sta z80_h
0020F6  3               
0020F6  3               	ldy #0
0020F6  3               	lda (z80_hl),y 		; fetch value from table.
0020F6  3               	sta z80_e
0020F6  3               	inc z80_l 		; next byte of table.
0020F6  3               	bne :+
0020F6  3               	inc z80_h
0020F6  3               :
0020F6  3               	ldy #0
0020F6  3               	lda (z80_hl),y		; fetch value from table.
0020F6  3               	sta z80_d
0020F6  3               	inc z80_l		; next byte of table.
0020F6  3               	bne :+
0020F6  3               	inc z80_h
0020F6  3               :
0020F6  3               	ldy #0
0020F6  3               	lda (z80_hl),y 		; fetch value from table.
0020F6  3               	sta z80_c
0020F6  3               	inc z80_l 		; next byte of table.
0020F6  3               	bne :+
0020F6  3               	inc z80_h
0020F6  3               :
0020F6  3               	ldy #0
0020F6  3               	lda (z80_hl),y 		; fetch value from table.
0020F6  3               	sta z80_b
0020F6  3               
0020F6  3               	ldy #2
0020F6  3               	lda (z80_ix),y 		; x coordinate in hl.
0020F6  3               	clc
0020F6  3               	adc z80_e		; add sine lb
0020F6  3               	sta (z80_ix),y		; store new coordinate lb.
0020F6  3               	ldy #3
0020F6  3               	lda (z80_ix),y
0020F6  3               	adc z80_d		; add sine hb
0020F6  3               	sta (z80_ix),y		; store new coordinate hb.
0020F6  3               
0020F6  3               	ldy #4
0020F6  3               	lda (z80_ix),y	 	; y coordinate in hl.
0020F6  3               	clc
0020F6  3               	adc z80_c		; add cosine lb
0020F6  3               	sta (z80_ix),y		; store new coordinate lb.
0020F6  3               	ldy #5
0020F6  3               	lda (z80_ix),y
0020F6  3               	adc z80_b		; add cosine lb
0020F6  3               	sta (z80_ix),y		; store new coordinate hb.
0020F6  3               
0020F6  3               	rts
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Move dots
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               dotl:
0020F6  3               	ldy #5
0020F6  3               	lda (z80_ix),y
0020F6  3               	sec
0020F6  3               	sbc #1		 	; move left.
0020F6  3               	sta (z80_ix),y
0020F6  3               	rts
0020F6  3               dotr:
0020F6  3               	ldy #5
0020F6  3               	lda (z80_ix),y
0020F6  3               	clc
0020F6  3               	adc #1		 	; move left.
0020F6  3               	sta (z80_ix),y
0020F6  3               	rts
0020F6  3               dotu:
0020F6  3               	ldy #3
0020F6  3               	lda (z80_ix),y
0020F6  3               	sec
0020F6  3               	sbc #1		 	; move up.
0020F6  3               	sta (z80_ix),y
0020F6  3               	rts
0020F6  3               dotd:
0020F6  3               	ldy #3
0020F6  3               	lda (z80_ix),y
0020F6  3               	clc
0020F6  3               	adc #1			; move down.
0020F6  3               	sta (z80_ix),y
0020F6  3               	rts
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Check if coordinates are ok before redrawing at new position.
0020F6  3               ;
0020F6  3               ; left:   X>L		X=L	Ok
0020F6  3               ; right:  R+15>X	X=R	Ok
0020F6  3               ; top:    Y>T		Y=T	Ok
0020F6  3               ; bottom: B+15>Y	Y=B	Ok
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               chkxy:
0020F6  3               
0020F6  3               ; top:    Y>T		Y=T	Ok
0020F6  3               
0020F6  3               	ldy #3
0020F6  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0020F6  3               	cmp wntopx		; window top.
0020F6  3               	bcs :+			; compare with top window limit.
0020F6  3               	jmp kilshr		; out of window, kill shrapnel.
0020F6  3               :
0020F6  3               ; left:   X>L		X=L	Ok
0020F6  3               
0020F6  3               	ldy #5
0020F6  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0020F6  3               	cmp wnlftx		; left edge.
0020F6  3               	bcs :+			; compare with left window limit.
0020F6  3               	jmp kilshr		; out of window, kill shrapnel.
0020F6  3               :
0020F6  3               ; bottom: B+15>Y	Y=B	Ok
0020F6  3               
0020F6  3               	lda wnbotx		; point to bottom.
0020F6  3               	clc
0020F6  3               	adc #15
0020F6  3               	ldy #3
0020F6  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0020F6  3               	bcs :+			; compare with shrapnel x coordinate.
0020F6  3               	jmp kilshr		; off screen, kill shrapnel..
0020F6  3               :
0020F6  3               ; right:  R+15>X	X=R	Ok
0020F6  3               
0020F6  3               	lda wnrgtx		; point to right edge.
0020F6  3               	clc
0020F6  3               	adc #15
0020F6  3               	ldy #5
0020F6  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0020F6  3               	bcs :+			; compare with window limit.
0020F6  3               	jmp kilshr		; off screen, kill shrapnel.
0020F6  3               :
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Drop through.
0020F6  3               ; Display shrapnel.
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               plot:
0020F6  3               	ldy #3
0020F6  3               	lda (z80_ix),y		; y integer.
0020F6  3               	sta dispy	 	; workspace coordinates.
0020F6  3               	ldy #5
0020F6  3               	lda (z80_ix),y	 	; x integer.
0020F6  3               	sta dispx 		; workspace coordinates.
0020F6  3               
0020F6  3               	ldy #0
0020F6  3               	lda (z80_ix),y 		; type.
0020F6  3               	bne :+			; is it a laser?
0020F6  3               	jmp plot1 		; yes, draw laser instead.
0020F6  3               :
0020F6  3               plot0:
0020F6  3               	lda dispx		; which pixel within byte do we
0020F6  3               	and #7			; want to set first?
0020F6  3               	tay
0020F6  3               	lda dots,y 		; table of small pixel positions.
0020F6  3               	sta z80_e 		; get value.
0020F6  3               
0020F6  3               	jsr scadd 		; screen address.
0020F6  3               	ldy #0
0020F6  3               	lda (scraddr),y		; see what's already there.
0020F6  3               	eor z80_e
0020F6  3               	sta (scraddr),y 	; put back on screen.
0020F6  3               	rts
0020F6  3               
0020F6  3               plot1:
0020F6  3               	jsr scadd 		; screen address.
0020F6  3               	ldy #0
0020F6  3               	lda (scraddr),y 	; fetch byte there.
0020F6  3               	eor #255 		; toggle all bits.
0020F6  3               	sta (scraddr),y 	; new byte.
0020F6  3               	rts
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Switch off shrapnel
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               kilshr:
0020F6  3               	lda #128
0020F6  3               	ldy #0
0020F6  3               	sta (z80_ix),y	; switch off shrapnel.
0020F6  3               	rts
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Sine/cosine table
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               shrsin:	.word 0,1024,391,946,724,724,946,391
0020F6  3               	.word 1024,0,946,65144,724,64811,391,64589
0020F6  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0020F6  3               	.word 64512,0,64589,391,64811,724,65144,946
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Create trail
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               trail:
0020F6  3               	ldy #1
0020F6  3               	lda (z80_ix),y 	; time remaining.
0020F6  3               	sec
0020F6  3               	sbc #1
0020F6  3               	sta (z80_ix),y
0020F6  3               	bne :+
0020F6  3               	jmp trailk		; time to switch it off.
0020F6  3               :
0020F6  3               	jsr qrand		; get a random number.
0020F6  3               	lsr a 			; x or y axis?
0020F6  3               	bcc :+
0020F6  3               	jmp trailv		; use y.
0020F6  3               :
0020F6  3               ; Trail horizontal
0020F6  3               
0020F6  3               	lsr a 			; which direction?
0020F6  3               	bcc :+
0020F6  3               	jmp traill		; go left.
0020F6  3               :
0020F6  3               ; Trail right
0020F6  3               
0020F6  3               	ldy #5
0020F6  3               	lda (z80_ix),y
0020F6  3               	clc
0020F6  3               	adc #1	 		; go right.
0020F6  3               	sta (z80_ix),y
0020F6  3               	rts
0020F6  3               
0020F6  3               ; Trail left
0020F6  3               
0020F6  3               traill:
0020F6  3               	ldy #5
0020F6  3               	lda (z80_ix),y
0020F6  3               	sec
0020F6  3               	sbc #1 			; go left.
0020F6  3               	sta (z80_ix),y
0020F6  3               	rts
0020F6  3               
0020F6  3               ; Trail vertical
0020F6  3               
0020F6  3               trailv:
0020F6  3               	lsr a		 	; which direction?
0020F6  3               	bcc :+
0020F6  3               	jmp trailu		; go up.
0020F6  3               :
0020F6  3               ; Trail down
0020F6  3               
0020F6  3               	ldy #3
0020F6  3               	lda (z80_ix),y
0020F6  3               	clc
0020F6  3               	adc #1 			; go down.
0020F6  3               	sta (z80_ix),y
0020F6  3               	rts
0020F6  3               
0020F6  3               ; Trail up
0020F6  3               
0020F6  3               trailu:
0020F6  3               	ldy #3
0020F6  3               	lda (z80_ix),y
0020F6  3               	sec
0020F6  3               	sbc #1 			; go up.
0020F6  3               	sta (z80_ix),y
0020F6  3               	rts
0020F6  3               
0020F6  3               ; Kill trail
0020F6  3               
0020F6  3               trailk:
0020F6  3               	lda #200		; set off-screen to kill vapour trail.
0020F6  3               	ldy #3
0020F6  3               	sta (z80_ix),y
0020F6  3               	rts
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Create laser beam
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               laser:
0020F6  3               	ldy #1
0020F6  3               	lda (z80_ix),y 		; direction.
0020F6  3               	ror a 			; left or right?
0020F6  3               	bcs :+
0020F6  3               	jmp laserl		; move left.
0020F6  3               :
0020F6  3               ; Laser right
0020F6  3               
0020F6  3               	lda #8			; distance to travel.
0020F6  3               	sta z80_b
0020F6  3               	jmp laserm		; move laser.
0020F6  3               
0020F6  3               ; Laser left
0020F6  3               
0020F6  3               laserl:
0020F6  3               	lda #248		; distance to travel.
0020F6  3               	sta z80_b
0020F6  3               laserm:
0020F6  3               	ldy #5
0020F6  3               	lda (z80_ix),y		; x position.
0020F6  3               	clc
0020F6  3               	adc z80_b		; add distance.
0020F6  3               	sta (z80_ix),y		; set new x coordinate.
0020F6  3               
0020F6  3               ; Test new block.
0020F6  3               
0020F6  3               	sta dispx 		; set x for block collision detection purposes.
0020F6  3               	ldy #3
0020F6  3               	lda (z80_ix),y 		; get y.
0020F6  3               	sta dispy		; set coordinate for collision test.
0020F6  3               	jsr tstbl 		; get block type there.
0020F6  3               	cmp #WALL		; is it solid?
0020F6  3               	bne :+
0020F6  3               	jmp trailk		; yes, it cannot pass.
0020F6  3               :
0020F6  3               .if pflag .or dflag
0020F6  3                       cmp #FODDER             ; is it fodder?
0020F6  3                       bne :+
0020F6  3                       jsr fdchk               ; remove fodder block.
0020F6  3                       jmp trailk              ; destroy laser.
0020F6  3               :
0020F6  3               .endif
0020F6  3                       rts                     ; no, ignore it.
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Dots mask
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               dots:	.byte 128,64,32,16,8,4,2,1
0020F6  3               
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Plot, preserving de.
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               plotde:
0020F6  3               	lda z80_d 		; put de on stack.
0020F6  3               	pha
0020F6  3               	lda z80_e
0020F6  3               	pha
0020F6  3               
0020F6  3               	jsr plot 		; plot pixel.
0020F6  3               
0020F6  3               	pla			; restore de from stack.
0020F6  3               	sta z80_e
0020F6  3               	pla
0020F6  3               	sta z80_d
0020F6  3               
0020F6  3               	rts
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Shoot a laser.
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               shoot:
0020F6  3               	sta z80_c		; store direction in c register.
0020F6  3               	ldy #8
0020F6  3               	lda (z80_ix),y 		; y coordinate.
0020F6  3               	clc
0020F6  3               shoot1:
0020F6  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0020F6  3               	sta z80_l 		; puty y coordinate in l.
0020F6  3               
0020F6  3               	ldy #9
0020F6  3               	lda (z80_ix),y 		; x coordinate in h.
0020F6  3               	sta z80_h
0020F6  3               
0020F6  3               	lda z80_i		; store pointer to sprite.
0020F6  3               	pha
0020F6  3               	lda z80_x
0020F6  3               	pha
0020F6  3               
0020F6  3               	jsr fpslot 		; find particle slot.
0020F6  3               	bcs :+
0020F6  3               	jmp vapou2		; failed, restore ix.
0020F6  3               :
0020F6  3               	lda #0
0020F6  3               	ldy #0
0020F6  3               	sta (z80_ix),y 		; set up a laser.
0020F6  3               
0020F6  3               	lda z80_c
0020F6  3               	ldy #1
0020F6  3               	sta (z80_ix),y 		; set the direction.
0020F6  3               
0020F6  3               	lda z80_l
0020F6  3               	ldy #3
0020F6  3               	sta (z80_ix),y		; set y coordinate.
0020F6  3               
0020F6  3               	ror z80_c		; check direction we want.
0020F6  3               	bcc :+
0020F6  3               	jmp shootr		; shoot right.
0020F6  3               :
0020F6  3               	lda z80_h		; X position.
0020F6  3               shoot0:
0020F6  3               	and #248		; align on character boundary.
0020F6  3               	ldy #5
0020F6  3               	sta (z80_ix),y		; set x coordinate.
0020F6  3               	jmp vapou0 		; draw first image.
0020F6  3               shootr:
0020F6  3               	lda z80_h		; x position.
0020F6  3               	clc
0020F6  3               	adc #15			; look right.
0020F6  3               	jmp shoot0		; align and continue.
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Create a bit of vapour trail.
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               vapour:
0020F6  3               	lda z80_i		; store pointer to sprite.
0020F6  3               	pha
0020F6  3               	lda z80_x
0020F6  3               	pha
0020F6  3               
0020F6  3               	ldy #8
0020F6  3               	lda (z80_ix),y 		; y coordinate.
0020F6  3               	clc
0020F6  3               vapou3:
0020F6  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0020F6  3               	sta z80_l
0020F6  3               
0020F6  3               	ldy #9
0020F6  3               	lda (z80_ix),y 		; x coordinate.
0020F6  3               	adc #7
0020F6  3               	sta z80_h
0020F6  3               
0020F6  3               	jsr fpslot 		; find particle slot.
0020F6  3               	bcc :+
0020F6  3               	jmp vapou1		; no, we can use it.
0020F6  3               :
0020F6  3               vapou2:
0020F6  3               	pla
0020F6  3               	sta z80_x
0020F6  3               	pla
0020F6  3               	sta z80_i
0020F6  3               	rts
0020F6  3               vapou1:
0020F6  3               	lda z80_l
0020F6  3               	ldy #3
0020F6  3               	sta (z80_ix),y		; set up y.
0020F6  3               
0020F6  3               	lda z80_h
0020F6  3               	ldy #5
0020F6  3               	sta (z80_ix),y 		; set up x coordinate.
0020F6  3               
0020F6  3               	jsr qrand		; get quick random number.
0020F6  3               	and #15			; random time.
0020F6  3               	clc
0020F6  3               	adc #15			; minimum time on screen.
0020F6  3               	ldy #1
0020F6  3               	sta (z80_ix),y		; set time on screen.
0020F6  3               
0020F6  3               	lda #1
0020F6  3               	ldy #0
0020F6  3               	sta (z80_ix),y		; define particle as vapour trail.
0020F6  3               vapou0:
0020F6  3               	jsr chkxy		; plot first position.
0020F6  3               	jmp vapou2
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Create a user particle.
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               ptusr:
0020F6  3               	sta z80_f		; store timer.
0020F6  3               
0020F6  3               	ldy #8
0020F6  3               	lda (z80_ix),y 		; y coordinate.
0020F6  3               	clc
0020F6  3               	adc #7			; mid-point of sprite.
0020F6  3               	sta z80_l
0020F6  3               
0020F6  3               	ldy #9
0020F6  3               	lda (z80_ix),y 		; x coordinate.
0020F6  3               	clc
0020F6  3               	adc #7			; mid-point of sprite.
0020F6  3               	sta z80_h
0020F6  3               
0020F6  3               	jsr fpslot 		; find particle slot.
0020F6  3               	bcs ptusr1
0020F6  3               	rts 			; out of slots, can't generate anything.
0020F6  3               ptusr1:
0020F6  3               	lda z80_l
0020F6  3               	ldy #3
0020F6  3               	sta (z80_ix),y 		; set up y.
0020F6  3               
0020F6  3               	lda z80_h
0020F6  3               	ldy #5
0020F6  3               	sta (z80_ix),y		; set up x coordinate.
0020F6  3               
0020F6  3               	lda z80_f 		; restore timer.
0020F6  3               	ldy #1
0020F6  3               	sta (z80_ix),y		; set time on screen.
0020F6  3               
0020F6  3               	lda #7
0020F6  3               	ldy #0
0020F6  3               	sta (z80_ix),y		; define particle as user particle.
0020F6  3               
0020F6  3               	jmp chkxy		; plot first position.
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Create a vertical or horizontal star.
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               star:
0020F6  3               	lda z80_i		; store pointer to sprite.
0020F6  3               	pha
0020F6  3               	lda z80_x
0020F6  3               	pha
0020F6  3               
0020F6  3               	jsr fpslot 		; find particle slot.
0020F6  3               	bcs star7		; found one we can use.
0020F6  3               star0:
0020F6  3               	pla 			; restore sprite pointer.
0020F6  3               	sta z80_x
0020F6  3               	pla
0020F6  3               	sta z80_i
0020F6  3               	rts 			; out of slots, can't generate anything.
0020F6  3               star7:
0020F6  3               	lda z80_c		; direction.
0020F6  3               	and #3 			; is it left?
0020F6  3               	bne :+
0020F6  3               	jmp star1 		; yes, it's left.
0020F6  3               :
0020F6  3               	cmp #1 			; is it right?
0020F6  3               	bne :+
0020F6  3               	jmp star2 		; yes, it's right.
0020F6  3               :
0020F6  3               	cmp #2 			; is it up?
0020F6  3               	bne :+
0020F6  3               	jmp star3 		; yes, it's up.
0020F6  3               :
0020F6  3               	ldy wntopx 		; get edge of screen.
0020F6  3               	iny			; down one pixel.
0020F6  3               	tya
0020F6  3               star8:
0020F6  3               	ldy #3
0020F6  3               	sta (z80_ix),y 		; set y coord.
0020F6  3               	jsr qrand 		; get quick random number.
0020F6  3               star9:
0020F6  3               	ldy #5
0020F6  3               	sta (z80_ix),y		; set x position.
0020F6  3               
0020F6  3               	lda z80_c		; direction.
0020F6  3               	and #3			; zero to three.
0020F6  3               	clc
0020F6  3               	adc #3			; 3 to 6 for starfield.
0020F6  3               	ldy #0
0020F6  3               	sta (z80_ix),y		; define particle as star.
0020F6  3               	jsr chkxy		; plot first position.
0020F6  3               	jmp star0
0020F6  3               star1:
0020F6  3               	jsr qrand		; get quick random number.
0020F6  3               	ldy #3
0020F6  3               	sta (z80_ix),y 		; set y coord.
0020F6  3               
0020F6  3               	lda wnrgtx 		; get edge of screen.
0020F6  3               	clc
0020F6  3               	adc #15			; add width of sprite minus 1.
0020F6  3               	jmp star9
0020F6  3               star2:
0020F6  3               	jsr qrand 		; get quick random number.
0020F6  3               	ldy #3
0020F6  3               	sta (z80_ix),y		; set y coord.
0020F6  3               
0020F6  3               	lda wnlftx		; get edge of screen.
0020F6  3               	jmp star9
0020F6  3               star3:
0020F6  3               	lda wnbotx 		; get edge of screen.
0020F6  3               	clc
0020F6  3               	adc #15 		; height of sprite minus one pixel.
0020F6  3               	jmp star8
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Find particle slot for lasers or vapour trail.
0020F6  3               ; can't use alternate accumulator.
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               fpslot:
0020F6  3               	lda #<SHRAPN 		; shrapnel table.
0020F6  3               	sta z80_x
0020F6  3               	lda #>SHRAPN
0020F6  3               	sta z80_i
0020F6  3               
0020F6  3               	lda #NUMSHR		; number of pieces in table.
0020F6  3               	sta z80_b
0020F6  3               fpslt0:
0020F6  3               	ldy #0
0020F6  3               	lda (z80_ix),y		; get type.
0020F6  3               	asl a  			; is this slot in use?
0020F6  3               	bcc :+
0020F6  3               	rts			; no, we can use it.
0020F6  3               :
0020F6  3               	clc			; point to more shrapnel.
0020F6  3               	lda z80_x
0020F6  3               	adc #SHRSIZ
0020F6  3               	sta z80_x
0020F6  3               	bcc :+
0020F6  3               	inc z80_i
0020F6  3               :
0020F6  3               	dec z80_b		; repeat for all shrapnel.
0020F6  3               	bne fpslt0
0020F6  3               
0020F6  3               	clc
0020F6  3               	rts 			; out of slots, can't generate anything.
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Create an explosion at sprite position.
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               explod:
0020F6  3               	sta z80_c 		; particles to create.
0020F6  3               
0020F6  3               	lda z80_i 		; store pointer to sprite.
0020F6  3               	pha
0020F6  3               	lda z80_x
0020F6  3               	pha
0020F6  3               
0020F6  3               	ldy #8
0020F6  3               	lda (z80_ix),y 		; y coordinate.
0020F6  3               	sta z80_l
0020F6  3               	ldy #9
0020F6  3               	lda (z80_ix),y		; x coordinate.
0020F6  3               	sta z80_h
0020F6  3               
0020F6  3               	lda #<SHRAPN		; shrapnel table.
0020F6  3               	sta z80_x
0020F6  3               	lda #>SHRAPN
0020F6  3               	sta z80_i
0020F6  3               
0020F6  3               	lda #NUMSHR		; number of pieces in table.
0020F6  3               	sta explcnt
0020F6  3               expld0:
0020F6  3               	ldy #0
0020F6  3               	lda (z80_ix),y		; get type.
0020F6  3               	asl a 			; is this slot in use?
0020F6  3               	bcs expld1		; no, we can use it.
0020F6  3               expld2:
0020F6  3               	clc
0020F6  3               	lda z80_x
0020F6  3               	adc #SHRSIZ
0020F6  3               	sta z80_x
0020F6  3               	bcc :+
0020F6  3               	inc z80_i
0020F6  3               :
0020F6  3               	dec explcnt		; repeat for all shrapnel.
0020F6  3               	bne expld0
0020F6  3               expld3:
0020F6  3               	pla			; restore sprite pointer.
0020F6  3               	sta z80_x
0020F6  3               	pla
0020F6  3               	sta z80_i
0020F6  3               	rts 			; out of slots, can't generate any more.
0020F6  3               
0020F6  3               expld1:
0020F6  3               	lda z80_c		; shrapnel counter.
0020F6  3               	and #15			; 0 to 15.
0020F6  3               	clc			; add to x.
0020F6  3               	adc z80_l
0020F6  3               	ldy #3
0020F6  3               	sta (z80_ix),y		; y coord.
0020F6  3               
0020F6  3               	lda seed3 		; crap random number.
0020F6  3               	and #15			; 0 to 15.
0020F6  3               	clc 			; add to y.
0020F6  3               	adc z80_h
0020F6  3               	ldy #5
0020F6  3               	sta (z80_ix),y		; x coord.
0020F6  3               
0020F6  3               	lda #2
0020F6  3               	ldy #0
0020F6  3               	sta (z80_ix),y		; switch it on.
0020F6  3               
0020F6  3               	jsr chkxy		; plot first position.
0020F6  3               	jsr qrand		; quick random angle.
0020F6  3               	and #60 		; keep within range.
0020F6  3               	ldy #1
0020F6  3               	sta (z80_ix),y		; angle.
0020F6  3               
0020F6  3               	dec z80_c		; one less piece of shrapnel to generate.
0020F6  3               	bne expld2 		; back to main explosion loop.
0020F6  3               	jmp expld3 		; restore sprite pointer and exit.
0020F6  3               
0020F6  3               ;explcnt:	.byte 0
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Quick random
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               qrand:
0020F6  3               	jsr random		; r register.
0020F6  3               	eor seed3		; combine with seed.
0020F6  3               	sta seed3 		; new seed.
0020F6  3               	rts
0020F6  3               
0020F6  3               ;seed3:	.byte 0
0020F6  3               
0020F6  3               ;----------------------------------------------------
0020F6  3               ; Display all shrapnel.
0020F6  3               ;----------------------------------------------------
0020F6  3               
0020F6  3               dshrp:
0020F6  3               	lda #<plotde		; display routine.
0020F6  3               	sta proshx+1
0020F6  3               	lda #>plotde
0020F6  3               	sta proshx+2
0020F6  3               	jsr proshr		; process shrapnel.
0020F6  3               
0020F6  3               	lda #<prosh1		; processing routine.
0020F6  3               	sta proshx+1
0020F6  3               	lda #>prosh1
0020F6  3               	sta proshx+2
0020F6  3               	rts
0020F6  3               
0020F6  3               ;------------------------------------------------------
0020F6  3               ; Particle engine.
0020F6  3               ;
0020F6  3               ; Init particle data for 55 particles in SHRAPN table.
0020F6  3               ; Every particle has 6 bytes.
0020F6  3               ;
0020F6  3               ; global:	-
0020F6  3               ; local:	x,y,hl
0020F6  3               ; calls:	-
0020F6  3               ;------------------------------------------------------
0020F6  3               
0020F6  3               inishr:
0020F6  3               	lda #<SHRAPN 		; table.
0020F6  3               	sta z80_l
0020F6  3               	lda #>SHRAPN
0020F6  3               	sta z80_h
0020F6  3               
0020F6  3               	ldy #0
0020F6  3               	ldx #NUMSHR		; shrapnel pieces to process.
0020F6  3               inish0:
0020F6  3               	lda #255 		; kill the shrapnel.
0020F6  3               	sta (z80_hl),y
0020F6  3               
0020F6  3               	clc 			; point there.
0020F6  3               	lda z80_l
0020F6  3               	adc #SHRSIZ		; distance to next.
0020F6  3               	sta z80_l
0020F6  3               	bcc :+
0020F6  3               	inc z80_h
0020F6  3               :
0020F6  3               	dex
0020F6  3               	bne inish0 		; round again.
0020F6  3               	rts
0020F6  3               
0020F6  3               ;------------------------------------------------------
0020F6  3               ; Check for collision between laser and sprite.
0020F6  3               ;------------------------------------------------------
0020F6  3               
0020F6  3               lcol:
0020F6  3               	lda #<SHRAPN		; shrapnel table.
0020F6  3               	sta z80_l
0020F6  3               	lda #>SHRAPN
0020F6  3               	sta z80_h
0020F6  3               
0020F6  3               	lda #NUMSHR		; number of pieces in table.
0020F6  3               	sta z80_b
0020F6  3               lcol0:
0020F6  3               	ldy #0
0020F6  3               	lda (z80_hl),y 		; get type.
0020F6  3               	beq lcol1		; yes, check collision.
0020F6  3               lcol3:
0020F6  3               	clc			; point to more shrapnel.
0020F6  3               	lda z80_l
0020F6  3               	adc #SHRSIZ
0020F6  3               	sta z80_l
0020F6  3               	bcc :+
0020F6  3               	inc z80_h
0020F6  3               :
0020F6  3               	dec z80_b		; repeat for all shrapnel.
0020F6  3               	bne lcol0
0020F6  3               	rts 			; no collision, carry not set.
0020F6  3               lcol1:
0020F6  3               	ldy #3
0020F6  3               	lda (z80_hl),y		; get y.
0020F6  3               	sec
0020F6  3               	ldy #8
0020F6  3               	sbc (z80_ix),y		; subtract sprite y.
0020F6  3               lcolh:
0020F6  3               	cmp #SPR_HGT 		; within range?
0020F6  3               	bcc :+
0020F6  3               	jmp lcol2		; no, missed.
0020F6  3               :
0020F6  3               	ldy #5
0020F6  3               	lda (z80_hl),y 		; get x.
0020F6  3               	sec
0020F6  3               	ldy #9
0020F6  3               	sbc (z80_ix),y 		; subtract sprite y.
0020F6  3               	cmp #16			; within range?
0020F6  3               	bcs :+
0020F6  3               	jmp lcol4 		; yes, collision occurred.
0020F6  3               :
0020F6  3               lcol2:
0020F6  3               	jmp lcol3
0020F6  3               lcol4:
0020F6  3               	sec
0020F6  3               	rts 			; return with carry set for collision.
0020F6  3               .endif
0020F6  3               
0020F6  3               ;------------------------------------------------------
0020F6  3               ; Main game engine code starts here.
0020F6  3               ; After initialisation, mloop is the main loop
0020F6  3               ;------------------------------------------------------
0020F6  3               
0020F6  3               game:
0020F6  3               
0020F6  3               ; Set up screen address table.
0020F6  3               
0020F6  3               setsat:
0020F6  3  A9 00        	lda #<ScreenAddr		; start of screen.
0020F8  3  85 rr        	sta scraddr
0020FA  3  A9 E4        	lda #>ScreenAddr
0020FC  3  85 rr        	sta scraddr+1
0020FE  3               
0020FE  3  A0 00        	ldy #0			; vertical lines on screen.
002100  3               setsa0:
002100  3  A5 rr        	lda scraddr
002102  3  99 00 E0     	sta SCADTB_lb,y		; write low byte.
002105  3  A5 rr        	lda scraddr+1
002107  3  C0 C0        	cpy #192		; vertical lines on screen.
002109  3  90 02        	bcc :+
00210B  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
00210D  3               :
00210D  3  99 00 E1     	sta SCADTB_hb,y		; write high byte.
002110  3  20 BA 2E     	jsr nline		; next line down.
002113  3  C8           	iny			; next position in table.
002114  3  D0 EA        	bne setsa0
002116  3               
002116  3               ; Init graphics mode
002116  3               
002116  3  A9 F0        	lda #ScrMode		; graphics mode
002118  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
00211B  3  20 F4 20     	jsr setpal 		; set up palette.
00211E  3               
00211E  3               ; Init AtoMMC joystick
00211E  3  20 E9 29     	jsr joyinit		; AtoMMC joystick on PORT B
002121  3               
002121  3               rpblc2:
002121  3               .if pflag
002121  3               	jsr inishr 		; initialise particle engine.
002121  3               .endif
002121  3               evintr:
002121  3  20 86 34     	jsr evnt12 		; call intro/menu event.
002124  3               
002124  3  A9 02        	lda #WALL 		; write default property.
002126  3  A2 00        	ldx #0
002128  3               clrmap:
002128  3  9D 00 DD     	sta MAP,x 		; block properties.
00212B  3  9D 00 DE     	sta MAP+256,x
00212E  3  9D 00 DF     	sta MAP+512,x
002131  3  E8           	inx			; next byte.
002132  3  D0 F4        	bne clrmap
002134  3               .if oflag
002134  3               	jsr iniob 		; initialise objects.
002134  3               .endif
002134  3  A9 00        	lda #0			; put zero in accumulator.
002136  3  85 rr        	sta gamwon		; reset game won flag.
002138  3               
002138  3  20 A3 22     	jsr inisc 		; init the score.
00213B  3               mapst:
00213B  3  AD 19 34     	lda stmap 		; start position on map.
00213E  3  8D E5 33     	sta roomtb		; set up position in table, if there is one.
002141  3               
002141  3               inipbl:
002141  3               .if aflag
002141  3               	lda #<eop		; reset blockpointer
002141  3               	sta pbptr
002141  3               	lda #>eop
002141  3               	sta pbptr+1
002141  3               .endif
002141  3  20 CD 2F     	jsr initsc 		; set up first screen.
002144  3               
002144  3  A9 D4        	lda #<ssprit 		; default to spare sprite in table.
002146  3  85 68        	sta z80_x
002148  3  A9 33        	lda #>ssprit
00214A  3  85 69        	sta z80_i
00214C  3               evini:
00214C  3  20 8A 34     	jsr evnt13 		; initialisation.
00214F  3               
00214F  3               ; Two restarts.
00214F  3               ; First restart - clear all sprites and initialise everything.
00214F  3               
00214F  3               rstrt:
00214F  3  20 43 22     	jsr rsevt 		; restart events.
002152  3  20 4D 20     	jsr xspr 		; clear sprite table.
002155  3  20 39 31     	jsr sprlst 		; fetch pointer to screen sprites.
002158  3  20 C2 31     	jsr ispr 		; initialise sprite table.
00215B  3               
00215B  3  4C 6A 21     	jmp rstrt0
00215E  3               
00215E  3               ; Second restart - clear all but player, and don't initialise him.
00215E  3               
00215E  3               rstrtn:
00215E  3  20 43 22     	jsr rsevt		; restart events.
002161  3  20 66 31     	jsr nspr 		; clear all non-player sprites.
002164  3  20 39 31     	jsr sprlst 		; fetch pointer to screen sprites.
002167  3  20 FF 31     	jsr kspr 		; initialise sprite table, no more players.
00216A  3               
00216A  3               ; Set up the player and/or enemy sprites.
00216A  3               
00216A  3               rstrt0:
00216A  3  A9 00        	lda #0 			; zero in accumulator.
00216C  3  85 rr        	sta nexlev 		; reset next level flag.
00216E  3  85 rr        	sta restfl 		; reset restart flag.
002170  3  85 rr        	sta deadf 		; reset dead flag.
002172  3  20 11 26     	jsr droom 		; show screen layout.
002175  3               rpblc0:
002175  3               .if pflag
002175  3               	jsr inishr 		; initialise particle engine.
002175  3               .endif
002175  3               .if aflag
002175  3               	jsr rbloc		; draw blocks for this screen
002175  3               .endif
002175  3               .if oflag
002175  3               	jsr shwob		; draw objects.
002175  3               .endif
002175  3               
002175  3  A9 08        	lda #<sprtab 		; address of sprite table, even sprites.
002177  3  85 68        	sta z80_x
002179  3  A9 33        	lda #>sprtab
00217B  3  85 69        	sta z80_i
00217D  3  20 AB 2C     	jsr dspr 		; display sprites.
002180  3               
002180  3  A9 19        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002182  3  85 68        	sta z80_x
002184  3  A9 33        	lda #>(sprtab+TABSIZ)
002186  3  85 69        	sta z80_i
002188  3  20 AB 2C     	jsr dspr 		; display sprites.
00218B  3               mloop:
00218B  3  20 5A 20     	jsr vsync 		; synchronise with display.
00218E  3  A9 08        	lda #<sprtab 		; address of sprite table, even sprites.
002190  3  85 68        	sta z80_x
002192  3  A9 33        	lda #>sprtab
002194  3  85 69        	sta z80_i
002196  3  20 AB 2C     	jsr dspr 		; display even sprites.
002199  3               
002199  3               ;	jsr plsnd 		; play sounds.
002199  3               
002199  3  20 F5 20     	jsr proshr
00219C  3  A9 19        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00219E  3  85 68        	sta z80_x
0021A0  3  A9 33        	lda #>(sprtab+TABSIZ)
0021A2  3  85 69        	sta z80_i
0021A4  3  20 AB 2C     	jsr dspr 		; display odd sprites.
0021A7  3               
0021A7  3  A9 D4        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
0021A9  3  85 68        	sta z80_x
0021AB  3  A9 33        	lda #>(ssprit)
0021AD  3  85 69        	sta z80_i
0021AF  3               evlp1:
0021AF  3  20 24 34     	jsr evnt10 		; called once per main loop.
0021B2  3  20 29 2C     	jsr pspr 		; process sprites.
0021B5  3               
0021B5  3               ; Main loop events.
0021B5  3               
0021B5  3  A9 D4        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0021B7  3  85 68        	sta z80_x
0021B9  3  A9 33        	lda #>ssprit
0021BB  3  85 69        	sta z80_i
0021BD  3               evlp2:
0021BD  3  20 85 34     	jsr evnt11 		; called once per main loop.
0021C0  3               bsortx:
0021C0  3  20 9F 2B     	jsr bsort 		; sort sprites.
0021C3  3               
0021C3  3  A5 rr        	lda nexlev		; finished level flag.
0021C5  3  F0 03        	beq :+
0021C7  3  4C EF 21     	jmp newlev		; is set, go to next level.
0021CA  3               :
0021CA  3  A5 rr        	lda gamwon		; finished game flag.
0021CC  3  F0 03        	beq :+
0021CE  3  4C FE 21     	jmp evwon		; is set, finish the game.
0021D1  3               :
0021D1  3  A5 rr        	lda restfl 		; finished level flag.
0021D3  3  C9 01        	cmp #1			; has it been set?
0021D5  3  D0 03        	bne :+
0021D7  3  4C 4F 21     	jmp rstrt		; yes, go to next level.
0021DA  3               :
0021DA  3  C9 02        	cmp #2			; has it been set?
0021DC  3  D0 03        	bne :+
0021DE  3  4C 5E 21     	jmp rstrtn		; yes, go to next level.
0021E1  3               :
0021E1  3  A5 rr        	lda deadf 		; dead flag.
0021E3  3  F0 03        	beq :+
0021E5  3  4C 04 22     	jmp pdead		; yes, player dead.
0021E8  3               :
0021E8  3               ; back to start of main loop.
0021E8  3               
0021E8  3  E6 rr        	inc frmno
0021EA  3  E6 rr        	inc clock
0021EC  3  4C 8B 21     	jmp mloop		; switched to a jmp mloop during test mode.
0021EF  3               
0021EF  3               ;----------------------------------------------------------
0021EF  3               ; Read blocks from list and update screen accordingly.
0021EF  3               ;----------------------------------------------------------
0021EF  3               
0021EF  3               .if aflag
0021EF  3               rbloc:
0021EF  3               	lda #<eop		; reset temp blockpointer
0021EF  3               	sta pbbuf
0021EF  3               	lda #>eop
0021EF  3               	sta pbbuf+1
0021EF  3               
0021EF  3               rbloc2:
0021EF  3               	lda pbbuf			; check for last block
0021EF  3               	cmp pbptr
0021EF  3               	bne rbloc1
0021EF  3               	lda pbbuf+1
0021EF  3               	cmp pbptr+1
0021EF  3               	bne rbloc1
0021EF  3               	rts
0021EF  3               rbloc1:
0021EF  3               	ldy #0
0021EF  3               	lda (pbbuf),y		; check if block for this scno
0021EF  3               	cmp scno
0021EF  3               	bne rbloc0		; if not, skip
0021EF  3               	iny
0021EF  3               	lda (pbbuf),y		; get y
0021EF  3               	sta dispy
0021EF  3               	iny
0021EF  3               	lda (pbbuf),y		; get x
0021EF  3               	sta dispx
0021EF  3               	iny
0021EF  3               	lda (pbbuf),y		; get blocknr
0021EF  3               	jsr pattr2		; draw block
0021EF  3               rbloc0:
0021EF  3               	clc			; point to next block
0021EF  3               	lda pbbuf
0021EF  3               	adc #4
0021EF  3               	sta pbbuf
0021EF  3               	bcc rbloc2
0021EF  3               	inc pbbuf+1
0021EF  3               	jmp rbloc2
0021EF  3               .endif
0021EF  3               
0021EF  3               ;----------------------------------------------------------
0021EF  3               ; New level
0021EF  3               ;----------------------------------------------------------
0021EF  3               
0021EF  3               ;.repeat 270
0021EF  3               ;  .byte 0
0021EF  3               ;.endrep
0021EF  3               
0021EF  3               newlev:
0021EF  3  A5 rr        	lda scno 			; current screen.
0021F1  3  18           	clc
0021F2  3  69 01        	adc #1				; next screen.
0021F4  3  CD 59 35     	cmp numsc			; total number of screens.
0021F7  3  B0 05        	bcs evwon			; yes, game finished.
0021F9  3  85 rr        	sta scno			; set new level number.
0021FB  3  4C 4F 21     	jmp rstrt			; restart, clearing all aliens.
0021FE  3               
0021FE  3               evwon:
0021FE  3  20 8F 34     	jsr evnt18		 	; game completed.
002201  3  4C 18 22     	jmp tidyup			; tidy up and return to BASIC/calling routine.
002204  3               
002204  3               ;----------------------------------------------------------
002204  3               ; Player dead.
002204  3               ;----------------------------------------------------------
002204  3               
002204  3               ;.repeat 258
002204  3               ;  .byte 0
002204  3               ;.endrep
002204  3               
002204  3               pdead:
002204  3  A9 00        	lda #0				; zeroise accumulator.
002206  3  85 rr        	sta deadf			; reset dead flag.
002208  3               evdie:
002208  3  20 8D 34     	jsr evnt16 			; death subroutine.
00220B  3  A5 rr        	lda numlif			; number of lives.
00220D  3  F0 03        	beq :+
00220F  3  4C 4F 21     	jmp rstrt 			; restart game.
002212  3               :
002212  3               evfail:
002212  3  20 8E 34     	jsr evnt17 			; failure event.
002215  3  4C F6 20     	jmp game			; restart game
002218  3               
002218  3               ;----------------------------------------------------------
002218  3               ; Tidy things up
002218  3               ;----------------------------------------------------------
002218  3               
002218  3               ;.repeat 291
002218  3               ;  .byte 0
002218  3               ;.endrep
002218  3               
002218  3               tidyup:
002218  3  A0 00        	ldy #0				; digits to check.
00221A  3               tidyu2:
00221A  3  B9 8C 23     	lda score,y 			; get score digit.
00221D  3  CD 92 23     	cmp hiscor 			; are we larger than high score digit?
002220  3  90 07        	bcc tidyu0			; high score is bigger.
002222  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
002224  3  C8           	iny				; next digit of high score.
002225  3  C0 06        	cpy #6
002227  3  D0 F1        	bne tidyu2			; repeat for all digits
002229  3               tidyu0:
002229  3  A9 8C        	lda #<score			; return pointing to score.
00222B  3  85 62        	sta z80_c
00222D  3  A9 23        	lda #>score
00222F  3  85 63        	sta z80_b
002231  3  60           	rts
002232  3               tidyu1:
002232  3  A0 05        	ldy #5
002234  3               tidyu3:
002234  3  B9 8C 23     	lda score,y			; score.
002237  3  99 92 23     	sta hiscor,y			; high score.
00223A  3  88           	dey
00223B  3  10 F7        	bpl tidyu3 			; copy score to high score.
00223D  3               evnewh:
00223D  3  20 90 34     	jsr evnt19			; new high score event.
002240  3  4C 29 22     	jmp tidyu0			; tidy up.
002243  3               
002243  3               ;--------------------------------------------------
002243  3               ; Restart event.
002243  3               ;--------------------------------------------------
002243  3               
002243  3               rsevt:
002243  3  A9 D4        	lda #<ssprit 			; default to spare element in table.
002245  3  85 68        	sta z80_x
002247  3  A9 33        	lda #>ssprit
002249  3  85 69        	sta z80_i
00224B  3               evrs:
00224B  3  4C 8B 34     	jmp evnt14	 		; call restart event.
00224E  3               
00224E  3               ;------------------------------------------------------------------
00224E  3               ; Copy number passed in a to string position bc, right-justified.
00224E  3               ;
00224E  3               ; Input:
00224E  3               ;  A  = number
00224E  3               ;  BC = string address
00224E  3               ;
00224E  3               ; Output:
00224E  3               ;  BC = string with number
00224E  3               ;-----------------------------------------------------------------
00224E  3               
00224E  3               num2ch:
00224E  3  85 65        	sta z80_d		; Save number
002250  3               
002250  3  A9 00        	lda #0
002252  3  85 rr        	sta flag
002254  3               numdg3:
002254  3  A2 64        	ldx #100		; hundreds column.
002256  3  86 64        	stx z80_e
002258  3  20 68 22     	jsr numdg		; show digit.
00225B  3               numdg2:
00225B  3  A2 0A        	ldx #10			; tens column.
00225D  3  86 64        	stx z80_e
00225F  3  20 68 22     	jsr numdg		; show digit.
002262  3               
002262  3  E6 rr        	inc flag
002264  3  A2 01        	ldx #1			; units column.
002266  3  86 64        	stx z80_e
002268  3               numdg:
002268  3  A9 30        	lda #48			; clear digit.
00226A  3  85 61        	sta z80_a
00226C  3               numdg1:
00226C  3  A5 65        	lda z80_d
00226E  3  C5 64        	cmp z80_e
002270  3  90 0E        	bcc numdg0		; nothing to show.
002272  3  38           	sec
002273  3  A5 65        	lda z80_d
002275  3  E5 64        	sbc z80_e		; subtract from column.
002277  3  85 65        	sta z80_d
002279  3  E6 61        	inc z80_a		; increment digit.
00227B  3  E6 rr        	inc flag
00227D  3  4C 6C 22     	jmp numdg1		; repeat until column is zero.
002280  3               numdg0:
002280  3  A0 00        	ldy #0
002282  3  A5 61        	lda z80_a
002284  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002286  3  A5 rr        	lda flag
002288  3  F0 06        	beq :+
00228A  3  E6 62        	inc z80_c		; next buffer position.
00228C  3  D0 02        	bne :+
00228E  3  E6 63        	inc z80_b
002290  3               :
002290  3  60           	rts
002291  3               num2dd:
002291  3  85 65        	sta z80_d		; Save number
002293  3               
002293  3  A9 01        	lda #1
002295  3  85 rr        	sta flag
002297  3               
002297  3  4C 5B 22     	jmp numdg2
00229A  3               num2td:
00229A  3  85 65        	sta z80_d		; Save number
00229C  3               
00229C  3  A9 01        	lda #1
00229E  3  85 rr        	sta flag
0022A0  3  4C 54 22     	jmp numdg3
0022A3  3               
0022A3  3               ;flag:	.byte 0
0022A3  3               
0022A3  3               ;---------------------------------------------------------
0022A3  3               ; Reset score to "000000"
0022A3  3               ;---------------------------------------------------------
0022A3  3               
0022A3  3               inisc:
0022A3  3  A9 30        	lda #'0'
0022A5  3  A2 05        	ldx #5			; digits to initialise.
0022A7  3               inisc0:
0022A7  3  9D 8C 23     	sta score,x 		; write zero digit.
0022AA  3  CA           	dex			; next column.
0022AB  3  10 FA        	bpl inisc0		; repeat for all digits.
0022AD  3               
0022AD  3  60           	rts
0022AE  3               
0022AE  3               ;-----------------------------------------------------
0022AE  3               ; Multiply h by d and return in hl.
0022AE  3               ;
0022AE  3               ; Input:
0022AE  3               ;  H = first number
0022AE  3               ;  D = second number
0022AE  3               ;
0022AE  3               ; Output:
0022AE  3               ;  HL = result H x D
0022AE  3               ;-----------------------------------------------------
0022AE  3               
0022AE  3               imul:
0022AE  3  A5 65        	lda z80_d		; HL = H * D
0022B0  3  85 64        	sta z80_e
0022B2  3  A5 67        	lda z80_h
0022B4  3  85 62        	sta z80_c		; make c first multiplier.
0022B6  3               imul0:
0022B6  3  A9 00        	lda #0			; zeroise total.
0022B8  3  85 66        	sta z80_l
0022BA  3  85 67        	sta z80_h
0022BC  3               
0022BC  3  A5 67        	lda z80_h
0022BE  3  85 65        	sta z80_d		; zeroise high byte.
0022C0  3               
0022C0  3  A9 08        	lda #8			; repeat 8 times.
0022C2  3  85 63        	sta z80_b
0022C4  3               imul1:
0022C4  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
0022C6  3  90 0E        	bcc imul2		; wasn't set.
0022C8  3  18           	clc			; bit was set, so add de.
0022C9  3  A5 66        	lda z80_l
0022CB  3  65 64        	adc z80_e
0022CD  3  85 66        	sta z80_l
0022CF  3  A5 67        	lda z80_h
0022D1  3  65 65        	adc z80_d
0022D3  3  85 67        	sta z80_h
0022D5  3  18           	clc 			; reset carry.
0022D6  3               imul2:
0022D6  3  06 64        	asl z80_e 		; shift de 1 bit left.
0022D8  3  26 65        	rol z80_d
0022DA  3  C6 63        	dec z80_b
0022DC  3  D0 E6        	bne imul1		; repeat 8 times.
0022DE  3               
0022DE  3  60           	rts
0022DF  3               
0022DF  3               ;-----------------------------------------------
0022DF  3               ; Divide d by e and return in d, remainder in a.
0022DF  3               ;
0022DF  3               ; Input:
0022DF  3               ;  D = first number
0022DF  3               ;  E = second number
0022DF  3               ;
0022DF  3               ; Output:
0022DF  3               ;  D = result D/E
0022DF  3               ;  A = remainder
0022DF  3               ;-----------------------------------------------
0022DF  3               
0022DF  3               idiv:
0022DF  3  A9 00        	lda #0
0022E1  3  A0 08        	ldy #8		 	; bits to shift.
0022E3  3  06 65        	asl z80_d
0022E5  3               idiv0:
0022E5  3  2A           	rol a 			; multiply d by 2.
0022E6  3  C5 64        	cmp z80_e 		; test if e is smaller.
0022E8  3  90 02        	bcc idiv1		; e is greater, no division this time.
0022EA  3  E5 64        	sbc z80_e		; subtract it.
0022EC  3               idiv1:
0022EC  3  26 65        	rol z80_d		; rotate into d.
0022EE  3  88           	dey
0022EF  3  D0 F4        	bne idiv0		; repeat
0022F1  3  60           	rts
0022F2  3               
0022F2  3               ;---------------------------------------------------
0022F2  3               ; Play AY sound effect
0022F2  3               ;---------------------------------------------------
0022F2  3               
0022F2  3               plsnd:
0022F2  3  60           	rts
0022F3  3               
0022F3  3               ;---------------------------------------------------
0022F3  3               ; Objects handling.
0022F3  3               ; 32 bytes for image
0022F3  3               ; 3 for room, y and x
0022F3  3               ; 3 for starting room, y and x.
0022F3  3               ; 254 = disabled.
0022F3  3               ; 255 = object in player"s pockets.
0022F3  3               ;---------------------------------------------------
0022F3  3               
0022F3  3               ;---------------------------------------------------
0022F3  3               ; Show items present.
0022F3  3               ;---------------------------------------------------
0022F3  3               
0022F3  3               .if oflag
0022F3  3               shwob:
0022F3  3               	lda #<objdta 			; objects table.
0022F3  3               	sta z80_l
0022F3  3               	lda #>objdta
0022F3  3               	sta z80_h
0022F3  3               
0022F3  3               	lda numob 			; number of objects in the game.
0022F3  3               	sta sprcnt
0022F3  3               shwob0:
0022F3  3               	ldy #32 			; distance to room number.
0022F3  3               	lda (z80_hl),y 			; same as an item?
0022F3  3               	cmp scno 			; current location.
0022F3  3               	bne :+
0022F3  3               	jsr dobj 			; yes, display object.
0022F3  3               :
0022F3  3               	clc
0022F3  3               	lda z80_l
0022F3  3               	adc #38 			; distance to next item.
0022F3  3               	sta z80_l
0022F3  3               	lda z80_h
0022F3  3               	adc #0
0022F3  3               	sta z80_h	 		; point to it.
0022F3  3               	dec sprcnt
0022F3  3               	bne shwob0 			; repeat for others.
0022F3  3               	rts
0022F3  3               
0022F3  3               ;---------------------------------------------------
0022F3  3               ; Display object.
0022F3  3               ; hl must point to object's start address.
0022F3  3               ;
0022F3  3               ; Input:
0022F3  3               ;  HL = object address
0022F3  3               ;---------------------------------------------------
0022F3  3               
0022F3  3               dobj:
0022F3  3               	ldy #33
0022F3  3               	lda (z80_hl),y 			; point to y.
0022F3  3               	sta dispy
0022F3  3               	iny
0022F3  3               	lda (z80_hl),y 			; point to x.
0022F3  3               	sta dispx
0022F3  3               dobj1:
0022F3  3               	jmp sprite 			; draw this sprite.
0022F3  3               
0022F3  3               ;--------------------------------------
0022F3  3               ; Remove an object.
0022F3  3               ;
0022F3  3               ; Input:
0022F3  3               ;  A = object number
0022F3  3               ;--------------------------------------
0022F3  3               
0022F3  3               remob:
0022F3  3               	cmp numob			; number of objects in game.
0022F3  3               	bcc :+				; are we checking past the end?
0022F3  3               	rts				; yes, can't get non-existent item.
0022F3  3               :
0022F3  3               	pha				; remember object.
0022F3  3               	jsr getob			; pick it up if we haven't already got it.
0022F3  3               	pla				; retrieve object number.
0022F3  3               	jsr gotob			; get its address.
0022F3  3               	lda #254
0022F3  3               	ldy #32
0022F3  3               	sta (z80_hl),y			; remove it.
0022F3  3               	rts
0022F3  3               
0022F3  3               ;---------------------------------------------------
0022F3  3               ; Pick up object number held in the accumulator.
0022F3  3               ;
0022F3  3               ; Input:
0022F3  3               ;  A = object number
0022F3  3               ;---------------------------------------------------
0022F3  3               
0022F3  3               getob:
0022F3  3               	cmp numob 		; number of objects in game.
0022F3  3               	bcc :+			; are we checking past the end?
0022F3  3               	rts			; yes, can't get non-existent item.
0022F3  3               :
0022F3  3               	jsr gotob 		; check if we already have it.
0022F3  3               	cmp #255
0022F3  3               	bne :+
0022F3  3               	rts			; we already do.
0022F3  3               :
0022F3  3               	ldy #32
0022F3  3               	lda (z80_hl),y		; is it on this screen?
0022F3  3               	cmp scno 		; current screen.
0022F3  3               	bne getob0		; not on screen, so nothing to delete.
0022F3  3               
0022F3  3               	lda #255
0022F3  3               	sta (z80_hl),y		; pick it up.
0022F3  3               	iny 			; point to y coord.
0022F3  3               getob1:
0022F3  3               	ldy #33
0022F3  3               	lda (z80_hl),y		; y coord.
0022F3  3               	sta dispy
0022F3  3               	ldy #34
0022F3  3               	lda (z80_hl),y 		; x coord.
0022F3  3               	sta dispx
0022F3  3               	jmp dobj1 		; delete object sprite.
0022F3  3               getob0:
0022F3  3               	lda #255
0022F3  3               	sta (z80_hl),y 		; pick it up.
0022F3  3               	rts
0022F3  3               .endif
0022F3  3               
0022F3  3               ;-----------------------------------------------------------------
0022F3  3               ; Got object check.
0022F3  3               ; Call with object in accumulator, returns zero set if in pockets.
0022F3  3               ;
0022F3  3               ; Input:
0022F3  3               ;  A = object number
0022F3  3               ;-----------------------------------------------------------------
0022F3  3               .if oflag .or mflag
0022F3  3               gotob:
0022F3  3               	cmp numob 		; number of objects in game.
0022F3  3               	bcc :+ 			; are we checking past the end?
0022F3  3               	jmp gotob0 		; yes, we can't have a non-existent object.
0022F3  3               :
0022F3  3               	jsr findob		; find the object.
0022F3  3               gotob1:
0022F3  3               	rts
0022F3  3               
0022F3  3               gotob0:
0022F3  3               	lda #254 		; missing.
0022F3  3               	jmp gotob1
0022F3  3               
0022F3  3               findob:
0022F3  3               	pha			; save object number
0022F3  3               	lda #<objdta 		; objects.
0022F3  3               	sta z80_l
0022F3  3               	lda #>objdta
0022F3  3               	sta z80_h
0022F3  3               	pla			; retreive object number
0022F3  3               	beq fndob1 		; is it zero? yes, skip loop.
0022F3  3               	tax 			; loop counter
0022F3  3               fndob2:
0022F3  3               	clc
0022F3  3               	lda z80_l
0022F3  3               	adc #38 		; size of each object.
0022F3  3               	sta z80_l
0022F3  3               	bcc :+
0022F3  3               	inc z80_h
0022F3  3               :
0022F3  3               	dex 			; repeat until we find address.
0022F3  3               	bne fndob2
0022F3  3               fndob1:
0022F3  3               	ldy #32			; distance to room it's in.
0022F3  3               	lda (z80_hl),y		; fetch status.
0022F3  3               	rts
0022F3  3               .endif
0022F3  3               
0022F3  3               ;---------------------------------------------
0022F3  3               ; Drop object number at (dispx, dispy).
0022F3  3               ;
0022F3  3               ; Input:
0022F3  3               ;  A = object number
0022F3  3               ;---------------------------------------------
0022F3  3               
0022F3  3               .if oflag
0022F3  3               drpob:
0022F3  3               	cmp numob 		; are we checking past the end?
0022F3  3               	bcc :+
0022F3  3               	rts			; yes, can't drop non-existent item.
0022F3  3               :
0022F3  3               	jsr gotob		; make sure object is in inventory.
0022F3  3               	cmp scno		; already on this screen?
0022F3  3               	bne :+
0022F3  3               	rts			; yes, nothing to do.
0022F3  3               :
0022F3  3               	ldy #32
0022F3  3               	lda scno
0022F3  3               	sta (z80_hl),y		; bring onto screen.
0022F3  3               	lda dispy		; sprite y coordinate.
0022F3  3               	iny
0022F3  3               	sta (z80_hl),y		; point to object y.
0022F3  3               	lda dispx 		; sprite x coordinate.
0022F3  3               	iny
0022F3  3               	sta (z80_hl),y 		; point to object x
0022F3  3               	jmp dobj		; draw the object sprite.
0022F3  3               
0022F3  3               ;-----------------------------------------------
0022F3  3               ; Seek objects at sprite position.
0022F3  3               ;
0022F3  3               ; Output:
0022F3  3               ;  A = object number, if not found A=255
0022F3  3               ;-----------------------------------------------
0022F3  3               
0022F3  3               skobj:
0022F3  3               	lda #<objdta 		; pointer to objects.
0022F3  3               	sta z80_l
0022F3  3               	lda #>objdta
0022F3  3               	sta z80_h
0022F3  3               
0022F3  3               	lda numob 		; number of objects in game.
0022F3  3               	sta z80_b 		; set up the loop counter.
0022F3  3               skobj0:
0022F3  3               	lda scno		; current room number.
0022F3  3               	ldy #32
0022F3  3               	cmp (z80_hl),y		; is object in here?
0022F3  3               	bne :+
0022F3  3               	jsr skobj1		; yes, check coordinates.
0022F3  3               :
0022F3  3               	clc			; point to next object in table.
0022F3  3               	lda z80_l
0022F3  3               	adc #38			; size of each object.
0022F3  3               	sta z80_l
0022F3  3               	bcc :+
0022F3  3               	inc z80_h
0022F3  3               :
0022F3  3               	dec z80_b
0022F3  3               	bne skobj0		; repeat for all objects.
0022F3  3               
0022F3  3               	lda #255		; end of list and nothing found, return 255.
0022F3  3               	rts
0022F3  3               
0022F3  3               skobj1:
0022F3  3               	ldy #33			; point to y coordinate.
0022F3  3               	lda (z80_hl),y		; point to y coordinate.
0022F3  3               	sec
0022F3  3               	ldy #8
0022F3  3               	sbc (z80_ix),y 		; subtract sprite y.
0022F3  3               	clc
0022F3  3               	adc #15			; add sprite height minus one.
0022F3  3               	cmp #31			; within range?
0022F3  3               	bcs skobj2		; no, ignore object.
0022F3  3               
0022F3  3               	ldy #34			; point to x coordinate now.
0022F3  3               	lda (z80_hl),y 		; get coordinate.
0022F3  3               	sec
0022F3  3               	ldy #9
0022F3  3               	sbc (z80_ix),y 		; subtract the sprite x.
0022F3  3               	clc			; add sprite width minus one.
0022F3  3               	adc #15
0022F3  3               	cmp #31			; within range?
0022F3  3               	bcs skobj2		; no, ignore object.
0022F3  3               
0022F3  3               	pla			; remove return address from stack.
0022F3  3               	pla
0022F3  3               
0022F3  3               	lda numob 		; objects in game.
0022F3  3               	sec
0022F3  3               	sbc z80_b		; subtract loop counter.
0022F3  3               skobj2:
0022F3  3               	rts			; accumulator now points to object.
0022F3  3               .endif
0022F3  3               
0022F3  3               ;---------------------------------------------------------------------
0022F3  3               ; Spawn a new sprite.
0022F3  3               ;---------------------------------------------------------------------
0022F3  3               
0022F3  3                 offset = 20
0022F3  3               
0022F3  3               ;.repeat 343
0022F3  3               ;  .byte 0
0022F3  3               ;.endrep
0022F3  3               
0022F3  3               spawn:
0022F3  3  A9 08        	lda #<sprtab		; sprite table.
0022F5  3  85 66        	sta z80_l
0022F7  3  A9 33        	lda #>sprtab
0022F9  3  85 67        	sta z80_h
0022FB  3               numsp1:
0022FB  3  A9 0C        	lda #NUMSPR		; number of sprites.
0022FD  3  85 rr        	sta spcnt
0022FF  3               spaw0:
0022FF  3  A0 00        	ldy #0
002301  3  B1 66        	lda (z80_hl),y		; get sprite type.
002303  3  C9 FF        	cmp #255		; is it an unused slot?
002305  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002307  3               
002307  3  18           	clc 			; point to next sprite in table.
002308  3  A5 66        	lda z80_l
00230A  3  69 11        	adc #TABSIZ		; size of each entry.
00230C  3  85 66        	sta z80_l
00230E  3  90 02        	bcc :+
002310  3  E6 67        	inc z80_h
002312  3               :
002312  3  C6 rr        	dec spcnt		; one less iteration.
002314  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002316  3               
002316  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002316  3               
002316  3               spaw1:
002316  3  A5 69        	lda z80_i		; address of original sprite.
002318  3  48           	pha
002319  3  A5 68        	lda z80_x
00231B  3  48           	pha
00231C  3               
00231C  3  A5 66        	lda z80_l		; store spawned sprite address.
00231E  3  85 rr        	sta spptr
002320  3  A5 67        	lda z80_h
002322  3  85 rr        	sta spptr+1
002324  3               
002324  3  A5 62        	lda z80_c
002326  3  A0 00        	ldy #0
002328  3  91 66        	sta (z80_hl),y 		; set the type.
00232A  3  A0 05        	ldy #5
00232C  3  91 66        	sta (z80_hl),y		; copy
00232E  3               
00232E  3  A5 63        	lda z80_b
002330  3  A0 01        	ldy #1
002332  3  91 66        	sta (z80_hl),y		; set the image.
002334  3  A0 06        	ldy #6
002336  3  91 66        	sta (z80_hl),y		; copy
002338  3               
002338  3  A9 00        	lda #0 			; frame zero.
00233A  3  A0 02        	ldy #2
00233C  3  91 66        	sta (z80_hl),y		; set frame.
00233E  3  A0 07        	ldy #7
002340  3  91 66        	sta (z80_hl),y		; copy
002342  3               
002342  3  A0 08        	ldy #8
002344  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002346  3  A0 03        	ldy #3
002348  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
00234A  3  A0 08        	ldy #8
00234C  3  91 66        	sta (z80_hl),y		; copy
00234E  3               
00234E  3  A0 09        	ldy #9
002350  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002352  3  A0 04        	ldy #4
002354  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002356  3  A0 09        	ldy #9
002358  3  91 66        	sta (z80_hl),y		; copy
00235A  3               
00235A  3  A0 0A        	ldy #10			; direction of original.
00235C  3  B1 68        	lda (z80_ix),y
00235E  3  91 66        	sta (z80_hl),y		; direction
002360  3               
002360  3  A9 00        	lda #0
002362  3  A0 0B        	ldy #11
002364  3  91 66        	sta (z80_hl),y		; reset parameter.
002366  3  C8           	iny
002367  3  91 66        	sta (z80_hl),y		; reset parameter.
002369  3  C8           	iny
00236A  3  91 66        	sta (z80_hl),y		; reset parameter.
00236C  3  C8           	iny
00236D  3  91 66        	sta (z80_hl),y		; reset parameter.
00236F  3               rtssp:
00236F  3  A5 rr        	lda spptr		; address of new sprite.
002371  3  85 68        	sta z80_x
002373  3  A5 rr        	lda spptr+1
002375  3  85 69        	sta z80_i
002377  3               evis1:
002377  3  20 23 34     	jsr evnt09 		; call sprite initialisation event.
00237A  3               
00237A  3  A5 rr        	lda spptr 		; address of new sprite.
00237C  3  85 68        	sta z80_x
00237E  3  A5 rr        	lda spptr+1
002380  3  85 69        	sta z80_i
002382  3  20 D1 2D     	jsr sspria 		; display the new sprite.
002385  3               
002385  3  68           	pla			; address of original sprite.
002386  3  85 68        	sta z80_x
002388  3  68           	pla
002389  3  85 69        	sta z80_i
00238B  3               
00238B  3  60           	rts
00238C  3               
00238C  3               ;spcnt:	.byte 0
00238C  3               ;spptr:	.word 0			; spawned sprite pointer.
00238C  3               ;seed:	.byte 0			; seed for random numbers.
00238C  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002390  3  30 30        
002392  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002396  3  30 30        
002398  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00239C  3  30 30        
00239E  3  00 E4        grbase:	.word ScreenAddr	; graphics base address.
0023A0  3               
0023A0  3               ;----------------------------------------------------
0023A0  3               ; Check y-pos
0023A0  3               ;----------------------------------------------------
0023A0  3               
0023A0  3               checkx:
0023A0  3  A5 rr        	lda dispy		; y position.
0023A2  3  C9 18        	cmp #24			; off screen?
0023A4  3  B0 01        	bcs :+
0023A6  3  60           	rts			; no, it's okay.
0023A7  3               :
0023A7  3  68           	pla			; remove return address from stack.
0023A8  3  85 66        	sta z80_l
0023AA  3  68           	pla
0023AB  3  85 67        	sta z80_h
0023AD  3  60           	rts
0023AE  3               
0023AE  3               ;-----------------------------------------------
0023AE  3               ; Displays the current high score.
0023AE  3               ;-----------------------------------------------
0023AE  3               
0023AE  3               dhisc:
0023AE  3  A9 92        	lda #<hiscor 		; high score text.
0023B0  3  8D E5 23     	sta dscor3+1
0023B3  3  8D 00 24     	sta bscor3+1
0023B6  3  A9 23        	lda #>hiscor
0023B8  3  8D E6 23     	sta dscor3+2
0023BB  3  8D 01 24     	sta bscor3+2
0023BE  3  4C D1 23     	jmp dscor1		; check in printable range then show 6 digits.
0023C1  3               
0023C1  3               ;------------------------------------------------------
0023C1  3               ; Displays the current score.
0023C1  3               ;------------------------------------------------------
0023C1  3               
0023C1  3               ;.repeat 322
0023C1  3               ;  .byte 0
0023C1  3               ;.endrep
0023C1  3               
0023C1  3               dscor:
0023C1  3  A9 8C        	lda #<score		; score text.
0023C3  3  8D E5 23     	sta dscor3+1
0023C6  3  8D 00 24     	sta bscor3+1
0023C9  3  A9 23        	lda #>score
0023CB  3  8D E6 23     	sta dscor3+2
0023CE  3  8D 01 24     	sta bscor3+2
0023D1  3               dscor1:
0023D1  3  8C FC 23     	sty tmpscr
0023D4  3  20 73 2B     	jsr preprt		; set up font and print position.
0023D7  3  20 A0 23     	jsr checkx		; make sure we're in a printable range.
0023DA  3               
0023DA  3               ;	lda #6			; digits to display.
0023DA  3               ;	sta z80_b
0023DA  3  A5 rr        	lda prtmod		; get print mode.
0023DC  3  F0 03        	beq :+			; standard size text?
0023DE  3  4C FD 23     	jmp bscor0		; no, show double-height.
0023E1  3               :
0023E1  3               dscor0:
0023E1  3               ;	ldy #0
0023E1  3               ;	lda (z80_hl),y 		; fetch character.
0023E1  3  AC FC 23     	ldy tmpscr
0023E4  3               dscor3:
0023E4  3  B9 8C 23     	lda score,y
0023E7  3  20 34 25     	jsr pchar 		; display character.
0023EA  3  E6 rr        	inc dispx		; move along x coordinate
0023EC  3               
0023EC  3               ;	inc z80_l		; next score column.
0023EC  3               ;	bne :+
0023EC  3               ;	inc z80_h
0023EC  3               ;:
0023EC  3  EE FC 23     	inc tmpscr
0023EF  3  C6 63        	dec z80_b
0023F1  3  D0 EE        	bne dscor0 		; repeat for all digits.
0023F3  3               dscor2:
0023F3  3  A5 rr        	lda dispx 		; set up display coordinates.
0023F5  3  85 rr        	sta charx
0023F7  3  A5 rr        	lda dispy
0023F9  3  85 rr        	sta chary
0023FB  3  60           	rts
0023FC  3               
0023FC  3  00           tmpscr:	.byte 0
0023FD  3               ;------------------------------------------------------
0023FD  3               ; Displays the current score in double-height characters.
0023FD  3               ;
0023FD  3               ; Input:
0023FD  3               ;  B  = digit number
0023FD  3               ;  HL = score string
0023FD  3               ;------------------------------------------------------
0023FD  3               
0023FD  3               bscor0:
0023FD  3               ;	ldy #0
0023FD  3               
0023FD  3               ;	lda (z80_hl),y 		; fetch character.
0023FD  3  A4 rr        	ldy tmp
0023FF  3               bscor3:
0023FF  3  B9 8C 23     	lda score,y
002402  3  20 FA 2A     	jsr bchar 		; display big char.
002405  3               
002405  3               ;	inc z80_l 		; next score column.
002405  3               ;	bne :+
002405  3               ;	inc z80_h
002405  3               ;:
002405  3  E6 rr        	inc tmp
002407  3  C6 63        	dec z80_b
002409  3  F0 03        	beq :+
00240B  3  4C FD 23     	jmp bscor0 		; repeat for all digits.
00240E  3               :
00240E  3  4C F3 23     	jmp dscor2 		; tidy up line and column variables.
002411  3               
002411  3               ;-----------------------------------------------------
002411  3               ; Adds number in the hl pair to the score.
002411  3               ;-----------------------------------------------------
002411  3               
002411  3               addsc:
002411  3  A9 8D        	lda #<(score+1) 	; ten thousands column.
002413  3  85 64        	sta z80_e
002415  3  A9 23        	lda #>(score+1)
002417  3  85 65        	sta z80_d
002419  3  A9 10        	lda #<10000		; amount to add each time.
00241B  3  85 62        	sta z80_c
00241D  3  A9 27        	lda #>10000
00241F  3  85 63        	sta z80_b
002421  3  20 65 24     	jsr incsc		; add to score.
002424  3               
002424  3  E6 64        	inc z80_e		; thousands column.
002426  3  D0 02        	bne :+
002428  3  E6 65        	inc z80_d
00242A  3               :
00242A  3  A9 E8        	lda #<1000		; amount to add each time.
00242C  3  85 62        	sta z80_c
00242E  3  A9 03        	lda #>1000
002430  3  85 63        	sta z80_b
002432  3  20 65 24     	jsr incsc 		; add to score.
002435  3               
002435  3  E6 64        	inc z80_e		; hundreds column.
002437  3  D0 02        	bne :+
002439  3  E6 65        	inc z80_d
00243B  3               :
00243B  3  A9 64        	lda #<100		; amount to add each time.
00243D  3  85 62        	sta z80_c
00243F  3  A9 00        	lda #>100
002441  3  85 63        	sta z80_b
002443  3  20 65 24     	jsr incsc		; add to score.
002446  3               
002446  3  E6 64        	inc z80_e 		; tens column.
002448  3  D0 02        	bne :+
00244A  3  E6 65        	inc z80_d
00244C  3               :
00244C  3  A9 0A        	lda #<10		; amount to add each time.
00244E  3  85 62        	sta z80_c
002450  3  A9 00        	lda #>10
002452  3  85 63        	sta z80_b
002454  3  20 65 24     	jsr incsc 		; add to score.
002457  3               
002457  3  E6 64        	inc z80_e		; units column.
002459  3  D0 02        	bne :+
00245B  3  E6 65        	inc z80_d
00245D  3               :
00245D  3  A9 01        	lda #<1			; units.
00245F  3  85 62        	sta z80_c
002461  3  A9 00        	lda #>1
002463  3  85 63        	sta z80_b
002465  3               incsc:
002465  3  A5 67        	lda z80_h		; store amount to add.
002467  3  48           	pha
002468  3  A5 66        	lda z80_l
00246A  3  48           	pha
00246B  3               
00246B  3  38           	sec			; subtract from amount to add.
00246C  3  A5 66        	lda z80_l
00246E  3  E5 62        	sbc z80_c
002470  3  85 66        	sta z80_l
002472  3  A5 67        	lda z80_h
002474  3  E5 63        	sbc z80_b
002476  3  85 67        	sta z80_h
002478  3  90 14        	bcc incsc0		; too much, restore value.
00247A  3               
00247A  3  68           	pla			; delete the previous amount from the stack.
00247B  3  68           	pla
00247C  3               
00247C  3  A5 65        	lda z80_d 		; store column position.
00247E  3  48           	pha
00247F  3  A5 64        	lda z80_e
002481  3  48           	pha
002482  3  20 95 24     	jsr incsc2		; do the increment.
002485  3               
002485  3  68           	pla			; restore column.
002486  3  85 64        	sta z80_e
002488  3  68           	pla
002489  3  85 65        	sta z80_d
00248B  3  4C 65 24     	jmp incsc		; repeat until all added.
00248E  3               
00248E  3               incsc0:
00248E  3  68           	pla			; restore previous value.
00248F  3  85 66        	sta z80_l
002491  3  68           	pla
002492  3  85 67        	sta z80_h
002494  3  60           	rts
002495  3               incsc2:
002495  3  A0 00        	ldy #0
002497  3  B1 64        	lda (z80_de),y 		; get amount.
002499  3  18           	clc
00249A  3  69 01        	adc #1			; add one to column.
00249C  3  91 64        	sta (z80_de),y		; write new column total.
00249E  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
0024A0  3  B0 01        	bcs :+
0024A2  3  60           	rts			; no, carry on.
0024A3  3               :
0024A3  3  A9 30        	lda #'0'		; make it zero.
0024A5  3  91 64        	sta (z80_de),y		; write new column total.
0024A7  3  C6 64        	dec z80_e		; back one column.
0024A9  3  D0 02        	bne :+
0024AB  3  C6 65        	dec z80_d
0024AD  3               :
0024AD  3  4C 95 24     	jmp incsc2
0024B0  3               
0024B0  3               ;------------------------------------
0024B0  3               ; Add bonus to score and reset bonus
0024B0  3               ;------------------------------------
0024B0  3               
0024B0  3               addbo:
0024B0  3  A2 05        	ldx #5			; last digit.
0024B2  3  18           	clc
0024B3  3               addbo0:
0024B3  3  BD 8C 23     	lda score,x		; get score.
0024B6  3  7D 98 23     	adc bonus,x		; add bonus.
0024B9  3  38           	sec			; 0 to 18.
0024BA  3  E9 30        	sbc #48
0024BC  3  48           	pha
0024BD  3  A9 30        	lda #'0'
0024BF  3  9D 98 23     	sta bonus,x
0024C2  3  68           	pla
0024C3  3  C9 3A        	cmp #58
0024C5  3  90 03        	bcc addbo1
0024C7  3  38           	sec
0024C8  3  E9 0A        	sbc #10
0024CA  3               addbo1:
0024CA  3  9D 8C 23     	sta score,x		; zeroise bonus.
0024CD  3  CA           	dex			; next digit.
0024CE  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0024D0  3  60           	rts
0024D1  3               
0024D1  3               ;------------------------------------
0024D1  3               ; Swap score and bonus.
0024D1  3               ;------------------------------------
0024D1  3               
0024D1  3               swpsb:
0024D1  3  A2 05        	ldx #5			; digits to add.
0024D3  3               swpsb0:
0024D3  3  BD 8C 23     	lda score,x 		; get score digits.
0024D6  3  48           	pha			; save digit
0024D7  3  BD 98 23     	lda bonus,x 		; get bonus digits.
0024DA  3  9D 8C 23     	sta score,x		; switch score-bonus
0024DD  3  68           	pla
0024DE  3  9D 98 23     	sta bonus,x
0024E1  3  CA           	dex 			; repeat for all 6 digits.
0024E2  3  10 EF        	bpl swpsb0
0024E4  3  60           	rts
0024E5  3               
0024E5  3               ;----------------------------------------------------
0024E5  3               ; Get print address.
0024E5  3               ;----------------------------------------------------
0024E5  3               
0024E5  3               gprad:
0024E5  3  A5 rr        	lda dispx		; get x
0024E7  3  85 rr        	sta scraddr		; store lb address
0024E9  3               
0024E9  3  2A           	rol a
0024EA  3  26 rr        	rol tmp
0024EC  3  2A           	rol a
0024ED  3  26 rr        	rol tmp
0024EF  3  2A           	rol a
0024F0  3  26 rr        	rol tmp
0024F2  3  A5 rr        	lda tmp
0024F4  3  29 07        	and #7
0024F6  3  85 rr        	sta tmp
0024F8  3  A5 rr        	lda prtmod
0024FA  3  F0 02        	beq :+
0024FC  3  06 rr        	asl tmp
0024FE  3               :
0024FE  3  A5 rr        	lda tmp
002500  3  18           	clc
002501  3  65 rr        	adc dispy		; get y
002503  3  69 E4        	adc #>ScreenAddr		; add $80
002505  3  85 rr        	sta scraddr+1		; store hb address
002507  3  60           	rts
002508  3               
002508  3               ;--------------------------------------------------------------
002508  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002508  3               ;
002508  3               ; Output:
002508  3               ;  bufaddr = MAP + dispy*32 + dispx
002508  3               ;--------------------------------------------------------------
002508  3               
002508  3               pradd:
002508  3  A5 rr        	lda dispy 		; y coordinate.
00250A  3  85 rr        	sta bufaddr
00250C  3  A9 00        	lda #0
00250E  3  85 rr        	sta bufaddr+1
002510  3  06 rr        	asl bufaddr  		; multiply char by 32
002512  3  26 rr        	rol bufaddr+1
002514  3  06 rr        	asl bufaddr
002516  3  26 rr        	rol bufaddr+1
002518  3  06 rr        	asl bufaddr
00251A  3  26 rr        	rol bufaddr+1
00251C  3  06 rr        	asl bufaddr
00251E  3  26 rr        	rol bufaddr+1
002520  3  06 rr        	asl bufaddr
002522  3  26 rr        	rol bufaddr+1
002524  3  18           	clc			; add address of MAP graphics.
002525  3  A5 rr        	lda bufaddr
002527  3  65 rr        	adc dispx
002529  3  69 00        	adc #<MAP
00252B  3  85 rr        	sta bufaddr
00252D  3  A5 rr        	lda bufaddr+1
00252F  3  69 DD        	adc #>MAP
002531  3  85 rr        	sta bufaddr+1
002533  3  60           	rts
002534  3               
002534  3               ;----------------------------------------------------
002534  3               ; Display character in A at dispx,dispy.
002534  3               ;
002534  3               ; Input:
002534  3               ;  A 	   = character to print
002534  3               ;----------------------------------------------------
002534  3               
002534  3               pchar:
002534  3  85 rr        	sta fntaddr
002536  3  A9 00        	lda #0
002538  3  85 rr        	sta fntaddr+1
00253A  3  06 rr        	asl fntaddr  		; multiply char by 8.
00253C  3  26 rr        	rol fntaddr+1
00253E  3  06 rr        	asl fntaddr
002540  3  26 rr        	rol fntaddr+1
002542  3  06 rr        	asl fntaddr
002544  3  26 rr        	rol fntaddr+1
002546  3               
002546  3  A5 rr        	lda fntaddr
002548  3  18           	clc
002549  3  69 85        	adc #<(FONT-256)
00254B  3  85 rr        	sta fntaddr		; that's the low byte.
00254D  3  A5 rr        	lda fntaddr+1
00254F  3  69 34        	adc #>(FONT-256)
002551  3  85 rr        	sta fntaddr+1		; add displacement.
002553  3               pchark:
002553  3  20 E5 24     	jsr gprad		; get screen address.
002556  3  A2 07        	ldx #7			; lines to write.
002558  3               pchar0:
002558  3  A0 00        	ldy #0
00255A  3  B1 rr        	lda (fntaddr),y 	; get image byte.
00255C  3  BC 6B 25     	ldy scrtab,x		; Get rowoffset
00255F  3               .if iflag
00255F  3               	eor #$ff
00255F  3               .endif
00255F  3  91 rr        	sta (scraddr),y 	; copy to screen.
002561  3  E6 rr        	inc fntaddr		; next image byte.
002563  3  D0 02        	bne :+
002565  3  E6 rr        	inc fntaddr+1
002567  3               :
002567  3  CA           	dex			; next screen row down.
002568  3  10 EE        	bpl pchar0		; repeat.
00256A  3  60           	rts
00256B  3               
00256B  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
00256F  3  60 40 20 00  
002573  3               
002573  3               ;----------------------------------------------
002573  3               
002573  3               ; Print attributes, properties and pixels.
002573  3               ;
002573  3               ; Input:
002573  3               ;  A	= tile number
002573  3               ;----------------------------------------------
002573  3               
002573  3               ;.repeat 294
002573  3               ;  .byte 0
002573  3               ;.endrep
002573  3               
002573  3               pbpattr:			; entry PUTBLOCK command
002573  3  A4 rr        	ldy charx
002575  3  84 rr        	sty dispx
002577  3  A4 rr        	ldy chary
002579  3  84 rr        	sty dispy
00257B  3               pattr:
00257B  3               .if aflag
00257B  3               	pha
00257B  3               	jsr wbloc		; save blockinfo
00257B  3               	pla
00257B  3               .endif
00257B  3               
00257B  3               pattr2:
00257B  3  85 63        	sta z80_b		; store cell in b register for now.
00257D  3  AA           	tax
00257E  3  BD C9 34     	lda bprop,x 		; block properties.
002581  3  85 62        	sta z80_c
002583  3  C9 08        	cmp #COLECT
002585  3  D0 05        	bne :+
002587  3  A5 63        	lda z80_b
002589  3  8D 9A 25     	sta colpatt
00258C  3               :
00258C  3  20 08 25     	jsr pradd 		; get property buffer address.
00258F  3  A5 62        	lda z80_c
002591  3  A0 00        	ldy #0
002593  3  91 rr        	sta (bufaddr),y 	; write property.
002595  3  A5 63        	lda z80_b 		; restore cell.
002597  3  4C 9B 25     	jmp panp
00259A  3               ; Print attributes, no properties.
00259A  3               
00259A  3               ;.repeat 263
00259A  3               ; .byte 0
00259A  3               ;.endrep
00259A  3               
00259A  3  00           colpatt:	.byte 0
00259B  3               
00259B  3               panp:
00259B  3  85 64        	sta z80_e		; displacement in e.
00259D  3  A9 00        	lda #0
00259F  3  85 65        	sta z80_d		; no high byte.
0025A1  3  06 64        	asl z80_e  		; multiply char by 8.
0025A3  3  26 65        	rol z80_d
0025A5  3  06 64        	asl z80_e
0025A7  3  26 65        	rol z80_d
0025A9  3  06 64        	asl z80_e
0025AB  3  26 65        	rol z80_d
0025AD  3  18           	clc
0025AE  3  A5 64        	lda z80_e
0025B0  3  69 C1        	adc #<chgfx 		; address of graphics.
0025B2  3  85 rr        	sta tileaddr
0025B4  3  A5 65        	lda z80_d
0025B6  3  69 34        	adc #>chgfx
0025B8  3  85 rr        	sta tileaddr+1
0025BA  3  20 E5 24     	jsr gprad 		; get screen address.
0025BD  3  A2 07        	ldx #7			; number of pixel rows to write.
0025BF  3               panp0:
0025BF  3  A0 00        	ldy #0
0025C1  3  B1 rr        	lda (tileaddr),y 	; get image byte.
0025C3  3               .if iflag
0025C3  3               	eor #$ff		; Invert
0025C3  3               .endif
0025C3  3  BC 6B 25     	ldy scrtab,x
0025C6  3  91 rr        	sta (scraddr),y 	; copy to screen.
0025C8  3  E6 rr        	inc tileaddr 		; next image byte.
0025CA  3  D0 02        	bne :+
0025CC  3  E6 rr        	inc tileaddr+1
0025CE  3               :
0025CE  3  CA           	dex	 		; repeat for 8 pixel rows.
0025CF  3  10 EE        	bpl panp0
0025D1  3  E6 rr        	inc dispx 		; move along one.
0025D3  3  E6 rr        	inc charx
0025D5  3  60           	rts
0025D6  3               
0025D6  3               ;----------------------------------------------
0025D6  3               ; Write block
0025D6  3               ;----------------------------------------------
0025D6  3               
0025D6  3               .if aflag
0025D6  3               wbloc:
0025D6  3               	ldy #3
0025D6  3               	sta (pbptr),y		; store block number
0025D6  3               	dey
0025D6  3               	lda dispx
0025D6  3               	sta (pbptr),y		; write x position of block.
0025D6  3               	dey
0025D6  3               	lda dispy
0025D6  3               	sta (pbptr),y		; write y position of block.
0025D6  3               	dey
0025D6  3               	lda scno
0025D6  3               	sta (pbptr),y		; write screen.
0025D6  3               	clc			; point to next free location
0025D6  3               	lda pbptr
0025D6  3               	adc #4
0025D6  3               	sta pbptr
0025D6  3               	bcc :+
0025D6  3               	inc pbptr+1
0025D6  3               :
0025D6  3               	rts
0025D6  3               .endif
0025D6  3               
0025D6  3               ;----------------------------------------------
0025D6  3               ; Print character pixels, no more.
0025D6  3               ;
0025D6  3               ; Input:
0025D6  3               ;  A	= character to print
0025D6  3               ;----------------------------------------------
0025D6  3               
0025D6  3               pchr:
0025D6  3  20 34 25     	jsr pchar 		; show character in accumulator.
0025D9  3  E6 rr        	inc dispx		; move along one.
0025DB  3  60           	rts
0025DC  3               
0025DC  3               ;----------------------------------------------------
0025DC  3               ; Shifter sprite routine for objects.
0025DC  3               ;----------------------------------------------------
0025DC  3               
0025DC  3               .if oflag
0025DC  3               sprit7:
0025DC  3               	lda z80_b
0025DC  3               	beq sprit0
0025DC  3               	sta z80_a
0025DC  3               sprit3:
0025DC  3               	lsr spr			; shift into position.
0025DC  3               	ror spr+1
0025DC  3               	ror spr+2
0025DC  3               	dec z80_a		; one less iteration.
0025DC  3               	bne sprit3
0025DC  3               sprit0:
0025DC  3               	rts 			; now apply to screen.
0025DC  3               
0025DC  3               ;----------------------------------------------------
0025DC  3               ; Draw sprite
0025DC  3               ;----------------------------------------------------
0025DC  3               
0025DC  3               sprite:
0025DC  3               	stx xtmp		; Save X-reg
0025DC  3               	jsr scadd 		; get screen address in scraddr.
0025DC  3               
0025DC  3               	lda dispx 		; x position.
0025DC  3               	and #7 			; position straddling cells.
0025DC  3               	sta z80_b		; store in b register.
0025DC  3               
0025DC  3               	lda z80_l		; store sprite graphic address.
0025DC  3               	sta sprit1+1
0025DC  3               	sta sprit2+1
0025DC  3               	lda z80_h
0025DC  3               	sta sprit1+2
0025DC  3               	sta sprit2+2
0025DC  3               
0025DC  3               	ldx #0			; pixel height.
0025DC  3               	ldy #0
0025DC  3               sprit1:
0025DC  3               	lda objdta,x		; fetch first byte.
0025DC  3               	sta spr
0025DC  3               	inx
0025DC  3               sprit2:
0025DC  3               	lda objdta,x
0025DC  3               	sta spr+1
0025DC  3               
0025DC  3               	lda #0
0025DC  3               	sta spr+2
0025DC  3               	jsr sprit7		; shift sprite
0025DC  3               
0025DC  3               	dex
0025DC  3               	lda spr			; fetch graphic.
0025DC  3               	ldy spritetab,x
0025DC  3               	eor (scraddr),y		; merge with screen image.
0025DC  3               	sta (scraddr),y		; write to screen.
0025DC  3               	inx			; next screen byte.
0025DC  3               
0025DC  3               	lda spr+1		; fetch graphic.
0025DC  3               	ldy spritetab,x
0025DC  3               	eor (scraddr),y		; merge with screen image.
0025DC  3               	sta (scraddr),y		; write to screen.
0025DC  3               	iny
0025DC  3               
0025DC  3               	lda spr+2		; fetch graphic.
0025DC  3               	eor (scraddr),y		; merge with screen image.
0025DC  3               	sta (scraddr),y		; write to screen.
0025DC  3               
0025DC  3               	inx			; next source byte.
0025DC  3               	cpx #16
0025DC  3               	bne :+
0025DC  3               	inc scraddr+1
0025DC  3               :
0025DC  3               	cpx #32
0025DC  3               	bne sprit1		; repeat
0025DC  3               
0025DC  3               	ldx xtmp		; retreive X-reg
0025DC  3               	rts
0025DC  3               
0025DC  3               spritetab:
0025DC  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0025DC  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0025DC  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0025DC  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0025DC  3               
0025DC  3               spr:	.byte 0,0,0
0025DC  3               
0025DC  3               ;xtmp:	.byte 0
0025DC  3               .endif
0025DC  3               
0025DC  3               ;-----------------------------------------------------------
0025DC  3               ; Get room address.
0025DC  3               ;-----------------------------------------------------------
0025DC  3               
0025DC  3               ;.repeat 273
0025DC  3               ;  .byte 0
0025DC  3               ;.endrep
0025DC  3               
0025DC  3               groom:
0025DC  3  A6 rr        	ldx scno 		; screen number.
0025DE  3  A0 00        	ldy #0
0025E0  3               groomx:
0025E0  3  A9 4E        	lda #<scdat 		; pointer to screens.
0025E2  3  85 66        	sta z80_l
0025E4  3  A9 35        	lda #>scdat
0025E6  3  85 67        	sta z80_h
0025E8  3               groom1:
0025E8  3  E0 00        	cpx #0			; is it the first one?
0025EA  3  F0 15        	beq groom0 		; no more screens to skip.
0025EC  3               
0025EC  3  18           	clc
0025ED  3  A5 66        	lda z80_l
0025EF  3  79 4E 35     	adc scdat,y 		; low byte of screen size.
0025F2  3  85 66        	sta z80_l
0025F4  3  C8           	iny			; point to high byte.
0025F5  3  A5 67        	lda z80_h
0025F7  3  79 4E 35     	adc scdat,y 		; high byte of screen size.
0025FA  3  85 67        	sta z80_h
0025FC  3  C8           	iny			; next address.
0025FD  3               
0025FD  3  CA           	dex 			; one less iteration.
0025FE  3  4C E8 25     	jmp groom1 		; loop until we reach the end.
002601  3               groom0:
002601  3  AD 59 35     	lda numsc 		; add displacement.
002604  3  0A           	asl a
002605  3  18           	clc			; add double displacement to address.
002606  3  65 66        	adc z80_l
002608  3  85 66        	sta z80_l
00260A  3  A5 67        	lda z80_h
00260C  3  69 00        	adc #0
00260E  3  85 67        	sta z80_h
002610  3  60           	rts
002611  3               
002611  3               ;-----------------------------------------------------------
002611  3               ; Draw present room.
002611  3               ;-----------------------------------------------------------
002611  3               
002611  3               droom:
002611  3  AD 1D 20     	lda wintop 		; window top.
002614  3  85 rr        	sta dispy		; set cursor y position.
002616  3               droom2:
002616  3  20 DC 25     	jsr groom 		; get address of current room.
002619  3  A9 00        	lda #0	 		; zero in accumulator.
00261B  3  85 rr        	sta comcnt 		; reset compression counter.
00261D  3  AD 1F 20     	lda winhgt 		; height of window.
002620  3  85 rr        	sta rrow		; set row counter
002622  3               droom0:
002622  3  AD 1E 20     	lda winlft 		; window left edge.
002625  3  85 rr        	sta dispx 		; set cursor x position.
002627  3  AD 20 20     	lda winwid 		; width of window.
00262A  3  85 rr        	sta rcol		; set column counter
00262C  3               droom1:
00262C  3  20 3D 26     	jsr flbyt 		; decompress next byte on the fly.
00262F  3  20 7B 25     	jsr pattr2 		; show attributes and block.
002632  3  C6 rr        	dec rcol		; one less column.
002634  3  D0 F6        	bne droom1 		; repeat for entire line.
002636  3  E6 rr        	inc dispy		; move down one line.
002638  3  C6 rr        	dec rrow 		; one less row.
00263A  3  D0 E6        	bne droom0 		; repeat for all rows.
00263C  3  60           	rts
00263D  3               
00263D  3               ;rcol:	.byte 0
00263D  3               ;rrow:	.byte 0
00263D  3               
00263D  3               ;----------------------------------------------
00263D  3               ; Decompress bytes on-the-fly.
00263D  3               ;----------------------------------------------
00263D  3               
00263D  3               flbyt:
00263D  3  A5 rr        	lda comcnt 		; compression counter.
00263F  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002641  3               
002641  3  A0 00        	ldy #0
002643  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002645  3  E6 66        	inc z80_l 		; point to next cell.
002647  3  D0 02        	bne :+
002649  3  E6 67        	inc z80_h
00264B  3               :
00264B  3  C9 FF        	cmp #255 		; is this byte a control code?
00264D  3  F0 01        	beq :+
00264F  3  60           	rts 			; no, this byte is uncompressed.
002650  3               :
002650  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002652  3  85 rr        	sta combyt 		; set up the type.
002654  3  E6 66        	inc z80_l 		; point to quantity.
002656  3  D0 02        	bne :+
002658  3  E6 67        	inc z80_h
00265A  3               :
00265A  3  B1 66        	lda (z80_hl),y 		; get quantity.
00265C  3  E6 66        	inc z80_l 		; point to next byte.
00265E  3  D0 02        	bne :+
002660  3  E6 67        	inc z80_h
002662  3               :
002662  3               flbyt1:
002662  3  85 rr        	sta comcnt 		; store new quantity.
002664  3  C6 rr        	dec comcnt		; one less.
002666  3  A5 rr        	lda combyt 		; byte to expand.
002668  3  60           	rts
002669  3               
002669  3               ;combyt:	.byte 0			; byte type compressed.
002669  3               ;comcnt:	.byte 0			; compression counter.
002669  3               
002669  3               ;------------------------------------------
002669  3               ; Ladder down check.
002669  3               ;
002669  3               ; Input:
002669  3               ;  IX = sprite pointer
002669  3               ;------------------------------------------
002669  3               
002669  3               .if lflag
002669  3               laddd:
002669  3               	ldy #9
002669  3               	lda (z80_ix),y		; x coordinate.
002669  3               	sta dispx
002669  3               
002669  3               	ldy #8
002669  3               	lda (z80_ix),y		; y coordinate.
002669  3               	and #254		; make it even.
002669  3               	sta (z80_ix),y 		; reset it.
002669  3               	clc 			; look down 16 pixels.
002669  3               numsp5:
002669  3               	adc #SPR_HGT
002669  3               	sta dispy		; coords in dispx,dispy.
002669  3               	jmp laddv
002669  3               
002669  3               ;------------------------------------------
002669  3               ; Ladder up check.
002669  3               ;
002669  3               ; Input:
002669  3               ;  IX = sprite pointer
002669  3               ;
002669  3               ; Output:
002669  3               ;  A  = 0 is ok, A <>0 is not ok
002669  3               ;------------------------------------------
002669  3               
002669  3               laddu:
002669  3               	ldy #9
002669  3               	lda (z80_ix),y		; x coordinate.
002669  3               	sta dispx
002669  3               
002669  3               	ldy #8
002669  3               	lda (z80_ix),y		; y coordinate.
002669  3               	and #254 		; make it even.
002669  3               	sta (z80_ix),y		; reset it.
002669  3               	clc 			; look 2 pixels above feet.
002669  3               numsp6:
002669  3               	adc #SPR_HGT-2
002669  3               	sta dispy		; coords in dispx,dispy.
002669  3               laddv:
002669  3               	jsr tstbl 		; get map address.
002669  3               	jsr ldchk 		; standard ladder check.
002669  3               	beq :+
002669  3               	rts 			; no way through.
002669  3               :
002669  3               	inc bufaddr 		; look right one cell.
002669  3               	bne :+
002669  3               	inc bufaddr+1
002669  3               :
002669  3               	jsr ldchk 		; do the check.
002669  3               	beq :+
002669  3               	rts 			; impassable.
002669  3               :
002669  3               	lda dispx 		; y coordinate.
002669  3               	and #7 			; position straddling block cells.
002669  3               	bne :+
002669  3               	rts 			; no more checks needed.
002669  3               :
002669  3               	inc bufaddr 		; look to third cell.
002669  3               	bne :+
002669  3               	inc bufaddr+1
002669  3               :
002669  3               	jsr ldchk 		; do the check.
002669  3               	rts  			; return with zero flag set accordingly.
002669  3               .endif
002669  3               
002669  3               ;---------------------------------------------------------
002669  3               ; Can go up check.
002669  3               ;
002669  3               ; Input:
002669  3               ;  IX = sprite pointer
002669  3               ;
002669  3               ; Output:
002669  3               ;  A  = 0 is ok, A <>0 is not ok
002669  3               ;---------------------------------------------------------
002669  3               
002669  3               cangu:
002669  3  A0 09        	ldy #9
00266B  3  B1 68        	lda (z80_ix),y		; x coordinate.
00266D  3  85 rr        	sta dispx
00266F  3  A0 08        	ldy #8
002671  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002673  3  38           	sec
002674  3  E9 02        	sbc #2
002676  3  85 rr        	sta dispy		; coords in dispx,dispy.
002678  3  20 13 29     	jsr tstbl 		; get map address.
00267B  3  20 2B 28     	jsr lrchk 		; standard left/right check.
00267E  3  F0 01        	beq :+
002680  3  60           	rts			; no way through.
002681  3               :
002681  3  E6 rr        	inc bufaddr		; look right one cell.
002683  3  D0 02        	bne :+
002685  3  E6 rr        	inc bufaddr+1
002687  3               :
002687  3  20 2B 28     	jsr lrchk 		; do the check.
00268A  3  F0 01        	beq :+
00268C  3  60           	rts			; impassable.
00268D  3               :
00268D  3  A5 rr        	lda dispx		; x coordinate.
00268F  3  29 07        	and #7			; position straddling block cells.
002691  3  D0 01        	bne :+
002693  3  60           	rts			; no more checks needed.
002694  3               :
002694  3  E6 rr        	inc bufaddr		; look to third cell.
002696  3  D0 02        	bne :+
002698  3  E6 rr        	inc bufaddr+1
00269A  3               :
00269A  3  20 2B 28     	jsr lrchk		; do the check.
00269D  3  60           	rts 			; return with zero flag set accordingly.
00269E  3               
00269E  3               ;---------------------------------------------------------
00269E  3               ; Can go down check.
00269E  3               ;
00269E  3               ; Input:
00269E  3               ;  IX = sprite pointer
00269E  3               ;
00269E  3               ; Output:
00269E  3               ;  A  = 0 is ok, A <>0 is not ok
00269E  3               ;---------------------------------------------------------
00269E  3               
00269E  3               ;.repeat 264
00269E  3               ;  .byte 0
00269E  3               ;.endrep
00269E  3               
00269E  3               cangd:
00269E  3  A0 09        	ldy #9
0026A0  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0026A2  3  85 rr        	sta dispx
0026A4  3  A0 08        	ldy #8
0026A6  3  B1 68        	lda (z80_ix),y		; y coordinate.
0026A8  3  18           	clc
0026A9  3               numsp3:
0026A9  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
0026AB  3  85 rr        	sta dispy		; coords in dispx,dispy.
0026AD  3  20 13 29     	jsr tstbl 		; get map address.
0026B0  3  20 40 28     	jsr plchk 		; block, platform check.
0026B3  3  F0 01        	beq :+
0026B5  3  60           	rts			; no way through.
0026B6  3               :
0026B6  3  E6 rr        	inc bufaddr		; look right one cell.
0026B8  3  D0 02        	bne :+
0026BA  3  E6 rr        	inc bufaddr+1
0026BC  3               :
0026BC  3  20 40 28     	jsr plchk		; block, platform check.
0026BF  3  F0 01        	beq :+
0026C1  3  60           	rts			; impassable.
0026C2  3               :
0026C2  3  A5 rr        	lda dispx		; x coordinate.
0026C4  3  29 07        	and #7			; position straddling block cells.
0026C6  3  D0 01        	bne :+
0026C8  3  60           	rts			; no more checks needed.
0026C9  3               :
0026C9  3  E6 rr        	inc bufaddr		; look to third cell.
0026CB  3  D0 02        	bne :+
0026CD  3  E6 rr        	inc bufaddr+1
0026CF  3               :
0026CF  3  20 40 28     	jsr plchk		; block, platform check.
0026D2  3  60           	rts			; return with zero flag set accordingly.
0026D3  3               
0026D3  3               ;---------------------------------------------------------
0026D3  3               ; Can go left check.
0026D3  3               ;
0026D3  3               ; Input:
0026D3  3               ;  IX = sprite pointer
0026D3  3               ;
0026D3  3               ; Output:
0026D3  3               ;  A  = 0 is ok, A <>0 is not ok
0026D3  3               ;---------------------------------------------------------
0026D3  3               
0026D3  3               cangl:
0026D3  3  A0 08        	ldy #8
0026D5  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0026D7  3  85 rr        	sta dispy
0026D9  3  A0 09        	ldy #9
0026DB  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0026DD  3  38           	sec
0026DE  3  E9 02        	sbc #2			; look left 2 pixels.
0026E0  3  85 rr        	sta dispx		; coords in dispx,dispy.
0026E2  3  4C 04 28     	jmp cangh		; test if we can go there.
0026E5  3               
0026E5  3               ;---------------------------------------------------------
0026E5  3               ; Can go right check.
0026E5  3               ;
0026E5  3               ; Input:
0026E5  3               ;  IX = sprite pointer
0026E5  3               ;
0026E5  3               ; Output:
0026E5  3               ;  A  = 0 is ok, A <>0 is not ok
0026E5  3               ;---------------------------------------------------------
0026E5  3               
0026E5  3  00 00 00 00  .repeat 272
0026E9  3  00 00 00 00  
0026ED  3  00 00 00 00  
0027F5  3                 .byte 0
0027F5  3               .endrep
0027F5  3               
0027F5  3               cangr:
0027F5  3  A0 08        	ldy #8
0027F7  3  B1 68        	lda (z80_ix),y		; y coordinate.
0027F9  3  85 rr        	sta dispy
0027FB  3  A0 09        	ldy #9
0027FD  3  B1 68        	lda (z80_ix),y		; x coordinate.
0027FF  3  18           	clc
002800  3  69 10        	adc #16			; look right 16 pixels.
002802  3  85 rr        	sta dispx		; coords in dispx,dispy.
002804  3               cangh:
002804  3               cangh2:
002804  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
002806  3  85 63        	sta z80_b
002808  3  A5 rr        	lda dispy		; y position.
00280A  3  29 07        	and #7			; does x straddle cells?
00280C  3  D0 02        	bne cangh0		; yes, loop counter is good.
00280E  3  C6 63        	dec z80_b		; one less row to write.
002810  3               cangh0:
002810  3  20 13 29     	jsr tstbl		; get map address.
002813  3               cangh1:
002813  3  20 2B 28     	jsr lrchk		; standard left/right check.
002816  3  F0 01        	beq :+
002818  3  60           	rts			; no way through.
002819  3               :
002819  3  48           	pha
00281A  3  18           	clc
00281B  3  A5 rr        	lda bufaddr
00281D  3  69 20        	adc #32			; look down.
00281F  3  85 rr        	sta bufaddr
002821  3  90 02        	bcc :+
002823  3  E6 rr        	inc bufaddr+1
002825  3               :
002825  3  68           	pla
002826  3               
002826  3  C6 63        	dec z80_b
002828  3  D0 E9        	bne cangh1
00282A  3  60           	rts
00282B  3               
00282B  3               ;-------------------------------------
00282B  3               ; Check left/right movement is okay.
00282B  3               ;
00282B  3               ; Input:
00282B  3               ;  bufaddr = MAP + x/8 + y/8*32
00282B  3               ;
00282B  3               ; Output:
00282B  3               ;  A  = 0 is ok, A <>0 is not ok
00282B  3               ;-------------------------------------
00282B  3               
00282B  3               lrchk:
00282B  3  A0 00        	ldy #0
00282D  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
00282F  3  C9 02        	cmp #WALL 		; is it passable?
002831  3  F0 0A        	beq lrchkx		; no.
002833  3               
002833  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002835  3  F0 06        	beq lrchkx		; not passable.
002837  3  A9 00        	lda #0
002839  3  60           	rts
00283A  3               
00283A  3               ;--------------------------------------------------------------
00283A  3               ; Called by mmenu
00283A  3               ;--------------------------------------------------------------
00283A  3               
00283A  3               always:
00283A  3  A9 FF        	lda #255		; report it as okay.
00283C  3  60           	rts
00283D  3               
00283D  3               lrchkx:
00283D  3  A9 01        	lda #1 			; reset all bits.
00283F  3  60           	rts
002840  3               
002840  3               
002840  3               ;--------------------------------------------------------------
002840  3               ; Check platform or solid item is not in way.
002840  3               ;
002840  3               ; Input:
002840  3               ;  bufaddr = MAP + x/8 + y/8*32
002840  3               ;
002840  3               ; Output:
002840  3               ;  A  = 0 is ok, A <>0 is not ok
002840  3               ;--------------------------------------------------------------
002840  3               
002840  3               plchk:
002840  3  A0 00        	ldy #0
002842  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002844  3  C9 02        	cmp #WALL 		; is it passable?
002846  3  F0 F5        	beq lrchkx		; no.
002848  3               .if pflag .or dflag
002848  3               	cmp #FODDER		; fodder has to be dug.
002848  3               	beq lrchkx		; not passable.
002848  3               .endif
002848  3  C9 01        	cmp #PLATFM		; platform is solid.
00284A  3  F0 03        	beq plchkx		; not passable.
00284C  3               .if lflag
00284C  3               	cmp #LADDER		; is it a ladder?
00284C  3               	beq lrchkx		; on ladder, deny movement.
00284C  3               .endif
00284C  3               plchk0:
00284C  3  A9 00        	lda #0			; report as ok
00284E  3  60           	rts
00284F  3               plchkx:
00284F  3  A5 rr        	lda dispy		; x coordinate.
002851  3  29 07        	and #7			; position straddling blocks.
002853  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002855  3  4C 4C 28     	jmp plchk0
002858  3               
002858  3               ;--------------------------------------------------------------
002858  3               ; Check ladder is available.
002858  3               ;
002858  3               ; Input:
002858  3               ;  bufaddr = MAP + x/8 + y/8*32
002858  3               ;
002858  3               ; Output:
002858  3               ;  A  = 0 is ok, A <>0 is not ok
002858  3               ;--------------------------------------------------------------
002858  3               
002858  3               .if lflag
002858  3               ldchk:
002858  3               	ldy #0
002858  3               	lda (bufaddr),y 	; fetch cell.
002858  3               	cmp #LADDER 		; is it a ladder?
002858  3               	beq :+
002858  3               	lda #1
002858  3               	rts  			; return with zero flag set accordingly.
002858  3               :
002858  3               	lda #0
002858  3               	rts
002858  3               .endif
002858  3               
002858  3               ;--------------------------------------------------------------
002858  3               ; Get collectables.
002858  3               ;--------------------------------------------------------------
002858  3               
002858  3               .if cflag
002858  3               getcol:
002858  3                       lda #COLECT             ; collectable blocks.
002858  3                       sta z80_b
002858  3                       jsr tded                ; test for collectable blocks.
002858  3                       cmp z80_b               ; did we find one?
002858  3                       beq :+
002858  3                       rts                     ; none were found, job done.
002858  3               :
002858  3                       jsr gtblk               ; get block.
002858  3                       jsr evnt20              ; collected block event.
002858  3                       jmp getcol              ; repeat until none left.
002858  3               
002858  3               ; Get collectable block.
002858  3               
002858  3               gtblk:
002858  3               	ldy #0
002858  3               	lda (bufaddr),y
002858  3               	sta z80_a
002858  3                       lda #0
002858  3                       sta (bufaddr),y		; make it empty now.
002858  3               
002858  3               	lda bufaddr		; set dispx
002858  3               	and #31
002858  3               	sta dispx
002858  3               
002858  3               	lda bufaddr+1		; Set dispy
002858  3               	sec
002858  3               	sbc #>MAP
002858  3               	sta bufaddr+1
002858  3               	asl bufaddr
002858  3               	rol bufaddr+1
002858  3               	asl bufaddr
002858  3               	rol bufaddr+1
002858  3               	asl bufaddr
002858  3               	rol bufaddr+1
002858  3               	lda bufaddr+1
002858  3               	sta dispy
002858  3               
002858  3               	lda colpatt		; get blocknr
002858  3               	sta z80_e		; displacement in e.
002858  3               	lda #0
002858  3               	sta z80_d		; no high byte.
002858  3               	asl z80_e  		; multiply char by 8.
002858  3               	rol z80_d
002858  3               	asl z80_e
002858  3               	rol z80_d
002858  3               	asl z80_e
002858  3               	rol z80_d
002858  3               	clc
002858  3               	lda z80_e
002858  3               	adc #<chgfx 		; address of graphics.
002858  3               	sta tileaddr
002858  3               	lda z80_d
002858  3               	adc #>chgfx
002858  3               	sta tileaddr+1
002858  3               	jsr gprad 		; get screen address.
002858  3               	ldx #7			; number of pixel rows to write.
002858  3               gtblk0:
002858  3               	ldy #0
002858  3               	lda (tileaddr),y 	; get image byte.
002858  3               	ldy scrtab,x
002858  3               	eor (scraddr),y 	; XOR tile on screen
002858  3               	sta (scraddr),y 	; copy to screen.
002858  3               	inc tileaddr 		; next image byte.
002858  3               	bne :+
002858  3               	inc tileaddr+1
002858  3               :
002858  3               	dex	 		; repeat for 8 pixel rows.
002858  3               	bpl gtblk0
002858  3               	rts
002858  3               .endif
002858  3               
002858  3               ;--------------------------------------------------------------
002858  3               ; Touched deadly block check.
002858  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002858  3               ;
002858  3               ; Input:
002858  3               ;  IX = sprite address
002858  3               ;
002858  3               ; Output:
002858  3               ;  A  = 0 is ok, A=5 is not ok
002858  3               ;--------------------------------------------------------------
002858  3               
002858  3               tded:
002858  3  A0 08        	ldy #8
00285A  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00285C  3  85 rr        	sta dispy
00285E  3  C8           	iny
00285F  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002861  3  85 rr        	sta dispx		; coords in dispx,dispy.
002863  3  20 13 29     	jsr tstbl		; get map address.
002866  3  48           	pha
002867  3  A9 1F        	lda #31			; default distance to next line down.
002869  3  85 64        	sta z80_e
00286B  3  68           	pla
00286C  3  C5 63        	cmp z80_b		; is this the required block?
00286E  3  D0 01        	bne :+
002870  3  60           	rts			; yes.
002871  3               :
002871  3  E6 rr        	inc bufaddr 		; next cell.
002873  3  D0 02        	bne :+
002875  3  E6 rr        	inc bufaddr+1
002877  3               :
002877  3  A0 00        	ldy #0
002879  3  B1 rr        	lda (bufaddr),y		; fetch type.
00287B  3  C5 63        	cmp z80_b 		; is this deadly/custom?
00287D  3  D0 01        	bne :+
00287F  3  60           	rts			; yes.
002880  3               :
002880  3  A5 rr        	lda dispx		; horizontal position.
002882  3  85 62        	sta z80_c 		; store column in c register.
002884  3  29 07        	and #7			; is it straddling cells?
002886  3  D0 03        	bne :+
002888  3  4C 9C 28     	jmp tded0		; no.
00288B  3               :
00288B  3  E6 rr        	inc bufaddr 		; last cell.
00288D  3  D0 02        	bne :+
00288F  3  E6 rr        	inc bufaddr+1
002891  3               :
002891  3  A0 00        	ldy #0
002893  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002895  3  C5 63        	cmp z80_b		; is this the block?
002897  3  D0 01        	bne :+
002899  3  60           	rts			; yes.
00289A  3               :
00289A  3  C6 64        	dec z80_e		; one less cell to next row down.
00289C  3               tded0:
00289C  3  18           	clc 			; point to next row.
00289D  3  A5 rr        	lda bufaddr
00289F  3  65 64        	adc z80_e
0028A1  3  85 rr        	sta bufaddr
0028A3  3  90 02        	bcc :+
0028A5  3  E6 rr        	inc bufaddr+1
0028A7  3               :
0028A7  3  A0 00        	ldy #0
0028A9  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
0028AB  3  C5 63        	cmp z80_b		; is this fatal?
0028AD  3  D0 01        	bne :+
0028AF  3  60           	rts			; yes.
0028B0  3               :
0028B0  3  E6 rr        	inc bufaddr 		; next cell.
0028B2  3  D0 02        	bne :+
0028B4  3  E6 rr        	inc bufaddr+1
0028B6  3               :
0028B6  3  A0 00        	ldy #0
0028B8  3  B1 rr        	lda (bufaddr),y 	; fetch type.
0028BA  3  C5 63        	cmp z80_b		; is this fatal?
0028BC  3  D0 01        	bne :+
0028BE  3  60           	rts			; yes.
0028BF  3               :
0028BF  3  A5 62        	lda z80_c		; horizontal position.
0028C1  3  29 07        	and #7			; is it straddling cells?
0028C3  3  D0 03        	bne :+
0028C5  3  4C D7 28     	jmp tded1 		; no.
0028C8  3               :
0028C8  3  E6 rr        	inc bufaddr		; last cell.
0028CA  3  D0 02        	bne :+
0028CC  3  E6 rr        	inc bufaddr+1
0028CE  3               :
0028CE  3  A0 00        	ldy #0
0028D0  3  B1 rr        	lda (bufaddr),y		; fetch type.
0028D2  3  C5 63        	cmp z80_b		; is this fatal?
0028D4  3  D0 01        	bne :+
0028D6  3  60           	rts			; yes.
0028D7  3               :
0028D7  3               tded1:
0028D7  3  A5 rr        	lda dispy		; vertical position.
0028D9  3  29 07        	and #7 			; is it straddling cells?
0028DB  3  D0 01        	bne :+
0028DD  3  60           	rts			; no, job done.
0028DE  3               :
0028DE  3  18           	clc			; point to next row.
0028DF  3  A5 rr        	lda bufaddr
0028E1  3  65 64        	adc z80_e
0028E3  3  85 rr        	sta bufaddr
0028E5  3  90 02        	bcc :+
0028E7  3  E6 rr        	inc bufaddr+1
0028E9  3               :
0028E9  3  A0 00        	ldy #0
0028EB  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
0028ED  3  C5 63        	cmp z80_b		; is this fatal?
0028EF  3  D0 01        	bne :+
0028F1  3  60           	rts			; yes.
0028F2  3               :
0028F2  3  E6 rr        	inc bufaddr		; next cell.
0028F4  3  D0 02        	bne :+
0028F6  3  E6 rr        	inc bufaddr+1
0028F8  3               :
0028F8  3  A0 00        	ldy #0
0028FA  3  B1 rr        	lda (bufaddr),y 	; fetch type.
0028FC  3  C5 63        	cmp z80_b		; is this fatal?
0028FE  3  D0 01        	bne :+
002900  3  60           	rts			; yes.
002901  3               :
002901  3  A5 62        	lda z80_c		; horizontal position.
002903  3  29 07        	and #7			; is it straddling cells?
002905  3  D0 01        	bne :+
002907  3  60           	rts			; no.
002908  3               :
002908  3  E6 rr        	inc bufaddr		; last cell.
00290A  3  D0 02        	bne :+
00290C  3  E6 rr        	inc bufaddr+1
00290E  3               :
00290E  3  A0 00        	ldy #0
002910  3  B1 rr        	lda (bufaddr),y		; fetch final type.
002912  3  60           	rts 			; return with final type in accumulator.
002913  3               
002913  3               ;---------------------------------------------------
002913  3               ; Fetch block type at (dispx, dispy).
002913  3               ;
002913  3               ; Output:
002913  3               ;  A = block type
002913  3               ;---------------------------------------------------
002913  3               
002913  3               tstbl:
002913  3  A5 rr        	lda dispy 		; fetch y coord.
002915  3  4A           	lsr a			; bufaddr = y/8
002916  3  4A           	lsr a
002917  3  4A           	lsr a
002918  3  85 rr        	sta chary
00291A  3               
00291A  3  85 rr        	sta bufaddr
00291C  3  A9 00        	lda #0
00291E  3  85 rr        	sta bufaddr+1
002920  3               
002920  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
002922  3  26 rr        	rol bufaddr+1
002924  3  06 rr        	asl bufaddr
002926  3  26 rr        	rol bufaddr+1
002928  3  06 rr        	asl bufaddr
00292A  3  26 rr        	rol bufaddr+1
00292C  3  06 rr        	asl bufaddr
00292E  3  26 rr        	rol bufaddr+1
002930  3  06 rr        	asl bufaddr
002932  3  26 rr        	rol bufaddr+1
002934  3               
002934  3  A5 rr        	lda dispx		; x/8
002936  3  4A           	lsr a
002937  3  4A           	lsr a
002938  3  4A           	lsr a
002939  3  85 rr        	sta charx
00293B  3               
00293B  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
00293C  3  65 rr        	adc bufaddr
00293E  3  69 00        	adc #<MAP
002940  3  85 rr        	sta bufaddr
002942  3  A5 rr        	lda bufaddr+1
002944  3  69 DD        	adc #>MAP
002946  3  85 rr        	sta bufaddr+1
002948  3               
002948  3  A0 00        	ldy #0
00294A  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
00294C  3  60           	rts
00294D  3               
00294D  3               
00294D  3               ;-------------------------------------------------------------------
00294D  3               ; Jump - if we can.
00294D  3               ; Requires initial speed to be set up in accumulator prior to call.
00294D  3               ;
00294D  3               ; Input:
00294D  3               ;  IX = sprite address
00294D  3               ;-------------------------------------------------------------------
00294D  3               
00294D  3               jump:
00294D  3  A0 0D        	ldy #13
00294F  3  B1 68        	lda (z80_ix),y		; jump table low.
002951  3  A0 0E        	ldy #14
002953  3  11 68        	ora (z80_ix),y		; jump table high.
002955  3  F0 01        	beq :+
002957  3  60           	rts			; already in the air.
002958  3               :
002958  3  A9 38        	lda #>jtab
00295A  3  A0 0E        	ldy #14
00295C  3  91 68        	sta (z80_ix),y		; set jump high.
00295E  3  A9 85        	lda #<jtab		; jump table start.
002960  3  A0 0D        	ldy #13
002962  3  91 68        	sta (z80_ix),y		; set jump low.
002964  3  60           	rts
002965  3               
002965  3               ; Jump table.
002965  3               
002965  3               ;jtab:
002965  3               ;	.byte 248,250,252
002965  3               ;	.byte 254,254,255
002965  3               ;	.byte 255,255,0,0
002965  3               ;	.byte 0,1,1,1,2,2
002965  3               ;	.byte 4,6,8,8,8,99
002965  3               
002965  3               ;------------------------------------------------
002965  3               ; Random numbers code.
002965  3               ; Pseudo-random number generator, 8-bit.
002965  3               ;
002965  3               ; Output:
002965  3               ;  RND = random number
002965  3               ;------------------------------------------------
002965  3               
002965  3               random:
002965  3  A5 rr        	lda seed
002967  3  F0 05        	beq doEor
002969  3  0A           	asl a
00296A  3  F0 04        	beq noEor
00296C  3  90 02        	bcc noEor
00296E  3  49 1D        doEor:	eor #$1d
002970  3  85 rr        noEor:	sta seed
002972  3  60           	rts
002973  3               
002973  3  A5 rr        	lda seed		; get last random number.
002975  3  0A           	asl a
002976  3  0A           	asl a
002977  3  18           	clc
002978  3  65 rr        	adc seed
00297A  3  18           	clc
00297B  3  69 45        	adc #$45
00297D  3  85 rr        	sta seed		; store new seed.
00297F  3  85 rr        	sta varrnd		; return number in variable.
002981  3  60           	rts
002982  3               
002982  3               ;--------------------------------------------------------
002982  3               ; Keys
002982  3               ;
002982  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002982  3               ;             ||||||||
002982  3               ;             |||||||+> Right    KEY 0  - X
002982  3               ;             ||||||+-> Left     KEY 1  - Z
002982  3               ;             |||||+--> Down     KEY 2  - .
002982  3               ;             ||||+---> Up       KEY 3  - ;
002982  3               ;             |||+----> Fire1    KEY 4  - SPC
002982  3               ;             ||+-----> Fire2    KEY 5  - Q
002982  3               ;             |+------> Fire3    KEY 6  - P
002982  3               ;             +-------> Not used
002982  3               ;
002982  3               ;                       Option1  KEY 7  - 1
002982  3               ;                       Option2  KEY 8  - 2
002982  3               ;                       Option3  KEY 9  - 3
002982  3               ;                       Option4  KEY 10 - 4
002982  3               ;--------------------------------------------------------
002982  3               
002982  3               ;              X   Z   .   ;  SPC  Q   P
002982  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002982  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002982  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002986  3  00 04 14     
002989  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
00298D  3               
00298D  3               ;--------------------------------------------------------
00298D  3               ; Keyboard test routine.
00298D  3               ;
00298D  3               ; Input:
00298D  3               ;  A = key to read, high nibble=row and low nibble=col
00298D  3               ;
00298D  3               ; Output:
00298D  3               ;  carry clr = key pressed
00298D  3               ;  carry set = key not pressed
00298D  3               ;--------------------------------------------------------
00298D  3               
00298D  3               ktest:
00298D  3  85 61        	sta z80_a		; save key
00298F  3               
00298F  3  4A           	lsr a			; set row
002990  3  4A           	lsr a
002991  3  4A           	lsr a
002992  3  4A           	lsr a
002993  3  09 F0        	ora #ScrMode		; don't flip screenmode
002995  3  8D 00 B0     	sta KeyRowAddr
002998  3               
002998  3  A5 61        	lda z80_a
00299A  3  29 0F        	and #$0f
00299C  3  AA           	tax
00299D  3  AD 01 B0     	lda KeyColAddr		; read column
0029A0  3               
0029A0  3  3D A9 29     	and keymask,x		; check key pressed
0029A3  3  F0 02        	beq pressed
0029A5  3  38           	sec			; key not pressed
0029A6  3  60           	rts
0029A7  3               pressed:
0029A7  3  18           	clc			; key pressed
0029A8  3  60           	rts
0029A9  3               
0029A9  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
0029AD  3  10 20        
0029AF  3               
0029AF  3               ;-------------------------------------------------------
0029AF  3               ; Joystick and keyboard reading routines.
0029AF  3               ;
0029AF  3               ; contrl = 0, Keyboard
0029AF  3               ;          1, JoyKeyb
0029AF  3               ;          2, JoyMMC
0029AF  3               ;-------------------------------------------------------
0029AF  3               
0029AF  3               joykey:
0029AF  3  A5 rr        	lda contrl 		; control flag.
0029B1  3  C9 01        	cmp #1
0029B3  3  D0 03        	bne :+
0029B5  3  4C D3 29     	jmp joyjoy 		; read keyboard joystick
0029B8  3               :
0029B8  3  C9 02        	cmp #2
0029BA  3  D0 03        	bne :+
0029BC  3  4C FD 29     	jmp joysin 		; read MMC joystick.
0029BF  3               :
0029BF  3               ; Keyboard controls.
0029BF  3               
0029BF  3  A9 00        	lda #0		 	; zero reading.
0029C1  3  85 64        	sta z80_e
0029C3  3               
0029C3  3  A0 06        	ldy #6	 		; address of last key.
0029C5  3               joyke0:
0029C5  3  B9 86 38     	lda keys,y 		; get key from table.
0029C8  3  20 8D 29     	jsr ktest		; being pressed?
0029CB  3  26 64        	rol z80_e 		; rotate into reading.
0029CD  3               
0029CD  3  88           	dey		 	; next key.
0029CE  3  10 F5        	bpl joyke0 		; repeat for all keys.
0029D0  3  4C E4 29     	jmp joyjo1 		; store the value.
0029D3  3               
0029D3  3               ; Keyboard joystick controls.
0029D3  3               
0029D3  3               joyjoy:
0029D3  3  A9 00        	lda #0		 	; zero reading.
0029D5  3  85 64        	sta z80_e
0029D7  3               
0029D7  3  A0 06        	ldy #6	 		; address of last key.
0029D9  3               joyjo3:
0029D9  3  B9 82 29     	lda jkeys,y 		; get key from table.
0029DC  3  20 8D 29     	jsr ktest		; being pressed?
0029DF  3  26 64        	rol z80_e 		; rotate into reading.
0029E1  3               
0029E1  3  88           	dey		 	; next key.
0029E2  3  10 F5        	bpl joyjo3 		; repeat for all keys.
0029E4  3               joyjo1:
0029E4  3  A5 64        	lda z80_e 		; copy e register to accumulator.
0029E6  3               joyjo2:
0029E6  3  85 rr        	sta joyval		; remember value.
0029E8  3  60           	rts
0029E9  3               
0029E9  3               
0029E9  3               ; AtoMMC joystick controls.
0029E9  3               
0029E9  3               ; Set PORTB direction
0029E9  3               
0029E9  3               joyinit:
0029E9  3  60           	rts
0029EA  3               
0029EA  3  A9 FF        	lda #$ff   		; Write value to latch, bits 0-7 input
0029EC  3  8D 01 B4     	sta DatReg
0029EF  3  20 2B 2A     	jsr interwritedelay
0029F2  3  A9 A1        	lda #$a1   		; Write direction in latch to PORTB
0029F4  3  8D 00 B4     	sta CmdReg
0029F7  3               
0029F7  3               wait_until_not_busy:
0029F7  3  AD 00 B4     	lda CmdReg
0029FA  3  30 FB        	bmi wait_until_not_busy
0029FC  3  60           	rts
0029FD  3               
0029FD  3               ; Get PORTB value
0029FD  3               
0029FD  3               joysin:
0029FD  3  A9 A2        	lda #$a2   		; Read value PORTB in latch
0029FF  3  8D 00 B4     	sta CmdReg
002A02  3  20 2B 2A     	jsr interwritedelay
002A05  3               
002A05  3  AD 01 B4     	lda DatReg		; Read joystick status
002A08  3  29 7F        	and #$7f
002A0A  3  85 rr        	sta joyval
002A0C  3  85 F0        	sta $f0
002A0E  3               
002A0E  3  AD 8B 38     	lda keys+5		; check fire2
002A11  3  20 8D 29     	jsr ktest
002A14  3  B0 06        	bcs :+
002A16  3  A5 rr        	lda joyval
002A18  3  29 DF        	and #$df
002A1A  3  85 rr        	sta joyval
002A1C  3               :
002A1C  3  AD 8C 38     	lda keys+6		; check fire3
002A1F  3  20 8D 29     	jsr ktest
002A22  3  B0 06        	bcs :+
002A24  3  A5 rr        	lda joyval
002A26  3  29 BF        	and #$bf
002A28  3  85 rr        	sta joyval
002A2A  3               :
002A2A  3  60           	rts
002A2B  3               
002A2B  3               ; Short delay
002A2B  3               ; Enough to intersperse 2 writes to the FATPIC.
002A2B  3               
002A2B  3               interwritedelay:
002A2B  3  A9 08        	lda  #8
002A2D  3  38           	sec
002A2E  3               loop:
002A2E  3  E9 01        	sbc  #1
002A30  3  D0 FC        	bne  loop
002A32  3  60           	rts
002A33  3               
002A33  3               ;tmp_byte:   .byte 0
002A33  3               
002A33  3               ;---------------------------------------------------------------
002A33  3               ; Getkey in column,row format
002A33  3               ;
002A33  3               ; Output:
002A33  3               ;  A = high nibble=row and low nibble=column key in matrix
002A33  3               ;---------------------------------------------------------------
002A33  3               
002A33  3               kget:
002A33  3  A9 F0        	lda #ScrMode		; high-mono mode.
002A35  3  8D 00 B0     	sta ScrSelAddr		; screen select port
002A38  3  86 rr        	stx xtmp
002A3A  3               kget4:
002A3A  3  20 71 FE     	jsr READKEY		; read key until pressed
002A3D  3  C0 FF        	cpy #255
002A3F  3  F0 F9        	beq kget4
002A41  3  85 rr        	sta rcol		; save column
002A43  3  86 rr        	stx rrow		; determine row
002A45  3               kget3:
002A45  3  20 71 FE     	jsr READKEY		; wait until key released
002A48  3  C0 FF        	cpy #255
002A4A  3  D0 F9        	bne kget3
002A4C  3               
002A4C  3  38           	sec			; calculate matrix row
002A4D  3  A9 0A        	lda #10
002A4F  3  E5 rr        	sbc rrow
002A51  3  0A           	asl a
002A52  3  0A           	asl a
002A53  3  0A           	asl a
002A54  3  0A           	asl a
002A55  3  85 rr        	sta rrow
002A57  3               
002A57  3  A0 FF        	ldy #255		; find column mask
002A59  3               kget1:
002A59  3  C8           	iny
002A5A  3  B9 A9 29     	lda keymask,y
002A5D  3  C5 rr        	cmp rcol
002A5F  3  F0 03        	beq kget2
002A61  3  4C 59 2A     	jmp kget1
002A64  3               kget2:
002A64  3  98           	tya			; determine column
002A65  3  18           	clc
002A66  3  65 rr        	adc rrow
002A68  3  A6 rr        	ldx xtmp
002A6A  3  60           	rts
002A6B  3               
002A6B  3               ;---------------------------------------------------------------
002A6B  3               ; Display message.
002A6B  3               ;
002A6B  3               ; Input:
002A6B  3               ;  A = message number
002A6B  3               ;---------------------------------------------------------------
002A6B  3               
002A6B  3               dmsg:
002A6B  3  AA           	tax
002A6C  3  A9 93        	lda #<msgdat		; pointer to messages.
002A6E  3  85 66        	sta z80_l
002A70  3  A9 34        	lda #>msgdat
002A72  3  85 67        	sta z80_h
002A74  3  20 86 2B     	jsr getwrd		; get message number.
002A77  3               dmsg3:
002A77  3  20 73 2B     	jsr preprt		; pre-printing stuff.
002A7A  3  20 A0 23     	jsr checkx		; make sure we"re in a printable range.
002A7D  3  A5 rr        	lda prtmod		; print mode.
002A7F  3  D0 47        	bne bmsg1		; no, double-height text.
002A81  3               dmsg0:
002A81  3  A5 67        	lda z80_h		; store string pointer.
002A83  3  48           	pha
002A84  3  A5 66        	lda z80_l
002A86  3  48           	pha
002A87  3               
002A87  3  A0 00        	ldy #0
002A89  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
002A8B  3  29 7F        	and #127		; remove any end marker.
002A8D  3  C9 0D        	cmp #13
002A8F  3  F0 24        	beq dmsg1
002A91  3  20 34 25     	jsr pchar		; display character.
002A94  3  20 60 2B     	jsr nexpos 		; display position.
002A97  3  D0 03        	bne dmsg2		; not on a new line.
002A99  3  20 65 2B     	jsr nexlin		; next line down.
002A9C  3               dmsg2:
002A9C  3  68           	pla			; retrieve string pointer
002A9D  3  85 66        	sta z80_l
002A9F  3  68           	pla
002AA0  3  85 67        	sta z80_h
002AA2  3               
002AA2  3  A0 00        	ldy #0
002AA4  3  B1 66        	lda (z80_hl),y		; fetch last character.
002AA6  3  0A           	asl a  			; was it the end?
002AA7  3  90 03        	bcc :+
002AA9  3  4C F3 23     	jmp dscor2		; yes, job done.
002AAC  3               :
002AAC  3  E6 66        	inc z80_l		; next character to display.
002AAE  3  D0 02        	bne :+
002AB0  3  E6 67        	inc z80_h
002AB2  3               :
002AB2  3  4C 81 2A     	jmp dmsg0
002AB5  3               dmsg1:
002AB5  3  E6 rr        	inc dispy
002AB7  3  A5 rr        	lda dispy
002AB9  3  C9 18        	cmp #24
002ABB  3  90 04        	bcc dmsg4
002ABD  3  A9 00        	lda #0
002ABF  3  85 rr        	sta dispy
002AC1  3               dmsg4:
002AC1  3  A9 00        	lda #0
002AC3  3  85 rr        	sta dispx
002AC5  3  4C 9C 2A     	jmp dmsg2
002AC8  3               
002AC8  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
002AC8  3               
002AC8  3               ;----------------------------------------------------------
002AC8  3               ; Display message in big text.
002AC8  3               ;
002AC8  3               ; Input:
002AC8  3               ;  HL = string pointer
002AC8  3               ;----------------------------------------------------------
002AC8  3               
002AC8  3               bmsg1:
002AC8  3  A0 00        	ldy #0
002ACA  3  B1 66        	lda (z80_hl),y 		; get character to display.
002ACC  3  29 7F        	and #127		; only want 7 bits.
002ACE  3  C9 0D        	cmp #13
002AD0  3  F0 13        	beq bmsg2
002AD2  3  20 FA 2A     	jsr bchar 		; display big char.
002AD5  3               bmsg3:
002AD5  3  A0 00        	ldy #0
002AD7  3  B1 66        	lda (z80_hl),y 		; look at last character.
002AD9  3  48           	pha
002ADA  3  E6 66        	inc z80_l 		; next character in list.
002ADC  3  D0 02        	bne :+
002ADE  3  E6 67        	inc z80_h
002AE0  3               :
002AE0  3  68           	pla
002AE1  3  0A           	asl a  			; was terminator flag set?
002AE2  3  90 E4        	bcc bmsg1		; no, keep going.
002AE4  3  60           	rts
002AE5  3               bmsg2:
002AE5  3  A9 00        	lda #0
002AE7  3  85 rr        	sta dispx
002AE9  3  E6 rr        	inc dispy
002AEB  3  E6 rr        	inc dispy
002AED  3  A5 rr        	lda dispy
002AEF  3  C9 17        	cmp #23
002AF1  3  90 E2        	bcc bmsg3
002AF3  3  A9 00        	lda #0
002AF5  3  85 rr        	sta dispy
002AF7  3  4C D5 2A     	jmp bmsg3
002AFA  3               
002AFA  3               ;----------------------------------------------------------
002AFA  3               ; Big character display.
002AFA  3               ;
002AFA  3               ; Input:
002AFA  3               ;  A = character
002AFA  3               ;----------------------------------------------------------
002AFA  3               
002AFA  3               bchar:
002AFA  3  85 64        	sta z80_e		; save char in lb
002AFC  3  A9 00        	lda #0
002AFE  3  85 65        	sta z80_d		; reset hb
002B00  3               
002B00  3  06 64        	asl z80_e 		; multiply char by 8.
002B02  3  26 65        	rol z80_d
002B04  3  06 64        	asl z80_e
002B06  3  26 65        	rol z80_d
002B08  3  06 64        	asl z80_e
002B0A  3  26 65        	rol z80_d		; de = a*8
002B0C  3               
002B0C  3  18           	clc			; de = Fontpointer + a*8
002B0D  3  A5 64        	lda z80_e
002B0F  3  69 85        	adc #<(FONT-256) 		; address of font.
002B11  3  85 64        	sta z80_e
002B13  3  A5 65        	lda z80_d
002B15  3  69 34        	adc #>(FONT-256)
002B17  3  85 65        	sta z80_d
002B19  3               
002B19  3  20 E5 24     	jsr gprad 		; get screen address.
002B1C  3               
002B1C  3  A2 00        	ldx #0			; height of character in font.
002B1E  3               bchar0:
002B1E  3  A0 00        	ldy #0
002B20  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
002B22  3               
002B22  3               .if iflag
002B22  3               	eor #$ff
002B22  3               .endif
002B22  3               
002B22  3  91 rr        	sta (scraddr),y
002B24  3  48           	pha
002B25  3  20 BA 2E     	jsr nline 		; next line down.
002B28  3  68           	pla
002B29  3  91 rr        	sta (scraddr),y
002B2B  3  20 BA 2E     	jsr nline 		; next line down.
002B2E  3               
002B2E  3  18           	clc
002B2F  3  E6 64        	inc z80_e 		; next line of font.
002B31  3  D0 02        	bne :+
002B33  3  E6 65        	inc z80_d
002B35  3               :
002B35  3  E8           	inx
002B36  3  E0 08        	cpx #8
002B38  3  D0 E4        	bne bchar0
002B3A  3               
002B3A  3  20 60 2B     	jsr nexpos		; display position.
002B3D  3  D0 05        	bne bchar2 		; not on a new line.
002B3F  3               bchar3:
002B3F  3  E6 rr        	inc dispy
002B41  3  20 65 2B     	jsr nexlin 		; next line check.
002B44  3               bchar2:
002B44  3  4C F3 23     	jmp dscor2		; tidy up line and column variables.
002B47  3               
002B47  3               
002B47  3               ;-------------------------------------------------
002B47  3               ; Display a character.
002B47  3               ;
002B47  3               ; Input:
002B47  3               ;  A = character
002B47  3               ;-------------------------------------------------
002B47  3               
002B47  3               achar:
002B47  3  85 63        	sta z80_b 		; copy to b.
002B49  3  20 73 2B     	jsr preprt 		; get ready to print.
002B4C  3  A5 63        	lda z80_b		; character in accumulator.
002B4E  3  A6 rr        	ldx prtmod 		; print mode.
002B50  3  F0 03        	beq :+
002B52  3  4C FA 2A     	jmp bchar 		; no, double-height text.
002B55  3               :
002B55  3  20 34 25     	jsr pchar 		; display character.
002B58  3  20 60 2B     	jsr nexpos 		; display position.
002B5B  3  F0 E2        	beq bchar3		; next line down.
002B5D  3  4C 44 2B     	jmp bchar2 		; tidy up.
002B60  3               
002B60  3               
002B60  3               ;-------------------------------------------------
002B60  3               ; Get next print column position.
002B60  3               ;-------------------------------------------------
002B60  3               
002B60  3               nexpos:
002B60  3  E6 rr        	inc dispx		; move along one position.
002B62  3  A5 rr        	lda dispx 		; get coordinate.
002B64  3               ;	and #31
002B64  3  60           	rts 			; return with status in zero flag.
002B65  3               
002B65  3               ;-------------------------------------------------
002B65  3               ; Get next print line position.
002B65  3               ;-------------------------------------------------
002B65  3               
002B65  3               nexlin:
002B65  3  E6 rr        	inc dispy 		; newline.
002B67  3  A5 rr        	lda dispy		; vertical position.
002B69  3  C9 18        	cmp #24			; past screen edge?
002B6B  3  B0 01        	bcs :+
002B6D  3  60           	rts			; no, still okay.
002B6E  3               :
002B6E  3  A9 00        	lda #0			; restart at top.
002B70  3  85 rr        	sta dispy
002B72  3  60           	rts
002B73  3               
002B73  3               ;--------------------------------------------------------
002B73  3               ; Pre-print preliminaries.
002B73  3               ;--------------------------------------------------------
002B73  3               
002B73  3               preprt:
002B73  3  A9 85        	lda #<(FONT-256)		; font pointer.
002B75  3  8D 9E 23     	sta grbase		; set up graphics base.
002B78  3  A9 34        	lda #>(FONT-256)
002B7A  3  8D 9F 23     	sta grbase+1
002B7D  3               prescr:
002B7D  3  A5 rr        	lda charx 		; display coordinates.
002B7F  3  85 rr        	sta dispx		; set up general coordinates.
002B81  3  A5 rr        	lda chary
002B83  3  85 rr        	sta dispy
002B85  3  60           	rts
002B86  3               
002B86  3               ;--------------------------------------------------------------
002B86  3               ; Get messagenr x in hl
002B86  3               ;
002B86  3               ; Input:
002B86  3               ;  HL = pointer to message list
002B86  3               ;  X  = message number.
002B86  3               ;--------------------------------------------------------------
002B86  3               
002B86  3               getwrd:
002B86  3  E0 00        	cpx #0
002B88  3  D0 01        	bne:+ 			; first word in list?
002B8A  3  60           	rts 			; yep, don't search.
002B8B  3               :
002B8B  3  A0 00        	ldy #0
002B8D  3               getwd0:
002B8D  3  B1 66        	lda (z80_hl),y
002B8F  3  48           	pha
002B90  3  E6 66        	inc z80_l
002B92  3  D0 02        	bne :+
002B94  3  E6 67        	inc z80_h
002B96  3               :
002B96  3  68           	pla
002B97  3  C9 80        	cmp #128		; found end?
002B99  3  30 F2        	bmi getwd0		; no, carry on.
002B9B  3  CA           	dex			; until we have right number.
002B9C  3  D0 EF        	bne getwd0
002B9E  3  60           	rts
002B9F  3               
002B9F  3               ;-----------------------------------------------------------
002B9F  3               ; Bubble sort.
002B9F  3               ;-----------------------------------------------------------
002B9F  3               
002B9F  3               bsort:
002B9F  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
002BA1  3  85 rr        	sta qscnt
002BA3  3               
002BA3  3  A9 08        	lda #<sprtab 		; sprite table.
002BA5  3  85 68        	sta z80_x
002BA7  3  A9 33        	lda #>sprtab
002BA9  3  85 69        	sta z80_i
002BAB  3               bsort0:
002BAB  3  A0 00        	ldy #0
002BAD  3  B1 68        	lda (z80_ix),y 		; first sprite type.
002BAF  3  C9 FF        	cmp #255 		; is it switched off?
002BB1  3  F0 30        	beq swemp		; yes, may need to switch another in here.
002BB3  3               
002BB3  3  A0 11        	ldy #TABSIZ
002BB5  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
002BB7  3  C9 FF        	cmp #255 		; is it enabled?
002BB9  3  F0 0A        	beq bsort2 		; no, nothing to swap.
002BBB  3               
002BBB  3  A0 14        	ldy #TABSIZ+3
002BBD  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
002BBF  3  A0 03        	ldy #3
002BC1  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
002BC3  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
002BC5  3               bsort2:
002BC5  3  18           	clc
002BC6  3  A5 68        	lda z80_x
002BC8  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002BCA  3  85 68        	sta z80_x
002BCC  3  90 02        	bcc :+
002BCE  3  E6 69        	inc z80_i
002BD0  3               :
002BD0  3  C6 rr        	dec qscnt
002BD2  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
002BD4  3  60           	rts
002BD5  3               
002BD5  3               ;qscnt:	.byte 0
002BD5  3               
002BD5  3               bsort1:
002BD5  3  A0 11        	ldy #TABSIZ
002BD7  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
002BD9  3  C9 FF        	cmp #255		; is it enabled?
002BDB  3  F0 E8        	beq bsort2		; no, nothing to swap.
002BDD  3  20 F1 2B     	jsr swspr		; swap positions.
002BE0  3  4C C5 2B     	jmp bsort2
002BE3  3               swemp:
002BE3  3  A0 11        	ldy #TABSIZ
002BE5  3  B1 68        	lda (z80_ix),y		; next table entry.
002BE7  3  C9 FF        	cmp #255		; is that one on?
002BE9  3  F0 DA        	beq bsort2		; no, nothing to swap.
002BEB  3  20 F1 2B     	jsr swspr		; swap positions.
002BEE  3  4C C5 2B     	jmp bsort2
002BF1  3               
002BF1  3               ; Swap sprites.
002BF1  3               
002BF1  3               swspr:
002BF1  3  A5 68        	lda z80_x		; table address
002BF3  3  85 64        	sta z80_e		; copy to de pair.
002BF5  3  85 66        	sta z80_l		; copy to hl pair.
002BF7  3  A5 69        	lda z80_i
002BF9  3  85 67        	sta z80_h
002BFB  3  85 65        	sta z80_d
002BFD  3               
002BFD  3  18           	clc
002BFE  3  A5 66        	lda z80_l
002C00  3  69 11        	adc #TABSIZ		; distance to second entry.
002C02  3  85 66        	sta z80_l
002C04  3  90 02        	bcc :+
002C06  3  E6 67        	inc z80_h
002C08  3               :
002C08  3  A9 11        	lda #TABSIZ		; bytes to swap.
002C0A  3  85 63        	sta z80_b
002C0C  3  A0 00        	ldy #0
002C0E  3               swspr0:
002C0E  3  B1 66        	lda (z80_hl),y		; fetch second byte.
002C10  3  48           	pha
002C11  3  B1 64        	lda (z80_de),y 		; fetch first byte.
002C13  3  91 66        	sta (z80_hl),y 		; copy to second.
002C15  3  68           	pla
002C16  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
002C18  3               
002C18  3  E6 64        	inc z80_e 		; next byte.
002C1A  3  D0 02        	bne :+
002C1C  3  E6 65        	inc z80_d
002C1E  3               :
002C1E  3  E6 66        	inc z80_l 		; next byte.
002C20  3  D0 02        	bne :+
002C22  3  E6 67        	inc z80_h
002C24  3               :
002C24  3  C6 63        	dec z80_b
002C26  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
002C28  3  60           	rts
002C29  3               
002C29  3               ;----------------------------------------------------
002C29  3               ; Process sprites.
002C29  3               ;----------------------------------------------------
002C29  3               
002C29  3               pspr:
002C29  3  A9 0C        	lda #NUMSPR		; sprites to process.
002C2B  3  85 rr        	sta sprptr
002C2D  3               
002C2D  3  A9 08        	lda #<sprtab 		; sprite table.
002C2F  3  85 68        	sta z80_x
002C31  3  A9 33        	lda #>sprtab
002C33  3  85 69        	sta z80_i
002C35  3               pspr1:
002C35  3  A0 00        	ldy #0
002C37  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
002C39  3  C9 09        	cmp #9 			; within range of sprite types?
002C3B  3  B0 03        	bcs :+
002C3D  3  20 50 2C     	jsr pspr2 		; yes, process this one.
002C40  3               :
002C40  3  18           	clc
002C41  3  A5 68        	lda z80_x
002C43  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002C45  3  85 68        	sta z80_x
002C47  3  90 02        	bcc :+
002C49  3  E6 69        	inc z80_i		; next sprite.
002C4B  3               :
002C4B  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
002C4D  3  D0 E6        	bne pspr1
002C4F  3  60           	rts
002C50  3               
002C50  3               ;sprptr:	.byte 0
002C50  3               
002C50  3               pspr2:
002C50  3  A5 68        	lda z80_x 		; store original sprite pointer.
002C52  3  85 rr        	sta ogptr
002C54  3  A5 69        	lda z80_i
002C56  3  85 rr        	sta ogptr+1
002C58  3  20 64 2C     	jsr pspr3		; do the routine.
002C5B  3               rtorg:
002C5B  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
002C5D  3  85 68        	sta z80_x
002C5F  3  A5 rr        	lda ogptr+1
002C61  3  85 69        	sta z80_i
002C63  3               rtorg0:
002C63  3  60           	rts
002C64  3               
002C64  3               pspr3:
002C64  3  A9 99        	lda #<evtyp0		; sprite type events list.
002C66  3  85 66        	sta z80_l
002C68  3  A9 2C        	lda #>evtyp0
002C6A  3  85 67        	sta z80_h
002C6C  3               pspr4:
002C6C  3  B1 68        	lda (z80_ix),y
002C6E  3  0A           	asl a			; double accumulator.
002C6F  3  18           	clc
002C70  3  65 66        	adc z80_l
002C72  3  85 66        	sta z80_l
002C74  3  90 02        	bcc :+
002C76  3  E6 67        	inc z80_h
002C78  3               :
002C78  3  B1 66        	lda (z80_hl),y
002C7A  3  85 64        	sta z80_e 		; copy to de.
002C7C  3  48           	pha
002C7D  3               
002C7D  3  E6 66        	inc z80_l 		; next byte of address.
002C7F  3  D0 02        	bne :+
002C81  3  E6 67        	inc z80_h
002C83  3               :
002C83  3  B1 66        	lda (z80_hl),y 		; address high.
002C85  3  85 65        	sta z80_d
002C87  3               
002C87  3  48           	pha	 		; swap address into hl.
002C88  3  A5 67        	lda z80_h
002C8A  3  85 65        	sta z80_d
002C8C  3  68           	pla
002C8D  3  85 67        	sta z80_h
002C8F  3  68           	pla
002C90  3  85 66        	sta z80_l
002C92  3  A5 66        	lda z80_l
002C94  3  85 64        	sta z80_e
002C96  3               
002C96  3  6C 66 00     	jmp (z80_hl) 		; go there.
002C99  3               
002C99  3               ;ogptr:	.word 0			; original sprite pointer.
002C99  3               
002C99  3               ; Address of each sprite type's routine.
002C99  3               
002C99  3  1A 34        evtyp0:	.word evnt00
002C9B  3  1B 34        evtyp1:	.word evnt01
002C9D  3  1C 34        evtyp2:	.word evnt02
002C9F  3  1D 34        evtyp3:	.word evnt03
002CA1  3  1E 34        evtyp4:	.word evnt04
002CA3  3  1F 34        evtyp5:	.word evnt05
002CA5  3  20 34        evtyp6:	.word evnt06
002CA7  3  21 34        evtyp7:	.word evnt07
002CA9  3  22 34        evtyp8:	.word evnt08
002CAB  3               
002CAB  3               ;--------------------------------------------------------------
002CAB  3               ; Display sprites.
002CAB  3               ;
002CAB  3               ; Input:
002CAB  3               ;  IX = sprite table
002CAB  3               ;--------------------------------------------------------------
002CAB  3               
002CAB  3               dspr:
002CAB  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
002CAD  3  85 rr        	sta sprcnt
002CAF  3               dspr0:
002CAF  3  A0 00        	ldy #0
002CB1  3  B1 68        	lda (z80_ix),y 		; get sprite type.
002CB3  3  C9 FF        	cmp #255 		; is it enabled?
002CB5  3  D0 42        	bne dspr1 		; yes, it needs deleting.
002CB7  3               dspr5:
002CB7  3  A0 05        	ldy #5
002CB9  3  B1 68        	lda (z80_ix),y 		; new type.
002CBB  3  C9 FF        	cmp #255		; is it enabled?
002CBD  3  D0 77        	bne dspr3 		; yes, it needs drawing.
002CBF  3               dspr2:
002CBF  3  A0 05        	ldy #5
002CC1  3  B1 68        	lda (z80_ix),y 		; copy new type.
002CC3  3  A0 00        	ldy #0
002CC5  3  91 68        	sta (z80_ix),y
002CC7  3  A0 06        	ldy #6
002CC9  3  B1 68        	lda (z80_ix),y 		; copy new image number.
002CCB  3  A0 01        	ldy #1
002CCD  3  91 68        	sta (z80_ix),y
002CCF  3  A0 07        	ldy #7
002CD1  3  B1 68        	lda (z80_ix),y 		; copy new frame.
002CD3  3  A0 02        	ldy #2
002CD5  3  91 68        	sta (z80_ix),y
002CD7  3  A0 08        	ldy #8
002CD9  3  B1 68        	lda (z80_ix),y 		; copy new y.
002CDB  3  A0 03        	ldy #3
002CDD  3  91 68        	sta (z80_ix),y
002CDF  3  A0 09        	ldy #9
002CE1  3  B1 68        	lda (z80_ix),y 		; copy new x.
002CE3  3  A0 04        	ldy #4
002CE5  3  91 68        	sta (z80_ix),y
002CE7  3               
002CE7  3  18           	clc
002CE8  3  A5 68        	lda z80_x
002CEA  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
002CEC  3  85 68        	sta z80_x
002CEE  3  A5 69        	lda z80_i
002CF0  3  69 00        	adc #0
002CF2  3  85 69        	sta z80_i 		; next sprite.
002CF4  3  C6 rr        	dec sprcnt
002CF6  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
002CF8  3  60           	rts
002CF9  3               dspr1:
002CF9  3  A0 05        	ldy #5
002CFB  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
002CFD  3  C9 FF        	cmp #255		; is this enabled?
002CFF  3  D0 06        	bne dspr4 		; yes, display both.
002D01  3               dspr6:
002D01  3  20 D1 2D     	jsr sspria 		; show single sprite.
002D04  3  4C BF 2C     	jmp dspr2
002D07  3               
002D07  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
002D07  3               
002D07  3               dspr4:
002D07  3  A0 04        	ldy #4
002D09  3  B1 68        	lda (z80_ix),y		; old x.
002D0B  3  A0 09        	ldy #9
002D0D  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
002D0F  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
002D11  3               
002D11  3  A0 03        	ldy #3
002D13  3  B1 68        	lda (z80_ix),y		; old y.
002D15  3  A0 08        	ldy #8
002D17  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002D19  3  D0 15        	bne dspr7		; they differ, need to redraw.
002D1B  3               
002D1B  3  A0 02        	ldy #2
002D1D  3  B1 68        	lda (z80_ix),y 		; old frame.
002D1F  3  A0 07        	ldy #7
002D21  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002D23  3  4C 30 2D     	jmp dspr7 		; they differ, need to redraw.
002D26  3               
002D26  3  A0 01        	ldy #1
002D28  3  B1 68        	lda (z80_ix),y 		; old image.
002D2A  3  A0 06        	ldy #6
002D2C  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002D2E  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
002D30  3               dspr7:
002D30  3  20 FE 2D     	jsr sspric 		; delete old sprite, draw new one simultaneously.
002D33  3  4C BF 2C     	jmp dspr2
002D36  3               dspr3:
002D36  3  20 F8 2D     	jsr ssprib 		; show single sprite.
002D39  3  4C BF 2C     	jmp dspr2
002D3C  3               
002D3C  3               ;sprcnt:	.byte 0
002D3C  3               
002D3C  3               ;-----------------------------------------
002D3C  3               ; Get sprite address calculations.
002D3C  3               ; gspran = new sprite, gsprad = old sprite.
002D3C  3               ;
002D3C  3               ; Input:
002D3C  3               ;  IX = sprite address
002D3C  3               ;-----------------------------------------
002D3C  3               
002D3C  3               gspran:
002D3C  3  A0 08        	ldy #8
002D3E  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
002D40  3  85 rr        	sta dispy
002D42  3  A0 09        	ldy #9
002D44  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
002D46  3  85 rr        	sta dispx
002D48  3  A0 06        	ldy #6
002D4A  3  B1 68        	lda (z80_ix),y 		; new sprite image.
002D4C  3  20 2A 31     	jsr gfrm		; fetch start frame for this sprite.
002D4F  3               
002D4F  3  A0 00        	ldy #0
002D51  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002D53  3  A0 07        	ldy #7
002D55  3  18           	clc
002D56  3  71 68        	adc (z80_ix),y 		; new add frame number.
002D58  3  4C 77 2D     	jmp gspra0
002D5B  3               
002D5B  3               ;-----------------------------------------
002D5B  3               ; Calculate old sprite address
002D5B  3               ;
002D5B  3               ; Input:
002D5B  3               ;  IX = sprite address
002D5B  3               ;
002D5B  3               ; Output:
002D5B  3               ;  B  = right byte mask
002D5B  3               ;  C  = left byte mask
002D5B  3               ;  DE = spriteframe address
002D5B  3               ;  scraddr = screenaddress(dispx,dispy)
002D5B  3               ;-----------------------------------------
002D5B  3               
002D5B  3               gsprad:
002D5B  3  A0 03        	ldy #3
002D5D  3  B1 68        	lda (z80_ix),y		; y coordinate.
002D5F  3  85 rr        	sta dispy
002D61  3  A0 04        	ldy #4
002D63  3  B1 68        	lda (z80_ix),y		; x coordinate.
002D65  3  85 rr        	sta dispx
002D67  3  A0 01        	ldy #1
002D69  3  B1 68        	lda (z80_ix),y 		; sprite image.
002D6B  3  20 2A 31     	jsr gfrm 		; fetch start frame for this sprite.
002D6E  3               
002D6E  3  A0 00        	ldy #0
002D70  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002D72  3  A0 02        	ldy #2
002D74  3  18           	clc
002D75  3  71 68        	adc (z80_ix),y 		; add frame number.
002D77  3               gspra0:
002D77  3  4A           	lsr a	  		; multiply by 128.
002D78  3  85 65        	sta z80_d 		; store in d.
002D7A  3  8D CF 2D     	sta tmp1
002D7D  3  A9 00        	lda #0
002D7F  3  6A           	ror a
002D80  3  85 64        	sta z80_e 		; got low byte.
002D82  3  8D D0 2D     	sta tmp2
002D85  3               .if bflag
002D85  3               	lsr tmp1
002D85  3               	ror tmp2
002D85  3               	clc
002D85  3               	lda tmp2
002D85  3               	adc z80_e
002D85  3               	sta z80_e
002D85  3               	lda tmp1
002D85  3               	adc z80_d
002D85  3               	sta z80_d
002D85  3               .endif
002D85  3  18           	clc 			; address of play sprites.
002D86  3  A5 64        	lda z80_e
002D88  3  69 CA        	adc #<sprgfx
002D8A  3  85 64        	sta z80_e
002D8C  3  A5 65        	lda z80_d
002D8E  3  69 34        	adc #>sprgfx
002D90  3  85 65        	sta z80_d
002D92  3               
002D92  3  A5 rr        	lda dispx 		; y coordinate.
002D94  3  29 06        	and #6 			; position within byte boundary.
002D96  3  AA           	tax	 		; low byte of table displacement.
002D97  3               
002D97  3  0A           	asl a	  		; multiply by 32.
002D98  3  0A           	asl a  			; already a multiple
002D99  3  0A           	asl a  			; of 2, so just 4
002D9A  3               .if bflag
002D9A  3               	sta tmp1
002D9A  3               	asl a  			; shifts needed.
002D9A  3               	clc
002D9A  3               	adc tmp1
002D9A  3               .else
002D9A  3  0A           	asl a  			; shifts needed.
002D9B  3               .endif
002D9B  3  18           	clc 			; add to sprite address.
002D9C  3  65 64        	adc z80_e
002D9E  3  85 64        	sta z80_e
002DA0  3  90 02        	bcc :+
002DA2  3  E6 65        	inc z80_d
002DA4  3               :
002DA4  3  BD C7 2D     	lda spmask,x		 ; pointer to mask table.
002DA7  3  85 62        	sta z80_c 		; left mask.
002DA9  3  BD C8 2D     	lda spmask+1,x
002DAC  3  85 63        	sta z80_b 		; right mask.
002DAE  3               
002DAE  3               ;------------------------------------------------------------------
002DAE  3               ; Drop into screen address routine.
002DAE  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
002DAE  3               ;------------------------------------------------------------------
002DAE  3               
002DAE  3               scadd:
002DAE  3  A6 rr        	ldx dispy
002DB0  3  E0 C0        	cpx #192
002DB2  3  90 02        	bcc :+
002DB4  3  A2 C0        	ldx #192
002DB6  3               :
002DB6  3  A5 rr        	lda dispx
002DB8  3  4A           	lsr a
002DB9  3  4A           	lsr a
002DBA  3  4A           	lsr a
002DBB  3  18           	clc
002DBC  3  7D 00 E0     	adc SCADTB_lb,x
002DBF  3  85 rr        	sta scraddr
002DC1  3  BD 00 E1     	lda SCADTB_hb,x
002DC4  3  85 rr        	sta scraddr+1
002DC6  3  60           	rts
002DC7  3               
002DC7  3  FF 00        spmask:	.byte $ff,$00
002DC9  3  3F C0        	.byte $3f,$c0
002DCB  3  0F F0        	.byte $0f,$f0
002DCD  3  03 FC        	.byte $03,$fc
002DCF  3               
002DCF  3  00           tmp1:	.byte 0
002DD0  3  00           tmp2:	.byte 0
002DD1  3               
002DD1  3               ;-----------------------------------------------------------------
002DD1  3               ; These are the sprite routines.
002DD1  3               ; sspria = single sprite, old (ix).
002DD1  3               ; ssprib = single sprite, new (ix+5).
002DD1  3               ; sspric = both sprites, old (ix) and new (ix+5).
002DD1  3               ;-----------------------------------------------------------------
002DD1  3               
002DD1  3               sspria:
002DD1  3  20 5B 2D     	jsr gsprad		; get old sprite address.
002DD4  3               sspri2:
002DD4  3  A5 64        	lda z80_e
002DD6  3  8D 46 2E     	sta dline1+1		; Set spritedata address
002DD9  3  8D 55 2E     	sta dline2+1
002DDC  3  A5 65        	lda z80_d
002DDE  3  8D 47 2E     	sta dline1+2
002DE1  3  8D 56 2E     	sta dline2+2
002DE4  3  86 rr        	stx xtmp
002DE6  3  A2 00        	ldx #0			; vertical lines.
002DE8  3               sspri0:
002DE8  3  20 42 2E     	jsr dline		; draw a line.
002DEB  3  E0 10        	cpx #16			; detect block boundery
002DED  3  D0 02        	bne :+			; skip if not
002DEF  3  E6 rr        	inc scraddr+1		; jump to next blockline
002DF1  3               :
002DF1  3  E0 20        	cpx #32			; check finished
002DF3  3               .if bflag
002DF3  3               	bne :+			; skip if not
002DF3  3               	inc scraddr+1		; jump to next blockline
002DF3  3               	inc z80_hlp+1		; jump to next blockline
002DF3  3               :
002DF3  3               	cpx #48			; check finished
002DF3  3               .endif
002DF3  3  D0 F3        	bne sspri0		; no, repeat
002DF5  3  A6 rr        	ldx xtmp
002DF7  3  60           	rts
002DF8  3               
002DF8  3               ;-----------------------------------------------------------------
002DF8  3               
002DF8  3               ssprib:
002DF8  3  20 3C 2D     	jsr gspran 		; get new sprite address.
002DFB  3  4C D4 2D     	jmp sspri2
002DFE  3               
002DFE  3               ;-----------------------------------------------------------------
002DFE  3               
002DFE  3               sspric:
002DFE  3  20 5B 2D     	jsr gsprad 		; get old sprite address.
002E01  3  A5 64        	lda z80_e
002E03  3  8D 6A 2E     	sta ddline1+1		; Set spritedata address
002E06  3  8D 79 2E     	sta ddline2+1
002E09  3  A5 65        	lda z80_d
002E0B  3  8D 6B 2E     	sta ddline1+2
002E0E  3  8D 7A 2E     	sta ddline2+2
002E11  3  20 C4 3A     	jsr exx  		; store addresses.
002E14  3               
002E14  3  20 3C 2D     	jsr gspran 		; get new sprite addresses.
002E17  3  A5 64        	lda z80_e
002E19  3  8D 46 2E     	sta dline1+1		; Set spritedata address
002E1C  3  8D 55 2E     	sta dline2+1
002E1F  3  A5 65        	lda z80_d
002E21  3  8D 47 2E     	sta dline1+2
002E24  3  8D 56 2E     	sta dline2+2
002E27  3               
002E27  3  86 rr        	stx xtmp
002E29  3  A2 00        	ldx #0			; vertical lines.
002E2B  3               lloop:
002E2B  3  20 42 2E     	jsr dline 		; draw a line.
002E2E  3  CA           	dex
002E2F  3  CA           	dex
002E30  3  20 66 2E     	jsr ddline 		; delete a line.
002E33  3  E0 10        	cpx #16			; detect block boundery
002E35  3  D0 04        	bne :+			; skip if not
002E37  3  E6 rr        	inc scraddr+1		; jump to next blockline
002E39  3  E6 73        	inc z80_hlp+1		; jump to next blockline
002E3B  3               :
002E3B  3  E0 20        	cpx #32			; check finished
002E3D  3               .if bflag
002E3D  3               	bne :+			; skip if not
002E3D  3               	inc scraddr+1		; jump to next blockline
002E3D  3               	inc z80_hlp+1		; jump to next blockline
002E3D  3               :
002E3D  3               	cpx #48			; check finished
002E3D  3               .endif
002E3D  3  D0 EC        	bne lloop		; no, repeat
002E3F  3  A6 rr        	ldx xtmp
002E41  3  60           	rts
002E42  3               
002E42  3               
002E42  3               ;-----------------------------------------------------------------
002E42  3               
002E42  3               dline:
002E42  3  BC 8A 2E     	ldy sprline,x		; point to screenleft
002E45  3               dline1:
002E45  3  BD 5F 35     	lda objdta,x		; fetch spriteleft byte
002E48  3  85 61        	sta z80_a		; save spriteright byte
002E4A  3  A5 61        	lda z80_a
002E4C  3  25 62        	and z80_c		; mask left
002E4E  3  51 rr        	eor (scraddr),y		; merge with screenleft
002E50  3  91 rr        	sta (scraddr),y		; write screenleft
002E52  3               sline:
002E52  3  E8           	inx			; next spritebyte
002E53  3  C8           	iny			; point to screenmiddle
002E54  3               dline2:
002E54  3  BD 5F 35     	lda objdta,x		; fetch spritemiddle byte
002E57  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
002E59  3  91 rr        	sta (scraddr),y		; write screenmiddle
002E5B  3               sline2:
002E5B  3  C8           	iny			; point to screenright
002E5C  3  A5 61        	lda z80_a		; fetch spriteright byte
002E5E  3  25 63        	and z80_b		; mask right
002E60  3  51 rr        	eor (scraddr),y		; merge with screenright
002E62  3  91 rr        	sta (scraddr),y		; write screenright
002E64  3               sline3:
002E64  3  E8           	inx			; next spritebyte
002E65  3               
002E65  3  60           	rts
002E66  3               
002E66  3               ;-----------------------------------------------------------------
002E66  3               
002E66  3               ddline:
002E66  3  BC 8A 2E     	ldy sprline,x		; point to screenleft
002E69  3               ddline1:
002E69  3  BD 5F 35     	lda objdta,x		; fetch spriteleft byte
002E6C  3  85 61        	sta z80_a		; save spriteright byte
002E6E  3  A5 61        	lda z80_a
002E70  3  25 6E        	and z80_cp		; mask left
002E72  3  51 72        	eor (z80_hlp),y		; merge with screenleft
002E74  3  91 72        	sta (z80_hlp),y		; write screenleft
002E76  3               dsline:
002E76  3  E8           	inx			; next spritebyte
002E77  3  C8           	iny			; point to screenmiddle
002E78  3               ddline2:
002E78  3  BD 5F 35     	lda objdta,x		; fetch spritemiddle byte
002E7B  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
002E7D  3  91 72        	sta (z80_hlp),y		; write screenmiddle
002E7F  3               dsline2:
002E7F  3  C8           	iny			; point to screenright
002E80  3  A5 61        	lda z80_a		; fetch spriteright byte
002E82  3  25 6F        	and z80_bp		; mask right
002E84  3  51 72        	eor (z80_hlp),y		; merge with screenright
002E86  3  91 72        	sta (z80_hlp),y		; write screenright
002E88  3               dsline3:
002E88  3  E8           	inx			; next spritebyte
002E89  3               
002E89  3  60           	rts
002E8A  3               
002E8A  3               sprline:
002E8A  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002E8E  3  40 41 60 61  
002E92  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002E96  3  C0 C1 E0 E1  
002E9A  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002E9E  3  40 41 60 61  
002EA2  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002EA6  3  C0 C1 E0 E1  
002EAA  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002EAE  3  40 41 60 61  
002EB2  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002EB6  3  C0 C1 E0 E1  
002EBA  3               
002EBA  3               ;----------------------------------------------------------------------
002EBA  3               ; Line drawn, now work out next target address.
002EBA  3               ;----------------------------------------------------------------------
002EBA  3               
002EBA  3               nline:
002EBA  3  18           	clc
002EBB  3  A5 rr        	lda scraddr 		; get low byte of address.
002EBD  3  69 20        	adc #$20
002EBF  3  85 rr        	sta scraddr 		; new low byte of address.
002EC1  3  90 02        	bcc :+
002EC3  3  E6 rr        	inc scraddr+1 		; new high byte of address.
002EC5  3               :
002EC5  3  60           	rts
002EC6  3               
002EC6  3               ;-------------------------------------------------------------
002EC6  3               ; Line drawn, now work out next target address.
002EC6  3               ;
002EC6  3               ; Input:
002EC6  3               ;  BP  = right mask
002EC6  3               ;  CP  = left mask
002EC6  3               ;  DEP = spriteaddress
002EC6  3               ;  z80_hlp = screen address
002EC6  3               ;-------------------------------------------------------------
002EC6  3               
002EC6  3               
002EC6  3               ;-----------------------------------------------------------
002EC6  3               ; Animates a sprite.
002EC6  3               ;
002EC6  3               ; Input:
002EC6  3               ;  IX = sprite address
002EC6  3               ;  HL = last sprite address
002EC6  3               ;-----------------------------------------------------------
002EC6  3               
002EC6  3               animsp:
002EC6  3  25 rr        	and frmno
002EC8  3  F0 01        	beq :+
002ECA  3  60           	rts
002ECB  3               :
002ECB  3  A0 06        	ldy #6
002ECD  3  B1 68        	lda (z80_ix),y		; sprite image
002ECF  3  20 2A 31     	jsr gfrm		; get frame data.
002ED2  3               
002ED2  3  E6 66        	inc z80_l		; point to frames.
002ED4  3  D0 02        	bne :+
002ED6  3  E6 67        	inc z80_h
002ED8  3               :
002ED8  3  A0 07        	ldy #7
002EDA  3  B1 68        	lda (z80_ix),y		; sprite frame.
002EDC  3  18           	clc
002EDD  3  69 01        	adc #1			; next one along.
002EDF  3  A0 00        	ldy #0
002EE1  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
002EE3  3  90 02        	bcc anims0		; no, not yet.
002EE5  3  A9 00        	lda #0			; start at first frame.
002EE7  3               anims0:
002EE7  3  A0 07        	ldy #7
002EE9  3  91 68        	sta (z80_ix),y		; new frame.
002EEB  3  60           	rts
002EEC  3               
002EEC  3               ;--------------------------------------------------------------
002EEC  3               ; Animate back
002EEC  3               ;
002EEC  3               ; Input:
002EEC  3               ;  IX = sprite address
002EEC  3               ;  HL = last sprite address
002EEC  3               ;--------------------------------------------------------------
002EEC  3               
002EEC  3               animbk:
002EEC  3  25 rr        	and frmno
002EEE  3  F0 01        	beq :+
002EF0  3  60           	rts
002EF1  3               :
002EF1  3  A0 06        	ldy #6
002EF3  3  B1 68        	lda (z80_ix),y		; sprite image.
002EF5  3  20 2A 31     	jsr gfrm		; get frame data.
002EF8  3               
002EF8  3  E6 66        	inc z80_l 		; point to frames.
002EFA  3  D0 02        	bne :+
002EFC  3  E6 67        	inc z80_h
002EFE  3               :
002EFE  3  A0 07        	ldy #7
002F00  3  B1 68        	lda (z80_ix),y 		; sprite frame.
002F02  3  F0 03        	beq :+
002F04  3  4C 0B 2F     	jmp rtanb0 		; yes, start at end.
002F07  3               :
002F07  3  A0 00        	ldy #0
002F09  3  B1 66        	lda (z80_hl),y 		; last sprite.
002F0B  3               rtanb0:
002F0B  3  38           	sec
002F0C  3  E9 01        	sbc #1			; next one along.
002F0E  3  4C E7 2E     	jmp anims0		; set new frame.
002F11  3               
002F11  3               ;--------------------------------------------------------------
002F11  3               ; Check for collision with other sprite, strict enforcement.
002F11  3               ;
002F11  3               ; Input:
002F11  3               ;  b		= sprite to test for
002F11  3               ;  ix		= current sprite pointer
002F11  3               ;
002F11  3               ; global:	b
002F11  3               ; local:	x,y,hl,de,skptr
002F11  3               ; calls:	-
002F11  3               ;--------------------------------------------------------------
002F11  3               
002F11  3               sktyp:
002F11  3  A9 08        	lda #<sprtab				; sprite table.
002F13  3  85 66        	sta z80_l
002F15  3  A9 33        	lda #>sprtab
002F17  3  85 67        	sta z80_h
002F19  3               numsp2:
002F19  3  A9 0C        	lda #NUMSPR				; number of sprites.
002F1B  3  85 rr        	sta sktptr
002F1D  3               sktyp0:
002F1D  3  A5 66        	lda z80_l 				; store pointer to sprite.
002F1F  3  85 rr        	sta skptr
002F21  3  A5 67        	lda z80_h
002F23  3  85 rr        	sta skptr+1
002F25  3               
002F25  3  A0 00        	ldy #0
002F27  3  B1 66        	lda (z80_hl),y 				; get sprite type.
002F29  3  C5 63        	cmp z80_b				; is it the type we seek?
002F2B  3  F0 1D        	beq coltyp				; yes, we can use this one.
002F2D  3               sktyp1:
002F2D  3  18           	clc
002F2E  3  A5 rr        	lda skptr				; retrieve sprite pointer.
002F30  3  69 11        	adc #TABSIZ				; size of each entry.
002F32  3  85 66        	sta z80_l
002F34  3  A5 rr        	lda skptr+1
002F36  3  69 00        	adc #0
002F38  3  85 67        	sta z80_h
002F3A  3  C6 rr        	dec sktptr					; one less iteration.
002F3C  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
002F3E  3  A9 00        	lda #0					; default to ROM address - no sprite.
002F40  3  85 66        	sta z80_l
002F42  3  85 67        	sta z80_h
002F44  3  85 rr        	sta skptr				; store pointer to sprite.
002F46  3  85 rr        	sta skptr+1
002F48  3               
002F48  3  18           	clc					; don't return with zero flag set.
002F49  3  60           	rts 					; didn't find one.
002F4A  3               
002F4A  3               ;skptr:	.word 0					; search pointer.
002F4A  3               ;sktptr:	.byte 0
002F4A  3               
002F4A  3               coltyp:
002F4A  3  A0 00        	ldy #0
002F4C  3  B1 68        	lda (z80_ix),y				; current sprite type.
002F4E  3  C5 63        	cmp z80_b				; seeking sprite of same type?
002F50  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
002F52  3               colty0:
002F52  3  A0 09        	ldy #9					; distance to x position in table.
002F54  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
002F56  3  85 64        	sta z80_e
002F58  3  88           	dey
002F59  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
002F5B  3  85 65        	sta z80_d
002F5D  3               
002F5D  3               ; Drop into collision detection.
002F5D  3               
002F5D  3               colc16:
002F5D  3  A0 09        	ldy #9
002F5F  3  B1 68        	lda (z80_ix),y			 	; x coord.
002F61  3  38           	sec					; subtract x.
002F62  3  E5 64        	sbc z80_e
002F64  3  B0 05        	bcs  colc1a 				; result is positive.
002F66  3  49 FF        	eor #$ff				; make negative positive.
002F68  3  18           	clc
002F69  3  69 01        	adc #1
002F6B  3               colc1a:
002F6B  3  C9 10        	cmp #16 				; within x range?
002F6D  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
002F6F  3  85 62        	sta z80_c				; store difference.
002F71  3               
002F71  3  A0 08        	ldy #8
002F73  3  B1 68        	lda (z80_ix),y				; y coord.
002F75  3  38           	sec
002F76  3  E5 65        	sbc z80_d				; subtract y.
002F78  3  B0 05        	bcs colc1b				; result is positive.
002F7A  3  49 FF        	eor #$ff				; make negative positive.
002F7C  3  18           	clc
002F7D  3  69 01        	adc #1
002F7F  3               colc1b:
002F7F  3  C9 10        	cmp #16					; within y range?
002F81  3  B0 AA        	bcs sktyp1 				; no - they've missed.
002F83  3  18           	clc					; add x difference.
002F84  3  65 62        	adc z80_c
002F86  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
002F88  3  B0 02        	bcs :+
002F8A  3  38           	sec
002F8B  3  60           	rts 					; carry set if there's a collision.
002F8C  3               :
002F8C  3  4C 2D 2F     	jmp sktyp1				; try next sprite in table.
002F8F  3               colty1:
002F8F  3  A5 68        	lda z80_x  				; compare the two.
002F91  3  C5 66        	cmp z80_l
002F93  3  D0 09        	bne end_col
002F95  3  A5 69        	lda z80_i
002F97  3  C5 67        	cmp z80_h
002F99  3  D0 03        	bne end_col
002F9B  3  4C 2D 2F     	jmp sktyp1 				; addresses are identical.
002F9E  3               end_col:
002F9E  3  4C 52 2F     	jmp colty0
002FA1  3               
002FA1  3               ;-----------------------------------------------------------
002FA1  3               ; Display number, left aligned
002FA1  3               ;
002FA1  3               ; Input:
002FA1  3               ;  a		= number
002FA1  3               ;
002FA1  3               ; global:	-
002FA1  3               ; local:	a,y,bc,hl,displ0
002FA1  3               ; calls:	num2ch,dmsg3
002FA1  3               ;-----------------------------------------------------------
002FA1  3               
002FA1  3               disply:
002FA1  3  85 61        	sta z80_a
002FA3  3  A9 C9        	lda #<displ0				; display workspace.
002FA5  3  85 62        	sta z80_c
002FA7  3  A9 2F        	lda #>displ0
002FA9  3  85 63        	sta z80_b
002FAB  3  A5 61        	lda z80_a
002FAD  3  20 4E 22     	jsr num2ch				; convert accumulator to string.
002FB0  3               displ1:
002FB0  3  C6 62        	dec z80_c				; back one character.
002FB2  3  D0 02        	bne :+
002FB4  3  C6 63        	dec z80_b
002FB6  3               :
002FB6  3  A0 00        	ldy #0
002FB8  3  B1 62        	lda (z80_bc),y				; fetch digit.
002FBA  3  09 80        	ora #128				; insert end marker.
002FBC  3  91 62        	sta (z80_bc),y				; new value.
002FBE  3               
002FBE  3  A9 C9        	lda #<displ0				; display space.
002FC0  3  85 66        	sta z80_l
002FC2  3  A9 2F        	lda #>displ0
002FC4  3  85 67        	sta z80_h
002FC6  3  4C 77 2A     	jmp dmsg3				; display the string.
002FC9  3               
002FC9  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
002FCD  3               
002FCD  3               ;----------------------------------------------------------------
002FCD  3               ; Initialise screen.
002FCD  3               ;
002FCD  3               ; global:	roomtb,scno
002FCD  3               ; local:	-
002FCD  3               ; calls:	tstcs
002FCD  3               ;----------------------------------------------------------------
002FCD  3               
002FCD  3               initsc:
002FCD  3  AD E5 33     	lda roomtb 			; whereabouts in the map are we?
002FD0  3  20 DA 2F     	jsr tstsc 			; find displacement.
002FD3  3  C9 FF        	cmp #255 			; is it valid?
002FD5  3  F0 02        	beq init_end 			; no, it's rubbish.
002FD7  3  85 rr        	sta scno			; store new room number.
002FD9  3               init_end:
002FD9  3  60           	rts
002FDA  3               
002FDA  3               ;----------------------------------------------------------------
002FDA  3               ; Test screen.
002FDA  3               ;
002FDA  3               ; global:	-
002FDA  3               ; local:	x
002FDA  3               ; calls:	-
002FDA  3               ;----------------------------------------------------------------
002FDA  3               
002FDA  3               tstsc:
002FDA  3  85 rr        	sta tmproom
002FDC  3  18           	clc
002FDD  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
002FDF  3  AA           	tax 				; add displacement to map data.
002FE0  3  BD 10 34     	lda mapdat-MAPWID,x 		; find room number there.
002FE3  3  60           	rts
002FE4  3               
002FE4  3               ;tmproom:	.byte 0
002FE4  3               
002FE4  3               ;--------------------------
002FE4  3               ; Screen left.
002FE4  3               ;--------------------------
002FE4  3               
002FE4  3               scrl:
002FE4  3  AD E5 33     	lda roomtb 			; present room table pointer.
002FE7  3  38           	sec
002FE8  3  E9 01        	sbc #1				; room left.
002FEA  3               scrl0:
002FEA  3  20 DA 2F     	jsr tstsc			; test screen.
002FED  3  C9 FF        	cmp #255			; is there a screen this way?
002FEF  3  D0 01        	bne :+
002FF1  3  60           	rts				; no, return to loop.
002FF2  3               :
002FF2  3  A5 rr        	lda tmproom			; restore room displacement.
002FF4  3  8D E5 33     	sta roomtb			; new room table position.
002FF7  3               scrl1:
002FF7  3  20 CD 2F     	jsr initsc 			; set new screen.
002FFA  3  A9 02        	lda #2
002FFC  3  85 rr        	sta restfl 			; set it.
002FFE  3  60           	rts
002FFF  3               scrr:
002FFF  3  AD E5 33     	lda roomtb 			; room table pointer.
003002  3  18           	clc
003003  3  69 01        	adc #1				; room right.
003005  3  4C EA 2F     	jmp scrl0
003008  3               scru:
003008  3  AD E5 33     	lda roomtb 			; room table pointer.
00300B  3  38           	sec
00300C  3  E9 03        	sbc #MAPWID 			; room up.
00300E  3  4C EA 2F     	jmp scrl0
003011  3               scrd:
003011  3  AD E5 33     	lda roomtb 			; room table pointer.
003014  3  18           	clc
003015  3  69 03        	adc #MAPWID 			; room down.
003017  3  4C EA 2F     	jmp scrl0
00301A  3               
00301A  3               ;-----------------------------------------
00301A  3               ; Jump to new screen.
00301A  3               ;-----------------------------------------
00301A  3               
00301A  3               nwscr:
00301A  3  A2 00        	ldx #0				; start of map data.
00301C  3               nwscr0:
00301C  3  DD 13 34     	cmp mapdat,x
00301F  3  F0 06        	beq nwscr1			; have we found a match for screen?
003021  3  E8           	inx 				; next room.
003022  3  E0 50        	cpx #80				; zero room count, 80 to search.
003024  3  D0 F6        	bne nwscr0			; keep looking.
003026  3  60           	rts
003027  3               nwscr1:
003027  3  8E E5 33     	stx roomtb			; set the map position.
00302A  3  4C F7 2F     	jmp scrl1			; draw new room.
00302D  3               
00302D  3               
00302D  3               ;----------------------------------------------------------
00302D  3               ; Gravity processing.
00302D  3               ;----------------------------------------------------------
00302D  3               
00302D  3               grav:
00302D  3  A0 0D        	ldy #13
00302F  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003031  3  85 66        	sta z80_l
003033  3  A0 0E        	ldy #14
003035  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003037  3  85 67        	sta z80_h
003039  3  05 66        	ora z80_l			; merge in low byte.
00303B  3  D0 01        	bne :+
00303D  3  60           	rts				; if neither is set, we're not in the air.
00303E  3               :
00303E  3  A0 00        	ldy #0
003040  3  B1 66        	lda (z80_hl),y			; pixels to move.
003042  3  85 61        	sta z80_a
003044  3  C9 63        	cmp #99				; reached the end?
003046  3  D0 0C        	bne grav0			; no, continue.
003048  3               grav2:
003048  3  C6 66        	dec z80_l			; go back to previous value.
00304A  3  C9 FF        	cmp #$ff
00304C  3  D0 02        	bne :+
00304E  3  C6 67        	dec z80_h
003050  3               :
003050  3  B1 66        	lda (z80_hl),y			; fetch that from table.
003052  3  85 61        	sta z80_a
003054  3               grav0:
003054  3  E6 66        	inc z80_l			; point to next table entry.
003056  3  D0 02        	bne :+
003058  3  E6 67        	inc z80_h
00305A  3               :
00305A  3  A5 66        	lda z80_l
00305C  3  A0 0D        	ldy #13
00305E  3  91 68        	sta (z80_ix),y			; store new pointer low.
003060  3  A5 67        	lda z80_h
003062  3  A0 0E        	ldy #14
003064  3  91 68        	sta (z80_ix),y			; store new pointer high.
003066  3               grav1:
003066  3  A5 61        	lda z80_a
003068  3  D0 01        	bne :+				; any movement required?
00306A  3  60           	rts				; no, not this time.
00306B  3               :
00306B  3  A5 61        	lda z80_a
00306D  3  C9 80        	cmp #128			; is it up or down?
00306F  3  B0 15        	bcs gravu			; it's up.
003071  3               gravd:
003071  3  85 63        	sta z80_b			; set pixels to move.
003073  3               gravd0:
003073  3  20 9E 26     	jsr cangd			; can we go down?
003076  3  D0 28        	bne gravst			; can't move down, so stop.
003078  3  A0 08        	ldy #8
00307A  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
00307C  3  18           	clc
00307D  3  69 01        	adc #1
00307F  3  91 68        	sta (z80_ix),y
003081  3  C6 63        	dec z80_b
003083  3  D0 EE        	bne gravd0
003085  3  60           	rts
003086  3               gravu:
003086  3  49 FF        	eor #$ff			; flip the sign so it's positive.
003088  3  18           	clc
003089  3  69 01        	adc #1
00308B  3  85 63        	sta z80_b			; set pixels to move.
00308D  3               gravu0:
00308D  3  20 69 26     	jsr cangu			; can we go up?
003090  3  D0 6E        	bne ifalls			; can't move up, go down next.
003092  3  A0 08        	ldy #8
003094  3  B1 68        	lda (z80_ix),y
003096  3  38           	sec
003097  3  E9 01        	sbc #1
003099  3  91 68        	sta (z80_ix),y			; adjust new x coord.
00309B  3  C6 63        	dec z80_b
00309D  3  D0 EE        	bne gravu0
00309F  3  60           	rts
0030A0  3               gravst:
0030A0  3  A0 0D        	ldy #13
0030A2  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0030A4  3  85 66        	sta z80_l
0030A6  3  A0 0E        	ldy #14
0030A8  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0030AA  3  85 67        	sta z80_h
0030AC  3               
0030AC  3  A9 00        	lda #0				; null value in pointer.
0030AE  3  A0 0D        	ldy #13
0030B0  3  91 68        	sta (z80_ix),y			; store new pointer low.
0030B2  3  C8           	iny
0030B3  3  91 68        	sta (z80_ix),y			; store new pointer high.
0030B5  3               
0030B5  3  A0 00        	ldy #0
0030B7  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
0030B9  3  C9 63        	cmp #99				; is it the end marker?
0030BB  3               evftf:
0030BB  3  F0 01        	beq :+				; yes, fallen too far.
0030BD  3  60           	rts
0030BE  3               :
0030BE  3  4C 8C 34     	jmp evnt15			; EVENT FELLTOOFAR
0030C1  3               
0030C1  3               ;------------------------------------------------
0030C1  3               ; Initiate fall check.
0030C1  3               ;------------------------------------------------
0030C1  3               
0030C1  3               ifall:
0030C1  3  A0 0D        	ldy #13
0030C3  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0030C5  3  85 66        	sta z80_l
0030C7  3  A0 0E        	ldy #14
0030C9  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0030CB  3  85 67        	sta z80_h			; high byte in accumulator.
0030CD  3  05 66        	ora z80_l			; merge in low byte.
0030CF  3  F0 01        	beq :+
0030D1  3  60           	rts				; if either is set, we're already in the air.
0030D2  3               :
0030D2  3  A0 09        	ldy #9
0030D4  3  B1 68        	lda (z80_ix),y			; y coordinate.
0030D6  3  85 rr        	sta dispx
0030D8  3  A0 08        	ldy #8
0030DA  3  B1 68        	lda (z80_ix),y			; look x coordinate.
0030DC  3  18           	clc
0030DD  3               numsp7:
0030DD  3  69 10        	adc #SPR_HGT			; add 16 pixels.
0030DF  3  85 rr        	sta dispy			; set up test coordinates.
0030E1  3  20 13 29     	jsr tstbl			; get map address.
0030E4  3  20 40 28     	jsr plchk			; block, platform check.
0030E7  3  F0 01        	beq :+
0030E9  3  60           	rts				; it's solid, don't fall.
0030EA  3               :
0030EA  3  E6 rr        	inc bufaddr			; look right one cell.
0030EC  3  20 40 28     	jsr plchk			; block, platform check.
0030EF  3  F0 01        	beq :+
0030F1  3  60           	rts				; it's solid, don't fall.
0030F2  3               :
0030F2  3  A5 rr        	lda dispx			; y coordinate.
0030F4  3  29 07        	and #7				; position straddling block cells.
0030F6  3  F0 08        	beq ifalls			; no more checks needed.
0030F8  3  E6 rr        	inc bufaddr			; look to third cell.
0030FA  3  20 40 28     	jsr plchk			; block, platform check.
0030FD  3  F0 01        	beq :+
0030FF  3  60           	rts				; it's solid, don't fall.
003100  3               :
003100  3               ifalls:
003100  3  A9 85        	lda #<jtab			; jump table start.
003102  3  85 66        	sta z80_l
003104  3  A9 38        	lda #>jtab
003106  3  85 67        	sta z80_h
003108  3               ifal0:
003108  3  E6 66        	inc z80_l			; point to next value.
00310A  3  D0 02        	bne :+
00310C  3  E6 67        	inc z80_h
00310E  3               :
00310E  3  A0 00        	ldy #0
003110  3  B1 66        	lda (z80_hl),y			; fetch value.
003112  3  F0 F4        	beq ifal0			; no, get next value.
003114  3  C9 63        	cmp #99				; reached end of table?
003116  3  D0 01        	bne :+
003118  3  60           	rts				; yes, don't fall.
003119  3               :
003119  3  C9 80        	cmp #128			; is it going up?
00311B  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
00311D  3               
00311D  3  A0 0D        	ldy #13
00311F  3  A5 66        	lda z80_l
003121  3  91 68        	sta (z80_ix),y 			; set jump low.
003123  3  A0 0E        	ldy #14
003125  3  A5 67        	lda z80_h
003127  3  91 68        	sta (z80_ix),y 			; set jump high.
003129  3  60           	rts
00312A  3               
00312A  3               
00312A  3               ;----------------------------------------------------
00312A  3               ; Get frame data for a particular sprite.
00312A  3               ; Input:
00312A  3               ;  a		= framenumer
00312A  3               ; Output:
00312A  3               ;  hl		= frame address
00312A  3               ;
00312A  3               ; global:	hl,frmptr
00312A  3               ; local:	-
00312A  3               ; calls:	-
00312A  3               ;----------------------------------------------------
00312A  3               
00312A  3               gfrm:
00312A  3  0A           	asl a	 		 	; multiple of 2.
00312B  3  18           	clc
00312C  3  6D 11 20     	adc frmptr 			; frames used by game.
00312F  3  85 66        	sta z80_l
003131  3  AD 12 20     	lda frmptr+1
003134  3  69 00        	adc #0
003136  3  85 67        	sta z80_h 			; point to frame start.
003138  3  60           	rts
003139  3               
003139  3               ;----------------------------------------------------
003139  3               ; Find sprite list for current room.
003139  3               ;
003139  3               ; global:	hl
003139  3               ; local:	x,y
003139  3               ; calls:	-
003139  3               ;----------------------------------------------------
003139  3               
003139  3               sprlst:
003139  3  A9 5A        	lda #<nmedat 			; list of enemy sprites.
00313B  3  85 66        	sta z80_l
00313D  3  A9 35        	lda #>nmedat
00313F  3  85 67        	sta z80_h
003141  3  A6 rr        	ldx scno 			; screen number.
003143  3  D0 01        	bne sprls2 			; is it the first screen?
003145  3  60           	rts 				; yes, don't need to search data.
003146  3               sprls2:
003146  3  A0 00        	ldy #0
003148  3               sprls1:
003148  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
00314A  3  C9 FF        	cmp #255			; is it an end marker?
00314C  3  F0 0E        	beq sprls0 			; yes, end of this room.
00314E  3               
00314E  3  18           	clc 				; point to next sprite in list.
00314F  3  A5 66        	lda z80_l
003151  3  69 04        	adc #NMESIZ
003153  3  85 66        	sta z80_l
003155  3  90 02        	bcc :+
003157  3  E6 67        	inc z80_h
003159  3               :
003159  3  4C 48 31     	jmp sprls1 			; continue until end of room.
00315C  3               sprls0:
00315C  3  E6 66        	inc z80_l 			; point to start of next screen.s
00315E  3  D0 02        	bne :+
003160  3  E6 67        	inc z80_h
003162  3               :
003162  3  CA           	dex
003163  3  D0 E3        	bne sprls1 			; continue until room found.
003165  3  60           	rts
003166  3               
003166  3               
003166  3               ;----------------------------------------------------
003166  3               ; Clear all but a single player sprite.
003166  3               ;
003166  3               ; global:	-
003166  3               ; local:	x,y,ix
003166  3               ; calls:	-
003166  3               ;----------------------------------------------------
003166  3               
003166  3               nspr:
003166  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003168  3  85 rr        	sta sprcnt
00316A  3  A9 08        	lda #<sprtab 			; sprite table.
00316C  3  85 68        	sta z80_x
00316E  3  A9 33        	lda #>sprtab
003170  3  85 69        	sta z80_i
003172  3               nspr0:
003172  3  A0 00        	ldy #0 				; fetch sprite type.
003174  3  B1 68        	lda (z80_ix),y 			; is it a player?
003176  3  F0 1A        	beq nspr1 			; yes, keep this one.
003178  3               
003178  3  A9 FF        	lda #255
00317A  3  A0 00        	ldy #0 				; fetch sprite type.
00317C  3  91 68        	sta (z80_ix),y 			; delete sprite.
00317E  3  A0 05        	ldy #5
003180  3  91 68        	sta (z80_ix),y 			; remove next type.
003182  3               
003182  3  18           	clc	 			; next sprite.
003183  3  A5 68        	lda z80_x
003185  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003187  3  85 68        	sta z80_x
003189  3  90 02        	bcc :+
00318B  3  E6 69        	inc z80_i
00318D  3               :
00318D  3  C6 rr        	dec sprcnt	 			; one less space in the table.
00318F  3  D0 E1        	bne nspr0
003191  3  60           	rts
003192  3               nspr1:
003192  3  A9 FF        	lda #255
003194  3  A0 00        	ldy #0
003196  3  91 68        	sta (z80_ix),y 			; delete sprite.
003198  3               
003198  3  18           	clc	 			; point to next sprite.
003199  3  A5 68        	lda z80_x
00319B  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00319D  3  85 68        	sta z80_x
00319F  3  90 02        	bcc :+
0031A1  3  E6 69        	inc z80_i
0031A3  3               :
0031A3  3  C6 rr        	dec sprcnt	 			; one less to do.
0031A5  3  D0 01        	bne nspr2
0031A7  3  60           	rts
0031A8  3               nspr2:
0031A8  3  A9 FF        	lda #255
0031AA  3  A0 00        	ldy #0
0031AC  3  91 68        	sta (z80_ix),y 			; delete sprite.
0031AE  3  A0 05        	ldy #5
0031B0  3  91 68        	sta (z80_ix),y 			; remove next type.
0031B2  3               
0031B2  3  18           	clc	 			; next sprite.
0031B3  3  A5 68        	lda z80_x
0031B5  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0031B7  3  85 68        	sta z80_x
0031B9  3  90 02        	bcc :+
0031BB  3  E6 69        	inc z80_i
0031BD  3               :
0031BD  3  C6 rr        	dec sprcnt	 			; one less space in table.
0031BF  3  D0 E7        	bne nspr2
0031C1  3  60           	rts
0031C2  3               
0031C2  3               ;----------------------------------------------------------
0031C2  3               ; Two initialisation routines.
0031C2  3               ; Initialise sprites - copy everything from list to table.
0031C2  3               ;
0031C2  3               ; global:	-
0031C2  3               ; local:	x,y,ix
0031C2  3               ; calls:	cpsp
0031C2  3               ;----------------------------------------------------------
0031C2  3               
0031C2  3               ispr:
0031C2  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0031C4  3  85 rr        	sta sprcnt
0031C6  3  A9 08        	lda #<sprtab			; sprite table.
0031C8  3  85 68        	sta z80_x
0031CA  3  A9 33        	lda #>sprtab
0031CC  3  85 69        	sta z80_i
0031CE  3               ispr2:
0031CE  3  A0 00        	ldy #0
0031D0  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0031D2  3  C9 FF        	cmp #255 			; is it an end marker?
0031D4  3  D0 01        	bne :+
0031D6  3  60           	rts 				; yes, no more to do.
0031D7  3               :
0031D7  3               ispr1:
0031D7  3  A0 00        	ldy #0
0031D9  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
0031DB  3  C9 FF        	cmp #255 			; is it enabled yet?
0031DD  3  D0 08        	bne ispr4			; yes, try another slot.
0031DF  3               
0031DF  3  A0 05        	ldy #5
0031E1  3  B1 68        	lda (z80_ix),y		 	; next type.
0031E3  3  C9 FF        	cmp #255 			; is it enabled yet?
0031E5  3  F0 10        	beq ispr3 			; no, process this one.
0031E7  3               ispr4:
0031E7  3  18           	clc 				; next sprite.
0031E8  3  A5 68        	lda z80_x
0031EA  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0031EC  3  85 68        	sta z80_x
0031EE  3  90 02        	bcc :+
0031F0  3  E6 69        	inc z80_i
0031F2  3               :
0031F2  3  C6 rr        	dec sprcnt
0031F4  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0031F6  3  60           	rts  				; no more room in table.
0031F7  3               ispr3:
0031F7  3  20 4A 32     	jsr cpsp			; initialise a sprite.
0031FA  3  C6 rr        	dec sprcnt			; one less space in the table.
0031FC  3  D0 D0        	bne ispr2
0031FE  3  60           	rts
0031FF  3               
0031FF  3               
0031FF  3               ;-----------------------------------------------------------------------
0031FF  3               ; Initialise sprites - but not player, we're keeping the old one.
0031FF  3               ;
0031FF  3               ; global:	-
0031FF  3               ; local:	x,y,ix
0031FF  3               ; calls:	cpsp
0031FF  3               ;-----------------------------------------------------------------------
0031FF  3               
0031FF  3               kspr:
0031FF  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
003201  3  A9 08        	lda #<sprtab 			; sprite table.
003203  3  85 68        	sta z80_x
003205  3  A9 33        	lda #>sprtab
003207  3  85 69        	sta z80_i
003209  3               kspr2:
003209  3  A0 00        	ldy #0
00320B  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00320D  3  C9 FF        	cmp #255 			; is it an end marker?
00320F  3  D0 01        	bne :+
003211  3  60           	rts 				; yes, no more to do.
003212  3               :
003212  3  C9 00        	cmp #0
003214  3  D0 0E        	bne kspr1 			; no, add to table as normal.
003216  3               
003216  3  18           	clc 				; next sprite.
003217  3  A5 66        	lda z80_l
003219  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
00321B  3  85 66        	sta z80_l
00321D  3  90 02        	bcc :+
00321F  3  E6 67        	inc z80_h
003221  3               :
003221  3  4C 09 32     	jmp kspr2
003224  3               kspr1:
003224  3  A0 00        	ldy #0 				; fetch sprite type.
003226  3  B1 68        	lda (z80_ix),y
003228  3  C9 FF        	cmp #255 			; is it enabled yet?
00322A  3  D0 08        	bne kspr4 			; yes, try another slot.
00322C  3               
00322C  3  A0 05        	ldy #5 				; next type.
00322E  3  B1 68        	lda (z80_ix),y
003230  3  C9 FF        	cmp #255 			; is it enabled yet?
003232  3  F0 0F        	beq kspr3 			; no, process this one.
003234  3               kspr4:
003234  3  18           	clc 				; next sprite.
003235  3  A5 68        	lda z80_x
003237  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003239  3  85 68        	sta z80_x
00323B  3  90 02        	bcc :+
00323D  3  E6 69        	inc z80_i
00323F  3               :
00323F  3  CA           	dex	 			; repeat for remaining sprites.
003240  3  D0 E2        	bne kspr1
003242  3  60           	rts  				; no more room in table.
003243  3               kspr3:
003243  3  20 4A 32     	jsr cpsp 			; copy sprite to table.
003246  3  CA           	dex	 			; one less space in the table.
003247  3  D0 C0        	bne kspr2
003249  3  60           	rts
00324A  3               
00324A  3               ;----------------------------------------------
00324A  3               ; Copy sprite from list to table.
00324A  3               ;
00324A  3               ; global:	hl,ix
00324A  3               ; local:	y
00324A  3               ; calls:	evnt09
00324A  3               ;----------------------------------------------
00324A  3               
00324A  3               cpsp:
00324A  3  A0 00        	ldy #0				; fetch byte from table.
00324C  3  B1 66        	lda (z80_hl),y
00324E  3  91 68        	sta (z80_ix),y			; set up type.
003250  3  A0 05        	ldy #PAM1ST
003252  3  91 68        	sta (z80_ix),y 			; set up type.
003254  3               
003254  3  E6 66        	inc z80_l 			; move to next byte.
003256  3  D0 02        	bne :+
003258  3  E6 67        	inc z80_h
00325A  3               :
00325A  3  A0 00        	ldy #0 				; fetch byte from table.
00325C  3  B1 66        	lda (z80_hl),y
00325E  3  A0 06        	ldy #6
003260  3  91 68        	sta (z80_ix),y			; set up image.
003262  3               
003262  3  E6 66        	inc z80_l 			; move to next byte.
003264  3  D0 02        	bne :+
003266  3  E6 67        	inc z80_h
003268  3               :
003268  3  A0 00        	ldy #0
00326A  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
00326C  3  A0 08        	ldy #8
00326E  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003270  3               
003270  3  A9 C8        	lda #200 			; set initial coordinate off screen.
003272  3  A0 03        	ldy #3
003274  3  91 68        	sta (z80_ix),y
003276  3               
003276  3  E6 66        	inc z80_l 			; move to next byte.
003278  3  D0 02        	bne :+
00327A  3  E6 67        	inc z80_h
00327C  3               :
00327C  3  A0 00        	ldy #0 				; fetch byte from table.
00327E  3  B1 66        	lda (z80_hl),y
003280  3  A0 09        	ldy #9
003282  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003284  3               
003284  3  E6 66        	inc z80_l 			; move to next byte.
003286  3  D0 02        	bne :+
003288  3  E6 67        	inc z80_h
00328A  3               :
00328A  3  A9 00        	lda #0				; zeroes in accumulator.
00328C  3  A0 07        	ldy #7 				; reset frame number.
00328E  3  91 68        	sta (z80_ix),y
003290  3  A0 0A        	ldy #10 			; reset direction.
003292  3  91 68        	sta (z80_ix),y
003294  3  A0 0D        	ldy #13				; reset jump pointer low.
003296  3  91 68        	sta (z80_ix),y
003298  3  A0 0E        	ldy #14	 			; reset jump pointer high.
00329A  3  91 68        	sta (z80_ix),y
00329C  3               
00329C  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
00329E  3  A0 10        	ldy #16
0032A0  3  91 68        	sta (z80_ix),y
0032A2  3               evis0:
0032A2  3  A5 69        	lda z80_i
0032A4  3  48           	pha
0032A5  3  A5 68        	lda z80_x
0032A7  3  48           	pha
0032A8  3  A5 67        	lda z80_h
0032AA  3  48           	pha
0032AB  3  A5 66        	lda z80_l
0032AD  3  48           	pha
0032AE  3               
0032AE  3  20 23 34     	jsr evnt09 			; perform event.
0032B1  3               
0032B1  3  68           	pla
0032B2  3  85 66        	sta z80_l
0032B4  3  68           	pla
0032B5  3  85 67        	sta z80_h
0032B7  3  68           	pla
0032B8  3  85 68        	sta z80_x
0032BA  3  68           	pla
0032BB  3  85 69        	sta z80_i
0032BD  3               
0032BD  3  18           	clc
0032BE  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0032C0  3  69 11        	adc #TABSIZ		 	; next sprite.
0032C2  3  85 68        	sta z80_x
0032C4  3  90 02        	bcc :+
0032C6  3  E6 69        	inc z80_i
0032C8  3               :
0032C8  3  60           	rts
0032C9  3               
0032C9  3               
0032C9  3               ;-------------------------------------
0032C9  3               ; Clear the play area window.
0032C9  3               ;-------------------------------------
0032C9  3               
0032C9  3               clw:
0032C9  3  AD 1D 20     	lda wintop			; get coordinates of window.
0032CC  3  85 rr        	sta dispy			; put into dispx for calculation.
0032CE  3  AD 1E 20     	lda winlft
0032D1  3  85 rr        	sta dispx
0032D3  3               
0032D3  3  AD 1F 20     	lda winhgt			; height of window.
0032D6  3  85 rr        	sta rrow			; copy to b register.
0032D8  3               clw3:
0032D8  3  AD 20 20     	lda winwid 			; width of window.
0032DB  3  85 rr        	sta rcol
0032DD  3               clw2:
0032DD  3  20 E5 24     	jsr gprad 			; get print address.
0032E0  3  A9 00        	lda #0				; zero byte to write.
0032E2  3  A2 07        	ldx #7				; pixel height of each cell.
0032E4  3               clw1:
0032E4  3  BC 6B 25     	ldy scrtab,x
0032E7  3  91 rr        	sta (scraddr),y 			; copy to screen.
0032E9  3  CA           	dex				; next screen row down.
0032EA  3  10 F8        	bpl clw1
0032EC  3               
0032EC  3  E6 rr        	inc dispx			; next column.
0032EE  3  C6 rr        	dec rcol			; one less to do.
0032F0  3  D0 EB        	bne clw2			; repeat for remaining columns.
0032F2  3               
0032F2  3  AD 1E 20     	lda winlft			; get left edge.
0032F5  3  85 rr        	sta dispx 			; reset x.
0032F7  3  E6 rr        	inc dispy 			; next line down.
0032F9  3               
0032F9  3  C6 rr        	dec rrow
0032FB  3  D0 DB        	bne clw3			; repeat down the screen.
0032FD  3               
0032FD  3  AD 1D 20     	lda wintop			; get coordinates of window.
003300  3  85 rr        	sta chary			; put into display position.
003302  3  AD 1E 20     	lda winlft
003305  3  85 rr        	sta charx
003307  3  60           	rts
003308  3               
003308  3               
003308  3               ;----------------------------------------------------------
003308  3               ; Effects code.
003308  3               ; Ticker routine is called 25 times per second.
003308  3               ;
003308  3               ; HL = txtscr = left text screen address
003308  3               ; DE = txtscr+txtwid-1 = right text screen address
003308  3               ; BC = txtpos = text scroller position
003308  3               ;
003308  3               ;----------------------------------------------------------
003308  3               
003308  3               .if sflag
003308  3               scrly:
003308  3               	rts
003308  3               	.word txtscr         	; get left screen address.
003308  3               	sta scr_l
003308  3               	lda txtscr+1
003308  3               	sta scr_l+1
003308  3               	sta scr_r+1
003308  3               
003308  3               	stx xtmp
003308  3               
003308  3               	clc         		; get right screen address.
003308  3               	lda scr_l
003308  3               	adc txtwid
003308  3               	sta scr_r
003308  3               	dec scr_r
003308  3               scrly1:
003308  3               	ldy txtwid		; set txtwide
003308  3               	dey
003308  3               	clc
003308  3               scrly0:
003308  3               	lda (scr_l),y		; scroll 1 line
003308  3               	rol a
003308  3               	sta (scr_l),y
003308  3               	dey
003308  3               	bpl scrly0
003308  3               
003308  3               	clc			; point to next line
003308  3               	lda scr_l
003308  3               	adc #32
003308  3               	sta scr_l
003308  3               	bcc scrly1		; repeat 8 times
003308  3               
003308  3               	lda txtpos 		; get text pointer.
003308  3               	sta scr_txt
003308  3               	lda txtpos+1
003308  3               	sta scr_txt+1
003308  3               
003308  3               	ldy #0
003308  3               	lda (scr_txt),y 		; find character we're displaying.
003308  3               	and #127 		; remove end marker bit if applicable.
003308  3               	cmp #13			; is it newline?
003308  3               	bne scrly5 		; no, it's okay.
003308  3               	lda #32			; convert to a space instead.
003308  3               scrly5:
003308  3               	sta fntaddr		; calculate char address
003308  3               	lda #0
003308  3               	sta fntaddr+1
003308  3               	asl fntaddr  		; multiply char by 8.
003308  3               	rol fntaddr+1
003308  3               	asl fntaddr
003308  3               	rol fntaddr+1
003308  3               	asl fntaddr
003308  3               	rol fntaddr+1
003308  3               	lda fntaddr
003308  3               	clc
003308  3               	adc #<(FONT-256)
003308  3               	sta scrly3+1		; that's the low byte.
003308  3               	lda fntaddr+1
003308  3               	adc #>(FONT-256)
003308  3               	sta scrly3+2		; add displacement.
003308  3               
003308  3               	ldx #0
003308  3               scrly3:
003308  3               	lda $3333,x		; get image of char line.
003308  3               	and txtbit
003308  3               	beq scrly2		; don't plot pixel
003308  3               	ldy scrline,x
003308  3               	lda (scr_r),y
003308  3               	clc
003308  3               	ora #1
003308  3               	sta (scr_r),y		; plot pixel
003308  3               scrly2:
003308  3               	inx			; next line of char.
003308  3               	cpx #8
003308  3               	bne scrly3
003308  3               
003308  3               	lsr txtbit		; bit of text to display.
003308  3               	bcs :+
003308  3               	rts
003308  3               :
003308  3               	ldy #0
003308  3               	lda (scr_txt),y 	; what was the character?
003308  3               	asl a	  		; end of message?
003308  3               	bcs scrly4
003308  3               	inc txtpos
003308  3               	bne :+
003308  3               	inc txtpos+1
003308  3               :
003308  3               	jmp scrly6 		; not yet - continue.
003308  3               scrly4:
003308  3               	lda txtini 		; start of scrolling message.
003308  3               	sta txtpos
003308  3               	lda txtini+1
003308  3               	sta txtpos+1
003308  3               scrly6:
003308  3               	lda #128
003308  3               	sta txtbit
003308  3               	ldx xtmp
003308  3               	rts
003308  3               
003308  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003308  3               
003308  3               ;-------------------------------------------------------
003308  3               ; Entry TICKER command
003308  3               ;
003308  3               ; Entry:
003308  3               ;  z80_b = message nr
003308  3               ;  z80_c = width
003308  3               ;-------------------------------------------------------
003308  3               
003308  3               iscrly:
003308  3               	jsr prescr 		; set up display position.
003308  3               
003308  3               	lda #<msgdat 		; text messages.
003308  3               	sta z80_l
003308  3               	lda #>msgdat
003308  3               	sta z80_h
003308  3               
003308  3               	lda z80_c 		; width.
003308  3               	sec
003308  3               	sbc #1			; subtract one.
003308  3               	cmp #32 		; is it between 1 and 32?
003308  3               	bcc :+
003308  3               	lda #$60
003308  3               	jmp iscrl0		; no, disable messages.
003308  3               :
003308  3               	ldx z80_b		; message number.
003308  3               	jsr getwrd 		; find message start.
003308  3               
003308  3               	lda z80_l		; set initial text position.
003308  3               	sta txtini
003308  3               	lda z80_h
003308  3               	sta txtini+1
003308  3               
003308  3               	lda #$ad		; code for lda adrr
003308  3               iscrl0:
003308  3               	sta scrly		; enable/disable scrolling routine.
003308  3               
003308  3               	jsr prescr 		; set up display position.
003308  3               	jsr gprad 		; get print address.
003308  3               
003308  3               	lda scraddr 		; set text screen address.
003308  3               	sta txtscr
003308  3               	lda scraddr+1
003308  3               	sta txtscr+1
003308  3               
003308  3               	lda z80_c		; width.
003308  3               	sta txtwid		; set width in working storage.
003308  3               
003308  3               	lda #128 		; start with leftmost bit.
003308  3               	sta txtbit
003308  3               
003308  3               	jmp scrly4
003308  3               .endif
003308  3               
003308  3               ;------------------------------------------------------------------
003308  3               ; Dig routine, conditional assembly depending on dflag
003308  3               ;------------------------------------------------------------------
003308  3               .if dflag
003308  3               dig:
003308  3               	and #3
003308  3               	beq digr		; dig right
003308  3               	cmp #1
003308  3               	beq digl		; dig left
003308  3               	cmp #2
003308  3               	beq digd		; dig down
003308  3               
003308  3               ; Dig up.
003308  3               
003308  3               digu:				; dig up
003308  3               	ldy #8
003308  3               	lda (z80_ix),y
003308  3               	sec
003308  3               	sbc #2
003308  3               	sta dispy		; set y
003308  3               
003308  3               	iny
003308  3               	lda (z80_ix),y
003308  3               	sta dispx		; set x
003308  3               	jmp digv
003308  3               
003308  3               ; Dig down.
003308  3               
003308  3               digd:
003308  3               	ldy #9
003308  3               	lda (z80_ix),y
003308  3               	sta dispx		; set y
003308  3               
003308  3               	dey
003308  3               	clc
003308  3               	lda (z80_ix),y
003308  3               	adc #16
003308  3               	sta dispy		; set y
003308  3               	jmp digv
003308  3               
003308  3               ; Dig left.
003308  3               
003308  3               digl:
003308  3               	ldy #8
003308  3               	lda (z80_ix),y
003308  3               	sta dispy		; set y
003308  3               
003308  3               	iny
003308  3               	lda (z80_ix),y
003308  3               	sec
003308  3               	sbc #2			; x=x-2
003308  3               	sta dispx		; set x
003308  3               	jmp digh
003308  3               
003308  3               ; Dig right.
003308  3               
003308  3               digr:
003308  3               	ldy #8
003308  3               	lda (z80_ix),y
003308  3               	sta dispy		; set y
003308  3               
003308  3               	iny
003308  3               	lda (z80_ix),y
003308  3               	clc
003308  3               	adc #16
003308  3               	sta dispx		; set x+16
003308  3               	jmp digh
003308  3               
003308  3               ; Vertical digging
003308  3               
003308  3               digv:
003308  3               	jsr tstbl		; check blocktype in MAP
003308  3               	jsr fdchk		; test if FODDER
003308  3               
003308  3               	clc
003308  3               	lda dispx		; look 1 cell down
003308  3               	adc #8
003308  3               	sta dispx
003308  3               	jsr tstbl		; check blocktype in MAP
003308  3               	jsr fdchk
003308  3               	lda dispx
003308  3               	and #7
003308  3               	bne :+
003308  3               	rts
003308  3               :
003308  3               	clc
003308  3               	lda dispx		; look 1 cell down
003308  3               	adc #8
003308  3               	sta dispx
003308  3               	jsr tstbl		; check blocktype in MAP
003308  3               	jmp fdchk
003308  3               
003308  3               ; Horizontal digging
003308  3               
003308  3               digh:
003308  3               	jsr tstbl		; check blocktype in MAP
003308  3               	jsr fdchk		; test if FODDER
003308  3               
003308  3               	clc
003308  3               	lda dispy		; look 1 cell down
003308  3               	adc #8
003308  3               	sta dispy
003308  3               	jsr tstbl		; check blocktype in MAP
003308  3               	jsr fdchk
003308  3               	lda dispy
003308  3               	and #7
003308  3               	bne :+
003308  3               	rts
003308  3               :
003308  3               	clc
003308  3               	lda dispy		; look 1 cell down
003308  3               	adc #8
003308  3               	sta dispy
003308  3               	jsr tstbl		; check blocktype in MAP
003308  3               	jmp fdchk
003308  3               
003308  3               digcnt:	.byte 0
003308  3               
003308  3               .endif
003308  3               
003308  3               ;------------------------------------------------------------------
003308  3               ; Sprite table
003308  3               ;------------------------------------------------------------------
003308  3               
003308  3               
003308  3               ; ix+0  = type.
003308  3               ; ix+1  = sprite image number.
003308  3               ; ix+2  = frame.
003308  3               ; ix+3  = y coord.
003308  3               ; ix+4  = x coord.
003308  3               
003308  3               ; ix+5  = new type.
003308  3               ; ix+6  = new image number.
003308  3               ; ix+7  = new frame.
003308  3               ; ix+8  = new y coord.
003308  3               ; ix+9  = new x coord.
003308  3               
003308  3               ; ix+10 = direction.
003308  3               ; ix+11 = parameter 1.
003308  3               ; ix+12 = parameter 2.
003308  3               ; ix+13 = jump pointer low.
003308  3               ; ix+14 = jump pointer high.
003308  3               ; ix+15 = data pointer low.
003308  3               ; ix+16 = data pointer high.
003308  3               
003308  3               ; block NUMSPR * TABSIZ,255
003308  3               
003308  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
00330C  3  FF FF FF FF  
003310  3  FF FF FF FF  
0033D4  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0033D8  3  FF FF FF 00  
0033DC  3  C0 78 00 00  
0033E5  3  07           roomtb:	.byte 7                      ; start room map offset.
0033E6  3               
0033E6  3               ; User routine.  Put your own code in here to be called with USER instruction.
0033E6  3               ; if USER has an argument it will be passed in the accumulator.
0033E6  3               
0033E6  3               user:
0033E6  3               	.include "user.inc"
0033E6  4  60           	rts
0033E7  4               
0033E7  3               
0033E7  3               setfgcol:
0033E7  3  29 03        	and #3
0033E9  3  A8           	tay
0033EA  3  B9 0C 34     	lda codcol,y
0033ED  3  4C 03 34     	jmp calfgc
0033F0  3               
0033F0  3               setbgcol:
0033F0  3  29 03        	and #3
0033F2  3               calbgc:
0033F2  3  A8           	tay
0033F3  3  B9 0C 34     	lda codcol,y
0033F6  3  48           	pha
0033F7  3  AD 0A 34     	lda andeor
0033FA  3  4D 0B 34     	eor andeor+1
0033FD  3  AA           	tax
0033FE  3  68           	pla
0033FF  3  8D 0B 34     	sta andeor+1
003402  3  8A           	txa
003403  3               calfgc:
003403  3  4D 0B 34     	eor andeor+1
003406  3  8D 0A 34     	sta andeor
003409  3               calex1:
003409  3  60           	rts
00340A  3               
00340A  3  00 00        andeor:	.byte 0,0
00340C  3  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
003410  3               
003410  3               ; Everything below here will be generated by the editors.
003410  3               
003410  3               WINDOWTOP = 1
003410  3               WINDOWLFT = 1
003410  3               WINDOWHGT = 22
003410  3               WINDOWWID = 30 ;a
003410  3               MAPWID = 3
003410  3  FF FF FF             .byte 255,255,255
003413  3               mapdat:
003413  3  FF 00 FF             .byte 255,0,255
003416  3  FF FF FF             .byte 255,255,255
003419  3  01           stmap:  .byte 1
00341A  3               
00341A  3               evnt00:
00341A  3  60                   rts
00341B  3               evnt01:
00341B  3  60                   rts
00341C  3               evnt02:
00341C  3  60                   rts
00341D  3               evnt03:
00341D  3  60                   rts
00341E  3               evnt04:
00341E  3  60                   rts
00341F  3               evnt05:
00341F  3  60                   rts
003420  3               evnt06:
003420  3  60                   rts
003421  3               evnt07:
003421  3  60                   rts
003422  3               evnt08:
003422  3  60                   rts
003423  3               evnt09:
003423  3  60                   rts
003424  3               evnt10:
003424  3  A9 00                lda #0		; AT
003426  3  85 rr                sta chary
003428  3  A9 01                lda #1
00342A  3  85 rr                sta charx
00342C  3  A9 01                lda #1		; PRINTMODE
00342E  3  85 rr                sta prtmod
003430  3  A9 00                lda #0		; PRINT
003432  3  20 6B 2A             jsr dmsg
003435  3  A9 00                lda #0		; PRINTMODE
003437  3  85 rr                sta prtmod
003439  3  A9 03                lda #3		; AT
00343B  3  85 rr                sta chary
00343D  3  A9 01                lda #1
00343F  3  85 rr                sta charx
003441  3  A9 01                lda #1		; PRINT
003443  3  20 6B 2A             jsr dmsg
003446  3  A5 rr                lda clock	; DISPLAY
003448  3  20 A1 2F             jsr disply
00344B  3  A9 02                lda #2		; PRINT
00344D  3  20 6B 2A             jsr dmsg
003450  3  A9 06                lda #6		; AT
003452  3  85 rr                sta chary
003454  3  A9 01                lda #1
003456  3  85 rr                sta charx
003458  3  A9 03                lda #3		; PRINT
00345A  3  20 6B 2A             jsr dmsg
00345D  3  A5 rr                lda clock		; DISPLAYCLOCK
00345F  3  85 65                sta z80_d
003461  3  A9 3C                lda #60
003463  3  85 64                sta z80_e
003465  3  20 DF 22             jsr idiv
003468  3  48                   pha
003469  3  A5 65                lda z80_d
00346B  3  20 A1 2F             jsr disply
00346E  3  E6 rr                inc charx
003470  3  A9 C9                lda #<displ0
003472  3  85 62                sta z80_c
003474  3  A9 2F                lda #>displ0
003476  3  85 63                sta z80_b
003478  3  68                   pla
003479  3  20 91 22             jsr num2dd
00347C  3  20 B0 2F             jsr displ1
00347F  3  A9 04                lda #4		; PRINT
003481  3  20 6B 2A             jsr dmsg
003484  3  60                   rts
003485  3               evnt11:
003485  3  60                   rts
003486  3               evnt12:
003486  3  20 DA 20             jsr cls		; CLS
003489  3  60                   rts
00348A  3               evnt13:
00348A  3  60                   rts
00348B  3               evnt14:
00348B  3  60                   rts
00348C  3               evnt15:
00348C  3  60                   rts
00348D  3               evnt16:
00348D  3  60                   rts
00348E  3               evnt17:
00348E  3  60                   rts
00348F  3               evnt18:
00348F  3  60                   rts
003490  3               evnt19:
003490  3  60                   rts
003491  3               evnt20:
003491  3  60                   rts
003492  3  60           ptcusr: rts
003493  3               msgdat:
003493  3  43 4C 4F 43          .byte "CLOCK TEST:",160
003497  3  4B 20 54 45  
00349B  3  53 54 3A A0  
00349F  3  43 55 52 52          .byte "CURRENT CLOCK:",160
0034A3  3  45 4E 54 20  
0034A7  3  43 4C 4F 43  
0034AE  3  20 A0                .byte " ",160
0034B0  3  43 55 52 52          .byte "CURRENT TIME:",160
0034B4  3  45 4E 54 20  
0034B8  3  54 49 4D 45  
0034BE  3  20 A0                .byte " ",160
0034C0  3               nummsg:
0034C0  3  05                   .byte 5
0034C1  3               chgfx:
0034C1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0034C5  3  00 00 00 00  
0034C9  3               bprop:
0034C9  3  00                   .byte 0
0034CA  3               sprgfx:
0034CA  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0034CE  3  00 00 00 00  
0034D2  3  00 00 00 00  
0034EA  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0034EE  3  00 00 00 00  
0034F2  3  00 00 00 00  
00350A  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00350E  3  00 00 00 00  
003512  3  00 00 00 00  
00352A  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00352E  3  00 00 00 00  
003532  3  00 00 00 00  
00354A  3               
00354A  3               frmlst:
00354A  3  00 01 01 00          .byte 0,1,1,0
00354E  3               scdat:
00354E  3  09 00                .word 9
003550  3  FF 00 00 FF          .byte 255,0,0,255,0,0,255,0,148
003554  3  00 00 FF 00  
003558  3  94           
003559  3               numsc:
003559  3  01                   .byte 1
00355A  3               nmedat:
00355A  3  00 00 58 80          .byte 0,0,88,128,255
00355E  3  FF           
00355F  3               NUMOBJ = 1
00355F  3               objdta:
00355F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,32,0,160,32
003563  3  00 00 00 00  
003567  3  00 00 00 00  
003585  3               font:
003585  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003589  3  00 00 00 00  
00358D  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
003591  3  30 00 30 00  
003595  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
003599  3  00 00 00 00  
00359D  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
0035A1  3  6C FE 6C 00  
0035A5  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
0035A9  3  7E 1E 7E 18  
0035AD  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
0035B1  3  30 6E CE 00  
0035B5  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
0035B9  3  7E CC 7E 00  
0035BD  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0035C1  3  00 00 00 00  
0035C5  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0035C9  3  18 18 0C 00  
0035CD  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0035D1  3  30 30 60 00  
0035D5  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0035D9  3  7E 18 3C 00  
0035DD  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0035E1  3  7E 18 18 00  
0035E5  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0035E9  3  00 18 18 30  
0035ED  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0035F1  3  7E 00 00 00  
0035F5  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0035F9  3  00 38 38 00  
0035FD  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
003601  3  18 30 60 00  
003605  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
003609  3  F6 E6 7C 00  
00360D  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
003611  3  18 18 7E 00  
003615  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
003619  3  7C C0 FE 00  
00361D  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
003621  3  06 C6 7C 00  
003625  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
003629  3  D8 FE 18 00  
00362D  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
003631  3  06 C6 7C 00  
003635  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
003639  3  C6 C6 7C 00  
00363D  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
003641  3  18 30 30 00  
003645  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
003649  3  C6 C6 7C 00  
00364D  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
003651  3  7E 06 7C 00  
003655  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
003659  3  00 00 30 00  
00365D  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
003661  3  00 30 30 60  
003665  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
003669  3  30 18 0C 00  
00366D  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
003671  3  00 7E 00 00  
003675  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
003679  3  0C 18 30 00  
00367D  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
003681  3  18 00 18 00  
003685  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
003689  3  FE C0 7C 00  
00368D  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
003691  3  FE C6 C6 00  
003695  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
003699  3  C6 C6 FC 00  
00369D  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
0036A1  3  C0 C6 7C 00  
0036A5  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
0036A9  3  C6 CC F8 00  
0036AD  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
0036B1  3  C0 C0 FE 00  
0036B5  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
0036B9  3  C0 C0 C0 00  
0036BD  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
0036C1  3  DE C6 7C 00  
0036C5  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0036C9  3  C6 C6 C6 00  
0036CD  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
0036D1  3  18 18 7E 00  
0036D5  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
0036D9  3  C6 C6 7C 00  
0036DD  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
0036E1  3  D8 CC C6 00  
0036E5  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0036E9  3  C0 C0 FE 00  
0036ED  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0036F1  3  C6 C6 C6 00  
0036F5  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
0036F9  3  DE CE C6 00  
0036FD  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
003701  3  C6 C6 7C 00  
003705  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
003709  3  FC C0 C0 00  
00370D  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
003711  3  F6 DE 7C 00  
003715  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
003719  3  FC CC C6 00  
00371D  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
003721  3  06 C6 7C 00  
003725  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
003729  3  30 30 30 00  
00372D  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
003731  3  C6 C6 7C 00  
003735  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
003739  3  C6 6C 38 00  
00373D  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
003741  3  C6 FE 6C 00  
003745  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
003749  3  38 6C C6 00  
00374D  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
003751  3  30 30 30 00  
003755  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
003759  3  30 60 FE 00  
00375D  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
003761  3  18 18 1E 00  
003765  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
003769  3  30 18 0C 00  
00376D  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
003771  3  30 30 F0 00  
003775  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
003779  3  30 30 30 00  
00377D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003781  3  00 00 00 FF  
003785  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
003789  3  60 60 FE 00  
00378D  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
003791  3  7C CC 7C 00  
003795  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
003799  3  66 66 7C 00  
00379D  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
0037A1  3  60 60 3C 00  
0037A5  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
0037A9  3  CC CC 7C 00  
0037AD  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
0037B1  3  F8 C0 7C 00  
0037B5  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
0037B9  3  30 30 30 00  
0037BD  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0037C1  3  CC 7C 0C 78  
0037C5  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0037C9  3  CC CC CC 00  
0037CD  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0037D1  3  30 30 78 00  
0037D5  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
0037D9  3  0C 0C 6C 38  
0037DD  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0037E1  3  70 78 6C 00  
0037E5  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0037E9  3  30 30 1C 00  
0037ED  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0037F1  3  FC FC FC 00  
0037F5  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
0037F9  3  CC CC CC 00  
0037FD  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
003801  3  CC CC 78 00  
003805  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
003809  3  CC F8 C0 C0  
00380D  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
003811  3  CC 7C 0C 0E  
003815  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
003819  3  60 60 60 00  
00381D  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
003821  3  78 0C F8 00  
003825  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
003829  3  30 30 1C 00  
00382D  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
003831  3  CC CC 78 00  
003835  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
003839  3  78 78 30 00  
00383D  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
003841  3  FC FC 78 00  
003845  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
003849  3  30 78 CC 00  
00384D  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
003851  3  CC 7C 0C 78  
003855  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
003859  3  30 60 FC 00  
00385D  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
003861  3  18 18 1E 00  
003865  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
003869  3  18 18 18 00  
00386D  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
003871  3  30 30 F0 00  
003875  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
003879  3  00 00 00 00  
00387D  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
003881  3  E3 BB C6 7C  
003885  3               jtab:
003885  3  63                   .byte 99
003886  3  35 15 93 22  keys:   .byte 53,21,147,34,144,4,20,33,17,1,146
00388A  3  90 04 14 21  
00388E  3  11 01 92     
003891  3               
003891  2               
003891  1               	.include "lib.inc"
003891  2               ; Atari 800 hardware specific routines
003891  2               
003891  2               systeminit:
003891  2               
003891  2  78           	sei			; Disable interrupts
003892  2               
003892  2               ;disable_irq_and_dma:
003892  2  A9 00            lda #0
003894  2  8D 0E D2         sta IRQEN
003897  2  8D 0E D4         sta NMIEN
00389A  2               
00389A  2               ; Switch ROMS off
00389A  2               
00389A  2  AD 03 D3     	lda PBCTL
00389D  2  09 02        	ora #%00000010
00389F  2  8D 03 D3     	sta PBCTL
0038A2  2  AD 01 D3     	lda PORTB
0038A5  2  29 7C        	and #%01111100
0038A7  2  09 82        	ora #%10000010
0038A9  2  8D 01 D3     	sta PORTB
0038AC  2               
0038AC  2               ; Setup_nmi
0038AC  2  A9 CE            lda #<nmi_handler
0038AE  2  8D FA FF         sta NMI
0038B1  2  A9 38            lda #>nmi_handler
0038B3  2  8D FB FF         sta NMI+1
0038B6  2  A9 C0            lda #%11000000
0038B8  2  8D 0E D4         sta NMIEN
0038BB  2               
0038BB  2               ; Init video registers
0038BB  2               
0038BB  2  A9 FA        	lda #<BITMAP_DLIST
0038BD  2  8D 02 D4     	sta DLISTL
0038C0  2  A9 39        	lda #>BITMAP_DLIST
0038C2  2  8D 03 D4     	sta DLISTH
0038C5  2               
0038C5  2               ; Screenwidth 32 bytes
0038C5  2               
0038C5  2  A9 31        	lda #%00110001
0038C7  2  8D 00 D4     	sta DMACTL
0038CA  2               
0038CA  2  20 DA 20     	jsr cls
0038CD  2               
0038CD  2  60           	rts
0038CE  2               
0038CE  2               nmi_handler:
0038CE  2  2C 0F D4         bit NMIST
0038D1  2  30 2F            bmi dli_handler
0038D3  2  10 0D            bpl nmi_not_dli
0038D5  2               nmi_not_vbi:
0038D5  2  A9 20            lda #%00100000
0038D7  2  2C 0F D4         bit NMIST
0038DA  2  D0 04            bne nmi_not_reset
0038DC  2  8D 0F D4         sta NMIRES
0038DF  2  40               rti
0038E0  2               nmi_not_reset:
0038E0  2  68               pla
0038E1  2  40               rti
0038E2  2               nmi_not_dli:
0038E2  2  48               pha
0038E3  2  50 F0            bvc nmi_not_vbi
0038E5  2  8A               txa
0038E6  2  48               pha
0038E7  2  98               tya
0038E8  2  48               pha
0038E9  2               
0038E9  2  A9 FF            lda #$FF
0038EB  2  8D 1A D0         sta COLBK
0038EE  2  8D 0A D4         sta WSYNC
0038F1  2  8D 0A D4         sta WSYNC
0038F4  2  A9 00            lda #0
0038F6  2  8D 1A D0         sta COLBK
0038F9  2               
0038F9  2  8D 0F D4         sta NMIRES
0038FC  2  68               pla
0038FD  2  A8           	tay
0038FE  2  68           	pla
0038FF  2  AA           	tax
003900  2  68           	pla
003901  2  40           	rti
003902  2               
003902  2               dli_handler:
003902  2  40           	rti
003903  2               
003903  2               PORTB		= $D301
003903  2               PBCTL		= $D303
003903  2               DMACTL		= $D400
003903  2               DLISTL		= $D402
003903  2               DLISTH		= $D403
003903  2               GFX_MEM		= $E000
003903  2               
003903  2               NMIEN       = $D40E
003903  2               NMIST       = $D40F
003903  2               NMIRES      = $D40F
003903  2               NMI         = $FFFA
003903  2               RESET       = $FFFC
003903  2               IRQ         = $FFFE
003903  2               RANDOM      = $D20A
003903  2               IRQEN       = $D20E
003903  2               IRQST       = $D20E
003903  2               
003903  2               COLPF0      = $D016
003903  2               COLPF1      = $D017
003903  2               COLPF2      = $D018
003903  2               COLPF3      = $D019
003903  2               COLBK       = $D01A
003903  2               
003903  2               VCOUNT      = $D40B
003903  2               WSYNC       = $D40A
003903  2               
003903  2               LMS		= 64
003903  2               HS		= 16
003903  2               VS		= 32
003903  2               MODE2		= 2
003903  2               MODE3		= 3
003903  2               MODE4		= 4
003903  2               MODE5		= 5
003903  2               MODEB		= $0B
003903  2               MODED		= $0D
003903  2               MODEE		= $0E
003903  2               MODEF		= $0F
003903  2               
003903  2               BLANK1		= $00
003903  2               BLANK2		= $10
003903  2               BLANK3		= $20
003903  2               BLANK4		= $30
003903  2               BLANK5		= $40
003903  2               BLANK6		= $50
003903  2               BLANK7		= $60
003903  2               BLANK8		= $70
003903  2               
003903  2               DLISTENDJUMP	= $41
003903  2               
003903  2               
003903  2  xx xx xx xx  .align $100
003907  2  xx xx xx xx  
00390B  2  xx xx xx xx  
0039FA  2               
0039FA  2               BITMAP_DLIST:
0039FA  2  70           	.byte BLANK8
0039FB  2  70           	.byte BLANK8
0039FC  2  70           	.byte BLANK8
0039FD  2               
0039FD  2  4F           	.byte LMS+MODEF
0039FE  2  00 E4        	.word ScreenAddr
003A00  2  0F 0F 0F 0F  	.res 95,MODEF
003A04  2  0F 0F 0F 0F  
003A08  2  0F 0F 0F 0F  
003A5F  2               
003A5F  2  4F            	.byte LMS+MODEF
003A60  2  00 F0        	.word ScreenAddr+96*32
003A62  2  0F 0F 0F 0F  	.res 95,MODEF
003A66  2  0F 0F 0F 0F  
003A6A  2  0F 0F 0F 0F  
003AC1  2               
003AC1  2  41           	.byte DLISTENDJUMP
003AC2  2  FA 39        	.word BITMAP_DLIST
003AC4  2               
003AC4  1               	.include "z80.asm"
003AC4  2               ;------------------------------------------------------
003AC4  2               ; z80.asm
003AC4  2               ; spectrum stuff
003AC4  2               ; adresses
003AC4  2               
003AC4  2               
003AC4  2               ; Contains seperatly 1 bit set
003AC4  2               
003AC4  2               _bitmem0	= $f8
003AC4  2               _bitmem1	= $f9
003AC4  2               _bitmem2	= $fa
003AC4  2               _bitmem3	= $fb
003AC4  2               _bitmem4	= $fc
003AC4  2               _bitmem5	= $fd
003AC4  2               _bitmem6	= $fe
003AC4  2               _bitmem7	= $ff
003AC4  2               
003AC4  2               ; constants
003AC4  2               _bitvalue0	= $01
003AC4  2               _bitvalue1	= $02
003AC4  2               _bitvalue2	= $04
003AC4  2               _bitvalue3	= $08
003AC4  2               _bitvalue4	= $10
003AC4  2               _bitvalue5	= $20
003AC4  2               _bitvalue6	= $40
003AC4  2               _bitvalue7	= $80
003AC4  2               
003AC4  2               _notbitvalue0	= $fe
003AC4  2               _notbitvalue1	= $fd
003AC4  2               _notbitvalue2	= $fb
003AC4  2               _notbitvalue3	= $f7
003AC4  2               _notbitvalue4	= $ef
003AC4  2               _notbitvalue5	= $df
003AC4  2               _notbitvalue6	= $bf
003AC4  2               _notbitvalue7	= $7f
003AC4  2               
003AC4  2               
003AC4  2               exx:
003AC4  2  A5 62        		lda z80_c
003AC6  2  A4 6E        		ldy z80_cp
003AC8  2  84 62        		sty z80_c
003ACA  2  85 6E        		sta z80_cp
003ACC  2  A5 63        		lda z80_b
003ACE  2  A4 6F        		ldy z80_bp
003AD0  2  84 63        		sty z80_b
003AD2  2  85 6F        		sta z80_bp
003AD4  2  A5 64        		lda z80_e
003AD6  2  A4 70        		ldy z80_ep
003AD8  2  84 64        		sty z80_e
003ADA  2  85 70        		sta z80_ep
003ADC  2  A5 65        		lda z80_d
003ADE  2  A4 71        		ldy z80_dp
003AE0  2  84 65        		sty z80_d
003AE2  2  85 71        		sta z80_dp
003AE4  2  A5 rr        		lda scraddr
003AE6  2  A4 72        		ldy z80_lp
003AE8  2  84 rr        		sty scraddr
003AEA  2  85 72        		sta z80_lp
003AEC  2  A5 rr        		lda scraddr+1
003AEE  2  A4 73        		ldy z80_hp
003AF0  2  84 rr        		sty scraddr+1
003AF2  2  85 73        		sta z80_hp
003AF4  2  60           		rts
003AF5  2               
003AF5  2               
003AF5  1               eind_asm:
003AF5  1               eop:					; End Of Program
003AF5  1               
003AF5  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(32000-eind_asm + start_asm))
003AF5  1               
