ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2000
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 1 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               .if rflag
000057r 2               sprshft:     .res 1
000057r 2               .endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               .org asm_code-6
001FFA  1  FF FF        	.word $ffff
001FFC  1  00 20        	.word start_asm
001FFE  1  2F 98        	.word eind_asm
002000  1               
002000  1               start_asm:
002000  1               	.include "game.inc"
002000  2               .include "dkjr.inc"
002000  3               ;--------------------------------------------------------------
002000  3               ; Arcade Game Designer.
002000  3               ; (C) 2008 Jonathan Cauldwell.
002000  3               ; ZX Spectrum Next Engine v0.7.
002000  3               ; Acorn Atom port by K.v.Oss 2018
002000  3               ;--------------------------------------------------------------
002000  3               
002000  3               ; Conditional compilation flags
002000  3               ; Code is installed if flag is set
002000  3               ; Flags are set in commandline assembly or by the compiler
002000  3               
002000  3               ; Flags set by AGD compiler
002000  3               ;	mflag  			; MENU + INV
002000  3               ;	pflag 			; particle engine
002000  3               ;	sflag 			; scrollytext
002000  3               ;	dflag 			; digging mode
002000  3               ;	cflag			; collectable blocks
002000  3               ;	oflag			; objects
002000  3               ;	lflag			; ladders
002000  3               ;
002000  3               ; Flags set manually
002000  3               ;	aflag			; adventure mode
002000  3               ;	bflag			; big sprites (16x24)
002000  3               ;	iflag			; invert mode
002000  3               
002000  3               .if mflag
002000  3               	.out "- MEN/INV enabled"
002000  3               .endif
002000  3               .if pflag
002000  3               	.out "- Particles enabled"
002000  3               .endif
002000  3               .if sflag
002000  3               	.out "- Scrolling enabled"
002000  3               .endif
002000  3               .if dflag
002000  3               	.out "- Digging enabled"
002000  3               .endif
002000  3               .if cflag
002000  3               	.out "- Collectable blocks enabled"
002000  3               .endif
002000  3               .if oflag
002000  3               	.out "- Objects enabled"
002000  3               .endif
002000  3               .if lflag
002000  3               	.out "- Ladders enabled"
002000  3               .endif
002000  3               .if aflag
002000  3               	.out "- Adventure mode enabled"
002000  3               .endif
002000  3               .if bflag
002000  3               	.out "- Big Sprites (16x24) enabled"
002000  3               .endif
002000  3               .if iflag
002000  3               	.out "- Invert mode enabled"
002000  3               .endif
002000  3               .if rflag
002000  3               	.out "- RAM saving mode enabled"
002000  3               .endif
002000  3               
002000  3               ; Global definitions ------------------------------------------------------------
002000  3               
002000  3               	FONT = font		; Font address
002000  3               
002000  3               	green	= $00		; Colour definition filters
002000  3               	yellow	= $55
002000  3               	blue	= $aa
002000  3               	red	= $ff
002000  3               
002000  3               ; Block characteristics.
002000  3               
002000  3               	PLATFM	= 1		; platform.
002000  3               	WALL	= PLATFM + 1	; solid wall.
002000  3               	LADDER	= WALL + 1	; ladder.
002000  3               	FODDER	= LADDER + 1	; fodder block.
002000  3               	DEADLY	= FODDER + 1	; deadly block.
002000  3               	CUSTOM	= DEADLY + 1	; custom block.
002000  3               	WATER	= CUSTOM + 1	; water block.
002000  3                       COLECT	= WATER + 1	; collectable block.
002000  3                       NUMTYP	= COLECT + 1	; number of types.
002000  3               
002000  3               ; Sprites.
002000  3               
002000  3               .if bflag
002000  3               	SPR_HGT	= 24		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 8		; number of sprites.
002000  3               .else				; 16x16 sprites
002000  3               	SPR_HGT = 16		; Sprite height
002000  3               	SPR_WID = 16		; Sprite width
002000  3               	NUMSPR	= 12		; number of sprites.
002000  3               .endif
002000  3               
002000  3               	TABSIZ = 17		; size of each entry.
002000  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002000  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002000  3               	var_X  = 8		; new x coordinate of sprite.
002000  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002000  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002000  3               
002000  3               ; Particle engine.
002000  3               
002000  3               	NUMSHR = 55		; pieces of shrapnel.
002000  3               	SHRSIZ = 6		; bytes per particle.
002000  3               
002000  3               ; System constants
002000  3               
002000  3               	ScrSelAddr  = $b000	; Screen selection address
002000  3               	KeyRowAddr  = $b000	; PIA key matrix row
002000  3               	KeyColAddr  = $b001	; PIA key matrix column
002000  3               	SpeakerBit  = $b002	; Speaker bit
002000  3               	CmdReg      = $b400	; Command register AtoMMC
002000  3               	DatReg      = $b401	; Data register AtoMMC
002000  3               	Timer2_Low  = $b808	; Timer 2 low byte
002000  3               	Timer2_High = $b809	; Timer 2 high byte
002000  3               	ScreenAddr  = $e400	; Startaddress video RAM
002000  3               
002000  3               	MAP 	    = $dd00		; properties map buffer (3x256 bytes)
002000  3               	SCADTB_lb   = MAP+3*256		; screen address table lo-byte (256 bytes)
002000  3               	SCADTB_hb   = SCADTB_lb+256	; screen address table hi-byte (256 bytes)
002000  3               	SHRAPN      = SCADTB_hb+256	; shrapnel table (55x6 bytes)
002000  3               
002000  3               ; System calls
002000  3               
002000  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
002000  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
002000  3               	OSRDCH   = $fe94	; get key subroutine
002000  3                       READKEY  = $fe71	; scan key matrix subroutine
002000  3               	OSWRCH	 = $fff4	; write character
002000  3               
002000  3               
002000  3               .if iflag
002000  3               	TxtInvert   = $ff	; Invert byte for character printing
002000  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002000  3               .else
002000  3               	TxtInvert   = $00	; Invert byte for character printing
002000  3               	ScrFillByte = $00	; Screen fill byte for CLS
002000  3               .endif
002000  3               
002000  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002000  3               
002000  3               ;===============================================================
002000  3               ; Game starts here
002000  3               ;===============================================================
002000  3               
002000  3               ;.segment "CODE"
002000  3               
002000  3  20 66 96     	jsr init
002003  3               
002003  3               ; Clear variables
002003  3               
002003  3  A9 00        	lda #0
002005  3  A2 00        	ldx #0
002007  3               clrloop:
002007  3  95 00        	sta 0,x
002009  3  E8           	inx
00200A  3  D0 FB        	bne clrloop
00200C  3               
00200C  3               gameloop:
00200C  3  20 F0 20     	jsr game	 	; start the game.
00200F  3  4C 0C 20     	jmp gameloop		; Start again
002012  3               
002012  3               ; Definition of variables
002012  3               ; Make sure pointers are arranged in the same order as the data itself.
002012  3               
002012  3  95 52        msgptr:		.word msgdat	; messages
002014  3  F9 53        blkptr:		.word chgfx	; block graphics.
002016  3  51 57        proptr:		.word bprop	; address of char properties.
002018  3  BC 57        sptptr:		.word sprgfx	; sprite graphics
00201A  3  3C 83        frmptr:		.word frmlst	; sprite frames.
00201C  3  9A 83        scrptr:		.word scdat	; address of screens.
00201E  3  97 91        nmeptr:		.word nmedat	; enemy start positions.
002020  3  F9 92        objptr:		.word objdta	; object graphics
002022  3               
002022  3               ;TxtFilter:	.byte $ff
002022  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
002026  3               
002026  3               ; Don't change the order of these four.
002026  3               ; Menu routine relies on winlft following wintop.
002026  3               
002026  3  01           wintop:		.byte WINDOWTOP	; top of window.
002027  3  01           winlft:		.byte WINDOWLFT	; left edge.
002028  3  16           winhgt:		.byte WINDOWHGT	; window height.
002029  3  1E           winwid:		.byte WINDOWWID	; window width.
00202A  3  02           numob:		.byte NUMOBJ	; number of objects in game.
00202B  3               
00202B  3               ; Variables start here.
00202B  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00202B  3               
00202B  3  08           wntopx:		.byte (8 * WINDOWTOP)
00202C  3  08           wnlftx:		.byte (8 * WINDOWLFT)
00202D  3  A8           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00202E  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00202F  3               
00202F  3               ; Assorted game routines which can go in contended memory.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for inventory called by the INV command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with objects seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected objectnr of INV menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               .if mflag
00202F  3               minve:
00202F  3               	lda #<(invdis)		; routine address.
00202F  3               	sta mod0+1		; set up menu routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(invdis)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               	lda #<(fopt)		; find option from available objects.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fopt)
00202F  3               	sta mod1+1+1
00202F  3               	jmp dbox		; do menu routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Entry for menu called by the MENU command
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  X   = message nr with menu items seperated with ,
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected line nr of MENU menu
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               mmenu:
00202F  3               	lda #<(always)		; routine address.
00202F  3               	sta mod0+1		; set up routine.
00202F  3               	sta mod2+1		; set up count routine.
00202F  3               	lda #>(always)
00202F  3               	sta mod0+2
00202F  3               	sta mod2+2
00202F  3               
00202F  3               	lda #<(fstd)		; standard option selection.
00202F  3               	sta mod1+1		; set up routine.
00202F  3               	lda #>(fstd)
00202F  3               	sta mod1+2
00202F  3               
00202F  3               ; Drop through into box routine.
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; Work out size of box for message or menu.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               dbox:
00202F  3               	lda #<(msgdat)		; pointer to messages.
00202F  3               	sta z80_l
00202F  3               	lda #>(msgdat)
00202F  3               	sta z80_h
00202F  3               
00202F  3               	jsr getwrd		; get message number.
00202F  3               
00202F  3               	lda z80_h		; store pointer to message.
00202F  3               	sta TmpAddr
00202F  3               	lda z80_l
00202F  3               	sta TmpAddr+1
00202F  3               
00202F  3               	lda #1			; height.
00202F  3               	sta z80_d
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               	sta z80_e		; maximum width.
00202F  3               dbox5:
00202F  3               	lda #0			; this line"s width.
00202F  3               	sta z80_b
00202F  3               mod2:
00202F  3               	jsr always		; item in player"s possession?
00202F  3               	cmp #255
00202F  3               	bne dbox6		; not in inventory, skip this line.
00202F  3               	inc z80_d		; add to tally.
00202F  3               dbox6:
00202F  3               	ldy #0			; get character.
00202F  3               	lda (z80_hl),y
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a		; reached end of line?
00202F  3               	cmp #','
00202F  3               	beq dbox3		; yes.
00202F  3               	cmp #13
00202F  3               	beq dbox3		; yes.
00202F  3               	inc z80_b		; add to this line"s width.
00202F  3               	lda z80_a
00202F  3               	bmi dbox4		; end of message? yes, end count.
00202F  3               	jmp dbox6		; repeat until we find the end.
00202F  3               dbox3:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox5		; no, carry on looking.
00202F  3               	lda z80_b		; make this the widest so far.
00202F  3               	sta z80_e
00202F  3               	jmp dbox5		; keep looking.
00202F  3               dbox4:
00202F  3               	lda z80_e		; maximum line width.
00202F  3               	cmp z80_b		; have we exceeded longest so far?
00202F  3               	bpl dbox8		; no, carry on looking.
00202F  3               	lda z80_b		; final line is the longest so far.
00202F  3               	sta z80_e
00202F  3               dbox8:
00202F  3               	dec z80_d		; decrement items found.
00202F  3               	bne :+			; total was zero.
00202F  3               	lda #255
00202F  3               	sta varopt
00202F  3               	jmp dbox15
00202F  3               :
00202F  3               	lda z80_e		; longest line.
00202F  3               	bne :+			; was it zero?
00202F  3               	jmp dbox15		; total was zero.
00202F  3               :
00202F  3               	sta bwid		; set up size.
00202F  3               	lda z80_d
00202F  3               	sta blen
00202F  3               
00202F  3               ;--------------------------------------------------------------
00202F  3               ; That's set up our box size.
00202F  3               ;--------------------------------------------------------------
00202F  3               
00202F  3               	lda winhgt		; window height in characters.
00202F  3               	sec
00202F  3               	sbc z80_d		; subtract height of box.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc wintop		; add top edge of window.
00202F  3               	sta btop		; set up box top.
00202F  3               
00202F  3               	lda winwid		; window width in characters.
00202F  3               	sec
00202F  3               	sbc z80_e		; subtract box width.
00202F  3               	lsr a			; divide by 2.
00202F  3               	clc
00202F  3               	adc winlft		; add left edge of window.
00202F  3               	sta blft		; box left.
00202F  3               
00202F  3               	lda #<(FONT-256)		; font.
00202F  3               	sta grbase		; set up for text display.
00202F  3               	lda #>(FONT-256)
00202F  3               	sta grbase+1
00202F  3               
00202F  3               	lda TmpAddr+1		; restore message pointer.
00202F  3               	sta z80_l
00202F  3               	lda TmpAddr
00202F  3               	sta z80_h
00202F  3               
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set display coordinate.
00202F  3               	lda #0			; start at object zero.
00202F  3               	sta combyt		; store number of object in combyt.
00202F  3               dbox2:
00202F  3               	lda combyt		; get object number.
00202F  3               	sta z80_a
00202F  3               mod0:
00202F  3               	jsr always		; check inventory for display.
00202F  3               	cmp #255
00202F  3               	beq :+
00202F  3               	jmp dbox13		; not in inventory, skip this line.
00202F  3               :
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set left display position.
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_b		; store width.
00202F  3               dbox0:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	cmp #','		; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               	cmp #13			; end of line?
00202F  3               	beq dbox1		; yes, next one.
00202F  3               
00202F  3               	cmp #141			; end of line?
00202F  3               	bne :+
00202F  3               	dec bwid
00202F  3               	jmp dbox7		; yes, next one.
00202F  3               :
00202F  3               	dec z80_b		; one less to display.
00202F  3               	and #127		; remove terminator.
00202F  3               
00202F  3               	jsr pchr		; display on screen.
00202F  3               
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	sta z80_a
00202F  3               	inc z80_l		; next character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	lda z80_a
00202F  3               	cmp #128		; end of message?
00202F  3               	bmi :+
00202F  3               	jmp dbox7		; yes, job done.
00202F  3               :
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	beq :+			; are any left?
00202F  3               	jmp dbox0		; yes, continue.
00202F  3               :
00202F  3               ;---------------------------------------------------
00202F  3               ; Reached limit of characters per line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dbox9:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #13			; another line?
00202F  3               	beq dbox10		; yes, do next line.
00202F  3               	cmp #128		; end of message?
00202F  3               	bcs :+
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox9
00202F  3               
00202F  3               ;---------------------------------------------------
00202F  3               ; Fill box to end of line.
00202F  3               ;---------------------------------------------------
00202F  3               
00202F  3               dboxf:
00202F  3               	lda #32			; space character.
00202F  3               	jsr pchr		; display character.
00202F  3               	dec z80_b
00202F  3               	beq :+
00202F  3               	jmp dboxf		; repeat for remaining chars on line.
00202F  3               :
00202F  3               	rts
00202F  3               dbox1:
00202F  3               	inc z80_l		; skip character.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	jsr dboxf		; fill box out to right side.
00202F  3               dbox10:
00202F  3               	inc dispy		; y coordinate down a line next position.
00202F  3               	jmp dbox2		; next line.
00202F  3               dbox7:
00202F  3               	lda z80_b		; chars remaining.
00202F  3               	bne :+			; are any left?
00202F  3               	jmp dbox11		; no, nothing to draw.
00202F  3               :
00202F  3               	jsr dboxf		; fill message to line.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Drawn the box menu, now select option.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox11:
00202F  3               	lda btop		; box top.
00202F  3               	sta dispy		; set bar position.
00202F  3               dbox14:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	bne dbox14		; yes, debounce it.
00202F  3               	jsr dbar		; draw bar.
00202F  3               dbox12:
00202F  3               	jsr joykey		; get controls.
00202F  3               	cmp #$7f		; anything pressed?
00202F  3               	beq dbox12		; no, nothing.
00202F  3               	and #16			; fire button pressed?
00202F  3               	bne :+
00202F  3               mod1:
00202F  3               	jmp fstd		; yes, job done.
00202F  3               :
00202F  3               	jsr dbar		; delete bar.
00202F  3               
00202F  3               	lda joyval		; joystick reading.
00202F  3               	and #8			; going up?
00202F  3               	beq dboxu		; yes, go up.
00202F  3               
00202F  3               	ldx dispy		; vertical position of bar.
00202F  3               	inx			; look down.
00202F  3               	txa
00202F  3               	sec
00202F  3               	sbc btop		; find distance from top.
00202F  3               	cmp blen		; top of box.
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	inc dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               dboxu:
00202F  3               	lda dispy		; vertical position of bar.
00202F  3               	cmp btop		; are we at the top?
00202F  3               	bne :+
00202F  3               	jmp dbox14		; yes, go no further.
00202F  3               :
00202F  3               	dec dispy		; move bar.
00202F  3               	jmp dbox14		; continue.
00202F  3               fstd:
00202F  3               	lda dispy		; bar position.
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta varopt		; store the option.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Option not available.  Skip this line.
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbox13:
00202F  3               	ldy #0
00202F  3               	lda (z80_hl),y		; get character.
00202F  3               	inc z80_l		; next one.
00202F  3               	bne :+
00202F  3               	inc z80_h
00202F  3               :
00202F  3               	cmp #','		; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               	cmp #13			; another line?
00202F  3               	bne :+
00202F  3               	jmp dbox2		; yes, do next line.
00202F  3               :
00202F  3               
00202F  3               	bpl :+			; end of message?
00202F  3               	jmp dbox11		; yes, finish message.
00202F  3               :
00202F  3               	jmp dbox13
00202F  3               dbox15:
00202F  3               	lda TmpAddr		; pop message pointer from the stack.
00202F  3               	sta z80_h
00202F  3               	lda TmpAddr+1
00202F  3               	sta z80_l
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Invert bar
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               dbar:
00202F  3               	lda blft		; box left.
00202F  3               	sta dispx		; set display coordinate.
00202F  3               	jsr gprad		; get printing address.
00202F  3               
00202F  3               	lda bwid		; box width.
00202F  3               	sta z80_c		; loop counter in c.
00202F  3               	lda z80_h
00202F  3               	sta z80_d		; store screen address high byte.
00202F  3               dbar1:
00202F  3               	ldx #7			; pixel height in b.
00202F  3               dbar0:
00202F  3               	ldy scrtab,x
00202F  3               	lda (scraddr),y		; get screen byte.
00202F  3               	eor #255		; reverse all bits.
00202F  3               	sta (scraddr),y		; write back to screen.
00202F  3               	dex			; next line down.
00202F  3               	bpl dbar0		; draw rest of character.
00202F  3               
00202F  3               	inc scraddr		; one char right.
00202F  3               	dec z80_c		; decrement character counter.
00202F  3               	bne dbar1		; repeat for whole line.
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Point to object
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  combyt
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  A = object number, A=255 if already in possession
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               invdis:
00202F  3               	lda z80_l		; store message text pointer.
00202F  3               	pha
00202F  3               	lda z80_h
00202F  3               	pha
00202F  3               	lda combyt		; object number.
00202F  3               	inc combyt		; ready for next one.
00202F  3               	jsr gotob		; check if we have object.
00202F  3               	tay
00202F  3               	pla
00202F  3               	sta z80_h
00202F  3               	pla
00202F  3               	sta z80_l
00202F  3               	tya
00202F  3               	rts
00202F  3               
00202F  3               ;------------------------------------------------------
00202F  3               ; Find option selected.
00202F  3               ;
00202F  3               ; Input:
00202F  3               ;  -
00202F  3               ;
00202F  3               ; Output:
00202F  3               ;  OPT = selected object
00202F  3               ;------------------------------------------------------
00202F  3               
00202F  3               fopt:
00202F  3               	lda dispy
00202F  3               	sec
00202F  3               	sbc btop		; find selected option.
00202F  3               	sta tmp+2		; option selected in b register.
00202F  3               	inc tmp+2
00202F  3               
00202F  3               	lda #0			; set to first item.
00202F  3               	sta combyt		; object number.
00202F  3               fopt0:
00202F  3               	jsr fobj		; find next object in inventory.
00202F  3               	dec tmp+2
00202F  3               	bne fopt0		; repeat for relevant steps down the list.
00202F  3               
00202F  3               	lda combyt		; get option.
00202F  3               	sta varopt		; store the option.
00202F  3               	dec varopt		; one less, due to where we increment combyt.
00202F  3               	jmp redraw		; redraw the screen.
00202F  3               fobj:
00202F  3               	ldy combyt		; object number.
00202F  3               	inc combyt		; ready for next item.
00202F  3               	tya
00202F  3               	jsr gotob		; do we have this item?
00202F  3               	cmp #255
00202F  3               	bne :+
00202F  3               	rts
00202F  3               :
00202F  3               	jmp fobj		; yes, it's on the list.
00202F  3               
00202F  3               ;bwid:	.byte 0              ; box/menu width.
00202F  3               ;blen:	.byte 0              ; box/menu height.
00202F  3               ;btop:	.byte 0              ; box coordinates.
00202F  3               ;blft:	.byte 0
00202F  3               .endif
00202F  3               
00202F  3               ;----------------------------------------------------
00202F  3               ; Delay routine 1/50 sec
00202F  3               ;
00202F  3               ; Wait 1/60 sec = 16666 usec
00202F  3               ; Wait 208 x 16 =  3328 usec
00202F  3               ;                 19994 usec
00202F  3               ; rts           =     6 usec
00202F  3               ; Total         = 20000 usec
00202F  3               ;----------------------------------------------------
00202F  3               
00202F  3               delay:
00202F  3  60             rts
002030  3  85 rr        	sta xtmp
002032  3               del_loop:
002032  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
002035  3               
002035  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
002037  3               delay1:
002037  3  61 80        	adc ($80,x)		;	 6 usec
002039  3  61 80        	adc ($80,x)		;	 6 usec
00203B  3  88           	dey			;	 2 usec
00203C  3  D0 F9        	bne delay1		;	 2 usec
00203E  3  EA           	nop			; 2 usec
00203F  3  EA           	nop			; 2 usec
002040  3               				; tot: 20000 usec
002040  3  C6 rr        	dec xtmp
002042  3  D0 EE        	bne del_loop
002044  3  60           	rts
002045  3               
002045  3               ;----------------------------------------------------
002045  3               ; Clear sprite table.
002045  3               ;
002045  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002045  3               ;----------------------------------------------------
002045  3               
002045  3               xspr:
002045  3  A9 FF        	lda #255		; clear byte.
002047  3  A2 00        	ldx #0			; length of table.
002049  3               xspr0:
002049  3  9D 07 33     	sta sprtab,x		; sprite table.
00204C  3  E8           	inx			; move to next byte.
00204D  3  E0 CC        	cpx #SPRBUF
00204F  3  D0 F8        	bne xspr0		; repeat for rest of table.
002051  3  60           	rts
002052  3               
002052  3               ;-------------------------------------------------------------
002052  3               ; Initialise all objects.
002052  3               ;
002052  3               ; Reset current room,y,x to start room,y,x for all objects
002052  3               ;-------------------------------------------------------------
002052  3               
002052  3               .if oflag
002052  3               iniob:
002052  3               	lda #<objdta 		; objects table.
002052  3               	sta z80_x
002052  3               	lda #>objdta
002052  3               	sta z80_i
002052  3               
002052  3               	ldx numob 		; number of objects in the game.
002052  3               iniob0:
002052  3               	ldy #35
002052  3               	lda (z80_ix),y 		; start screen.
002052  3               	ldy #32
002052  3               	sta (z80_ix),y 		; set start screen.
002052  3               
002052  3               	ldy #36
002052  3               	lda (z80_ix),y 		; find start y.
002052  3               	ldy #33
002052  3               	sta (z80_ix),y 		; set start y.
002052  3               
002052  3               	ldy #37
002052  3               	lda (z80_ix),y 		; get initial x.
002052  3               	ldy #34
002052  3               	sta (z80_ix),y 		; set x coord.
002052  3               
002052  3               	clc 			; point to next object.
002052  3               	lda z80_x
002052  3               	adc #38			; distance between objects.
002052  3               	sta z80_x
002052  3               	bcc :+
002052  3               	inc z80_i
002052  3               :
002052  3               	dex 			; repeat.
002052  3               	bne iniob0
002052  3               
002052  3               	rts
002052  3               .endif
002052  3               
002052  3               ;-------------------------------------------------------------
002052  3               ; Screen synchronisation.
002052  3               ;
002052  3               ;  - read joystick/keyboard
002052  3               ;  - handle sound
002052  3               ;  - sync framerate with clock
002052  3               ;  - handle shrapnel every even frame
002052  3               ;-------------------------------------------------------------
002052  3               
002052  3               vsync:
002052  3  48           	pha
002053  3  98           	tya
002054  3  48           	pha
002055  3  8A           	txa
002056  3  48           	pha
002057  3  20 E6 29     	jsr joykey		; read joystick/keyboard.
00205A  3  4C 8F 20       jmp sndskip
00205D  3               
00205D  3               vsync1:
00205D  3  AD 09 B8     	lda Timer2_High		; sync framerate with clock
002060  3  C9 FF        	cmp #$ff
002062  3  D0 F9        	bne vsync1
002064  3  A9 C3        	lda #>50000
002066  3  8D 09 B8     	sta Timer2_High
002069  3  A9 50        	lda #<50000
00206B  3  8D 08 B8     	sta Timer2_Low
00206E  3               
00206E  3  A5 rr        	lda clock
002070  3  29 01        	and #1
002072  3  D0 03        	bne:+
002074  3  20 EF 20     	jsr proshr		; handle shrapnel every even frame
002077  3               :
002077  3  AD 95 20     	lda sndtyp
00207A  3  F0 13        	beq sndskip
00207C  3               sndloop:
00207C  3  AD 02 B0     	lda SpeakerBit		; handle sound
00207F  3  AC 95 20     	ldy sndtyp
002082  3               sndwait:
002082  3  88           	dey
002083  3  D0 FD        	bne sndwait
002085  3  49 04        	eor #4
002087  3  8D 02 B0     	sta SpeakerBit
00208A  3  CE 95 20     	dec sndtyp
00208D  3  D0 ED        	bne sndloop
00208F  3               sndskip:
00208F  3  68           	pla
002090  3  AA           	tax
002091  3  68           	pla
002092  3  A8           	tay
002093  3  68           	pla
002094  3  60           	rts
002095  3               
002095  3  00           sndtyp:	.byte 0
002096  3               
002096  3               ;-----------------------------------------------
002096  3               ; Redraw the screen.
002096  3               ;
002096  3               ; Remove old copy of all sprites for redraw.
002096  3               ;-----------------------------------------------
002096  3               
002096  3               redraw:
002096  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
002098  3  48           	pha
002099  3  A5 68        	lda z80_x
00209B  3  48           	pha
00209C  3               
00209C  3  20 09 26     	jsr droom		; show screen layout.
00209F  3               .if oflag
00209F  3               	jsr shwob		; draw objects.
00209F  3               .endif
00209F  3               numsp0:
00209F  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0020A1  3  85 rr        	sta tmp
0020A3  3               
0020A3  3  A9 07        	lda #<sprtab		; sprite table.
0020A5  3  85 68        	sta z80_x
0020A7  3  A9 33        	lda #>sprtab
0020A9  3  85 69        	sta z80_i
0020AB  3               redrw0:
0020AB  3  A0 00        	ldy #0
0020AD  3  B1 68        	lda (z80_ix),y		; old sprite type.
0020AF  3  C9 FF        	cmp #255		; is it enabled?
0020B1  3  F0 0B        	beq redrw1 		; no, find next one.
0020B3  3               
0020B3  3  A0 03        	ldy #3
0020B5  3  B1 68        	lda (z80_ix),y 		; sprite y.
0020B7  3  C9 B1        	cmp #177		; beyond maximum?
0020B9  3  B0 03        	bcs redrw1		; yes, nothing to draw.
0020BB  3               
0020BB  3  20 D0 2D     	jsr sspria		; show single sprite.
0020BE  3               redrw1:
0020BE  3  18           	clc			; next sprite.
0020BF  3  A5 68        	lda z80_x
0020C1  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
0020C3  3  85 68        	sta z80_x
0020C5  3  90 02        	bcc :+
0020C7  3  E6 69        	inc z80_i
0020C9  3               :
0020C9  3  C6 rr        	dec tmp			; repeat for remaining sprites.
0020CB  3  D0 DE        	bne redrw0
0020CD  3               rpblc1:
0020CD  3               ;	jsr dshrp		; redraw shrapnel.
0020CD  3               
0020CD  3               .if aflag
0020CD  3               	jsr rbloc		; draw blocks for this screen
0020CD  3               .endif
0020CD  3  68           	pla			; retrieve sprite pointer.
0020CE  3  85 68        	sta z80_x
0020D0  3  68           	pla
0020D1  3  85 69        	sta z80_i
0020D3  3               
0020D3  3  60           	rts
0020D4  3               
0020D4  3               ;----------------------------------------------------------------------
0020D4  3               ; Clear screen routine.
0020D4  3               ;
0020D4  3               ; Fill screenmem $e400-$fbff with ScrFillByte
0020D4  3               ;----------------------------------------------------------------------
0020D4  3               
0020D4  3               cls:
0020D4  3  A9 E4        	lda #>ScreenAddr		; screen address.
0020D6  3  8D DF 20     	sta clsloop+2
0020D9  3  A9 00        	lda #ScrFillByte
0020DB  3               .if iflag
0020DB  3               	eor #$ff
0020DB  3               .endif
0020DB  3  A0 00        	ldy #0
0020DD  3               clsloop:
0020DD  3  99 00 E4     	sta ScreenAddr,y
0020E0  3  C8           	iny
0020E1  3  D0 FA        	bne clsloop
0020E3  3  EE DF 20     	inc clsloop+2
0020E6  3  AE DF 20     	ldx clsloop+2
0020E9  3  E0 FC        	cpx #>(ScreenAddr+$1800)
0020EB  3  D0 F0        	bne clsloop
0020ED  3  60           	rts
0020EE  3               
0020EE  3               ;----------------------------------------------------------------------
0020EE  3               ; Atomic palette is static
0020EE  3               ;----------------------------------------------------------------------
0020EE  3               
0020EE  3               setpal:
0020EE  3  60           	rts
0020EF  3               
0020EF  3               ;----------------------------------------------------------------------
0020EF  3               ; FODDER check
0020EF  3               ;----------------------------------------------------------------------
0020EF  3               
0020EF  3               .if pflag .or dflag
0020EF  3               fdchk:
0020EF  3               	cmp #FODDER 		; is it fodder?
0020EF  3               	beq :+
0020EF  3               	rts 			; no.
0020EF  3               :
0020EF  3               	lda #0			; wipe fodder in MAP
0020EF  3               	ldy #0
0020EF  3               	sta (bufaddr),y 	; rewrite block type.
0020EF  3               
0020EF  3               	lda dispx		; x=x/8
0020EF  3               	pha
0020EF  3               	lsr a
0020EF  3               	lsr a
0020EF  3               	lsr a
0020EF  3               	sta dispx
0020EF  3               
0020EF  3               	lda dispy		; y=y/8
0020EF  3               	pha
0020EF  3               	lsr a
0020EF  3               	lsr a
0020EF  3               	lsr a
0020EF  3               	sta dispy
0020EF  3               
0020EF  3               	lda #0 			; block to write.
0020EF  3               	jsr pattr 		; write block.
0020EF  3               
0020EF  3               	pla
0020EF  3               	sta dispy
0020EF  3               	pla
0020EF  3               	sta dispx
0020EF  3               	rts
0020EF  3               .endif
0020EF  3               
0020EF  3               ;----------------------------------------------------
0020EF  3               ; Scrolly text and puzzle variables.
0020EF  3               ;----------------------------------------------------
0020EF  3               
0020EF  3               .if sflag
0020EF  3               txtbit:	.byte 128		; bit to write.
0020EF  3               txtwid:	.byte 16		; width of ticker message.
0020EF  3               txtpos:	.word msgdat
0020EF  3               txtini:	.word msgdat
0020EF  3               txtscr:	.word ScreenAddr
0020EF  3               .endif
0020EF  3               
0020EF  3               ;----------------------------------------------------
0020EF  3               ; Specialist routines.
0020EF  3               ; Process shrapnel.
0020EF  3               ;----------------------------------------------------
0020EF  3               proshr:
0020EF  3               .if pflag
0020EF  3               	lda #<SHRAPN		; table.
0020EF  3               	sta z80_x
0020EF  3               	lda #>SHRAPN
0020EF  3               	sta z80_i
0020EF  3               
0020EF  3               	lda #NUMSHR		; shrapnel pieces to process.
0020EF  3               	sta shrctr
0020EF  3               prosh0:
0020EF  3               	ldy #0
0020EF  3               	lda (z80_ix),y		; on/off marker.
0020EF  3               	asl a
0020EF  3               proshx:
0020EF  3               	bcs :+
0020EF  3               	jsr prosh1 		; on, so process it.
0020EF  3               :
0020EF  3               	clc
0020EF  3               	lda z80_x
0020EF  3               	adc #SHRSIZ
0020EF  3               	sta z80_x
0020EF  3               	bcc :+
0020EF  3               	inc z80_i
0020EF  3               :
0020EF  3               	dec shrctr		; round again.
0020EF  3               	bne prosh0
0020EF  3               .endif
0020EF  3               .if sflag
0020EF  3               	jsr scrly
0020EF  3               .endif
0020EF  3  60           	rts
0020F0  3               
0020F0  3               .if pflag
0020F0  3               ;shrctr:	.byte 0
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Proces shrapnel piece
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               prosh1:
0020F0  3               	jsr plot 		; delete the pixel.
0020F0  3               
0020F0  3               	lda #<shrptr		; shrapnel routine pointers.
0020F0  3               	sta z80_l
0020F0  3               	lda #>shrptr
0020F0  3               	sta z80_h
0020F0  3               
0020F0  3               	ldy #0
0020F0  3               	lda (z80_ix),y		; restore shrapnel type.
0020F0  3               	jsr prosh2 		; run the routine.
0020F0  3               	jsr chkxy		; check x and y are good before we redisplay.
0020F0  3               
0020F0  3               	lda #<SHRSIZ 		; distance to next.
0020F0  3               	sta z80_e
0020F0  3               	lda #>SHRSIZ
0020F0  3               	sta z80_d
0020F0  3               	rts
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Run the routine
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               prosh2:
0020F0  3               	asl a 			; 2 bytes per address.
0020F0  3               	tay
0020F0  3               	lda shrptr,y
0020F0  3               	sta z80_l
0020F0  3               	lda shrptr+1,y 		; fetch high byte from table.
0020F0  3               	sta z80_h
0020F0  3               	jmp (z80_hl) 		; jump to routine.
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Paricle routine table
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               shrptr:	.word laser		; laser.
0020F0  3               	.word trail		; vapour trail.
0020F0  3               	.word shrap		; shrapnel from explosion.
0020F0  3               	.word dotl		; horizontal starfield left.
0020F0  3               	.word dotr		; horizontal starfield right.
0020F0  3               	.word dotu		; vertical starfield up.
0020F0  3               	.word dotd		; vertical starfield down.
0020F0  3               	.word ptcusr		; user particle.
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Explosion shrapnel.
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               shrap:
0020F0  3               	ldy #1
0020F0  3               	lda (z80_ix),y 		; get the angle.
0020F0  3               	clc
0020F0  3               	adc #<shrsin		; shrapnel sine table.
0020F0  3               	sta z80_l
0020F0  3               	lda #>shrsin
0020F0  3               	adc #0
0020F0  3               	sta z80_h
0020F0  3               
0020F0  3               	ldy #0
0020F0  3               	lda (z80_hl),y 		; fetch value from table.
0020F0  3               	sta z80_e
0020F0  3               	inc z80_l 		; next byte of table.
0020F0  3               	bne :+
0020F0  3               	inc z80_h
0020F0  3               :
0020F0  3               	ldy #0
0020F0  3               	lda (z80_hl),y		; fetch value from table.
0020F0  3               	sta z80_d
0020F0  3               	inc z80_l		; next byte of table.
0020F0  3               	bne :+
0020F0  3               	inc z80_h
0020F0  3               :
0020F0  3               	ldy #0
0020F0  3               	lda (z80_hl),y 		; fetch value from table.
0020F0  3               	sta z80_c
0020F0  3               	inc z80_l 		; next byte of table.
0020F0  3               	bne :+
0020F0  3               	inc z80_h
0020F0  3               :
0020F0  3               	ldy #0
0020F0  3               	lda (z80_hl),y 		; fetch value from table.
0020F0  3               	sta z80_b
0020F0  3               
0020F0  3               	ldy #2
0020F0  3               	lda (z80_ix),y 		; x coordinate in hl.
0020F0  3               	clc
0020F0  3               	adc z80_e		; add sine lb
0020F0  3               	sta (z80_ix),y		; store new coordinate lb.
0020F0  3               	ldy #3
0020F0  3               	lda (z80_ix),y
0020F0  3               	adc z80_d		; add sine hb
0020F0  3               	sta (z80_ix),y		; store new coordinate hb.
0020F0  3               
0020F0  3               	ldy #4
0020F0  3               	lda (z80_ix),y	 	; y coordinate in hl.
0020F0  3               	clc
0020F0  3               	adc z80_c		; add cosine lb
0020F0  3               	sta (z80_ix),y		; store new coordinate lb.
0020F0  3               	ldy #5
0020F0  3               	lda (z80_ix),y
0020F0  3               	adc z80_b		; add cosine lb
0020F0  3               	sta (z80_ix),y		; store new coordinate hb.
0020F0  3               
0020F0  3               	rts
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Move dots
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               dotl:
0020F0  3               	ldy #5
0020F0  3               	lda (z80_ix),y
0020F0  3               	sec
0020F0  3               	sbc #1		 	; move left.
0020F0  3               	sta (z80_ix),y
0020F0  3               	rts
0020F0  3               dotr:
0020F0  3               	ldy #5
0020F0  3               	lda (z80_ix),y
0020F0  3               	clc
0020F0  3               	adc #1		 	; move left.
0020F0  3               	sta (z80_ix),y
0020F0  3               	rts
0020F0  3               dotu:
0020F0  3               	ldy #3
0020F0  3               	lda (z80_ix),y
0020F0  3               	sec
0020F0  3               	sbc #1		 	; move up.
0020F0  3               	sta (z80_ix),y
0020F0  3               	rts
0020F0  3               dotd:
0020F0  3               	ldy #3
0020F0  3               	lda (z80_ix),y
0020F0  3               	clc
0020F0  3               	adc #1			; move down.
0020F0  3               	sta (z80_ix),y
0020F0  3               	rts
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Check if coordinates are ok before redrawing at new position.
0020F0  3               ;
0020F0  3               ; left:   X>L		X=L	Ok
0020F0  3               ; right:  R+15>X	X=R	Ok
0020F0  3               ; top:    Y>T		Y=T	Ok
0020F0  3               ; bottom: B+15>Y	Y=B	Ok
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               chkxy:
0020F0  3               
0020F0  3               ; top:    Y>T		Y=T	Ok
0020F0  3               
0020F0  3               	ldy #3
0020F0  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0020F0  3               	cmp wntopx		; window top.
0020F0  3               	bcs :+			; compare with top window limit.
0020F0  3               	jmp kilshr		; out of window, kill shrapnel.
0020F0  3               :
0020F0  3               ; left:   X>L		X=L	Ok
0020F0  3               
0020F0  3               	ldy #5
0020F0  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0020F0  3               	cmp wnlftx		; left edge.
0020F0  3               	bcs :+			; compare with left window limit.
0020F0  3               	jmp kilshr		; out of window, kill shrapnel.
0020F0  3               :
0020F0  3               ; bottom: B+15>Y	Y=B	Ok
0020F0  3               
0020F0  3               	lda wnbotx		; point to bottom.
0020F0  3               	clc
0020F0  3               	adc #15
0020F0  3               	ldy #3
0020F0  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0020F0  3               	bcs :+			; compare with shrapnel x coordinate.
0020F0  3               	jmp kilshr		; off screen, kill shrapnel..
0020F0  3               :
0020F0  3               ; right:  R+15>X	X=R	Ok
0020F0  3               
0020F0  3               	lda wnrgtx		; point to right edge.
0020F0  3               	clc
0020F0  3               	adc #15
0020F0  3               	ldy #5
0020F0  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0020F0  3               	bcs :+			; compare with window limit.
0020F0  3               	jmp kilshr		; off screen, kill shrapnel.
0020F0  3               :
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Drop through.
0020F0  3               ; Display shrapnel.
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               plot:
0020F0  3               	ldy #3
0020F0  3               	lda (z80_ix),y		; y integer.
0020F0  3               	sta dispy	 	; workspace coordinates.
0020F0  3               	ldy #5
0020F0  3               	lda (z80_ix),y	 	; x integer.
0020F0  3               	sta dispx 		; workspace coordinates.
0020F0  3               
0020F0  3               	ldy #0
0020F0  3               	lda (z80_ix),y 		; type.
0020F0  3               	bne :+			; is it a laser?
0020F0  3               	jmp plot1 		; yes, draw laser instead.
0020F0  3               :
0020F0  3               plot0:
0020F0  3               	lda dispx		; which pixel within byte do we
0020F0  3               	and #7			; want to set first?
0020F0  3               	tay
0020F0  3               	lda dots,y 		; table of small pixel positions.
0020F0  3               	sta z80_e 		; get value.
0020F0  3               
0020F0  3               	jsr scadd 		; screen address.
0020F0  3               	ldy #0
0020F0  3               	lda (scraddr),y		; see what's already there.
0020F0  3               	eor z80_e
0020F0  3               	sta (scraddr),y 	; put back on screen.
0020F0  3               	rts
0020F0  3               
0020F0  3               plot1:
0020F0  3               	jsr scadd 		; screen address.
0020F0  3               	ldy #0
0020F0  3               	lda (scraddr),y 	; fetch byte there.
0020F0  3               	eor #255 		; toggle all bits.
0020F0  3               	sta (scraddr),y 	; new byte.
0020F0  3               	rts
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Switch off shrapnel
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               kilshr:
0020F0  3               	lda #128
0020F0  3               	ldy #0
0020F0  3               	sta (z80_ix),y	; switch off shrapnel.
0020F0  3               	rts
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Sine/cosine table
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               shrsin:	.word 0,1024,391,946,724,724,946,391
0020F0  3               	.word 1024,0,946,65144,724,64811,391,64589
0020F0  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0020F0  3               	.word 64512,0,64589,391,64811,724,65144,946
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Create trail
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               trail:
0020F0  3               	ldy #1
0020F0  3               	lda (z80_ix),y 	; time remaining.
0020F0  3               	sec
0020F0  3               	sbc #1
0020F0  3               	sta (z80_ix),y
0020F0  3               	bne :+
0020F0  3               	jmp trailk		; time to switch it off.
0020F0  3               :
0020F0  3               	jsr qrand		; get a random number.
0020F0  3               	lsr a 			; x or y axis?
0020F0  3               	bcc :+
0020F0  3               	jmp trailv		; use y.
0020F0  3               :
0020F0  3               ; Trail horizontal
0020F0  3               
0020F0  3               	lsr a 			; which direction?
0020F0  3               	bcc :+
0020F0  3               	jmp traill		; go left.
0020F0  3               :
0020F0  3               ; Trail right
0020F0  3               
0020F0  3               	ldy #5
0020F0  3               	lda (z80_ix),y
0020F0  3               	clc
0020F0  3               	adc #1	 		; go right.
0020F0  3               	sta (z80_ix),y
0020F0  3               	rts
0020F0  3               
0020F0  3               ; Trail left
0020F0  3               
0020F0  3               traill:
0020F0  3               	ldy #5
0020F0  3               	lda (z80_ix),y
0020F0  3               	sec
0020F0  3               	sbc #1 			; go left.
0020F0  3               	sta (z80_ix),y
0020F0  3               	rts
0020F0  3               
0020F0  3               ; Trail vertical
0020F0  3               
0020F0  3               trailv:
0020F0  3               	lsr a		 	; which direction?
0020F0  3               	bcc :+
0020F0  3               	jmp trailu		; go up.
0020F0  3               :
0020F0  3               ; Trail down
0020F0  3               
0020F0  3               	ldy #3
0020F0  3               	lda (z80_ix),y
0020F0  3               	clc
0020F0  3               	adc #1 			; go down.
0020F0  3               	sta (z80_ix),y
0020F0  3               	rts
0020F0  3               
0020F0  3               ; Trail up
0020F0  3               
0020F0  3               trailu:
0020F0  3               	ldy #3
0020F0  3               	lda (z80_ix),y
0020F0  3               	sec
0020F0  3               	sbc #1 			; go up.
0020F0  3               	sta (z80_ix),y
0020F0  3               	rts
0020F0  3               
0020F0  3               ; Kill trail
0020F0  3               
0020F0  3               trailk:
0020F0  3               	lda #200		; set off-screen to kill vapour trail.
0020F0  3               	ldy #3
0020F0  3               	sta (z80_ix),y
0020F0  3               	rts
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Create laser beam
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               laser:
0020F0  3               	ldy #1
0020F0  3               	lda (z80_ix),y 		; direction.
0020F0  3               	ror a 			; left or right?
0020F0  3               	bcs :+
0020F0  3               	jmp laserl		; move left.
0020F0  3               :
0020F0  3               ; Laser right
0020F0  3               
0020F0  3               	lda #8			; distance to travel.
0020F0  3               	sta z80_b
0020F0  3               	jmp laserm		; move laser.
0020F0  3               
0020F0  3               ; Laser left
0020F0  3               
0020F0  3               laserl:
0020F0  3               	lda #248		; distance to travel.
0020F0  3               	sta z80_b
0020F0  3               laserm:
0020F0  3               	ldy #5
0020F0  3               	lda (z80_ix),y		; x position.
0020F0  3               	clc
0020F0  3               	adc z80_b		; add distance.
0020F0  3               	sta (z80_ix),y		; set new x coordinate.
0020F0  3               
0020F0  3               ; Test new block.
0020F0  3               
0020F0  3               	sta dispx 		; set x for block collision detection purposes.
0020F0  3               	ldy #3
0020F0  3               	lda (z80_ix),y 		; get y.
0020F0  3               	sta dispy		; set coordinate for collision test.
0020F0  3               	jsr tstbl 		; get block type there.
0020F0  3               	cmp #WALL		; is it solid?
0020F0  3               	bne :+
0020F0  3               	jmp trailk		; yes, it cannot pass.
0020F0  3               :
0020F0  3               .if pflag .or dflag
0020F0  3                       cmp #FODDER             ; is it fodder?
0020F0  3                       bne :+
0020F0  3                       jsr fdchk               ; remove fodder block.
0020F0  3                       jmp trailk              ; destroy laser.
0020F0  3               :
0020F0  3               .endif
0020F0  3                       rts                     ; no, ignore it.
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Dots mask
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               dots:	.byte 128,64,32,16,8,4,2,1
0020F0  3               
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Plot, preserving de.
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               plotde:
0020F0  3               	lda z80_d 		; put de on stack.
0020F0  3               	pha
0020F0  3               	lda z80_e
0020F0  3               	pha
0020F0  3               
0020F0  3               	jsr plot 		; plot pixel.
0020F0  3               
0020F0  3               	pla			; restore de from stack.
0020F0  3               	sta z80_e
0020F0  3               	pla
0020F0  3               	sta z80_d
0020F0  3               
0020F0  3               	rts
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Shoot a laser.
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               shoot:
0020F0  3               	sta z80_c		; store direction in c register.
0020F0  3               	ldy #8
0020F0  3               	lda (z80_ix),y 		; y coordinate.
0020F0  3               	clc
0020F0  3               shoot1:
0020F0  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0020F0  3               	sta z80_l 		; puty y coordinate in l.
0020F0  3               
0020F0  3               	ldy #9
0020F0  3               	lda (z80_ix),y 		; x coordinate in h.
0020F0  3               	sta z80_h
0020F0  3               
0020F0  3               	lda z80_i		; store pointer to sprite.
0020F0  3               	pha
0020F0  3               	lda z80_x
0020F0  3               	pha
0020F0  3               
0020F0  3               	jsr fpslot 		; find particle slot.
0020F0  3               	bcs :+
0020F0  3               	jmp vapou2		; failed, restore ix.
0020F0  3               :
0020F0  3               	lda #0
0020F0  3               	ldy #0
0020F0  3               	sta (z80_ix),y 		; set up a laser.
0020F0  3               
0020F0  3               	lda z80_c
0020F0  3               	ldy #1
0020F0  3               	sta (z80_ix),y 		; set the direction.
0020F0  3               
0020F0  3               	lda z80_l
0020F0  3               	ldy #3
0020F0  3               	sta (z80_ix),y		; set y coordinate.
0020F0  3               
0020F0  3               	ror z80_c		; check direction we want.
0020F0  3               	bcc :+
0020F0  3               	jmp shootr		; shoot right.
0020F0  3               :
0020F0  3               	lda z80_h		; X position.
0020F0  3               shoot0:
0020F0  3               	and #248		; align on character boundary.
0020F0  3               	ldy #5
0020F0  3               	sta (z80_ix),y		; set x coordinate.
0020F0  3               	jmp vapou0 		; draw first image.
0020F0  3               shootr:
0020F0  3               	lda z80_h		; x position.
0020F0  3               	clc
0020F0  3               	adc #15			; look right.
0020F0  3               	jmp shoot0		; align and continue.
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Create a bit of vapour trail.
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               vapour:
0020F0  3               	lda z80_i		; store pointer to sprite.
0020F0  3               	pha
0020F0  3               	lda z80_x
0020F0  3               	pha
0020F0  3               
0020F0  3               	ldy #8
0020F0  3               	lda (z80_ix),y 		; y coordinate.
0020F0  3               	clc
0020F0  3               vapou3:
0020F0  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0020F0  3               	sta z80_l
0020F0  3               
0020F0  3               	ldy #9
0020F0  3               	lda (z80_ix),y 		; x coordinate.
0020F0  3               	adc #7
0020F0  3               	sta z80_h
0020F0  3               
0020F0  3               	jsr fpslot 		; find particle slot.
0020F0  3               	bcc :+
0020F0  3               	jmp vapou1		; no, we can use it.
0020F0  3               :
0020F0  3               vapou2:
0020F0  3               	pla
0020F0  3               	sta z80_x
0020F0  3               	pla
0020F0  3               	sta z80_i
0020F0  3               	rts
0020F0  3               vapou1:
0020F0  3               	lda z80_l
0020F0  3               	ldy #3
0020F0  3               	sta (z80_ix),y		; set up y.
0020F0  3               
0020F0  3               	lda z80_h
0020F0  3               	ldy #5
0020F0  3               	sta (z80_ix),y 		; set up x coordinate.
0020F0  3               
0020F0  3               	jsr qrand		; get quick random number.
0020F0  3               	and #15			; random time.
0020F0  3               	clc
0020F0  3               	adc #15			; minimum time on screen.
0020F0  3               	ldy #1
0020F0  3               	sta (z80_ix),y		; set time on screen.
0020F0  3               
0020F0  3               	lda #1
0020F0  3               	ldy #0
0020F0  3               	sta (z80_ix),y		; define particle as vapour trail.
0020F0  3               vapou0:
0020F0  3               	jsr chkxy		; plot first position.
0020F0  3               	jmp vapou2
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Create a user particle.
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               ptusr:
0020F0  3               	sta z80_f		; store timer.
0020F0  3               
0020F0  3               	ldy #8
0020F0  3               	lda (z80_ix),y 		; y coordinate.
0020F0  3               	clc
0020F0  3               	adc #7			; mid-point of sprite.
0020F0  3               	sta z80_l
0020F0  3               
0020F0  3               	ldy #9
0020F0  3               	lda (z80_ix),y 		; x coordinate.
0020F0  3               	clc
0020F0  3               	adc #7			; mid-point of sprite.
0020F0  3               	sta z80_h
0020F0  3               
0020F0  3               	jsr fpslot 		; find particle slot.
0020F0  3               	bcs ptusr1
0020F0  3               	rts 			; out of slots, can't generate anything.
0020F0  3               ptusr1:
0020F0  3               	lda z80_l
0020F0  3               	ldy #3
0020F0  3               	sta (z80_ix),y 		; set up y.
0020F0  3               
0020F0  3               	lda z80_h
0020F0  3               	ldy #5
0020F0  3               	sta (z80_ix),y		; set up x coordinate.
0020F0  3               
0020F0  3               	lda z80_f 		; restore timer.
0020F0  3               	ldy #1
0020F0  3               	sta (z80_ix),y		; set time on screen.
0020F0  3               
0020F0  3               	lda #7
0020F0  3               	ldy #0
0020F0  3               	sta (z80_ix),y		; define particle as user particle.
0020F0  3               
0020F0  3               	jmp chkxy		; plot first position.
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Create a vertical or horizontal star.
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               star:
0020F0  3               	lda z80_i		; store pointer to sprite.
0020F0  3               	pha
0020F0  3               	lda z80_x
0020F0  3               	pha
0020F0  3               
0020F0  3               	jsr fpslot 		; find particle slot.
0020F0  3               	bcs star7		; found one we can use.
0020F0  3               star0:
0020F0  3               	pla 			; restore sprite pointer.
0020F0  3               	sta z80_x
0020F0  3               	pla
0020F0  3               	sta z80_i
0020F0  3               	rts 			; out of slots, can't generate anything.
0020F0  3               star7:
0020F0  3               	lda z80_c		; direction.
0020F0  3               	and #3 			; is it left?
0020F0  3               	bne :+
0020F0  3               	jmp star1 		; yes, it's left.
0020F0  3               :
0020F0  3               	cmp #1 			; is it right?
0020F0  3               	bne :+
0020F0  3               	jmp star2 		; yes, it's right.
0020F0  3               :
0020F0  3               	cmp #2 			; is it up?
0020F0  3               	bne :+
0020F0  3               	jmp star3 		; yes, it's up.
0020F0  3               :
0020F0  3               	ldy wntopx 		; get edge of screen.
0020F0  3               	iny			; down one pixel.
0020F0  3               	tya
0020F0  3               star8:
0020F0  3               	ldy #3
0020F0  3               	sta (z80_ix),y 		; set y coord.
0020F0  3               	jsr qrand 		; get quick random number.
0020F0  3               star9:
0020F0  3               	ldy #5
0020F0  3               	sta (z80_ix),y		; set x position.
0020F0  3               
0020F0  3               	lda z80_c		; direction.
0020F0  3               	and #3			; zero to three.
0020F0  3               	clc
0020F0  3               	adc #3			; 3 to 6 for starfield.
0020F0  3               	ldy #0
0020F0  3               	sta (z80_ix),y		; define particle as star.
0020F0  3               	jsr chkxy		; plot first position.
0020F0  3               	jmp star0
0020F0  3               star1:
0020F0  3               	jsr qrand		; get quick random number.
0020F0  3               	ldy #3
0020F0  3               	sta (z80_ix),y 		; set y coord.
0020F0  3               
0020F0  3               	lda wnrgtx 		; get edge of screen.
0020F0  3               	clc
0020F0  3               	adc #15			; add width of sprite minus 1.
0020F0  3               	jmp star9
0020F0  3               star2:
0020F0  3               	jsr qrand 		; get quick random number.
0020F0  3               	ldy #3
0020F0  3               	sta (z80_ix),y		; set y coord.
0020F0  3               
0020F0  3               	lda wnlftx		; get edge of screen.
0020F0  3               	jmp star9
0020F0  3               star3:
0020F0  3               	lda wnbotx 		; get edge of screen.
0020F0  3               	clc
0020F0  3               	adc #15 		; height of sprite minus one pixel.
0020F0  3               	jmp star8
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Find particle slot for lasers or vapour trail.
0020F0  3               ; can't use alternate accumulator.
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               fpslot:
0020F0  3               	lda #<SHRAPN 		; shrapnel table.
0020F0  3               	sta z80_x
0020F0  3               	lda #>SHRAPN
0020F0  3               	sta z80_i
0020F0  3               
0020F0  3               	lda #NUMSHR		; number of pieces in table.
0020F0  3               	sta z80_b
0020F0  3               fpslt0:
0020F0  3               	ldy #0
0020F0  3               	lda (z80_ix),y		; get type.
0020F0  3               	asl a  			; is this slot in use?
0020F0  3               	bcc :+
0020F0  3               	rts			; no, we can use it.
0020F0  3               :
0020F0  3               	clc			; point to more shrapnel.
0020F0  3               	lda z80_x
0020F0  3               	adc #SHRSIZ
0020F0  3               	sta z80_x
0020F0  3               	bcc :+
0020F0  3               	inc z80_i
0020F0  3               :
0020F0  3               	dec z80_b		; repeat for all shrapnel.
0020F0  3               	bne fpslt0
0020F0  3               
0020F0  3               	clc
0020F0  3               	rts 			; out of slots, can't generate anything.
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Create an explosion at sprite position.
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               explod:
0020F0  3               	sta z80_c 		; particles to create.
0020F0  3               
0020F0  3               	lda z80_i 		; store pointer to sprite.
0020F0  3               	pha
0020F0  3               	lda z80_x
0020F0  3               	pha
0020F0  3               
0020F0  3               	ldy #8
0020F0  3               	lda (z80_ix),y 		; y coordinate.
0020F0  3               	sta z80_l
0020F0  3               	ldy #9
0020F0  3               	lda (z80_ix),y		; x coordinate.
0020F0  3               	sta z80_h
0020F0  3               
0020F0  3               	lda #<SHRAPN		; shrapnel table.
0020F0  3               	sta z80_x
0020F0  3               	lda #>SHRAPN
0020F0  3               	sta z80_i
0020F0  3               
0020F0  3               	lda #NUMSHR		; number of pieces in table.
0020F0  3               	sta explcnt
0020F0  3               expld0:
0020F0  3               	ldy #0
0020F0  3               	lda (z80_ix),y		; get type.
0020F0  3               	asl a 			; is this slot in use?
0020F0  3               	bcs expld1		; no, we can use it.
0020F0  3               expld2:
0020F0  3               	clc
0020F0  3               	lda z80_x
0020F0  3               	adc #SHRSIZ
0020F0  3               	sta z80_x
0020F0  3               	bcc :+
0020F0  3               	inc z80_i
0020F0  3               :
0020F0  3               	dec explcnt		; repeat for all shrapnel.
0020F0  3               	bne expld0
0020F0  3               expld3:
0020F0  3               	pla			; restore sprite pointer.
0020F0  3               	sta z80_x
0020F0  3               	pla
0020F0  3               	sta z80_i
0020F0  3               	rts 			; out of slots, can't generate any more.
0020F0  3               
0020F0  3               expld1:
0020F0  3               	lda z80_c		; shrapnel counter.
0020F0  3               	and #15			; 0 to 15.
0020F0  3               	clc			; add to x.
0020F0  3               	adc z80_l
0020F0  3               	ldy #3
0020F0  3               	sta (z80_ix),y		; y coord.
0020F0  3               
0020F0  3               	lda seed3 		; crap random number.
0020F0  3               	and #15			; 0 to 15.
0020F0  3               	clc 			; add to y.
0020F0  3               	adc z80_h
0020F0  3               	ldy #5
0020F0  3               	sta (z80_ix),y		; x coord.
0020F0  3               
0020F0  3               	lda #2
0020F0  3               	ldy #0
0020F0  3               	sta (z80_ix),y		; switch it on.
0020F0  3               
0020F0  3               	jsr chkxy		; plot first position.
0020F0  3               	jsr qrand		; quick random angle.
0020F0  3               	and #60 		; keep within range.
0020F0  3               	ldy #1
0020F0  3               	sta (z80_ix),y		; angle.
0020F0  3               
0020F0  3               	dec z80_c		; one less piece of shrapnel to generate.
0020F0  3               	bne expld2 		; back to main explosion loop.
0020F0  3               	jmp expld3 		; restore sprite pointer and exit.
0020F0  3               
0020F0  3               ;explcnt:	.byte 0
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Quick random
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               qrand:
0020F0  3               	jsr random		; r register.
0020F0  3               	eor seed3		; combine with seed.
0020F0  3               	sta seed3 		; new seed.
0020F0  3               	rts
0020F0  3               
0020F0  3               ;seed3:	.byte 0
0020F0  3               
0020F0  3               ;----------------------------------------------------
0020F0  3               ; Display all shrapnel.
0020F0  3               ;----------------------------------------------------
0020F0  3               
0020F0  3               dshrp:
0020F0  3               	lda #<plotde		; display routine.
0020F0  3               	sta proshx+1
0020F0  3               	lda #>plotde
0020F0  3               	sta proshx+2
0020F0  3               	jsr proshr		; process shrapnel.
0020F0  3               
0020F0  3               	lda #<prosh1		; processing routine.
0020F0  3               	sta proshx+1
0020F0  3               	lda #>prosh1
0020F0  3               	sta proshx+2
0020F0  3               	rts
0020F0  3               
0020F0  3               ;------------------------------------------------------
0020F0  3               ; Particle engine.
0020F0  3               ;
0020F0  3               ; Init particle data for 55 particles in SHRAPN table.
0020F0  3               ; Every particle has 6 bytes.
0020F0  3               ;
0020F0  3               ; global:	-
0020F0  3               ; local:	x,y,hl
0020F0  3               ; calls:	-
0020F0  3               ;------------------------------------------------------
0020F0  3               
0020F0  3               inishr:
0020F0  3               	lda #<SHRAPN 		; table.
0020F0  3               	sta z80_l
0020F0  3               	lda #>SHRAPN
0020F0  3               	sta z80_h
0020F0  3               
0020F0  3               	ldy #0
0020F0  3               	ldx #NUMSHR		; shrapnel pieces to process.
0020F0  3               inish0:
0020F0  3               	lda #255 		; kill the shrapnel.
0020F0  3               	sta (z80_hl),y
0020F0  3               
0020F0  3               	clc 			; point there.
0020F0  3               	lda z80_l
0020F0  3               	adc #SHRSIZ		; distance to next.
0020F0  3               	sta z80_l
0020F0  3               	bcc :+
0020F0  3               	inc z80_h
0020F0  3               :
0020F0  3               	dex
0020F0  3               	bne inish0 		; round again.
0020F0  3               	rts
0020F0  3               
0020F0  3               ;------------------------------------------------------
0020F0  3               ; Check for collision between laser and sprite.
0020F0  3               ;------------------------------------------------------
0020F0  3               
0020F0  3               lcol:
0020F0  3               	lda #<SHRAPN		; shrapnel table.
0020F0  3               	sta z80_l
0020F0  3               	lda #>SHRAPN
0020F0  3               	sta z80_h
0020F0  3               
0020F0  3               	lda #NUMSHR		; number of pieces in table.
0020F0  3               	sta z80_b
0020F0  3               lcol0:
0020F0  3               	ldy #0
0020F0  3               	lda (z80_hl),y 		; get type.
0020F0  3               	beq lcol1		; yes, check collision.
0020F0  3               lcol3:
0020F0  3               	clc			; point to more shrapnel.
0020F0  3               	lda z80_l
0020F0  3               	adc #SHRSIZ
0020F0  3               	sta z80_l
0020F0  3               	bcc :+
0020F0  3               	inc z80_h
0020F0  3               :
0020F0  3               	dec z80_b		; repeat for all shrapnel.
0020F0  3               	bne lcol0
0020F0  3               	rts 			; no collision, carry not set.
0020F0  3               lcol1:
0020F0  3               	ldy #3
0020F0  3               	lda (z80_hl),y		; get y.
0020F0  3               	sec
0020F0  3               	ldy #8
0020F0  3               	sbc (z80_ix),y		; subtract sprite y.
0020F0  3               lcolh:
0020F0  3               	cmp #SPR_HGT 		; within range?
0020F0  3               	bcc :+
0020F0  3               	jmp lcol2		; no, missed.
0020F0  3               :
0020F0  3               	ldy #5
0020F0  3               	lda (z80_hl),y 		; get x.
0020F0  3               	sec
0020F0  3               	ldy #9
0020F0  3               	sbc (z80_ix),y 		; subtract sprite y.
0020F0  3               	cmp #16			; within range?
0020F0  3               	bcs :+
0020F0  3               	jmp lcol4 		; yes, collision occurred.
0020F0  3               :
0020F0  3               lcol2:
0020F0  3               	jmp lcol3
0020F0  3               lcol4:
0020F0  3               	sec
0020F0  3               	rts 			; return with carry set for collision.
0020F0  3               .endif
0020F0  3               
0020F0  3               ;------------------------------------------------------
0020F0  3               ; Main game engine code starts here.
0020F0  3               ; After initialisation, mloop is the main loop
0020F0  3               ;------------------------------------------------------
0020F0  3               
0020F0  3               game:
0020F0  3               
0020F0  3               ; Set up screen address table.
0020F0  3               
0020F0  3               setsat:
0020F0  3  A9 00        	lda #<ScreenAddr		; start of screen.
0020F2  3  85 rr        	sta scraddr
0020F4  3  A9 E4        	lda #>ScreenAddr
0020F6  3  85 rr        	sta scraddr+1
0020F8  3               
0020F8  3  A0 00        	ldy #0			; vertical lines on screen.
0020FA  3               setsa0:
0020FA  3  A5 rr        	lda scraddr
0020FC  3  99 00 E0     	sta SCADTB_lb,y		; write low byte.
0020FF  3  A5 rr        	lda scraddr+1
002101  3  C0 C0        	cpy #192		; vertical lines on screen.
002103  3  90 02        	bcc :+
002105  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
002107  3               :
002107  3  99 00 E1     	sta SCADTB_hb,y		; write high byte.
00210A  3  20 B9 2E     	jsr nline		; next line down.
00210D  3  C8           	iny			; next position in table.
00210E  3  D0 EA        	bne setsa0
002110  3               
002110  3               ; Init graphics mode
002110  3               
002110  3  A9 F0        	lda #ScrMode		; graphics mode
002112  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
002115  3  20 EE 20     	jsr setpal 		; set up palette.
002118  3               
002118  3               ; Init AtoMMC joystick
002118  3  20 20 2A     	jsr joyinit		; AtoMMC joystick on PORT B
00211B  3               
00211B  3               rpblc2:
00211B  3               .if pflag
00211B  3               	jsr inishr 		; initialise particle engine.
00211B  3               .endif
00211B  3               evintr:
00211B  3  20 7C 51     	jsr evnt12 		; call intro/menu event.
00211E  3               
00211E  3  A9 02        	lda #WALL 		; write default property.
002120  3  A2 00        	ldx #0
002122  3               clrmap:
002122  3  9D 00 DD     	sta MAP,x 		; block properties.
002125  3  9D 00 DE     	sta MAP+256,x
002128  3  9D 00 DF     	sta MAP+512,x
00212B  3  E8           	inx			; next byte.
00212C  3  D0 F4        	bne clrmap
00212E  3               .if oflag
00212E  3               	jsr iniob 		; initialise objects.
00212E  3               .endif
00212E  3  A9 00        	lda #0			; put zero in accumulator.
002130  3  85 rr        	sta gamwon		; reset game won flag.
002132  3               
002132  3  20 9B 22     	jsr inisc 		; init the score.
002135  3               mapst:
002135  3  AD 2E 34     	lda stmap 		; start position on map.
002138  3  8D E4 33     	sta roomtb		; set up position in table, if there is one.
00213B  3               
00213B  3               inipbl:
00213B  3               .if aflag
00213B  3               	lda #<eop		; reset blockpointer
00213B  3               	sta pbptr
00213B  3               	lda #>eop
00213B  3               	sta pbptr+1
00213B  3               .endif
00213B  3  20 CC 2F     	jsr initsc 		; set up first screen.
00213E  3               
00213E  3  A9 D3        	lda #<ssprit 		; default to spare sprite in table.
002140  3  85 68        	sta z80_x
002142  3  A9 33        	lda #>ssprit
002144  3  85 69        	sta z80_i
002146  3               evini:
002146  3  20 7D 51     	jsr evnt13 		; initialisation.
002149  3               
002149  3               ; Two restarts.
002149  3               ; First restart - clear all sprites and initialise everything.
002149  3               
002149  3               rstrt:
002149  3  20 3B 22     	jsr rsevt 		; restart events.
00214C  3  20 45 20     	jsr xspr 		; clear sprite table.
00214F  3  20 38 31     	jsr sprlst 		; fetch pointer to screen sprites.
002152  3  20 C1 31     	jsr ispr 		; initialise sprite table.
002155  3               
002155  3  4C 64 21     	jmp rstrt0
002158  3               
002158  3               ; Second restart - clear all but player, and don't initialise him.
002158  3               
002158  3               rstrtn:
002158  3  20 3B 22     	jsr rsevt		; restart events.
00215B  3  20 65 31     	jsr nspr 		; clear all non-player sprites.
00215E  3  20 38 31     	jsr sprlst 		; fetch pointer to screen sprites.
002161  3  20 FE 31     	jsr kspr 		; initialise sprite table, no more players.
002164  3               
002164  3               ; Set up the player and/or enemy sprites.
002164  3               
002164  3               rstrt0:
002164  3  A9 00        	lda #0 			; zero in accumulator.
002166  3  85 rr        	sta nexlev 		; reset next level flag.
002168  3  85 rr        	sta restfl 		; reset restart flag.
00216A  3  85 rr        	sta deadf 		; reset dead flag.
00216C  3  20 09 26     	jsr droom 		; show screen layout.
00216F  3               rpblc0:
00216F  3               .if pflag
00216F  3               	jsr inishr 		; initialise particle engine.
00216F  3               .endif
00216F  3               .if aflag
00216F  3               	jsr rbloc		; draw blocks for this screen
00216F  3               .endif
00216F  3               .if oflag
00216F  3               	jsr shwob		; draw objects.
00216F  3               .endif
00216F  3               
00216F  3  A9 07        	lda #<sprtab 		; address of sprite table, even sprites.
002171  3  85 68        	sta z80_x
002173  3  A9 33        	lda #>sprtab
002175  3  85 69        	sta z80_i
002177  3  20 AA 2C     	jsr dspr 		; display sprites.
00217A  3               
00217A  3  A9 18        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00217C  3  85 68        	sta z80_x
00217E  3  A9 33        	lda #>(sprtab+TABSIZ)
002180  3  85 69        	sta z80_i
002182  3  20 AA 2C     	jsr dspr 		; display sprites.
002185  3               mloop:
002185  3  20 52 20     	jsr vsync 		; synchronise with display.
002188  3  A9 07        	lda #<sprtab 		; address of sprite table, even sprites.
00218A  3  85 68        	sta z80_x
00218C  3  A9 33        	lda #>sprtab
00218E  3  85 69        	sta z80_i
002190  3  20 AA 2C     	jsr dspr 		; display even sprites.
002193  3               
002193  3               ;	jsr plsnd 		; play sounds.
002193  3               
002193  3  20 EF 20     	jsr proshr
002196  3  A9 18        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002198  3  85 68        	sta z80_x
00219A  3  A9 33        	lda #>(sprtab+TABSIZ)
00219C  3  85 69        	sta z80_i
00219E  3  20 AA 2C     	jsr dspr 		; display odd sprites.
0021A1  3               
0021A1  3  A9 D3        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
0021A3  3  85 68        	sta z80_x
0021A5  3  A9 33        	lda #>(ssprit)
0021A7  3  85 69        	sta z80_i
0021A9  3               evlp1:
0021A9  3  20 E2 50     	jsr evnt10 		; called once per main loop.
0021AC  3  20 28 2C     	jsr pspr 		; process sprites.
0021AF  3               
0021AF  3               ; Main loop events.
0021AF  3               
0021AF  3  A9 D3        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0021B1  3  85 68        	sta z80_x
0021B3  3  A9 33        	lda #>ssprit
0021B5  3  85 69        	sta z80_i
0021B7  3               evlp2:
0021B7  3  20 66 51     	jsr evnt11 		; called once per main loop.
0021BA  3               bsortx:
0021BA  3  20 9E 2B     	jsr bsort 		; sort sprites.
0021BD  3               
0021BD  3  A5 rr        	lda nexlev		; finished level flag.
0021BF  3  F0 03        	beq :+
0021C1  3  4C E9 21     	jmp newlev		; is set, go to next level.
0021C4  3               :
0021C4  3  A5 rr        	lda gamwon		; finished game flag.
0021C6  3  F0 03        	beq :+
0021C8  3  4C F8 21     	jmp evwon		; is set, finish the game.
0021CB  3               :
0021CB  3  A5 rr        	lda restfl 		; finished level flag.
0021CD  3  C9 01        	cmp #1			; has it been set?
0021CF  3  D0 03        	bne :+
0021D1  3  4C 49 21     	jmp rstrt		; yes, go to next level.
0021D4  3               :
0021D4  3  C9 02        	cmp #2			; has it been set?
0021D6  3  D0 03        	bne :+
0021D8  3  4C 58 21     	jmp rstrtn		; yes, go to next level.
0021DB  3               :
0021DB  3  A5 rr        	lda deadf 		; dead flag.
0021DD  3  F0 03        	beq :+
0021DF  3  4C FE 21     	jmp pdead		; yes, player dead.
0021E2  3               :
0021E2  3               ; back to start of main loop.
0021E2  3               
0021E2  3  E6 rr        	inc frmno
0021E4  3  E6 rr        	inc clock
0021E6  3  4C 85 21     	jmp mloop		; switched to a jmp mloop during test mode.
0021E9  3               
0021E9  3               ;----------------------------------------------------------
0021E9  3               ; Read blocks from list and update screen accordingly.
0021E9  3               ;----------------------------------------------------------
0021E9  3               
0021E9  3               .if aflag
0021E9  3               rbloc:
0021E9  3               	lda #<eop		; reset temp blockpointer
0021E9  3               	sta pbbuf
0021E9  3               	lda #>eop
0021E9  3               	sta pbbuf+1
0021E9  3               
0021E9  3               rbloc2:
0021E9  3               	lda pbbuf			; check for last block
0021E9  3               	cmp pbptr
0021E9  3               	bne rbloc1
0021E9  3               	lda pbbuf+1
0021E9  3               	cmp pbptr+1
0021E9  3               	bne rbloc1
0021E9  3               	rts
0021E9  3               rbloc1:
0021E9  3               	ldy #0
0021E9  3               	lda (pbbuf),y		; check if block for this scno
0021E9  3               	cmp scno
0021E9  3               	bne rbloc0		; if not, skip
0021E9  3               	iny
0021E9  3               	lda (pbbuf),y		; get y
0021E9  3               	sta dispy
0021E9  3               	iny
0021E9  3               	lda (pbbuf),y		; get x
0021E9  3               	sta dispx
0021E9  3               	iny
0021E9  3               	lda (pbbuf),y		; get blocknr
0021E9  3               	jsr pattr2		; draw block
0021E9  3               rbloc0:
0021E9  3               	clc			; point to next block
0021E9  3               	lda pbbuf
0021E9  3               	adc #4
0021E9  3               	sta pbbuf
0021E9  3               	bcc rbloc2
0021E9  3               	inc pbbuf+1
0021E9  3               	jmp rbloc2
0021E9  3               .endif
0021E9  3               
0021E9  3               ;----------------------------------------------------------
0021E9  3               ; New level
0021E9  3               ;----------------------------------------------------------
0021E9  3               
0021E9  3               ;.repeat 270
0021E9  3               ;  .byte 0
0021E9  3               ;.endrep
0021E9  3               
0021E9  3               newlev:
0021E9  3  A5 rr        	lda scno 			; current screen.
0021EB  3  18           	clc
0021EC  3  69 01        	adc #1				; next screen.
0021EE  3  CD 96 91     	cmp numsc			; total number of screens.
0021F1  3  B0 05        	bcs evwon			; yes, game finished.
0021F3  3  85 rr        	sta scno			; set new level number.
0021F5  3  4C 49 21     	jmp rstrt			; restart, clearing all aliens.
0021F8  3               
0021F8  3               evwon:
0021F8  3  20 8C 52     	jsr evnt18		 	; game completed.
0021FB  3  4C 10 22     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0021FE  3               
0021FE  3               ;----------------------------------------------------------
0021FE  3               ; Player dead.
0021FE  3               ;----------------------------------------------------------
0021FE  3               
0021FE  3               ;.repeat 258
0021FE  3               ;  .byte 0
0021FE  3               ;.endrep
0021FE  3               
0021FE  3               pdead:
0021FE  3  A9 00        	lda #0				; zeroise accumulator.
002200  3  85 rr        	sta deadf			; reset dead flag.
002202  3               evdie:
002202  3  20 42 52     	jsr evnt16 			; death subroutine.
002205  3  A5 rr        	lda numlif			; number of lives.
002207  3  F0 03        	beq :+
002209  3  4C 49 21     	jmp rstrt 			; restart game.
00220C  3               :
00220C  3               evfail:
00220C  3  20 86 52     	jsr evnt17 			; failure event.
00220F  3  60           	rts			; restart game
002210  3               
002210  3               ;----------------------------------------------------------
002210  3               ; Tidy things up
002210  3               ;----------------------------------------------------------
002210  3               
002210  3               ;.repeat 291
002210  3               ;  .byte 0
002210  3               ;.endrep
002210  3               
002210  3               tidyup:
002210  3  A0 00        	ldy #0				; digits to check.
002212  3               tidyu2:
002212  3  B9 84 23     	lda score,y 			; get score digit.
002215  3  CD 8A 23     	cmp hiscor 			; are we larger than high score digit?
002218  3  90 07        	bcc tidyu0			; high score is bigger.
00221A  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
00221C  3  C8           	iny				; next digit of high score.
00221D  3  C0 06        	cpy #6
00221F  3  D0 F1        	bne tidyu2			; repeat for all digits
002221  3               tidyu0:
002221  3  A9 84        	lda #<score			; return pointing to score.
002223  3  85 62        	sta z80_c
002225  3  A9 23        	lda #>score
002227  3  85 63        	sta z80_b
002229  3  60           	rts
00222A  3               tidyu1:
00222A  3  A0 05        	ldy #5
00222C  3               tidyu3:
00222C  3  B9 84 23     	lda score,y			; score.
00222F  3  99 8A 23     	sta hiscor,y			; high score.
002232  3  88           	dey
002233  3  10 F7        	bpl tidyu3 			; copy score to high score.
002235  3               evnewh:
002235  3  20 92 52     	jsr evnt19			; new high score event.
002238  3  4C 21 22     	jmp tidyu0			; tidy up.
00223B  3               
00223B  3               ;--------------------------------------------------
00223B  3               ; Restart event.
00223B  3               ;--------------------------------------------------
00223B  3               
00223B  3               rsevt:
00223B  3  A9 D3        	lda #<ssprit 			; default to spare element in table.
00223D  3  85 68        	sta z80_x
00223F  3  A9 33        	lda #>ssprit
002241  3  85 69        	sta z80_i
002243  3               evrs:
002243  3  4C A5 51     	jmp evnt14	 		; call restart event.
002246  3               
002246  3               ;------------------------------------------------------------------
002246  3               ; Copy number passed in a to string position bc, right-justified.
002246  3               ;
002246  3               ; Input:
002246  3               ;  A  = number
002246  3               ;  BC = string address
002246  3               ;
002246  3               ; Output:
002246  3               ;  BC = string with number
002246  3               ;-----------------------------------------------------------------
002246  3               
002246  3               num2ch:
002246  3  85 65        	sta z80_d		; Save number
002248  3               
002248  3  A9 00        	lda #0
00224A  3  85 rr        	sta flag
00224C  3               numdg3:
00224C  3  A2 64        	ldx #100		; hundreds column.
00224E  3  86 64        	stx z80_e
002250  3  20 60 22     	jsr numdg		; show digit.
002253  3               numdg2:
002253  3  A2 0A        	ldx #10			; tens column.
002255  3  86 64        	stx z80_e
002257  3  20 60 22     	jsr numdg		; show digit.
00225A  3               
00225A  3  E6 rr        	inc flag
00225C  3  A2 01        	ldx #1			; units column.
00225E  3  86 64        	stx z80_e
002260  3               numdg:
002260  3  A9 30        	lda #48			; clear digit.
002262  3  85 61        	sta z80_a
002264  3               numdg1:
002264  3  A5 65        	lda z80_d
002266  3  C5 64        	cmp z80_e
002268  3  90 0E        	bcc numdg0		; nothing to show.
00226A  3  38           	sec
00226B  3  A5 65        	lda z80_d
00226D  3  E5 64        	sbc z80_e		; subtract from column.
00226F  3  85 65        	sta z80_d
002271  3  E6 61        	inc z80_a		; increment digit.
002273  3  E6 rr        	inc flag
002275  3  4C 64 22     	jmp numdg1		; repeat until column is zero.
002278  3               numdg0:
002278  3  A0 00        	ldy #0
00227A  3  A5 61        	lda z80_a
00227C  3  91 62        	sta (z80_bc),y		; write digit to buffer.
00227E  3  A5 rr        	lda flag
002280  3  F0 06        	beq :+
002282  3  E6 62        	inc z80_c		; next buffer position.
002284  3  D0 02        	bne :+
002286  3  E6 63        	inc z80_b
002288  3               :
002288  3  60           	rts
002289  3               num2dd:
002289  3  85 65        	sta z80_d		; Save number
00228B  3               
00228B  3  A9 01        	lda #1
00228D  3  85 rr        	sta flag
00228F  3               
00228F  3  4C 53 22     	jmp numdg2
002292  3               num2td:
002292  3  85 65        	sta z80_d		; Save number
002294  3               
002294  3  A9 01        	lda #1
002296  3  85 rr        	sta flag
002298  3  4C 4C 22     	jmp numdg3
00229B  3               
00229B  3               ;flag:	.byte 0
00229B  3               
00229B  3               ;---------------------------------------------------------
00229B  3               ; Reset score to "000000"
00229B  3               ;---------------------------------------------------------
00229B  3               
00229B  3               inisc:
00229B  3  A9 30        	lda #'0'
00229D  3  A2 05        	ldx #5			; digits to initialise.
00229F  3               inisc0:
00229F  3  9D 84 23     	sta score,x 		; write zero digit.
0022A2  3  CA           	dex			; next column.
0022A3  3  10 FA        	bpl inisc0		; repeat for all digits.
0022A5  3               
0022A5  3  60           	rts
0022A6  3               
0022A6  3               ;-----------------------------------------------------
0022A6  3               ; Multiply h by d and return in hl.
0022A6  3               ;
0022A6  3               ; Input:
0022A6  3               ;  H = first number
0022A6  3               ;  D = second number
0022A6  3               ;
0022A6  3               ; Output:
0022A6  3               ;  HL = result H x D
0022A6  3               ;-----------------------------------------------------
0022A6  3               
0022A6  3               imul:
0022A6  3  A5 65        	lda z80_d		; HL = H * D
0022A8  3  85 64        	sta z80_e
0022AA  3  A5 67        	lda z80_h
0022AC  3  85 62        	sta z80_c		; make c first multiplier.
0022AE  3               imul0:
0022AE  3  A9 00        	lda #0			; zeroise total.
0022B0  3  85 66        	sta z80_l
0022B2  3  85 67        	sta z80_h
0022B4  3               
0022B4  3  A5 67        	lda z80_h
0022B6  3  85 65        	sta z80_d		; zeroise high byte.
0022B8  3               
0022B8  3  A9 08        	lda #8			; repeat 8 times.
0022BA  3  85 63        	sta z80_b
0022BC  3               imul1:
0022BC  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
0022BE  3  90 0E        	bcc imul2		; wasn't set.
0022C0  3  18           	clc			; bit was set, so add de.
0022C1  3  A5 66        	lda z80_l
0022C3  3  65 64        	adc z80_e
0022C5  3  85 66        	sta z80_l
0022C7  3  A5 67        	lda z80_h
0022C9  3  65 65        	adc z80_d
0022CB  3  85 67        	sta z80_h
0022CD  3  18           	clc 			; reset carry.
0022CE  3               imul2:
0022CE  3  06 64        	asl z80_e 		; shift de 1 bit left.
0022D0  3  26 65        	rol z80_d
0022D2  3  C6 63        	dec z80_b
0022D4  3  D0 E6        	bne imul1		; repeat 8 times.
0022D6  3               
0022D6  3  60           	rts
0022D7  3               
0022D7  3               ;-----------------------------------------------
0022D7  3               ; Divide d by e and return in d, remainder in a.
0022D7  3               ;
0022D7  3               ; Input:
0022D7  3               ;  D = first number
0022D7  3               ;  E = second number
0022D7  3               ;
0022D7  3               ; Output:
0022D7  3               ;  D = result D/E
0022D7  3               ;  A = remainder
0022D7  3               ;-----------------------------------------------
0022D7  3               
0022D7  3               idiv:
0022D7  3  A9 00        	lda #0
0022D9  3  A0 08        	ldy #8		 	; bits to shift.
0022DB  3  06 65        	asl z80_d
0022DD  3               idiv0:
0022DD  3  2A           	rol a 			; multiply d by 2.
0022DE  3  C5 64        	cmp z80_e 		; test if e is smaller.
0022E0  3  90 02        	bcc idiv1		; e is greater, no division this time.
0022E2  3  E5 64        	sbc z80_e		; subtract it.
0022E4  3               idiv1:
0022E4  3  26 65        	rol z80_d		; rotate into d.
0022E6  3  88           	dey
0022E7  3  D0 F4        	bne idiv0		; repeat
0022E9  3  60           	rts
0022EA  3               
0022EA  3               ;---------------------------------------------------
0022EA  3               ; Play AY sound effect
0022EA  3               ;---------------------------------------------------
0022EA  3               
0022EA  3               plsnd:
0022EA  3  60           	rts
0022EB  3               
0022EB  3               ;---------------------------------------------------
0022EB  3               ; Objects handling.
0022EB  3               ; 32 bytes for image
0022EB  3               ; 3 for room, y and x
0022EB  3               ; 3 for starting room, y and x.
0022EB  3               ; 254 = disabled.
0022EB  3               ; 255 = object in player"s pockets.
0022EB  3               ;---------------------------------------------------
0022EB  3               
0022EB  3               ;---------------------------------------------------
0022EB  3               ; Show items present.
0022EB  3               ;---------------------------------------------------
0022EB  3               
0022EB  3               .if oflag
0022EB  3               shwob:
0022EB  3               	lda #<objdta 			; objects table.
0022EB  3               	sta z80_l
0022EB  3               	lda #>objdta
0022EB  3               	sta z80_h
0022EB  3               
0022EB  3               	lda numob 			; number of objects in the game.
0022EB  3               	sta sprcnt
0022EB  3               shwob0:
0022EB  3               	ldy #32 			; distance to room number.
0022EB  3               	lda (z80_hl),y 			; same as an item?
0022EB  3               	cmp scno 			; current location.
0022EB  3               	bne :+
0022EB  3               	jsr dobj 			; yes, display object.
0022EB  3               :
0022EB  3               	clc
0022EB  3               	lda z80_l
0022EB  3               	adc #38 			; distance to next item.
0022EB  3               	sta z80_l
0022EB  3               	lda z80_h
0022EB  3               	adc #0
0022EB  3               	sta z80_h	 		; point to it.
0022EB  3               	dec sprcnt
0022EB  3               	bne shwob0 			; repeat for others.
0022EB  3               	rts
0022EB  3               
0022EB  3               ;---------------------------------------------------
0022EB  3               ; Display object.
0022EB  3               ; hl must point to object's start address.
0022EB  3               ;
0022EB  3               ; Input:
0022EB  3               ;  HL = object address
0022EB  3               ;---------------------------------------------------
0022EB  3               
0022EB  3               dobj:
0022EB  3               	ldy #33
0022EB  3               	lda (z80_hl),y 			; point to y.
0022EB  3               	sta dispy
0022EB  3               	iny
0022EB  3               	lda (z80_hl),y 			; point to x.
0022EB  3               	sta dispx
0022EB  3               dobj1:
0022EB  3               	jmp sprite 			; draw this sprite.
0022EB  3               
0022EB  3               ;--------------------------------------
0022EB  3               ; Remove an object.
0022EB  3               ;
0022EB  3               ; Input:
0022EB  3               ;  A = object number
0022EB  3               ;--------------------------------------
0022EB  3               
0022EB  3               remob:
0022EB  3               	cmp numob			; number of objects in game.
0022EB  3               	bcc :+				; are we checking past the end?
0022EB  3               	rts				; yes, can't get non-existent item.
0022EB  3               :
0022EB  3               	pha				; remember object.
0022EB  3               	jsr getob			; pick it up if we haven't already got it.
0022EB  3               	pla				; retrieve object number.
0022EB  3               	jsr gotob			; get its address.
0022EB  3               	lda #254
0022EB  3               	ldy #32
0022EB  3               	sta (z80_hl),y			; remove it.
0022EB  3               	rts
0022EB  3               
0022EB  3               ;---------------------------------------------------
0022EB  3               ; Pick up object number held in the accumulator.
0022EB  3               ;
0022EB  3               ; Input:
0022EB  3               ;  A = object number
0022EB  3               ;---------------------------------------------------
0022EB  3               
0022EB  3               getob:
0022EB  3               	cmp numob 		; number of objects in game.
0022EB  3               	bcc :+			; are we checking past the end?
0022EB  3               	rts			; yes, can't get non-existent item.
0022EB  3               :
0022EB  3               	jsr gotob 		; check if we already have it.
0022EB  3               	cmp #255
0022EB  3               	bne :+
0022EB  3               	rts			; we already do.
0022EB  3               :
0022EB  3               	ldy #32
0022EB  3               	lda (z80_hl),y		; is it on this screen?
0022EB  3               	cmp scno 		; current screen.
0022EB  3               	bne getob0		; not on screen, so nothing to delete.
0022EB  3               
0022EB  3               	lda #255
0022EB  3               	sta (z80_hl),y		; pick it up.
0022EB  3               	iny 			; point to y coord.
0022EB  3               getob1:
0022EB  3               	ldy #33
0022EB  3               	lda (z80_hl),y		; y coord.
0022EB  3               	sta dispy
0022EB  3               	ldy #34
0022EB  3               	lda (z80_hl),y 		; x coord.
0022EB  3               	sta dispx
0022EB  3               	jmp dobj1 		; delete object sprite.
0022EB  3               getob0:
0022EB  3               	lda #255
0022EB  3               	sta (z80_hl),y 		; pick it up.
0022EB  3               	rts
0022EB  3               .endif
0022EB  3               
0022EB  3               ;-----------------------------------------------------------------
0022EB  3               ; Got object check.
0022EB  3               ; Call with object in accumulator, returns zero set if in pockets.
0022EB  3               ;
0022EB  3               ; Input:
0022EB  3               ;  A = object number
0022EB  3               ;-----------------------------------------------------------------
0022EB  3               .if oflag .or mflag
0022EB  3               gotob:
0022EB  3               	cmp numob 		; number of objects in game.
0022EB  3               	bcc :+ 			; are we checking past the end?
0022EB  3               	jmp gotob0 		; yes, we can't have a non-existent object.
0022EB  3               :
0022EB  3               	jsr findob		; find the object.
0022EB  3               gotob1:
0022EB  3               	rts
0022EB  3               
0022EB  3               gotob0:
0022EB  3               	lda #254 		; missing.
0022EB  3               	jmp gotob1
0022EB  3               
0022EB  3               findob:
0022EB  3               	pha			; save object number
0022EB  3               	lda #<objdta 		; objects.
0022EB  3               	sta z80_l
0022EB  3               	lda #>objdta
0022EB  3               	sta z80_h
0022EB  3               	pla			; retreive object number
0022EB  3               	beq fndob1 		; is it zero? yes, skip loop.
0022EB  3               	tax 			; loop counter
0022EB  3               fndob2:
0022EB  3               	clc
0022EB  3               	lda z80_l
0022EB  3               	adc #38 		; size of each object.
0022EB  3               	sta z80_l
0022EB  3               	bcc :+
0022EB  3               	inc z80_h
0022EB  3               :
0022EB  3               	dex 			; repeat until we find address.
0022EB  3               	bne fndob2
0022EB  3               fndob1:
0022EB  3               	ldy #32			; distance to room it's in.
0022EB  3               	lda (z80_hl),y		; fetch status.
0022EB  3               	rts
0022EB  3               .endif
0022EB  3               
0022EB  3               ;---------------------------------------------
0022EB  3               ; Drop object number at (dispx, dispy).
0022EB  3               ;
0022EB  3               ; Input:
0022EB  3               ;  A = object number
0022EB  3               ;---------------------------------------------
0022EB  3               
0022EB  3               .if oflag
0022EB  3               drpob:
0022EB  3               	cmp numob 		; are we checking past the end?
0022EB  3               	bcc :+
0022EB  3               	rts			; yes, can't drop non-existent item.
0022EB  3               :
0022EB  3               	jsr gotob		; make sure object is in inventory.
0022EB  3               	cmp scno		; already on this screen?
0022EB  3               	bne :+
0022EB  3               	rts			; yes, nothing to do.
0022EB  3               :
0022EB  3               	ldy #32
0022EB  3               	lda scno
0022EB  3               	sta (z80_hl),y		; bring onto screen.
0022EB  3               	lda dispy		; sprite y coordinate.
0022EB  3               	iny
0022EB  3               	sta (z80_hl),y		; point to object y.
0022EB  3               	lda dispx 		; sprite x coordinate.
0022EB  3               	iny
0022EB  3               	sta (z80_hl),y 		; point to object x
0022EB  3               	jmp dobj		; draw the object sprite.
0022EB  3               
0022EB  3               ;-----------------------------------------------
0022EB  3               ; Seek objects at sprite position.
0022EB  3               ;
0022EB  3               ; Output:
0022EB  3               ;  A = object number, if not found A=255
0022EB  3               ;-----------------------------------------------
0022EB  3               
0022EB  3               skobj:
0022EB  3               	lda #<objdta 		; pointer to objects.
0022EB  3               	sta z80_l
0022EB  3               	lda #>objdta
0022EB  3               	sta z80_h
0022EB  3               
0022EB  3               	lda numob 		; number of objects in game.
0022EB  3               	sta z80_b 		; set up the loop counter.
0022EB  3               skobj0:
0022EB  3               	lda scno		; current room number.
0022EB  3               	ldy #32
0022EB  3               	cmp (z80_hl),y		; is object in here?
0022EB  3               	bne :+
0022EB  3               	jsr skobj1		; yes, check coordinates.
0022EB  3               :
0022EB  3               	clc			; point to next object in table.
0022EB  3               	lda z80_l
0022EB  3               	adc #38			; size of each object.
0022EB  3               	sta z80_l
0022EB  3               	bcc :+
0022EB  3               	inc z80_h
0022EB  3               :
0022EB  3               	dec z80_b
0022EB  3               	bne skobj0		; repeat for all objects.
0022EB  3               
0022EB  3               	lda #255		; end of list and nothing found, return 255.
0022EB  3               	rts
0022EB  3               
0022EB  3               skobj1:
0022EB  3               	ldy #33			; point to y coordinate.
0022EB  3               	lda (z80_hl),y		; point to y coordinate.
0022EB  3               	sec
0022EB  3               	ldy #8
0022EB  3               	sbc (z80_ix),y 		; subtract sprite y.
0022EB  3               	clc
0022EB  3               	adc #15			; add sprite height minus one.
0022EB  3               	cmp #31			; within range?
0022EB  3               	bcs skobj2		; no, ignore object.
0022EB  3               
0022EB  3               	ldy #34			; point to x coordinate now.
0022EB  3               	lda (z80_hl),y 		; get coordinate.
0022EB  3               	sec
0022EB  3               	ldy #9
0022EB  3               	sbc (z80_ix),y 		; subtract the sprite x.
0022EB  3               	clc			; add sprite width minus one.
0022EB  3               	adc #15
0022EB  3               	cmp #31			; within range?
0022EB  3               	bcs skobj2		; no, ignore object.
0022EB  3               
0022EB  3               	pla			; remove return address from stack.
0022EB  3               	pla
0022EB  3               
0022EB  3               	lda numob 		; objects in game.
0022EB  3               	sec
0022EB  3               	sbc z80_b		; subtract loop counter.
0022EB  3               skobj2:
0022EB  3               	rts			; accumulator now points to object.
0022EB  3               .endif
0022EB  3               
0022EB  3               ;---------------------------------------------------------------------
0022EB  3               ; Spawn a new sprite.
0022EB  3               ;---------------------------------------------------------------------
0022EB  3               
0022EB  3                 offset = 20
0022EB  3               
0022EB  3               ;.repeat 343
0022EB  3               ;  .byte 0
0022EB  3               ;.endrep
0022EB  3               
0022EB  3               spawn:
0022EB  3  A9 07        	lda #<sprtab		; sprite table.
0022ED  3  85 66        	sta z80_l
0022EF  3  A9 33        	lda #>sprtab
0022F1  3  85 67        	sta z80_h
0022F3  3               numsp1:
0022F3  3  A9 0C        	lda #NUMSPR		; number of sprites.
0022F5  3  85 rr        	sta spcnt
0022F7  3               spaw0:
0022F7  3  A0 00        	ldy #0
0022F9  3  B1 66        	lda (z80_hl),y		; get sprite type.
0022FB  3  C9 FF        	cmp #255		; is it an unused slot?
0022FD  3  F0 0F        	beq spaw1 		; yes, we can use this one.
0022FF  3               
0022FF  3  18           	clc 			; point to next sprite in table.
002300  3  A5 66        	lda z80_l
002302  3  69 11        	adc #TABSIZ		; size of each entry.
002304  3  85 66        	sta z80_l
002306  3  90 02        	bcc :+
002308  3  E6 67        	inc z80_h
00230A  3               :
00230A  3  C6 rr        	dec spcnt		; one less iteration.
00230C  3  D0 E9        	bne spaw0		; keep going until we find a slot.
00230E  3               
00230E  3               ; Didn't find one but drop through and set up a dummy sprite instead.
00230E  3               
00230E  3               spaw1:
00230E  3  A5 69        	lda z80_i		; address of original sprite.
002310  3  48           	pha
002311  3  A5 68        	lda z80_x
002313  3  48           	pha
002314  3               
002314  3  A5 66        	lda z80_l		; store spawned sprite address.
002316  3  85 rr        	sta spptr
002318  3  A5 67        	lda z80_h
00231A  3  85 rr        	sta spptr+1
00231C  3               
00231C  3  A5 62        	lda z80_c
00231E  3  A0 00        	ldy #0
002320  3  91 66        	sta (z80_hl),y 		; set the type.
002322  3  A0 05        	ldy #5
002324  3  91 66        	sta (z80_hl),y		; copy
002326  3               
002326  3  A5 63        	lda z80_b
002328  3  A0 01        	ldy #1
00232A  3  91 66        	sta (z80_hl),y		; set the image.
00232C  3  A0 06        	ldy #6
00232E  3  91 66        	sta (z80_hl),y		; copy
002330  3               
002330  3  A9 00        	lda #0 			; frame zero.
002332  3  A0 02        	ldy #2
002334  3  91 66        	sta (z80_hl),y		; set frame.
002336  3  A0 07        	ldy #7
002338  3  91 66        	sta (z80_hl),y		; copy
00233A  3               
00233A  3  A0 08        	ldy #8
00233C  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00233E  3  A0 03        	ldy #3
002340  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002342  3  A0 08        	ldy #8
002344  3  91 66        	sta (z80_hl),y		; copy
002346  3               
002346  3  A0 09        	ldy #9
002348  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00234A  3  A0 04        	ldy #4
00234C  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
00234E  3  A0 09        	ldy #9
002350  3  91 66        	sta (z80_hl),y		; copy
002352  3               
002352  3  A0 0A        	ldy #10			; direction of original.
002354  3  B1 68        	lda (z80_ix),y
002356  3  91 66        	sta (z80_hl),y		; direction
002358  3               
002358  3  A9 00        	lda #0
00235A  3  A0 0B        	ldy #11
00235C  3  91 66        	sta (z80_hl),y		; reset parameter.
00235E  3  C8           	iny
00235F  3  91 66        	sta (z80_hl),y		; reset parameter.
002361  3  C8           	iny
002362  3  91 66        	sta (z80_hl),y		; reset parameter.
002364  3  C8           	iny
002365  3  91 66        	sta (z80_hl),y		; reset parameter.
002367  3               rtssp:
002367  3  A5 rr        	lda spptr		; address of new sprite.
002369  3  85 68        	sta z80_x
00236B  3  A5 rr        	lda spptr+1
00236D  3  85 69        	sta z80_i
00236F  3               evis1:
00236F  3  20 BE 50     	jsr evnt09 		; call sprite initialisation event.
002372  3               
002372  3  A5 rr        	lda spptr 		; address of new sprite.
002374  3  85 68        	sta z80_x
002376  3  A5 rr        	lda spptr+1
002378  3  85 69        	sta z80_i
00237A  3  20 D0 2D     	jsr sspria 		; display the new sprite.
00237D  3               
00237D  3  68           	pla			; address of original sprite.
00237E  3  85 68        	sta z80_x
002380  3  68           	pla
002381  3  85 69        	sta z80_i
002383  3               
002383  3  60           	rts
002384  3               
002384  3               ;spcnt:	.byte 0
002384  3               ;spptr:	.word 0			; spawned sprite pointer.
002384  3               ;seed:	.byte 0			; seed for random numbers.
002384  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002388  3  30 30        
00238A  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
00238E  3  30 30        
002390  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002394  3  30 30        
002396  3  00 E4        grbase:	.word ScreenAddr	; graphics base address.
002398  3               
002398  3               ;----------------------------------------------------
002398  3               ; Check y-pos
002398  3               ;----------------------------------------------------
002398  3               
002398  3               checkx:
002398  3  A5 rr        	lda dispy		; y position.
00239A  3  C9 18        	cmp #24			; off screen?
00239C  3  B0 01        	bcs :+
00239E  3  60           	rts			; no, it's okay.
00239F  3               :
00239F  3  68           	pla			; remove return address from stack.
0023A0  3  85 66        	sta z80_l
0023A2  3  68           	pla
0023A3  3  85 67        	sta z80_h
0023A5  3  60           	rts
0023A6  3               
0023A6  3               ;-----------------------------------------------
0023A6  3               ; Displays the current high score.
0023A6  3               ;-----------------------------------------------
0023A6  3               
0023A6  3               dhisc:
0023A6  3  A9 8A        	lda #<hiscor 		; high score text.
0023A8  3  8D DD 23     	sta dscor3+1
0023AB  3  8D F8 23     	sta bscor3+1
0023AE  3  A9 23        	lda #>hiscor
0023B0  3  8D DE 23     	sta dscor3+2
0023B3  3  8D F9 23     	sta bscor3+2
0023B6  3  4C C9 23     	jmp dscor1		; check in printable range then show 6 digits.
0023B9  3               
0023B9  3               ;------------------------------------------------------
0023B9  3               ; Displays the current score.
0023B9  3               ;------------------------------------------------------
0023B9  3               
0023B9  3               ;.repeat 322
0023B9  3               ;  .byte 0
0023B9  3               ;.endrep
0023B9  3               
0023B9  3               dscor:
0023B9  3  A9 84        	lda #<score		; score text.
0023BB  3  8D DD 23     	sta dscor3+1
0023BE  3  8D F8 23     	sta bscor3+1
0023C1  3  A9 23        	lda #>score
0023C3  3  8D DE 23     	sta dscor3+2
0023C6  3  8D F9 23     	sta bscor3+2
0023C9  3               dscor1:
0023C9  3  8C F4 23     	sty tmpscr
0023CC  3  20 72 2B     	jsr preprt		; set up font and print position.
0023CF  3  20 98 23     	jsr checkx		; make sure we're in a printable range.
0023D2  3               
0023D2  3               ;	lda #6			; digits to display.
0023D2  3               ;	sta z80_b
0023D2  3  A5 rr        	lda prtmod		; get print mode.
0023D4  3  F0 03        	beq :+			; standard size text?
0023D6  3  4C F5 23     	jmp bscor0		; no, show double-height.
0023D9  3               :
0023D9  3               dscor0:
0023D9  3               ;	ldy #0
0023D9  3               ;	lda (z80_hl),y 		; fetch character.
0023D9  3  AC F4 23     	ldy tmpscr
0023DC  3               dscor3:
0023DC  3  B9 84 23     	lda score,y
0023DF  3  20 2C 25     	jsr pchar 		; display character.
0023E2  3  E6 rr        	inc dispx		; move along x coordinate
0023E4  3               
0023E4  3               ;	inc z80_l		; next score column.
0023E4  3               ;	bne :+
0023E4  3               ;	inc z80_h
0023E4  3               ;:
0023E4  3  EE F4 23     	inc tmpscr
0023E7  3  C6 63        	dec z80_b
0023E9  3  D0 EE        	bne dscor0 		; repeat for all digits.
0023EB  3               dscor2:
0023EB  3  A5 rr        	lda dispx 		; set up display coordinates.
0023ED  3  85 rr        	sta charx
0023EF  3  A5 rr        	lda dispy
0023F1  3  85 rr        	sta chary
0023F3  3  60           	rts
0023F4  3               
0023F4  3  00           tmpscr:	.byte 0
0023F5  3               ;------------------------------------------------------
0023F5  3               ; Displays the current score in double-height characters.
0023F5  3               ;
0023F5  3               ; Input:
0023F5  3               ;  B  = digit number
0023F5  3               ;  HL = score string
0023F5  3               ;------------------------------------------------------
0023F5  3               
0023F5  3               bscor0:
0023F5  3               ;	ldy #0
0023F5  3               
0023F5  3               ;	lda (z80_hl),y 		; fetch character.
0023F5  3  A4 rr        	ldy tmp
0023F7  3               bscor3:
0023F7  3  B9 84 23     	lda score,y
0023FA  3  20 F9 2A     	jsr bchar 		; display big char.
0023FD  3               
0023FD  3               ;	inc z80_l 		; next score column.
0023FD  3               ;	bne :+
0023FD  3               ;	inc z80_h
0023FD  3               ;:
0023FD  3  E6 rr        	inc tmp
0023FF  3  C6 63        	dec z80_b
002401  3  F0 03        	beq :+
002403  3  4C F5 23     	jmp bscor0 		; repeat for all digits.
002406  3               :
002406  3  4C EB 23     	jmp dscor2 		; tidy up line and column variables.
002409  3               
002409  3               ;-----------------------------------------------------
002409  3               ; Adds number in the hl pair to the score.
002409  3               ;-----------------------------------------------------
002409  3               
002409  3               addsc:
002409  3  A9 85        	lda #<(score+1) 	; ten thousands column.
00240B  3  85 64        	sta z80_e
00240D  3  A9 23        	lda #>(score+1)
00240F  3  85 65        	sta z80_d
002411  3  A9 10        	lda #<10000		; amount to add each time.
002413  3  85 62        	sta z80_c
002415  3  A9 27        	lda #>10000
002417  3  85 63        	sta z80_b
002419  3  20 5D 24     	jsr incsc		; add to score.
00241C  3               
00241C  3  E6 64        	inc z80_e		; thousands column.
00241E  3  D0 02        	bne :+
002420  3  E6 65        	inc z80_d
002422  3               :
002422  3  A9 E8        	lda #<1000		; amount to add each time.
002424  3  85 62        	sta z80_c
002426  3  A9 03        	lda #>1000
002428  3  85 63        	sta z80_b
00242A  3  20 5D 24     	jsr incsc 		; add to score.
00242D  3               
00242D  3  E6 64        	inc z80_e		; hundreds column.
00242F  3  D0 02        	bne :+
002431  3  E6 65        	inc z80_d
002433  3               :
002433  3  A9 64        	lda #<100		; amount to add each time.
002435  3  85 62        	sta z80_c
002437  3  A9 00        	lda #>100
002439  3  85 63        	sta z80_b
00243B  3  20 5D 24     	jsr incsc		; add to score.
00243E  3               
00243E  3  E6 64        	inc z80_e 		; tens column.
002440  3  D0 02        	bne :+
002442  3  E6 65        	inc z80_d
002444  3               :
002444  3  A9 0A        	lda #<10		; amount to add each time.
002446  3  85 62        	sta z80_c
002448  3  A9 00        	lda #>10
00244A  3  85 63        	sta z80_b
00244C  3  20 5D 24     	jsr incsc 		; add to score.
00244F  3               
00244F  3  E6 64        	inc z80_e		; units column.
002451  3  D0 02        	bne :+
002453  3  E6 65        	inc z80_d
002455  3               :
002455  3  A9 01        	lda #<1			; units.
002457  3  85 62        	sta z80_c
002459  3  A9 00        	lda #>1
00245B  3  85 63        	sta z80_b
00245D  3               incsc:
00245D  3  A5 67        	lda z80_h		; store amount to add.
00245F  3  48           	pha
002460  3  A5 66        	lda z80_l
002462  3  48           	pha
002463  3               
002463  3  38           	sec			; subtract from amount to add.
002464  3  A5 66        	lda z80_l
002466  3  E5 62        	sbc z80_c
002468  3  85 66        	sta z80_l
00246A  3  A5 67        	lda z80_h
00246C  3  E5 63        	sbc z80_b
00246E  3  85 67        	sta z80_h
002470  3  90 14        	bcc incsc0		; too much, restore value.
002472  3               
002472  3  68           	pla			; delete the previous amount from the stack.
002473  3  68           	pla
002474  3               
002474  3  A5 65        	lda z80_d 		; store column position.
002476  3  48           	pha
002477  3  A5 64        	lda z80_e
002479  3  48           	pha
00247A  3  20 8D 24     	jsr incsc2		; do the increment.
00247D  3               
00247D  3  68           	pla			; restore column.
00247E  3  85 64        	sta z80_e
002480  3  68           	pla
002481  3  85 65        	sta z80_d
002483  3  4C 5D 24     	jmp incsc		; repeat until all added.
002486  3               
002486  3               incsc0:
002486  3  68           	pla			; restore previous value.
002487  3  85 66        	sta z80_l
002489  3  68           	pla
00248A  3  85 67        	sta z80_h
00248C  3  60           	rts
00248D  3               incsc2:
00248D  3  A0 00        	ldy #0
00248F  3  B1 64        	lda (z80_de),y 		; get amount.
002491  3  18           	clc
002492  3  69 01        	adc #1			; add one to column.
002494  3  91 64        	sta (z80_de),y		; write new column total.
002496  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002498  3  B0 01        	bcs :+
00249A  3  60           	rts			; no, carry on.
00249B  3               :
00249B  3  A9 30        	lda #'0'		; make it zero.
00249D  3  91 64        	sta (z80_de),y		; write new column total.
00249F  3  C6 64        	dec z80_e		; back one column.
0024A1  3  D0 02        	bne :+
0024A3  3  C6 65        	dec z80_d
0024A5  3               :
0024A5  3  4C 8D 24     	jmp incsc2
0024A8  3               
0024A8  3               ;------------------------------------
0024A8  3               ; Add bonus to score and reset bonus
0024A8  3               ;------------------------------------
0024A8  3               
0024A8  3               addbo:
0024A8  3  A2 05        	ldx #5			; last digit.
0024AA  3  18           	clc
0024AB  3               addbo0:
0024AB  3  BD 84 23     	lda score,x		; get score.
0024AE  3  7D 90 23     	adc bonus,x		; add bonus.
0024B1  3  38           	sec			; 0 to 18.
0024B2  3  E9 30        	sbc #48
0024B4  3  48           	pha
0024B5  3  A9 30        	lda #'0'
0024B7  3  9D 90 23     	sta bonus,x
0024BA  3  68           	pla
0024BB  3  C9 3A        	cmp #58
0024BD  3  90 03        	bcc addbo1
0024BF  3  38           	sec
0024C0  3  E9 0A        	sbc #10
0024C2  3               addbo1:
0024C2  3  9D 84 23     	sta score,x		; zeroise bonus.
0024C5  3  CA           	dex			; next digit.
0024C6  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0024C8  3  60           	rts
0024C9  3               
0024C9  3               ;------------------------------------
0024C9  3               ; Swap score and bonus.
0024C9  3               ;------------------------------------
0024C9  3               
0024C9  3               swpsb:
0024C9  3  A2 05        	ldx #5			; digits to add.
0024CB  3               swpsb0:
0024CB  3  BD 84 23     	lda score,x 		; get score digits.
0024CE  3  48           	pha			; save digit
0024CF  3  BD 90 23     	lda bonus,x 		; get bonus digits.
0024D2  3  9D 84 23     	sta score,x		; switch score-bonus
0024D5  3  68           	pla
0024D6  3  9D 90 23     	sta bonus,x
0024D9  3  CA           	dex 			; repeat for all 6 digits.
0024DA  3  10 EF        	bpl swpsb0
0024DC  3  60           	rts
0024DD  3               
0024DD  3               ;----------------------------------------------------
0024DD  3               ; Get print address.
0024DD  3               ;----------------------------------------------------
0024DD  3               
0024DD  3               gprad:
0024DD  3  A5 rr        	lda dispx		; get x
0024DF  3  85 rr        	sta scraddr		; store lb address
0024E1  3               
0024E1  3  2A           	rol a
0024E2  3  26 rr        	rol tmp
0024E4  3  2A           	rol a
0024E5  3  26 rr        	rol tmp
0024E7  3  2A           	rol a
0024E8  3  26 rr        	rol tmp
0024EA  3  A5 rr        	lda tmp
0024EC  3  29 07        	and #7
0024EE  3  85 rr        	sta tmp
0024F0  3  A5 rr        	lda prtmod
0024F2  3  F0 02        	beq :+
0024F4  3  06 rr        	asl tmp
0024F6  3               :
0024F6  3  A5 rr        	lda tmp
0024F8  3  18           	clc
0024F9  3  65 rr        	adc dispy		; get y
0024FB  3  69 E4        	adc #>ScreenAddr		; add $80
0024FD  3  85 rr        	sta scraddr+1		; store hb address
0024FF  3  60           	rts
002500  3               
002500  3               ;--------------------------------------------------------------
002500  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002500  3               ;
002500  3               ; Output:
002500  3               ;  bufaddr = MAP + dispy*32 + dispx
002500  3               ;--------------------------------------------------------------
002500  3               
002500  3               pradd:
002500  3  A5 rr        	lda dispy 		; y coordinate.
002502  3  85 rr        	sta bufaddr
002504  3  A9 00        	lda #0
002506  3  85 rr        	sta bufaddr+1
002508  3  06 rr        	asl bufaddr  		; multiply char by 32
00250A  3  26 rr        	rol bufaddr+1
00250C  3  06 rr        	asl bufaddr
00250E  3  26 rr        	rol bufaddr+1
002510  3  06 rr        	asl bufaddr
002512  3  26 rr        	rol bufaddr+1
002514  3  06 rr        	asl bufaddr
002516  3  26 rr        	rol bufaddr+1
002518  3  06 rr        	asl bufaddr
00251A  3  26 rr        	rol bufaddr+1
00251C  3  18           	clc			; add address of MAP graphics.
00251D  3  A5 rr        	lda bufaddr
00251F  3  65 rr        	adc dispx
002521  3  69 00        	adc #<MAP
002523  3  85 rr        	sta bufaddr
002525  3  A5 rr        	lda bufaddr+1
002527  3  69 DD        	adc #>MAP
002529  3  85 rr        	sta bufaddr+1
00252B  3  60           	rts
00252C  3               
00252C  3               ;----------------------------------------------------
00252C  3               ; Display character in A at dispx,dispy.
00252C  3               ;
00252C  3               ; Input:
00252C  3               ;  A 	   = character to print
00252C  3               ;----------------------------------------------------
00252C  3               
00252C  3               pchar:
00252C  3  85 rr        	sta fntaddr
00252E  3  A9 00        	lda #0
002530  3  85 rr        	sta fntaddr+1
002532  3  06 rr        	asl fntaddr  		; multiply char by 8.
002534  3  26 rr        	rol fntaddr+1
002536  3  06 rr        	asl fntaddr
002538  3  26 rr        	rol fntaddr+1
00253A  3  06 rr        	asl fntaddr
00253C  3  26 rr        	rol fntaddr+1
00253E  3               
00253E  3  A5 rr        	lda fntaddr
002540  3  18           	clc
002541  3  69 45        	adc #<(FONT-256)
002543  3  85 rr        	sta fntaddr		; that's the low byte.
002545  3  A5 rr        	lda fntaddr+1
002547  3  69 92        	adc #>(FONT-256)
002549  3  85 rr        	sta fntaddr+1		; add displacement.
00254B  3               pchark:
00254B  3  20 DD 24     	jsr gprad		; get screen address.
00254E  3  A2 07        	ldx #7			; lines to write.
002550  3               pchar0:
002550  3  A0 00        	ldy #0
002552  3  B1 rr        	lda (fntaddr),y 	; get image byte.
002554  3  BC 63 25     	ldy scrtab,x		; Get rowoffset
002557  3               .if iflag
002557  3               	eor #$ff
002557  3               .endif
002557  3  91 rr        	sta (scraddr),y 	; copy to screen.
002559  3  E6 rr        	inc fntaddr		; next image byte.
00255B  3  D0 02        	bne :+
00255D  3  E6 rr        	inc fntaddr+1
00255F  3               :
00255F  3  CA           	dex			; next screen row down.
002560  3  10 EE        	bpl pchar0		; repeat.
002562  3  60           	rts
002563  3               
002563  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002567  3  60 40 20 00  
00256B  3               
00256B  3               ;----------------------------------------------
00256B  3               
00256B  3               ; Print attributes, properties and pixels.
00256B  3               ;
00256B  3               ; Input:
00256B  3               ;  A	= tile number
00256B  3               ;----------------------------------------------
00256B  3               
00256B  3               ;.repeat 294
00256B  3               ;  .byte 0
00256B  3               ;.endrep
00256B  3               
00256B  3               pbpattr:			; entry PUTBLOCK command
00256B  3  A4 rr        	ldy charx
00256D  3  84 rr        	sty dispx
00256F  3  A4 rr        	ldy chary
002571  3  84 rr        	sty dispy
002573  3               pattr:
002573  3               .if aflag
002573  3               	pha
002573  3               	jsr wbloc		; save blockinfo
002573  3               	pla
002573  3               .endif
002573  3               
002573  3               pattr2:
002573  3  85 63        	sta z80_b		; store cell in b register for now.
002575  3  AA           	tax
002576  3  BD 51 57     	lda bprop,x 		; block properties.
002579  3  85 62        	sta z80_c
00257B  3  C9 08        	cmp #COLECT
00257D  3  D0 05        	bne :+
00257F  3  A5 63        	lda z80_b
002581  3  8D 92 25     	sta colpatt
002584  3               :
002584  3  20 00 25     	jsr pradd 		; get property buffer address.
002587  3  A5 62        	lda z80_c
002589  3  A0 00        	ldy #0
00258B  3  91 rr        	sta (bufaddr),y 	; write property.
00258D  3  A5 63        	lda z80_b 		; restore cell.
00258F  3  4C 93 25     	jmp panp
002592  3               ; Print attributes, no properties.
002592  3               
002592  3               ;.repeat 263
002592  3               ; .byte 0
002592  3               ;.endrep
002592  3               
002592  3  00           colpatt:	.byte 0
002593  3               
002593  3               panp:
002593  3  85 64        	sta z80_e		; displacement in e.
002595  3  A9 00        	lda #0
002597  3  85 65        	sta z80_d		; no high byte.
002599  3  06 64        	asl z80_e  		; multiply char by 8.
00259B  3  26 65        	rol z80_d
00259D  3  06 64        	asl z80_e
00259F  3  26 65        	rol z80_d
0025A1  3  06 64        	asl z80_e
0025A3  3  26 65        	rol z80_d
0025A5  3  18           	clc
0025A6  3  A5 64        	lda z80_e
0025A8  3  69 F9        	adc #<chgfx 		; address of graphics.
0025AA  3  85 rr        	sta tileaddr
0025AC  3  A5 65        	lda z80_d
0025AE  3  69 53        	adc #>chgfx
0025B0  3  85 rr        	sta tileaddr+1
0025B2  3  20 DD 24     	jsr gprad 		; get screen address.
0025B5  3  A2 07        	ldx #7			; number of pixel rows to write.
0025B7  3               panp0:
0025B7  3  A0 00        	ldy #0
0025B9  3  B1 rr        	lda (tileaddr),y 	; get image byte.
0025BB  3               .if iflag
0025BB  3               	eor #$ff		; Invert
0025BB  3               .endif
0025BB  3  BC 63 25     	ldy scrtab,x
0025BE  3  91 rr        	sta (scraddr),y 	; copy to screen.
0025C0  3  E6 rr        	inc tileaddr 		; next image byte.
0025C2  3  D0 02        	bne :+
0025C4  3  E6 rr        	inc tileaddr+1
0025C6  3               :
0025C6  3  CA           	dex	 		; repeat for 8 pixel rows.
0025C7  3  10 EE        	bpl panp0
0025C9  3  E6 rr        	inc dispx 		; move along one.
0025CB  3  E6 rr        	inc charx
0025CD  3  60           	rts
0025CE  3               
0025CE  3               ;----------------------------------------------
0025CE  3               ; Write block
0025CE  3               ;----------------------------------------------
0025CE  3               
0025CE  3               .if aflag
0025CE  3               wbloc:
0025CE  3               	ldy #3
0025CE  3               	sta (pbptr),y		; store block number
0025CE  3               	dey
0025CE  3               	lda dispx
0025CE  3               	sta (pbptr),y		; write x position of block.
0025CE  3               	dey
0025CE  3               	lda dispy
0025CE  3               	sta (pbptr),y		; write y position of block.
0025CE  3               	dey
0025CE  3               	lda scno
0025CE  3               	sta (pbptr),y		; write screen.
0025CE  3               	clc			; point to next free location
0025CE  3               	lda pbptr
0025CE  3               	adc #4
0025CE  3               	sta pbptr
0025CE  3               	bcc :+
0025CE  3               	inc pbptr+1
0025CE  3               :
0025CE  3               	rts
0025CE  3               .endif
0025CE  3               
0025CE  3               ;----------------------------------------------
0025CE  3               ; Print character pixels, no more.
0025CE  3               ;
0025CE  3               ; Input:
0025CE  3               ;  A	= character to print
0025CE  3               ;----------------------------------------------
0025CE  3               
0025CE  3               pchr:
0025CE  3  20 2C 25     	jsr pchar 		; show character in accumulator.
0025D1  3  E6 rr        	inc dispx		; move along one.
0025D3  3  60           	rts
0025D4  3               
0025D4  3               ;----------------------------------------------------
0025D4  3               ; Shifter sprite routine for objects.
0025D4  3               ;----------------------------------------------------
0025D4  3               
0025D4  3               .if oflag
0025D4  3               sprit7:
0025D4  3               	lda z80_b
0025D4  3               	beq sprit0
0025D4  3               	sta z80_a
0025D4  3               sprit3:
0025D4  3               	lsr spr			; shift into position.
0025D4  3               	ror spr+1
0025D4  3               	ror spr+2
0025D4  3               	dec z80_a		; one less iteration.
0025D4  3               	bne sprit3
0025D4  3               sprit0:
0025D4  3               	rts 			; now apply to screen.
0025D4  3               
0025D4  3               ;----------------------------------------------------
0025D4  3               ; Draw sprite
0025D4  3               ;----------------------------------------------------
0025D4  3               
0025D4  3               sprite:
0025D4  3               	stx xtmp		; Save X-reg
0025D4  3               	jsr scadd 		; get screen address in scraddr.
0025D4  3               
0025D4  3               	lda dispx 		; x position.
0025D4  3               	and #7 			; position straddling cells.
0025D4  3               	sta z80_b		; store in b register.
0025D4  3               
0025D4  3               	lda z80_l		; store sprite graphic address.
0025D4  3               	sta sprit1+1
0025D4  3               	sta sprit2+1
0025D4  3               	lda z80_h
0025D4  3               	sta sprit1+2
0025D4  3               	sta sprit2+2
0025D4  3               
0025D4  3               	ldx #0			; pixel height.
0025D4  3               	ldy #0
0025D4  3               sprit1:
0025D4  3               	lda objdta,x		; fetch first byte.
0025D4  3               	sta spr
0025D4  3               	inx
0025D4  3               sprit2:
0025D4  3               	lda objdta,x
0025D4  3               	sta spr+1
0025D4  3               
0025D4  3               	lda #0
0025D4  3               	sta spr+2
0025D4  3               	jsr sprit7		; shift sprite
0025D4  3               
0025D4  3               	dex
0025D4  3               	lda spr			; fetch graphic.
0025D4  3               	ldy spritetab,x
0025D4  3               	eor (scraddr),y		; merge with screen image.
0025D4  3               	sta (scraddr),y		; write to screen.
0025D4  3               	inx			; next screen byte.
0025D4  3               
0025D4  3               	lda spr+1		; fetch graphic.
0025D4  3               	ldy spritetab,x
0025D4  3               	eor (scraddr),y		; merge with screen image.
0025D4  3               	sta (scraddr),y		; write to screen.
0025D4  3               	iny
0025D4  3               
0025D4  3               	lda spr+2		; fetch graphic.
0025D4  3               	eor (scraddr),y		; merge with screen image.
0025D4  3               	sta (scraddr),y		; write to screen.
0025D4  3               
0025D4  3               	inx			; next source byte.
0025D4  3               	cpx #16
0025D4  3               	bne :+
0025D4  3               	inc scraddr+1
0025D4  3               :
0025D4  3               	cpx #32
0025D4  3               	bne sprit1		; repeat
0025D4  3               
0025D4  3               	ldx xtmp		; retreive X-reg
0025D4  3               	rts
0025D4  3               
0025D4  3               spritetab:
0025D4  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0025D4  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0025D4  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0025D4  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0025D4  3               
0025D4  3               spr:	.byte 0,0,0
0025D4  3               
0025D4  3               ;xtmp:	.byte 0
0025D4  3               .endif
0025D4  3               
0025D4  3               ;-----------------------------------------------------------
0025D4  3               ; Get room address.
0025D4  3               ;-----------------------------------------------------------
0025D4  3               
0025D4  3               ;.repeat 273
0025D4  3               ;  .byte 0
0025D4  3               ;.endrep
0025D4  3               
0025D4  3               groom:
0025D4  3  A6 rr        	ldx scno 		; screen number.
0025D6  3  A0 00        	ldy #0
0025D8  3               groomx:
0025D8  3  A9 9A        	lda #<scdat 		; pointer to screens.
0025DA  3  85 66        	sta z80_l
0025DC  3  A9 83        	lda #>scdat
0025DE  3  85 67        	sta z80_h
0025E0  3               groom1:
0025E0  3  E0 00        	cpx #0			; is it the first one?
0025E2  3  F0 15        	beq groom0 		; no more screens to skip.
0025E4  3               
0025E4  3  18           	clc
0025E5  3  A5 66        	lda z80_l
0025E7  3  79 9A 83     	adc scdat,y 		; low byte of screen size.
0025EA  3  85 66        	sta z80_l
0025EC  3  C8           	iny			; point to high byte.
0025ED  3  A5 67        	lda z80_h
0025EF  3  79 9A 83     	adc scdat,y 		; high byte of screen size.
0025F2  3  85 67        	sta z80_h
0025F4  3  C8           	iny			; next address.
0025F5  3               
0025F5  3  CA           	dex 			; one less iteration.
0025F6  3  4C E0 25     	jmp groom1 		; loop until we reach the end.
0025F9  3               groom0:
0025F9  3  AD 96 91     	lda numsc 		; add displacement.
0025FC  3  0A           	asl a
0025FD  3  18           	clc			; add double displacement to address.
0025FE  3  65 66        	adc z80_l
002600  3  85 66        	sta z80_l
002602  3  A5 67        	lda z80_h
002604  3  69 00        	adc #0
002606  3  85 67        	sta z80_h
002608  3  60           	rts
002609  3               
002609  3               ;-----------------------------------------------------------
002609  3               ; Draw present room.
002609  3               ;-----------------------------------------------------------
002609  3               
002609  3               droom:
002609  3  AD 26 20     	lda wintop 		; window top.
00260C  3  85 rr        	sta dispy		; set cursor y position.
00260E  3               droom2:
00260E  3  20 D4 25     	jsr groom 		; get address of current room.
002611  3  A9 00        	lda #0	 		; zero in accumulator.
002613  3  85 rr        	sta comcnt 		; reset compression counter.
002615  3  AD 28 20     	lda winhgt 		; height of window.
002618  3  85 rr        	sta rrow		; set row counter
00261A  3               droom0:
00261A  3  AD 27 20     	lda winlft 		; window left edge.
00261D  3  85 rr        	sta dispx 		; set cursor x position.
00261F  3  AD 29 20     	lda winwid 		; width of window.
002622  3  85 rr        	sta rcol		; set column counter
002624  3               droom1:
002624  3  20 35 26     	jsr flbyt 		; decompress next byte on the fly.
002627  3  20 73 25     	jsr pattr2 		; show attributes and block.
00262A  3  C6 rr        	dec rcol		; one less column.
00262C  3  D0 F6        	bne droom1 		; repeat for entire line.
00262E  3  E6 rr        	inc dispy		; move down one line.
002630  3  C6 rr        	dec rrow 		; one less row.
002632  3  D0 E6        	bne droom0 		; repeat for all rows.
002634  3  60           	rts
002635  3               
002635  3               ;rcol:	.byte 0
002635  3               ;rrow:	.byte 0
002635  3               
002635  3               ;----------------------------------------------
002635  3               ; Decompress bytes on-the-fly.
002635  3               ;----------------------------------------------
002635  3               
002635  3               flbyt:
002635  3  A5 rr        	lda comcnt 		; compression counter.
002637  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002639  3               
002639  3  A0 00        	ldy #0
00263B  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
00263D  3  E6 66        	inc z80_l 		; point to next cell.
00263F  3  D0 02        	bne :+
002641  3  E6 67        	inc z80_h
002643  3               :
002643  3  C9 FF        	cmp #255 		; is this byte a control code?
002645  3  F0 01        	beq :+
002647  3  60           	rts 			; no, this byte is uncompressed.
002648  3               :
002648  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
00264A  3  85 rr        	sta combyt 		; set up the type.
00264C  3  E6 66        	inc z80_l 		; point to quantity.
00264E  3  D0 02        	bne :+
002650  3  E6 67        	inc z80_h
002652  3               :
002652  3  B1 66        	lda (z80_hl),y 		; get quantity.
002654  3  E6 66        	inc z80_l 		; point to next byte.
002656  3  D0 02        	bne :+
002658  3  E6 67        	inc z80_h
00265A  3               :
00265A  3               flbyt1:
00265A  3  85 rr        	sta comcnt 		; store new quantity.
00265C  3  C6 rr        	dec comcnt		; one less.
00265E  3  A5 rr        	lda combyt 		; byte to expand.
002660  3  60           	rts
002661  3               
002661  3               ;combyt:	.byte 0			; byte type compressed.
002661  3               ;comcnt:	.byte 0			; compression counter.
002661  3               
002661  3               ;------------------------------------------
002661  3               ; Ladder down check.
002661  3               ;
002661  3               ; Input:
002661  3               ;  IX = sprite pointer
002661  3               ;------------------------------------------
002661  3               
002661  3               .if lflag
002661  3               laddd:
002661  3  A0 09        	ldy #9
002663  3  B1 68        	lda (z80_ix),y		; x coordinate.
002665  3  85 rr        	sta dispx
002667  3               
002667  3  A0 08        	ldy #8
002669  3  B1 68        	lda (z80_ix),y		; y coordinate.
00266B  3  29 FE        	and #254		; make it even.
00266D  3  91 68        	sta (z80_ix),y 		; reset it.
00266F  3  18           	clc 			; look down 16 pixels.
002670  3               numsp5:
002670  3  69 10        	adc #SPR_HGT
002672  3  85 rr        	sta dispy		; coords in dispx,dispy.
002674  3  4C 8A 26     	jmp laddv
002677  3               
002677  3               ;------------------------------------------
002677  3               ; Ladder up check.
002677  3               ;
002677  3               ; Input:
002677  3               ;  IX = sprite pointer
002677  3               ;
002677  3               ; Output:
002677  3               ;  A  = 0 is ok, A <>0 is not ok
002677  3               ;------------------------------------------
002677  3               
002677  3               laddu:
002677  3  A0 09        	ldy #9
002679  3  B1 68        	lda (z80_ix),y		; x coordinate.
00267B  3  85 rr        	sta dispx
00267D  3               
00267D  3  A0 08        	ldy #8
00267F  3  B1 68        	lda (z80_ix),y		; y coordinate.
002681  3  29 FE        	and #254 		; make it even.
002683  3  91 68        	sta (z80_ix),y		; reset it.
002685  3  18           	clc 			; look 2 pixels above feet.
002686  3               numsp6:
002686  3  69 0E        	adc #SPR_HGT-2
002688  3  85 rr        	sta dispy		; coords in dispx,dispy.
00268A  3               laddv:
00268A  3  20 6C 29     	jsr tstbl 		; get map address.
00268D  3  20 A3 28     	jsr ldchk 		; standard ladder check.
002690  3  F0 01        	beq :+
002692  3  60           	rts 			; no way through.
002693  3               :
002693  3  E6 rr        	inc bufaddr 		; look right one cell.
002695  3  D0 02        	bne :+
002697  3  E6 rr        	inc bufaddr+1
002699  3               :
002699  3  20 A3 28     	jsr ldchk 		; do the check.
00269C  3  F0 01        	beq :+
00269E  3  60           	rts 			; impassable.
00269F  3               :
00269F  3  A5 rr        	lda dispx 		; y coordinate.
0026A1  3  29 07        	and #7 			; position straddling block cells.
0026A3  3  D0 01        	bne :+
0026A5  3  60           	rts 			; no more checks needed.
0026A6  3               :
0026A6  3  E6 rr        	inc bufaddr 		; look to third cell.
0026A8  3  D0 02        	bne :+
0026AA  3  E6 rr        	inc bufaddr+1
0026AC  3               :
0026AC  3  20 A3 28     	jsr ldchk 		; do the check.
0026AF  3  60           	rts  			; return with zero flag set accordingly.
0026B0  3               .endif
0026B0  3               
0026B0  3               ;---------------------------------------------------------
0026B0  3               ; Can go up check.
0026B0  3               ;
0026B0  3               ; Input:
0026B0  3               ;  IX = sprite pointer
0026B0  3               ;
0026B0  3               ; Output:
0026B0  3               ;  A  = 0 is ok, A <>0 is not ok
0026B0  3               ;---------------------------------------------------------
0026B0  3               
0026B0  3               cangu:
0026B0  3  A0 09        	ldy #9
0026B2  3  B1 68        	lda (z80_ix),y		; x coordinate.
0026B4  3  85 rr        	sta dispx
0026B6  3  A0 08        	ldy #8
0026B8  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0026BA  3  38           	sec
0026BB  3  E9 02        	sbc #2
0026BD  3  85 rr        	sta dispy		; coords in dispx,dispy.
0026BF  3  20 6C 29     	jsr tstbl 		; get map address.
0026C2  3  20 72 28     	jsr lrchk 		; standard left/right check.
0026C5  3  F0 01        	beq :+
0026C7  3  60           	rts			; no way through.
0026C8  3               :
0026C8  3  E6 rr        	inc bufaddr		; look right one cell.
0026CA  3  D0 02        	bne :+
0026CC  3  E6 rr        	inc bufaddr+1
0026CE  3               :
0026CE  3  20 72 28     	jsr lrchk 		; do the check.
0026D1  3  F0 01        	beq :+
0026D3  3  60           	rts			; impassable.
0026D4  3               :
0026D4  3  A5 rr        	lda dispx		; x coordinate.
0026D6  3  29 07        	and #7			; position straddling block cells.
0026D8  3  D0 01        	bne :+
0026DA  3  60           	rts			; no more checks needed.
0026DB  3               :
0026DB  3  E6 rr        	inc bufaddr		; look to third cell.
0026DD  3  D0 02        	bne :+
0026DF  3  E6 rr        	inc bufaddr+1
0026E1  3               :
0026E1  3  20 72 28     	jsr lrchk		; do the check.
0026E4  3  60           	rts 			; return with zero flag set accordingly.
0026E5  3               
0026E5  3               ;---------------------------------------------------------
0026E5  3               ; Can go down check.
0026E5  3               ;
0026E5  3               ; Input:
0026E5  3               ;  IX = sprite pointer
0026E5  3               ;
0026E5  3               ; Output:
0026E5  3               ;  A  = 0 is ok, A <>0 is not ok
0026E5  3               ;---------------------------------------------------------
0026E5  3               
0026E5  3               ;.repeat 264
0026E5  3               ;  .byte 0
0026E5  3               ;.endrep
0026E5  3               
0026E5  3               cangd:
0026E5  3  A0 09        	ldy #9
0026E7  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0026E9  3  85 rr        	sta dispx
0026EB  3  A0 08        	ldy #8
0026ED  3  B1 68        	lda (z80_ix),y		; y coordinate.
0026EF  3  18           	clc
0026F0  3               numsp3:
0026F0  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
0026F2  3  85 rr        	sta dispy		; coords in dispx,dispy.
0026F4  3  20 6C 29     	jsr tstbl 		; get map address.
0026F7  3  20 87 28     	jsr plchk 		; block, platform check.
0026FA  3  F0 01        	beq :+
0026FC  3  60           	rts			; no way through.
0026FD  3               :
0026FD  3  E6 rr        	inc bufaddr		; look right one cell.
0026FF  3  D0 02        	bne :+
002701  3  E6 rr        	inc bufaddr+1
002703  3               :
002703  3  20 87 28     	jsr plchk		; block, platform check.
002706  3  F0 01        	beq :+
002708  3  60           	rts			; impassable.
002709  3               :
002709  3  A5 rr        	lda dispx		; x coordinate.
00270B  3  29 07        	and #7			; position straddling block cells.
00270D  3  D0 01        	bne :+
00270F  3  60           	rts			; no more checks needed.
002710  3               :
002710  3  E6 rr        	inc bufaddr		; look to third cell.
002712  3  D0 02        	bne :+
002714  3  E6 rr        	inc bufaddr+1
002716  3               :
002716  3  20 87 28     	jsr plchk		; block, platform check.
002719  3  60           	rts			; return with zero flag set accordingly.
00271A  3               
00271A  3               ;---------------------------------------------------------
00271A  3               ; Can go left check.
00271A  3               ;
00271A  3               ; Input:
00271A  3               ;  IX = sprite pointer
00271A  3               ;
00271A  3               ; Output:
00271A  3               ;  A  = 0 is ok, A <>0 is not ok
00271A  3               ;---------------------------------------------------------
00271A  3               
00271A  3               cangl:
00271A  3  A0 08        	ldy #8
00271C  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00271E  3  85 rr        	sta dispy
002720  3  A0 09        	ldy #9
002722  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002724  3  38           	sec
002725  3  E9 02        	sbc #2			; look left 2 pixels.
002727  3  85 rr        	sta dispx		; coords in dispx,dispy.
002729  3  4C 4B 28     	jmp cangh		; test if we can go there.
00272C  3               
00272C  3               ;---------------------------------------------------------
00272C  3               ; Can go right check.
00272C  3               ;
00272C  3               ; Input:
00272C  3               ;  IX = sprite pointer
00272C  3               ;
00272C  3               ; Output:
00272C  3               ;  A  = 0 is ok, A <>0 is not ok
00272C  3               ;---------------------------------------------------------
00272C  3               
00272C  3  00 00 00 00  .repeat 272
002730  3  00 00 00 00  
002734  3  00 00 00 00  
00283C  3                 .byte 0
00283C  3               .endrep
00283C  3               
00283C  3               cangr:
00283C  3  A0 08        	ldy #8
00283E  3  B1 68        	lda (z80_ix),y		; y coordinate.
002840  3  85 rr        	sta dispy
002842  3  A0 09        	ldy #9
002844  3  B1 68        	lda (z80_ix),y		; x coordinate.
002846  3  18           	clc
002847  3  69 10        	adc #16			; look right 16 pixels.
002849  3  85 rr        	sta dispx		; coords in dispx,dispy.
00284B  3               cangh:
00284B  3               cangh2:
00284B  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
00284D  3  85 63        	sta z80_b
00284F  3  A5 rr        	lda dispy		; y position.
002851  3  29 07        	and #7			; does x straddle cells?
002853  3  D0 02        	bne cangh0		; yes, loop counter is good.
002855  3  C6 63        	dec z80_b		; one less row to write.
002857  3               cangh0:
002857  3  20 6C 29     	jsr tstbl		; get map address.
00285A  3               cangh1:
00285A  3  20 72 28     	jsr lrchk		; standard left/right check.
00285D  3  F0 01        	beq :+
00285F  3  60           	rts			; no way through.
002860  3               :
002860  3  48           	pha
002861  3  18           	clc
002862  3  A5 rr        	lda bufaddr
002864  3  69 20        	adc #32			; look down.
002866  3  85 rr        	sta bufaddr
002868  3  90 02        	bcc :+
00286A  3  E6 rr        	inc bufaddr+1
00286C  3               :
00286C  3  68           	pla
00286D  3               
00286D  3  C6 63        	dec z80_b
00286F  3  D0 E9        	bne cangh1
002871  3  60           	rts
002872  3               
002872  3               ;-------------------------------------
002872  3               ; Check left/right movement is okay.
002872  3               ;
002872  3               ; Input:
002872  3               ;  bufaddr = MAP + x/8 + y/8*32
002872  3               ;
002872  3               ; Output:
002872  3               ;  A  = 0 is ok, A <>0 is not ok
002872  3               ;-------------------------------------
002872  3               
002872  3               lrchk:
002872  3  A0 00        	ldy #0
002874  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002876  3  C9 02        	cmp #WALL 		; is it passable?
002878  3  F0 0A        	beq lrchkx		; no.
00287A  3               
00287A  3  C9 04        	cmp #FODDER		; fodder has to be dug.
00287C  3  F0 06        	beq lrchkx		; not passable.
00287E  3  A9 00        	lda #0
002880  3  60           	rts
002881  3               
002881  3               ;--------------------------------------------------------------
002881  3               ; Called by mmenu
002881  3               ;--------------------------------------------------------------
002881  3               
002881  3               always:
002881  3  A9 FF        	lda #255		; report it as okay.
002883  3  60           	rts
002884  3               
002884  3               lrchkx:
002884  3  A9 01        	lda #1 			; reset all bits.
002886  3  60           	rts
002887  3               
002887  3               
002887  3               ;--------------------------------------------------------------
002887  3               ; Check platform or solid item is not in way.
002887  3               ;
002887  3               ; Input:
002887  3               ;  bufaddr = MAP + x/8 + y/8*32
002887  3               ;
002887  3               ; Output:
002887  3               ;  A  = 0 is ok, A <>0 is not ok
002887  3               ;--------------------------------------------------------------
002887  3               
002887  3               plchk:
002887  3  A0 00        	ldy #0
002889  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
00288B  3  C9 02        	cmp #WALL 		; is it passable?
00288D  3  F0 F5        	beq lrchkx		; no.
00288F  3               .if pflag .or dflag
00288F  3               	cmp #FODDER		; fodder has to be dug.
00288F  3               	beq lrchkx		; not passable.
00288F  3               .endif
00288F  3  C9 01        	cmp #PLATFM		; platform is solid.
002891  3  F0 07        	beq plchkx		; not passable.
002893  3               .if lflag
002893  3  C9 03        	cmp #LADDER		; is it a ladder?
002895  3  F0 ED        	beq lrchkx		; on ladder, deny movement.
002897  3               .endif
002897  3               plchk0:
002897  3  A9 00        	lda #0			; report as ok
002899  3  60           	rts
00289A  3               plchkx:
00289A  3  A5 rr        	lda dispy		; x coordinate.
00289C  3  29 07        	and #7			; position straddling blocks.
00289E  3  F0 E4        	beq lrchkx		; on platform, deny movement.
0028A0  3  4C 97 28     	jmp plchk0
0028A3  3               
0028A3  3               ;--------------------------------------------------------------
0028A3  3               ; Check ladder is available.
0028A3  3               ;
0028A3  3               ; Input:
0028A3  3               ;  bufaddr = MAP + x/8 + y/8*32
0028A3  3               ;
0028A3  3               ; Output:
0028A3  3               ;  A  = 0 is ok, A <>0 is not ok
0028A3  3               ;--------------------------------------------------------------
0028A3  3               
0028A3  3               .if lflag
0028A3  3               ldchk:
0028A3  3  A0 00        	ldy #0
0028A5  3  B1 rr        	lda (bufaddr),y 	; fetch cell.
0028A7  3  C9 03        	cmp #LADDER 		; is it a ladder?
0028A9  3  F0 03        	beq :+
0028AB  3  A9 01        	lda #1
0028AD  3  60           	rts  			; return with zero flag set accordingly.
0028AE  3               :
0028AE  3  A9 00        	lda #0
0028B0  3  60           	rts
0028B1  3               .endif
0028B1  3               
0028B1  3               ;--------------------------------------------------------------
0028B1  3               ; Get collectables.
0028B1  3               ;--------------------------------------------------------------
0028B1  3               
0028B1  3               .if cflag
0028B1  3               getcol:
0028B1  3                       lda #COLECT             ; collectable blocks.
0028B1  3                       sta z80_b
0028B1  3                       jsr tded                ; test for collectable blocks.
0028B1  3                       cmp z80_b               ; did we find one?
0028B1  3                       beq :+
0028B1  3                       rts                     ; none were found, job done.
0028B1  3               :
0028B1  3                       jsr gtblk               ; get block.
0028B1  3                       jsr evnt20              ; collected block event.
0028B1  3                       jmp getcol              ; repeat until none left.
0028B1  3               
0028B1  3               ; Get collectable block.
0028B1  3               
0028B1  3               gtblk:
0028B1  3               	ldy #0
0028B1  3               	lda (bufaddr),y
0028B1  3               	sta z80_a
0028B1  3                       lda #0
0028B1  3                       sta (bufaddr),y		; make it empty now.
0028B1  3               
0028B1  3               	lda bufaddr		; set dispx
0028B1  3               	and #31
0028B1  3               	sta dispx
0028B1  3               
0028B1  3               	lda bufaddr+1		; Set dispy
0028B1  3               	sec
0028B1  3               	sbc #>MAP
0028B1  3               	sta bufaddr+1
0028B1  3               	asl bufaddr
0028B1  3               	rol bufaddr+1
0028B1  3               	asl bufaddr
0028B1  3               	rol bufaddr+1
0028B1  3               	asl bufaddr
0028B1  3               	rol bufaddr+1
0028B1  3               	lda bufaddr+1
0028B1  3               	sta dispy
0028B1  3               
0028B1  3               	lda colpatt		; get blocknr
0028B1  3               	sta z80_e		; displacement in e.
0028B1  3               	lda #0
0028B1  3               	sta z80_d		; no high byte.
0028B1  3               	asl z80_e  		; multiply char by 8.
0028B1  3               	rol z80_d
0028B1  3               	asl z80_e
0028B1  3               	rol z80_d
0028B1  3               	asl z80_e
0028B1  3               	rol z80_d
0028B1  3               	clc
0028B1  3               	lda z80_e
0028B1  3               	adc #<chgfx 		; address of graphics.
0028B1  3               	sta tileaddr
0028B1  3               	lda z80_d
0028B1  3               	adc #>chgfx
0028B1  3               	sta tileaddr+1
0028B1  3               	jsr gprad 		; get screen address.
0028B1  3               	ldx #7			; number of pixel rows to write.
0028B1  3               gtblk0:
0028B1  3               	ldy #0
0028B1  3               	lda (tileaddr),y 	; get image byte.
0028B1  3               	ldy scrtab,x
0028B1  3               	eor (scraddr),y 	; XOR tile on screen
0028B1  3               	sta (scraddr),y 	; copy to screen.
0028B1  3               	inc tileaddr 		; next image byte.
0028B1  3               	bne :+
0028B1  3               	inc tileaddr+1
0028B1  3               :
0028B1  3               	dex	 		; repeat for 8 pixel rows.
0028B1  3               	bpl gtblk0
0028B1  3               	rts
0028B1  3               .endif
0028B1  3               
0028B1  3               ;--------------------------------------------------------------
0028B1  3               ; Touched deadly block check.
0028B1  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
0028B1  3               ;
0028B1  3               ; Input:
0028B1  3               ;  IX = sprite address
0028B1  3               ;
0028B1  3               ; Output:
0028B1  3               ;  A  = 0 is ok, A=5 is not ok
0028B1  3               ;--------------------------------------------------------------
0028B1  3               
0028B1  3               tded:
0028B1  3  A0 08        	ldy #8
0028B3  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0028B5  3  85 rr        	sta dispy
0028B7  3  C8           	iny
0028B8  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0028BA  3  85 rr        	sta dispx		; coords in dispx,dispy.
0028BC  3  20 6C 29     	jsr tstbl		; get map address.
0028BF  3  48           	pha
0028C0  3  A9 1F        	lda #31			; default distance to next line down.
0028C2  3  85 64        	sta z80_e
0028C4  3  68           	pla
0028C5  3  C5 63        	cmp z80_b		; is this the required block?
0028C7  3  D0 01        	bne :+
0028C9  3  60           	rts			; yes.
0028CA  3               :
0028CA  3  E6 rr        	inc bufaddr 		; next cell.
0028CC  3  D0 02        	bne :+
0028CE  3  E6 rr        	inc bufaddr+1
0028D0  3               :
0028D0  3  A0 00        	ldy #0
0028D2  3  B1 rr        	lda (bufaddr),y		; fetch type.
0028D4  3  C5 63        	cmp z80_b 		; is this deadly/custom?
0028D6  3  D0 01        	bne :+
0028D8  3  60           	rts			; yes.
0028D9  3               :
0028D9  3  A5 rr        	lda dispx		; horizontal position.
0028DB  3  85 62        	sta z80_c 		; store column in c register.
0028DD  3  29 07        	and #7			; is it straddling cells?
0028DF  3  D0 03        	bne :+
0028E1  3  4C F5 28     	jmp tded0		; no.
0028E4  3               :
0028E4  3  E6 rr        	inc bufaddr 		; last cell.
0028E6  3  D0 02        	bne :+
0028E8  3  E6 rr        	inc bufaddr+1
0028EA  3               :
0028EA  3  A0 00        	ldy #0
0028EC  3  B1 rr        	lda (bufaddr),y 	; fetch type.
0028EE  3  C5 63        	cmp z80_b		; is this the block?
0028F0  3  D0 01        	bne :+
0028F2  3  60           	rts			; yes.
0028F3  3               :
0028F3  3  C6 64        	dec z80_e		; one less cell to next row down.
0028F5  3               tded0:
0028F5  3  18           	clc 			; point to next row.
0028F6  3  A5 rr        	lda bufaddr
0028F8  3  65 64        	adc z80_e
0028FA  3  85 rr        	sta bufaddr
0028FC  3  90 02        	bcc :+
0028FE  3  E6 rr        	inc bufaddr+1
002900  3               :
002900  3  A0 00        	ldy #0
002902  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
002904  3  C5 63        	cmp z80_b		; is this fatal?
002906  3  D0 01        	bne :+
002908  3  60           	rts			; yes.
002909  3               :
002909  3  E6 rr        	inc bufaddr 		; next cell.
00290B  3  D0 02        	bne :+
00290D  3  E6 rr        	inc bufaddr+1
00290F  3               :
00290F  3  A0 00        	ldy #0
002911  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002913  3  C5 63        	cmp z80_b		; is this fatal?
002915  3  D0 01        	bne :+
002917  3  60           	rts			; yes.
002918  3               :
002918  3  A5 62        	lda z80_c		; horizontal position.
00291A  3  29 07        	and #7			; is it straddling cells?
00291C  3  D0 03        	bne :+
00291E  3  4C 30 29     	jmp tded1 		; no.
002921  3               :
002921  3  E6 rr        	inc bufaddr		; last cell.
002923  3  D0 02        	bne :+
002925  3  E6 rr        	inc bufaddr+1
002927  3               :
002927  3  A0 00        	ldy #0
002929  3  B1 rr        	lda (bufaddr),y		; fetch type.
00292B  3  C5 63        	cmp z80_b		; is this fatal?
00292D  3  D0 01        	bne :+
00292F  3  60           	rts			; yes.
002930  3               :
002930  3               tded1:
002930  3  A5 rr        	lda dispy		; vertical position.
002932  3  29 07        	and #7 			; is it straddling cells?
002934  3  D0 01        	bne :+
002936  3  60           	rts			; no, job done.
002937  3               :
002937  3  18           	clc			; point to next row.
002938  3  A5 rr        	lda bufaddr
00293A  3  65 64        	adc z80_e
00293C  3  85 rr        	sta bufaddr
00293E  3  90 02        	bcc :+
002940  3  E6 rr        	inc bufaddr+1
002942  3               :
002942  3  A0 00        	ldy #0
002944  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
002946  3  C5 63        	cmp z80_b		; is this fatal?
002948  3  D0 01        	bne :+
00294A  3  60           	rts			; yes.
00294B  3               :
00294B  3  E6 rr        	inc bufaddr		; next cell.
00294D  3  D0 02        	bne :+
00294F  3  E6 rr        	inc bufaddr+1
002951  3               :
002951  3  A0 00        	ldy #0
002953  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002955  3  C5 63        	cmp z80_b		; is this fatal?
002957  3  D0 01        	bne :+
002959  3  60           	rts			; yes.
00295A  3               :
00295A  3  A5 62        	lda z80_c		; horizontal position.
00295C  3  29 07        	and #7			; is it straddling cells?
00295E  3  D0 01        	bne :+
002960  3  60           	rts			; no.
002961  3               :
002961  3  E6 rr        	inc bufaddr		; last cell.
002963  3  D0 02        	bne :+
002965  3  E6 rr        	inc bufaddr+1
002967  3               :
002967  3  A0 00        	ldy #0
002969  3  B1 rr        	lda (bufaddr),y		; fetch final type.
00296B  3  60           	rts 			; return with final type in accumulator.
00296C  3               
00296C  3               ;---------------------------------------------------
00296C  3               ; Fetch block type at (dispx, dispy).
00296C  3               ;
00296C  3               ; Output:
00296C  3               ;  A = block type
00296C  3               ;---------------------------------------------------
00296C  3               
00296C  3               tstbl:
00296C  3  A5 rr        	lda dispy 		; fetch y coord.
00296E  3  4A           	lsr a			; bufaddr = y/8
00296F  3  4A           	lsr a
002970  3  4A           	lsr a
002971  3  85 rr        	sta chary
002973  3               
002973  3  85 rr        	sta bufaddr
002975  3  A9 00        	lda #0
002977  3  85 rr        	sta bufaddr+1
002979  3               
002979  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
00297B  3  26 rr        	rol bufaddr+1
00297D  3  06 rr        	asl bufaddr
00297F  3  26 rr        	rol bufaddr+1
002981  3  06 rr        	asl bufaddr
002983  3  26 rr        	rol bufaddr+1
002985  3  06 rr        	asl bufaddr
002987  3  26 rr        	rol bufaddr+1
002989  3  06 rr        	asl bufaddr
00298B  3  26 rr        	rol bufaddr+1
00298D  3               
00298D  3  A5 rr        	lda dispx		; x/8
00298F  3  4A           	lsr a
002990  3  4A           	lsr a
002991  3  4A           	lsr a
002992  3  85 rr        	sta charx
002994  3               
002994  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
002995  3  65 rr        	adc bufaddr
002997  3  69 00        	adc #<MAP
002999  3  85 rr        	sta bufaddr
00299B  3  A5 rr        	lda bufaddr+1
00299D  3  69 DD        	adc #>MAP
00299F  3  85 rr        	sta bufaddr+1
0029A1  3               
0029A1  3  A0 00        	ldy #0
0029A3  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0029A5  3  60           	rts
0029A6  3               
0029A6  3               
0029A6  3               ;-------------------------------------------------------------------
0029A6  3               ; Jump - if we can.
0029A6  3               ; Requires initial speed to be set up in accumulator prior to call.
0029A6  3               ;
0029A6  3               ; Input:
0029A6  3               ;  IX = sprite address
0029A6  3               ;-------------------------------------------------------------------
0029A6  3               
0029A6  3               jump:
0029A6  3  A0 0D        	ldy #13
0029A8  3  B1 68        	lda (z80_ix),y		; jump table low.
0029AA  3  A0 0E        	ldy #14
0029AC  3  11 68        	ora (z80_ix),y		; jump table high.
0029AE  3  F0 01        	beq :+
0029B0  3  60           	rts			; already in the air.
0029B1  3               :
0029B1  3  A9 96        	lda #>jtab
0029B3  3  A0 0E        	ldy #14
0029B5  3  91 68        	sta (z80_ix),y		; set jump high.
0029B7  3  A9 45        	lda #<jtab		; jump table start.
0029B9  3  A0 0D        	ldy #13
0029BB  3  91 68        	sta (z80_ix),y		; set jump low.
0029BD  3  60           	rts
0029BE  3               
0029BE  3               ; Jump table.
0029BE  3               
0029BE  3               ;jtab:
0029BE  3               ;	.byte 248,250,252
0029BE  3               ;	.byte 254,254,255
0029BE  3               ;	.byte 255,255,0,0
0029BE  3               ;	.byte 0,1,1,1,2,2
0029BE  3               ;	.byte 4,6,8,8,8,99
0029BE  3               
0029BE  3               ;------------------------------------------------
0029BE  3               ; Random numbers code.
0029BE  3               ; Pseudo-random number generator, 8-bit.
0029BE  3               ;
0029BE  3               ; Output:
0029BE  3               ;  RND = random number
0029BE  3               ;------------------------------------------------
0029BE  3               
0029BE  3               random:
0029BE  3  A5 rr        	lda seed
0029C0  3  F0 05        	beq doEor
0029C2  3  0A           	asl a
0029C3  3  F0 04        	beq noEor
0029C5  3  90 02        	bcc noEor
0029C7  3  49 1D        doEor:	eor #$1d
0029C9  3  85 rr        noEor:	sta seed
0029CB  3  60           	rts
0029CC  3               
0029CC  3  A5 rr        	lda seed		; get last random number.
0029CE  3  0A           	asl a
0029CF  3  0A           	asl a
0029D0  3  18           	clc
0029D1  3  65 rr        	adc seed
0029D3  3  18           	clc
0029D4  3  69 45        	adc #$45
0029D6  3  85 rr        	sta seed		; store new seed.
0029D8  3  85 rr        	sta varrnd		; return number in variable.
0029DA  3  60           	rts
0029DB  3               
0029DB  3               ;--------------------------------------------------------
0029DB  3               ; Keys
0029DB  3               ;
0029DB  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
0029DB  3               ;             ||||||||
0029DB  3               ;             |||||||+> Right    KEY 0  - X
0029DB  3               ;             ||||||+-> Left     KEY 1  - Z
0029DB  3               ;             |||||+--> Down     KEY 2  - .
0029DB  3               ;             ||||+---> Up       KEY 3  - ;
0029DB  3               ;             |||+----> Fire1    KEY 4  - SPC
0029DB  3               ;             ||+-----> Fire2    KEY 5  - Q
0029DB  3               ;             |+------> Fire3    KEY 6  - P
0029DB  3               ;             +-------> Not used
0029DB  3               ;
0029DB  3               ;                       Option1  KEY 7  - 1
0029DB  3               ;                       Option2  KEY 8  - 2
0029DB  3               ;                       Option3  KEY 9  - 3
0029DB  3               ;                       Option4  KEY 10 - 4
0029DB  3               ;--------------------------------------------------------
0029DB  3               
0029DB  3               ;              X   Z   .   ;  SPC  Q   P
0029DB  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
0029DB  3               ;        .byte $21,$11,$01,$92                   ; menu options.
0029DB  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
0029DF  3  00 04 14     
0029E2  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
0029E6  3               
0029E6  3               ;-------------------------------------------------------
0029E6  3               ; Joystick and keyboard reading routines.
0029E6  3               ;
0029E6  3               ; contrl = 0, Keyboard
0029E6  3               ;          1, JoyKeyb
0029E6  3               ;          2, JoyMMC
0029E6  3               ;-------------------------------------------------------
0029E6  3               
0029E6  3               joykey:
0029E6  3  A5 rr        	lda contrl 		; control flag.
0029E8  3  C9 01        	cmp #1
0029EA  3  D0 03        	bne :+
0029EC  3  4C 0A 2A     	jmp joyjoy 		; read keyboard joystick
0029EF  3               :
0029EF  3  C9 02        	cmp #2
0029F1  3  D0 03        	bne :+
0029F3  3  4C 34 2A     	jmp joysin 		; read MMC joystick.
0029F6  3               :
0029F6  3               ; Keyboard controls.
0029F6  3               
0029F6  3  A9 00        	lda #0		 	; zero reading.
0029F8  3  85 64        	sta z80_e
0029FA  3               
0029FA  3  A0 06        	ldy #6	 		; address of last key.
0029FC  3               joyke0:
0029FC  3  B9 5B 96     	lda keys,y 		; get key from table.
0029FF  3  20 D6 97     	jsr ktest		; being pressed?
002A02  3  26 64        	rol z80_e 		; rotate into reading.
002A04  3               
002A04  3  88           	dey		 	; next key.
002A05  3  10 F5        	bpl joyke0 		; repeat for all keys.
002A07  3  4C 1B 2A     	jmp joyjo1 		; store the value.
002A0A  3               
002A0A  3               ; Keyboard joystick controls.
002A0A  3               
002A0A  3               joyjoy:
002A0A  3  A9 00        	lda #0		 	; zero reading.
002A0C  3  85 64        	sta z80_e
002A0E  3               
002A0E  3  A0 06        	ldy #6	 		; address of last key.
002A10  3               joyjo3:
002A10  3  B9 DB 29     	lda jkeys,y 		; get key from table.
002A13  3  20 D6 97     	jsr ktest		; being pressed?
002A16  3  26 64        	rol z80_e 		; rotate into reading.
002A18  3               
002A18  3  88           	dey		 	; next key.
002A19  3  10 F5        	bpl joyjo3 		; repeat for all keys.
002A1B  3               joyjo1:
002A1B  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002A1D  3               joyjo2:
002A1D  3  85 rr        	sta joyval		; remember value.
002A1F  3  60           	rts
002A20  3               
002A20  3               
002A20  3               ; AtoMMC joystick controls.
002A20  3               
002A20  3               ; Set PORTB direction
002A20  3               
002A20  3               joyinit:
002A20  3  60           	rts
002A21  3               
002A21  3  A9 FF        	lda #$ff   		; Write value to latch, bits 0-7 input
002A23  3  8D 01 B4     	sta DatReg
002A26  3  20 62 2A     	jsr interwritedelay
002A29  3  A9 A1        	lda #$a1   		; Write direction in latch to PORTB
002A2B  3  8D 00 B4     	sta CmdReg
002A2E  3               
002A2E  3               wait_until_not_busy:
002A2E  3  AD 00 B4     	lda CmdReg
002A31  3  30 FB        	bmi wait_until_not_busy
002A33  3  60           	rts
002A34  3               
002A34  3               ; Get PORTB value
002A34  3               
002A34  3               joysin:
002A34  3  A9 A2        	lda #$a2   		; Read value PORTB in latch
002A36  3  8D 00 B4     	sta CmdReg
002A39  3  20 62 2A     	jsr interwritedelay
002A3C  3               
002A3C  3  AD 01 B4     	lda DatReg		; Read joystick status
002A3F  3  29 7F        	and #$7f
002A41  3  85 rr        	sta joyval
002A43  3  85 F0        	sta $f0
002A45  3               
002A45  3  AD 60 96     	lda keys+5		; check fire2
002A48  3  20 D6 97     	jsr ktest
002A4B  3  B0 06        	bcs :+
002A4D  3  A5 rr        	lda joyval
002A4F  3  29 DF        	and #$df
002A51  3  85 rr        	sta joyval
002A53  3               :
002A53  3  AD 61 96     	lda keys+6		; check fire3
002A56  3  20 D6 97     	jsr ktest
002A59  3  B0 06        	bcs :+
002A5B  3  A5 rr        	lda joyval
002A5D  3  29 BF        	and #$bf
002A5F  3  85 rr        	sta joyval
002A61  3               :
002A61  3  60           	rts
002A62  3               
002A62  3               ; Short delay
002A62  3               ; Enough to intersperse 2 writes to the FATPIC.
002A62  3               
002A62  3               interwritedelay:
002A62  3  A9 08        	lda  #8
002A64  3  38           	sec
002A65  3               loop:
002A65  3  E9 01        	sbc  #1
002A67  3  D0 FC        	bne  loop
002A69  3  60           	rts
002A6A  3               
002A6A  3               ;tmp_byte:   .byte 0
002A6A  3               
002A6A  3               ;---------------------------------------------------------------
002A6A  3               ; Display message.
002A6A  3               ;
002A6A  3               ; Input:
002A6A  3               ;  A = message number
002A6A  3               ;---------------------------------------------------------------
002A6A  3               
002A6A  3               dmsg:
002A6A  3  AA           	tax
002A6B  3  A9 95        	lda #<msgdat		; pointer to messages.
002A6D  3  85 66        	sta z80_l
002A6F  3  A9 52        	lda #>msgdat
002A71  3  85 67        	sta z80_h
002A73  3  20 85 2B     	jsr getwrd		; get message number.
002A76  3               dmsg3:
002A76  3  20 72 2B     	jsr preprt		; pre-printing stuff.
002A79  3  20 98 23     	jsr checkx		; make sure we"re in a printable range.
002A7C  3  A5 rr        	lda prtmod		; print mode.
002A7E  3  D0 47        	bne bmsg1		; no, double-height text.
002A80  3               dmsg0:
002A80  3  A5 67        	lda z80_h		; store string pointer.
002A82  3  48           	pha
002A83  3  A5 66        	lda z80_l
002A85  3  48           	pha
002A86  3               
002A86  3  A0 00        	ldy #0
002A88  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
002A8A  3  29 7F        	and #127		; remove any end marker.
002A8C  3  C9 0D        	cmp #13
002A8E  3  F0 24        	beq dmsg1
002A90  3  20 2C 25     	jsr pchar		; display character.
002A93  3  20 5F 2B     	jsr nexpos 		; display position.
002A96  3  D0 03        	bne dmsg2		; not on a new line.
002A98  3  20 64 2B     	jsr nexlin		; next line down.
002A9B  3               dmsg2:
002A9B  3  68           	pla			; retrieve string pointer
002A9C  3  85 66        	sta z80_l
002A9E  3  68           	pla
002A9F  3  85 67        	sta z80_h
002AA1  3               
002AA1  3  A0 00        	ldy #0
002AA3  3  B1 66        	lda (z80_hl),y		; fetch last character.
002AA5  3  0A           	asl a  			; was it the end?
002AA6  3  90 03        	bcc :+
002AA8  3  4C EB 23     	jmp dscor2		; yes, job done.
002AAB  3               :
002AAB  3  E6 66        	inc z80_l		; next character to display.
002AAD  3  D0 02        	bne :+
002AAF  3  E6 67        	inc z80_h
002AB1  3               :
002AB1  3  4C 80 2A     	jmp dmsg0
002AB4  3               dmsg1:
002AB4  3  E6 rr        	inc dispy
002AB6  3  A5 rr        	lda dispy
002AB8  3  C9 18        	cmp #24
002ABA  3  90 04        	bcc dmsg4
002ABC  3  A9 00        	lda #0
002ABE  3  85 rr        	sta dispy
002AC0  3               dmsg4:
002AC0  3  A9 00        	lda #0
002AC2  3  85 rr        	sta dispx
002AC4  3  4C 9B 2A     	jmp dmsg2
002AC7  3               
002AC7  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
002AC7  3               
002AC7  3               ;----------------------------------------------------------
002AC7  3               ; Display message in big text.
002AC7  3               ;
002AC7  3               ; Input:
002AC7  3               ;  HL = string pointer
002AC7  3               ;----------------------------------------------------------
002AC7  3               
002AC7  3               bmsg1:
002AC7  3  A0 00        	ldy #0
002AC9  3  B1 66        	lda (z80_hl),y 		; get character to display.
002ACB  3  29 7F        	and #127		; only want 7 bits.
002ACD  3  C9 0D        	cmp #13
002ACF  3  F0 13        	beq bmsg2
002AD1  3  20 F9 2A     	jsr bchar 		; display big char.
002AD4  3               bmsg3:
002AD4  3  A0 00        	ldy #0
002AD6  3  B1 66        	lda (z80_hl),y 		; look at last character.
002AD8  3  48           	pha
002AD9  3  E6 66        	inc z80_l 		; next character in list.
002ADB  3  D0 02        	bne :+
002ADD  3  E6 67        	inc z80_h
002ADF  3               :
002ADF  3  68           	pla
002AE0  3  0A           	asl a  			; was terminator flag set?
002AE1  3  90 E4        	bcc bmsg1		; no, keep going.
002AE3  3  60           	rts
002AE4  3               bmsg2:
002AE4  3  A9 00        	lda #0
002AE6  3  85 rr        	sta dispx
002AE8  3  E6 rr        	inc dispy
002AEA  3  E6 rr        	inc dispy
002AEC  3  A5 rr        	lda dispy
002AEE  3  C9 17        	cmp #23
002AF0  3  90 E2        	bcc bmsg3
002AF2  3  A9 00        	lda #0
002AF4  3  85 rr        	sta dispy
002AF6  3  4C D4 2A     	jmp bmsg3
002AF9  3               
002AF9  3               ;----------------------------------------------------------
002AF9  3               ; Big character display.
002AF9  3               ;
002AF9  3               ; Input:
002AF9  3               ;  A = character
002AF9  3               ;----------------------------------------------------------
002AF9  3               
002AF9  3               bchar:
002AF9  3  85 64        	sta z80_e		; save char in lb
002AFB  3  A9 00        	lda #0
002AFD  3  85 65        	sta z80_d		; reset hb
002AFF  3               
002AFF  3  06 64        	asl z80_e 		; multiply char by 8.
002B01  3  26 65        	rol z80_d
002B03  3  06 64        	asl z80_e
002B05  3  26 65        	rol z80_d
002B07  3  06 64        	asl z80_e
002B09  3  26 65        	rol z80_d		; de = a*8
002B0B  3               
002B0B  3  18           	clc			; de = Fontpointer + a*8
002B0C  3  A5 64        	lda z80_e
002B0E  3  69 45        	adc #<(FONT-256) 		; address of font.
002B10  3  85 64        	sta z80_e
002B12  3  A5 65        	lda z80_d
002B14  3  69 92        	adc #>(FONT-256)
002B16  3  85 65        	sta z80_d
002B18  3               
002B18  3  20 DD 24     	jsr gprad 		; get screen address.
002B1B  3               
002B1B  3  A2 00        	ldx #0			; height of character in font.
002B1D  3               bchar0:
002B1D  3  A0 00        	ldy #0
002B1F  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
002B21  3               
002B21  3               .if iflag
002B21  3               	eor #$ff
002B21  3               .endif
002B21  3               
002B21  3  91 rr        	sta (scraddr),y
002B23  3  48           	pha
002B24  3  20 B9 2E     	jsr nline 		; next line down.
002B27  3  68           	pla
002B28  3  91 rr        	sta (scraddr),y
002B2A  3  20 B9 2E     	jsr nline 		; next line down.
002B2D  3               
002B2D  3  18           	clc
002B2E  3  E6 64        	inc z80_e 		; next line of font.
002B30  3  D0 02        	bne :+
002B32  3  E6 65        	inc z80_d
002B34  3               :
002B34  3  E8           	inx
002B35  3  E0 08        	cpx #8
002B37  3  D0 E4        	bne bchar0
002B39  3               
002B39  3  20 5F 2B     	jsr nexpos		; display position.
002B3C  3  D0 05        	bne bchar2 		; not on a new line.
002B3E  3               bchar3:
002B3E  3  E6 rr        	inc dispy
002B40  3  20 64 2B     	jsr nexlin 		; next line check.
002B43  3               bchar2:
002B43  3  4C EB 23     	jmp dscor2		; tidy up line and column variables.
002B46  3               
002B46  3               
002B46  3               ;-------------------------------------------------
002B46  3               ; Display a character.
002B46  3               ;
002B46  3               ; Input:
002B46  3               ;  A = character
002B46  3               ;-------------------------------------------------
002B46  3               
002B46  3               achar:
002B46  3  85 63        	sta z80_b 		; copy to b.
002B48  3  20 72 2B     	jsr preprt 		; get ready to print.
002B4B  3  A5 63        	lda z80_b		; character in accumulator.
002B4D  3  A6 rr        	ldx prtmod 		; print mode.
002B4F  3  F0 03        	beq :+
002B51  3  4C F9 2A     	jmp bchar 		; no, double-height text.
002B54  3               :
002B54  3  20 2C 25     	jsr pchar 		; display character.
002B57  3  20 5F 2B     	jsr nexpos 		; display position.
002B5A  3  F0 E2        	beq bchar3		; next line down.
002B5C  3  4C 43 2B     	jmp bchar2 		; tidy up.
002B5F  3               
002B5F  3               
002B5F  3               ;-------------------------------------------------
002B5F  3               ; Get next print column position.
002B5F  3               ;-------------------------------------------------
002B5F  3               
002B5F  3               nexpos:
002B5F  3  E6 rr        	inc dispx		; move along one position.
002B61  3  A5 rr        	lda dispx 		; get coordinate.
002B63  3               ;	and #31
002B63  3  60           	rts 			; return with status in zero flag.
002B64  3               
002B64  3               ;-------------------------------------------------
002B64  3               ; Get next print line position.
002B64  3               ;-------------------------------------------------
002B64  3               
002B64  3               nexlin:
002B64  3  E6 rr        	inc dispy 		; newline.
002B66  3  A5 rr        	lda dispy		; vertical position.
002B68  3  C9 18        	cmp #24			; past screen edge?
002B6A  3  B0 01        	bcs :+
002B6C  3  60           	rts			; no, still okay.
002B6D  3               :
002B6D  3  A9 00        	lda #0			; restart at top.
002B6F  3  85 rr        	sta dispy
002B71  3  60           	rts
002B72  3               
002B72  3               ;--------------------------------------------------------
002B72  3               ; Pre-print preliminaries.
002B72  3               ;--------------------------------------------------------
002B72  3               
002B72  3               preprt:
002B72  3  A9 45        	lda #<(FONT-256)		; font pointer.
002B74  3  8D 96 23     	sta grbase		; set up graphics base.
002B77  3  A9 92        	lda #>(FONT-256)
002B79  3  8D 97 23     	sta grbase+1
002B7C  3               prescr:
002B7C  3  A5 rr        	lda charx 		; display coordinates.
002B7E  3  85 rr        	sta dispx		; set up general coordinates.
002B80  3  A5 rr        	lda chary
002B82  3  85 rr        	sta dispy
002B84  3  60           	rts
002B85  3               
002B85  3               ;--------------------------------------------------------------
002B85  3               ; Get messagenr x in hl
002B85  3               ;
002B85  3               ; Input:
002B85  3               ;  HL = pointer to message list
002B85  3               ;  X  = message number.
002B85  3               ;--------------------------------------------------------------
002B85  3               
002B85  3               getwrd:
002B85  3  E0 00        	cpx #0
002B87  3  D0 01        	bne:+ 			; first word in list?
002B89  3  60           	rts 			; yep, don't search.
002B8A  3               :
002B8A  3  A0 00        	ldy #0
002B8C  3               getwd0:
002B8C  3  B1 66        	lda (z80_hl),y
002B8E  3  48           	pha
002B8F  3  E6 66        	inc z80_l
002B91  3  D0 02        	bne :+
002B93  3  E6 67        	inc z80_h
002B95  3               :
002B95  3  68           	pla
002B96  3  C9 80        	cmp #128		; found end?
002B98  3  30 F2        	bmi getwd0		; no, carry on.
002B9A  3  CA           	dex			; until we have right number.
002B9B  3  D0 EF        	bne getwd0
002B9D  3  60           	rts
002B9E  3               
002B9E  3               ;-----------------------------------------------------------
002B9E  3               ; Bubble sort.
002B9E  3               ;-----------------------------------------------------------
002B9E  3               
002B9E  3               bsort:
002B9E  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
002BA0  3  85 rr        	sta qscnt
002BA2  3               
002BA2  3  A9 07        	lda #<sprtab 		; sprite table.
002BA4  3  85 68        	sta z80_x
002BA6  3  A9 33        	lda #>sprtab
002BA8  3  85 69        	sta z80_i
002BAA  3               bsort0:
002BAA  3  A0 00        	ldy #0
002BAC  3  B1 68        	lda (z80_ix),y 		; first sprite type.
002BAE  3  C9 FF        	cmp #255 		; is it switched off?
002BB0  3  F0 30        	beq swemp		; yes, may need to switch another in here.
002BB2  3               
002BB2  3  A0 11        	ldy #TABSIZ
002BB4  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
002BB6  3  C9 FF        	cmp #255 		; is it enabled?
002BB8  3  F0 0A        	beq bsort2 		; no, nothing to swap.
002BBA  3               
002BBA  3  A0 14        	ldy #TABSIZ+3
002BBC  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
002BBE  3  A0 03        	ldy #3
002BC0  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
002BC2  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
002BC4  3               bsort2:
002BC4  3  18           	clc
002BC5  3  A5 68        	lda z80_x
002BC7  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002BC9  3  85 68        	sta z80_x
002BCB  3  90 02        	bcc :+
002BCD  3  E6 69        	inc z80_i
002BCF  3               :
002BCF  3  C6 rr        	dec qscnt
002BD1  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
002BD3  3  60           	rts
002BD4  3               
002BD4  3               ;qscnt:	.byte 0
002BD4  3               
002BD4  3               bsort1:
002BD4  3  A0 11        	ldy #TABSIZ
002BD6  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
002BD8  3  C9 FF        	cmp #255		; is it enabled?
002BDA  3  F0 E8        	beq bsort2		; no, nothing to swap.
002BDC  3  20 F0 2B     	jsr swspr		; swap positions.
002BDF  3  4C C4 2B     	jmp bsort2
002BE2  3               swemp:
002BE2  3  A0 11        	ldy #TABSIZ
002BE4  3  B1 68        	lda (z80_ix),y		; next table entry.
002BE6  3  C9 FF        	cmp #255		; is that one on?
002BE8  3  F0 DA        	beq bsort2		; no, nothing to swap.
002BEA  3  20 F0 2B     	jsr swspr		; swap positions.
002BED  3  4C C4 2B     	jmp bsort2
002BF0  3               
002BF0  3               ; Swap sprites.
002BF0  3               
002BF0  3               swspr:
002BF0  3  A5 68        	lda z80_x		; table address
002BF2  3  85 64        	sta z80_e		; copy to de pair.
002BF4  3  85 66        	sta z80_l		; copy to hl pair.
002BF6  3  A5 69        	lda z80_i
002BF8  3  85 67        	sta z80_h
002BFA  3  85 65        	sta z80_d
002BFC  3               
002BFC  3  18           	clc
002BFD  3  A5 66        	lda z80_l
002BFF  3  69 11        	adc #TABSIZ		; distance to second entry.
002C01  3  85 66        	sta z80_l
002C03  3  90 02        	bcc :+
002C05  3  E6 67        	inc z80_h
002C07  3               :
002C07  3  A9 11        	lda #TABSIZ		; bytes to swap.
002C09  3  85 63        	sta z80_b
002C0B  3  A0 00        	ldy #0
002C0D  3               swspr0:
002C0D  3  B1 66        	lda (z80_hl),y		; fetch second byte.
002C0F  3  48           	pha
002C10  3  B1 64        	lda (z80_de),y 		; fetch first byte.
002C12  3  91 66        	sta (z80_hl),y 		; copy to second.
002C14  3  68           	pla
002C15  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
002C17  3               
002C17  3  E6 64        	inc z80_e 		; next byte.
002C19  3  D0 02        	bne :+
002C1B  3  E6 65        	inc z80_d
002C1D  3               :
002C1D  3  E6 66        	inc z80_l 		; next byte.
002C1F  3  D0 02        	bne :+
002C21  3  E6 67        	inc z80_h
002C23  3               :
002C23  3  C6 63        	dec z80_b
002C25  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
002C27  3  60           	rts
002C28  3               
002C28  3               ;----------------------------------------------------
002C28  3               ; Process sprites.
002C28  3               ;----------------------------------------------------
002C28  3               
002C28  3               pspr:
002C28  3  A9 0C        	lda #NUMSPR		; sprites to process.
002C2A  3  85 rr        	sta sprptr
002C2C  3               
002C2C  3  A9 07        	lda #<sprtab 		; sprite table.
002C2E  3  85 68        	sta z80_x
002C30  3  A9 33        	lda #>sprtab
002C32  3  85 69        	sta z80_i
002C34  3               pspr1:
002C34  3  A0 00        	ldy #0
002C36  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
002C38  3  C9 09        	cmp #9 			; within range of sprite types?
002C3A  3  B0 03        	bcs :+
002C3C  3  20 4F 2C     	jsr pspr2 		; yes, process this one.
002C3F  3               :
002C3F  3  18           	clc
002C40  3  A5 68        	lda z80_x
002C42  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002C44  3  85 68        	sta z80_x
002C46  3  90 02        	bcc :+
002C48  3  E6 69        	inc z80_i		; next sprite.
002C4A  3               :
002C4A  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
002C4C  3  D0 E6        	bne pspr1
002C4E  3  60           	rts
002C4F  3               
002C4F  3               ;sprptr:	.byte 0
002C4F  3               
002C4F  3               pspr2:
002C4F  3  A5 68        	lda z80_x 		; store original sprite pointer.
002C51  3  85 rr        	sta ogptr
002C53  3  A5 69        	lda z80_i
002C55  3  85 rr        	sta ogptr+1
002C57  3  20 63 2C     	jsr pspr3		; do the routine.
002C5A  3               rtorg:
002C5A  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
002C5C  3  85 68        	sta z80_x
002C5E  3  A5 rr        	lda ogptr+1
002C60  3  85 69        	sta z80_i
002C62  3               rtorg0:
002C62  3  60           	rts
002C63  3               
002C63  3               pspr3:
002C63  3  A9 98        	lda #<evtyp0		; sprite type events list.
002C65  3  85 66        	sta z80_l
002C67  3  A9 2C        	lda #>evtyp0
002C69  3  85 67        	sta z80_h
002C6B  3               pspr4:
002C6B  3  B1 68        	lda (z80_ix),y
002C6D  3  0A           	asl a			; double accumulator.
002C6E  3  18           	clc
002C6F  3  65 66        	adc z80_l
002C71  3  85 66        	sta z80_l
002C73  3  90 02        	bcc :+
002C75  3  E6 67        	inc z80_h
002C77  3               :
002C77  3  B1 66        	lda (z80_hl),y
002C79  3  85 64        	sta z80_e 		; copy to de.
002C7B  3  48           	pha
002C7C  3               
002C7C  3  E6 66        	inc z80_l 		; next byte of address.
002C7E  3  D0 02        	bne :+
002C80  3  E6 67        	inc z80_h
002C82  3               :
002C82  3  B1 66        	lda (z80_hl),y 		; address high.
002C84  3  85 65        	sta z80_d
002C86  3               
002C86  3  48           	pha	 		; swap address into hl.
002C87  3  A5 67        	lda z80_h
002C89  3  85 65        	sta z80_d
002C8B  3  68           	pla
002C8C  3  85 67        	sta z80_h
002C8E  3  68           	pla
002C8F  3  85 66        	sta z80_l
002C91  3  A5 66        	lda z80_l
002C93  3  85 64        	sta z80_e
002C95  3               
002C95  3  6C 66 00     	jmp (z80_hl) 		; go there.
002C98  3               
002C98  3               ;ogptr:	.word 0			; original sprite pointer.
002C98  3               
002C98  3               ; Address of each sprite type's routine.
002C98  3               
002C98  3  2F 34        evtyp0:	.word evnt00
002C9A  3  CF 38        evtyp1:	.word evnt01
002C9C  3  DD 3A        evtyp2:	.word evnt02
002C9E  3  7B 3D        evtyp3:	.word evnt03
002CA0  3  65 41        evtyp4:	.word evnt04
002CA2  3  B3 43        evtyp5:	.word evnt05
002CA4  3  14 47        evtyp6:	.word evnt06
002CA6  3  8C 49        evtyp7:	.word evnt07
002CA8  3  12 4C        evtyp8:	.word evnt08
002CAA  3               
002CAA  3               ;--------------------------------------------------------------
002CAA  3               ; Display sprites.
002CAA  3               ;
002CAA  3               ; Input:
002CAA  3               ;  IX = sprite table
002CAA  3               ;--------------------------------------------------------------
002CAA  3               
002CAA  3               dspr:
002CAA  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
002CAC  3  85 rr        	sta sprcnt
002CAE  3               dspr0:
002CAE  3  A0 00        	ldy #0
002CB0  3  B1 68        	lda (z80_ix),y 		; get sprite type.
002CB2  3  C9 FF        	cmp #255 		; is it enabled?
002CB4  3  D0 42        	bne dspr1 		; yes, it needs deleting.
002CB6  3               dspr5:
002CB6  3  A0 05        	ldy #5
002CB8  3  B1 68        	lda (z80_ix),y 		; new type.
002CBA  3  C9 FF        	cmp #255		; is it enabled?
002CBC  3  D0 77        	bne dspr3 		; yes, it needs drawing.
002CBE  3               dspr2:
002CBE  3  A0 05        	ldy #5
002CC0  3  B1 68        	lda (z80_ix),y 		; copy new type.
002CC2  3  A0 00        	ldy #0
002CC4  3  91 68        	sta (z80_ix),y
002CC6  3  A0 06        	ldy #6
002CC8  3  B1 68        	lda (z80_ix),y 		; copy new image number.
002CCA  3  A0 01        	ldy #1
002CCC  3  91 68        	sta (z80_ix),y
002CCE  3  A0 07        	ldy #7
002CD0  3  B1 68        	lda (z80_ix),y 		; copy new frame.
002CD2  3  A0 02        	ldy #2
002CD4  3  91 68        	sta (z80_ix),y
002CD6  3  A0 08        	ldy #8
002CD8  3  B1 68        	lda (z80_ix),y 		; copy new y.
002CDA  3  A0 03        	ldy #3
002CDC  3  91 68        	sta (z80_ix),y
002CDE  3  A0 09        	ldy #9
002CE0  3  B1 68        	lda (z80_ix),y 		; copy new x.
002CE2  3  A0 04        	ldy #4
002CE4  3  91 68        	sta (z80_ix),y
002CE6  3               
002CE6  3  18           	clc
002CE7  3  A5 68        	lda z80_x
002CE9  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
002CEB  3  85 68        	sta z80_x
002CED  3  A5 69        	lda z80_i
002CEF  3  69 00        	adc #0
002CF1  3  85 69        	sta z80_i 		; next sprite.
002CF3  3  C6 rr        	dec sprcnt
002CF5  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
002CF7  3  60           	rts
002CF8  3               dspr1:
002CF8  3  A0 05        	ldy #5
002CFA  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
002CFC  3  C9 FF        	cmp #255		; is this enabled?
002CFE  3  D0 06        	bne dspr4 		; yes, display both.
002D00  3               dspr6:
002D00  3  20 D0 2D     	jsr sspria 		; show single sprite.
002D03  3  4C BE 2C     	jmp dspr2
002D06  3               
002D06  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
002D06  3               
002D06  3               dspr4:
002D06  3  A0 04        	ldy #4
002D08  3  B1 68        	lda (z80_ix),y		; old x.
002D0A  3  A0 09        	ldy #9
002D0C  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
002D0E  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
002D10  3               
002D10  3  A0 03        	ldy #3
002D12  3  B1 68        	lda (z80_ix),y		; old y.
002D14  3  A0 08        	ldy #8
002D16  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002D18  3  D0 15        	bne dspr7		; they differ, need to redraw.
002D1A  3               
002D1A  3  A0 02        	ldy #2
002D1C  3  B1 68        	lda (z80_ix),y 		; old frame.
002D1E  3  A0 07        	ldy #7
002D20  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002D22  3  4C 2F 2D     	jmp dspr7 		; they differ, need to redraw.
002D25  3               
002D25  3  A0 01        	ldy #1
002D27  3  B1 68        	lda (z80_ix),y 		; old image.
002D29  3  A0 06        	ldy #6
002D2B  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002D2D  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
002D2F  3               dspr7:
002D2F  3  20 FD 2D     	jsr sspric 		; delete old sprite, draw new one simultaneously.
002D32  3  4C BE 2C     	jmp dspr2
002D35  3               dspr3:
002D35  3  20 F7 2D     	jsr ssprib 		; show single sprite.
002D38  3  4C BE 2C     	jmp dspr2
002D3B  3               
002D3B  3               ;sprcnt:	.byte 0
002D3B  3               
002D3B  3               ;-----------------------------------------
002D3B  3               ; Get sprite address calculations.
002D3B  3               ; gspran = new sprite, gsprad = old sprite.
002D3B  3               ;
002D3B  3               ; Input:
002D3B  3               ;  IX = sprite address
002D3B  3               ;-----------------------------------------
002D3B  3               
002D3B  3               gspran:
002D3B  3  A0 08        	ldy #8
002D3D  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
002D3F  3  85 rr        	sta dispy
002D41  3  A0 09        	ldy #9
002D43  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
002D45  3  85 rr        	sta dispx
002D47  3  A0 06        	ldy #6
002D49  3  B1 68        	lda (z80_ix),y 		; new sprite image.
002D4B  3  20 29 31     	jsr gfrm		; fetch start frame for this sprite.
002D4E  3               
002D4E  3  A0 00        	ldy #0
002D50  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002D52  3  A0 07        	ldy #7
002D54  3  18           	clc
002D55  3  71 68        	adc (z80_ix),y 		; new add frame number.
002D57  3  4C 76 2D     	jmp gspra0
002D5A  3               
002D5A  3               ;-----------------------------------------
002D5A  3               ; Calculate old sprite address
002D5A  3               ;
002D5A  3               ; Input:
002D5A  3               ;  IX = sprite address
002D5A  3               ;
002D5A  3               ; Output:
002D5A  3               ;  B  = right byte mask
002D5A  3               ;  C  = left byte mask
002D5A  3               ;  DE = spriteframe address
002D5A  3               ;  scraddr = screenaddress(dispx,dispy)
002D5A  3               ;-----------------------------------------
002D5A  3               
002D5A  3               gsprad:
002D5A  3  A0 03        	ldy #3
002D5C  3  B1 68        	lda (z80_ix),y		; y coordinate.
002D5E  3  85 rr        	sta dispy
002D60  3  A0 04        	ldy #4
002D62  3  B1 68        	lda (z80_ix),y		; x coordinate.
002D64  3  85 rr        	sta dispx
002D66  3  A0 01        	ldy #1
002D68  3  B1 68        	lda (z80_ix),y 		; sprite image.
002D6A  3  20 29 31     	jsr gfrm 		; fetch start frame for this sprite.
002D6D  3               
002D6D  3  A0 00        	ldy #0
002D6F  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
002D71  3  A0 02        	ldy #2
002D73  3  18           	clc
002D74  3  71 68        	adc (z80_ix),y 		; add frame number.
002D76  3               gspra0:
002D76  3  4A           	lsr a	  		; multiply by 128.
002D77  3  85 65        	sta z80_d 		; store in d.
002D79  3  8D CE 2D     	sta tmp1
002D7C  3  A9 00        	lda #0
002D7E  3  6A           	ror a
002D7F  3  85 64        	sta z80_e 		; got low byte.
002D81  3  8D CF 2D     	sta tmp2
002D84  3               .if bflag
002D84  3               	lsr tmp1
002D84  3               	ror tmp2
002D84  3               	clc
002D84  3               	lda tmp2
002D84  3               	adc z80_e
002D84  3               	sta z80_e
002D84  3               	lda tmp1
002D84  3               	adc z80_d
002D84  3               	sta z80_d
002D84  3               .endif
002D84  3  18           	clc 			; address of play sprites.
002D85  3  A5 64        	lda z80_e
002D87  3  69 BC        	adc #<sprgfx
002D89  3  85 64        	sta z80_e
002D8B  3  A5 65        	lda z80_d
002D8D  3  69 57        	adc #>sprgfx
002D8F  3  85 65        	sta z80_d
002D91  3               
002D91  3  A5 rr        	lda dispx 		; y coordinate.
002D93  3  29 06        	and #6 			; position within byte boundary.
002D95  3  AA           	tax	 		; low byte of table displacement.
002D96  3               
002D96  3  0A           	asl a	  		; multiply by 32.
002D97  3  0A           	asl a  			; already a multiple
002D98  3  0A           	asl a  			; of 2, so just 4
002D99  3               .if bflag
002D99  3               	sta tmp1
002D99  3               	asl a  			; shifts needed.
002D99  3               	clc
002D99  3               	adc tmp1
002D99  3               .else
002D99  3  0A           	asl a  			; shifts needed.
002D9A  3               .endif
002D9A  3  18           	clc 			; add to sprite address.
002D9B  3  65 64        	adc z80_e
002D9D  3  85 64        	sta z80_e
002D9F  3  90 02        	bcc :+
002DA1  3  E6 65        	inc z80_d
002DA3  3               :
002DA3  3  BD C6 2D     	lda spmask,x		 ; pointer to mask table.
002DA6  3  85 62        	sta z80_c 		; left mask.
002DA8  3  BD C7 2D     	lda spmask+1,x
002DAB  3  85 63        	sta z80_b 		; right mask.
002DAD  3               
002DAD  3               ;------------------------------------------------------------------
002DAD  3               ; Drop into screen address routine.
002DAD  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
002DAD  3               ;------------------------------------------------------------------
002DAD  3               
002DAD  3               scadd:
002DAD  3  A6 rr        	ldx dispy
002DAF  3  E0 C0        	cpx #192
002DB1  3  90 02        	bcc :+
002DB3  3  A2 C0        	ldx #192
002DB5  3               :
002DB5  3  A5 rr        	lda dispx
002DB7  3  4A           	lsr a
002DB8  3  4A           	lsr a
002DB9  3  4A           	lsr a
002DBA  3  18           	clc
002DBB  3  7D 00 E0     	adc SCADTB_lb,x
002DBE  3  85 rr        	sta scraddr
002DC0  3  BD 00 E1     	lda SCADTB_hb,x
002DC3  3  85 rr        	sta scraddr+1
002DC5  3  60           	rts
002DC6  3               
002DC6  3  FF 00        spmask:	.byte $ff,$00
002DC8  3  3F C0        	.byte $3f,$c0
002DCA  3  0F F0        	.byte $0f,$f0
002DCC  3  03 FC        	.byte $03,$fc
002DCE  3               
002DCE  3  00           tmp1:	.byte 0
002DCF  3  00           tmp2:	.byte 0
002DD0  3               
002DD0  3               ;-----------------------------------------------------------------
002DD0  3               ; These are the sprite routines.
002DD0  3               ; sspria = single sprite, old (ix).
002DD0  3               ; ssprib = single sprite, new (ix+5).
002DD0  3               ; sspric = both sprites, old (ix) and new (ix+5).
002DD0  3               ;-----------------------------------------------------------------
002DD0  3               
002DD0  3               sspria:
002DD0  3  20 5A 2D     	jsr gsprad		; get old sprite address.
002DD3  3               sspri2:
002DD3  3  A5 64        	lda z80_e
002DD5  3  8D 45 2E     	sta dline1+1		; Set spritedata address
002DD8  3  8D 54 2E     	sta dline2+1
002DDB  3  A5 65        	lda z80_d
002DDD  3  8D 46 2E     	sta dline1+2
002DE0  3  8D 55 2E     	sta dline2+2
002DE3  3  86 rr        	stx xtmp
002DE5  3  A2 00        	ldx #0			; vertical lines.
002DE7  3               sspri0:
002DE7  3  20 41 2E     	jsr dline		; draw a line.
002DEA  3  E0 10        	cpx #16			; detect block boundery
002DEC  3  D0 02        	bne :+			; skip if not
002DEE  3  E6 rr        	inc scraddr+1		; jump to next blockline
002DF0  3               :
002DF0  3  E0 20        	cpx #32			; check finished
002DF2  3               .if bflag
002DF2  3               	bne :+			; skip if not
002DF2  3               	inc scraddr+1		; jump to next blockline
002DF2  3               	inc z80_hlp+1		; jump to next blockline
002DF2  3               :
002DF2  3               	cpx #48			; check finished
002DF2  3               .endif
002DF2  3  D0 F3        	bne sspri0		; no, repeat
002DF4  3  A6 rr        	ldx xtmp
002DF6  3  60           	rts
002DF7  3               
002DF7  3               ;-----------------------------------------------------------------
002DF7  3               
002DF7  3               ssprib:
002DF7  3  20 3B 2D     	jsr gspran 		; get new sprite address.
002DFA  3  4C D3 2D     	jmp sspri2
002DFD  3               
002DFD  3               ;-----------------------------------------------------------------
002DFD  3               
002DFD  3               sspric:
002DFD  3  20 5A 2D     	jsr gsprad 		; get old sprite address.
002E00  3  A5 64        	lda z80_e
002E02  3  8D 69 2E     	sta ddline1+1		; Set spritedata address
002E05  3  8D 78 2E     	sta ddline2+1
002E08  3  A5 65        	lda z80_d
002E0A  3  8D 6A 2E     	sta ddline1+2
002E0D  3  8D 79 2E     	sta ddline2+2
002E10  3  20 FE 97     	jsr exx  		; store addresses.
002E13  3               
002E13  3  20 3B 2D     	jsr gspran 		; get new sprite addresses.
002E16  3  A5 64        	lda z80_e
002E18  3  8D 45 2E     	sta dline1+1		; Set spritedata address
002E1B  3  8D 54 2E     	sta dline2+1
002E1E  3  A5 65        	lda z80_d
002E20  3  8D 46 2E     	sta dline1+2
002E23  3  8D 55 2E     	sta dline2+2
002E26  3               
002E26  3  86 rr        	stx xtmp
002E28  3  A2 00        	ldx #0			; vertical lines.
002E2A  3               lloop:
002E2A  3  20 41 2E     	jsr dline 		; draw a line.
002E2D  3  CA           	dex
002E2E  3  CA           	dex
002E2F  3  20 65 2E     	jsr ddline 		; delete a line.
002E32  3  E0 10        	cpx #16			; detect block boundery
002E34  3  D0 04        	bne :+			; skip if not
002E36  3  E6 rr        	inc scraddr+1		; jump to next blockline
002E38  3  E6 73        	inc z80_hlp+1		; jump to next blockline
002E3A  3               :
002E3A  3  E0 20        	cpx #32			; check finished
002E3C  3               .if bflag
002E3C  3               	bne :+			; skip if not
002E3C  3               	inc scraddr+1		; jump to next blockline
002E3C  3               	inc z80_hlp+1		; jump to next blockline
002E3C  3               :
002E3C  3               	cpx #48			; check finished
002E3C  3               .endif
002E3C  3  D0 EC        	bne lloop		; no, repeat
002E3E  3  A6 rr        	ldx xtmp
002E40  3  60           	rts
002E41  3               
002E41  3               
002E41  3               ;-----------------------------------------------------------------
002E41  3               
002E41  3               dline:
002E41  3  BC 89 2E     	ldy sprline,x		; point to screenleft
002E44  3               dline1:
002E44  3  BD F9 92     	lda objdta,x		; fetch spriteleft byte
002E47  3  85 61        	sta z80_a		; save spriteright byte
002E49  3  A5 61        	lda z80_a
002E4B  3  25 62        	and z80_c		; mask left
002E4D  3  51 rr        	eor (scraddr),y		; merge with screenleft
002E4F  3  91 rr        	sta (scraddr),y		; write screenleft
002E51  3               sline:
002E51  3  E8           	inx			; next spritebyte
002E52  3  C8           	iny			; point to screenmiddle
002E53  3               dline2:
002E53  3  BD F9 92     	lda objdta,x		; fetch spritemiddle byte
002E56  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
002E58  3  91 rr        	sta (scraddr),y		; write screenmiddle
002E5A  3               sline2:
002E5A  3  C8           	iny			; point to screenright
002E5B  3  A5 61        	lda z80_a		; fetch spriteright byte
002E5D  3  25 63        	and z80_b		; mask right
002E5F  3  51 rr        	eor (scraddr),y		; merge with screenright
002E61  3  91 rr        	sta (scraddr),y		; write screenright
002E63  3               sline3:
002E63  3  E8           	inx			; next spritebyte
002E64  3               
002E64  3  60           	rts
002E65  3               
002E65  3               ;-----------------------------------------------------------------
002E65  3               
002E65  3               ddline:
002E65  3  BC 89 2E     	ldy sprline,x		; point to screenleft
002E68  3               ddline1:
002E68  3  BD F9 92     	lda objdta,x		; fetch spriteleft byte
002E6B  3  85 61        	sta z80_a		; save spriteright byte
002E6D  3  A5 61        	lda z80_a
002E6F  3  25 6E        	and z80_cp		; mask left
002E71  3  51 72        	eor (z80_hlp),y		; merge with screenleft
002E73  3  91 72        	sta (z80_hlp),y		; write screenleft
002E75  3               dsline:
002E75  3  E8           	inx			; next spritebyte
002E76  3  C8           	iny			; point to screenmiddle
002E77  3               ddline2:
002E77  3  BD F9 92     	lda objdta,x		; fetch spritemiddle byte
002E7A  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
002E7C  3  91 72        	sta (z80_hlp),y		; write screenmiddle
002E7E  3               dsline2:
002E7E  3  C8           	iny			; point to screenright
002E7F  3  A5 61        	lda z80_a		; fetch spriteright byte
002E81  3  25 6F        	and z80_bp		; mask right
002E83  3  51 72        	eor (z80_hlp),y		; merge with screenright
002E85  3  91 72        	sta (z80_hlp),y		; write screenright
002E87  3               dsline3:
002E87  3  E8           	inx			; next spritebyte
002E88  3               
002E88  3  60           	rts
002E89  3               
002E89  3               sprline:
002E89  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002E8D  3  40 41 60 61  
002E91  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002E95  3  C0 C1 E0 E1  
002E99  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002E9D  3  40 41 60 61  
002EA1  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002EA5  3  C0 C1 E0 E1  
002EA9  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
002EAD  3  40 41 60 61  
002EB1  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002EB5  3  C0 C1 E0 E1  
002EB9  3               
002EB9  3               ;----------------------------------------------------------------------
002EB9  3               ; Line drawn, now work out next target address.
002EB9  3               ;----------------------------------------------------------------------
002EB9  3               
002EB9  3               nline:
002EB9  3  18           	clc
002EBA  3  A5 rr        	lda scraddr 		; get low byte of address.
002EBC  3  69 20        	adc #$20
002EBE  3  85 rr        	sta scraddr 		; new low byte of address.
002EC0  3  90 02        	bcc :+
002EC2  3  E6 rr        	inc scraddr+1 		; new high byte of address.
002EC4  3               :
002EC4  3  60           	rts
002EC5  3               
002EC5  3               ;-------------------------------------------------------------
002EC5  3               ; Line drawn, now work out next target address.
002EC5  3               ;
002EC5  3               ; Input:
002EC5  3               ;  BP  = right mask
002EC5  3               ;  CP  = left mask
002EC5  3               ;  DEP = spriteaddress
002EC5  3               ;  z80_hlp = screen address
002EC5  3               ;-------------------------------------------------------------
002EC5  3               
002EC5  3               
002EC5  3               ;-----------------------------------------------------------
002EC5  3               ; Animates a sprite.
002EC5  3               ;
002EC5  3               ; Input:
002EC5  3               ;  IX = sprite address
002EC5  3               ;  HL = last sprite address
002EC5  3               ;-----------------------------------------------------------
002EC5  3               
002EC5  3               animsp:
002EC5  3  25 rr        	and frmno
002EC7  3  F0 01        	beq :+
002EC9  3  60           	rts
002ECA  3               :
002ECA  3  A0 06        	ldy #6
002ECC  3  B1 68        	lda (z80_ix),y		; sprite image
002ECE  3  20 29 31     	jsr gfrm		; get frame data.
002ED1  3               
002ED1  3  E6 66        	inc z80_l		; point to frames.
002ED3  3  D0 02        	bne :+
002ED5  3  E6 67        	inc z80_h
002ED7  3               :
002ED7  3  A0 07        	ldy #7
002ED9  3  B1 68        	lda (z80_ix),y		; sprite frame.
002EDB  3  18           	clc
002EDC  3  69 01        	adc #1			; next one along.
002EDE  3  A0 00        	ldy #0
002EE0  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
002EE2  3  90 02        	bcc anims0		; no, not yet.
002EE4  3  A9 00        	lda #0			; start at first frame.
002EE6  3               anims0:
002EE6  3  A0 07        	ldy #7
002EE8  3  91 68        	sta (z80_ix),y		; new frame.
002EEA  3  60           	rts
002EEB  3               
002EEB  3               ;--------------------------------------------------------------
002EEB  3               ; Animate back
002EEB  3               ;
002EEB  3               ; Input:
002EEB  3               ;  IX = sprite address
002EEB  3               ;  HL = last sprite address
002EEB  3               ;--------------------------------------------------------------
002EEB  3               
002EEB  3               animbk:
002EEB  3  25 rr        	and frmno
002EED  3  F0 01        	beq :+
002EEF  3  60           	rts
002EF0  3               :
002EF0  3  A0 06        	ldy #6
002EF2  3  B1 68        	lda (z80_ix),y		; sprite image.
002EF4  3  20 29 31     	jsr gfrm		; get frame data.
002EF7  3               
002EF7  3  E6 66        	inc z80_l 		; point to frames.
002EF9  3  D0 02        	bne :+
002EFB  3  E6 67        	inc z80_h
002EFD  3               :
002EFD  3  A0 07        	ldy #7
002EFF  3  B1 68        	lda (z80_ix),y 		; sprite frame.
002F01  3  F0 03        	beq :+
002F03  3  4C 0A 2F     	jmp rtanb0 		; yes, start at end.
002F06  3               :
002F06  3  A0 00        	ldy #0
002F08  3  B1 66        	lda (z80_hl),y 		; last sprite.
002F0A  3               rtanb0:
002F0A  3  38           	sec
002F0B  3  E9 01        	sbc #1			; next one along.
002F0D  3  4C E6 2E     	jmp anims0		; set new frame.
002F10  3               
002F10  3               ;--------------------------------------------------------------
002F10  3               ; Check for collision with other sprite, strict enforcement.
002F10  3               ;
002F10  3               ; Input:
002F10  3               ;  b		= sprite to test for
002F10  3               ;  ix		= current sprite pointer
002F10  3               ;
002F10  3               ; global:	b
002F10  3               ; local:	x,y,hl,de,skptr
002F10  3               ; calls:	-
002F10  3               ;--------------------------------------------------------------
002F10  3               
002F10  3               sktyp:
002F10  3  A9 07        	lda #<sprtab				; sprite table.
002F12  3  85 66        	sta z80_l
002F14  3  A9 33        	lda #>sprtab
002F16  3  85 67        	sta z80_h
002F18  3               numsp2:
002F18  3  A9 0C        	lda #NUMSPR				; number of sprites.
002F1A  3  85 rr        	sta sktptr
002F1C  3               sktyp0:
002F1C  3  A5 66        	lda z80_l 				; store pointer to sprite.
002F1E  3  85 rr        	sta skptr
002F20  3  A5 67        	lda z80_h
002F22  3  85 rr        	sta skptr+1
002F24  3               
002F24  3  A0 00        	ldy #0
002F26  3  B1 66        	lda (z80_hl),y 				; get sprite type.
002F28  3  C5 63        	cmp z80_b				; is it the type we seek?
002F2A  3  F0 1D        	beq coltyp				; yes, we can use this one.
002F2C  3               sktyp1:
002F2C  3  18           	clc
002F2D  3  A5 rr        	lda skptr				; retrieve sprite pointer.
002F2F  3  69 11        	adc #TABSIZ				; size of each entry.
002F31  3  85 66        	sta z80_l
002F33  3  A5 rr        	lda skptr+1
002F35  3  69 00        	adc #0
002F37  3  85 67        	sta z80_h
002F39  3  C6 rr        	dec sktptr					; one less iteration.
002F3B  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
002F3D  3  A9 00        	lda #0					; default to ROM address - no sprite.
002F3F  3  85 66        	sta z80_l
002F41  3  85 67        	sta z80_h
002F43  3  85 rr        	sta skptr				; store pointer to sprite.
002F45  3  85 rr        	sta skptr+1
002F47  3               
002F47  3  18           	clc					; don't return with zero flag set.
002F48  3  60           	rts 					; didn't find one.
002F49  3               
002F49  3               ;skptr:	.word 0					; search pointer.
002F49  3               ;sktptr:	.byte 0
002F49  3               
002F49  3               coltyp:
002F49  3  A0 00        	ldy #0
002F4B  3  B1 68        	lda (z80_ix),y				; current sprite type.
002F4D  3  C5 63        	cmp z80_b				; seeking sprite of same type?
002F4F  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
002F51  3               colty0:
002F51  3  A0 09        	ldy #9					; distance to x position in table.
002F53  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
002F55  3  85 64        	sta z80_e
002F57  3  88           	dey
002F58  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
002F5A  3  85 65        	sta z80_d
002F5C  3               
002F5C  3               ; Drop into collision detection.
002F5C  3               
002F5C  3               colc16:
002F5C  3  A0 09        	ldy #9
002F5E  3  B1 68        	lda (z80_ix),y			 	; x coord.
002F60  3  38           	sec					; subtract x.
002F61  3  E5 64        	sbc z80_e
002F63  3  B0 05        	bcs  colc1a 				; result is positive.
002F65  3  49 FF        	eor #$ff				; make negative positive.
002F67  3  18           	clc
002F68  3  69 01        	adc #1
002F6A  3               colc1a:
002F6A  3  C9 10        	cmp #16 				; within x range?
002F6C  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
002F6E  3  85 62        	sta z80_c				; store difference.
002F70  3               
002F70  3  A0 08        	ldy #8
002F72  3  B1 68        	lda (z80_ix),y				; y coord.
002F74  3  38           	sec
002F75  3  E5 65        	sbc z80_d				; subtract y.
002F77  3  B0 05        	bcs colc1b				; result is positive.
002F79  3  49 FF        	eor #$ff				; make negative positive.
002F7B  3  18           	clc
002F7C  3  69 01        	adc #1
002F7E  3               colc1b:
002F7E  3  C9 10        	cmp #16					; within y range?
002F80  3  B0 AA        	bcs sktyp1 				; no - they've missed.
002F82  3  18           	clc					; add x difference.
002F83  3  65 62        	adc z80_c
002F85  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
002F87  3  B0 02        	bcs :+
002F89  3  38           	sec
002F8A  3  60           	rts 					; carry set if there's a collision.
002F8B  3               :
002F8B  3  4C 2C 2F     	jmp sktyp1				; try next sprite in table.
002F8E  3               colty1:
002F8E  3  A5 68        	lda z80_x  				; compare the two.
002F90  3  C5 66        	cmp z80_l
002F92  3  D0 09        	bne end_col
002F94  3  A5 69        	lda z80_i
002F96  3  C5 67        	cmp z80_h
002F98  3  D0 03        	bne end_col
002F9A  3  4C 2C 2F     	jmp sktyp1 				; addresses are identical.
002F9D  3               end_col:
002F9D  3  4C 51 2F     	jmp colty0
002FA0  3               
002FA0  3               ;-----------------------------------------------------------
002FA0  3               ; Display number, left aligned
002FA0  3               ;
002FA0  3               ; Input:
002FA0  3               ;  a		= number
002FA0  3               ;
002FA0  3               ; global:	-
002FA0  3               ; local:	a,y,bc,hl,displ0
002FA0  3               ; calls:	num2ch,dmsg3
002FA0  3               ;-----------------------------------------------------------
002FA0  3               
002FA0  3               disply:
002FA0  3  85 61        	sta z80_a
002FA2  3  A9 C8        	lda #<displ0				; display workspace.
002FA4  3  85 62        	sta z80_c
002FA6  3  A9 2F        	lda #>displ0
002FA8  3  85 63        	sta z80_b
002FAA  3  A5 61        	lda z80_a
002FAC  3  20 46 22     	jsr num2ch				; convert accumulator to string.
002FAF  3               displ1:
002FAF  3  C6 62        	dec z80_c				; back one character.
002FB1  3  D0 02        	bne :+
002FB3  3  C6 63        	dec z80_b
002FB5  3               :
002FB5  3  A0 00        	ldy #0
002FB7  3  B1 62        	lda (z80_bc),y				; fetch digit.
002FB9  3  09 80        	ora #128				; insert end marker.
002FBB  3  91 62        	sta (z80_bc),y				; new value.
002FBD  3               
002FBD  3  A9 C8        	lda #<displ0				; display space.
002FBF  3  85 66        	sta z80_l
002FC1  3  A9 2F        	lda #>displ0
002FC3  3  85 67        	sta z80_h
002FC5  3  4C 76 2A     	jmp dmsg3				; display the string.
002FC8  3               
002FC8  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
002FCC  3               
002FCC  3               ;----------------------------------------------------------------
002FCC  3               ; Initialise screen.
002FCC  3               ;
002FCC  3               ; global:	roomtb,scno
002FCC  3               ; local:	-
002FCC  3               ; calls:	tstcs
002FCC  3               ;----------------------------------------------------------------
002FCC  3               
002FCC  3               initsc:
002FCC  3  AD E4 33     	lda roomtb 			; whereabouts in the map are we?
002FCF  3  20 D9 2F     	jsr tstsc 			; find displacement.
002FD2  3  C9 FF        	cmp #255 			; is it valid?
002FD4  3  F0 02        	beq init_end 			; no, it's rubbish.
002FD6  3  85 rr        	sta scno			; store new room number.
002FD8  3               init_end:
002FD8  3  60           	rts
002FD9  3               
002FD9  3               ;----------------------------------------------------------------
002FD9  3               ; Test screen.
002FD9  3               ;
002FD9  3               ; global:	-
002FD9  3               ; local:	x
002FD9  3               ; calls:	-
002FD9  3               ;----------------------------------------------------------------
002FD9  3               
002FD9  3               tstsc:
002FD9  3  85 rr        	sta tmproom
002FDB  3  18           	clc
002FDC  3  69 06        	adc #MAPWID 			; add width in case we"re negative.
002FDE  3  AA           	tax 				; add displacement to map data.
002FDF  3  BD 10 34     	lda mapdat-MAPWID,x 		; find room number there.
002FE2  3  60           	rts
002FE3  3               
002FE3  3               ;tmproom:	.byte 0
002FE3  3               
002FE3  3               ;--------------------------
002FE3  3               ; Screen left.
002FE3  3               ;--------------------------
002FE3  3               
002FE3  3               scrl:
002FE3  3  AD E4 33     	lda roomtb 			; present room table pointer.
002FE6  3  38           	sec
002FE7  3  E9 01        	sbc #1				; room left.
002FE9  3               scrl0:
002FE9  3  20 D9 2F     	jsr tstsc			; test screen.
002FEC  3  C9 FF        	cmp #255			; is there a screen this way?
002FEE  3  D0 01        	bne :+
002FF0  3  60           	rts				; no, return to loop.
002FF1  3               :
002FF1  3  A5 rr        	lda tmproom			; restore room displacement.
002FF3  3  8D E4 33     	sta roomtb			; new room table position.
002FF6  3               scrl1:
002FF6  3  20 CC 2F     	jsr initsc 			; set new screen.
002FF9  3  A9 02        	lda #2
002FFB  3  85 rr        	sta restfl 			; set it.
002FFD  3  60           	rts
002FFE  3               scrr:
002FFE  3  AD E4 33     	lda roomtb 			; room table pointer.
003001  3  18           	clc
003002  3  69 01        	adc #1				; room right.
003004  3  4C E9 2F     	jmp scrl0
003007  3               scru:
003007  3  AD E4 33     	lda roomtb 			; room table pointer.
00300A  3  38           	sec
00300B  3  E9 06        	sbc #MAPWID 			; room up.
00300D  3  4C E9 2F     	jmp scrl0
003010  3               scrd:
003010  3  AD E4 33     	lda roomtb 			; room table pointer.
003013  3  18           	clc
003014  3  69 06        	adc #MAPWID 			; room down.
003016  3  4C E9 2F     	jmp scrl0
003019  3               
003019  3               ;-----------------------------------------
003019  3               ; Jump to new screen.
003019  3               ;-----------------------------------------
003019  3               
003019  3               nwscr:
003019  3  A2 00        	ldx #0				; start of map data.
00301B  3               nwscr0:
00301B  3  DD 16 34     	cmp mapdat,x
00301E  3  F0 06        	beq nwscr1			; have we found a match for screen?
003020  3  E8           	inx 				; next room.
003021  3  E0 50        	cpx #80				; zero room count, 80 to search.
003023  3  D0 F6        	bne nwscr0			; keep looking.
003025  3  60           	rts
003026  3               nwscr1:
003026  3  8E E4 33     	stx roomtb			; set the map position.
003029  3  4C F6 2F     	jmp scrl1			; draw new room.
00302C  3               
00302C  3               
00302C  3               ;----------------------------------------------------------
00302C  3               ; Gravity processing.
00302C  3               ;----------------------------------------------------------
00302C  3               
00302C  3               grav:
00302C  3  A0 0D        	ldy #13
00302E  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003030  3  85 66        	sta z80_l
003032  3  A0 0E        	ldy #14
003034  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003036  3  85 67        	sta z80_h
003038  3  05 66        	ora z80_l			; merge in low byte.
00303A  3  D0 01        	bne :+
00303C  3  60           	rts				; if neither is set, we're not in the air.
00303D  3               :
00303D  3  A0 00        	ldy #0
00303F  3  B1 66        	lda (z80_hl),y			; pixels to move.
003041  3  85 61        	sta z80_a
003043  3  C9 63        	cmp #99				; reached the end?
003045  3  D0 0C        	bne grav0			; no, continue.
003047  3               grav2:
003047  3  C6 66        	dec z80_l			; go back to previous value.
003049  3  C9 FF        	cmp #$ff
00304B  3  D0 02        	bne :+
00304D  3  C6 67        	dec z80_h
00304F  3               :
00304F  3  B1 66        	lda (z80_hl),y			; fetch that from table.
003051  3  85 61        	sta z80_a
003053  3               grav0:
003053  3  E6 66        	inc z80_l			; point to next table entry.
003055  3  D0 02        	bne :+
003057  3  E6 67        	inc z80_h
003059  3               :
003059  3  A5 66        	lda z80_l
00305B  3  A0 0D        	ldy #13
00305D  3  91 68        	sta (z80_ix),y			; store new pointer low.
00305F  3  A5 67        	lda z80_h
003061  3  A0 0E        	ldy #14
003063  3  91 68        	sta (z80_ix),y			; store new pointer high.
003065  3               grav1:
003065  3  A5 61        	lda z80_a
003067  3  D0 01        	bne :+				; any movement required?
003069  3  60           	rts				; no, not this time.
00306A  3               :
00306A  3  A5 61        	lda z80_a
00306C  3  C9 80        	cmp #128			; is it up or down?
00306E  3  B0 15        	bcs gravu			; it's up.
003070  3               gravd:
003070  3  85 63        	sta z80_b			; set pixels to move.
003072  3               gravd0:
003072  3  20 E5 26     	jsr cangd			; can we go down?
003075  3  D0 28        	bne gravst			; can't move down, so stop.
003077  3  A0 08        	ldy #8
003079  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
00307B  3  18           	clc
00307C  3  69 01        	adc #1
00307E  3  91 68        	sta (z80_ix),y
003080  3  C6 63        	dec z80_b
003082  3  D0 EE        	bne gravd0
003084  3  60           	rts
003085  3               gravu:
003085  3  49 FF        	eor #$ff			; flip the sign so it's positive.
003087  3  18           	clc
003088  3  69 01        	adc #1
00308A  3  85 63        	sta z80_b			; set pixels to move.
00308C  3               gravu0:
00308C  3  20 B0 26     	jsr cangu			; can we go up?
00308F  3  D0 6E        	bne ifalls			; can't move up, go down next.
003091  3  A0 08        	ldy #8
003093  3  B1 68        	lda (z80_ix),y
003095  3  38           	sec
003096  3  E9 01        	sbc #1
003098  3  91 68        	sta (z80_ix),y			; adjust new x coord.
00309A  3  C6 63        	dec z80_b
00309C  3  D0 EE        	bne gravu0
00309E  3  60           	rts
00309F  3               gravst:
00309F  3  A0 0D        	ldy #13
0030A1  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0030A3  3  85 66        	sta z80_l
0030A5  3  A0 0E        	ldy #14
0030A7  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0030A9  3  85 67        	sta z80_h
0030AB  3               
0030AB  3  A9 00        	lda #0				; null value in pointer.
0030AD  3  A0 0D        	ldy #13
0030AF  3  91 68        	sta (z80_ix),y			; store new pointer low.
0030B1  3  C8           	iny
0030B2  3  91 68        	sta (z80_ix),y			; store new pointer high.
0030B4  3               
0030B4  3  A0 00        	ldy #0
0030B6  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
0030B8  3  C9 63        	cmp #99				; is it the end marker?
0030BA  3               evftf:
0030BA  3  F0 01        	beq :+				; yes, fallen too far.
0030BC  3  60           	rts
0030BD  3               :
0030BD  3  4C 41 52     	jmp evnt15			; EVENT FELLTOOFAR
0030C0  3               
0030C0  3               ;------------------------------------------------
0030C0  3               ; Initiate fall check.
0030C0  3               ;------------------------------------------------
0030C0  3               
0030C0  3               ifall:
0030C0  3  A0 0D        	ldy #13
0030C2  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0030C4  3  85 66        	sta z80_l
0030C6  3  A0 0E        	ldy #14
0030C8  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0030CA  3  85 67        	sta z80_h			; high byte in accumulator.
0030CC  3  05 66        	ora z80_l			; merge in low byte.
0030CE  3  F0 01        	beq :+
0030D0  3  60           	rts				; if either is set, we're already in the air.
0030D1  3               :
0030D1  3  A0 09        	ldy #9
0030D3  3  B1 68        	lda (z80_ix),y			; y coordinate.
0030D5  3  85 rr        	sta dispx
0030D7  3  A0 08        	ldy #8
0030D9  3  B1 68        	lda (z80_ix),y			; look x coordinate.
0030DB  3  18           	clc
0030DC  3               numsp7:
0030DC  3  69 10        	adc #SPR_HGT			; add 16 pixels.
0030DE  3  85 rr        	sta dispy			; set up test coordinates.
0030E0  3  20 6C 29     	jsr tstbl			; get map address.
0030E3  3  20 87 28     	jsr plchk			; block, platform check.
0030E6  3  F0 01        	beq :+
0030E8  3  60           	rts				; it's solid, don't fall.
0030E9  3               :
0030E9  3  E6 rr        	inc bufaddr			; look right one cell.
0030EB  3  20 87 28     	jsr plchk			; block, platform check.
0030EE  3  F0 01        	beq :+
0030F0  3  60           	rts				; it's solid, don't fall.
0030F1  3               :
0030F1  3  A5 rr        	lda dispx			; y coordinate.
0030F3  3  29 07        	and #7				; position straddling block cells.
0030F5  3  F0 08        	beq ifalls			; no more checks needed.
0030F7  3  E6 rr        	inc bufaddr			; look to third cell.
0030F9  3  20 87 28     	jsr plchk			; block, platform check.
0030FC  3  F0 01        	beq :+
0030FE  3  60           	rts				; it's solid, don't fall.
0030FF  3               :
0030FF  3               ifalls:
0030FF  3  A9 45        	lda #<jtab			; jump table start.
003101  3  85 66        	sta z80_l
003103  3  A9 96        	lda #>jtab
003105  3  85 67        	sta z80_h
003107  3               ifal0:
003107  3  E6 66        	inc z80_l			; point to next value.
003109  3  D0 02        	bne :+
00310B  3  E6 67        	inc z80_h
00310D  3               :
00310D  3  A0 00        	ldy #0
00310F  3  B1 66        	lda (z80_hl),y			; fetch value.
003111  3  F0 F4        	beq ifal0			; no, get next value.
003113  3  C9 63        	cmp #99				; reached end of table?
003115  3  D0 01        	bne :+
003117  3  60           	rts				; yes, don't fall.
003118  3               :
003118  3  C9 80        	cmp #128			; is it going up?
00311A  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
00311C  3               
00311C  3  A0 0D        	ldy #13
00311E  3  A5 66        	lda z80_l
003120  3  91 68        	sta (z80_ix),y 			; set jump low.
003122  3  A0 0E        	ldy #14
003124  3  A5 67        	lda z80_h
003126  3  91 68        	sta (z80_ix),y 			; set jump high.
003128  3  60           	rts
003129  3               
003129  3               
003129  3               ;----------------------------------------------------
003129  3               ; Get frame data for a particular sprite.
003129  3               ; Input:
003129  3               ;  a		= framenumer
003129  3               ; Output:
003129  3               ;  hl		= frame address
003129  3               ;
003129  3               ; global:	hl,frmptr
003129  3               ; local:	-
003129  3               ; calls:	-
003129  3               ;----------------------------------------------------
003129  3               
003129  3               gfrm:
003129  3  0A           	asl a	 		 	; multiple of 2.
00312A  3  18           	clc
00312B  3  6D 1A 20     	adc frmptr 			; frames used by game.
00312E  3  85 66        	sta z80_l
003130  3  AD 1B 20     	lda frmptr+1
003133  3  69 00        	adc #0
003135  3  85 67        	sta z80_h 			; point to frame start.
003137  3  60           	rts
003138  3               
003138  3               ;----------------------------------------------------
003138  3               ; Find sprite list for current room.
003138  3               ;
003138  3               ; global:	hl
003138  3               ; local:	x,y
003138  3               ; calls:	-
003138  3               ;----------------------------------------------------
003138  3               
003138  3               sprlst:
003138  3  A9 97        	lda #<nmedat 			; list of enemy sprites.
00313A  3  85 66        	sta z80_l
00313C  3  A9 91        	lda #>nmedat
00313E  3  85 67        	sta z80_h
003140  3  A6 rr        	ldx scno 			; screen number.
003142  3  D0 01        	bne sprls2 			; is it the first screen?
003144  3  60           	rts 				; yes, don't need to search data.
003145  3               sprls2:
003145  3  A0 00        	ldy #0
003147  3               sprls1:
003147  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
003149  3  C9 FF        	cmp #255			; is it an end marker?
00314B  3  F0 0E        	beq sprls0 			; yes, end of this room.
00314D  3               
00314D  3  18           	clc 				; point to next sprite in list.
00314E  3  A5 66        	lda z80_l
003150  3  69 04        	adc #NMESIZ
003152  3  85 66        	sta z80_l
003154  3  90 02        	bcc :+
003156  3  E6 67        	inc z80_h
003158  3               :
003158  3  4C 47 31     	jmp sprls1 			; continue until end of room.
00315B  3               sprls0:
00315B  3  E6 66        	inc z80_l 			; point to start of next screen.s
00315D  3  D0 02        	bne :+
00315F  3  E6 67        	inc z80_h
003161  3               :
003161  3  CA           	dex
003162  3  D0 E3        	bne sprls1 			; continue until room found.
003164  3  60           	rts
003165  3               
003165  3               
003165  3               ;----------------------------------------------------
003165  3               ; Clear all but a single player sprite.
003165  3               ;
003165  3               ; global:	-
003165  3               ; local:	x,y,ix
003165  3               ; calls:	-
003165  3               ;----------------------------------------------------
003165  3               
003165  3               nspr:
003165  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003167  3  85 rr        	sta sprcnt
003169  3  A9 07        	lda #<sprtab 			; sprite table.
00316B  3  85 68        	sta z80_x
00316D  3  A9 33        	lda #>sprtab
00316F  3  85 69        	sta z80_i
003171  3               nspr0:
003171  3  A0 00        	ldy #0 				; fetch sprite type.
003173  3  B1 68        	lda (z80_ix),y 			; is it a player?
003175  3  F0 1A        	beq nspr1 			; yes, keep this one.
003177  3               
003177  3  A9 FF        	lda #255
003179  3  A0 00        	ldy #0 				; fetch sprite type.
00317B  3  91 68        	sta (z80_ix),y 			; delete sprite.
00317D  3  A0 05        	ldy #5
00317F  3  91 68        	sta (z80_ix),y 			; remove next type.
003181  3               
003181  3  18           	clc	 			; next sprite.
003182  3  A5 68        	lda z80_x
003184  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003186  3  85 68        	sta z80_x
003188  3  90 02        	bcc :+
00318A  3  E6 69        	inc z80_i
00318C  3               :
00318C  3  C6 rr        	dec sprcnt	 			; one less space in the table.
00318E  3  D0 E1        	bne nspr0
003190  3  60           	rts
003191  3               nspr1:
003191  3  A9 FF        	lda #255
003193  3  A0 00        	ldy #0
003195  3  91 68        	sta (z80_ix),y 			; delete sprite.
003197  3               
003197  3  18           	clc	 			; point to next sprite.
003198  3  A5 68        	lda z80_x
00319A  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00319C  3  85 68        	sta z80_x
00319E  3  90 02        	bcc :+
0031A0  3  E6 69        	inc z80_i
0031A2  3               :
0031A2  3  C6 rr        	dec sprcnt	 			; one less to do.
0031A4  3  D0 01        	bne nspr2
0031A6  3  60           	rts
0031A7  3               nspr2:
0031A7  3  A9 FF        	lda #255
0031A9  3  A0 00        	ldy #0
0031AB  3  91 68        	sta (z80_ix),y 			; delete sprite.
0031AD  3  A0 05        	ldy #5
0031AF  3  91 68        	sta (z80_ix),y 			; remove next type.
0031B1  3               
0031B1  3  18           	clc	 			; next sprite.
0031B2  3  A5 68        	lda z80_x
0031B4  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0031B6  3  85 68        	sta z80_x
0031B8  3  90 02        	bcc :+
0031BA  3  E6 69        	inc z80_i
0031BC  3               :
0031BC  3  C6 rr        	dec sprcnt	 			; one less space in table.
0031BE  3  D0 E7        	bne nspr2
0031C0  3  60           	rts
0031C1  3               
0031C1  3               ;----------------------------------------------------------
0031C1  3               ; Two initialisation routines.
0031C1  3               ; Initialise sprites - copy everything from list to table.
0031C1  3               ;
0031C1  3               ; global:	-
0031C1  3               ; local:	x,y,ix
0031C1  3               ; calls:	cpsp
0031C1  3               ;----------------------------------------------------------
0031C1  3               
0031C1  3               ispr:
0031C1  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0031C3  3  85 rr        	sta sprcnt
0031C5  3  A9 07        	lda #<sprtab			; sprite table.
0031C7  3  85 68        	sta z80_x
0031C9  3  A9 33        	lda #>sprtab
0031CB  3  85 69        	sta z80_i
0031CD  3               ispr2:
0031CD  3  A0 00        	ldy #0
0031CF  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0031D1  3  C9 FF        	cmp #255 			; is it an end marker?
0031D3  3  D0 01        	bne :+
0031D5  3  60           	rts 				; yes, no more to do.
0031D6  3               :
0031D6  3               ispr1:
0031D6  3  A0 00        	ldy #0
0031D8  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
0031DA  3  C9 FF        	cmp #255 			; is it enabled yet?
0031DC  3  D0 08        	bne ispr4			; yes, try another slot.
0031DE  3               
0031DE  3  A0 05        	ldy #5
0031E0  3  B1 68        	lda (z80_ix),y		 	; next type.
0031E2  3  C9 FF        	cmp #255 			; is it enabled yet?
0031E4  3  F0 10        	beq ispr3 			; no, process this one.
0031E6  3               ispr4:
0031E6  3  18           	clc 				; next sprite.
0031E7  3  A5 68        	lda z80_x
0031E9  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0031EB  3  85 68        	sta z80_x
0031ED  3  90 02        	bcc :+
0031EF  3  E6 69        	inc z80_i
0031F1  3               :
0031F1  3  C6 rr        	dec sprcnt
0031F3  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0031F5  3  60           	rts  				; no more room in table.
0031F6  3               ispr3:
0031F6  3  20 49 32     	jsr cpsp			; initialise a sprite.
0031F9  3  C6 rr        	dec sprcnt			; one less space in the table.
0031FB  3  D0 D0        	bne ispr2
0031FD  3  60           	rts
0031FE  3               
0031FE  3               
0031FE  3               ;-----------------------------------------------------------------------
0031FE  3               ; Initialise sprites - but not player, we're keeping the old one.
0031FE  3               ;
0031FE  3               ; global:	-
0031FE  3               ; local:	x,y,ix
0031FE  3               ; calls:	cpsp
0031FE  3               ;-----------------------------------------------------------------------
0031FE  3               
0031FE  3               kspr:
0031FE  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
003200  3  A9 07        	lda #<sprtab 			; sprite table.
003202  3  85 68        	sta z80_x
003204  3  A9 33        	lda #>sprtab
003206  3  85 69        	sta z80_i
003208  3               kspr2:
003208  3  A0 00        	ldy #0
00320A  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00320C  3  C9 FF        	cmp #255 			; is it an end marker?
00320E  3  D0 01        	bne :+
003210  3  60           	rts 				; yes, no more to do.
003211  3               :
003211  3  C9 00        	cmp #0
003213  3  D0 0E        	bne kspr1 			; no, add to table as normal.
003215  3               
003215  3  18           	clc 				; next sprite.
003216  3  A5 66        	lda z80_l
003218  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
00321A  3  85 66        	sta z80_l
00321C  3  90 02        	bcc :+
00321E  3  E6 67        	inc z80_h
003220  3               :
003220  3  4C 08 32     	jmp kspr2
003223  3               kspr1:
003223  3  A0 00        	ldy #0 				; fetch sprite type.
003225  3  B1 68        	lda (z80_ix),y
003227  3  C9 FF        	cmp #255 			; is it enabled yet?
003229  3  D0 08        	bne kspr4 			; yes, try another slot.
00322B  3               
00322B  3  A0 05        	ldy #5 				; next type.
00322D  3  B1 68        	lda (z80_ix),y
00322F  3  C9 FF        	cmp #255 			; is it enabled yet?
003231  3  F0 0F        	beq kspr3 			; no, process this one.
003233  3               kspr4:
003233  3  18           	clc 				; next sprite.
003234  3  A5 68        	lda z80_x
003236  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003238  3  85 68        	sta z80_x
00323A  3  90 02        	bcc :+
00323C  3  E6 69        	inc z80_i
00323E  3               :
00323E  3  CA           	dex	 			; repeat for remaining sprites.
00323F  3  D0 E2        	bne kspr1
003241  3  60           	rts  				; no more room in table.
003242  3               kspr3:
003242  3  20 49 32     	jsr cpsp 			; copy sprite to table.
003245  3  CA           	dex	 			; one less space in the table.
003246  3  D0 C0        	bne kspr2
003248  3  60           	rts
003249  3               
003249  3               ;----------------------------------------------
003249  3               ; Copy sprite from list to table.
003249  3               ;
003249  3               ; global:	hl,ix
003249  3               ; local:	y
003249  3               ; calls:	evnt09
003249  3               ;----------------------------------------------
003249  3               
003249  3               cpsp:
003249  3  A0 00        	ldy #0				; fetch byte from table.
00324B  3  B1 66        	lda (z80_hl),y
00324D  3  91 68        	sta (z80_ix),y			; set up type.
00324F  3  A0 05        	ldy #PAM1ST
003251  3  91 68        	sta (z80_ix),y 			; set up type.
003253  3               
003253  3  E6 66        	inc z80_l 			; move to next byte.
003255  3  D0 02        	bne :+
003257  3  E6 67        	inc z80_h
003259  3               :
003259  3  A0 00        	ldy #0 				; fetch byte from table.
00325B  3  B1 66        	lda (z80_hl),y
00325D  3  A0 06        	ldy #6
00325F  3  91 68        	sta (z80_ix),y			; set up image.
003261  3               
003261  3  E6 66        	inc z80_l 			; move to next byte.
003263  3  D0 02        	bne :+
003265  3  E6 67        	inc z80_h
003267  3               :
003267  3  A0 00        	ldy #0
003269  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
00326B  3  A0 08        	ldy #8
00326D  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00326F  3               
00326F  3  A9 C8        	lda #200 			; set initial coordinate off screen.
003271  3  A0 03        	ldy #3
003273  3  91 68        	sta (z80_ix),y
003275  3               
003275  3  E6 66        	inc z80_l 			; move to next byte.
003277  3  D0 02        	bne :+
003279  3  E6 67        	inc z80_h
00327B  3               :
00327B  3  A0 00        	ldy #0 				; fetch byte from table.
00327D  3  B1 66        	lda (z80_hl),y
00327F  3  A0 09        	ldy #9
003281  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003283  3               
003283  3  E6 66        	inc z80_l 			; move to next byte.
003285  3  D0 02        	bne :+
003287  3  E6 67        	inc z80_h
003289  3               :
003289  3  A9 00        	lda #0				; zeroes in accumulator.
00328B  3  A0 07        	ldy #7 				; reset frame number.
00328D  3  91 68        	sta (z80_ix),y
00328F  3  A0 0A        	ldy #10 			; reset direction.
003291  3  91 68        	sta (z80_ix),y
003293  3  A0 0D        	ldy #13				; reset jump pointer low.
003295  3  91 68        	sta (z80_ix),y
003297  3  A0 0E        	ldy #14	 			; reset jump pointer high.
003299  3  91 68        	sta (z80_ix),y
00329B  3               
00329B  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
00329D  3  A0 10        	ldy #16
00329F  3  91 68        	sta (z80_ix),y
0032A1  3               evis0:
0032A1  3  A5 69        	lda z80_i
0032A3  3  48           	pha
0032A4  3  A5 68        	lda z80_x
0032A6  3  48           	pha
0032A7  3  A5 67        	lda z80_h
0032A9  3  48           	pha
0032AA  3  A5 66        	lda z80_l
0032AC  3  48           	pha
0032AD  3               
0032AD  3  20 BE 50     	jsr evnt09 			; perform event.
0032B0  3               
0032B0  3  68           	pla
0032B1  3  85 66        	sta z80_l
0032B3  3  68           	pla
0032B4  3  85 67        	sta z80_h
0032B6  3  68           	pla
0032B7  3  85 68        	sta z80_x
0032B9  3  68           	pla
0032BA  3  85 69        	sta z80_i
0032BC  3               
0032BC  3  18           	clc
0032BD  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0032BF  3  69 11        	adc #TABSIZ		 	; next sprite.
0032C1  3  85 68        	sta z80_x
0032C3  3  90 02        	bcc :+
0032C5  3  E6 69        	inc z80_i
0032C7  3               :
0032C7  3  60           	rts
0032C8  3               
0032C8  3               
0032C8  3               ;-------------------------------------
0032C8  3               ; Clear the play area window.
0032C8  3               ;-------------------------------------
0032C8  3               
0032C8  3               clw:
0032C8  3  AD 26 20     	lda wintop			; get coordinates of window.
0032CB  3  85 rr        	sta dispy			; put into dispx for calculation.
0032CD  3  AD 27 20     	lda winlft
0032D0  3  85 rr        	sta dispx
0032D2  3               
0032D2  3  AD 28 20     	lda winhgt			; height of window.
0032D5  3  85 rr        	sta rrow			; copy to b register.
0032D7  3               clw3:
0032D7  3  AD 29 20     	lda winwid 			; width of window.
0032DA  3  85 rr        	sta rcol
0032DC  3               clw2:
0032DC  3  20 DD 24     	jsr gprad 			; get print address.
0032DF  3  A9 00        	lda #0				; zero byte to write.
0032E1  3  A2 07        	ldx #7				; pixel height of each cell.
0032E3  3               clw1:
0032E3  3  BC 63 25     	ldy scrtab,x
0032E6  3  91 rr        	sta (scraddr),y 			; copy to screen.
0032E8  3  CA           	dex				; next screen row down.
0032E9  3  10 F8        	bpl clw1
0032EB  3               
0032EB  3  E6 rr        	inc dispx			; next column.
0032ED  3  C6 rr        	dec rcol			; one less to do.
0032EF  3  D0 EB        	bne clw2			; repeat for remaining columns.
0032F1  3               
0032F1  3  AD 27 20     	lda winlft			; get left edge.
0032F4  3  85 rr        	sta dispx 			; reset x.
0032F6  3  E6 rr        	inc dispy 			; next line down.
0032F8  3               
0032F8  3  C6 rr        	dec rrow
0032FA  3  D0 DB        	bne clw3			; repeat down the screen.
0032FC  3               
0032FC  3  AD 26 20     	lda wintop			; get coordinates of window.
0032FF  3  85 rr        	sta chary			; put into display position.
003301  3  AD 27 20     	lda winlft
003304  3  85 rr        	sta charx
003306  3  60           	rts
003307  3               
003307  3               
003307  3               ;----------------------------------------------------------
003307  3               ; Effects code.
003307  3               ; Ticker routine is called 25 times per second.
003307  3               ;
003307  3               ; HL = txtscr = left text screen address
003307  3               ; DE = txtscr+txtwid-1 = right text screen address
003307  3               ; BC = txtpos = text scroller position
003307  3               ;
003307  3               ;----------------------------------------------------------
003307  3               
003307  3               .if sflag
003307  3               scrly:
003307  3               	rts
003307  3               	.word txtscr         	; get left screen address.
003307  3               	sta scr_l
003307  3               	lda txtscr+1
003307  3               	sta scr_l+1
003307  3               	sta scr_r+1
003307  3               
003307  3               	stx xtmp
003307  3               
003307  3               	clc         		; get right screen address.
003307  3               	lda scr_l
003307  3               	adc txtwid
003307  3               	sta scr_r
003307  3               	dec scr_r
003307  3               scrly1:
003307  3               	ldy txtwid		; set txtwide
003307  3               	dey
003307  3               	clc
003307  3               scrly0:
003307  3               	lda (scr_l),y		; scroll 1 line
003307  3               	rol a
003307  3               	sta (scr_l),y
003307  3               	dey
003307  3               	bpl scrly0
003307  3               
003307  3               	clc			; point to next line
003307  3               	lda scr_l
003307  3               	adc #32
003307  3               	sta scr_l
003307  3               	bcc scrly1		; repeat 8 times
003307  3               
003307  3               	lda txtpos 		; get text pointer.
003307  3               	sta scr_txt
003307  3               	lda txtpos+1
003307  3               	sta scr_txt+1
003307  3               
003307  3               	ldy #0
003307  3               	lda (scr_txt),y 		; find character we're displaying.
003307  3               	and #127 		; remove end marker bit if applicable.
003307  3               	cmp #13			; is it newline?
003307  3               	bne scrly5 		; no, it's okay.
003307  3               	lda #32			; convert to a space instead.
003307  3               scrly5:
003307  3               	sta fntaddr		; calculate char address
003307  3               	lda #0
003307  3               	sta fntaddr+1
003307  3               	asl fntaddr  		; multiply char by 8.
003307  3               	rol fntaddr+1
003307  3               	asl fntaddr
003307  3               	rol fntaddr+1
003307  3               	asl fntaddr
003307  3               	rol fntaddr+1
003307  3               	lda fntaddr
003307  3               	clc
003307  3               	adc #<(FONT-256)
003307  3               	sta scrly3+1		; that's the low byte.
003307  3               	lda fntaddr+1
003307  3               	adc #>(FONT-256)
003307  3               	sta scrly3+2		; add displacement.
003307  3               
003307  3               	ldx #0
003307  3               scrly3:
003307  3               	lda $3333,x		; get image of char line.
003307  3               	and txtbit
003307  3               	beq scrly2		; don't plot pixel
003307  3               	ldy scrline,x
003307  3               	lda (scr_r),y
003307  3               	clc
003307  3               	ora #1
003307  3               	sta (scr_r),y		; plot pixel
003307  3               scrly2:
003307  3               	inx			; next line of char.
003307  3               	cpx #8
003307  3               	bne scrly3
003307  3               
003307  3               	lsr txtbit		; bit of text to display.
003307  3               	bcs :+
003307  3               	rts
003307  3               :
003307  3               	ldy #0
003307  3               	lda (scr_txt),y 	; what was the character?
003307  3               	asl a	  		; end of message?
003307  3               	bcs scrly4
003307  3               	inc txtpos
003307  3               	bne :+
003307  3               	inc txtpos+1
003307  3               :
003307  3               	jmp scrly6 		; not yet - continue.
003307  3               scrly4:
003307  3               	lda txtini 		; start of scrolling message.
003307  3               	sta txtpos
003307  3               	lda txtini+1
003307  3               	sta txtpos+1
003307  3               scrly6:
003307  3               	lda #128
003307  3               	sta txtbit
003307  3               	ldx xtmp
003307  3               	rts
003307  3               
003307  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003307  3               
003307  3               ;-------------------------------------------------------
003307  3               ; Entry TICKER command
003307  3               ;
003307  3               ; Entry:
003307  3               ;  z80_b = message nr
003307  3               ;  z80_c = width
003307  3               ;-------------------------------------------------------
003307  3               
003307  3               iscrly:
003307  3               	jsr prescr 		; set up display position.
003307  3               
003307  3               	lda #<msgdat 		; text messages.
003307  3               	sta z80_l
003307  3               	lda #>msgdat
003307  3               	sta z80_h
003307  3               
003307  3               	lda z80_c 		; width.
003307  3               	sec
003307  3               	sbc #1			; subtract one.
003307  3               	cmp #32 		; is it between 1 and 32?
003307  3               	bcc :+
003307  3               	lda #$60
003307  3               	jmp iscrl0		; no, disable messages.
003307  3               :
003307  3               	ldx z80_b		; message number.
003307  3               	jsr getwrd 		; find message start.
003307  3               
003307  3               	lda z80_l		; set initial text position.
003307  3               	sta txtini
003307  3               	lda z80_h
003307  3               	sta txtini+1
003307  3               
003307  3               	lda #$ad		; code for lda adrr
003307  3               iscrl0:
003307  3               	sta scrly		; enable/disable scrolling routine.
003307  3               
003307  3               	jsr prescr 		; set up display position.
003307  3               	jsr gprad 		; get print address.
003307  3               
003307  3               	lda scraddr 		; set text screen address.
003307  3               	sta txtscr
003307  3               	lda scraddr+1
003307  3               	sta txtscr+1
003307  3               
003307  3               	lda z80_c		; width.
003307  3               	sta txtwid		; set width in working storage.
003307  3               
003307  3               	lda #128 		; start with leftmost bit.
003307  3               	sta txtbit
003307  3               
003307  3               	jmp scrly4
003307  3               .endif
003307  3               
003307  3               ;------------------------------------------------------------------
003307  3               ; Dig routine, conditional assembly depending on dflag
003307  3               ;------------------------------------------------------------------
003307  3               .if dflag
003307  3               dig:
003307  3               	and #3
003307  3               	beq digr		; dig right
003307  3               	cmp #1
003307  3               	beq digl		; dig left
003307  3               	cmp #2
003307  3               	beq digd		; dig down
003307  3               
003307  3               ; Dig up.
003307  3               
003307  3               digu:				; dig up
003307  3               	ldy #8
003307  3               	lda (z80_ix),y
003307  3               	sec
003307  3               	sbc #2
003307  3               	sta dispy		; set y
003307  3               
003307  3               	iny
003307  3               	lda (z80_ix),y
003307  3               	sta dispx		; set x
003307  3               	jmp digv
003307  3               
003307  3               ; Dig down.
003307  3               
003307  3               digd:
003307  3               	ldy #9
003307  3               	lda (z80_ix),y
003307  3               	sta dispx		; set y
003307  3               
003307  3               	dey
003307  3               	clc
003307  3               	lda (z80_ix),y
003307  3               	adc #16
003307  3               	sta dispy		; set y
003307  3               	jmp digv
003307  3               
003307  3               ; Dig left.
003307  3               
003307  3               digl:
003307  3               	ldy #8
003307  3               	lda (z80_ix),y
003307  3               	sta dispy		; set y
003307  3               
003307  3               	iny
003307  3               	lda (z80_ix),y
003307  3               	sec
003307  3               	sbc #2			; x=x-2
003307  3               	sta dispx		; set x
003307  3               	jmp digh
003307  3               
003307  3               ; Dig right.
003307  3               
003307  3               digr:
003307  3               	ldy #8
003307  3               	lda (z80_ix),y
003307  3               	sta dispy		; set y
003307  3               
003307  3               	iny
003307  3               	lda (z80_ix),y
003307  3               	clc
003307  3               	adc #16
003307  3               	sta dispx		; set x+16
003307  3               	jmp digh
003307  3               
003307  3               ; Vertical digging
003307  3               
003307  3               digv:
003307  3               	jsr tstbl		; check blocktype in MAP
003307  3               	jsr fdchk		; test if FODDER
003307  3               
003307  3               	clc
003307  3               	lda dispx		; look 1 cell down
003307  3               	adc #8
003307  3               	sta dispx
003307  3               	jsr tstbl		; check blocktype in MAP
003307  3               	jsr fdchk
003307  3               	lda dispx
003307  3               	and #7
003307  3               	bne :+
003307  3               	rts
003307  3               :
003307  3               	clc
003307  3               	lda dispx		; look 1 cell down
003307  3               	adc #8
003307  3               	sta dispx
003307  3               	jsr tstbl		; check blocktype in MAP
003307  3               	jmp fdchk
003307  3               
003307  3               ; Horizontal digging
003307  3               
003307  3               digh:
003307  3               	jsr tstbl		; check blocktype in MAP
003307  3               	jsr fdchk		; test if FODDER
003307  3               
003307  3               	clc
003307  3               	lda dispy		; look 1 cell down
003307  3               	adc #8
003307  3               	sta dispy
003307  3               	jsr tstbl		; check blocktype in MAP
003307  3               	jsr fdchk
003307  3               	lda dispy
003307  3               	and #7
003307  3               	bne :+
003307  3               	rts
003307  3               :
003307  3               	clc
003307  3               	lda dispy		; look 1 cell down
003307  3               	adc #8
003307  3               	sta dispy
003307  3               	jsr tstbl		; check blocktype in MAP
003307  3               	jmp fdchk
003307  3               
003307  3               digcnt:	.byte 0
003307  3               
003307  3               .endif
003307  3               
003307  3               ;------------------------------------------------------------------
003307  3               ; Sprite table
003307  3               ;------------------------------------------------------------------
003307  3               
003307  3               
003307  3               ; ix+0  = type.
003307  3               ; ix+1  = sprite image number.
003307  3               ; ix+2  = frame.
003307  3               ; ix+3  = y coord.
003307  3               ; ix+4  = x coord.
003307  3               
003307  3               ; ix+5  = new type.
003307  3               ; ix+6  = new image number.
003307  3               ; ix+7  = new frame.
003307  3               ; ix+8  = new y coord.
003307  3               ; ix+9  = new x coord.
003307  3               
003307  3               ; ix+10 = direction.
003307  3               ; ix+11 = parameter 1.
003307  3               ; ix+12 = parameter 2.
003307  3               ; ix+13 = jump pointer low.
003307  3               ; ix+14 = jump pointer high.
003307  3               ; ix+15 = data pointer low.
003307  3               ; ix+16 = data pointer high.
003307  3               
003307  3               ; block NUMSPR * TABSIZ,255
003307  3               
003307  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
00330B  3  FF FF FF FF  
00330F  3  FF FF FF FF  
0033D3  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0033D7  3  FF FF FF 00  
0033DB  3  C0 78 00 00  
0033E4  3  07           roomtb:	.byte 7                      ; start room map offset.
0033E5  3               
0033E5  3               ; User routine.  Put your own code in here to be called with USER instruction.
0033E5  3               ; if USER has an argument it will be passed in the accumulator.
0033E5  3               
0033E5  3               user:
0033E5  3               	.include "user.inc"
0033E5  4  60           	rts
0033E6  4               
0033E6  3               
0033E6  3               setfgcol:
0033E6  3  29 03        	and #3
0033E8  3  A8           	tay
0033E9  3  B9 0B 34     	lda codcol,y
0033EC  3  4C 02 34     	jmp calfgc
0033EF  3               
0033EF  3               setbgcol:
0033EF  3  29 03        	and #3
0033F1  3               calbgc:
0033F1  3  A8           	tay
0033F2  3  B9 0B 34     	lda codcol,y
0033F5  3  48           	pha
0033F6  3  AD 09 34     	lda andeor
0033F9  3  4D 0A 34     	eor andeor+1
0033FC  3  AA           	tax
0033FD  3  68           	pla
0033FE  3  8D 0A 34     	sta andeor+1
003401  3  8A           	txa
003402  3               calfgc:
003402  3  4D 0A 34     	eor andeor+1
003405  3  8D 09 34     	sta andeor
003408  3               calex1:
003408  3  60           	rts
003409  3               
003409  3  00 00        andeor:	.byte 0,0
00340B  3  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
00340F  3               
00340F  3               ; Everything below here will be generated by the editors.
00340F  3               
00340F  3  60                   rts
003410  3               WINDOWTOP = 1
003410  3               WINDOWLFT = 1
003410  3               WINDOWHGT = 22
003410  3               WINDOWWID = 30 ;a
003410  3               MAPWID = 6
003410  3  FF FF FF FF          .byte 255,255,255,255,255,255
003414  3  FF FF        
003416  3               mapdat:
003416  3  00 01 02 FF          .byte 0,1,2,255,255,255,255,255,3,4,5,6,7,8,9,255,255,255
00341A  3  FF FF FF FF  
00341E  3  03 04 05 06  
003428  3  FF FF FF FF          .byte 255,255,255,255,255,255
00342C  3  FF FF        
00342E  3  00           stmap:  .byte 0
00342F  3               
00342F  3               evnt00:
00342F  3  A9 00                lda #0
003431  3  C5 rr                cmp varz
003433  3  F0 03                beq *+5
003435  3  4C BB 34             jmp a00302
003438  3  A0 09                ldy #9
00343A  3  B1 68                lda (z80_ix),y
00343C  3  85 rr                sta varj
00343E  3  A9 01                lda #1
003440  3  85 rr                sta chary
003442  3  A9 13                lda #19
003444  3  85 rr                sta charx
003446  3  A5 rr                lda numlif	; DISPLAY
003448  3  20 A0 2F             jsr disply
00344B  3  A9 00                lda #0
00344D  3  85 rr                sta chary
00344F  3  A9 10                lda #16
003451  3  85 rr                sta charx
003453  3  A0 00                ldy #0		; SHOWSCORE
003455  3  A9 06                lda #6
003457  3  85 63                sta z80_b
003459  3  20 B9 23             jsr dscor
00345C  3  A9 00                lda #0
00345E  3  85 rr                sta chary
003460  3  A9 1A                lda #26
003462  3  85 rr                sta charx
003464  3  A9 09                lda #9  	; MESSAGE
003466  3  20 6A 2A             jsr dmsg
003469  3  A9 00                lda #0
00346B  3  85 rr                sta chary
00346D  3  A9 16                lda #22
00346F  3  85 rr                sta charx
003471  3  A9 0A                lda #10  	; MESSAGE
003473  3  20 6A 2A             jsr dmsg
003476  3  A9 00                lda #0
003478  3  85 rr                sta chary
00347A  3  A9 1F                lda #31
00347C  3  85 rr                sta charx
00347E  3  A9 0B                lda #11  	; MESSAGE
003480  3  20 6A 2A             jsr dmsg
003483  3  A9 01                lda #1
003485  3  85 rr                sta chary
003487  3  A9 16                lda #22
003489  3  85 rr                sta charx
00348B  3  A9 0C                lda #12  	; MESSAGE
00348D  3  20 6A 2A             jsr dmsg
003490  3  A9 01                lda #1
003492  3  85 rr                sta chary
003494  3  A9 1C                lda #28
003496  3  85 rr                sta charx
003498  3  A5 rr                lda varc	; DISPLAY
00349A  3  20 A0 2F             jsr disply
00349D  3  A9 01                lda #1
00349F  3  85 rr                sta chary
0034A1  3  A9 17                lda #23
0034A3  3  85 rr                sta charx
0034A5  3  A5 rr                lda varl	; DISPLAY
0034A7  3  20 A0 2F             jsr disply
0034AA  3  A9 01                lda #1
0034AC  3  85 rr                sta chary
0034AE  3  A9 1F                lda #31
0034B0  3  85 rr                sta charx
0034B2  3  A9 0D                lda #13  	; MESSAGE
0034B4  3  20 6A 2A             jsr dmsg
0034B7  3  A9 01                lda #1
0034B9  3  85 rr                sta varz
0034BB  3  20 77 26     a00302: jsr laddu	; CANGOUP
0034BE  3  F0 03                beq :+
0034C0  3  4C F6 34             jmp a00420
0034C3  3               :
0034C3  3  A5 rr                lda joyval	; KEY
0034C5  3  29 08                and #8
0034C7  3  F0 03                beq :+
0034C9  3  4C D4 34             jmp a00353
0034CC  3               :
0034CC  3  A9 00                lda #0		; ANIMATE
0034CE  3  20 C5 2E             jsr animsp
0034D1  3  4C F3 34             jmp a00416
0034D4  3  A5 rr        a00353: lda joyval	; KEY
0034D6  3  29 04                and #4
0034D8  3  F0 03                beq :+
0034DA  3  4C E5 34             jmp a00388
0034DD  3               :
0034DD  3  A9 00                lda #0		; ANIMATE
0034DF  3  20 C5 2E             jsr animsp
0034E2  3  4C F3 34             jmp a00416
0034E5  3  A9 00        a00388: lda #0
0034E7  3  C5 rr                cmp varm
0034E9  3  F0 03                beq *+5
0034EB  3  4C F3 34             jmp a00416
0034EE  3  A9 00                lda #0		; ANIMATE
0034F0  3  20 C5 2E             jsr animsp
0034F3  3  4C 38 35     a00416: jmp a00552
0034F6  3  A5 rr        a00420: lda joyval	; KEY
0034F8  3  29 02                and #2
0034FA  3  F0 03                beq :+
0034FC  3  4C 10 35             jmp a00472
0034FF  3               :
0034FF  3  A9 00                lda #0
003501  3  C5 rr                cmp vara
003503  3  F0 03                beq *+5
003505  3  4C 0D 35             jmp a00467
003508  3  A9 00                lda #0		; ANIMATE
00350A  3  20 C5 2E             jsr animsp
00350D  3  4C 38 35     a00467: jmp a00552
003510  3  A5 rr        a00472: lda joyval	; KEY
003512  3  29 01                and #1
003514  3  F0 03                beq :+
003516  3  4C 2A 35             jmp a00524
003519  3               :
003519  3  A9 00                lda #0
00351B  3  C5 rr                cmp vara
00351D  3  F0 03                beq *+5
00351F  3  4C 27 35             jmp a00519
003522  3  A9 00                lda #0		; ANIMATE
003524  3  20 C5 2E             jsr animsp
003527  3  4C 38 35     a00519: jmp a00552
00352A  3  A9 00        a00524: lda #0
00352C  3  C5 rr                cmp varm
00352E  3  F0 03                beq *+5
003530  3  4C 38 35             jmp a00552
003533  3  A9 00                lda #0		; ANIMATE
003535  3  20 C5 2E             jsr animsp
003538  3  A9 02        a00552: lda #2
00353A  3  C5 rr                cmp scno
00353C  3  F0 03                beq *+5
00353E  3  4C 68 35             jmp a00652
003541  3  A9 0A                lda #10
003543  3  85 rr                sta chary
003545  3  A9 06                lda #6
003547  3  85 rr                sta charx
003549  3  A9 06                lda #6  	; MESSAGE
00354B  3  20 6A 2A             jsr dmsg
00354E  3  A9 0F                lda #15
003550  3  85 rr                sta chary
003552  3  A9 06                lda #6
003554  3  85 rr                sta charx
003556  3  A9 06                lda #6  	; MESSAGE
003558  3  20 6A 2A             jsr dmsg
00355B  3  A9 0B                lda #11
00355D  3  85 rr                sta chary
00355F  3  A9 19                lda #25
003561  3  85 rr                sta charx
003563  3  A9 05                lda #5  	; MESSAGE
003565  3  20 6A 2A             jsr dmsg
003568  3  A9 05        a00652: lda #DEADLY	; DEADLY
00356A  3  85 63                sta z80_b
00356C  3  20 B1 28             jsr tded
00356F  3  C5 63                cmp z80_b
003571  3  F0 03                beq :+
003573  3  4C BD 35             jmp a00843
003576  3               :
003576  3  A9 04                lda #4
003578  3  85 62                sta z80_c
00357A  3  A0 08                ldy #8
00357C  3  B1 68                lda (z80_ix),y
00357E  3  18                   clc
00357F  3  65 62                adc z80_c
003581  3  A0 08                ldy #8
003583  3  91 68                sta (z80_ix),y
003585  3  A9 A0                lda #160
003587  3  A0 08                ldy #8
003589  3  D1 68                cmp (z80_ix),y
00358B  3  B0 03                bcs *+5
00358D  3  4C BD 35             jmp a00843
003590  3  A9 08                lda #8
003592  3  85 62                sta z80_c
003594  3  A0 09                ldy #9
003596  3  B1 68                lda (z80_ix),y
003598  3  38                   sec
003599  3  E5 62                sbc z80_c
00359B  3  A0 09                ldy #9
00359D  3  91 68                sta (z80_ix),y
00359F  3  A9 10                lda #16
0035A1  3  85 62                sta z80_c
0035A3  3  A0 09                ldy #9
0035A5  3  B1 68                lda (z80_ix),y
0035A7  3  18                   clc
0035A8  3  65 62                adc z80_c
0035AA  3  A0 09                ldy #9
0035AC  3  91 68                sta (z80_ix),y
0035AE  3  A9 08                lda #8
0035B0  3  85 62                sta z80_c
0035B2  3  A0 09                ldy #9
0035B4  3  B1 68                lda (z80_ix),y
0035B6  3  38                   sec
0035B7  3  E5 62                sbc z80_c
0035B9  3  A0 09                ldy #9
0035BB  3  91 68                sta (z80_ix),y
0035BD  3  A9 A8        a00843: lda #168
0035BF  3  A0 08                ldy #8
0035C1  3  D1 68                cmp (z80_ix),y
0035C3  3  90 03                bcc *+5
0035C5  3  4C D9 35             jmp a00905
0035C8  3  A9 FF                lda #255	; REMOVE
0035CA  3  A0 05                ldy #5
0035CC  3  91 68                sta (z80_ix),y
0035CE  3  A9 08                lda #8	; SPAWN
0035D0  3  85 62                sta z80_c
0035D2  3  A9 06                lda #6
0035D4  3  85 63                sta z80_b
0035D6  3  20 EB 22             jsr spawn
0035D9  3  20 77 26     a00905: jsr laddu	; CANGOUP
0035DC  3  F0 03                beq :+
0035DE  3  4C 77 36             jmp a01260
0035E1  3               :
0035E1  3  A0 08                ldy #8
0035E3  3  B1 68                lda (z80_ix),y
0035E5  3  4A                   lsr a
0035E6  3  4A                   lsr a
0035E7  3  4A                   lsr a
0035E8  3  A0 08                ldy #8
0035EA  3  91 68                sta (z80_ix),y
0035EC  3  A0 08                ldy #8
0035EE  3  B1 68                lda (z80_ix),y
0035F0  3  0A                   asl a
0035F1  3  0A                   asl a
0035F2  3  0A                   asl a
0035F3  3  A0 08                ldy #8
0035F5  3  91 68                sta (z80_ix),y
0035F7  3  A9 10                lda #16
0035F9  3  85 62                sta z80_c
0035FB  3  A0 08                ldy #8
0035FD  3  B1 68                lda (z80_ix),y
0035FF  3  38                   sec
003600  3  E5 62                sbc z80_c
003602  3  A0 08                ldy #8
003604  3  91 68                sta (z80_ix),y
003606  3  A9 20                lda #32
003608  3  85 62                sta z80_c
00360A  3  A0 08                ldy #8
00360C  3  B1 68                lda (z80_ix),y
00360E  3  18                   clc
00360F  3  65 62                adc z80_c
003611  3  A0 08                ldy #8
003613  3  91 68                sta (z80_ix),y
003615  3  A9 10                lda #16
003617  3  85 62                sta z80_c
003619  3  A0 08                ldy #8
00361B  3  B1 68                lda (z80_ix),y
00361D  3  38                   sec
00361E  3  E5 62                sbc z80_c
003620  3  A0 08                ldy #8
003622  3  91 68                sta (z80_ix),y
003624  3  A5 rr                lda joyval	; KEY
003626  3  29 08                and #8
003628  3  F0 03                beq :+
00362A  3  4C 56 36             jmp a01190
00362D  3               :
00362D  3  A9 06                lda #CUSTOM	; CUSTOM
00362F  3  85 63                sta z80_b
003631  3  20 B1 28             jsr tded
003634  3  C5 63                cmp z80_b
003636  3  F0 03                beq :+
003638  3  4C 3E 36             jmp a01138
00363B  3               :
00363B  3  4C 56 36             jmp a01190
00363E  3  A9 00        a01138: lda #0
003640  3  C5 rr                cmp vara
003642  3  F0 03                beq *+5
003644  3  4C 56 36             jmp a01190
003647  3  A9 08                lda #8
003649  3  85 62                sta z80_c
00364B  3  A0 08                ldy #8
00364D  3  B1 68                lda (z80_ix),y
00364F  3  38                   sec
003650  3  E5 62                sbc z80_c
003652  3  A0 08                ldy #8
003654  3  91 68                sta (z80_ix),y
003656  3  A5 rr        a01190: lda joyval	; KEY
003658  3  29 04                and #4
00365A  3  F0 03                beq :+
00365C  3  4C 77 36             jmp a01260
00365F  3               :
00365F  3  A9 00                lda #0
003661  3  C5 rr                cmp vara
003663  3  F0 03                beq *+5
003665  3  4C 77 36             jmp a01260
003668  3  A9 08                lda #8
00366A  3  85 62                sta z80_c
00366C  3  A0 08                ldy #8
00366E  3  B1 68                lda (z80_ix),y
003670  3  18                   clc
003671  3  65 62                adc z80_c
003673  3  A0 08                ldy #8
003675  3  91 68                sta (z80_ix),y
003677  3  A9 06        a01260: lda #CUSTOM	; CUSTOM
003679  3  85 63                sta z80_b
00367B  3  20 B1 28             jsr tded
00367E  3  C5 63                cmp z80_b
003680  3  F0 03                beq :+
003682  3  4C AC 36             jmp a01373
003685  3               :
003685  3  A9 04                lda #4
003687  3  A0 06                ldy #6
003689  3  91 68                sta (z80_ix),y
00368B  3  A5 rr                lda joyval	; KEY
00368D  3  29 04                and #4
00368F  3  F0 03                beq :+
003691  3  4C AC 36             jmp a01373
003694  3               :
003694  3  A9 00                lda #0
003696  3  C5 rr                cmp vara
003698  3  F0 03                beq *+5
00369A  3  4C AC 36             jmp a01373
00369D  3  A9 08                lda #8
00369F  3  85 62                sta z80_c
0036A1  3  A0 08                ldy #8
0036A3  3  B1 68                lda (z80_ix),y
0036A5  3  18                   clc
0036A6  3  65 62                adc z80_c
0036A8  3  A0 08                ldy #8
0036AA  3  91 68                sta (z80_ix),y
0036AC  3  A5 rr        a01373: lda joyval	; KEY
0036AE  3  29 01                and #1
0036B0  3  F0 03                beq :+
0036B2  3  4C DE 36             jmp a01479
0036B5  3               :
0036B5  3  A9 00                lda #0
0036B7  3  A0 0A                ldy #10
0036B9  3  91 68                sta (z80_ix),y
0036BB  3  20 3C 28             jsr cangr	; CANGORIGHT
0036BE  3  F0 03                beq :+
0036C0  3  4C DB 36             jmp a01474
0036C3  3               :
0036C3  3  A9 00                lda #0
0036C5  3  C5 rr                cmp vara
0036C7  3  F0 03                beq *+5
0036C9  3  4C DB 36             jmp a01474
0036CC  3  A9 08                lda #8
0036CE  3  85 62                sta z80_c
0036D0  3  A0 09                ldy #9
0036D2  3  B1 68                lda (z80_ix),y
0036D4  3  18                   clc
0036D5  3  65 62                adc z80_c
0036D7  3  A0 09                ldy #9
0036D9  3  91 68                sta (z80_ix),y
0036DB  3  4C 0D 37     a01474: jmp a01579
0036DE  3  A5 rr        a01479: lda joyval	; KEY
0036E0  3  29 02                and #2
0036E2  3  F0 03                beq :+
0036E4  3  4C 0D 37             jmp a01579
0036E7  3               :
0036E7  3  A9 01                lda #1
0036E9  3  A0 0A                ldy #10
0036EB  3  91 68                sta (z80_ix),y
0036ED  3  20 1A 27             jsr cangl	; CANGOLEFT
0036F0  3  F0 03                beq :+
0036F2  3  4C 0D 37             jmp a01579
0036F5  3               :
0036F5  3  A9 00                lda #0
0036F7  3  C5 rr                cmp vara
0036F9  3  F0 03                beq *+5
0036FB  3  4C 0D 37             jmp a01579
0036FE  3  A9 08                lda #8
003700  3  85 62                sta z80_c
003702  3  A0 09                ldy #9
003704  3  B1 68                lda (z80_ix),y
003706  3  38                   sec
003707  3  E5 62                sbc z80_c
003709  3  A0 09                ldy #9
00370B  3  91 68                sta (z80_ix),y
00370D  3  A5 rr        a01579: lda joyval	; KEY
00370F  3  29 10                and #16
003711  3  F0 03                beq :+
003713  3  4C 35 37             jmp a01661
003716  3               :
003716  3  20 77 26             jsr laddu	; CANGOUP
003719  3  F0 03                beq :+
00371B  3  4C 21 37             jmp a01619
00371E  3               :
00371E  3  4C 35 37             jmp a01661
003721  3  A9 06        a01619: lda #CUSTOM	; CUSTOM
003723  3  85 63                sta z80_b
003725  3  20 B1 28             jsr tded
003728  3  C5 63                cmp z80_b
00372A  3  F0 03                beq :+
00372C  3  4C 32 37             jmp a01654
00372F  3               :
00372F  3  4C 35 37             jmp a01661
003732  3  20 A6 29     a01654: jsr jump	; TABLEJUMP
003735  3  20 C0 30     a01661: jsr ifall	; TABLEFALL
003738  3  A9 A0                lda #160
00373A  3  A0 08                ldy #8
00373C  3  D1 68                cmp (z80_ix),y
00373E  3  B0 03                bcs *+5
003740  3  4C 93 38             jmp a02432
003743  3  A9 00                lda #0
003745  3  A0 0A                ldy #10
003747  3  D1 68                cmp (z80_ix),y
003749  3  F0 03                beq *+5
00374B  3  4C EB 37             jmp a02062
00374E  3  A9 08                lda #8
003750  3  85 62                sta z80_c
003752  3  A0 08                ldy #8
003754  3  B1 68                lda (z80_ix),y
003756  3  38                   sec
003757  3  E5 62                sbc z80_c
003759  3  A0 08                ldy #8
00375B  3  91 68                sta (z80_ix),y
00375D  3  20 77 26             jsr laddu	; CANGOUP
003760  3  F0 03                beq :+
003762  3  4C 86 37             jmp a01838
003765  3               :
003765  3  A9 08                lda #8
003767  3  85 62                sta z80_c
003769  3  A0 09                ldy #9
00376B  3  B1 68                lda (z80_ix),y
00376D  3  38                   sec
00376E  3  E5 62                sbc z80_c
003770  3  A0 09                ldy #9
003772  3  91 68                sta (z80_ix),y
003774  3  A9 08                lda #8
003776  3  85 62                sta z80_c
003778  3  A0 09                ldy #9
00377A  3  B1 68                lda (z80_ix),y
00377C  3  18                   clc
00377D  3  65 62                adc z80_c
00377F  3  A0 09                ldy #9
003781  3  91 68                sta (z80_ix),y
003783  3  4C B3 37             jmp a01943
003786  3  A9 08        a01838: lda #8
003788  3  85 62                sta z80_c
00378A  3  A0 09                ldy #9
00378C  3  B1 68                lda (z80_ix),y
00378E  3  18                   clc
00378F  3  65 62                adc z80_c
003791  3  A0 09                ldy #9
003793  3  91 68                sta (z80_ix),y
003795  3  A9 08                lda #8
003797  3  85 62                sta z80_c
003799  3  A0 09                ldy #9
00379B  3  B1 68                lda (z80_ix),y
00379D  3  18                   clc
00379E  3  65 62                adc z80_c
0037A0  3  A0 09                ldy #9
0037A2  3  91 68                sta (z80_ix),y
0037A4  3  A9 10                lda #16
0037A6  3  85 62                sta z80_c
0037A8  3  A0 09                ldy #9
0037AA  3  B1 68                lda (z80_ix),y
0037AC  3  38                   sec
0037AD  3  E5 62                sbc z80_c
0037AF  3  A0 09                ldy #9
0037B1  3  91 68                sta (z80_ix),y
0037B3  3  A9 08        a01943: lda #8
0037B5  3  85 62                sta z80_c
0037B7  3  A0 08                ldy #8
0037B9  3  B1 68                lda (z80_ix),y
0037BB  3  18                   clc
0037BC  3  65 62                adc z80_c
0037BE  3  A0 08                ldy #8
0037C0  3  91 68                sta (z80_ix),y
0037C2  3  20 77 26             jsr laddu	; CANGOUP
0037C5  3  F0 03                beq :+
0037C7  3  4C D3 37             jmp a02011
0037CA  3               :
0037CA  3  A9 04                lda #4
0037CC  3  A0 06                ldy #6
0037CE  3  91 68                sta (z80_ix),y
0037D0  3  4C EB 37             jmp a02062
0037D3  3  A5 rr        a02011: lda joyval	; KEY
0037D5  3  29 01                and #1
0037D7  3  F0 03                beq :+
0037D9  3  4C E5 37             jmp a02048
0037DC  3               :
0037DC  3  A9 00                lda #0
0037DE  3  A0 06                ldy #6
0037E0  3  91 68                sta (z80_ix),y
0037E2  3  4C EB 37             jmp a02062
0037E5  3  A9 01        a02048: lda #1
0037E7  3  A0 06                ldy #6
0037E9  3  91 68                sta (z80_ix),y
0037EB  3  A9 01        a02062: lda #1
0037ED  3  A0 0A                ldy #10
0037EF  3  D1 68                cmp (z80_ix),y
0037F1  3  F0 03                beq *+5
0037F3  3  4C 93 38             jmp a02432
0037F6  3  A9 08                lda #8
0037F8  3  85 62                sta z80_c
0037FA  3  A0 08                ldy #8
0037FC  3  B1 68                lda (z80_ix),y
0037FE  3  38                   sec
0037FF  3  E5 62                sbc z80_c
003801  3  A0 08                ldy #8
003803  3  91 68                sta (z80_ix),y
003805  3  20 77 26             jsr laddu	; CANGOUP
003808  3  F0 03                beq :+
00380A  3  4C 2E 38             jmp a02209
00380D  3               :
00380D  3  A9 08                lda #8
00380F  3  85 62                sta z80_c
003811  3  A0 09                ldy #9
003813  3  B1 68                lda (z80_ix),y
003815  3  38                   sec
003816  3  E5 62                sbc z80_c
003818  3  A0 09                ldy #9
00381A  3  91 68                sta (z80_ix),y
00381C  3  A9 08                lda #8
00381E  3  85 62                sta z80_c
003820  3  A0 09                ldy #9
003822  3  B1 68                lda (z80_ix),y
003824  3  18                   clc
003825  3  65 62                adc z80_c
003827  3  A0 09                ldy #9
003829  3  91 68                sta (z80_ix),y
00382B  3  4C 5B 38             jmp a02313
00382E  3  A9 08        a02209: lda #8
003830  3  85 62                sta z80_c
003832  3  A0 09                ldy #9
003834  3  B1 68                lda (z80_ix),y
003836  3  38                   sec
003837  3  E5 62                sbc z80_c
003839  3  A0 09                ldy #9
00383B  3  91 68                sta (z80_ix),y
00383D  3  A9 08                lda #8
00383F  3  85 62                sta z80_c
003841  3  A0 09                ldy #9
003843  3  B1 68                lda (z80_ix),y
003845  3  38                   sec
003846  3  E5 62                sbc z80_c
003848  3  A0 09                ldy #9
00384A  3  91 68                sta (z80_ix),y
00384C  3  A9 10                lda #16
00384E  3  85 62                sta z80_c
003850  3  A0 09                ldy #9
003852  3  B1 68                lda (z80_ix),y
003854  3  18                   clc
003855  3  65 62                adc z80_c
003857  3  A0 09                ldy #9
003859  3  91 68                sta (z80_ix),y
00385B  3  A9 08        a02313: lda #8
00385D  3  85 62                sta z80_c
00385F  3  A0 08                ldy #8
003861  3  B1 68                lda (z80_ix),y
003863  3  18                   clc
003864  3  65 62                adc z80_c
003866  3  A0 08                ldy #8
003868  3  91 68                sta (z80_ix),y
00386A  3  20 77 26             jsr laddu	; CANGOUP
00386D  3  F0 03                beq :+
00386F  3  4C 7B 38             jmp a02382
003872  3               :
003872  3  A9 04                lda #4
003874  3  A0 06                ldy #6
003876  3  91 68                sta (z80_ix),y
003878  3  4C 93 38             jmp a02432
00387B  3  A5 rr        a02382: lda joyval	; KEY
00387D  3  29 02                and #2
00387F  3  F0 03                beq :+
003881  3  4C 8D 38             jmp a02419
003884  3               :
003884  3  A9 02                lda #2
003886  3  A0 06                ldy #6
003888  3  91 68                sta (z80_ix),y
00388A  3  4C 93 38             jmp a02432
00388D  3  A9 03        a02419: lda #3
00388F  3  A0 06                ldy #6
003891  3  91 68                sta (z80_ix),y
003893  3  A9 02        a02432: lda #2
003895  3  C5 rr                cmp scno
003897  3  F0 03                beq *+5
003899  3  4C B6 38             jmp a02504
00389C  3  A9 06                lda #6
00389E  3  85 rr                sta chary
0038A0  3  A9 01                lda #1
0038A2  3  85 rr                sta charx
0038A4  3  A9 04                lda #4  	; MESSAGE
0038A6  3  20 6A 2A             jsr dmsg
0038A9  3  A9 07                lda #7
0038AB  3  85 rr                sta chary
0038AD  3  A9 12                lda #18
0038AF  3  85 rr                sta charx
0038B1  3  A9 05                lda #5  	; MESSAGE
0038B3  3  20 6A 2A             jsr dmsg
0038B6  3  A9 04        a02504: lda #4
0038B8  3  C5 rr                cmp scno
0038BA  3  B0 03                bcs *+5
0038BC  3  4C CC 38             jmp a02549
0038BF  3  A9 17                lda #23
0038C1  3  85 rr                sta chary
0038C3  3  A9 01                lda #1
0038C5  3  85 rr                sta charx
0038C7  3  A9 01                lda #1  	; MESSAGE
0038C9  3  20 6A 2A             jsr dmsg
0038CC  3  4C 2C 30     a02549: jmp grav
0038CF  3               evnt01:
0038CF  3  A9 08                lda #8
0038D1  3  85 62                sta z80_c
0038D3  3  A0 08                ldy #8
0038D5  3  B1 68                lda (z80_ix),y
0038D7  3  38                   sec
0038D8  3  E5 62                sbc z80_c
0038DA  3  A0 08                ldy #8
0038DC  3  91 68                sta (z80_ix),y
0038DE  3  A9 08                lda #8
0038E0  3  A0 06                ldy #6
0038E2  3  D1 68                cmp (z80_ix),y
0038E4  3  F0 03                beq *+5
0038E6  3  4C 07 39             jmp b00128
0038E9  3  A9 08                lda #8
0038EB  3  85 62                sta z80_c
0038ED  3  A0 09                ldy #9
0038EF  3  B1 68                lda (z80_ix),y
0038F1  3  38                   sec
0038F2  3  E5 62                sbc z80_c
0038F4  3  A0 09                ldy #9
0038F6  3  91 68                sta (z80_ix),y
0038F8  3  A9 08                lda #8
0038FA  3  85 62                sta z80_c
0038FC  3  A0 09                ldy #9
0038FE  3  B1 68                lda (z80_ix),y
003900  3  18                   clc
003901  3  65 62                adc z80_c
003903  3  A0 09                ldy #9
003905  3  91 68                sta (z80_ix),y
003907  3  A9 09        b00128: lda #9
003909  3  A0 06                ldy #6
00390B  3  D1 68                cmp (z80_ix),y
00390D  3  F0 03                beq *+5
00390F  3  4C 30 39             jmp b00219
003912  3  A9 08                lda #8
003914  3  85 62                sta z80_c
003916  3  A0 09                ldy #9
003918  3  B1 68                lda (z80_ix),y
00391A  3  18                   clc
00391B  3  65 62                adc z80_c
00391D  3  A0 09                ldy #9
00391F  3  91 68                sta (z80_ix),y
003921  3  A9 08                lda #8
003923  3  85 62                sta z80_c
003925  3  A0 09                ldy #9
003927  3  B1 68                lda (z80_ix),y
003929  3  38                   sec
00392A  3  E5 62                sbc z80_c
00392C  3  A0 09                ldy #9
00392E  3  91 68                sta (z80_ix),y
003930  3  A9 10        b00219: lda #16
003932  3  85 62                sta z80_c
003934  3  A0 09                ldy #9
003936  3  B1 68                lda (z80_ix),y
003938  3  38                   sec
003939  3  E5 62                sbc z80_c
00393B  3  A0 09                ldy #9
00393D  3  91 68                sta (z80_ix),y
00393F  3  A9 20                lda #32
003941  3  85 62                sta z80_c
003943  3  A0 09                ldy #9
003945  3  B1 68                lda (z80_ix),y
003947  3  18                   clc
003948  3  65 62                adc z80_c
00394A  3  A0 09                ldy #9
00394C  3  91 68                sta (z80_ix),y
00394E  3  A9 10                lda #16
003950  3  85 62                sta z80_c
003952  3  A0 09                ldy #9
003954  3  B1 68                lda (z80_ix),y
003956  3  38                   sec
003957  3  E5 62                sbc z80_c
003959  3  A0 09                ldy #9
00395B  3  91 68                sta (z80_ix),y
00395D  3  A9 08                lda #8
00395F  3  85 62                sta z80_c
003961  3  A0 08                ldy #8
003963  3  B1 68                lda (z80_ix),y
003965  3  18                   clc
003966  3  65 62                adc z80_c
003968  3  A0 08                ldy #8
00396A  3  91 68                sta (z80_ix),y
00396C  3  A9 94                lda #148
00396E  3  A0 08                ldy #8
003970  3  D1 68                cmp (z80_ix),y
003972  3  90 03                bcc *+5
003974  3  4C FA 39             jmp b00666
003977  3  A9 02                lda #2
003979  3  C5 rr                cmp scno
00397B  3  F0 03                beq *+5
00397D  3  4C 89 39             jmp b00417
003980  3  A9 20                lda #32
003982  3  A0 08                ldy #8
003984  3  91 68                sta (z80_ix),y
003986  3  4C 8F 39             jmp b00430
003989  3  A9 40        b00417: lda #64
00398B  3  A0 08                ldy #8
00398D  3  91 68                sta (z80_ix),y
00398F  3  A9 60        b00430: lda #96
003991  3  A0 09                ldy #9
003993  3  91 68                sta (z80_ix),y
003995  3  A9 FF                lda #255	; REMOVE
003997  3  A0 05                ldy #5
003999  3  91 68                sta (z80_ix),y
00399B  3  A9 02                lda #2
00399D  3  85 65                sta z80_d	; GETRANDOM
00399F  3  20 BE 29             jsr random
0039A2  3  85 67                sta z80_h
0039A4  3  20 A6 22             jsr imul
0039A7  3  A5 67                lda z80_h
0039A9  3  85 rr                sta varrnd
0039AB  3  A9 01                lda #1
0039AD  3  C5 rr                cmp varrnd
0039AF  3  F0 03                beq *+5
0039B1  3  4C D0 39             jmp b00573
0039B4  3  A9 01                lda #1	; SPAWN
0039B6  3  85 62                sta z80_c
0039B8  3  A9 08                lda #8
0039BA  3  85 63                sta z80_b
0039BC  3  20 EB 22             jsr spawn
0039BF  3  A5 rr                lda spptr	; SPAWNED
0039C1  3  85 68                sta z80_x
0039C3  3  A5 rr                lda spptr+1
0039C5  3  85 69                sta z80_i
0039C7  3  A9 01                lda #1
0039C9  3  A0 0B                ldy #11
0039CB  3  91 68                sta (z80_ix),y
0039CD  3  4C FA 39             jmp b00666
0039D0  3  A9 50        b00573: lda #80
0039D2  3  85 65                sta z80_d	; GETRANDOM
0039D4  3  20 BE 29             jsr random
0039D7  3  85 67                sta z80_h
0039D9  3  20 A6 22             jsr imul
0039DC  3  A5 67                lda z80_h
0039DE  3  85 rr                sta varrnd
0039E0  3  A5 rr                lda varrnd
0039E2  3  85 62                sta z80_c
0039E4  3  A0 09                ldy #9
0039E6  3  B1 68                lda (z80_ix),y
0039E8  3  18                   clc
0039E9  3  65 62                adc z80_c
0039EB  3  A0 09                ldy #9
0039ED  3  91 68                sta (z80_ix),y
0039EF  3  A9 02                lda #2	; SPAWN
0039F1  3  85 62                sta z80_c
0039F3  3  A9 05                lda #5
0039F5  3  85 63                sta z80_b
0039F7  3  20 EB 22             jsr spawn
0039FA  3  A9 05        b00666: lda #DEADLY	; DEADLY
0039FC  3  85 63                sta z80_b
0039FE  3  20 B1 28             jsr tded
003A01  3  C5 63                cmp z80_b
003A03  3  F0 03                beq :+
003A05  3  4C 39 3A             jmp b00798
003A08  3               :
003A08  3  A9 00                lda #0
003A0A  3  C5 rr                cmp vara
003A0C  3  F0 03                beq *+5
003A0E  3  4C 39 3A             jmp b00798
003A11  3  A9 02                lda #2
003A13  3  85 65                sta z80_d	; GETRANDOM
003A15  3  20 BE 29             jsr random
003A18  3  85 67                sta z80_h
003A1A  3  20 A6 22             jsr imul
003A1D  3  A5 67                lda z80_h
003A1F  3  85 rr                sta varrnd
003A21  3  A9 01                lda #1
003A23  3  C5 rr                cmp varrnd
003A25  3  F0 03                beq *+5
003A27  3  4C 39 3A             jmp b00798
003A2A  3  A9 08                lda #8
003A2C  3  85 62                sta z80_c
003A2E  3  A0 08                ldy #8
003A30  3  B1 68                lda (z80_ix),y
003A32  3  18                   clc
003A33  3  65 62                adc z80_c
003A35  3  A0 08                ldy #8
003A37  3  91 68                sta (z80_ix),y
003A39  3  A9 00        b00798: lda #0
003A3B  3  A0 0B                ldy #11
003A3D  3  D1 68                cmp (z80_ix),y
003A3F  3  F0 03                beq *+5
003A41  3  4C 76 3A             jmp b00925
003A44  3  20 1A 27             jsr cangl	; CANGOLEFT
003A47  3  F0 03                beq :+
003A49  3  4C 6D 3A             jmp b00907
003A4C  3               :
003A4C  3  A9 00                lda #0
003A4E  3  C5 rr                cmp varm
003A50  3  F0 03                beq *+5
003A52  3  4C 64 3A             jmp b00889
003A55  3  A9 08                lda #8
003A57  3  85 62                sta z80_c
003A59  3  A0 09                ldy #9
003A5B  3  B1 68                lda (z80_ix),y
003A5D  3  38                   sec
003A5E  3  E5 62                sbc z80_c
003A60  3  A0 09                ldy #9
003A62  3  91 68                sta (z80_ix),y
003A64  3  A9 09        b00889: lda #9
003A66  3  A0 06                ldy #6
003A68  3  91 68                sta (z80_ix),y
003A6A  3  4C 73 3A             jmp b00920
003A6D  3  A9 01        b00907: lda #1
003A6F  3  A0 0B                ldy #11
003A71  3  91 68                sta (z80_ix),y
003A73  3  4C A5 3A     b00920: jmp b01025
003A76  3  20 3C 28     b00925: jsr cangr	; CANGORIGHT
003A79  3  F0 03                beq :+
003A7B  3  4C 9F 3A             jmp b01011
003A7E  3               :
003A7E  3  A9 00                lda #0
003A80  3  C5 rr                cmp varm
003A82  3  F0 03                beq *+5
003A84  3  4C 96 3A             jmp b00993
003A87  3  A9 08                lda #8
003A89  3  85 62                sta z80_c
003A8B  3  A0 09                ldy #9
003A8D  3  B1 68                lda (z80_ix),y
003A8F  3  18                   clc
003A90  3  65 62                adc z80_c
003A92  3  A0 09                ldy #9
003A94  3  91 68                sta (z80_ix),y
003A96  3  A9 08        b00993: lda #8
003A98  3  A0 06                ldy #6
003A9A  3  91 68                sta (z80_ix),y
003A9C  3  4C A5 3A             jmp b01025
003A9F  3  A9 00        b01011: lda #0
003AA1  3  A0 0B                ldy #11
003AA3  3  91 68                sta (z80_ix),y
003AA5  3  A9 00        b01025: lda #0
003AA7  3  C5 rr                cmp vara
003AA9  3  F0 03                beq *+5
003AAB  3  4C B3 3A             jmp b01053
003AAE  3  A9 00                lda #0		; ANIMATE
003AB0  3  20 C5 2E             jsr animsp
003AB3  3  A9 00        b01053: lda #0 	; COLLISION
003AB5  3  85 63                sta z80_b
003AB7  3  20 10 2F             jsr sktyp
003ABA  3  B0 03                bcs :+
003ABC  3  4C DC 3A             jmp b01145
003ABF  3               :
003ABF  3  A5 rr                lda skptr	; OTHER
003AC1  3  85 68                sta z80_x
003AC3  3  A5 rr                lda skptr+1
003AC5  3  85 69                sta z80_i
003AC7  3  A9 FF                lda #255	; REMOVE
003AC9  3  A0 05                ldy #5
003ACB  3  91 68                sta (z80_ix),y
003ACD  3  A9 01                lda #1
003ACF  3  85 rr                sta vard
003AD1  3  A9 08                lda #8	; SPAWN
003AD3  3  85 62                sta z80_c
003AD5  3  A9 06                lda #6
003AD7  3  85 63                sta z80_b
003AD9  3  20 EB 22             jsr spawn
003ADC  3  60           b01145: rts
003ADD  3               evnt02:
003ADD  3  A9 29                lda #41
003ADF  3  A0 06                ldy #6
003AE1  3  D1 68                cmp (z80_ix),y
003AE3  3  F0 03                beq *+5
003AE5  3  4C 14 3B             jmp c00121
003AE8  3  A9 00                lda #0
003AEA  3  C5 rr                cmp vara
003AEC  3  F0 03                beq *+5
003AEE  3  4C F6 3A             jmp c00052
003AF1  3  A9 00                lda #0		; ANIMATE
003AF3  3  20 C5 2E             jsr animsp
003AF6  3  A9 08        c00052: lda #8
003AF8  3  85 62                sta z80_c
003AFA  3  A0 09                ldy #9
003AFC  3  B1 68                lda (z80_ix),y
003AFE  3  18                   clc
003AFF  3  65 62                adc z80_c
003B01  3  A0 09                ldy #9
003B03  3  91 68                sta (z80_ix),y
003B05  3  A9 08                lda #8
003B07  3  85 62                sta z80_c
003B09  3  A0 09                ldy #9
003B0B  3  B1 68                lda (z80_ix),y
003B0D  3  38                   sec
003B0E  3  E5 62                sbc z80_c
003B10  3  A0 09                ldy #9
003B12  3  91 68                sta (z80_ix),y
003B14  3  A9 27        c00121: lda #39
003B16  3  A0 06                ldy #6
003B18  3  D1 68                cmp (z80_ix),y
003B1A  3  90 03                bcc *+5
003B1C  3  4C 44 3C             jmp c00762
003B1F  3  A9 29                lda #41
003B21  3  A0 06                ldy #6
003B23  3  D1 68                cmp (z80_ix),y
003B25  3  B0 03                bcs *+5
003B27  3  4C 44 3C             jmp c00762
003B2A  3  A9 29                lda #41
003B2C  3  A0 06                ldy #6
003B2E  3  D1 68                cmp (z80_ix),y
003B30  3  F0 03                beq *+5
003B32  3  4C B1 3B             jmp c00448
003B35  3  A9 A0                lda #160
003B37  3  A0 08                ldy #8
003B39  3  D1 68                cmp (z80_ix),y
003B3B  3  90 03                bcc *+5
003B3D  3  4C 46 3B             jmp c00224
003B40  3  A9 18                lda #24
003B42  3  A0 08                ldy #8
003B44  3  91 68                sta (z80_ix),y
003B46  3  A9 38        c00224: lda #56
003B48  3  A0 09                ldy #9
003B4A  3  D1 68                cmp (z80_ix),y
003B4C  3  90 03                bcc *+5
003B4E  3  4C B1 3B             jmp c00448
003B51  3  A9 B4                lda #180
003B53  3  A0 09                ldy #9
003B55  3  D1 68                cmp (z80_ix),y
003B57  3  B0 03                bcs *+5
003B59  3  4C B1 3B             jmp c00448
003B5C  3  A9 06                lda #CUSTOM	; CUSTOM
003B5E  3  85 63                sta z80_b
003B60  3  20 B1 28             jsr tded
003B63  3  C5 63                cmp z80_b
003B65  3  F0 03                beq :+
003B67  3  4C 95 3B             jmp c00390
003B6A  3               :
003B6A  3  A9 28                lda #40
003B6C  3  85 65                sta z80_d	; GETRANDOM
003B6E  3  20 BE 29             jsr random
003B71  3  85 67                sta z80_h
003B73  3  20 A6 22             jsr imul
003B76  3  A5 67                lda z80_h
003B78  3  85 rr                sta varrnd
003B7A  3  A9 01                lda #1
003B7C  3  C5 rr                cmp varrnd
003B7E  3  B0 03                bcs *+5
003B80  3  4C 92 3B             jmp c00385
003B83  3  A9 10                lda #16
003B85  3  85 62                sta z80_c
003B87  3  A0 08                ldy #8
003B89  3  B1 68                lda (z80_ix),y
003B8B  3  18                   clc
003B8C  3  65 62                adc z80_c
003B8E  3  A0 08                ldy #8
003B90  3  91 68                sta (z80_ix),y
003B92  3  4C B1 3B     c00385: jmp c00448
003B95  3  20 E5 26     c00390: jsr cangd	; CANGODOWN
003B98  3  F0 03                beq :+
003B9A  3  4C B1 3B             jmp c00448
003B9D  3               :
003B9D  3  A9 06                lda #CUSTOM	; CUSTOM
003B9F  3  85 63                sta z80_b
003BA1  3  20 B1 28             jsr tded
003BA4  3  C5 63                cmp z80_b
003BA6  3  F0 03                beq :+
003BA8  3  4C AE 3B             jmp c00440
003BAB  3               :
003BAB  3  4C B1 3B             jmp c00448
003BAE  3  20 C0 30     c00440: jsr ifall	; TABLEFALL
003BB1  3  A9 28        c00448: lda #40
003BB3  3  A0 06                ldy #6
003BB5  3  D1 68                cmp (z80_ix),y
003BB7  3  F0 03                beq *+5
003BB9  3  4C F0 3B             jmp c00584
003BBC  3  A9 3C                lda #60
003BBE  3  A0 09                ldy #9
003BC0  3  D1 68                cmp (z80_ix),y
003BC2  3  B0 03                bcs *+5
003BC4  3  4C D6 3B             jmp c00527
003BC7  3  A9 04                lda #4
003BC9  3  85 62                sta z80_c
003BCB  3  A0 08                ldy #8
003BCD  3  B1 68                lda (z80_ix),y
003BCF  3  38                   sec
003BD0  3  E5 62                sbc z80_c
003BD2  3  A0 08                ldy #8
003BD4  3  91 68                sta (z80_ix),y
003BD6  3  A9 B0        c00527: lda #176
003BD8  3  A0 09                ldy #9
003BDA  3  D1 68                cmp (z80_ix),y
003BDC  3  90 03                bcc *+5
003BDE  3  4C F0 3B             jmp c00584
003BE1  3  A9 04                lda #4
003BE3  3  85 62                sta z80_c
003BE5  3  A0 08                ldy #8
003BE7  3  B1 68                lda (z80_ix),y
003BE9  3  18                   clc
003BEA  3  65 62                adc z80_c
003BEC  3  A0 08                ldy #8
003BEE  3  91 68                sta (z80_ix),y
003BF0  3  A9 00        c00584: lda #0
003BF2  3  A0 0B                ldy #11
003BF4  3  D1 68                cmp (z80_ix),y
003BF6  3  F0 03                beq *+5
003BF8  3  4C 21 3C             jmp c00687
003BFB  3  A9 38                lda #56
003BFD  3  A0 09                ldy #9
003BFF  3  D1 68                cmp (z80_ix),y
003C01  3  90 03                bcc *+5
003C03  3  4C 18 3C             jmp c00668
003C06  3  A9 03                lda #3
003C08  3  85 62                sta z80_c
003C0A  3  A0 09                ldy #9
003C0C  3  B1 68                lda (z80_ix),y
003C0E  3  38                   sec
003C0F  3  E5 62                sbc z80_c
003C11  3  A0 09                ldy #9
003C13  3  91 68                sta (z80_ix),y
003C15  3  4C 1E 3C             jmp c00682
003C18  3  A9 01        c00668: lda #1
003C1A  3  A0 0B                ldy #11
003C1C  3  91 68                sta (z80_ix),y
003C1E  3  4C 44 3C     c00682: jmp c00762
003C21  3  A9 B4        c00687: lda #180
003C23  3  A0 09                ldy #9
003C25  3  D1 68                cmp (z80_ix),y
003C27  3  B0 03                bcs *+5
003C29  3  4C 3E 3C             jmp c00749
003C2C  3  A9 03                lda #3
003C2E  3  85 62                sta z80_c
003C30  3  A0 09                ldy #9
003C32  3  B1 68                lda (z80_ix),y
003C34  3  18                   clc
003C35  3  65 62                adc z80_c
003C37  3  A0 09                ldy #9
003C39  3  91 68                sta (z80_ix),y
003C3B  3  4C 44 3C             jmp c00762
003C3E  3  A9 00        c00749: lda #0
003C40  3  A0 0B                ldy #11
003C42  3  91 68                sta (z80_ix),y
003C44  3  A9 28        c00762: lda #40
003C46  3  A0 06                ldy #6
003C48  3  D1 68                cmp (z80_ix),y
003C4A  3  F0 03                beq *+5
003C4C  3  4C 5D 3C             jmp c00812
003C4F  3  A9 00                lda #0
003C51  3  C5 rr                cmp vara
003C53  3  F0 03                beq *+5
003C55  3  4C 5D 3C             jmp c00812
003C58  3  A9 00                lda #0		; ANIMATE
003C5A  3  20 C5 2E             jsr animsp
003C5D  3  A9 06        c00812: lda #6
003C5F  3  C5 rr                cmp scno
003C61  3  D0 03                bne *+5
003C63  3  4C 4F 3D             jmp c01337
003C66  3  A9 10                lda #16
003C68  3  85 62                sta z80_c
003C6A  3  A0 09                ldy #9
003C6C  3  B1 68                lda (z80_ix),y
003C6E  3  18                   clc
003C6F  3  65 62                adc z80_c
003C71  3  A0 09                ldy #9
003C73  3  91 68                sta (z80_ix),y
003C75  3  A9 08                lda #8
003C77  3  85 62                sta z80_c
003C79  3  A0 09                ldy #9
003C7B  3  B1 68                lda (z80_ix),y
003C7D  3  38                   sec
003C7E  3  E5 62                sbc z80_c
003C80  3  A0 09                ldy #9
003C82  3  91 68                sta (z80_ix),y
003C84  3  A9 08                lda #8
003C86  3  85 62                sta z80_c
003C88  3  A0 09                ldy #9
003C8A  3  B1 68                lda (z80_ix),y
003C8C  3  38                   sec
003C8D  3  E5 62                sbc z80_c
003C8F  3  A0 09                ldy #9
003C91  3  91 68                sta (z80_ix),y
003C93  3  A9 10                lda #16
003C95  3  85 62                sta z80_c
003C97  3  A0 08                ldy #8
003C99  3  B1 68                lda (z80_ix),y
003C9B  3  38                   sec
003C9C  3  E5 62                sbc z80_c
003C9E  3  A0 08                ldy #8
003CA0  3  91 68                sta (z80_ix),y
003CA2  3  A9 10                lda #16
003CA4  3  85 62                sta z80_c
003CA6  3  A0 08                ldy #8
003CA8  3  B1 68                lda (z80_ix),y
003CAA  3  18                   clc
003CAB  3  65 62                adc z80_c
003CAD  3  A0 08                ldy #8
003CAF  3  91 68                sta (z80_ix),y
003CB1  3  A9 8C                lda #140
003CB3  3  A0 08                ldy #8
003CB5  3  D1 68                cmp (z80_ix),y
003CB7  3  B0 03                bcs *+5
003CB9  3  4C D7 3C             jmp c01082
003CBC  3  A9 00                lda #0
003CBE  3  C5 rr                cmp varm
003CC0  3  F0 03                beq *+5
003CC2  3  4C D4 3C             jmp c01078
003CC5  3  A9 08                lda #8
003CC7  3  85 62                sta z80_c
003CC9  3  A0 08                ldy #8
003CCB  3  B1 68                lda (z80_ix),y
003CCD  3  18                   clc
003CCE  3  65 62                adc z80_c
003CD0  3  A0 08                ldy #8
003CD2  3  91 68                sta (z80_ix),y
003CD4  3  4C 41 3D     c01078: jmp c01309
003CD7  3  A9 FF        c01082: lda #255	; REMOVE
003CD9  3  A0 05                ldy #5
003CDB  3  91 68                sta (z80_ix),y
003CDD  3  A9 02                lda #2
003CDF  3  C5 rr                cmp scno
003CE1  3  F0 03                beq *+5
003CE3  3  4C EF 3C             jmp c01133
003CE6  3  A9 20                lda #32
003CE8  3  A0 08                ldy #8
003CEA  3  91 68                sta (z80_ix),y
003CEC  3  4C F5 3C             jmp c01147
003CEF  3  A9 40        c01133: lda #64
003CF1  3  A0 08                ldy #8
003CF3  3  91 68                sta (z80_ix),y
003CF5  3  A9 60        c01147: lda #96
003CF7  3  A0 09                ldy #9
003CF9  3  91 68                sta (z80_ix),y
003CFB  3  A9 02                lda #2
003CFD  3  85 65                sta z80_d	; GETRANDOM
003CFF  3  20 BE 29             jsr random
003D02  3  85 67                sta z80_h
003D04  3  20 A6 22             jsr imul
003D07  3  A5 67                lda z80_h
003D09  3  85 rr                sta varrnd
003D0B  3  A9 01                lda #1
003D0D  3  C5 rr                cmp varrnd
003D0F  3  F0 03                beq *+5
003D11  3  4C 2D 3D             jmp c01269
003D14  3  A9 01                lda #1	; SPAWN
003D16  3  85 62                sta z80_c
003D18  3  A9 08                lda #8
003D1A  3  85 63                sta z80_b
003D1C  3  20 EB 22             jsr spawn
003D1F  3  A5 rr                lda spptr	; SPAWNED
003D21  3  85 68                sta z80_x
003D23  3  A5 rr                lda spptr+1
003D25  3  85 69                sta z80_i
003D27  3  A9 01                lda #1
003D29  3  A0 0B                ldy #11
003D2B  3  91 68                sta (z80_ix),y
003D2D  3  A9 00        c01269: lda #0
003D2F  3  C5 rr                cmp varrnd
003D31  3  F0 03                beq *+5
003D33  3  4C 41 3D             jmp c01309
003D36  3  A9 02                lda #2	; SPAWN
003D38  3  85 62                sta z80_c
003D3A  3  A9 05                lda #5
003D3C  3  85 63                sta z80_b
003D3E  3  20 EB 22             jsr spawn
003D41  3  A9 00        c01309: lda #0
003D43  3  C5 rr                cmp vara
003D45  3  F0 03                beq *+5
003D47  3  4C 4F 3D             jmp c01337
003D4A  3  A9 00                lda #0		; ANIMATE
003D4C  3  20 C5 2E             jsr animsp
003D4F  3  A9 00        c01337: lda #0 	; COLLISION
003D51  3  85 63                sta z80_b
003D53  3  20 10 2F             jsr sktyp
003D56  3  B0 03                bcs :+
003D58  3  4C 78 3D             jmp c01430
003D5B  3               :
003D5B  3  A5 rr                lda skptr	; OTHER
003D5D  3  85 68                sta z80_x
003D5F  3  A5 rr                lda skptr+1
003D61  3  85 69                sta z80_i
003D63  3  A9 FF                lda #255	; REMOVE
003D65  3  A0 05                ldy #5
003D67  3  91 68                sta (z80_ix),y
003D69  3  A9 01                lda #1
003D6B  3  85 rr                sta vard
003D6D  3  A9 08                lda #8	; SPAWN
003D6F  3  85 62                sta z80_c
003D71  3  A9 06                lda #6
003D73  3  85 63                sta z80_b
003D75  3  20 EB 22             jsr spawn
003D78  3  4C 2C 30     c01430: jmp grav
003D7B  3               evnt03:
003D7B  3  A9 2A                lda #42
003D7D  3  A0 06                ldy #6
003D7F  3  D1 68                cmp (z80_ix),y
003D81  3  F0 03                beq *+5
003D83  3  4C 09 3E             jmp d00320
003D86  3  A9 84                lda #132
003D88  3  A0 08                ldy #8
003D8A  3  D1 68                cmp (z80_ix),y
003D8C  3  B0 03                bcs *+5
003D8E  3  4C A0 3D             jmp d00081
003D91  3  A9 08                lda #8
003D93  3  85 62                sta z80_c
003D95  3  A0 08                ldy #8
003D97  3  B1 68                lda (z80_ix),y
003D99  3  18                   clc
003D9A  3  65 62                adc z80_c
003D9C  3  A0 08                ldy #8
003D9E  3  91 68                sta (z80_ix),y
003DA0  3  A9 08        d00081: lda #8
003DA2  3  85 62                sta z80_c
003DA4  3  A0 08                ldy #8
003DA6  3  B1 68                lda (z80_ix),y
003DA8  3  18                   clc
003DA9  3  65 62                adc z80_c
003DAB  3  A0 08                ldy #8
003DAD  3  91 68                sta (z80_ix),y
003DAF  3  A9 08                lda #8
003DB1  3  85 62                sta z80_c
003DB3  3  A0 09                ldy #9
003DB5  3  B1 68                lda (z80_ix),y
003DB7  3  18                   clc
003DB8  3  65 62                adc z80_c
003DBA  3  A0 09                ldy #9
003DBC  3  91 68                sta (z80_ix),y
003DBE  3  A9 08                lda #8
003DC0  3  85 62                sta z80_c
003DC2  3  A0 08                ldy #8
003DC4  3  B1 68                lda (z80_ix),y
003DC6  3  38                   sec
003DC7  3  E5 62                sbc z80_c
003DC9  3  A0 08                ldy #8
003DCB  3  91 68                sta (z80_ix),y
003DCD  3  A9 08                lda #8
003DCF  3  85 62                sta z80_c
003DD1  3  A0 09                ldy #9
003DD3  3  B1 68                lda (z80_ix),y
003DD5  3  38                   sec
003DD6  3  E5 62                sbc z80_c
003DD8  3  A0 09                ldy #9
003DDA  3  91 68                sta (z80_ix),y
003DDC  3  A9 00                lda #0 	; COLLISION
003DDE  3  85 63                sta z80_b
003DE0  3  20 10 2F             jsr sktyp
003DE3  3  B0 03                bcs :+
003DE5  3  4C FB 3D             jmp d00292
003DE8  3               :
003DE8  3  A9 FF                lda #255	; REMOVE
003DEA  3  A0 05                ldy #5
003DEC  3  91 68                sta (z80_ix),y
003DEE  3  A9 3C                lda #60		; BEEP
003DF0  3  0A                   asl a
003DF1  3  8D 95 20             sta sndtyp
003DF4  3  A5 rr                lda numlif
003DF6  3  18                   clc
003DF7  3  69 01                adc #1
003DF9  3  85 rr                sta numlif
003DFB  3  A9 00        d00292: lda #0
003DFD  3  C5 rr                cmp varm
003DFF  3  F0 03                beq *+5
003E01  3  4C 09 3E             jmp d00320
003E04  3  A9 00                lda #0		; ANIMATE
003E06  3  20 C5 2E             jsr animsp
003E09  3  A9 1F        d00320: lda #31
003E0B  3  A0 06                ldy #6
003E0D  3  D1 68                cmp (z80_ix),y
003E0F  3  F0 03                beq *+5
003E11  3  4C 14 3E             jmp d00342
003E14  3  A9 05        d00342: lda #5
003E16  3  C5 rr                cmp scno
003E18  3  F0 03                beq *+5
003E1A  3  4C 58 3E             jmp d00480
003E1D  3  A9 27                lda #39
003E1F  3  A0 06                ldy #6
003E21  3  D1 68                cmp (z80_ix),y
003E23  3  F0 03                beq *+5
003E25  3  4C 39 3E             jmp d00414
003E28  3  A9 00                lda #0
003E2A  3  C5 rr                cmp vara
003E2C  3  F0 03                beq *+5
003E2E  3  4C 36 3E             jmp d00409
003E31  3  A9 00                lda #0		; ANIMATE
003E33  3  20 C5 2E             jsr animsp
003E36  3  4C 58 3E     d00409: jmp d00480
003E39  3  A9 00        d00414: lda #0
003E3B  3  C5 rr                cmp varm
003E3D  3  F0 03                beq *+5
003E3F  3  4C 47 3E             jmp d00442
003E42  3  A9 00                lda #0		; ANIMATE
003E44  3  20 C5 2E             jsr animsp
003E47  3  A5 rr        d00442: lda joyval	; KEY
003E49  3  29 10                and #16
003E4B  3  F0 03                beq :+
003E4D  3  4C 58 3E             jmp d00480
003E50  3               :
003E50  3  A9 03                lda #3
003E52  3  85 rr                sta varl
003E54  3  A9 01                lda #1	; NEXTLEVEL
003E56  3  85 rr                sta nexlev
003E58  3  A9 16        d00480: lda #22
003E5A  3  A0 06                ldy #6
003E5C  3  D1 68                cmp (z80_ix),y
003E5E  3  F0 03                beq *+5
003E60  3  4C 3C 3F             jmp d00989
003E63  3  20 77 26             jsr laddu	; CANGOUP
003E66  3  F0 03                beq :+
003E68  3  4C 7A 3E             jmp d00553
003E6B  3               :
003E6B  3  A9 08                lda #8
003E6D  3  85 62                sta z80_c
003E6F  3  A0 09                ldy #9
003E71  3  B1 68                lda (z80_ix),y
003E73  3  18                   clc
003E74  3  65 62                adc z80_c
003E76  3  A0 09                ldy #9
003E78  3  91 68                sta (z80_ix),y
003E7A  3  A9 08        d00553: lda #8
003E7C  3  85 62                sta z80_c
003E7E  3  A0 08                ldy #8
003E80  3  B1 68                lda (z80_ix),y
003E82  3  18                   clc
003E83  3  65 62                adc z80_c
003E85  3  A0 08                ldy #8
003E87  3  91 68                sta (z80_ix),y
003E89  3  A9 08                lda #8
003E8B  3  85 62                sta z80_c
003E8D  3  A0 08                ldy #8
003E8F  3  B1 68                lda (z80_ix),y
003E91  3  38                   sec
003E92  3  E5 62                sbc z80_c
003E94  3  A0 08                ldy #8
003E96  3  91 68                sta (z80_ix),y
003E98  3  A9 00                lda #0 	; COLLISION
003E9A  3  85 63                sta z80_b
003E9C  3  20 10 2F             jsr sktyp
003E9F  3  B0 03                bcs :+
003EA1  3  4C 3C 3F             jmp d00989
003EA4  3               :
003EA4  3  A9 FF                lda #255	; REMOVE
003EA6  3  A0 05                ldy #5
003EA8  3  91 68                sta (z80_ix),y
003EAA  3  A9 3C                lda #60		; BEEP
003EAC  3  0A                   asl a
003EAD  3  8D 95 20             sta sndtyp
003EB0  3  A9 64                lda #<100		; SCORE
003EB2  3  85 66                sta z80_l
003EB4  3  A9 00                lda #>100
003EB6  3  85 67                sta z80_h
003EB8  3  20 09 24             jsr addsc
003EBB  3  A9 08                lda #8	; SPAWN
003EBD  3  85 62                sta z80_c
003EBF  3  A9 20                lda #32
003EC1  3  85 63                sta z80_b
003EC3  3  20 EB 22             jsr spawn
003EC6  3  A9 08                lda #8	; SPAWN
003EC8  3  85 62                sta z80_c
003ECA  3  A9 16                lda #22
003ECC  3  85 63                sta z80_b
003ECE  3  20 EB 22             jsr spawn
003ED1  3  A9 B4                lda #180
003ED3  3  85 65                sta z80_d	; GETRANDOM
003ED5  3  20 BE 29             jsr random
003ED8  3  85 67                sta z80_h
003EDA  3  20 A6 22             jsr imul
003EDD  3  A5 67                lda z80_h
003EDF  3  85 rr                sta varrnd
003EE1  3  A5 rr                lda varrnd
003EE3  3  4A                   lsr a
003EE4  3  4A                   lsr a
003EE5  3  4A                   lsr a
003EE6  3  85 rr                sta varrnd
003EE8  3  A5 rr                lda varrnd
003EEA  3  0A                   asl a
003EEB  3  0A                   asl a
003EEC  3  0A                   asl a
003EED  3  85 rr                sta varrnd
003EEF  3  A9 50                lda #80
003EF1  3  A0 08                ldy #8
003EF3  3  91 68                sta (z80_ix),y
003EF5  3  A5 rr                lda varrnd
003EF7  3  A0 09                ldy #9
003EF9  3  91 68                sta (z80_ix),y
003EFB  3  A9 08                lda #8
003EFD  3  85 62                sta z80_c
003EFF  3  A0 09                ldy #9
003F01  3  B1 68                lda (z80_ix),y
003F03  3  18                   clc
003F04  3  65 62                adc z80_c
003F06  3  A0 09                ldy #9
003F08  3  91 68                sta (z80_ix),y
003F0A  3  A9 0A                lda #10
003F0C  3  85 65                sta z80_d	; GETRANDOM
003F0E  3  20 BE 29             jsr random
003F11  3  85 67                sta z80_h
003F13  3  20 A6 22             jsr imul
003F16  3  A5 67                lda z80_h
003F18  3  85 rr                sta varrnd
003F1A  3  A9 08                lda #8
003F1C  3  C5 rr                cmp varrnd
003F1E  3  B0 03                bcs *+5
003F20  3  4C 31 3F             jmp d00966
003F23  3  A9 03                lda #3	; SPAWN
003F25  3  85 62                sta z80_c
003F27  3  A9 16                lda #22
003F29  3  85 63                sta z80_b
003F2B  3  20 EB 22             jsr spawn
003F2E  3  4C 3C 3F             jmp d00989
003F31  3  A9 03        d00966: lda #3	; SPAWN
003F33  3  85 62                sta z80_c
003F35  3  A9 2A                lda #42
003F37  3  85 63                sta z80_b
003F39  3  20 EB 22             jsr spawn
003F3C  3  A9 07        d00989: lda #7
003F3E  3  A0 06                ldy #6
003F40  3  D1 68                cmp (z80_ix),y
003F42  3  F0 03                beq *+5
003F44  3  4C B2 3F             jmp d01234
003F47  3  A9 00                lda #0
003F49  3  C5 rr                cmp vare
003F4B  3  F0 03                beq *+5
003F4D  3  4C 5E 3F             jmp d01056
003F50  3  A9 00                lda #0
003F52  3  C5 rr                cmp vara
003F54  3  F0 03                beq *+5
003F56  3  4C 5E 3F             jmp d01056
003F59  3  A9 00                lda #0		; ANIMATE
003F5B  3  20 C5 2E             jsr animsp
003F5E  3  A9 00        d01056: lda #0 	; COLLISION
003F60  3  85 63                sta z80_b
003F62  3  20 10 2F             jsr sktyp
003F65  3  B0 03                bcs :+
003F67  3  4C B2 3F             jmp d01234
003F6A  3               :
003F6A  3  A9 00                lda #0
003F6C  3  C5 rr                cmp vare
003F6E  3  F0 03                beq *+5
003F70  3  4C B2 3F             jmp d01234
003F73  3  A5 rr                lda varc		; SCORE
003F75  3  85 66                sta z80_l
003F77  3  A9 00                lda #0
003F79  3  85 67                sta z80_h
003F7B  3  20 09 24             jsr addsc
003F7E  3  A9 06                lda #6
003F80  3  C5 rr                cmp scno
003F82  3  D0 03                bne *+5
003F84  3  4C 8E 3F             jmp d01154
003F87  3  A9 01                lda #1	; NEXTLEVEL
003F89  3  85 rr                sta nexlev
003F8B  3  4C A7 3F             jmp d01210
003F8E  3  20 D4 20     d01154: jsr cls		; CLS
003F91  3  A9 0A                lda #10
003F93  3  85 rr                sta chary
003F95  3  A9 01                lda #1
003F97  3  85 rr                sta charx
003F99  3  A9 1E                lda #30  	; MESSAGE
003F9B  3  20 6A 2A             jsr dmsg
003F9E  3  A9 50                lda #80 	; DELAY
003FA0  3  20 2F 20             jsr delay
003FA3  3  A9 01                lda #1	; NEXTLEVEL
003FA5  3  85 rr                sta nexlev
003FA7  3  A5 rr        d01210: lda varl
003FA9  3  18                   clc
003FAA  3  69 01                adc #1
003FAC  3  85 rr                sta varl
003FAE  3  A9 01                lda #1
003FB0  3  85 rr                sta varb
003FB2  3  A9 0D        d01234: lda #13
003FB4  3  A0 06                ldy #6
003FB6  3  D1 68                cmp (z80_ix),y
003FB8  3  F0 03                beq *+5
003FBA  3  4C 60 40             jmp d01617
003FBD  3  A9 07                lda #7
003FBF  3  C5 rr                cmp scno
003FC1  3  F0 03                beq *+5
003FC3  3  4C E0 3F             jmp d01328
003FC6  3  A9 06                lda #6
003FC8  3  85 rr                sta chary
003FCA  3  A9 05                lda #5
003FCC  3  85 rr                sta charx
003FCE  3  A9 1A                lda #26  	; MESSAGE
003FD0  3  20 6A 2A             jsr dmsg
003FD3  3  A9 07                lda #7
003FD5  3  85 rr                sta chary
003FD7  3  A9 05                lda #5
003FD9  3  85 rr                sta charx
003FDB  3  A9 1C                lda #28  	; MESSAGE
003FDD  3  20 6A 2A             jsr dmsg
003FE0  3  A9 08        d01328: lda #8
003FE2  3  85 62                sta z80_c
003FE4  3  A0 08                ldy #8
003FE6  3  B1 68                lda (z80_ix),y
003FE8  3  38                   sec
003FE9  3  E5 62                sbc z80_c
003FEB  3  A0 08                ldy #8
003FED  3  91 68                sta (z80_ix),y
003FEF  3  A9 08                lda #8
003FF1  3  85 62                sta z80_c
003FF3  3  A0 08                ldy #8
003FF5  3  B1 68                lda (z80_ix),y
003FF7  3  18                   clc
003FF8  3  65 62                adc z80_c
003FFA  3  A0 08                ldy #8
003FFC  3  91 68                sta (z80_ix),y
003FFE  3  A9 10                lda #16
004000  3  85 62                sta z80_c
004002  3  A0 09                ldy #9
004004  3  B1 68                lda (z80_ix),y
004006  3  38                   sec
004007  3  E5 62                sbc z80_c
004009  3  A0 09                ldy #9
00400B  3  91 68                sta (z80_ix),y
00400D  3  A9 06                lda #6
00400F  3  C5 rr                cmp scno
004011  3  F0 03                beq *+5
004013  3  4C 43 40             jmp d01554
004016  3  A9 08                lda #8
004018  3  85 62                sta z80_c
00401A  3  A0 09                ldy #9
00401C  3  B1 68                lda (z80_ix),y
00401E  3  38                   sec
00401F  3  E5 62                sbc z80_c
004021  3  A0 09                ldy #9
004023  3  91 68                sta (z80_ix),y
004025  3  A9 20                lda #32
004027  3  85 62                sta z80_c
004029  3  A0 09                ldy #9
00402B  3  B1 68                lda (z80_ix),y
00402D  3  38                   sec
00402E  3  E5 62                sbc z80_c
004030  3  A0 09                ldy #9
004032  3  91 68                sta (z80_ix),y
004034  3  A9 28                lda #40
004036  3  85 62                sta z80_c
004038  3  A0 09                ldy #9
00403A  3  B1 68                lda (z80_ix),y
00403C  3  18                   clc
00403D  3  65 62                adc z80_c
00403F  3  A0 09                ldy #9
004041  3  91 68                sta (z80_ix),y
004043  3  A9 10        d01554: lda #16
004045  3  85 62                sta z80_c
004047  3  A0 09                ldy #9
004049  3  B1 68                lda (z80_ix),y
00404B  3  18                   clc
00404C  3  65 62                adc z80_c
00404E  3  A0 09                ldy #9
004050  3  91 68                sta (z80_ix),y
004052  3  A9 00                lda #0
004054  3  C5 rr                cmp varb
004056  3  F0 03                beq *+5
004058  3  4C 60 40             jmp d01617
00405B  3  A9 00                lda #0		; ANIMATE
00405D  3  20 C5 2E             jsr animsp
004060  3  A9 1A        d01617: lda #26
004062  3  A0 06                ldy #6
004064  3  D1 68                cmp (z80_ix),y
004066  3  F0 03                beq *+5
004068  3  4C 64 41             jmp d02176
00406B  3  A9 00                lda #0
00406D  3  C5 rr                cmp varb
00406F  3  F0 03                beq *+5
004071  3  4C 79 40             jmp d01667
004074  3  A9 00                lda #0		; ANIMATE
004076  3  20 C5 2E             jsr animsp
004079  3  A9 04        d01667: lda #4
00407B  3  C5 rr                cmp scno
00407D  3  F0 03                beq *+5
00407F  3  4C E6 40             jmp d01895
004082  3  A9 00                lda #0
004084  3  C5 rr                cmp varm
004086  3  F0 03                beq *+5
004088  3  4C E6 40             jmp d01895
00408B  3  A9 06                lda #6
00408D  3  85 rr                sta chary
00408F  3  A9 01                lda #1
004091  3  85 rr                sta charx
004093  3  A9 04                lda #4  	; MESSAGE
004095  3  20 6A 2A             jsr dmsg
004098  3  A9 06                lda #6
00409A  3  85 rr                sta chary
00409C  3  A9 16                lda #22
00409E  3  85 rr                sta charx
0040A0  3  A9 06                lda #6  	; MESSAGE
0040A2  3  20 6A 2A             jsr dmsg
0040A5  3  A9 0B                lda #11
0040A7  3  85 rr                sta chary
0040A9  3  A9 02                lda #2
0040AB  3  85 rr                sta charx
0040AD  3  A9 06                lda #6  	; MESSAGE
0040AF  3  20 6A 2A             jsr dmsg
0040B2  3  A9 10                lda #16
0040B4  3  85 rr                sta chary
0040B6  3  A9 01                lda #1
0040B8  3  85 rr                sta charx
0040BA  3  A9 06                lda #6  	; MESSAGE
0040BC  3  20 6A 2A             jsr dmsg
0040BF  3  A9 11                lda #17
0040C1  3  85 rr                sta chary
0040C3  3  A9 05                lda #5
0040C5  3  85 rr                sta charx
0040C7  3  A9 06                lda #6  	; MESSAGE
0040C9  3  20 6A 2A             jsr dmsg
0040CC  3  A9 10                lda #16
0040CE  3  85 rr                sta chary
0040D0  3  A9 18                lda #24
0040D2  3  85 rr                sta charx
0040D4  3  A9 06                lda #6  	; MESSAGE
0040D6  3  20 6A 2A             jsr dmsg
0040D9  3  A9 11                lda #17
0040DB  3  85 rr                sta chary
0040DD  3  A9 13                lda #19
0040DF  3  85 rr                sta charx
0040E1  3  A9 06                lda #6  	; MESSAGE
0040E3  3  20 6A 2A             jsr dmsg
0040E6  3  A9 06        d01895: lda #6
0040E8  3  C5 rr                cmp scno
0040EA  3  F0 03                beq *+5
0040EC  3  4C 64 41             jmp d02176
0040EF  3  A9 05                lda #5
0040F1  3  85 rr                sta varo
0040F3  3  A9 02                lda #2 	; REPEAT
0040F5  3  85 rr                sta loopa
0040F7  3  A5 rr        d01931: lda varo
0040F9  3  85 rr                sta chary
0040FB  3  A9 01                lda #1
0040FD  3  85 rr                sta charx
0040FF  3  A9 19                lda #25  	; MESSAGE
004101  3  20 6A 2A             jsr dmsg
004104  3  A9 08                lda #8
004106  3  85 62                sta z80_c
004108  3  A5 rr                lda varo
00410A  3  18                   clc
00410B  3  65 62                adc z80_c
00410D  3  85 rr                sta varo
00410F  3  C6 rr                dec loopa	; ENDREPEAT
004111  3  F0 03                beq :+
004113  3  4C F7 40             jmp d01931
004116  3               :
004116  3  A9 09                lda #9
004118  3  85 rr                sta varo
00411A  3  A9 02                lda #2 	; REPEAT
00411C  3  85 rr                sta loopa
00411E  3  A5 rr        d02019: lda varo
004120  3  85 rr                sta chary
004122  3  A9 1B                lda #27
004124  3  85 rr                sta charx
004126  3  A9 19                lda #25  	; MESSAGE
004128  3  20 6A 2A             jsr dmsg
00412B  3  A9 08                lda #8
00412D  3  85 62                sta z80_c
00412F  3  A5 rr                lda varo
004131  3  18                   clc
004132  3  65 62                adc z80_c
004134  3  85 rr                sta varo
004136  3  C6 rr                dec loopa	; ENDREPEAT
004138  3  F0 03                beq :+
00413A  3  4C 1E 41             jmp d02019
00413D  3               :
00413D  3  A9 05                lda #5
00413F  3  85 rr                sta varo
004141  3  A9 05                lda #5 	; REPEAT
004143  3  85 rr                sta loopa
004145  3  A5 rr        d02107: lda varo
004147  3  85 rr                sta chary
004149  3  A9 07                lda #7
00414B  3  85 rr                sta charx
00414D  3  A9 1B                lda #27  	; MESSAGE
00414F  3  20 6A 2A             jsr dmsg
004152  3  A9 04                lda #4
004154  3  85 62                sta z80_c
004156  3  A5 rr                lda varo
004158  3  18                   clc
004159  3  65 62                adc z80_c
00415B  3  85 rr                sta varo
00415D  3  C6 rr                dec loopa	; ENDREPEAT
00415F  3  F0 03                beq :+
004161  3  4C 45 41             jmp d02107
004164  3               :
004164  3  60           d02176: rts
004165  3               evnt04:
004165  3  A9 08                lda #8
004167  3  C5 rr                cmp scno
004169  3  F0 03                beq *+5
00416B  3  4C 5B 42             jmp e00522
00416E  3  A9 0D                lda #13
004170  3  A0 06                ldy #6
004172  3  D1 68                cmp (z80_ix),y
004174  3  F0 03                beq *+5
004176  3  4C A8 41             jmp e00145
004179  3  A9 08                lda #8
00417B  3  85 62                sta z80_c
00417D  3  A0 08                ldy #8
00417F  3  B1 68                lda (z80_ix),y
004181  3  38                   sec
004182  3  E5 62                sbc z80_c
004184  3  A0 08                ldy #8
004186  3  91 68                sta (z80_ix),y
004188  3  A9 08                lda #8
00418A  3  85 62                sta z80_c
00418C  3  A0 08                ldy #8
00418E  3  B1 68                lda (z80_ix),y
004190  3  18                   clc
004191  3  65 62                adc z80_c
004193  3  A0 08                ldy #8
004195  3  91 68                sta (z80_ix),y
004197  3  A9 00                lda #0
004199  3  C5 rr                cmp vara
00419B  3  F0 03                beq *+5
00419D  3  4C A8 41             jmp e00145
0041A0  3  A9 00                lda #0		; ANIMATE
0041A2  3  20 C5 2E             jsr animsp
0041A5  3  20 A6 29             jsr jump	; TABLEJUMP
0041A8  3  A9 17        e00145: lda #23
0041AA  3  A0 06                ldy #6
0041AC  3  D1 68                cmp (z80_ix),y
0041AE  3  90 03                bcc *+5
0041B0  3  4C 0D 42             jmp e00360
0041B3  3  A9 1A                lda #26
0041B5  3  A0 06                ldy #6
0041B7  3  D1 68                cmp (z80_ix),y
0041B9  3  B0 03                bcs *+5
0041BB  3  4C 0D 42             jmp e00360
0041BE  3  A9 78                lda #120
0041C0  3  A0 08                ldy #8
0041C2  3  D1 68                cmp (z80_ix),y
0041C4  3  B0 03                bcs *+5
0041C6  3  4C E1 41             jmp e00264
0041C9  3  A9 00                lda #0
0041CB  3  C5 rr                cmp vara
0041CD  3  F0 03                beq *+5
0041CF  3  4C E1 41             jmp e00264
0041D2  3  A9 08                lda #8
0041D4  3  85 62                sta z80_c
0041D6  3  A0 08                ldy #8
0041D8  3  B1 68                lda (z80_ix),y
0041DA  3  18                   clc
0041DB  3  65 62                adc z80_c
0041DD  3  A0 08                ldy #8
0041DF  3  91 68                sta (z80_ix),y
0041E1  3  A9 1A        e00264: lda #26
0041E3  3  A0 06                ldy #6
0041E5  3  D1 68                cmp (z80_ix),y
0041E7  3  F0 03                beq *+5
0041E9  3  4C EF 41             jmp e00291
0041EC  3  4C 0D 42             jmp e00360
0041EF  3  A9 08        e00291: lda #8
0041F1  3  85 62                sta z80_c
0041F3  3  A0 08                ldy #8
0041F5  3  B1 68                lda (z80_ix),y
0041F7  3  38                   sec
0041F8  3  E5 62                sbc z80_c
0041FA  3  A0 08                ldy #8
0041FC  3  91 68                sta (z80_ix),y
0041FE  3  A9 08                lda #8
004200  3  85 62                sta z80_c
004202  3  A0 08                ldy #8
004204  3  B1 68                lda (z80_ix),y
004206  3  18                   clc
004207  3  65 62                adc z80_c
004209  3  A0 08                ldy #8
00420B  3  91 68                sta (z80_ix),y
00420D  3  A9 1A        e00360: lda #26
00420F  3  A0 06                ldy #6
004211  3  D1 68                cmp (z80_ix),y
004213  3  90 03                bcc *+5
004215  3  4C 5B 42             jmp e00522
004218  3  A9 1D                lda #29
00421A  3  A0 06                ldy #6
00421C  3  D1 68                cmp (z80_ix),y
00421E  3  B0 03                bcs *+5
004220  3  4C 5B 42             jmp e00522
004223  3  A9 88                lda #136
004225  3  A0 08                ldy #8
004227  3  D1 68                cmp (z80_ix),y
004229  3  B0 03                bcs *+5
00422B  3  4C 57 42             jmp e00511
00422E  3  A9 00                lda #0
004230  3  C5 rr                cmp vara
004232  3  F0 03                beq *+5
004234  3  4C 46 42             jmp e00479
004237  3  A9 08                lda #8
004239  3  85 62                sta z80_c
00423B  3  A0 08                ldy #8
00423D  3  B1 68                lda (z80_ix),y
00423F  3  18                   clc
004240  3  65 62                adc z80_c
004242  3  A0 08                ldy #8
004244  3  91 68                sta (z80_ix),y
004246  3  A9 1C        e00479: lda #28
004248  3  A0 06                ldy #6
00424A  3  D1 68                cmp (z80_ix),y
00424C  3  F0 03                beq *+5
00424E  3  4C 54 42             jmp e00506
004251  3  4C 54 42             jmp e00506
004254  3  4C 5B 42     e00506: jmp e00522
004257  3  A9 01        e00511: lda #1	; NEXTLEVEL
004259  3  85 rr                sta nexlev
00425B  3  A9 2D        e00522: lda #45
00425D  3  A0 06                ldy #6
00425F  3  D1 68                cmp (z80_ix),y
004261  3  F0 03                beq *+5
004263  3  4C A2 42             jmp e00678
004266  3  A9 00                lda #0 	; COLLISION
004268  3  85 63                sta z80_b
00426A  3  20 10 2F             jsr sktyp
00426D  3  B0 03                bcs :+
00426F  3  4C 76 42             jmp e00581
004272  3               :
004272  3  A9 01                lda #1	; NEXTLEVEL
004274  3  85 rr                sta nexlev
004276  3  A9 00        e00581: lda #0
004278  3  C5 rr                cmp vara
00427A  3  F0 03                beq *+5
00427C  3  4C 84 42             jmp e00609
00427F  3  A9 00                lda #0		; ANIMATE
004281  3  20 C5 2E             jsr animsp
004284  3  A9 08        e00609: lda #8
004286  3  85 62                sta z80_c
004288  3  A0 08                ldy #8
00428A  3  B1 68                lda (z80_ix),y
00428C  3  38                   sec
00428D  3  E5 62                sbc z80_c
00428F  3  A0 08                ldy #8
004291  3  91 68                sta (z80_ix),y
004293  3  A9 08                lda #8
004295  3  85 62                sta z80_c
004297  3  A0 08                ldy #8
004299  3  B1 68                lda (z80_ix),y
00429B  3  18                   clc
00429C  3  65 62                adc z80_c
00429E  3  A0 08                ldy #8
0042A0  3  91 68                sta (z80_ix),y
0042A2  3  A9 2C        e00678: lda #44
0042A4  3  A0 06                ldy #6
0042A6  3  D1 68                cmp (z80_ix),y
0042A8  3  F0 03                beq *+5
0042AA  3  4C 42 43             jmp e01027
0042AD  3  A9 00                lda #0 	; COLLISION
0042AF  3  85 63                sta z80_b
0042B1  3  20 10 2F             jsr sktyp
0042B4  3  B0 03                bcs :+
0042B6  3  4C 22 43             jmp e00959
0042B9  3               :
0042B9  3  A9 40                lda #64
0042BB  3  A0 08                ldy #8
0042BD  3  D1 68                cmp (z80_ix),y
0042BF  3  90 03                bcc *+5
0042C1  3  4C D6 42             jmp e00787
0042C4  3  A9 04                lda #4
0042C6  3  85 62                sta z80_c
0042C8  3  A0 08                ldy #8
0042CA  3  B1 68                lda (z80_ix),y
0042CC  3  38                   sec
0042CD  3  E5 62                sbc z80_c
0042CF  3  A0 08                ldy #8
0042D1  3  91 68                sta (z80_ix),y
0042D3  3  4C 22 43             jmp e00959
0042D6  3  A9 FF        e00787: lda #255	; REMOVE
0042D8  3  A0 05                ldy #5
0042DA  3  91 68                sta (z80_ix),y
0042DC  3  A9 3C                lda #60		; BEEP
0042DE  3  0A                   asl a
0042DF  3  8D 95 20             sta sndtyp
0042E2  3  A9 C8                lda #<200		; SCORE
0042E4  3  85 66                sta z80_l
0042E6  3  A9 00                lda #>200
0042E8  3  85 67                sta z80_h
0042EA  3  20 09 24             jsr addsc
0042ED  3  A5 rr                lda vare
0042EF  3  38                   sec
0042F0  3  E9 01                sbc #1
0042F2  3  85 rr                sta vare
0042F4  3  A9 03                lda #3
0042F6  3  C5 rr                cmp vare
0042F8  3  F0 03                beq *+5
0042FA  3  4C 22 43             jmp e00959
0042FD  3  A9 40                lda #64
0042FF  3  A0 08                ldy #8
004301  3  91 68                sta (z80_ix),y
004303  3  A9 78                lda #120
004305  3  A0 09                ldy #9
004307  3  91 68                sta (z80_ix),y
004309  3  A9 01                lda #1	; SPAWN
00430B  3  85 62                sta z80_c
00430D  3  A9 09                lda #9
00430F  3  85 63                sta z80_b
004311  3  20 EB 22             jsr spawn
004314  3  A5 rr                lda spptr	; SPAWNED
004316  3  85 68                sta z80_x
004318  3  A5 rr                lda spptr+1
00431A  3  85 69                sta z80_i
00431C  3  A9 00                lda #0
00431E  3  A0 0B                ldy #11
004320  3  91 68                sta (z80_ix),y
004322  3  A9 00        e00959: lda #0
004324  3  C5 rr                cmp vare
004326  3  F0 03                beq *+5
004328  3  4C 42 43             jmp e01027
00432B  3  A9 A0                lda #160
00432D  3  A0 08                ldy #8
00432F  3  91 68                sta (z80_ix),y
004331  3  A9 78                lda #120
004333  3  A0 09                ldy #9
004335  3  91 68                sta (z80_ix),y
004337  3  A9 04                lda #4	; SPAWN
004339  3  85 62                sta z80_c
00433B  3  A9 2D                lda #45
00433D  3  85 63                sta z80_b
00433F  3  20 EB 22             jsr spawn
004342  3  A9 0E        e01027: lda #14
004344  3  A0 06                ldy #6
004346  3  D1 68                cmp (z80_ix),y
004348  3  F0 03                beq *+5
00434A  3  4C B0 43             jmp e01262
00434D  3  A9 00                lda #0
00434F  3  C5 rr                cmp vara
004351  3  F0 03                beq *+5
004353  3  4C 5B 43             jmp e01077
004356  3  A9 00                lda #0		; ANIMATE
004358  3  20 C5 2E             jsr animsp
00435B  3  A9 00        e01077: lda #0 	; COLLISION
00435D  3  85 63                sta z80_b
00435F  3  20 10 2F             jsr sktyp
004362  3  B0 03                bcs :+
004364  3  4C 90 43             jmp e01195
004367  3               :
004367  3  A9 FF                lda #255	; REMOVE
004369  3  A0 05                ldy #5
00436B  3  91 68                sta (z80_ix),y
00436D  3  A9 3C                lda #60		; BEEP
00436F  3  0A                   asl a
004370  3  8D 95 20             sta sndtyp
004373  3  A9 08                lda #8	; SPAWN
004375  3  85 62                sta z80_c
004377  3  A9 20                lda #32
004379  3  85 63                sta z80_b
00437B  3  20 EB 22             jsr spawn
00437E  3  A9 64                lda #<100		; SCORE
004380  3  85 66                sta z80_l
004382  3  A9 00                lda #>100
004384  3  85 67                sta z80_h
004386  3  20 09 24             jsr addsc
004389  3  A5 rr                lda vare
00438B  3  38                   sec
00438C  3  E9 01                sbc #1
00438E  3  85 rr                sta vare
004390  3  A9 00        e01195: lda #0
004392  3  C5 rr                cmp vare
004394  3  F0 03                beq *+5
004396  3  4C B0 43             jmp e01262
004399  3  A9 08                lda #8
00439B  3  A0 08                ldy #8
00439D  3  91 68                sta (z80_ix),y
00439F  3  A9 58                lda #88
0043A1  3  A0 09                ldy #9
0043A3  3  91 68                sta (z80_ix),y
0043A5  3  A9 03                lda #3	; SPAWN
0043A7  3  85 62                sta z80_c
0043A9  3  A9 07                lda #7
0043AB  3  85 63                sta z80_b
0043AD  3  20 EB 22             jsr spawn
0043B0  3  4C 2C 30     e01262: jmp grav
0043B3  3               evnt05:
0043B3  3  A0 08                ldy #8
0043B5  3  B1 68                lda (z80_ix),y
0043B7  3  4A                   lsr a
0043B8  3  4A                   lsr a
0043B9  3  4A                   lsr a
0043BA  3  A0 08                ldy #8
0043BC  3  91 68                sta (z80_ix),y
0043BE  3  A0 08                ldy #8
0043C0  3  B1 68                lda (z80_ix),y
0043C2  3  0A                   asl a
0043C3  3  0A                   asl a
0043C4  3  0A                   asl a
0043C5  3  A0 08                ldy #8
0043C7  3  91 68                sta (z80_ix),y
0043C9  3  A9 21                lda #33
0043CB  3  A0 06                ldy #6
0043CD  3  D1 68                cmp (z80_ix),y
0043CF  3  F0 03                beq *+5
0043D1  3  4C 1E 44             jmp f00250
0043D4  3  A9 00                lda #0
0043D6  3  C5 rr                cmp vara
0043D8  3  F0 03                beq *+5
0043DA  3  4C E2 43             jmp f00111
0043DD  3  A9 00                lda #0		; ANIMATE
0043DF  3  20 C5 2E             jsr animsp
0043E2  3  A9 08        f00111: lda #8
0043E4  3  85 62                sta z80_c
0043E6  3  A0 09                ldy #9
0043E8  3  B1 68                lda (z80_ix),y
0043EA  3  38                   sec
0043EB  3  E5 62                sbc z80_c
0043ED  3  A0 09                ldy #9
0043EF  3  91 68                sta (z80_ix),y
0043F1  3  A9 08                lda #8
0043F3  3  85 62                sta z80_c
0043F5  3  A0 08                ldy #8
0043F7  3  B1 68                lda (z80_ix),y
0043F9  3  38                   sec
0043FA  3  E5 62                sbc z80_c
0043FC  3  A0 08                ldy #8
0043FE  3  91 68                sta (z80_ix),y
004400  3  A9 08                lda #8
004402  3  85 62                sta z80_c
004404  3  A0 08                ldy #8
004406  3  B1 68                lda (z80_ix),y
004408  3  18                   clc
004409  3  65 62                adc z80_c
00440B  3  A0 08                ldy #8
00440D  3  91 68                sta (z80_ix),y
00440F  3  A9 08                lda #8
004411  3  85 62                sta z80_c
004413  3  A0 09                ldy #9
004415  3  B1 68                lda (z80_ix),y
004417  3  18                   clc
004418  3  65 62                adc z80_c
00441A  3  A0 09                ldy #9
00441C  3  91 68                sta (z80_ix),y
00441E  3  A9 03        f00250: lda #3
004420  3  C5 rr                cmp scno
004422  3  F0 03                beq *+5
004424  3  4C 71 45             jmp f00955
004427  3  A9 00                lda #0
004429  3  C5 rr                cmp varb
00442B  3  F0 03                beq *+5
00442D  3  4C 3D 44             jmp f00308
004430  3  A9 01                lda #1
004432  3  C5 rr                cmp varg
004434  3  B0 03                bcs *+5
004436  3  4C 3D 44             jmp f00308
004439  3  A9 02                lda #2
00443B  3  85 rr                sta varg
00443D  3  A9 03        f00308: lda #3
00443F  3  A0 06                ldy #6
004441  3  D1 68                cmp (z80_ix),y
004443  3  D0 03                bne *+5
004445  3  4C C5 44             jmp f00600
004448  3  A9 03                lda #3
00444A  3  C5 rr                cmp varg
00444C  3  F0 03                beq *+5
00444E  3  4C 57 44             jmp f00363
004451  3  A9 FF                lda #255	; REMOVE
004453  3  A0 05                ldy #5
004455  3  91 68                sta (z80_ix),y
004457  3  A9 10        f00363: lda #16
004459  3  A0 08                ldy #8
00445B  3  D1 68                cmp (z80_ix),y
00445D  3  F0 03                beq *+5
00445F  3  4C 8E 44             jmp f00482
004462  3  A9 1A                lda #26
004464  3  A0 06                ldy #6
004466  3  D1 68                cmp (z80_ix),y
004468  3  F0 03                beq *+5
00446A  3  4C 70 44             jmp f00412
00446D  3  4C 8E 44             jmp f00482
004470  3  A9 08        f00412: lda #8
004472  3  85 62                sta z80_c
004474  3  A0 08                ldy #8
004476  3  B1 68                lda (z80_ix),y
004478  3  38                   sec
004479  3  E5 62                sbc z80_c
00447B  3  A0 08                ldy #8
00447D  3  91 68                sta (z80_ix),y
00447F  3  A9 08                lda #8
004481  3  85 62                sta z80_c
004483  3  A0 08                ldy #8
004485  3  B1 68                lda (z80_ix),y
004487  3  18                   clc
004488  3  65 62                adc z80_c
00448A  3  A0 08                ldy #8
00448C  3  91 68                sta (z80_ix),y
00448E  3  A9 20        f00482: lda #32
004490  3  A0 08                ldy #8
004492  3  D1 68                cmp (z80_ix),y
004494  3  F0 03                beq *+5
004496  3  4C C2 44             jmp f00596
004499  3  A9 10                lda #16
00449B  3  A0 06                ldy #6
00449D  3  D1 68                cmp (z80_ix),y
00449F  3  F0 03                beq *+5
0044A1  3  4C C2 44             jmp f00596
0044A4  3  A9 08                lda #8
0044A6  3  85 62                sta z80_c
0044A8  3  A0 08                ldy #8
0044AA  3  B1 68                lda (z80_ix),y
0044AC  3  38                   sec
0044AD  3  E5 62                sbc z80_c
0044AF  3  A0 08                ldy #8
0044B1  3  91 68                sta (z80_ix),y
0044B3  3  A9 08                lda #8
0044B5  3  85 62                sta z80_c
0044B7  3  A0 08                ldy #8
0044B9  3  B1 68                lda (z80_ix),y
0044BB  3  18                   clc
0044BC  3  65 62                adc z80_c
0044BE  3  A0 08                ldy #8
0044C0  3  91 68                sta (z80_ix),y
0044C2  3  4C D2 44     f00596: jmp f00628
0044C5  3  A9 17        f00600: lda #23
0044C7  3  85 rr                sta chary
0044C9  3  A9 00                lda #0
0044CB  3  85 rr                sta charx
0044CD  3  A9 01                lda #1  	; MESSAGE
0044CF  3  20 6A 2A             jsr dmsg
0044D2  3  A9 02        f00628: lda #2
0044D4  3  C5 rr                cmp varg
0044D6  3  B0 03                bcs *+5
0044D8  3  4C E9 44             jmp f00673
0044DB  3  A9 00                lda #0
0044DD  3  C5 rr                cmp vara
0044DF  3  F0 03                beq *+5
0044E1  3  4C E9 44             jmp f00673
0044E4  3  A9 00                lda #0		; ANIMATE
0044E6  3  20 C5 2E             jsr animsp
0044E9  3  A9 03        f00673: lda #3
0044EB  3  A0 06                ldy #6
0044ED  3  D1 68                cmp (z80_ix),y
0044EF  3  D0 03                bne *+5
0044F1  3  4C 29 45             jmp f00806
0044F4  3  A9 02                lda #2
0044F6  3  C5 rr                cmp varg
0044F8  3  F0 03                beq *+5
0044FA  3  4C 29 45             jmp f00806
0044FD  3  A9 00                lda #0
0044FF  3  A0 09                ldy #9
004501  3  D1 68                cmp (z80_ix),y
004503  3  90 03                bcc *+5
004505  3  4C 23 45             jmp f00790
004508  3  A9 00                lda #0
00450A  3  C5 rr                cmp varh
00450C  3  F0 03                beq *+5
00450E  3  4C 20 45             jmp f00785
004511  3  A9 08                lda #8
004513  3  85 62                sta z80_c
004515  3  A0 09                ldy #9
004517  3  B1 68                lda (z80_ix),y
004519  3  38                   sec
00451A  3  E5 62                sbc z80_c
00451C  3  A0 09                ldy #9
00451E  3  91 68                sta (z80_ix),y
004520  3  4C 29 45     f00785: jmp f00806
004523  3  A9 FF        f00790: lda #255	; REMOVE
004525  3  A0 05                ldy #5
004527  3  91 68                sta (z80_ix),y
004529  3  A9 0F        f00806: lda #15
00452B  3  A0 06                ldy #6
00452D  3  D1 68                cmp (z80_ix),y
00452F  3  F0 03                beq *+5
004531  3  4C 50 45             jmp f00886
004534  3  A9 08                lda #8
004536  3  A0 09                ldy #9
004538  3  D1 68                cmp (z80_ix),y
00453A  3  B0 03                bcs *+5
00453C  3  4C 50 45             jmp f00886
00453F  3  A9 03                lda #3
004541  3  85 rr                sta varg
004543  3  A9 04                lda #4
004545  3  85 rr                sta chary
004547  3  A9 08                lda #8
004549  3  85 rr                sta charx
00454B  3  A9 15                lda #21  	; MESSAGE
00454D  3  20 6A 2A             jsr dmsg
004550  3  A9 03        f00886: lda #3
004552  3  A0 06                ldy #6
004554  3  D1 68                cmp (z80_ix),y
004556  3  F0 03                beq *+5
004558  3  4C 71 45             jmp f00955
00455B  3  A9 03                lda #3
00455D  3  C5 rr                cmp varg
00455F  3  F0 03                beq *+5
004561  3  4C 71 45             jmp f00955
004564  3  A5 rr                lda joyval	; KEY
004566  3  29 10                and #16
004568  3  F0 03                beq :+
00456A  3  4C 71 45             jmp f00955
00456D  3               :
00456D  3  A9 01                lda #1	; NEXTLEVEL
00456F  3  85 rr                sta nexlev
004571  3  A9 01        f00955: lda #1
004573  3  C5 rr                cmp scno
004575  3  F0 03                beq *+5
004577  3  4C 13 47             jmp f01828
00457A  3  A9 00                lda #0
00457C  3  C5 rr                cmp varg
00457E  3  F0 03                beq *+5
004580  3  4C E3 45             jmp f01185
004583  3  A9 1A                lda #26
004585  3  A0 06                ldy #6
004587  3  D1 68                cmp (z80_ix),y
004589  3  D0 03                bne *+5
00458B  3  4C A7 45             jmp f01061
00458E  3  A9 03                lda #3
004590  3  A0 06                ldy #6
004592  3  D1 68                cmp (z80_ix),y
004594  3  D0 03                bne *+5
004596  3  4C A7 45             jmp f01061
004599  3  A9 00                lda #0
00459B  3  C5 rr                cmp varh
00459D  3  F0 03                beq *+5
00459F  3  4C A7 45             jmp f01061
0045A2  3  A9 00                lda #0		; ANIMATE
0045A4  3  20 C5 2E             jsr animsp
0045A7  3  A9 03        f01061: lda #3
0045A9  3  A0 06                ldy #6
0045AB  3  D1 68                cmp (z80_ix),y
0045AD  3  F0 03                beq *+5
0045AF  3  4C C0 45             jmp f01111
0045B2  3  A9 00                lda #0
0045B4  3  C5 rr                cmp vara
0045B6  3  F0 03                beq *+5
0045B8  3  4C C0 45             jmp f01111
0045BB  3  A9 00                lda #0		; ANIMATE
0045BD  3  20 C5 2E             jsr animsp
0045C0  3  A9 1F        f01111: lda #31
0045C2  3  A0 06                ldy #6
0045C4  3  D1 68                cmp (z80_ix),y
0045C6  3  F0 03                beq *+5
0045C8  3  4C E3 45             jmp f01185
0045CB  3  A9 00                lda #0
0045CD  3  C5 rr                cmp varh
0045CF  3  F0 03                beq *+5
0045D1  3  4C E3 45             jmp f01185
0045D4  3  A9 08                lda #8
0045D6  3  85 62                sta z80_c
0045D8  3  A0 08                ldy #8
0045DA  3  B1 68                lda (z80_ix),y
0045DC  3  18                   clc
0045DD  3  65 62                adc z80_c
0045DF  3  A0 08                ldy #8
0045E1  3  91 68                sta (z80_ix),y
0045E3  3  A9 01        f01185: lda #1
0045E5  3  C5 rr                cmp varg
0045E7  3  F0 03                beq *+5
0045E9  3  4C 05 46             jmp f01252
0045EC  3  A9 1A                lda #26
0045EE  3  A0 06                ldy #6
0045F0  3  D1 68                cmp (z80_ix),y
0045F2  3  F0 03                beq *+5
0045F4  3  4C 05 46             jmp f01252
0045F7  3  A9 00                lda #0
0045F9  3  C5 rr                cmp varh
0045FB  3  F0 03                beq *+5
0045FD  3  4C 05 46             jmp f01252
004600  3  A9 00                lda #0		; ANIMATE
004602  3  20 C5 2E             jsr animsp
004605  3  A9 17        f01252: lda #23
004607  3  A0 06                ldy #6
004609  3  D1 68                cmp (z80_ix),y
00460B  3  90 03                bcc *+5
00460D  3  4C AE 46             jmp f01613
004610  3  A9 1A                lda #26
004612  3  A0 06                ldy #6
004614  3  D1 68                cmp (z80_ix),y
004616  3  B0 03                bcs *+5
004618  3  4C AE 46             jmp f01613
00461B  3  A9 18                lda #24
00461D  3  A0 08                ldy #8
00461F  3  D1 68                cmp (z80_ix),y
004621  3  90 03                bcc *+5
004623  3  4C 41 46             jmp f01375
004626  3  A9 00                lda #0
004628  3  C5 rr                cmp varh
00462A  3  F0 03                beq *+5
00462C  3  4C 3E 46             jmp f01370
00462F  3  A9 08                lda #8
004631  3  85 62                sta z80_c
004633  3  A0 08                ldy #8
004635  3  B1 68                lda (z80_ix),y
004637  3  38                   sec
004638  3  E5 62                sbc z80_c
00463A  3  A0 08                ldy #8
00463C  3  91 68                sta (z80_ix),y
00463E  3  4C 82 46     f01370: jmp f01516
004641  3  A9 01        f01375: lda #1
004643  3  85 rr                sta varg
004645  3  A9 0C                lda #12
004647  3  85 rr                sta chary
004649  3  A9 09                lda #9
00464B  3  85 rr                sta charx
00464D  3  A9 14                lda #20  	; MESSAGE
00464F  3  20 6A 2A             jsr dmsg
004652  3  A9 17                lda #23
004654  3  85 rr                sta chary
004656  3  A9 0B                lda #11
004658  3  85 rr                sta charx
00465A  3  A9 15                lda #21  	; MESSAGE
00465C  3  20 6A 2A             jsr dmsg
00465F  3  A5 rr                lda joyval	; KEY
004661  3  29 10                and #16
004663  3  F0 03                beq :+
004665  3  4C 82 46             jmp f01516
004668  3               :
004668  3  20 FE 2F             jsr scrr	; SCREENRIGHT
00466B  3  A9 88                lda #136
00466D  3  A0 08                ldy #8
00466F  3  91 68                sta (z80_ix),y
004671  3  A9 20                lda #32
004673  3  A0 09                ldy #9
004675  3  91 68                sta (z80_ix),y
004677  3  A9 00                lda #0	; SPAWN
004679  3  85 62                sta z80_c
00467B  3  A9 00                lda #0
00467D  3  85 63                sta z80_b
00467F  3  20 EB 22             jsr spawn
004682  3  A9 1A        f01516: lda #26
004684  3  A0 06                ldy #6
004686  3  D1 68                cmp (z80_ix),y
004688  3  F0 03                beq *+5
00468A  3  4C 90 46             jmp f01543
00468D  3  4C AE 46             jmp f01613
004690  3  A9 08        f01543: lda #8
004692  3  85 62                sta z80_c
004694  3  A0 08                ldy #8
004696  3  B1 68                lda (z80_ix),y
004698  3  18                   clc
004699  3  65 62                adc z80_c
00469B  3  A0 08                ldy #8
00469D  3  91 68                sta (z80_ix),y
00469F  3  A9 08                lda #8
0046A1  3  85 62                sta z80_c
0046A3  3  A0 08                ldy #8
0046A5  3  B1 68                lda (z80_ix),y
0046A7  3  38                   sec
0046A8  3  E5 62                sbc z80_c
0046AA  3  A0 08                ldy #8
0046AC  3  91 68                sta (z80_ix),y
0046AE  3  A9 1A        f01613: lda #26
0046B0  3  A0 06                ldy #6
0046B2  3  D1 68                cmp (z80_ix),y
0046B4  3  90 03                bcc *+5
0046B6  3  4C 13 47             jmp f01828
0046B9  3  A9 1D                lda #29
0046BB  3  A0 06                ldy #6
0046BD  3  D1 68                cmp (z80_ix),y
0046BF  3  B0 03                bcs *+5
0046C1  3  4C 13 47             jmp f01828
0046C4  3  A9 28                lda #40
0046C6  3  A0 08                ldy #8
0046C8  3  D1 68                cmp (z80_ix),y
0046CA  3  90 03                bcc *+5
0046CC  3  4C E7 46             jmp f01731
0046CF  3  A9 00                lda #0
0046D1  3  C5 rr                cmp varh
0046D3  3  F0 03                beq *+5
0046D5  3  4C E7 46             jmp f01731
0046D8  3  A9 08                lda #8
0046DA  3  85 62                sta z80_c
0046DC  3  A0 08                ldy #8
0046DE  3  B1 68                lda (z80_ix),y
0046E0  3  38                   sec
0046E1  3  E5 62                sbc z80_c
0046E3  3  A0 08                ldy #8
0046E5  3  91 68                sta (z80_ix),y
0046E7  3  A9 1C        f01731: lda #28
0046E9  3  A0 06                ldy #6
0046EB  3  D1 68                cmp (z80_ix),y
0046ED  3  F0 03                beq *+5
0046EF  3  4C F5 46             jmp f01758
0046F2  3  4C F5 46             jmp f01758
0046F5  3  A9 10        f01758: lda #16
0046F7  3  85 62                sta z80_c
0046F9  3  A0 08                ldy #8
0046FB  3  B1 68                lda (z80_ix),y
0046FD  3  18                   clc
0046FE  3  65 62                adc z80_c
004700  3  A0 08                ldy #8
004702  3  91 68                sta (z80_ix),y
004704  3  A9 10                lda #16
004706  3  85 62                sta z80_c
004708  3  A0 08                ldy #8
00470A  3  B1 68                lda (z80_ix),y
00470C  3  38                   sec
00470D  3  E5 62                sbc z80_c
00470F  3  A0 08                ldy #8
004711  3  91 68                sta (z80_ix),y
004713  3  60           f01828: rts
004714  3               evnt06:
004714  3  A9 2B                lda #43
004716  3  A0 06                ldy #6
004718  3  D1 68                cmp (z80_ix),y
00471A  3  F0 03                beq *+5
00471C  3  4C CB 47             jmp g00414
00471F  3  A9 08                lda #8
004721  3  85 62                sta z80_c
004723  3  A0 08                ldy #8
004725  3  B1 68                lda (z80_ix),y
004727  3  38                   sec
004728  3  E5 62                sbc z80_c
00472A  3  A0 08                ldy #8
00472C  3  91 68                sta (z80_ix),y
00472E  3  A9 08                lda #8
004730  3  85 62                sta z80_c
004732  3  A0 09                ldy #9
004734  3  B1 68                lda (z80_ix),y
004736  3  18                   clc
004737  3  65 62                adc z80_c
004739  3  A0 09                ldy #9
00473B  3  91 68                sta (z80_ix),y
00473D  3  A9 08                lda #8
00473F  3  85 62                sta z80_c
004741  3  A0 09                ldy #9
004743  3  B1 68                lda (z80_ix),y
004745  3  38                   sec
004746  3  E5 62                sbc z80_c
004748  3  A0 09                ldy #9
00474A  3  91 68                sta (z80_ix),y
00474C  3  A9 08                lda #8
00474E  3  85 62                sta z80_c
004750  3  A0 08                ldy #8
004752  3  B1 68                lda (z80_ix),y
004754  3  18                   clc
004755  3  65 62                adc z80_c
004757  3  A0 08                ldy #8
004759  3  91 68                sta (z80_ix),y
00475B  3  A5 rr                lda joyval	; KEY
00475D  3  29 02                and #2
00475F  3  F0 03                beq :+
004761  3  4C 93 47             jmp g00288
004764  3               :
004764  3  A9 0C                lda #12
004766  3  A0 06                ldy #6
004768  3  91 68                sta (z80_ix),y
00476A  3  A9 18                lda #24
00476C  3  85 62                sta z80_c
00476E  3  A0 09                ldy #9
004770  3  B1 68                lda (z80_ix),y
004772  3  38                   sec
004773  3  E5 62                sbc z80_c
004775  3  A0 09                ldy #9
004777  3  91 68                sta (z80_ix),y
004779  3  A9 00                lda #0	; SPAWN
00477B  3  85 62                sta z80_c
00477D  3  A9 02                lda #2
00477F  3  85 63                sta z80_b
004781  3  20 EB 22             jsr spawn
004784  3  A9 18                lda #24
004786  3  85 62                sta z80_c
004788  3  A0 09                ldy #9
00478A  3  B1 68                lda (z80_ix),y
00478C  3  18                   clc
00478D  3  65 62                adc z80_c
00478F  3  A0 09                ldy #9
004791  3  91 68                sta (z80_ix),y
004793  3  A5 rr        g00288: lda joyval	; KEY
004795  3  29 01                and #1
004797  3  F0 03                beq :+
004799  3  4C CB 47             jmp g00414
00479C  3               :
00479C  3  A9 0C                lda #12
00479E  3  A0 06                ldy #6
0047A0  3  91 68                sta (z80_ix),y
0047A2  3  A9 18                lda #24
0047A4  3  85 62                sta z80_c
0047A6  3  A0 09                ldy #9
0047A8  3  B1 68                lda (z80_ix),y
0047AA  3  18                   clc
0047AB  3  65 62                adc z80_c
0047AD  3  A0 09                ldy #9
0047AF  3  91 68                sta (z80_ix),y
0047B1  3  A9 00                lda #0	; SPAWN
0047B3  3  85 62                sta z80_c
0047B5  3  A9 00                lda #0
0047B7  3  85 63                sta z80_b
0047B9  3  20 EB 22             jsr spawn
0047BC  3  A9 18                lda #24
0047BE  3  85 62                sta z80_c
0047C0  3  A0 09                ldy #9
0047C2  3  B1 68                lda (z80_ix),y
0047C4  3  38                   sec
0047C5  3  E5 62                sbc z80_c
0047C7  3  A0 09                ldy #9
0047C9  3  91 68                sta (z80_ix),y
0047CB  3  A9 0B        g00414: lda #11
0047CD  3  A0 06                ldy #6
0047CF  3  D1 68                cmp (z80_ix),y
0047D1  3  90 03                bcc *+5
0047D3  3  4C E1 47             jmp g00458
0047D6  3  A9 22                lda #34
0047D8  3  A0 06                ldy #6
0047DA  3  D1 68                cmp (z80_ix),y
0047DC  3  B0 03                bcs *+5
0047DE  3  4C E1 47             jmp g00458
0047E1  3  A9 2B        g00458: lda #43
0047E3  3  A0 06                ldy #6
0047E5  3  D1 68                cmp (z80_ix),y
0047E7  3  B0 03                bcs *+5
0047E9  3  4C 85 48             jmp g00811
0047EC  3  A9 22                lda #34
0047EE  3  A0 06                ldy #6
0047F0  3  D1 68                cmp (z80_ix),y
0047F2  3  D0 03                bne *+5
0047F4  3  4C 85 48             jmp g00811
0047F7  3  A9 00                lda #0
0047F9  3  A0 0B                ldy #11
0047FB  3  D1 68                cmp (z80_ix),y
0047FD  3  F0 03                beq *+5
0047FF  3  4C 31 48             jmp g00622
004802  3  A9 48                lda #72
004804  3  A0 09                ldy #9
004806  3  D1 68                cmp (z80_ix),y
004808  3  90 03                bcc *+5
00480A  3  4C 28 48             jmp g00604
00480D  3  A9 00                lda #0
00480F  3  C5 rr                cmp varh
004811  3  F0 03                beq *+5
004813  3  4C 25 48             jmp g00599
004816  3  A9 08                lda #8
004818  3  85 62                sta z80_c
00481A  3  A0 09                ldy #9
00481C  3  B1 68                lda (z80_ix),y
00481E  3  38                   sec
00481F  3  E5 62                sbc z80_c
004821  3  A0 09                ldy #9
004823  3  91 68                sta (z80_ix),y
004825  3  4C 2E 48     g00599: jmp g00617
004828  3  A9 01        g00604: lda #1
00482A  3  A0 0B                ldy #11
00482C  3  91 68                sta (z80_ix),y
00482E  3  4C 5D 48     g00617: jmp g00714
004831  3  A9 78        g00622: lda #120
004833  3  A0 09                ldy #9
004835  3  D1 68                cmp (z80_ix),y
004837  3  B0 03                bcs *+5
004839  3  4C 57 48             jmp g00701
00483C  3  A9 00                lda #0
00483E  3  C5 rr                cmp varh
004840  3  F0 03                beq *+5
004842  3  4C 54 48             jmp g00696
004845  3  A9 08                lda #8
004847  3  85 62                sta z80_c
004849  3  A0 09                ldy #9
00484B  3  B1 68                lda (z80_ix),y
00484D  3  18                   clc
00484E  3  65 62                adc z80_c
004850  3  A0 09                ldy #9
004852  3  91 68                sta (z80_ix),y
004854  3  4C 5D 48     g00696: jmp g00714
004857  3  A9 00        g00701: lda #0
004859  3  A0 0B                ldy #11
00485B  3  91 68                sta (z80_ix),y
00485D  3  A9 00        g00714: lda #0 	; COLLISION
00485F  3  85 63                sta z80_b
004861  3  20 10 2F             jsr sktyp
004864  3  B0 03                bcs :+
004866  3  4C 85 48             jmp g00811
004869  3               :
004869  3  A9 2B                lda #43
00486B  3  A0 06                ldy #6
00486D  3  91 68                sta (z80_ix),y
00486F  3  A5 rr                lda skptr	; OTHER
004871  3  85 68                sta z80_x
004873  3  A5 rr                lda skptr+1
004875  3  85 69                sta z80_i
004877  3  A9 FF                lda #255	; REMOVE
004879  3  A0 05                ldy #5
00487B  3  91 68                sta (z80_ix),y
00487D  3  A5 rr                lda ogptr	; ENDSPRITE
00487F  3  85 68                sta z80_x
004881  3  A5 rr                lda ogptr+1
004883  3  85 69                sta z80_i
004885  3  A9 22        g00811: lda #34
004887  3  A0 06                ldy #6
004889  3  D1 68                cmp (z80_ix),y
00488B  3  F0 03                beq *+5
00488D  3  4C 7D 49             jmp g01340
004890  3  A0 09                ldy #9
004892  3  B1 68                lda (z80_ix),y
004894  3  85 rr                sta varo
004896  3  A9 00                lda #0
004898  3  A0 0B                ldy #11
00489A  3  D1 68                cmp (z80_ix),y
00489C  3  F0 03                beq *+5
00489E  3  4C DD 48             jmp g00992
0048A1  3  20 1A 27             jsr cangl	; CANGOLEFT
0048A4  3  F0 03                beq :+
0048A6  3  4C DA 48             jmp g00987
0048A9  3               :
0048A9  3  A9 08                lda #8
0048AB  3  C5 rr                cmp vark
0048AD  3  B0 03                bcs *+5
0048AF  3  4C D4 48             jmp g00974
0048B2  3  A9 00                lda #0
0048B4  3  C5 rr                cmp varh
0048B6  3  F0 03                beq *+5
0048B8  3  4C D1 48             jmp g00969
0048BB  3  A5 rr                lda vark
0048BD  3  18                   clc
0048BE  3  69 01                adc #1
0048C0  3  85 rr                sta vark
0048C2  3  A9 08                lda #8
0048C4  3  85 62                sta z80_c
0048C6  3  A0 09                ldy #9
0048C8  3  B1 68                lda (z80_ix),y
0048CA  3  38                   sec
0048CB  3  E5 62                sbc z80_c
0048CD  3  A0 09                ldy #9
0048CF  3  91 68                sta (z80_ix),y
0048D1  3  4C DA 48     g00969: jmp g00987
0048D4  3  A9 01        g00974: lda #1
0048D6  3  A0 0B                ldy #11
0048D8  3  91 68                sta (z80_ix),y
0048DA  3  4C 16 49     g00987: jmp g01110
0048DD  3  A9 00        g00992: lda #0
0048DF  3  C5 rr                cmp vark
0048E1  3  90 03                bcc *+5
0048E3  3  4C 10 49             jmp g01097
0048E6  3  20 3C 28             jsr cangr	; CANGORIGHT
0048E9  3  F0 03                beq :+
0048EB  3  4C 0D 49             jmp g01092
0048EE  3               :
0048EE  3  A9 00                lda #0
0048F0  3  C5 rr                cmp varh
0048F2  3  F0 03                beq *+5
0048F4  3  4C 0D 49             jmp g01092
0048F7  3  A5 rr                lda vark
0048F9  3  38                   sec
0048FA  3  E9 01                sbc #1
0048FC  3  85 rr                sta vark
0048FE  3  A9 08                lda #8
004900  3  85 62                sta z80_c
004902  3  A0 09                ldy #9
004904  3  B1 68                lda (z80_ix),y
004906  3  18                   clc
004907  3  65 62                adc z80_c
004909  3  A0 09                ldy #9
00490B  3  91 68                sta (z80_ix),y
00490D  3  4C 16 49     g01092: jmp g01110
004910  3  A9 00        g01097: lda #0
004912  3  A0 0B                ldy #11
004914  3  91 68                sta (z80_ix),y
004916  3  A9 00        g01110: lda #0 	; COLLISION
004918  3  85 63                sta z80_b
00491A  3  20 10 2F             jsr sktyp
00491D  3  B0 03                bcs :+
00491F  3  4C 7D 49             jmp g01340
004922  3               :
004922  3  A5 rr                lda skptr	; OTHER
004924  3  85 68                sta z80_x
004926  3  A5 rr                lda skptr+1
004928  3  85 69                sta z80_i
00492A  3  A9 08                lda #8
00492C  3  85 62                sta z80_c
00492E  3  A0 08                ldy #8
004930  3  B1 68                lda (z80_ix),y
004932  3  38                   sec
004933  3  E5 62                sbc z80_c
004935  3  A0 08                ldy #8
004937  3  91 68                sta (z80_ix),y
004939  3  A5 rr                lda varo
00493B  3  A0 09                ldy #9
00493D  3  91 68                sta (z80_ix),y
00493F  3  A9 00                lda #0
004941  3  C5 rr                cmp vara
004943  3  F0 03                beq *+5
004945  3  4C 4D 49             jmp g01232
004948  3  A9 00                lda #0		; ANIMATE
00494A  3  20 C5 2E             jsr animsp
00494D  3  A5 rr        g01232: lda joyval	; KEY
00494F  3  29 01                and #1
004951  3  F0 03                beq :+
004953  3  4C 65 49             jmp g01286
004956  3               :
004956  3  A9 10                lda #16
004958  3  85 62                sta z80_c
00495A  3  A0 09                ldy #9
00495C  3  B1 68                lda (z80_ix),y
00495E  3  18                   clc
00495F  3  65 62                adc z80_c
004961  3  A0 09                ldy #9
004963  3  91 68                sta (z80_ix),y
004965  3  A5 rr        g01286: lda joyval	; KEY
004967  3  29 02                and #2
004969  3  F0 03                beq :+
00496B  3  4C 7D 49             jmp g01340
00496E  3               :
00496E  3  A9 10                lda #16
004970  3  85 62                sta z80_c
004972  3  A0 09                ldy #9
004974  3  B1 68                lda (z80_ix),y
004976  3  38                   sec
004977  3  E5 62                sbc z80_c
004979  3  A0 09                ldy #9
00497B  3  91 68                sta (z80_ix),y
00497D  3  A9 00        g01340: lda #0
00497F  3  C5 rr                cmp varm
004981  3  F0 03                beq *+5
004983  3  4C 8B 49             jmp g01368
004986  3  A9 00                lda #0		; ANIMATE
004988  3  20 C5 2E             jsr animsp
00498B  3  60           g01368: rts
00498C  3               evnt07:
00498C  3  A9 09                lda #9
00498E  3  C5 rr                cmp scno
004990  3  F0 03                beq *+5
004992  3  4C A7 49             jmp h00059
004995  3  A9 1F                lda #31
004997  3  A0 06                ldy #6
004999  3  D1 68                cmp (z80_ix),y
00499B  3  F0 03                beq *+5
00499D  3  4C A7 49             jmp h00059
0049A0  3  20 C4 97             jsr prskey	; WAITKEY
0049A3  3  A9 01                lda #1		; ENDGAME
0049A5  3  85 rr                sta gamwon
0049A7  3  A9 00        h00059: lda #0 	; COLLISION
0049A9  3  85 63                sta z80_b
0049AB  3  20 10 2F             jsr sktyp
0049AE  3  B0 03                bcs :+
0049B0  3  4C D0 49             jmp h00152
0049B3  3               :
0049B3  3  A5 rr                lda skptr	; OTHER
0049B5  3  85 68                sta z80_x
0049B7  3  A5 rr                lda skptr+1
0049B9  3  85 69                sta z80_i
0049BB  3  A9 FF                lda #255	; REMOVE
0049BD  3  A0 05                ldy #5
0049BF  3  91 68                sta (z80_ix),y
0049C1  3  A9 01                lda #1
0049C3  3  85 rr                sta vard
0049C5  3  A9 08                lda #8	; SPAWN
0049C7  3  85 62                sta z80_c
0049C9  3  A9 06                lda #6
0049CB  3  85 63                sta z80_b
0049CD  3  20 EB 22             jsr spawn
0049D0  3  A5 rr        h00152: lda varj
0049D2  3  A0 09                ldy #9
0049D4  3  D1 68                cmp (z80_ix),y
0049D6  3  F0 03                beq *+5
0049D8  3  4C 0C 4A             jmp h00274
0049DB  3  A9 00                lda #0
0049DD  3  C5 rr                cmp varn
0049DF  3  F0 03                beq *+5
0049E1  3  4C 0C 4A             jmp h00274
0049E4  3  A9 0A                lda #10
0049E6  3  85 65                sta z80_d	; GETRANDOM
0049E8  3  20 BE 29             jsr random
0049EB  3  85 67                sta z80_h
0049ED  3  20 A6 22             jsr imul
0049F0  3  A5 67                lda z80_h
0049F2  3  85 rr                sta varrnd
0049F4  3  A9 01                lda #1
0049F6  3  C5 rr                cmp varrnd
0049F8  3  F0 03                beq *+5
0049FA  3  4C 0C 4A             jmp h00274
0049FD  3  A9 08                lda #8	; SPAWN
0049FF  3  85 62                sta z80_c
004A01  3  A9 26                lda #38
004A03  3  85 63                sta z80_b
004A05  3  20 EB 22             jsr spawn
004A08  3  A9 01                lda #1
004A0A  3  85 rr                sta varn
004A0C  3  A9 0A        h00274: lda #10
004A0E  3  A0 06                ldy #6
004A10  3  D1 68                cmp (z80_ix),y
004A12  3  F0 03                beq *+5
004A14  3  4C 49 4A             jmp h00402
004A17  3  A5 rr                lda varp
004A19  3  A0 09                ldy #9
004A1B  3  D1 68                cmp (z80_ix),y
004A1D  3  B0 03                bcs *+5
004A1F  3  4C 43 4A             jmp h00388
004A22  3  A9 00                lda #0
004A24  3  C5 rr                cmp varm
004A26  3  F0 03                beq *+5
004A28  3  4C 3A 4A             jmp h00370
004A2B  3  A9 08                lda #8
004A2D  3  85 62                sta z80_c
004A2F  3  A0 09                ldy #9
004A31  3  B1 68                lda (z80_ix),y
004A33  3  18                   clc
004A34  3  65 62                adc z80_c
004A36  3  A0 09                ldy #9
004A38  3  91 68                sta (z80_ix),y
004A3A  3  A9 0A        h00370: lda #10
004A3C  3  A0 06                ldy #6
004A3E  3  91 68                sta (z80_ix),y
004A40  3  4C 49 4A             jmp h00402
004A43  3  A9 24        h00388: lda #36
004A45  3  A0 06                ldy #6
004A47  3  91 68                sta (z80_ix),y
004A49  3  A9 24        h00402: lda #36
004A4B  3  A0 06                ldy #6
004A4D  3  D1 68                cmp (z80_ix),y
004A4F  3  F0 03                beq *+5
004A51  3  4C BC 4A             jmp h00655
004A54  3  A9 08                lda #8
004A56  3  85 62                sta z80_c
004A58  3  A0 08                ldy #8
004A5A  3  B1 68                lda (z80_ix),y
004A5C  3  18                   clc
004A5D  3  65 62                adc z80_c
004A5F  3  A0 08                ldy #8
004A61  3  91 68                sta (z80_ix),y
004A63  3  A9 08                lda #8
004A65  3  85 62                sta z80_c
004A67  3  A0 09                ldy #9
004A69  3  B1 68                lda (z80_ix),y
004A6B  3  38                   sec
004A6C  3  E5 62                sbc z80_c
004A6E  3  A0 09                ldy #9
004A70  3  91 68                sta (z80_ix),y
004A72  3  A9 08                lda #8
004A74  3  85 62                sta z80_c
004A76  3  A0 08                ldy #8
004A78  3  B1 68                lda (z80_ix),y
004A7A  3  38                   sec
004A7B  3  E5 62                sbc z80_c
004A7D  3  A0 08                ldy #8
004A7F  3  91 68                sta (z80_ix),y
004A81  3  A9 08                lda #8
004A83  3  85 62                sta z80_c
004A85  3  A0 09                ldy #9
004A87  3  B1 68                lda (z80_ix),y
004A89  3  18                   clc
004A8A  3  65 62                adc z80_c
004A8C  3  A0 09                ldy #9
004A8E  3  91 68                sta (z80_ix),y
004A90  3  A9 58                lda #88
004A92  3  A0 08                ldy #8
004A94  3  D1 68                cmp (z80_ix),y
004A96  3  B0 03                bcs *+5
004A98  3  4C B6 4A             jmp h00641
004A9B  3  A9 00                lda #0
004A9D  3  C5 rr                cmp varm
004A9F  3  F0 03                beq *+5
004AA1  3  4C B3 4A             jmp h00637
004AA4  3  A9 08                lda #8
004AA6  3  85 62                sta z80_c
004AA8  3  A0 08                ldy #8
004AAA  3  B1 68                lda (z80_ix),y
004AAC  3  18                   clc
004AAD  3  65 62                adc z80_c
004AAF  3  A0 08                ldy #8
004AB1  3  91 68                sta (z80_ix),y
004AB3  3  4C BC 4A     h00637: jmp h00655
004AB6  3  A9 21        h00641: lda #33
004AB8  3  A0 06                ldy #6
004ABA  3  91 68                sta (z80_ix),y
004ABC  3  A9 0A        h00655: lda #10
004ABE  3  A0 06                ldy #6
004AC0  3  D1 68                cmp (z80_ix),y
004AC2  3  F0 03                beq *+5
004AC4  3  4C 03 4B             jmp h00816
004AC7  3  A9 08                lda #8
004AC9  3  85 62                sta z80_c
004ACB  3  A0 09                ldy #9
004ACD  3  B1 68                lda (z80_ix),y
004ACF  3  18                   clc
004AD0  3  65 62                adc z80_c
004AD2  3  A0 09                ldy #9
004AD4  3  91 68                sta (z80_ix),y
004AD6  3  A9 08                lda #8
004AD8  3  85 62                sta z80_c
004ADA  3  A0 08                ldy #8
004ADC  3  B1 68                lda (z80_ix),y
004ADE  3  18                   clc
004ADF  3  65 62                adc z80_c
004AE1  3  A0 08                ldy #8
004AE3  3  91 68                sta (z80_ix),y
004AE5  3  A9 08                lda #8
004AE7  3  85 62                sta z80_c
004AE9  3  A0 09                ldy #9
004AEB  3  B1 68                lda (z80_ix),y
004AED  3  38                   sec
004AEE  3  E5 62                sbc z80_c
004AF0  3  A0 09                ldy #9
004AF2  3  91 68                sta (z80_ix),y
004AF4  3  A9 08                lda #8
004AF6  3  85 62                sta z80_c
004AF8  3  A0 08                ldy #8
004AFA  3  B1 68                lda (z80_ix),y
004AFC  3  38                   sec
004AFD  3  E5 62                sbc z80_c
004AFF  3  A0 08                ldy #8
004B01  3  91 68                sta (z80_ix),y
004B03  3  A9 21        h00816: lda #33
004B05  3  A0 06                ldy #6
004B07  3  D1 68                cmp (z80_ix),y
004B09  3  F0 03                beq *+5
004B0B  3  4C 76 4B             jmp h01070
004B0E  3  A9 08                lda #8
004B10  3  85 62                sta z80_c
004B12  3  A0 09                ldy #9
004B14  3  B1 68                lda (z80_ix),y
004B16  3  38                   sec
004B17  3  E5 62                sbc z80_c
004B19  3  A0 09                ldy #9
004B1B  3  91 68                sta (z80_ix),y
004B1D  3  A9 08                lda #8
004B1F  3  85 62                sta z80_c
004B21  3  A0 08                ldy #8
004B23  3  B1 68                lda (z80_ix),y
004B25  3  18                   clc
004B26  3  65 62                adc z80_c
004B28  3  A0 08                ldy #8
004B2A  3  91 68                sta (z80_ix),y
004B2C  3  A9 08                lda #8
004B2E  3  85 62                sta z80_c
004B30  3  A0 08                ldy #8
004B32  3  B1 68                lda (z80_ix),y
004B34  3  38                   sec
004B35  3  E5 62                sbc z80_c
004B37  3  A0 08                ldy #8
004B39  3  91 68                sta (z80_ix),y
004B3B  3  A9 08                lda #8
004B3D  3  85 62                sta z80_c
004B3F  3  A0 09                ldy #9
004B41  3  B1 68                lda (z80_ix),y
004B43  3  18                   clc
004B44  3  65 62                adc z80_c
004B46  3  A0 09                ldy #9
004B48  3  91 68                sta (z80_ix),y
004B4A  3  A5 rr                lda varq
004B4C  3  A0 09                ldy #9
004B4E  3  D1 68                cmp (z80_ix),y
004B50  3  90 03                bcc *+5
004B52  3  4C 70 4B             jmp h01056
004B55  3  A9 00                lda #0
004B57  3  C5 rr                cmp varm
004B59  3  F0 03                beq *+5
004B5B  3  4C 6D 4B             jmp h01051
004B5E  3  A9 08                lda #8
004B60  3  85 62                sta z80_c
004B62  3  A0 09                ldy #9
004B64  3  B1 68                lda (z80_ix),y
004B66  3  38                   sec
004B67  3  E5 62                sbc z80_c
004B69  3  A0 09                ldy #9
004B6B  3  91 68                sta (z80_ix),y
004B6D  3  4C 76 4B     h01051: jmp h01070
004B70  3  A9 25        h01056: lda #37
004B72  3  A0 06                ldy #6
004B74  3  91 68                sta (z80_ix),y
004B76  3  A9 25        h01070: lda #37
004B78  3  A0 06                ldy #6
004B7A  3  D1 68                cmp (z80_ix),y
004B7C  3  F0 03                beq *+5
004B7E  3  4C 03 4C             jmp h01378
004B81  3  A9 04                lda #4
004B83  3  C5 rr                cmp scno
004B85  3  F0 03                beq *+5
004B87  3  4C 93 4B             jmp h01127
004B8A  3  A9 20                lda #32
004B8C  3  A0 0B                ldy #11
004B8E  3  91 68                sta (z80_ix),y
004B90  3  4C 99 4B             jmp h01141
004B93  3  A9 44        h01127: lda #68
004B95  3  A0 0B                ldy #11
004B97  3  91 68                sta (z80_ix),y
004B99  3  A9 08        h01141: lda #8
004B9B  3  85 62                sta z80_c
004B9D  3  A0 08                ldy #8
004B9F  3  B1 68                lda (z80_ix),y
004BA1  3  38                   sec
004BA2  3  E5 62                sbc z80_c
004BA4  3  A0 08                ldy #8
004BA6  3  91 68                sta (z80_ix),y
004BA8  3  A9 08                lda #8
004BAA  3  85 62                sta z80_c
004BAC  3  A0 09                ldy #9
004BAE  3  B1 68                lda (z80_ix),y
004BB0  3  18                   clc
004BB1  3  65 62                adc z80_c
004BB3  3  A0 09                ldy #9
004BB5  3  91 68                sta (z80_ix),y
004BB7  3  A9 08                lda #8
004BB9  3  85 62                sta z80_c
004BBB  3  A0 09                ldy #9
004BBD  3  B1 68                lda (z80_ix),y
004BBF  3  38                   sec
004BC0  3  E5 62                sbc z80_c
004BC2  3  A0 09                ldy #9
004BC4  3  91 68                sta (z80_ix),y
004BC6  3  A9 08                lda #8
004BC8  3  85 62                sta z80_c
004BCA  3  A0 08                ldy #8
004BCC  3  B1 68                lda (z80_ix),y
004BCE  3  18                   clc
004BCF  3  65 62                adc z80_c
004BD1  3  A0 08                ldy #8
004BD3  3  91 68                sta (z80_ix),y
004BD5  3  A0 0B                ldy #11
004BD7  3  B1 68                lda (z80_ix),y
004BD9  3  A0 08                ldy #8
004BDB  3  D1 68                cmp (z80_ix),y
004BDD  3  90 03                bcc *+5
004BDF  3  4C FD 4B             jmp h01364
004BE2  3  A9 00                lda #0
004BE4  3  C5 rr                cmp varm
004BE6  3  F0 03                beq *+5
004BE8  3  4C FA 4B             jmp h01359
004BEB  3  A9 08                lda #8
004BED  3  85 62                sta z80_c
004BEF  3  A0 08                ldy #8
004BF1  3  B1 68                lda (z80_ix),y
004BF3  3  38                   sec
004BF4  3  E5 62                sbc z80_c
004BF6  3  A0 08                ldy #8
004BF8  3  91 68                sta (z80_ix),y
004BFA  3  4C 03 4C     h01359: jmp h01378
004BFD  3  A9 0A        h01364: lda #10
004BFF  3  A0 06                ldy #6
004C01  3  91 68                sta (z80_ix),y
004C03  3  A9 00        h01378: lda #0
004C05  3  C5 rr                cmp vara
004C07  3  F0 03                beq *+5
004C09  3  4C 11 4C             jmp h01406
004C0C  3  A9 00                lda #0		; ANIMATE
004C0E  3  20 C5 2E             jsr animsp
004C11  3  60           h01406: rts
004C12  3               evnt08:
004C12  3  A9 26                lda #38
004C14  3  A0 06                ldy #6
004C16  3  D1 68                cmp (z80_ix),y
004C18  3  F0 03                beq *+5
004C1A  3  4C BF 4C             jmp i00401
004C1D  3  A9 08                lda #8
004C1F  3  85 62                sta z80_c
004C21  3  A0 08                ldy #8
004C23  3  B1 68                lda (z80_ix),y
004C25  3  38                   sec
004C26  3  E5 62                sbc z80_c
004C28  3  A0 08                ldy #8
004C2A  3  91 68                sta (z80_ix),y
004C2C  3  A9 08                lda #8
004C2E  3  85 62                sta z80_c
004C30  3  A0 08                ldy #8
004C32  3  B1 68                lda (z80_ix),y
004C34  3  18                   clc
004C35  3  65 62                adc z80_c
004C37  3  A0 08                ldy #8
004C39  3  91 68                sta (z80_ix),y
004C3B  3  A9 9C                lda #156
004C3D  3  A0 08                ldy #8
004C3F  3  D1 68                cmp (z80_ix),y
004C41  3  B0 03                bcs *+5
004C43  3  4C 58 4C             jmp i00155
004C46  3  A9 08                lda #8
004C48  3  85 62                sta z80_c
004C4A  3  A0 08                ldy #8
004C4C  3  B1 68                lda (z80_ix),y
004C4E  3  18                   clc
004C4F  3  65 62                adc z80_c
004C51  3  A0 08                ldy #8
004C53  3  91 68                sta (z80_ix),y
004C55  3  4C 68 4C             jmp i00194
004C58  3  A9 FF        i00155: lda #255	; REMOVE
004C5A  3  A0 05                ldy #5
004C5C  3  91 68                sta (z80_ix),y
004C5E  3  A9 00                lda #0
004C60  3  85 rr                sta varn
004C62  3  A9 14                lda #20		; BEEP
004C64  3  0A                   asl a
004C65  3  8D 95 20             sta sndtyp
004C68  3  A9 00        i00194: lda #0 	; COLLISION
004C6A  3  85 63                sta z80_b
004C6C  3  20 10 2F             jsr sktyp
004C6F  3  B0 03                bcs :+
004C71  3  4C BF 4C             jmp i00401
004C74  3               :
004C74  3  A9 01                lda #1
004C76  3  85 rr                sta vard
004C78  3  A5 rr                lda skptr	; OTHER
004C7A  3  85 68                sta z80_x
004C7C  3  A5 rr                lda skptr+1
004C7E  3  85 69                sta z80_i
004C80  3  A0 08                ldy #8
004C82  3  B1 68                lda (z80_ix),y
004C84  3  4A                   lsr a
004C85  3  4A                   lsr a
004C86  3  4A                   lsr a
004C87  3  A0 08                ldy #8
004C89  3  91 68                sta (z80_ix),y
004C8B  3  A0 09                ldy #9
004C8D  3  B1 68                lda (z80_ix),y
004C8F  3  4A                   lsr a
004C90  3  4A                   lsr a
004C91  3  4A                   lsr a
004C92  3  A0 09                ldy #9
004C94  3  91 68                sta (z80_ix),y
004C96  3  A9 02                lda #2
004C98  3  85 62                sta z80_c
004C9A  3  A0 09                ldy #9
004C9C  3  B1 68                lda (z80_ix),y
004C9E  3  18                   clc
004C9F  3  65 62                adc z80_c
004CA1  3  A0 09                ldy #9
004CA3  3  91 68                sta (z80_ix),y
004CA5  3  A0 08                ldy #8
004CA7  3  B1 68                lda (z80_ix),y
004CA9  3  85 rr                sta chary
004CAB  3  A0 09                ldy #9
004CAD  3  B1 68                lda (z80_ix),y
004CAF  3  85 rr                sta charx
004CB1  3  A9 1D                lda #29  	; MESSAGE
004CB3  3  20 6A 2A             jsr dmsg
004CB6  3  A9 28                lda #40 	; DELAY
004CB8  3  20 2F 20             jsr delay
004CBB  3  A9 01                lda #1 		; KILL
004CBD  3  85 rr                sta deadf
004CBF  3  A9 23        i00401: lda #35
004CC1  3  A0 06                ldy #6
004CC3  3  D1 68                cmp (z80_ix),y
004CC5  3  F0 03                beq *+5
004CC7  3  4C 1E 4D             jmp i00615
004CCA  3  A9 05                lda #5		; BEEP
004CCC  3  0A                   asl a
004CCD  3  8D 95 20             sta sndtyp
004CD0  3  A9 08                lda #8
004CD2  3  85 62                sta z80_c
004CD4  3  A0 09                ldy #9
004CD6  3  B1 68                lda (z80_ix),y
004CD8  3  38                   sec
004CD9  3  E5 62                sbc z80_c
004CDB  3  A0 09                ldy #9
004CDD  3  91 68                sta (z80_ix),y
004CDF  3  A9 08                lda #8
004CE1  3  85 62                sta z80_c
004CE3  3  A0 08                ldy #8
004CE5  3  B1 68                lda (z80_ix),y
004CE7  3  38                   sec
004CE8  3  E5 62                sbc z80_c
004CEA  3  A0 08                ldy #8
004CEC  3  91 68                sta (z80_ix),y
004CEE  3  A9 08                lda #8
004CF0  3  85 62                sta z80_c
004CF2  3  A0 09                ldy #9
004CF4  3  B1 68                lda (z80_ix),y
004CF6  3  18                   clc
004CF7  3  65 62                adc z80_c
004CF9  3  A0 09                ldy #9
004CFB  3  91 68                sta (z80_ix),y
004CFD  3  A9 08                lda #8
004CFF  3  85 62                sta z80_c
004D01  3  A0 08                ldy #8
004D03  3  B1 68                lda (z80_ix),y
004D05  3  18                   clc
004D06  3  65 62                adc z80_c
004D08  3  A0 08                ldy #8
004D0A  3  91 68                sta (z80_ix),y
004D0C  3  A9 00                lda #0		; ANIMATE
004D0E  3  20 C5 2E             jsr animsp
004D11  3  A9 00                lda #0
004D13  3  C5 rr                cmp varh
004D15  3  F0 03                beq *+5
004D17  3  4C 1E 4D             jmp i00615
004D1A  3  A9 01                lda #1 		; KILL
004D1C  3  85 rr                sta deadf
004D1E  3  A9 0B        i00615: lda #11
004D20  3  A0 06                ldy #6
004D22  3  D1 68                cmp (z80_ix),y
004D24  3  F0 03                beq *+5
004D26  3  4C 49 4D             jmp i00709
004D29  3  20 B0 26             jsr cangu	; CANGOUP
004D2C  3  F0 03                beq :+
004D2E  3  4C 43 4D             jmp i00693
004D31  3               :
004D31  3  A9 04                lda #4
004D33  3  85 62                sta z80_c
004D35  3  A0 08                ldy #8
004D37  3  B1 68                lda (z80_ix),y
004D39  3  38                   sec
004D3A  3  E5 62                sbc z80_c
004D3C  3  A0 08                ldy #8
004D3E  3  91 68                sta (z80_ix),y
004D40  3  4C 49 4D             jmp i00709
004D43  3  A9 FF        i00693: lda #255	; REMOVE
004D45  3  A0 05                ldy #5
004D47  3  91 68                sta (z80_ix),y
004D49  3  A9 20        i00709: lda #32
004D4B  3  A0 06                ldy #6
004D4D  3  D1 68                cmp (z80_ix),y
004D4F  3  F0 03                beq *+5
004D51  3  4C 74 4D             jmp i00803
004D54  3  20 B0 26             jsr cangu	; CANGOUP
004D57  3  F0 03                beq :+
004D59  3  4C 6E 4D             jmp i00787
004D5C  3               :
004D5C  3  A9 04                lda #4
004D5E  3  85 62                sta z80_c
004D60  3  A0 08                ldy #8
004D62  3  B1 68                lda (z80_ix),y
004D64  3  38                   sec
004D65  3  E5 62                sbc z80_c
004D67  3  A0 08                ldy #8
004D69  3  91 68                sta (z80_ix),y
004D6B  3  4C 74 4D             jmp i00803
004D6E  3  A9 FF        i00787: lda #255	; REMOVE
004D70  3  A0 05                ldy #5
004D72  3  91 68                sta (z80_ix),y
004D74  3  A9 17        i00803: lda #23
004D76  3  A0 06                ldy #6
004D78  3  D1 68                cmp (z80_ix),y
004D7A  3  F0 03                beq *+5
004D7C  3  4C 9E 4D             jmp i00891
004D7F  3  A9 00                lda #0
004D81  3  C5 rr                cmp vara
004D83  3  F0 03                beq *+5
004D85  3  4C 8D 4D             jmp i00853
004D88  3  A9 00                lda #0		; ANIMATE
004D8A  3  20 C5 2E             jsr animsp
004D8D  3  A9 02        i00853: lda #2
004D8F  3  A0 07                ldy #7
004D91  3  D1 68                cmp (z80_ix),y
004D93  3  F0 03                beq *+5
004D95  3  4C 9E 4D             jmp i00891
004D98  3  A9 FF                lda #255	; REMOVE
004D9A  3  A0 05                ldy #5
004D9C  3  91 68                sta (z80_ix),y
004D9E  3  A9 16        i00891: lda #22
004DA0  3  A0 06                ldy #6
004DA2  3  D1 68                cmp (z80_ix),y
004DA4  3  F0 03                beq *+5
004DA6  3  4C B0 4E             jmp i01502
004DA9  3  A9 08                lda #8
004DAB  3  85 62                sta z80_c
004DAD  3  A0 08                ldy #8
004DAF  3  B1 68                lda (z80_ix),y
004DB1  3  18                   clc
004DB2  3  65 62                adc z80_c
004DB4  3  A0 08                ldy #8
004DB6  3  91 68                sta (z80_ix),y
004DB8  3  A9 01                lda #1 	; COLLISION
004DBA  3  85 63                sta z80_b
004DBC  3  20 10 2F             jsr sktyp
004DBF  3  B0 03                bcs :+
004DC1  3  4C 08 4E             jmp i01124
004DC4  3               :
004DC4  3  A5 rr                lda skptr	; OTHER
004DC6  3  85 68                sta z80_x
004DC8  3  A5 rr                lda skptr+1
004DCA  3  85 69                sta z80_i
004DCC  3  A9 FF                lda #255	; REMOVE
004DCE  3  A0 05                ldy #5
004DD0  3  91 68                sta (z80_ix),y
004DD2  3  A9 08                lda #8	; SPAWN
004DD4  3  85 62                sta z80_c
004DD6  3  A9 0B                lda #11
004DD8  3  85 63                sta z80_b
004DDA  3  20 EB 22             jsr spawn
004DDD  3  A9 C8                lda #<200		; SCORE
004DDF  3  85 66                sta z80_l
004DE1  3  A9 00                lda #>200
004DE3  3  85 67                sta z80_h
004DE5  3  20 09 24             jsr addsc
004DE8  3  A9 01                lda #1
004DEA  3  C5 rr                cmp scno
004DEC  3  90 03                bcc *+5
004DEE  3  4C 08 4E             jmp i01124
004DF1  3  A9 18                lda #24
004DF3  3  A0 08                ldy #8
004DF5  3  91 68                sta (z80_ix),y
004DF7  3  A9 58                lda #88
004DF9  3  A0 09                ldy #9
004DFB  3  91 68                sta (z80_ix),y
004DFD  3  A9 01                lda #1	; SPAWN
004DFF  3  85 62                sta z80_c
004E01  3  A9 08                lda #8
004E03  3  85 63                sta z80_b
004E05  3  20 EB 22             jsr spawn
004E08  3  A9 02        i01124: lda #2 	; COLLISION
004E0A  3  85 63                sta z80_b
004E0C  3  20 10 2F             jsr sktyp
004E0F  3  B0 03                bcs :+
004E11  3  4C 58 4E             jmp i01300
004E14  3               :
004E14  3  A5 rr                lda skptr	; OTHER
004E16  3  85 68                sta z80_x
004E18  3  A5 rr                lda skptr+1
004E1A  3  85 69                sta z80_i
004E1C  3  A9 FF                lda #255	; REMOVE
004E1E  3  A0 05                ldy #5
004E20  3  91 68                sta (z80_ix),y
004E22  3  A9 08                lda #8	; SPAWN
004E24  3  85 62                sta z80_c
004E26  3  A9 0B                lda #11
004E28  3  85 63                sta z80_b
004E2A  3  20 EB 22             jsr spawn
004E2D  3  A9 C8                lda #<200		; SCORE
004E2F  3  85 66                sta z80_l
004E31  3  A9 00                lda #>200
004E33  3  85 67                sta z80_h
004E35  3  20 09 24             jsr addsc
004E38  3  A9 01                lda #1
004E3A  3  C5 rr                cmp scno
004E3C  3  90 03                bcc *+5
004E3E  3  4C 58 4E             jmp i01300
004E41  3  A9 18                lda #24
004E43  3  A0 08                ldy #8
004E45  3  91 68                sta (z80_ix),y
004E47  3  A9 58                lda #88
004E49  3  A0 09                ldy #9
004E4B  3  91 68                sta (z80_ix),y
004E4D  3  A9 01                lda #1	; SPAWN
004E4F  3  85 62                sta z80_c
004E51  3  A9 08                lda #8
004E53  3  85 63                sta z80_b
004E55  3  20 EB 22             jsr spawn
004E58  3  A9 07        i01300: lda #7 	; COLLISION
004E5A  3  85 63                sta z80_b
004E5C  3  20 10 2F             jsr sktyp
004E5F  3  B0 03                bcs :+
004E61  3  4C 8E 4E             jmp i01426
004E64  3               :
004E64  3  A9 FF                lda #255	; REMOVE
004E66  3  A0 05                ldy #5
004E68  3  91 68                sta (z80_ix),y
004E6A  3  A9 08                lda #8	; SPAWN
004E6C  3  85 62                sta z80_c
004E6E  3  A9 0B                lda #11
004E70  3  85 63                sta z80_b
004E72  3  20 EB 22             jsr spawn
004E75  3  A5 rr                lda skptr	; OTHER
004E77  3  85 68                sta z80_x
004E79  3  A5 rr                lda skptr+1
004E7B  3  85 69                sta z80_i
004E7D  3  A9 FF                lda #255	; REMOVE
004E7F  3  A0 05                ldy #5
004E81  3  91 68                sta (z80_ix),y
004E83  3  A9 C8                lda #<200		; SCORE
004E85  3  85 66                sta z80_l
004E87  3  A9 00                lda #>200
004E89  3  85 67                sta z80_h
004E8B  3  20 09 24             jsr addsc
004E8E  3  A9 8C        i01426: lda #140
004E90  3  A0 08                ldy #8
004E92  3  D1 68                cmp (z80_ix),y
004E94  3  90 03                bcc *+5
004E96  3  4C B0 4E             jmp i01502
004E99  3  A9 FF                lda #255	; REMOVE
004E9B  3  A0 05                ldy #5
004E9D  3  91 68                sta (z80_ix),y
004E9F  3  A9 08                lda #8	; SPAWN
004EA1  3  85 62                sta z80_c
004EA3  3  A9 17                lda #23
004EA5  3  85 63                sta z80_b
004EA7  3  20 EB 22             jsr spawn
004EAA  3  A9 14                lda #20		; BEEP
004EAC  3  0A                   asl a
004EAD  3  8D 95 20             sta sndtyp
004EB0  3  A9 12        i01502: lda #18
004EB2  3  A0 06                ldy #6
004EB4  3  D1 68                cmp (z80_ix),y
004EB6  3  90 03                bcc *+5
004EB8  3  4C FB 4E             jmp i01658
004EBB  3  A9 15                lda #21
004EBD  3  A0 06                ldy #6
004EBF  3  D1 68                cmp (z80_ix),y
004EC1  3  B0 03                bcs *+5
004EC3  3  4C FB 4E             jmp i01658
004EC6  3  A9 00                lda #0
004EC8  3  C5 rr                cmp vara
004ECA  3  F0 03                beq *+5
004ECC  3  4C D4 4E             jmp i01574
004ECF  3  A9 00                lda #0		; ANIMATE
004ED1  3  20 C5 2E             jsr animsp
004ED4  3  A9 03        i01574: lda #3
004ED6  3  85 rr                sta chary
004ED8  3  A9 0A                lda #10
004EDA  3  85 rr                sta charx
004EDC  3  A9 0E                lda #14  	; MESSAGE
004EDE  3  20 6A 2A             jsr dmsg
004EE1  3  A9 05                lda #5
004EE3  3  85 rr                sta chary
004EE5  3  A9 0C                lda #12
004EE7  3  85 rr                sta charx
004EE9  3  A9 0F                lda #15  	; MESSAGE
004EEB  3  20 6A 2A             jsr dmsg
004EEE  3  A9 05                lda #5
004EF0  3  85 rr                sta chary
004EF2  3  A9 12                lda #18
004EF4  3  85 rr                sta charx
004EF6  3  A9 10                lda #16  	; MESSAGE
004EF8  3  20 6A 2A             jsr dmsg
004EFB  3  A9 12        i01658: lda #18
004EFD  3  A0 06                ldy #6
004EFF  3  D1 68                cmp (z80_ix),y
004F01  3  F0 03                beq *+5
004F03  3  4C 29 4F             jmp i01756
004F06  3  A9 DC                lda #220
004F08  3  A0 09                ldy #9
004F0A  3  D1 68                cmp (z80_ix),y
004F0C  3  B0 03                bcs *+5
004F0E  3  4C 23 4F             jmp i01743
004F11  3  A9 04                lda #4
004F13  3  85 62                sta z80_c
004F15  3  A0 09                ldy #9
004F17  3  B1 68                lda (z80_ix),y
004F19  3  18                   clc
004F1A  3  65 62                adc z80_c
004F1C  3  A0 09                ldy #9
004F1E  3  91 68                sta (z80_ix),y
004F20  3  4C 29 4F             jmp i01756
004F23  3  A9 10        i01743: lda #16
004F25  3  A0 09                ldy #9
004F27  3  91 68                sta (z80_ix),y
004F29  3  A9 1A        i01756: lda #26
004F2B  3  A0 06                ldy #6
004F2D  3  D1 68                cmp (z80_ix),y
004F2F  3  F0 03                beq *+5
004F31  3  4C 42 4F             jmp i01806
004F34  3  A9 00                lda #0
004F36  3  C5 rr                cmp varh
004F38  3  F0 03                beq *+5
004F3A  3  4C 42 4F             jmp i01806
004F3D  3  A9 00                lda #0		; ANIMATE
004F3F  3  20 C5 2E             jsr animsp
004F42  3  A9 0C        i01806: lda #12
004F44  3  A0 06                ldy #6
004F46  3  D1 68                cmp (z80_ix),y
004F48  3  90 03                bcc *+5
004F4A  3  4C 66 4F             jmp i01879
004F4D  3  A9 11                lda #17
004F4F  3  A0 06                ldy #6
004F51  3  D1 68                cmp (z80_ix),y
004F53  3  B0 03                bcs *+5
004F55  3  4C 66 4F             jmp i01879
004F58  3  A9 00                lda #0
004F5A  3  C5 rr                cmp vara
004F5C  3  F0 03                beq *+5
004F5E  3  4C 66 4F             jmp i01879
004F61  3  A9 00                lda #0		; ANIMATE
004F63  3  20 C5 2E             jsr animsp
004F66  3  A9 00        i01879: lda #0
004F68  3  C5 rr                cmp scno
004F6A  3  F0 03                beq *+5
004F6C  3  4C D5 4F             jmp i02112
004F6F  3  A9 02                lda #2
004F71  3  A0 06                ldy #6
004F73  3  D1 68                cmp (z80_ix),y
004F75  3  F0 03                beq *+5
004F77  3  4C D5 4F             jmp i02112
004F7A  3  A9 00                lda #0
004F7C  3  C5 rr                cmp vara
004F7E  3  F0 03                beq *+5
004F80  3  4C 88 4F             jmp i01946
004F83  3  A9 00                lda #0		; ANIMATE
004F85  3  20 C5 2E             jsr animsp
004F88  3  A9 0F        i01946: lda #15
004F8A  3  85 rr                sta chary
004F8C  3  A9 07                lda #7
004F8E  3  85 rr                sta charx
004F90  3  A9 11                lda #17  	; MESSAGE
004F92  3  20 6A 2A             jsr dmsg
004F95  3  A5 rr                lda joyval	; KEY
004F97  3  29 10                and #16
004F99  3  F0 03                beq :+
004F9B  3  4C D5 4F             jmp i02112
004F9E  3               :
004F9E  3  A9 0F                lda #15
004FA0  3  85 rr                sta chary
004FA2  3  A9 04                lda #4
004FA4  3  85 rr                sta charx
004FA6  3  A9 12                lda #18  	; MESSAGE
004FA8  3  20 6A 2A             jsr dmsg
004FAB  3               
004FAB  3               rtcon:			; CONTROLMENU
004FAB  3  20 52 20             jsr vsync
004FAE  3  A9 00                lda #0
004FB0  3  85 rr                sta contrl
004FB2  3  AD 62 96             lda keys+7
004FB5  3  20 D6 97             jsr ktest
004FB8  3  90 18                bcc rtcon1
004FBA  3  A9 01                lda #1
004FBC  3  85 rr                sta contrl
004FBE  3  AD 63 96             lda keys+8
004FC1  3  20 D6 97             jsr ktest
004FC4  3  90 0C                bcc rtcon1
004FC6  3  A9 02                lda #2
004FC8  3  85 rr                sta contrl
004FCA  3  AD 64 96             lda keys+9
004FCD  3  20 D6 97             jsr ktest
004FD0  3  B0 D9                bcs rtcon
004FD2  3                       rtcon1:
004FD2  3  20 FE 2F             jsr scrr	; SCREENRIGHT
004FD5  3  A9 06        i02112: lda #6
004FD7  3  A0 06                ldy #6
004FD9  3  D1 68                cmp (z80_ix),y
004FDB  3  F0 03                beq *+5
004FDD  3  4C BD 50             jmp i02640
004FE0  3  A9 A8                lda #168
004FE2  3  A0 08                ldy #8
004FE4  3  D1 68                cmp (z80_ix),y
004FE6  3  F0 03                beq *+5
004FE8  3  4C 00 50             jmp i02204
004FEB  3  A9 FF                lda #255	; REMOVE
004FED  3  A0 05                ldy #5
004FEF  3  91 68                sta (z80_ix),y
004FF1  3  A9 01                lda #1
004FF3  3  85 rr                sta varh
004FF5  3  A9 08                lda #8	; SPAWN
004FF7  3  85 62                sta z80_c
004FF9  3  A9 23                lda #35
004FFB  3  85 63                sta z80_b
004FFD  3  20 EB 22             jsr spawn
005000  3  20 E5 26     i02204: jsr cangd	; CANGODOWN
005003  3  F0 03                beq :+
005005  3  4C 23 50             jmp i02277
005008  3               :
005008  3  A9 00                lda #0
00500A  3  C5 rr                cmp vara
00500C  3  F0 03                beq *+5
00500E  3  4C 20 50             jmp i02272
005011  3  A9 08                lda #8
005013  3  85 62                sta z80_c
005015  3  A0 08                ldy #8
005017  3  B1 68                lda (z80_ix),y
005019  3  18                   clc
00501A  3  65 62                adc z80_c
00501C  3  A0 08                ldy #8
00501E  3  91 68                sta (z80_ix),y
005020  3  4C 43 50     i02272: jmp i02344
005023  3  20 77 26     i02277: jsr laddu	; CANGOUP
005026  3  F0 03                beq :+
005028  3  4C 43 50             jmp i02344
00502B  3               :
00502B  3  A9 00                lda #0
00502D  3  C5 rr                cmp vara
00502F  3  F0 03                beq *+5
005031  3  4C 43 50             jmp i02344
005034  3  A9 08                lda #8
005036  3  85 62                sta z80_c
005038  3  A0 08                ldy #8
00503A  3  B1 68                lda (z80_ix),y
00503C  3  18                   clc
00503D  3  65 62                adc z80_c
00503F  3  A0 08                ldy #8
005041  3  91 68                sta (z80_ix),y
005043  3  A0 08        i02344: ldy #8
005045  3  B1 68                lda (z80_ix),y
005047  3  4A                   lsr a
005048  3  4A                   lsr a
005049  3  4A                   lsr a
00504A  3  A0 08                ldy #8
00504C  3  91 68                sta (z80_ix),y
00504E  3  A0 08                ldy #8
005050  3  B1 68                lda (z80_ix),y
005052  3  0A                   asl a
005053  3  0A                   asl a
005054  3  0A                   asl a
005055  3  A0 08                ldy #8
005057  3  91 68                sta (z80_ix),y
005059  3  A0 09                ldy #9
00505B  3  B1 68                lda (z80_ix),y
00505D  3  4A                   lsr a
00505E  3  4A                   lsr a
00505F  3  4A                   lsr a
005060  3  A0 09                ldy #9
005062  3  91 68                sta (z80_ix),y
005064  3  A0 09                ldy #9
005066  3  B1 68                lda (z80_ix),y
005068  3  0A                   asl a
005069  3  0A                   asl a
00506A  3  0A                   asl a
00506B  3  A0 09                ldy #9
00506D  3  91 68                sta (z80_ix),y
00506F  3  A9 08                lda #8
005071  3  85 62                sta z80_c
005073  3  A0 09                ldy #9
005075  3  B1 68                lda (z80_ix),y
005077  3  18                   clc
005078  3  65 62                adc z80_c
00507A  3  A0 09                ldy #9
00507C  3  91 68                sta (z80_ix),y
00507E  3  A9 08                lda #8
005080  3  85 62                sta z80_c
005082  3  A0 08                ldy #8
005084  3  B1 68                lda (z80_ix),y
005086  3  38                   sec
005087  3  E5 62                sbc z80_c
005089  3  A0 08                ldy #8
00508B  3  91 68                sta (z80_ix),y
00508D  3  A9 08                lda #8
00508F  3  85 62                sta z80_c
005091  3  A0 08                ldy #8
005093  3  B1 68                lda (z80_ix),y
005095  3  18                   clc
005096  3  65 62                adc z80_c
005098  3  A0 08                ldy #8
00509A  3  91 68                sta (z80_ix),y
00509C  3  A9 08                lda #8
00509E  3  85 62                sta z80_c
0050A0  3  A0 09                ldy #9
0050A2  3  B1 68                lda (z80_ix),y
0050A4  3  38                   sec
0050A5  3  E5 62                sbc z80_c
0050A7  3  A0 09                ldy #9
0050A9  3  91 68                sta (z80_ix),y
0050AB  3  A9 00                lda #0		; ANIMATE
0050AD  3  20 C5 2E             jsr animsp
0050B0  3  A9 00                lda #0
0050B2  3  C5 rr                cmp vard
0050B4  3  F0 03                beq *+5
0050B6  3  4C BD 50             jmp i02640
0050B9  3  A9 01                lda #1 		; KILL
0050BB  3  85 rr                sta deadf
0050BD  3  60           i02640: rts
0050BE  3               evnt09:
0050BE  3  A9 06                lda #6
0050C0  3  A0 05                ldy #5
0050C2  3  D1 68                cmp (z80_ix),y
0050C4  3  F0 03                beq *+5
0050C6  3  4C CF 50             jmp j00037
0050C9  3  A9 00                lda #0
0050CB  3  A0 0B                ldy #11
0050CD  3  91 68                sta (z80_ix),y
0050CF  3  A9 04        j00037: lda #4
0050D1  3  A0 05                ldy #5
0050D3  3  D1 68                cmp (z80_ix),y
0050D5  3  F0 03                beq *+5
0050D7  3  4C E1 50             jmp j00074
0050DA  3  A5 rr                lda vare
0050DC  3  18                   clc
0050DD  3  69 01                adc #1
0050DF  3  85 rr                sta vare
0050E1  3  60           j00074: rts
0050E2  3               evnt10:
0050E2  3  A5 rr                lda varf
0050E4  3  C5 rr                cmp varm
0050E6  3  F0 03                beq *+5
0050E8  3  4C F2 50             jmp k00032
0050EB  3  A9 00                lda #0
0050ED  3  85 rr                sta varm
0050EF  3  4C F9 50             jmp k00047
0050F2  3  A5 rr        k00032: lda varm
0050F4  3  18                   clc
0050F5  3  69 01                adc #1
0050F7  3  85 rr                sta varm
0050F9  3  A9 08        k00047: lda #8
0050FB  3  C5 rr                cmp varh
0050FD  3  F0 03                beq *+5
0050FF  3  4C 09 51             jmp k00076
005102  3  A9 00                lda #0
005104  3  85 rr                sta varh
005106  3  4C 10 51             jmp k00092
005109  3  A5 rr        k00076: lda varh
00510B  3  18                   clc
00510C  3  69 01                adc #1
00510E  3  85 rr                sta varh
005110  3  A9 28        k00092: lda #40
005112  3  C5 rr                cmp vard
005114  3  F0 03                beq *+5
005116  3  4C 20 51             jmp k00121
005119  3  A9 00                lda #0
00511B  3  85 rr                sta vard
00511D  3  4C 27 51             jmp k00137
005120  3  A5 rr        k00121: lda vard
005122  3  18                   clc
005123  3  69 01                adc #1
005125  3  85 rr                sta vard
005127  3  A9 19        k00137: lda #25
005129  3  C5 rr                cmp varb
00512B  3  F0 03                beq *+5
00512D  3  4C 47 51             jmp k00198
005130  3  A9 00                lda #0
005132  3  85 rr                sta varb
005134  3  A9 00                lda #0
005136  3  C5 rr                cmp varc
005138  3  90 03                bcc *+5
00513A  3  4C 44 51             jmp k00194
00513D  3  A5 rr                lda varc
00513F  3  38                   sec
005140  3  E9 01                sbc #1
005142  3  85 rr                sta varc
005144  3  4C 4E 51     k00194: jmp k00214
005147  3  A5 rr        k00198: lda varb
005149  3  18                   clc
00514A  3  69 01                adc #1
00514C  3  85 rr                sta varb
00514E  3  A5 rr        k00214: lda vari
005150  3  C5 rr                cmp vara
005152  3  F0 03                beq *+5
005154  3  4C 5E 51             jmp k00244
005157  3  A9 00                lda #0
005159  3  85 rr                sta vara
00515B  3  4C 65 51             jmp k00259
00515E  3  A5 rr        k00244: lda vara
005160  3  18                   clc
005161  3  69 01                adc #1
005163  3  85 rr                sta vara
005165  3  60           k00259: rts
005166  3               evnt11:
005166  3  A0 09                ldy #9 	; KEY
005168  3  B9 5B 96             lda keys,y
00516B  3  20 D6 97             jsr ktest
00516E  3  90 03                bcc :+
005170  3  4C 7B 51             jmp l00048
005173  3               :
005173  3  A9 01                lda #1	; NEXTLEVEL
005175  3  85 rr                sta nexlev
005177  3  A9 01                lda #1	; RESTART
005179  3  85 rr                sta restfl
00517B  3  60           l00048: rts
00517C  3               evnt12:
00517C  3  60                   rts
00517D  3               evnt13:
00517D  3  A9 00                lda #0
00517F  3  85 rr                sta varn
005181  3  A9 00                lda #0
005183  3  85 rr                sta vark
005185  3  A9 00                lda #0
005187  3  85 rr                sta varg
005189  3  A9 01                lda #1
00518B  3  85 rr                sta varl
00518D  3  A9 05                lda #5
00518F  3  85 rr                sta numlif
005191  3  A9 00                lda #0
005193  3  85 rr                sta vare
005195  3  A9 FA                lda #250
005197  3  85 rr                sta varc
005199  3  A9 00                lda #0
00519B  3  85 rr                sta vara
00519D  3  A9 00                lda #0
00519F  3  85 rr                sta varz
0051A1  3  20 D4 20             jsr cls		; CLS
0051A4  3  60                   rts
0051A5  3               evnt14:
0051A5  3  A9 00                lda #0
0051A7  3  85 rr                sta varz
0051A9  3  A9 00                lda #0
0051AB  3  85 rr                sta varn
0051AD  3  A9 00                lda #0
0051AF  3  85 rr                sta chary
0051B1  3  A9 00                lda #0
0051B3  3  85 rr                sta charx
0051B5  3  A5 rr                lda varn	; DISPLAY
0051B7  3  20 A0 2F             jsr disply
0051BA  3  A9 04                lda #4
0051BC  3  C5 rr                cmp scno
0051BE  3  F0 03                beq *+5
0051C0  3  4C CB 51             jmp o00079
0051C3  3  A9 D4                lda #212
0051C5  3  85 rr                sta varp
0051C7  3  A9 58                lda #88
0051C9  3  85 rr                sta varq
0051CB  3  A9 07        o00079: lda #7
0051CD  3  C5 rr                cmp scno
0051CF  3  F0 03                beq *+5
0051D1  3  4C DC 51             jmp o00113
0051D4  3  A9 B4                lda #180
0051D6  3  85 rr                sta varp
0051D8  3  A9 20                lda #32
0051DA  3  85 rr                sta varq
0051DC  3  A9 00        o00113: lda #0
0051DE  3  85 rr                sta vara
0051E0  3  A9 00                lda #0
0051E2  3  85 rr                sta varm
0051E4  3  20 D4 20             jsr cls		; CLS
0051E7  3  A9 06                lda #6
0051E9  3  C5 rr                cmp scno
0051EB  3  F0 03                beq *+5
0051ED  3  4C FB 51             jmp o00172
0051F0  3  A9 02                lda #2
0051F2  3  85 rr                sta varf
0051F4  3  A9 00                lda #0
0051F6  3  85 rr                sta vari
0051F8  3  4C 03 52             jmp o00188
0051FB  3  A9 04        o00172: lda #4
0051FD  3  85 rr                sta varf
0051FF  3  A9 01                lda #1
005201  3  85 rr                sta vari
005203  3  A9 05        o00188: lda #5
005205  3  C5 rr                cmp scno
005207  3  F0 03                beq *+5
005209  3  4C 19 52             jmp o00233
00520C  3  A9 17                lda #23
00520E  3  85 rr                sta chary
005210  3  A9 01                lda #1
005212  3  85 rr                sta charx
005214  3  A9 18                lda #24  	; MESSAGE
005216  3  20 6A 2A             jsr dmsg
005219  3  A9 0B        o00233: lda #11
00521B  3  85 rr                sta chary
00521D  3  A9 1F                lda #31
00521F  3  85 rr                sta charx
005221  3  A9 17                lda #23  	; MESSAGE
005223  3  20 6A 2A             jsr dmsg
005226  3  A9 00                lda #0
005228  3  85 rr                sta chary
00522A  3  A9 00                lda #0
00522C  3  85 rr                sta charx
00522E  3  A9 16                lda #22  	; MESSAGE
005230  3  20 6A 2A             jsr dmsg
005233  3  A9 01                lda #1
005235  3  85 rr                sta chary
005237  3  A9 1F                lda #31
005239  3  85 rr                sta charx
00523B  3  A9 17                lda #23  	; MESSAGE
00523D  3  20 6A 2A             jsr dmsg
005240  3  60                   rts
005241  3               evnt15:
005241  3  60                   rts
005242  3               evnt16:
005242  3  A5 rr                lda numlif
005244  3  38                   sec
005245  3  E9 01                sbc #1
005247  3  85 rr                sta numlif
005249  3  A9 01                lda #1
00524B  3  85 rr                sta chary
00524D  3  A9 13                lda #19
00524F  3  85 rr                sta charx
005251  3  A5 rr                lda numlif	; DISPLAY
005253  3  20 A0 2F             jsr disply
005256  3  A9 00                lda #0
005258  3  C5 rr                cmp numlif
00525A  3  F0 03                beq *+5
00525C  3  4C 75 52             jmp q00114
00525F  3  A9 0A                lda #10
005261  3  85 rr                sta chary
005263  3  A9 0C                lda #12
005265  3  85 rr                sta charx
005267  3  A9 00                lda #0  	; MESSAGE
005269  3  20 6A 2A             jsr dmsg
00526C  3  A9 32                lda #50 	; DELAY
00526E  3  20 2F 20             jsr delay
005271  3  A9 01                lda #1		; ENDGAME
005273  3  85 rr                sta gamwon
005275  3  A9 00        q00114: lda #0
005277  3  85 rr                sta vark
005279  3  A9 00                lda #0
00527B  3  85 rr                sta vare
00527D  3  A9 FA                lda #250
00527F  3  85 rr                sta varc
005281  3  A9 00                lda #0
005283  3  85 rr                sta varz
005285  3  60                   rts
005286  3               evnt17:
005286  3  A9 32                lda #50 	; DELAY
005288  3  20 2F 20             jsr delay
00528B  3  60                   rts
00528C  3               evnt18:
00528C  3  A9 32                lda #50 	; DELAY
00528E  3  20 2F 20             jsr delay
005291  3  60                   rts
005292  3               evnt19:
005292  3  60                   rts
005293  3               evnt20:
005293  3  60                   rts
005294  3  60           ptcusr: rts
005295  3               msgdat:
005295  3  47 41 4D 45          .byte "GAME OVER!",141
005299  3  20 4F 56 45  
00529D  3  52 21 8D     
0052A0  3  61 61 61 61          .byte "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",13
0052A4  3  61 61 61 61  
0052A8  3  61 61 61 61  
0052BF  3  8D                   .byte 141
0052C0  3  62 63 63 63          .byte "bcccd",141
0052C4  3  64 8D        
0052C6  3  65 8D                .byte "e",141
0052C8  3  66 66 66 66          .byte "ffffffffffffffffff",141
0052CC  3  66 66 66 66  
0052D0  3  66 66 66 66  
0052DB  3  66 66 66 66          .byte "fffffff",141
0052DF  3  66 66 66 8D  
0052E3  3  66 66 66 8D          .byte "fff",141
0052E7  3  66 66 66 66          .byte "ffff",230
0052EB  3  E6           
0052EC  3  38 78 FE             .byte "8x",254
0052EF  3  42 4F 4E 55          .byte "BONU",211
0052F3  3  D3           
0052F4  3  65 4C 67 E5          .byte "eLg",229
0052F8  3  E7                   .byte 231
0052F9  3  68 20 69 E8          .byte "h i",232
0052FD  3  E9                   .byte 233
0052FE  3  4F 4E 4B 45          .byte "ONKE",217
005302  3  D9           
005303  3  4F 4E C7             .byte "ON",199
005306  3  F2                   .byte 242
005307  3  50 52 45 53          .byte "PRESS SPACE TO STAR",212
00530B  3  53 20 53 50  
00530F  3  41 43 45 20  
00531B  3  31 20 4B 45          .byte "1 KEYS 2 LEFT JOYSTICK    ",160
00531F  3  59 53 20 32  
005323  3  20 4C 45 46  
005336  3  CC                   .byte 204
005337  3  53 41 56 45          .byte "SAVE YOUR PAPA",161
00533B  3  20 59 4F 55  
00533F  3  52 20 50 41  
005346  3  50 52 45 53          .byte "PRESS FIR",197
00534A  3  53 20 46 49  
00534E  3  52 C5        
005350  3  6B 6B 6B 6B          .byte "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk",235
005354  3  6B 6B 6B 6B  
005358  3  6B 6B 6B 6B  
005370  3  EB                   .byte 235
005371  3  4B 45 45 50          .byte "KEEP GOING TO MARIO",39
005375  3  20 47 4F 49  
005379  3  4E 47 20 54  
005385  3  73 20 48 49          .byte "s HIDEOUT",161
005389  3  44 45 4F 55  
00538D  3  54 A1        
00538F  3  6C 6D 6D F3          .byte "lmm",243
005393  3  6E 6E 6E 6E          .byte "nnnnnnnnnnnnnnnnnnnnn",238
005397  3  6E 6E 6E 6E  
00539B  3  6E 6E 6E 6E  
0053A9  3  6C 6D 6D 6D          .byte "lmmmmmmmmmmmmmmmmmmmm",243
0053AD  3  6D 6D 6D 6D  
0053B1  3  6D 6D 6D 6D  
0053BF  3  6F 6F 6F 6F          .byte "ooooooooooooooooooooo",239
0053C3  3  6F 6F 6F 6F  
0053C7  3  6F 6F 6F 6F  
0053D5  3  4F 55 43 48          .byte "OUCH",161
0053D9  3  A1           
0053DA  3  47 45 54 20          .byte "GET READY FOR THE FINAL BATTL",197
0053DE  3  52 45 41 44  
0053E2  3  59 20 46 4F  
0053F8  3               nummsg:
0053F8  3  1F                   .byte 31
0053F9  3               chgfx:
0053F9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0053FD  3  00 00 00 00  
005401  3  44 D4 B4 CC          .byte 68,212,180,204,232,40,98,202
005405  3  E8 28 62 CA  
005409  3  8A 0A 14 55          .byte 138,10,20,85,20,10,74,74
00540D  3  14 0A 4A 4A  
005411  3  2A EA D5 55          .byte 42,234,213,85,87,106,234,174
005415  3  57 6A EA AE  
005419  3  00 10 00 10          .byte 0,16,0,16,0,16,0,16
00541D  3  00 10 00 10  
005421  3  FF 44 DE 41          .byte 255,68,222,65,88,0,33,0
005425  3  58 00 21 00  
005429  3  C9 25 24 12          .byte 201,37,36,18,146,146,141,217
00542D  3  92 92 8D D9  
005431  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
005435  3  00 00 00 00  
005439  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00543D  3  00 00 00 00  
005441  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
005445  3  00 00 00 00  
005449  3  54 2A 5B 5B          .byte 84,42,91,91,86,166,206,76
00544D  3  56 A6 CE 4C  
005451  3  FF 44 DE 41          .byte 255,68,222,65,88,0,33,0
005455  3  58 00 21 00  
005459  3  35 7A F6 EF          .byte 53,122,246,239,238,238,85,25
00545D  3  EE EE 55 19  
005461  3  5C EE EE DD          .byte 92,238,238,221,73,183,239,102
005465  3  49 B7 EF 66  
005469  3  00 10 00 10          .byte 0,16,0,16,40,124,108,0
00546D  3  28 7C 6C 00  
005471  3  00 10 00 10          .byte 0,16,0,16,40,124,108,0
005475  3  28 7C 6C 00  
005479  3  00 10 00 10          .byte 0,16,0,16,40,124,108,0
00547D  3  28 7C 6C 00  
005481  3  00 10 00 10          .byte 0,16,0,16,0,16,0,16
005485  3  00 10 00 10  
005489  3  00 10 00 10          .byte 0,16,0,16,0,16,0,16
00548D  3  00 10 00 10  
005491  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
005495  3  00 00 00 00  
005499  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00549D  3  00 00 00 00  
0054A1  3  7C EE EE EE          .byte 124,238,238,238,254,254,124,0
0054A5  3  FE FE 7C 00  
0054A9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0054AD  3  00 00 00 00  
0054B1  3  20 00 10 30          .byte 32,0,16,48,240,224,192,0
0054B5  3  F0 E0 C0 00  
0054B9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0054BD  3  00 00 00 00  
0054C1  3  00 00 01 03          .byte 0,0,1,3,3,7,7,7
0054C5  3  03 07 07 07  
0054C9  3  0F 7F FF FF          .byte 15,127,255,255,255,255,255,255
0054CD  3  FF FF FF FF  
0054D1  3  B5 DA DA D8          .byte 181,218,218,216,36,251,251,225
0054D5  3  24 FB FB E1  
0054D9  3  7B 81 06 06          .byte 123,129,6,6,7,7,3,3
0054DD  3  07 07 03 03  
0054E1  3  BE 81 60 60          .byte 190,129,96,96,224,192,192,128
0054E5  3  E0 C0 C0 80  
0054E9  3  AD 5B 5B 03          .byte 173,91,91,3,60,223,207,135
0054ED  3  3C DF CF 87  
0054F1  3  08 00 22 38          .byte 8,0,34,56,31,15,0,0
0054F5  3  1F 0F 00 00  
0054F9  3  0F 0F 4F 1F          .byte 15,15,79,31,255,255,127,15
0054FD  3  FF FF 7F 0F  
005501  3  00 00 00 00          .byte 0,0,0,0,0,0,0,32
005505  3  00 00 00 20  
005509  3  AA 55 AA 55          .byte 170,85,170,85,170,85,170,85
00550D  3  AA 55 AA 55  
005511  3  03 03 00 02          .byte 3,3,0,2,0,7,141,109
005515  3  00 07 8D 6D  
005519  3  0F 1A 1F 0F          .byte 15,26,31,15,0,0,0,1
00551D  3  00 00 00 01  
005521  3  AF 9E A1 BF          .byte 175,158,161,191,191,191,191,149
005525  3  BF BF BF 95  
005529  3  8A 80 80 80          .byte 138,128,128,128,128,128,128,127
00552D  3  80 80 80 7F  
005531  3  FF 00 58 58          .byte 255,0,88,88,88,88,88,0
005535  3  58 58 58 00  
005539  3  F5 79 85 FD          .byte 245,121,133,253,253,253,249,81
00553D  3  FD FD F9 51  
005541  3  00 00 00 00          .byte 0,0,0,0,192,224,32,192
005545  3  C0 E0 20 C0  
005549  3  FF FF 7E 00          .byte 255,255,126,0,36,128,252,219
00554D  3  24 80 FC DB  
005551  3  A1 01 01 01          .byte 161,1,1,1,1,1,1,254
005555  3  01 01 01 FE  
005559  3  FF FF 7E 00          .byte 255,255,126,0,68,1,127,187
00555D  3  44 01 7F BB  
005561  3  07 03 01 00          .byte 7,3,1,0,0,0,0,0
005565  3  00 00 00 00  
005569  3  80 80 00 80          .byte 128,128,0,128,0,192,97,110
00556D  3  00 C0 61 6E  
005571  3  00 00 00 80          .byte 0,0,0,128,128,192,192,192
005575  3  80 C0 C0 C0  
005579  3  00 EF F7 00          .byte 0,239,247,0,0,0,0,0
00557D  3  00 00 00 00  
005581  3  FF 00 00 00          .byte 255,0,0,0,0,0,0,0
005585  3  00 00 00 00  
005589  3  80 80 80 80          .byte 128,128,128,128,128,128,128,128
00558D  3  80 80 80 80  
005591  3  00 00 80 80          .byte 0,0,128,128,128,128,128,128
005595  3  80 80 80 80  
005599  3  00 00 01 01          .byte 0,0,1,1,1,1,1,1
00559D  3  01 01 01 01  
0055A1  3  01 01 01 01          .byte 1,1,1,1,1,1,1,1
0055A5  3  01 01 01 01  
0055A9  3  FF 00 02 02          .byte 255,0,2,2,2,2,2,0
0055AD  3  02 02 02 00  
0055B1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0055B5  3  00 00 00 00  
0055B9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0055BD  3  00 00 00 00  
0055C1  3  02 03 03 02          .byte 2,3,3,2,0,0,0,0
0055C5  3  00 00 00 00  
0055C9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0055CD  3  00 00 00 00  
0055D1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,170
0055D5  3  00 00 00 AA  
0055D9  3  00 00 FF FF          .byte 0,0,255,255,255,255,255,255
0055DD  3  FF FF FF FF  
0055E1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0055E5  3  00 00 00 00  
0055E9  3  03 0E 1E 3E          .byte 3,14,30,62,118,118,119,251
0055ED  3  76 76 77 FB  
0055F1  3  1A 14 9A 85          .byte 26,20,154,133,63,127,62,0
0055F5  3  3F 7F 3E 00  
0055F9  3  00 3C 3C 00          .byte 0,60,60,0,60,60,0,0
0055FD  3  3C 3C 00 00  
005601  3  3F 40 5F 5F          .byte 63,64,95,95,95,95,95,95
005605  3  5F 5F 5F 5F  
005609  3  FC 02 FA FA          .byte 252,2,250,250,250,250,250,250
00560D  3  FA FA FA FA  
005611  3  5F 5F 5F 2F          .byte 95,95,95,47,23,11,4,3
005615  3  17 0B 04 03  
005619  3  FA FA FA F4          .byte 250,250,250,244,232,208,32,192
00561D  3  E8 D0 20 C0  
005621  3  60 60 60 60          .byte 96,96,96,96,96,96,96,96
005625  3  60 60 60 60  
005629  3  06 06 06 06          .byte 6,6,6,6,6,6,6,6
00562D  3  06 06 06 06  
005631  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
005635  3  00 00 00 00  
005639  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00563D  3  00 00 00 00  
005641  3  C0 C0 40 80          .byte 192,192,64,128,192,192,192,192
005645  3  C0 C0 C0 C0  
005649  3  60 F1 9F 0E          .byte 96,241,159,14,96,241,159,14
00564D  3  60 F1 9F 0E  
005651  3  C0 C0 40 80          .byte 192,192,64,128,192,192,192,192
005655  3  C0 C0 C0 C0  
005659  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00565D  3  00 00 00 00  
005661  3  78 FC FC CC          .byte 120,252,252,204,24,24,0,12
005665  3  18 18 00 0C  
005669  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00566D  3  00 00 00 00  
005671  3  AA 55 AA 55          .byte 170,85,170,85,170,85,170,85
005675  3  AA 55 AA 55  
005679  3  AA FF AA FF          .byte 170,255,170,255,170,255,170,255
00567D  3  AA FF AA FF  
005681  3  FF 44 DE 41          .byte 255,68,222,65,88,0,33,0
005685  3  58 00 21 00  
005689  3  10 00 10 00          .byte 16,0,16,0,16,0,16,0
00568D  3  10 00 10 00  
005691  3  00 00 00 00          .byte 0,0,0,0,0,0,0,170
005695  3  00 00 00 AA  
005699  3  E0 E0 E0 C0          .byte 224,224,224,192,128,0,0,0
00569D  3  80 00 00 00  
0056A1  3  0F 0F 0F 1F          .byte 15,15,15,31,33,65,67,63
0056A5  3  21 41 43 3F  
0056A9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0056AD  3  00 00 00 00  
0056B1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0056B5  3  00 00 00 00  
0056B9  3  01 01 01 01          .byte 1,1,1,1,1,1,0,0
0056BD  3  01 01 00 00  
0056C1  3  80 80 80 80          .byte 128,128,128,128,128,128,0,0
0056C5  3  80 80 00 00  
0056C9  3  03 03 00 02          .byte 3,3,0,2,0,7,13,13
0056CD  3  00 07 0D 0D  
0056D1  3  5C 5E 53 51          .byte 92,94,83,81,89,95,64,95
0056D5  3  59 5F 40 5F  
0056D9  3  3A 4A 8A 9A          .byte 58,74,138,154,250,250,2,250
0056DD  3  FA FA 02 FA  
0056E1  3  FF FF 00 FF          .byte 255,255,0,255,0,0,0,255
0056E5  3  00 00 00 FF  
0056E9  3  20 20 20 20          .byte 32,32,32,32,0,32,80,232
0056ED  3  00 20 50 E8  
0056F1  3  55 AA 55 AA          .byte 85,170,85,170,85,170,85,170
0056F5  3  55 AA 55 AA  
0056F9  3  00 00 00 70          .byte 0,0,0,112,200,232,112,0
0056FD  3  C8 E8 70 00  
005701  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
005705  3  00 00 00 00  
005709  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00570D  3  00 00 00 00  
005711  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
005715  3  00 00 00 00  
005719  3  EE FF EE FF          .byte 238,255,238,255,238,255,238,255
00571D  3  EE FF EE FF  
005721  3  80 80 00 80          .byte 128,128,0,128,0,192,96,96
005725  3  00 C0 60 60  
005729  3  20 30 20 30          .byte 32,48,32,48,32,48,32,48
00572D  3  20 30 20 30  
005731  3  FF 00 FF C7          .byte 255,0,255,199,108,56,56,56
005735  3  6C 38 38 38  
005739  3  38 38 38 7C          .byte 56,56,56,124,255,255,0,255
00573D  3  FF FF 00 FF  
005741  3  C0 80 C0 80          .byte 192,128,192,128,192,128,192,128
005745  3  C0 80 C0 80  
005749  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
00574D  3  FF FF FF FF  
005751  3               bprop:
005751  3  00                   .byte 0
005752  3  02                   .byte 2
005753  3  02                   .byte 2
005754  3  02                   .byte 2
005755  3  03                   .byte 3
005756  3  02                   .byte 2
005757  3  02                   .byte 2
005758  3  03                   .byte 3
005759  3  06                   .byte 6
00575A  3  05                   .byte 5
00575B  3  05                   .byte 5
00575C  3  03                   .byte 3
00575D  3  02                   .byte 2
00575E  3  02                   .byte 2
00575F  3  03                   .byte 3
005760  3  03                   .byte 3
005761  3  03                   .byte 3
005762  3  03                   .byte 3
005763  3  03                   .byte 3
005764  3  00                   .byte 0
005765  3  02                   .byte 2
005766  3  00                   .byte 0
005767  3  05                   .byte 5
005768  3  02                   .byte 2
005769  3  02                   .byte 2
00576A  3  00                   .byte 0
00576B  3  00                   .byte 0
00576C  3  00                   .byte 0
00576D  3  00                   .byte 0
00576E  3  00                   .byte 0
00576F  3  00                   .byte 0
005770  3  00                   .byte 0
005771  3  00                   .byte 0
005772  3  05                   .byte 5
005773  3  00                   .byte 0
005774  3  00                   .byte 0
005775  3  00                   .byte 0
005776  3  00                   .byte 0
005777  3  00                   .byte 0
005778  3  02                   .byte 2
005779  3  00                   .byte 0
00577A  3  00                   .byte 0
00577B  3  02                   .byte 2
00577C  3  02                   .byte 2
00577D  3  02                   .byte 2
00577E  3  02                   .byte 2
00577F  3  02                   .byte 2
005780  3  02                   .byte 2
005781  3  01                   .byte 1
005782  3  01                   .byte 1
005783  3  02                   .byte 2
005784  3  02                   .byte 2
005785  3  00                   .byte 0
005786  3  00                   .byte 0
005787  3  00                   .byte 0
005788  3  00                   .byte 0
005789  3  00                   .byte 0
00578A  3  00                   .byte 0
00578B  3  00                   .byte 0
00578C  3  00                   .byte 0
00578D  3  00                   .byte 0
00578E  3  00                   .byte 0
00578F  3  00                   .byte 0
005790  3  00                   .byte 0
005791  3  00                   .byte 0
005792  3  00                   .byte 0
005793  3  00                   .byte 0
005794  3  00                   .byte 0
005795  3  00                   .byte 0
005796  3  00                   .byte 0
005797  3  00                   .byte 0
005798  3  00                   .byte 0
005799  3  00                   .byte 0
00579A  3  00                   .byte 0
00579B  3  05                   .byte 5
00579C  3  00                   .byte 0
00579D  3  00                   .byte 0
00579E  3  00                   .byte 0
00579F  3  02                   .byte 2
0057A0  3  00                   .byte 0
0057A1  3  02                   .byte 2
0057A2  3  01                   .byte 1
0057A3  3  00                   .byte 0
0057A4  3  05                   .byte 5
0057A5  3  00                   .byte 0
0057A6  3  00                   .byte 0
0057A7  3  00                   .byte 0
0057A8  3  00                   .byte 0
0057A9  3  00                   .byte 0
0057AA  3  06                   .byte 6
0057AB  3  00                   .byte 0
0057AC  3  02                   .byte 2
0057AD  3  02                   .byte 2
0057AE  3  02                   .byte 2
0057AF  3  00                   .byte 0
0057B0  3  01                   .byte 1
0057B1  3  00                   .byte 0
0057B2  3  02                   .byte 2
0057B3  3  00                   .byte 0
0057B4  3  06                   .byte 6
0057B5  3  05                   .byte 5
0057B6  3  00                   .byte 0
0057B7  3  03                   .byte 3
0057B8  3  02                   .byte 2
0057B9  3  02                   .byte 2
0057BA  3  03                   .byte 3
0057BB  3  00                   .byte 0
0057BC  3               sprgfx:
0057BC  3  00 34 0E 28          .byte 0,52,14,40,28,180,60,138,60,62,54,126,118,64,119,56,123,128,125,176,61,176,27,184,3,152,24,0,29,152,3,184
0057C0  3  1C B4 3C 8A  
0057C4  3  3C 3E 36 7E  
0057DC  3  00 0D 03 8A          .byte 0,13,3,138,7,45,143,34,143,15,141,159,29,144,29,206,30,224,31,108,15,108,6,238,0,230,6,0,7,102,0,238
0057E0  3  07 2D 8F 22  
0057E4  3  8F 0F 8D 9F  
0057FC  3  40 03 80 E2          .byte 64,3,128,226,65,203,163,200,227,195,227,103,7,100,135,115,7,184,7,219,3,219,129,187,128,57,1,128,129,217,128,59
005800  3  41 CB A3 C8  
005804  3  E3 C3 E3 67  
00581C  3  D0 00 A0 38          .byte 208,0,160,56,208,114,40,242,248,240,248,217,1,217,225,220,1,238,193,246,192,246,224,110,96,14,0,96,96,118,224,14
005820  3  D0 72 28 F2  
005824  3  F8 F0 F8 D9  
00583C  3  00 00 07 34          .byte 0,0,7,52,14,40,30,180,30,138,30,62,15,126,27,56,205,192,221,230,188,123,24,61,0,8,0,3,0,7,0,0
005840  3  0E 28 1E B4  
005844  3  1E 8A 1E 3E  
00585C  3  00 00 01 CD          .byte 0,0,1,205,3,138,7,173,135,162,135,143,131,223,6,206,51,112,183,121,239,30,70,15,0,2,192,0,192,1,0,0
005860  3  03 8A 07 AD  
005864  3  87 A2 87 8F  
00587C  3  00 00 40 73          .byte 0,0,64,115,128,226,65,235,161,232,225,227,224,247,129,179,12,220,109,222,187,199,209,131,128,0,48,0,112,0,0,0
005880  3  80 E2 41 EB  
005884  3  A1 E8 E1 E3  
00589C  3  00 00 D0 1C          .byte 0,0,208,28,160,56,208,122,40,122,248,120,248,61,224,108,3,55,155,119,238,241,244,96,32,0,12,0,28,0,0,0
0058A0  3  A0 38 D0 7A  
0058A4  3  28 7A F8 78  
0058BC  3  00 00 0E 34          .byte 0,0,14,52,28,40,60,180,60,138,52,62,118,126,119,56,123,128,61,176,29,184,3,152,27,128,28,24,1,184,3,128
0058C0  3  1C 28 3C B4  
0058C4  3  3C 8A 34 3E  
0058DC  3  00 00 03 8D          .byte 0,0,3,141,7,10,15,45,143,34,141,15,157,159,29,206,30,224,15,108,7,110,0,230,6,224,7,6,0,110,0,224
0058E0  3  07 0A 0F 2D  
0058E4  3  8F 22 8D 0F  
0058FC  3  00 00 40 E3          .byte 0,0,64,227,129,194,67,203,163,200,227,67,231,103,135,115,7,184,3,219,129,219,128,57,1,184,129,193,128,27,0,56
005900  3  81 C2 43 CB  
005904  3  A3 C8 E3 43  
00591C  3  00 00 D0 38          .byte 0,0,208,56,160,112,208,242,40,242,248,208,249,217,225,220,1,238,192,246,224,118,96,14,0,110,96,112,224,6,0,14
005920  3  A0 70 D0 F2  
005924  3  28 F2 F8 D0  
00593C  3  00 34 00 28          .byte 0,52,0,40,12,180,28,138,60,62,54,126,54,64,119,56,123,128,125,176,125,176,59,184,24,24,1,128,27,152,28,56
005940  3  0C B4 1C 8A  
005944  3  3C 3E 36 7E  
00595C  3  00 0D 00 0A          .byte 0,13,0,10,3,45,135,34,143,15,141,159,13,144,29,206,30,224,31,108,31,108,14,238,6,6,0,96,6,230,7,14
005960  3  03 2D 87 22  
005964  3  8F 0F 8D 9F  
00597C  3  40 03 80 02          .byte 64,3,128,2,64,203,161,200,227,195,227,103,3,100,135,115,7,184,7,219,7,219,131,187,129,129,0,24,129,185,129,195
005980  3  40 CB A1 C8  
005984  3  E3 C3 E3 67  
00599C  3  D0 00 A0 00          .byte 208,0,160,0,208,50,40,114,248,240,248,217,0,217,225,220,1,238,193,246,193,246,224,238,96,96,0,6,96,110,224,112
0059A0  3  D0 32 28 72  
0059A4  3  F8 F0 F8 D9  
0059BC  3  2C 00 14 70          .byte 44,0,20,112,45,56,81,60,124,60,126,108,2,110,28,238,1,222,13,190,13,188,29,216,25,192,0,24,25,184,29,192
0059C0  3  2D 38 51 3C  
0059C4  3  7C 3C 7E 6C  
0059DC  3  0B 00 05 1C          .byte 11,0,5,28,11,78,20,79,31,15,31,155,128,155,135,59,128,119,131,111,3,111,7,118,6,112,0,6,6,110,7,112
0059E0  3  0B 4E 14 4F  
0059E4  3  1F 0F 1F 9B  
0059FC  3  02 C0 01 47          .byte 2,192,1,71,130,211,197,19,199,195,199,230,224,38,225,206,224,29,224,219,192,219,129,221,1,156,128,1,129,155,1,220
005A00  3  82 D3 C5 13  
005A04  3  C7 C3 C7 E6  
005A1C  3  00 B0 C0 51          .byte 0,176,192,81,224,180,241,68,241,240,177,249,184,9,184,115,120,7,248,54,240,54,96,119,0,103,96,0,224,102,0,119
005A20  3  E0 B4 F1 44  
005A24  3  F1 F0 B1 F9  
005A3C  3  00 00 2C E0          .byte 0,0,44,224,20,112,45,120,81,120,124,120,126,240,28,216,3,179,103,187,222,61,188,24,16,0,192,0,224,0,0,0
005A40  3  14 70 2D 78  
005A44  3  51 78 7C 78  
005A5C  3  00 00 0B 38          .byte 0,0,11,56,5,28,11,94,20,94,31,30,31,188,7,54,192,236,217,238,119,143,47,6,4,0,48,0,56,0,0,0
005A60  3  05 1C 0B 5E  
005A64  3  14 5E 1F 1E  
005A7C  3  00 00 02 CE          .byte 0,0,2,206,1,71,130,215,133,23,135,199,7,239,129,205,48,59,182,123,221,227,139,193,1,0,12,0,14,0,0,0
005A80  3  01 47 82 D7  
005A84  3  85 17 87 C7  
005A9C  3  00 00 80 B3          .byte 0,0,128,179,192,81,224,181,225,69,225,241,193,251,96,115,204,14,237,158,247,120,98,240,0,64,3,0,3,128,0,0
005AA0  3  C0 51 E0 B5  
005AA4  3  E1 45 E1 F1  
005ABC  3  00 00 2C 70          .byte 0,0,44,112,20,56,45,60,81,60,124,108,126,110,28,238,1,222,13,188,29,184,25,192,1,216,24,56,29,128,1,192
005AC0  3  14 38 2D 3C  
005AC4  3  51 3C 7C 6C  
005ADC  3  00 00 0B 1C          .byte 0,0,11,28,5,14,11,79,20,79,31,27,159,155,135,59,128,119,3,111,7,110,6,112,0,118,6,14,7,96,0,112
005AE0  3  05 0E 0B 4F  
005AE4  3  14 4F 1F 1B  
005AFC  3  00 00 02 C7          .byte 0,0,2,199,129,67,194,211,197,19,199,198,231,230,225,206,224,29,192,219,129,219,1,156,128,29,129,131,1,216,0,28
005B00  3  81 43 C2 D3  
005B04  3  C5 13 C7 C6  
005B1C  3  00 00 C0 B1          .byte 0,0,192,177,224,80,240,180,241,68,177,241,185,249,184,115,120,7,240,54,224,118,0,103,96,7,224,96,0,118,0,7
005B20  3  E0 50 F0 B4  
005B24  3  F1 44 B1 F1  
005B3C  3  2C 00 14 00          .byte 44,0,20,0,45,48,81,56,124,60,126,108,2,108,28,238,1,222,13,190,13,190,29,220,24,24,1,128,25,216,28,56
005B40  3  2D 30 51 38  
005B44  3  7C 3C 7E 6C  
005B5C  3  0B 00 05 00          .byte 11,0,5,0,11,76,20,78,31,15,31,155,0,155,135,59,128,119,131,111,131,111,7,119,6,6,0,96,6,118,7,14
005B60  3  0B 4C 14 4E  
005B64  3  1F 0F 1F 9B  
005B7C  3  02 C0 01 40          .byte 2,192,1,64,2,211,133,19,199,195,199,230,192,38,225,206,224,29,224,219,224,219,193,221,129,129,0,24,129,157,129,195
005B80  3  02 D3 85 13  
005B84  3  C7 C3 C7 E6  
005B9C  3  00 B0 00 50          .byte 0,176,0,80,192,180,225,68,241,240,177,249,176,9,184,115,120,7,248,54,248,54,112,119,96,96,0,6,96,103,224,112
005BA0  3  C0 B4 E1 44  
005BA4  3  F1 F0 B1 F9  
005BBC  3  00 2C 00 14          .byte 0,44,0,20,0,45,0,81,0,124,0,126,0,60,0,0,204,248,206,252,142,28,80,236,141,248,205,176,141,160,69,0
005BC0  3  00 2D 00 51  
005BC4  3  00 7C 00 7E  
005BDC  3  00 0B 00 05          .byte 0,11,0,5,64,11,64,20,0,31,128,31,0,15,0,0,51,62,51,191,35,135,20,59,35,126,51,108,35,104,17,64
005BE0  3  40 0B 40 14  
005BE4  3  00 1F 80 1F  
005BFC  3  C0 02 40 01          .byte 192,2,64,1,208,2,16,5,192,7,224,7,192,3,0,0,140,207,204,239,200,225,197,14,136,223,12,219,8,218,4,80
005C00  3  D0 02 10 05  
005C04  3  C0 07 E0 07  
005C1C  3  B0 00 50 00          .byte 176,0,80,0,180,0,68,1,240,1,248,1,240,0,0,0,227,51,243,59,114,56,177,67,226,55,195,54,130,54,1,20
005C20  3  B4 00 44 01  
005C24  3  F0 01 F8 01  
005C3C  3  00 58 00 28          .byte 0,88,0,40,0,90,0,162,0,248,0,252,0,8,0,112,28,0,204,248,222,60,146,222,77,238,77,124,221,120,141,176
005C40  3  00 5A 00 A2  
005C44  3  00 F8 00 FC  
005C5C  3  00 16 00 0A          .byte 0,22,0,10,128,22,128,40,0,62,0,63,0,2,0,28,7,0,51,62,55,143,164,183,147,123,19,95,55,94,35,108
005C60  3  80 16 80 28  
005C64  3  00 3E 00 3F  
005C7C  3  80 05 80 02          .byte 128,5,128,2,160,5,32,10,128,15,192,15,128,0,0,7,1,192,140,207,205,227,233,45,228,222,196,215,141,215,8,219
005C80  3  A0 05 20 0A  
005C84  3  80 0F C0 0F  
005C9C  3  60 01 A0 00          .byte 96,1,160,0,104,1,136,2,224,3,240,3,32,0,192,1,0,112,227,51,243,120,122,75,185,55,241,53,227,117,194,54
005CA0  3  68 01 88 02  
005CA4  3  E0 03 F0 03  
005CBC  3  CC E8 CD D4          .byte 204,232,205,212,17,212,73,252,204,232,228,0,194,0,129,252,192,252,225,182,192,22,128,6,192,4,224,0,112,0,0,0
005CC0  3  11 D4 49 FC  
005CC4  3  CC E8 E4 00  
005CDC  3  33 3A 33 75          .byte 51,58,51,117,4,117,18,127,51,58,57,0,48,128,32,127,48,63,184,109,176,5,160,1,48,1,56,0,28,0,0,0
005CE0  3  04 75 12 7F  
005CE4  3  33 3A 39 00  
005CFC  3  8C CE 4C DD          .byte 140,206,76,221,65,29,196,159,140,206,14,64,12,32,200,31,204,15,110,27,108,1,104,0,76,0,14,0,7,0,0,0
005D00  3  41 1D C4 9F  
005D04  3  8C CE 0E 40  
005D1C  3  A3 33 53 37          .byte 163,51,83,55,80,71,241,39,163,51,3,144,3,8,242,7,243,3,219,134,91,0,26,0,19,0,3,128,1,192,0,0
005D20  3  50 47 F1 27  
005D24  3  A3 33 03 90  
005D3C  3  00 00 6C E8          .byte 0,0,108,232,109,212,1,212,93,252,236,232,220,0,184,0,216,0,232,0,220,0,190,0,222,0,188,0,216,0,0,0
005D40  3  6D D4 01 D4  
005D44  3  5D FC EC E8  
005D5C  3  00 00 1B 3A          .byte 0,0,27,58,27,117,0,117,23,127,59,58,55,0,46,0,54,0,58,0,55,0,47,128,55,128,47,0,54,0,0,0
005D60  3  1B 75 00 75  
005D64  3  17 7F 3B 3A  
005D7C  3  00 00 86 CE          .byte 0,0,134,206,70,221,64,29,197,223,142,206,13,192,11,128,13,128,14,128,13,192,11,224,13,224,11,192,13,128,0,0
005D80  3  46 DD 40 1D  
005D84  3  C5 DF 8E CE  
005D9C  3  00 00 A1 B3          .byte 0,0,161,179,81,183,80,7,241,119,163,179,3,112,2,224,3,96,3,160,3,112,2,248,3,120,2,240,3,96,0,0
005DA0  3  51 B7 50 07  
005DA4  3  F1 77 A3 B3  
005DBC  3  10 35 02 08          .byte 16,53,2,8,8,180,60,138,60,62,54,126,118,64,119,56,123,128,125,176,61,176,27,184,3,152,24,0,29,152,3,184
005DC0  3  08 B4 3C 8A  
005DC4  3  3C 3E 36 7E  
005DDC  3  44 0D 00 82          .byte 68,13,0,130,2,45,143,34,143,15,141,159,29,144,29,206,30,224,31,108,15,108,6,238,0,230,6,0,7,102,0,238
005DE0  3  02 2D 8F 22  
005DE4  3  8F 0F 8D 9F  
005DFC  3  51 03 80 20          .byte 81,3,128,32,64,139,163,200,227,195,227,103,7,100,135,115,7,184,7,219,3,219,129,187,128,57,1,128,129,217,128,59
005E00  3  40 8B A3 C8  
005E04  3  E3 C3 E3 67  
005E1C  3  D4 40 20 08          .byte 212,64,32,8,208,34,40,242,248,240,248,217,1,217,225,220,1,238,193,246,192,246,224,110,96,14,0,96,96,118,224,14
005E20  3  D0 22 28 F2  
005E24  3  F8 F0 F8 D9  
005E3C  3  00 00 0E 34          .byte 0,0,14,52,28,8,60,180,124,138,118,62,118,126,55,56,27,128,3,184,25,152,29,128,3,152,0,56,1,128,3,128
005E40  3  1C 08 3C B4  
005E44  3  7C 8A 76 3E  
005E5C  3  00 00 03 8D          .byte 0,0,3,141,7,2,15,45,159,34,157,143,157,159,13,206,6,224,0,238,6,102,7,96,0,230,0,14,0,96,0,224
005E60  3  07 02 0F 2D  
005E64  3  9F 22 9D 8F  
005E7C  3  00 00 40 E3          .byte 0,0,64,227,129,192,67,203,167,200,231,99,231,103,131,115,1,184,128,59,129,153,1,216,128,57,128,3,0,24,0,56
005E80  3  81 C0 43 CB  
005E84  3  A7 C8 E7 63  
005E9C  3  00 00 D0 38          .byte 0,0,208,56,32,112,208,242,41,242,249,216,249,217,224,220,0,110,224,14,96,102,0,118,96,14,224,0,0,6,0,14
005EA0  3  20 70 D0 F2  
005EA4  3  29 F2 F9 D8  
005EBC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005EC0  3  00 00 00 00  
005EC4  3  00 00 00 00  
005EDC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005EE0  3  00 00 00 00  
005EE4  3  00 00 00 00  
005EFC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005F00  3  00 00 00 00  
005F04  3  00 00 00 00  
005F1C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005F20  3  00 00 00 00  
005F24  3  00 00 00 00  
005F3C  3  00 00 00 00          .byte 0,0,0,0,0,0,3,192,7,224,7,224,3,192,1,128,3,192,3,192,7,224,7,224,0,0,0,0,0,0,0,0
005F40  3  00 00 03 C0  
005F44  3  07 E0 07 E0  
005F5C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,240,1,248,1,248,0,240,0,96,0,240,0,240,1,248,1,248,0,0,0,0,0,0,0,0
005F60  3  00 00 00 F0  
005F64  3  01 F8 01 F8  
005F7C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,60,0,126,0,126,0,60,0,24,0,60,0,60,0,126,0,126,0,0,0,0,0,0,0,0
005F80  3  00 00 00 3C  
005F84  3  00 7E 00 7E  
005F9C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,15,128,31,128,31,0,15,0,6,0,15,0,15,128,31,128,31,0,0,0,0,0,0,0,0
005FA0  3  00 00 00 0F  
005FA4  3  80 1F 80 1F  
005FBC  3  00 00 00 00          .byte 0,0,0,0,0,0,54,0,109,0,109,0,127,0,54,0,0,0,14,14,223,31,223,255,23,119,10,170,221,221,207,255
005FC0  3  00 00 36 00  
005FC4  3  6D 00 6D 00  
005FDC  3  00 00 00 00          .byte 0,0,0,0,0,0,13,128,27,64,27,64,31,192,13,128,0,0,131,131,247,199,247,255,197,221,130,170,119,119,243,255
005FE0  3  00 00 0D 80  
005FE4  3  1B 40 1B 40  
005FFC  3  00 00 00 00          .byte 0,0,0,0,0,0,3,96,6,208,6,208,7,240,3,96,0,0,224,224,253,241,253,255,113,119,160,170,221,221,252,255
006000  3  00 00 03 60  
006004  3  06 D0 06 D0  
00601C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,216,1,180,1,180,1,252,0,216,0,0,56,56,127,124,255,127,220,93,168,42,119,119,255,63
006020  3  00 00 00 D8  
006024  3  01 B4 01 B4  
00603C  3  00 1C 00 7E          .byte 0,28,0,126,0,242,108,240,218,120,218,96,254,192,108,224,1,128,15,0,30,0,216,0,192,2,4,70,222,238,207,252
006040  3  00 F2 6C F0  
006044  3  DA 78 DA 60  
00605C  3  00 07 80 1F          .byte 0,7,128,31,128,60,27,60,54,158,54,152,63,176,27,56,0,96,3,192,7,128,54,0,176,0,129,17,183,187,51,255
006060  3  80 3C 1B 3C  
006064  3  36 9E 36 98  
00607C  3  C0 01 E0 07          .byte 192,1,224,7,32,15,6,207,141,167,13,166,15,236,6,206,0,24,0,240,1,224,13,128,44,0,96,68,237,238,204,255
006080  3  20 0F 06 CF  
006084  3  8D A7 0D A6  
00609C  3  70 00 F8 01          .byte 112,0,248,1,200,3,193,179,227,105,131,105,3,251,129,179,0,6,0,60,0,120,3,96,11,0,24,17,187,123,243,63
0060A0  3  C8 03 C1 B3  
0060A4  3  E3 69 83 69  
0060BC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,108,0,182,0,182,0,254,0,108,0,0,112,112,248,251,255,251,238,232,85,80,187,187,255,243
0060C0  3  00 00 00 6C  
0060C4  3  00 B6 00 B6  
0060DC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,27,128,45,128,45,128,63,0,27,0,0,28,28,254,62,255,254,59,186,21,84,238,238,255,252
0060E0  3  00 00 00 1B  
0060E4  3  80 2D 80 2D  
0060FC  3  00 00 00 00          .byte 0,0,0,0,0,0,192,6,96,11,96,11,224,15,192,6,0,0,7,7,191,143,191,255,142,238,5,85,187,187,63,255
006100  3  00 00 C0 06  
006104  3  60 0B 60 0B  
00611C  3  00 00 00 00          .byte 0,0,0,0,0,0,176,1,216,2,216,2,248,3,176,1,0,0,193,193,239,227,239,255,163,187,65,85,238,238,207,255
006120  3  00 00 B0 01  
006124  3  D8 02 D8 02  
00613C  3  38 00 7E 00          .byte 56,0,126,0,79,0,15,54,30,91,6,91,3,127,7,54,1,128,0,240,0,120,0,27,64,3,98,32,119,123,63,243
006140  3  4F 00 0F 36  
006144  3  1E 5B 06 5B  
00615C  3  0E 00 1F 80          .byte 14,0,31,128,19,192,131,205,199,150,193,150,192,223,129,205,0,96,0,60,0,30,192,6,208,0,24,136,221,222,207,252
006160  3  13 C0 83 CD  
006164  3  C7 96 C1 96  
00617C  3  03 80 07 E0          .byte 3,128,7,224,4,240,96,243,177,229,176,101,240,55,96,115,0,24,0,15,128,7,176,1,52,0,6,34,183,119,51,255
006180  3  04 F0 60 F3  
006184  3  B1 E5 B0 65  
00619C  3  00 E0 01 F8          .byte 0,224,1,248,1,60,216,60,108,121,108,25,252,13,216,28,0,6,192,3,224,1,108,0,13,0,129,136,237,221,204,255
0061A0  3  01 3C D8 3C  
0061A4  3  6C 79 6C 19  
0061BC  3  5B 00 72 00          .byte 91,0,114,0,52,0,244,0,127,118,118,235,246,235,55,118,59,8,221,126,62,62,190,12,28,0,0,0,0,0,0,0
0061C0  3  34 00 F4 00  
0061C4  3  7F 76 76 EB  
0061DC  3  16 C0 1C 80          .byte 22,192,28,128,13,0,61,0,159,221,221,186,253,186,141,221,14,194,183,95,143,143,47,131,7,0,0,0,0,0,0,0
0061E0  3  0D 00 3D 00  
0061E4  3  9F DD DD BA  
0061FC  3  05 B0 07 20          .byte 5,176,7,32,3,64,15,64,103,247,183,110,191,110,99,119,131,176,237,215,227,227,203,224,1,192,0,0,0,0,0,0
006200  3  03 40 0F 40  
006204  3  67 F7 B7 6E  
00621C  3  01 6C 01 C8          .byte 1,108,1,200,0,208,3,208,217,253,173,219,175,219,216,221,32,236,251,117,248,248,50,248,0,112,0,0,0,0,0,0
006220  3  00 D0 03 D0  
006224  3  D9 FD AD DB  
00623C  3  00 00 04 00          .byte 0,0,4,0,28,0,7,118,6,235,6,235,199,118,67,8,220,126,126,62,126,12,46,0,14,0,14,0,30,0,40,0
006240  3  1C 00 07 76  
006244  3  06 EB 06 EB  
00625C  3  00 00 01 00          .byte 0,0,1,0,7,0,129,221,193,186,193,186,177,221,16,194,183,31,159,143,31,131,11,128,3,128,3,128,7,128,10,0
006260  3  07 00 81 DD  
006264  3  C1 BA C1 BA  
00627C  3  00 00 00 40          .byte 0,0,0,64,1,192,96,119,176,110,176,110,108,119,132,48,237,199,231,227,199,224,2,224,0,224,0,224,1,224,2,128
006280  3  01 C0 60 77  
006284  3  B0 6E B0 6E  
00629C  3  00 00 00 10          .byte 0,0,0,16,0,112,216,29,172,27,172,27,219,29,33,12,251,113,249,248,49,248,0,184,0,56,0,56,0,120,0,160
0062A0  3  00 70 D8 1D  
0062A4  3  AC 1B AC 1B  
0062BC  3  00 00 00 00          .byte 0,0,0,0,0,0,247,223,54,219,54,219,246,219,198,219,198,219,247,223,0,0,0,0,0,0,0,0,0,0,0,0
0062C0  3  00 00 F7 DF  
0062C4  3  36 DB 36 DB  
0062DC  3  00 00 00 00          .byte 0,0,0,0,0,0,253,247,205,182,205,182,253,182,241,182,241,182,253,247,0,0,0,0,0,0,0,0,0,0,0,0
0062E0  3  00 00 FD F7  
0062E4  3  CD B6 CD B6  
0062FC  3  00 00 00 00          .byte 0,0,0,0,0,0,255,125,179,109,179,109,191,109,188,109,188,109,255,125,0,0,0,0,0,0,0,0,0,0,0,0
006300  3  00 00 FF 7D  
006304  3  B3 6D B3 6D  
00631C  3  00 00 00 00          .byte 0,0,0,0,0,0,127,223,108,219,108,219,111,219,111,27,111,27,127,223,0,0,0,0,0,0,0,0,0,0,0,0
006320  3  00 00 7F DF  
006324  3  6C DB 6C DB  
00633C  3  02 00 00 00          .byte 2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,7,0,15,128,13,128
006340  3  02 00 00 00  
006344  3  02 00 00 00  
00635C  3  00 80 00 00          .byte 0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,0,1,192,3,224,3,96
006360  3  00 80 00 00  
006364  3  00 80 00 00  
00637C  3  00 20 00 00          .byte 0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,0,0,112,0,248,0,216
006380  3  00 20 00 00  
006384  3  00 20 00 00  
00639C  3  00 08 00 00          .byte 0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,28,0,62,0,54
0063A0  3  00 08 00 00  
0063A4  3  00 08 00 00  
0063BC  3  00 00 06 80          .byte 0,0,6,128,149,96,150,240,96,96,49,0,222,48,192,48,9,0,15,0,127,128,127,128,63,0,206,0,224,0,7,0
0063C0  3  95 60 96 F0  
0063C4  3  60 60 31 00  
0063DC  3  00 00 01 A0          .byte 0,0,1,160,37,88,37,188,24,24,12,64,55,140,48,12,2,64,3,192,31,224,31,224,15,192,51,128,56,0,1,192
0063E0  3  25 58 25 BC  
0063E4  3  18 18 0C 40  
0063FC  3  00 00 00 68          .byte 0,0,0,104,9,86,9,111,6,6,3,16,13,227,12,3,0,144,0,240,7,248,7,248,3,240,12,224,14,0,0,112
006400  3  09 56 09 6F  
006404  3  06 06 03 10  
00641C  3  00 00 00 1A          .byte 0,0,0,26,130,85,194,91,129,129,0,196,195,120,195,0,0,36,0,60,1,254,1,254,0,252,3,56,3,128,0,28
006420  3  82 55 C2 5B  
006424  3  81 81 00 C4  
00643C  3  00 00 03 40          .byte 0,0,3,64,74,176,75,120,48,48,24,128,15,54,0,54,0,0,24,80,31,224,31,192,15,128,0,64,12,224,14,0
006440  3  4A B0 4B 78  
006444  3  30 30 18 80  
00645C  3  00 00 00 D0          .byte 0,0,0,208,18,172,18,222,12,12,6,32,131,205,128,13,0,0,6,20,7,248,7,240,3,224,0,16,3,56,3,128
006460  3  12 AC 12 DE  
006464  3  0C 0C 06 20  
00647C  3  00 00 00 34          .byte 0,0,0,52,4,171,132,183,3,3,1,136,96,243,96,3,0,0,1,133,1,254,1,252,0,248,0,4,0,206,0,224
006480  3  04 AB 84 B7  
006484  3  03 03 01 88  
00649C  3  00 00 00 0D          .byte 0,0,0,13,193,42,225,45,192,192,0,98,216,60,216,0,0,0,64,97,128,127,0,127,0,62,0,1,128,51,0,56
0064A0  3  C1 2A E1 2D  
0064A4  3  C0 C0 00 62  
0064BC  3  00 00 03 E0          .byte 0,0,3,224,7,240,6,48,6,48,7,240,3,224,0,0,0,128,0,128,0,128,0,128,0,128,0,184,0,176,0,184
0064C0  3  07 F0 06 30  
0064C4  3  06 30 07 F0  
0064DC  3  00 00 00 F8          .byte 0,0,0,248,1,252,1,140,1,140,1,252,0,248,0,0,0,32,0,32,0,32,0,32,0,32,0,46,0,44,0,46
0064E0  3  01 FC 01 8C  
0064E4  3  01 8C 01 FC  
0064FC  3  00 00 00 3E          .byte 0,0,0,62,0,127,0,99,0,99,0,127,0,62,0,0,0,8,0,8,0,8,0,8,0,8,128,11,0,11,128,11
006500  3  00 7F 00 63  
006504  3  00 63 00 7F  
00651C  3  00 00 80 0F          .byte 0,0,128,15,192,31,192,24,192,24,192,31,128,15,0,0,0,2,0,2,0,2,0,2,0,2,224,2,192,2,224,2
006520  3  C0 1F C0 18  
006524  3  C0 18 C0 1F  
00653C  3  00 00 01 C0          .byte 0,0,1,192,3,224,3,96,3,96,3,224,1,192,0,0,0,128,0,128,0,128,0,128,0,128,0,160,0,128,0,160
006540  3  03 E0 03 60  
006544  3  03 60 03 E0  
00655C  3  00 00 00 70          .byte 0,0,0,112,0,248,0,216,0,216,0,248,0,112,0,0,0,32,0,32,0,32,0,32,0,32,0,40,0,32,0,40
006560  3  00 F8 00 D8  
006564  3  00 D8 00 F8  
00657C  3  00 00 00 1C          .byte 0,0,0,28,0,62,0,54,0,54,0,62,0,28,0,0,0,8,0,8,0,8,0,8,0,8,0,10,0,8,0,10
006580  3  00 3E 00 36  
006584  3  00 36 00 3E  
00659C  3  00 00 00 07          .byte 0,0,0,7,128,15,128,13,128,13,128,15,0,7,0,0,0,2,0,2,0,2,0,2,0,2,128,2,0,2,128,2
0065A0  3  80 0F 80 0D  
0065A4  3  80 0D 80 0F  
0065BC  3  00 00 00 80          .byte 0,0,0,128,0,128,0,128,0,128,0,128,0,128,0,0,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128
0065C0  3  00 80 00 80  
0065C4  3  00 80 00 80  
0065DC  3  00 00 00 20          .byte 0,0,0,32,0,32,0,32,0,32,0,32,0,32,0,0,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32
0065E0  3  00 20 00 20  
0065E4  3  00 20 00 20  
0065FC  3  00 00 00 08          .byte 0,0,0,8,0,8,0,8,0,8,0,8,0,8,0,0,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,8
006600  3  00 08 00 08  
006604  3  00 08 00 08  
00661C  3  00 00 00 02          .byte 0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2
006620  3  00 02 00 02  
006624  3  00 02 00 02  
00663C  3  00 00 03 80          .byte 0,0,3,128,7,192,6,192,6,192,7,192,3,128,0,0,1,0,1,0,1,0,1,0,1,0,5,0,1,0,5,0
006640  3  07 C0 06 C0  
006644  3  06 C0 07 C0  
00665C  3  00 00 00 E0          .byte 0,0,0,224,1,240,1,176,1,176,1,240,0,224,0,0,0,64,0,64,0,64,0,64,0,64,1,64,0,64,1,64
006660  3  01 F0 01 B0  
006664  3  01 B0 01 F0  
00667C  3  00 00 00 38          .byte 0,0,0,56,0,124,0,108,0,108,0,124,0,56,0,0,0,16,0,16,0,16,0,16,0,16,0,80,0,16,0,80
006680  3  00 7C 00 6C  
006684  3  00 6C 00 7C  
00669C  3  00 00 00 0E          .byte 0,0,0,14,0,31,0,27,0,27,0,31,0,14,0,0,0,4,0,4,0,4,0,4,0,4,0,20,0,4,0,20
0066A0  3  00 1F 00 1B  
0066A4  3  00 1B 00 1F  
0066BC  3  00 00 FF FF          .byte 0,0,255,255,128,1,170,171,191,255,184,30,167,238,223,54,223,184,191,247,128,5,163,133,168,7,32,8,16,16,15,224
0066C0  3  80 01 AA AB  
0066C4  3  BF FF B8 1E  
0066DC  3  00 00 FF FF          .byte 0,0,255,255,96,0,234,170,239,255,174,7,169,251,183,205,55,238,239,253,96,1,104,225,234,1,8,2,4,4,3,248
0066E0  3  60 00 EA AA  
0066E4  3  EF FF AE 07  
0066FC  3  00 00 FF FF          .byte 0,0,255,255,24,0,186,170,251,255,235,129,234,126,109,243,141,251,123,255,88,0,90,56,122,128,130,0,1,1,0,254
006700  3  18 00 BA AA  
006704  3  FB FF EB 81  
00671C  3  00 00 FF FF          .byte 0,0,255,255,6,0,174,170,254,255,122,224,186,159,219,124,227,126,222,255,22,0,22,142,30,160,32,128,64,64,128,63
006720  3  06 00 AE AA  
006724  3  FE FF 7A E0  
00673C  3  FF FF 80 01          .byte 255,255,128,1,170,171,191,255,184,62,167,206,223,54,223,182,191,240,128,7,163,133,163,133,160,7,32,72,16,16,15,224
006740  3  AA AB BF FF  
006744  3  B8 3E A7 CE  
00675C  3  FF FF 60 00          .byte 255,255,96,0,234,170,239,255,174,15,169,243,183,205,183,237,47,252,224,1,104,225,104,225,232,1,8,18,4,4,3,248
006760  3  EA AA EF FF  
006764  3  AE 0F A9 F3  
00677C  3  FF FF 18 00          .byte 255,255,24,0,186,170,251,255,235,131,234,124,109,243,109,251,11,255,120,0,90,56,90,56,122,0,130,4,1,1,0,254
006780  3  BA AA FB FF  
006784  3  EB 83 EA 7C  
00679C  3  FF FF 06 00          .byte 255,255,6,0,174,170,254,255,250,224,58,159,219,124,219,126,194,255,30,0,22,142,22,142,30,128,32,129,64,64,128,63
0067A0  3  AE AA FE FF  
0067A4  3  FA E0 3A 9F  
0067BC  3  FF FF 80 01          .byte 255,255,128,1,170,171,188,63,179,222,175,38,223,154,223,208,191,247,128,5,163,149,35,151,32,16,16,32,15,192,0,0
0067C0  3  AA AB BC 3F  
0067C4  3  B3 DE AF 26  
0067DC  3  FF FF 60 00          .byte 255,255,96,0,234,170,239,15,172,247,171,201,183,230,55,244,239,253,96,1,104,229,200,229,8,4,4,8,3,240,0,0
0067E0  3  EA AA EF 0F  
0067E4  3  AC F7 AB C9  
0067FC  3  FF FF 18 00          .byte 255,255,24,0,186,170,251,195,235,61,106,242,173,249,13,253,123,255,88,0,90,57,114,57,2,1,1,2,0,252,0,0
006800  3  BA AA FB C3  
006804  3  EB 3D 6A F2  
00681C  3  FF FF 06 00          .byte 255,255,6,0,174,170,254,240,122,207,154,188,107,126,67,127,222,255,22,0,86,142,92,142,64,128,128,64,0,63,0,0
006820  3  AE AA FE F0  
006824  3  7A CF 9A BC  
00683C  3  07 FE 38 00          .byte 7,254,56,0,66,192,77,82,158,210,140,12,129,24,128,240,128,0,126,30,125,238,27,246,232,6,234,22,2,80,1,224
006840  3  42 C0 4D 52  
006844  3  9E D2 8C 0C  
00685C  3  81 FF 0E 00          .byte 129,255,14,0,16,176,147,84,167,180,35,3,32,70,32,60,32,0,159,135,159,123,134,253,186,1,186,133,0,148,0,120
006860  3  10 B0 93 54  
006864  3  A7 B4 23 03  
00687C  3  E0 7F 03 80          .byte 224,127,3,128,4,44,36,213,41,237,200,192,136,17,8,15,8,0,231,225,231,222,97,191,110,128,110,161,0,37,0,30
006880  3  04 2C 24 D5  
006884  3  29 ED C8 C0  
00689C  3  F8 1F 00 E0          .byte 248,31,0,224,1,11,73,53,74,123,50,48,98,4,194,3,2,0,121,248,185,247,216,111,27,160,91,168,64,9,128,7
0068A0  3  01 0B 49 35  
0068A4  3  4A 7B 32 30  
0068BC  3  3C 3E 42 C0          .byte 60,62,66,192,77,82,158,210,140,12,129,24,128,240,128,0,125,238,123,246,24,6,234,54,234,22,1,224,0,0,0,0
0068C0  3  4D 52 9E D2  
0068C4  3  8C 0C 81 18  
0068DC  3  8F 0F 10 B0          .byte 143,15,16,176,147,84,167,180,35,3,32,70,32,60,32,0,159,123,158,253,134,1,186,141,186,133,0,120,0,0,0,0
0068E0  3  93 54 A7 B4  
0068E4  3  23 03 20 46  
0068FC  3  E3 C3 04 2C          .byte 227,195,4,44,36,213,41,237,200,192,136,17,8,15,8,0,231,222,103,191,97,128,110,163,110,161,0,30,0,0,0,0
006900  3  24 D5 29 ED  
006904  3  C8 C0 88 11  
00691C  3  F8 F0 01 0B          .byte 248,240,1,11,73,53,74,123,50,48,98,4,194,3,2,0,185,247,217,239,24,96,219,168,91,168,128,7,0,0,0,0
006920  3  49 35 4A 7B  
006924  3  32 30 62 04  
00693C  3  07 FE 38 00          .byte 7,254,56,0,66,192,77,82,158,210,140,12,129,24,128,240,126,30,125,238,27,246,232,6,235,22,2,16,1,224,0,0
006940  3  42 C0 4D 52  
006944  3  9E D2 8C 0C  
00695C  3  81 FF 0E 00          .byte 129,255,14,0,16,176,147,84,167,180,35,3,32,70,32,60,159,135,159,123,134,253,186,1,186,197,0,132,0,120,0,0
006960  3  10 B0 93 54  
006964  3  A7 B4 23 03  
00697C  3  E0 7F 03 80          .byte 224,127,3,128,4,44,36,213,41,237,200,192,136,17,8,15,231,225,231,222,97,191,110,128,110,177,0,33,0,30,0,0
006980  3  04 2C 24 D5  
006984  3  29 ED C8 C0  
00699C  3  F8 1F 00 E0          .byte 248,31,0,224,1,11,73,53,74,123,50,48,98,4,194,3,121,248,185,247,216,111,27,160,91,172,64,8,128,7,0,0
0069A0  3  01 0B 49 35  
0069A4  3  4A 7B 32 30  
0069BC  3  00 00 FF FF          .byte 0,0,255,255,128,0,170,171,191,255,176,31,207,231,191,59,127,187,127,253,0,3,67,139,72,11,64,8,48,48,15,224
0069C0  3  80 00 AA AB  
0069C4  3  BF FF B0 1F  
0069DC  3  00 00 FF FF          .byte 0,0,255,255,32,0,234,170,239,255,236,7,243,249,239,206,223,238,95,255,192,0,208,226,210,2,16,2,12,12,3,248
0069E0  3  20 00 EA AA  
0069E4  3  EF FF EC 07  
0069FC  3  00 00 FF FF          .byte 0,0,255,255,8,0,186,170,251,255,251,1,124,254,187,243,183,251,215,255,48,0,180,56,180,128,132,0,3,3,0,254
006A00  3  08 00 BA AA  
006A04  3  FB FF FB 01  
006A1C  3  00 00 FF FF          .byte 0,0,255,255,2,0,174,170,254,255,126,192,159,63,238,252,237,254,245,255,12,0,45,14,45,32,33,0,192,192,128,63
006A20  3  02 00 AE AA  
006A24  3  FE FF 7E C0  
006A3C  3  FF FF 80 00          .byte 255,255,128,0,170,171,191,255,176,63,207,207,191,55,191,183,127,251,0,3,67,139,67,139,64,11,64,72,32,16,31,224
006A40  3  AA AB BF FF  
006A44  3  B0 3F CF CF  
006A5C  3  FF FF 20 00          .byte 255,255,32,0,234,170,239,255,236,15,243,243,239,205,239,237,223,254,192,0,208,226,208,226,208,2,16,18,8,4,7,248
006A60  3  EA AA EF FF  
006A64  3  EC 0F F3 F3  
006A7C  3  FF FF 08 00          .byte 255,255,8,0,186,170,251,255,251,3,252,252,123,243,123,251,183,255,48,0,180,56,180,56,180,0,132,4,2,1,1,254
006A80  3  BA AA FB FF  
006A84  3  FB 03 FC FC  
006A9C  3  FF FF 02 00          .byte 255,255,2,0,174,170,254,255,254,192,63,63,222,252,222,254,237,255,12,0,45,14,45,14,45,0,33,1,64,128,128,127
006AA0  3  AE AA FE FF  
006AA4  3  FE C0 3F 3F  
006ABC  3  FF FF 80 00          .byte 255,255,128,0,170,171,184,63,167,223,223,39,191,155,191,219,127,253,0,3,67,139,64,8,48,48,15,192,0,0,0,0
006AC0  3  AA AB B8 3F  
006AC4  3  A7 DF DF 27  
006ADC  3  FF FF 20 00          .byte 255,255,32,0,234,170,238,15,233,247,247,201,239,230,239,246,95,255,192,0,208,226,16,2,12,12,3,240,0,0,0,0
006AE0  3  EA AA EE 0F  
006AE4  3  E9 F7 F7 C9  
006AFC  3  FF FF 08 00          .byte 255,255,8,0,186,170,251,131,250,125,125,242,187,249,187,253,215,255,48,0,180,56,132,0,3,3,0,252,0,0,0,0
006B00  3  BA AA FB 83  
006B04  3  FA 7D 7D F2  
006B1C  3  FF FF 02 00          .byte 255,255,2,0,174,170,254,224,126,159,159,124,110,254,110,255,245,255,12,0,45,14,33,0,192,192,0,63,0,0,0,0
006B20  3  AE AA FE E0  
006B24  3  7E 9F 9F 7C  
006B3C  3  00 00 00 00          .byte 0,0,0,0,1,192,3,224,59,246,127,255,127,239,59,239,1,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006B40  3  01 C0 03 E0  
006B44  3  3B F6 7F FF  
006B5C  3  00 00 00 00          .byte 0,0,0,0,0,112,0,248,142,253,223,255,223,251,206,251,128,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006B60  3  00 70 00 F8  
006B64  3  8E FD DF FF  
006B7C  3  00 00 00 00          .byte 0,0,0,0,0,28,0,62,99,191,247,255,247,254,243,190,96,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006B80  3  00 1C 00 3E  
006B84  3  63 BF F7 FF  
006B9C  3  00 00 00 00          .byte 0,0,0,0,0,7,128,15,216,239,253,255,189,255,188,239,24,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006BA0  3  00 07 80 0F  
006BA4  3  D8 EF FD FF  
006BBC  3  3F F0 7F F8          .byte 63,240,127,248,255,204,255,196,255,230,127,126,62,63,56,15,126,63,252,159,252,158,255,254,127,254,63,252,0,0,0,0
006BC0  3  FF CC FF C4  
006BC4  3  FF E6 7F 7E  
006BDC  3  0F FC 1F FE          .byte 15,252,31,254,63,243,63,241,191,249,159,223,207,143,206,3,223,143,255,39,191,39,191,255,159,255,15,255,0,0,0,0
006BE0  3  3F F3 3F F1  
006BE4  3  BF F9 9F DF  
006BFC  3  03 FF 87 FF          .byte 3,255,135,255,207,252,79,252,111,254,231,247,243,227,243,128,247,227,255,201,239,201,239,255,231,255,195,255,0,0,0,0
006C00  3  CF FC 4F FC  
006C04  3  6F FE E7 F7  
006C1C  3  C0 FF E1 FF          .byte 192,255,225,255,51,255,19,255,155,255,249,253,252,248,60,224,253,248,127,242,123,242,251,255,249,255,240,255,0,0,0,0
006C20  3  33 FF 13 FF  
006C24  3  9B FF F9 FD  
006C3C  3  00 00 3F E0          .byte 0,0,63,224,127,240,255,152,255,140,255,204,127,254,63,126,60,30,62,62,124,158,253,222,255,254,255,254,127,252,63,248
006C40  3  7F F0 FF 98  
006C44  3  FF 8C FF CC  
006C5C  3  00 00 0F F8          .byte 0,0,15,248,31,252,63,230,63,227,63,243,159,255,143,223,143,7,143,143,159,39,191,119,191,255,191,255,31,255,15,254
006C60  3  1F FC 3F E6  
006C64  3  3F E3 3F F3  
006C7C  3  00 00 03 FE          .byte 0,0,3,254,7,255,143,249,207,248,207,252,231,255,227,247,227,193,227,227,231,201,239,221,239,255,239,255,199,255,131,255
006C80  3  07 FF 8F F9  
006C84  3  CF F8 CF FC  
006C9C  3  00 00 80 FF          .byte 0,0,128,255,193,255,99,254,51,254,51,255,249,255,248,253,120,240,248,248,121,242,123,247,251,255,251,255,241,255,224,255
006CA0  3  C1 FF 63 FE  
006CA4  3  33 FE 33 FF  
006CBC  3  78 70 CC F8          .byte 120,112,204,248,196,248,228,248,252,240,253,192,126,0,126,0,126,224,126,112,127,120,127,120,255,124,255,124,126,60,60,0
006CC0  3  C4 F8 E4 F8  
006CC4  3  FC F0 FD C0  
006CDC  3  1E 1C 33 3E          .byte 30,28,51,62,49,62,57,62,63,60,63,112,31,128,31,128,31,184,31,156,31,222,31,222,63,223,63,223,31,143,15,0
006CE0  3  31 3E 39 3E  
006CE4  3  3F 3C 3F 70  
006CFC  3  07 87 8C CF          .byte 7,135,140,207,140,79,142,79,15,207,15,220,7,224,7,224,7,238,7,231,135,247,135,247,207,247,207,247,199,227,3,192
006D00  3  8C 4F 8E 4F  
006D04  3  0F CF 0F DC  
006D1C  3  C1 E1 E3 33          .byte 193,225,227,51,227,19,227,147,195,243,3,247,1,248,1,248,129,251,193,249,225,253,225,253,243,253,243,253,241,248,0,240
006D20  3  E3 13 E3 93  
006D24  3  C3 F3 03 F7  
006D3C  3  00 00 78 70          .byte 0,0,120,112,204,248,196,248,228,248,252,240,253,192,126,0,126,0,126,224,255,120,255,124,127,124,126,60,60,0,0,0
006D40  3  CC F8 C4 F8  
006D44  3  E4 F8 FC F0  
006D5C  3  00 00 1E 1C          .byte 0,0,30,28,51,62,49,62,57,62,63,60,63,112,31,128,31,128,31,184,63,222,63,223,31,223,31,143,15,0,0,0
006D60  3  33 3E 31 3E  
006D64  3  39 3E 3F 3C  
006D7C  3  00 00 07 87          .byte 0,0,7,135,140,207,140,79,142,79,15,207,15,220,7,224,7,224,7,238,143,247,207,247,199,247,199,227,3,192,0,0
006D80  3  8C CF 8C 4F  
006D84  3  8E 4F 0F CF  
006D9C  3  00 00 C1 E1          .byte 0,0,193,225,227,51,227,19,227,147,195,243,3,247,1,248,1,248,129,251,227,253,243,253,241,253,241,248,0,240,0,0
006DA0  3  E3 33 E3 13  
006DA4  3  E3 93 C3 F3  
006DBC  3  0F C0 3F FC          .byte 15,192,63,252,127,206,127,198,127,230,59,252,1,216,1,224,56,240,124,248,204,124,196,124,230,252,127,248,63,240,3,192
006DC0  3  7F CE 7F C6  
006DC4  3  7F E6 3B FC  
006DDC  3  03 F0 0F FF          .byte 3,240,15,255,159,243,159,241,159,249,14,255,0,118,0,120,14,60,31,62,51,31,49,31,57,191,31,254,15,252,0,240
006DE0  3  9F F3 9F F1  
006DE4  3  9F F9 0E FF  
006DFC  3  00 FC C3 FF          .byte 0,252,195,255,231,252,103,252,103,254,195,191,128,29,0,30,3,143,135,207,204,199,204,71,206,111,135,255,3,255,0,60
006E00  3  E7 FC 67 FC  
006E04  3  67 FE C3 BF  
006E1C  3  00 3F F0 FF          .byte 0,63,240,255,57,255,25,255,153,255,240,239,96,7,128,7,192,227,225,243,243,49,243,17,243,155,225,255,192,255,0,15
006E20  3  39 FF 19 FF  
006E24  3  99 FF F0 EF  
006E3C  3  01 F8 1F CE          .byte 1,248,31,206,63,198,127,230,127,252,127,216,59,192,1,224,1,240,1,248,56,252,124,124,78,124,71,252,103,248,63,240
006E40  3  3F C6 7F E6  
006E44  3  7F FC 7F D8  
006E5C  3  00 7E 87 F3          .byte 0,126,135,243,143,241,159,249,31,255,31,246,14,240,0,120,0,124,0,126,14,63,31,31,19,159,17,255,25,254,15,252
006E60  3  8F F1 9F F9  
006E64  3  1F FF 1F F6  
006E7C  3  80 1F E1 FC          .byte 128,31,225,252,99,252,103,254,199,255,135,253,3,188,0,30,0,31,128,31,195,143,199,199,196,231,196,127,134,127,3,255
006E80  3  63 FC 67 FE  
006E84  3  C7 FF 87 FD  
006E9C  3  E0 07 38 7F          .byte 224,7,56,127,24,255,153,255,241,255,97,255,0,239,128,7,192,7,224,7,240,227,241,241,241,57,241,31,225,159,192,255
006EA0  3  18 FF 99 FF  
006EA4  3  F1 FF 61 FF  
006EBC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,3,192,6,32,7,240,3,228,0,24,3,250,7,205,7,205,7,157,3,253,3,250,0,228
006EC0  3  00 00 00 00  
006EC4  3  03 C0 06 20  
006EDC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,240,1,136,1,252,0,249,0,6,128,254,65,243,65,243,65,231,64,255,128,254,0,57
006EE0  3  00 00 00 00  
006EE4  3  00 F0 01 88  
006EFC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,60,0,98,0,127,64,62,128,1,160,63,208,124,208,124,208,121,208,63,160,63,64,14
006F00  3  00 00 00 00  
006F04  3  00 3C 00 62  
006F1C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,15,128,24,192,31,144,15,96,0,232,15,52,31,52,31,116,30,244,15,232,15,144,3
006F20  3  00 00 00 00  
006F24  3  00 0F 80 18  
006F3C  3  00 00 00 30          .byte 0,0,0,48,0,112,56,64,60,0,2,112,12,56,24,24,24,128,0,128,1,128,1,128,0,0,0,0,0,0,0,0
006F40  3  00 70 38 40  
006F44  3  3C 00 02 70  
006F5C  3  00 00 00 0C          .byte 0,0,0,12,0,28,14,16,15,0,0,156,3,14,6,6,6,32,0,32,0,96,0,96,0,0,0,0,0,0,0,0
006F60  3  00 1C 0E 10  
006F64  3  0F 00 00 9C  
006F7C  3  00 00 00 03          .byte 0,0,0,3,0,7,3,132,3,192,0,39,128,195,129,129,1,136,0,8,0,24,0,24,0,0,0,0,0,0,0,0
006F80  3  00 07 03 84  
006F84  3  03 C0 00 27  
006F9C  3  00 00 C0 00          .byte 0,0,192,0,192,1,0,225,0,240,192,9,224,48,96,96,0,98,0,2,0,6,0,6,0,0,0,0,0,0,0,0
006FA0  3  C0 01 00 E1  
006FA4  3  00 F0 C0 09  
006FBC  3  00 18 00 18          .byte 0,24,0,24,96,32,96,0,8,0,0,0,0,32,8,24,48,12,49,12,0,0,1,128,1,128,0,0,0,0,0,0
006FC0  3  60 20 60 00  
006FC4  3  08 00 00 00  
006FDC  3  00 06 00 06          .byte 0,6,0,6,24,8,24,0,2,0,0,0,0,8,2,6,12,3,12,67,0,0,0,96,0,96,0,0,0,0,0,0
006FE0  3  18 08 18 00  
006FE4  3  02 00 00 00  
006FFC  3  80 01 80 01          .byte 128,1,128,1,6,2,6,0,0,128,0,0,0,2,128,129,195,0,195,16,0,0,0,24,0,24,0,0,0,0,0,0
007000  3  06 02 06 00  
007004  3  00 80 00 00  
00701C  3  60 00 60 00          .byte 96,0,96,0,129,128,1,128,0,32,0,0,128,0,96,32,48,192,48,196,0,0,0,6,0,6,0,0,0,0,0,0
007020  3  81 80 01 80  
007024  3  00 20 00 00  
00703C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007040  3  00 00 00 00  
007044  3  00 00 00 00  
00705C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007060  3  00 00 00 00  
007064  3  00 00 00 00  
00707C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007080  3  00 00 00 00  
007084  3  00 00 00 00  
00709C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0070A0  3  00 00 00 00  
0070A4  3  00 00 00 00  
0070BC  3  7B 6B 45 B4          .byte 123,107,69,180,69,180,70,72,71,188,67,243,65,227,64,1,66,20,64,135,68,15,71,255,71,255,67,255,64,255,64,7
0070C0  3  45 B4 46 48  
0070C4  3  47 BC 43 F3  
0070DC  3  DE DA 11 6D          .byte 222,218,17,109,17,109,17,146,17,239,208,252,208,120,80,0,16,133,208,33,209,3,209,255,209,255,208,255,208,63,208,1
0070E0  3  11 6D 11 92  
0070E4  3  11 EF D0 FC  
0070FC  3  B7 B6 44 5B          .byte 183,182,68,91,68,91,132,100,196,123,52,63,52,30,20,0,68,33,116,8,244,64,244,127,244,127,244,63,244,15,116,0
007100  3  44 5B 84 64  
007104  3  C4 7B 34 3F  
00711C  3  AD ED D1 16          .byte 173,237,209,22,209,22,33,25,241,30,205,15,141,7,5,0,81,8,29,2,61,16,253,31,253,31,253,15,253,3,29,0
007120  3  D1 16 21 19  
007124  3  F1 1E CD 0F  
00713C  3  D6 DE 2D A2          .byte 214,222,45,162,45,162,18,98,61,226,207,194,199,130,128,2,40,66,225,2,240,34,255,226,255,226,255,194,255,2,224,2
007140  3  2D A2 12 62  
007144  3  3D E2 CF C2  
00715C  3  B5 B7 8B 68          .byte 181,183,139,104,139,104,132,152,143,120,179,240,177,224,160,0,138,16,184,64,188,8,191,248,191,248,191,240,191,192,184,0
007160  3  8B 68 84 98  
007164  3  8F 78 B3 F0  
00717C  3  ED 6D 22 DA          .byte 237,109,34,218,34,218,33,38,35,222,44,252,44,120,40,0,34,132,46,16,47,2,47,254,47,254,47,252,47,240,46,0
007180  3  22 DA 21 26  
007184  3  23 DE 2C FC  
00719C  3  7B 5B 88 B6          .byte 123,91,136,182,136,182,136,73,136,247,11,63,11,30,10,0,8,161,11,132,139,192,139,255,139,255,11,255,11,252,11,128
0071A0  3  88 B6 88 49  
0071A4  3  88 F7 0B 3F  
0071BC  3  FF FF 00 00          .byte 255,255,0,0,142,49,159,121,189,221,191,253,158,57,159,249,255,255,248,15,183,247,191,253,159,253,135,241,184,13,191,125
0071C0  3  8E 31 9F 79  
0071C4  3  BD DD BF FD  
0071DC  3  FF FF 00 00          .byte 255,255,0,0,99,140,103,222,111,119,111,255,103,142,103,254,255,255,254,3,237,253,111,255,103,255,97,252,110,3,111,223
0071E0  3  63 8C 67 DE  
0071E4  3  6F 77 6F FF  
0071FC  3  FF FF 00 00          .byte 255,255,0,0,24,227,153,247,219,221,219,255,153,227,153,255,255,255,255,128,123,127,219,255,217,255,24,127,219,128,219,247
007200  3  18 E3 99 F7  
007204  3  DB DD DB FF  
00721C  3  FF FF 00 00          .byte 255,255,0,0,198,56,230,125,118,247,246,255,230,120,230,127,255,255,63,224,222,223,246,255,246,127,198,31,54,224,246,253
007220  3  C6 38 E6 7D  
007224  3  76 F7 F6 FF  
00723C  3  FF FF 00 00          .byte 255,255,0,0,140,17,158,57,185,205,190,61,159,249,154,41,240,15,240,7,224,7,179,229,191,61,158,253,175,241,176,13
007240  3  8C 11 9E 39  
007244  3  B9 CD BE 3D  
00725C  3  FF FF 00 00          .byte 255,255,0,0,99,4,103,142,110,115,111,143,103,254,102,138,252,3,252,1,248,1,108,249,111,207,103,191,107,252,108,3
007260  3  63 04 67 8E  
007264  3  6E 73 6F 8F  
00727C  3  FF FF 00 00          .byte 255,255,0,0,24,193,153,227,219,156,219,227,153,255,153,162,255,0,127,0,126,0,91,62,219,243,217,239,26,255,219,0
007280  3  18 C1 99 E3  
007284  3  DB 9C DB E3  
00729C  3  FF FF 00 00          .byte 255,255,0,0,70,48,230,120,54,231,246,248,230,127,166,104,63,192,31,192,31,128,150,207,246,252,246,123,198,191,54,192
0072A0  3  46 30 E6 78  
0072A4  3  36 E7 F6 F8  
0072BC  3  40 0F 40 7F          .byte 64,15,64,127,65,255,67,255,67,255,67,255,67,255,65,255,65,254,64,124,65,0,64,72,67,0,79,248,74,240,127,255
0072C0  3  41 FF 43 FF  
0072C4  3  43 FF 43 FF  
0072DC  3  D0 03 D0 1F          .byte 208,3,208,31,208,127,208,255,208,255,208,255,208,255,208,127,144,127,16,31,16,64,16,18,16,192,19,254,18,188,223,255
0072E0  3  D0 7F D0 FF  
0072E4  3  D0 FF D0 FF  
0072FC  3  F4 00 F4 07          .byte 244,0,244,7,244,31,244,63,244,63,244,63,244,63,244,31,228,31,196,7,4,16,132,4,4,48,132,255,4,175,247,255
007300  3  F4 1F F4 3F  
007304  3  F4 3F F4 3F  
00731C  3  3D 00 FD 01          .byte 61,0,253,1,253,7,253,15,253,15,253,15,253,15,253,7,249,7,241,1,1,4,33,1,1,12,225,63,193,43,253,255
007320  3  FD 07 FD 0F  
007324  3  FD 0F FD 0F  
00733C  3  AF F5 9E 79          .byte 175,245,158,121,161,133,191,253,191,253,191,253,170,169,149,81,128,1,128,1,128,1,128,1,128,1,128,1,0,0,255,255
007340  3  A1 85 BF FD  
007344  3  BF FD BF FD  
00735C  3  6B FD 67 9E          .byte 107,253,103,158,104,97,111,255,111,255,111,255,106,170,101,84,96,0,96,0,96,0,96,0,96,0,96,0,0,0,255,255
007360  3  68 61 6F FF  
007364  3  6F FF 6F FF  
00737C  3  5A FF 99 E7          .byte 90,255,153,231,90,24,219,255,219,255,219,255,154,170,25,85,24,0,24,0,24,0,24,0,24,0,24,0,0,0,255,255
007380  3  5A 18 DB FF  
007384  3  DB FF DB FF  
00739C  3  D6 BF E6 79          .byte 214,191,230,121,22,134,246,255,246,255,246,255,166,170,70,85,6,0,6,0,6,0,6,0,6,0,6,0,0,0,255,255
0073A0  3  16 86 F6 FF  
0073A4  3  F6 FF F6 FF  
0073BC  3  F0 02 FE 02          .byte 240,2,254,2,255,130,255,194,255,194,255,194,255,194,255,130,127,130,62,2,0,130,18,2,0,194,31,242,15,82,255,254
0073C0  3  FF 82 FF C2  
0073C4  3  FF C2 FF C2  
0073DC  3  BC 00 BF 80          .byte 188,0,191,128,191,224,191,240,191,240,191,240,191,240,191,224,159,224,143,128,128,32,132,128,128,48,135,252,131,212,191,255
0073E0  3  BF E0 BF F0  
0073E4  3  BF F0 BF F0  
0073FC  3  2F 00 2F E0          .byte 47,0,47,224,47,248,47,252,47,252,47,252,47,252,47,248,39,248,35,224,32,8,33,32,32,12,33,255,32,245,239,255
007400  3  2F F8 2F FC  
007404  3  2F FC 2F FC  
00741C  3  0B C0 0B F8          .byte 11,192,11,248,11,254,11,255,11,255,11,255,11,255,11,254,9,254,8,248,8,2,8,72,8,3,200,127,72,61,251,255
007420  3  0B FE 0B FF  
007424  3  0B FF 0B FF  
00743C  3  00 03 06 83          .byte 0,3,6,131,149,96,150,240,96,102,49,6,30,0,0,0,9,0,15,0,15,128,127,128,127,0,62,224,0,0,28,0
007440  3  95 60 96 F0  
007444  3  60 66 31 06  
00745C  3  C0 00 C1 A0          .byte 192,0,193,160,37,88,37,188,152,25,140,65,7,128,0,0,2,64,3,192,3,224,31,224,31,192,15,184,0,0,7,0
007460  3  25 58 25 BC  
007464  3  98 19 8C 41  
00747C  3  30 00 30 68          .byte 48,0,48,104,9,86,9,111,102,6,99,16,1,224,0,0,0,144,0,240,0,248,7,248,7,240,3,238,0,0,1,192
007480  3  09 56 09 6F  
007484  3  66 06 63 10  
00749C  3  0C 00 0C 1A          .byte 12,0,12,26,130,85,194,91,153,129,24,196,0,120,0,0,0,36,0,60,0,62,1,254,1,252,128,251,0,0,0,112
0074A0  3  82 55 C2 5B  
0074A4  3  99 81 18 C4  
0074BC  3  00 00 03 40          .byte 0,0,3,64,74,176,75,123,48,51,24,128,15,6,0,6,0,0,0,0,17,192,63,192,63,128,31,0,0,0,14,192
0074C0  3  4A B0 4B 7B  
0074C4  3  30 33 18 80  
0074DC  3  00 00 00 D0          .byte 0,0,0,208,18,172,210,222,204,12,6,32,131,193,128,1,0,0,0,0,4,112,15,240,15,224,7,192,0,0,3,176
0074E0  3  12 AC D2 DE  
0074E4  3  CC 0C 06 20  
0074FC  3  00 00 00 34          .byte 0,0,0,52,4,171,180,183,51,3,1,136,96,240,96,0,0,0,0,0,1,28,3,252,3,248,1,240,0,0,0,236
007500  3  04 AB B4 B7  
007504  3  33 03 01 88  
00751C  3  00 00 00 0D          .byte 0,0,0,13,193,42,237,45,204,192,0,98,24,60,24,0,0,0,0,0,0,71,0,255,0,254,0,124,0,0,0,59
007520  3  C1 2A ED 2D  
007524  3  CC C0 00 62  
00753C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007540  3  00 00 00 00  
007544  3  00 00 00 00  
00755C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007560  3  00 00 00 00  
007564  3  00 00 00 00  
00757C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007580  3  00 00 00 00  
007584  3  00 00 00 00  
00759C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0075A0  3  00 00 00 00  
0075A4  3  00 00 00 00  
0075BC  3  00 00 00 00          .byte 0,0,0,0,111,190,109,182,109,182,109,182,109,182,109,182,111,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0075C0  3  6F BE 6D B6  
0075C4  3  6D B6 6D B6  
0075DC  3  00 00 00 00          .byte 0,0,0,0,155,239,155,109,155,109,155,109,155,109,155,109,155,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0075E0  3  9B EF 9B 6D  
0075E4  3  9B 6D 9B 6D  
0075FC  3  00 00 00 00          .byte 0,0,0,0,230,251,102,219,102,219,102,219,102,219,102,219,230,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007600  3  E6 FB 66 DB  
007604  3  66 DB 66 DB  
00761C  3  00 00 00 00          .byte 0,0,0,0,249,190,217,182,217,182,217,182,217,182,217,182,249,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007620  3  F9 BE D9 B6  
007624  3  D9 B6 D9 B6  
00763C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007640  3  00 00 00 00  
007644  3  00 00 00 00  
00765C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007660  3  00 00 00 00  
007664  3  00 00 00 00  
00767C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007680  3  00 00 00 00  
007684  3  00 00 00 00  
00769C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0076A0  3  00 00 00 00  
0076A4  3  00 00 00 00  
0076BC  3  00 DA 00 4E          .byte 0,218,0,78,0,44,0,47,110,254,215,110,215,111,110,236,16,220,126,187,124,124,48,125,0,56,0,0,0,0,0,0
0076C0  3  00 2C 00 2F  
0076C4  3  6E FE D7 6E  
0076DC  3  80 36 80 13          .byte 128,54,128,19,0,11,192,11,155,191,181,219,245,219,27,187,4,55,223,174,31,31,76,31,0,14,0,0,0,0,0,0
0076E0  3  00 0B C0 0B  
0076E4  3  9B BF B5 DB  
0076FC  3  A0 0D E0 04          .byte 160,13,224,4,192,2,240,2,230,239,237,118,253,118,198,238,193,13,183,235,199,199,211,7,128,3,0,0,0,0,0,0
007700  3  C0 02 F0 02  
007704  3  E6 EF ED 76  
00771C  3  68 03 38 01          .byte 104,3,56,1,176,0,188,0,249,187,187,93,191,93,177,187,112,67,237,250,241,241,244,193,224,0,0,0,0,0,0,0
007720  3  B0 00 BC 00  
007724  3  F9 BB BB 5D  
00773C  3  00 00 00 20          .byte 0,0,0,32,0,56,110,224,215,96,215,96,110,227,16,194,126,59,124,126,48,126,0,116,0,112,0,112,0,120,0,20
007740  3  00 38 6E E0  
007744  3  D7 60 D7 60  
00775C  3  00 00 00 08          .byte 0,0,0,8,0,14,27,184,53,216,53,216,219,184,132,48,223,142,159,31,140,31,0,29,0,28,0,28,0,30,0,5
007760  3  00 0E 1B B8  
007764  3  35 D8 35 D8  
00777C  3  00 00 00 02          .byte 0,0,0,2,128,3,6,238,13,118,13,118,54,238,33,12,183,227,231,199,227,7,64,7,0,7,0,7,128,7,64,1
007780  3  80 03 06 EE  
007784  3  0D 76 0D 76  
00779C  3  00 00 80 00          .byte 0,0,128,0,224,0,129,187,131,93,131,93,141,187,8,67,237,248,249,241,248,193,208,1,192,1,192,1,224,1,80,0
0077A0  3  E0 00 81 BB  
0077A4  3  83 5D 83 5D  
0077BC  3  7A EE F7 77          .byte 122,238,247,119,231,119,67,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0077C0  3  E7 77 43 A2  
0077C4  3  01 00 00 00  
0077DC  3  9E BB FD DD          .byte 158,187,253,221,249,221,144,232,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0077E0  3  F9 DD 90 E8  
0077E4  3  00 40 00 00  
0077FC  3  E7 AE 7F 77          .byte 231,174,127,119,126,119,36,58,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007800  3  7E 77 24 3A  
007804  3  00 10 00 00  
00781C  3  B9 EB DF DD          .byte 185,235,223,221,223,157,137,14,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007820  3  DF 9D 89 0E  
007824  3  00 04 00 00  
00783C  3  C0 00 F8 A5          .byte 192,0,248,165,119,187,7,154,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007840  3  77 BB 07 9A  
007844  3  03 00 00 00  
00785C  3  30 00 7E 29          .byte 48,0,126,41,221,238,129,230,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007860  3  DD EE 81 E6  
007864  3  00 C0 00 00  
00787C  3  0C 00 5F 8A          .byte 12,0,95,138,183,123,160,121,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
007880  3  B7 7B A0 79  
007884  3  00 30 00 00  
00789C  3  03 00 97 E2          .byte 3,0,151,226,237,222,104,30,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0078A0  3  ED DE 68 1E  
0078A4  3  00 0C 00 00  
0078BC  3  00 00 00 00          .byte 0,0,0,0,0,0,40,0,168,0,0,0,122,0,56,0,0,0,48,108,56,84,56,109,28,17,28,248,14,252,7,2
0078C0  3  00 00 28 00  
0078C4  3  A8 00 00 00  
0078DC  3  00 00 00 00          .byte 0,0,0,0,0,0,10,0,42,0,0,0,30,128,14,0,0,0,12,27,14,21,78,27,71,4,7,62,3,191,129,192
0078E0  3  00 00 0A 00  
0078E4  3  2A 00 00 00  
0078FC  3  00 00 00 00          .byte 0,0,0,0,0,0,2,128,10,128,0,0,7,160,3,128,0,0,195,6,67,133,211,134,17,193,129,207,192,239,32,112
007900  3  00 00 02 80  
007904  3  0A 80 00 00  
00791C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,160,2,160,0,0,1,232,0,224,0,0,176,193,80,225,180,225,68,112,224,115,240,59,8,28
007920  3  00 00 00 A0  
007924  3  02 A0 00 00  
00793C  3  00 00 00 00          .byte 0,0,0,0,0,0,5,0,21,0,0,0,15,64,7,0,0,0,3,0,3,108,3,84,7,109,7,17,6,252,2,254
007940  3  00 00 05 00  
007944  3  15 00 00 00  
00795C  3  00 00 00 00          .byte 0,0,0,0,0,0,1,64,5,64,0,0,3,208,1,192,0,0,0,192,0,219,0,213,65,219,65,196,1,191,128,191
007960  3  00 00 01 40  
007964  3  05 40 00 00  
00797C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,80,1,80,0,0,0,244,0,112,0,0,0,48,192,54,64,53,208,118,16,113,192,111,224,47
007980  3  00 00 00 50  
007984  3  01 50 00 00  
00799C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,20,0,84,0,0,0,61,0,28,0,0,0,12,176,13,80,13,180,29,68,28,240,27,248,11
0079A0  3  00 00 00 14  
0079A4  3  00 54 00 00  
0079BC  3  0A 48 02 7B          .byte 10,72,2,123,13,254,31,255,31,17,30,252,13,243,3,145,0,96,2,240,6,240,6,144,15,96,14,144,6,240,0,96
0079C0  3  0D FE 1F FF  
0079C4  3  1F 11 1E FC  
0079DC  3  02 92 C0 9E          .byte 2,146,192,158,131,127,199,255,71,196,7,191,195,124,64,228,0,24,0,188,1,188,1,164,3,216,3,164,1,188,0,24
0079E0  3  83 7F C7 FF  
0079E4  3  47 C4 07 BF  
0079FC  3  80 A4 B0 27          .byte 128,164,176,39,224,223,241,255,17,241,193,239,48,223,16,57,0,6,0,47,0,111,0,105,0,246,0,233,0,111,0,6
007A00  3  E0 DF F1 FF  
007A04  3  11 F1 C1 EF  
007A1C  3  20 29 EC 09          .byte 32,41,236,9,248,55,252,127,68,124,240,123,204,55,68,14,128,1,192,11,192,27,64,26,128,61,64,58,192,27,128,1
007A20  3  F8 37 FC 7F  
007A24  3  44 7C F0 7B  
007A3C  3  00 A0 03 E0          .byte 0,160,3,224,134,0,67,4,255,4,127,126,126,248,0,200,0,48,0,120,1,120,3,72,7,176,7,72,3,120,0,48
007A40  3  86 00 43 04  
007A44  3  FF 04 7F 7E  
007A5C  3  00 28 00 F8          .byte 0,40,0,248,33,128,16,193,63,193,159,223,31,190,0,50,0,12,0,30,0,94,0,210,1,236,1,210,0,222,0,12
007A60  3  21 80 10 C1  
007A64  3  3F C1 9F DF  
007A7C  3  00 0A 00 3E          .byte 0,10,0,62,8,96,68,48,79,240,231,247,135,239,128,12,0,3,128,7,128,23,128,52,0,123,128,116,128,55,0,3
007A80  3  08 60 44 30  
007A84  3  4F F0 E7 F7  
007A9C  3  80 02 80 0F          .byte 128,2,128,15,2,24,17,12,19,252,249,253,225,251,32,3,192,0,224,1,224,5,32,13,192,30,32,29,224,13,192,0
007AA0  3  02 18 11 0C  
007AA4  3  13 FC F9 FD  
007ABC  3  06 00 0F 60          .byte 6,0,15,96,9,112,6,240,9,96,15,96,15,64,6,0,9,48,63,184,23,124,128,252,255,252,127,184,222,64,16,80
007AC0  3  09 70 06 F0  
007AC4  3  09 60 0F 60  
007ADC  3  01 80 03 D8          .byte 1,128,3,216,2,92,1,188,2,88,3,216,3,208,1,128,2,76,15,238,5,223,32,63,63,255,31,238,55,144,4,20
007AE0  3  02 5C 01 BC  
007AE4  3  02 58 03 D8  
007AFC  3  00 60 00 F6          .byte 0,96,0,246,0,151,0,111,0,150,0,246,0,244,0,96,0,147,131,251,193,119,200,15,207,255,135,251,13,228,1,5
007B00  3  00 97 00 6F  
007B04  3  00 96 00 F6  
007B1C  3  00 18 80 3D          .byte 0,24,128,61,192,37,192,27,128,37,128,61,0,61,0,24,192,36,224,254,240,93,242,3,243,255,225,254,3,121,64,65
007B20  3  C0 25 C0 1B  
007B24  3  80 25 80 3D  
007B3C  3  0C 00 1E C0          .byte 12,0,30,192,18,224,13,224,18,192,30,128,30,0,12,0,18,0,31,126,126,255,44,254,32,255,0,2,3,192,2,128
007B40  3  12 E0 0D E0  
007B44  3  12 C0 1E 80  
007B5C  3  03 00 07 B0          .byte 3,0,7,176,4,184,3,120,4,176,7,160,7,128,3,0,4,128,135,223,223,191,139,63,200,63,128,0,0,240,0,160
007B60  3  04 B8 03 78  
007B64  3  04 B0 07 A0  
007B7C  3  00 C0 01 EC          .byte 0,192,1,236,1,46,0,222,1,44,1,232,1,224,0,192,1,32,225,247,247,239,226,207,242,15,32,0,0,60,0,40
007B80  3  01 2E 00 DE  
007B84  3  01 2C 01 E8  
007B9C  3  00 30 00 7B          .byte 0,48,0,123,128,75,128,55,0,75,0,122,0,120,0,48,0,72,248,125,253,251,248,179,252,131,8,0,0,15,0,10
007BA0  3  80 4B 80 37  
007BA4  3  00 4B 00 7A  
007BBC  3  00 00 01 E0          .byte 0,0,1,224,3,240,3,240,7,248,7,248,7,248,15,236,15,228,15,228,15,204,7,200,7,248,1,224,0,0,0,0
007BC0  3  03 F0 03 F0  
007BC4  3  07 F8 07 F8  
007BDC  3  00 00 00 78          .byte 0,0,0,120,0,252,0,252,1,254,1,254,1,254,3,251,3,249,3,249,3,243,1,242,1,254,0,120,0,0,0,0
007BE0  3  00 FC 00 FC  
007BE4  3  01 FE 01 FE  
007BFC  3  00 00 00 1E          .byte 0,0,0,30,0,63,0,63,128,127,128,127,128,127,192,254,64,254,64,254,192,252,128,124,128,127,0,30,0,0,0,0
007C00  3  00 3F 00 3F  
007C04  3  80 7F 80 7F  
007C1C  3  00 00 80 07          .byte 0,0,128,7,192,15,192,15,224,31,224,31,224,31,176,63,144,63,144,63,48,63,32,31,224,31,128,7,0,0,0,0
007C20  3  C0 0F C0 0F  
007C24  3  E0 1F E0 1F  
007C3C  3  1D E0 38 18          .byte 29,224,56,24,12,4,2,2,128,128,128,60,64,14,63,220,0,0,0,0,0,128,1,64,1,64,3,160,3,160,0,0
007C40  3  0C 04 02 02  
007C44  3  80 80 80 3C  
007C5C  3  07 78 0E 06          .byte 7,120,14,6,3,1,128,128,32,32,32,15,144,3,15,247,0,0,0,0,0,32,0,80,0,80,0,232,0,232,0,0
007C60  3  03 01 80 80  
007C64  3  20 20 20 0F  
007C7C  3  01 DE 83 81          .byte 1,222,131,129,64,192,32,32,8,8,200,3,228,0,195,253,0,0,0,0,0,8,0,20,0,20,0,58,0,58,0,0
007C80  3  40 C0 20 20  
007C84  3  08 08 C8 03  
007C9C  3  80 77 60 E0          .byte 128,119,96,224,16,48,8,8,2,2,242,0,57,0,112,255,0,0,0,0,0,2,0,5,0,5,128,14,128,14,0,0
007CA0  3  10 30 08 08  
007CA4  3  02 02 F2 00  
007CBC  3  1E 00 20 1C          .byte 30,0,32,28,64,52,64,64,0,4,93,4,120,8,49,112,1,0,0,0,1,0,2,128,2,128,7,64,7,64,0,0
007CC0  3  40 34 40 40  
007CC4  3  00 04 5D 04  
007CDC  3  07 80 08 07          .byte 7,128,8,7,16,13,16,16,0,1,23,65,30,2,12,92,0,64,0,0,0,64,0,160,0,160,1,208,1,208,0,0
007CE0  3  10 0D 10 10  
007CE4  3  00 01 17 41  
007CFC  3  01 E0 C2 01          .byte 1,224,194,1,68,3,4,4,64,0,69,208,135,128,3,23,0,16,0,0,0,16,0,40,0,40,0,116,0,116,0,0
007D00  3  44 03 04 04  
007D04  3  40 00 45 D0  
007D1C  3  00 78 70 80          .byte 0,120,112,128,209,0,1,1,16,0,17,116,33,224,192,197,0,4,0,0,0,4,0,10,0,10,0,29,0,29,0,0
007D20  3  D1 00 01 01  
007D24  3  10 00 11 74  
007D3C  3  41 B0 83 08          .byte 65,176,131,8,3,4,129,2,128,2,225,2,127,0,31,0,0,0,0,0,0,0,2,128,2,128,7,64,7,64,0,0
007D40  3  03 04 81 02  
007D44  3  80 02 E1 02  
007D5C  3  10 6C 20 C2          .byte 16,108,32,194,0,193,160,64,160,0,184,64,31,192,7,192,0,0,0,0,0,0,0,160,0,160,1,208,1,208,0,0
007D60  3  00 C1 A0 40  
007D64  3  A0 00 B8 40  
007D7C  3  04 1B 88 30          .byte 4,27,136,48,64,48,40,16,40,0,46,16,7,240,1,240,0,0,0,0,0,0,0,40,0,40,0,116,0,116,0,0
007D80  3  40 30 28 10  
007D84  3  28 00 2E 10  
007D9C  3  C1 06 22 0C          .byte 193,6,34,12,16,12,10,4,10,0,11,132,1,252,0,124,0,0,0,0,0,0,0,10,0,10,0,29,0,29,0,0
007DA0  3  10 0C 0A 04  
007DA4  3  0A 00 0B 84  
007DBC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,3,240,4,8,9,228,10,212,10,212,11,244,9,228,4,8,3,240,0,0,0,0,0,0
007DC0  3  00 00 00 00  
007DC4  3  03 F0 04 08  
007DDC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,252,1,2,2,121,2,181,2,181,2,253,2,121,1,2,0,252,0,0,0,0,0,0
007DE0  3  00 00 00 00  
007DE4  3  00 FC 01 02  
007DFC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,63,128,64,64,158,64,173,64,173,64,191,64,158,128,64,0,63,0,0,0,0,0,0
007E00  3  00 00 00 00  
007E04  3  00 3F 80 40  
007E1C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,192,15,32,16,144,39,80,43,80,43,208,47,144,39,32,16,192,15,0,0,0,0,0,0
007E20  3  00 00 00 00  
007E24  3  C0 0F 20 10  
007E3C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,224,2,208,2,208,3,240,1,224,0,0,0,0,0,0
007E40  3  00 00 00 00  
007E44  3  00 00 00 00  
007E5C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,180,0,180,0,252,0,120,0,0,0,0,0,0
007E60  3  00 00 00 00  
007E64  3  00 00 00 00  
007E7C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,45,0,45,0,63,0,30,0,0,0,0,0,0
007E80  3  00 00 00 00  
007E84  3  00 00 00 00  
007E9C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,64,11,64,11,192,15,128,7,0,0,0,0,0,0
007EA0  3  00 00 00 00  
007EA4  3  00 00 00 00  
007EBC  3  04 08 40 80          .byte 4,8,64,128,0,129,0,0,1,192,130,160,27,236,3,96,1,192,0,1,64,128,0,128,8,8,0,0,0,0,0,0
007EC0  3  00 81 00 00  
007EC4  3  01 C0 82 A0  
007EDC  3  01 02 10 20          .byte 1,2,16,32,64,32,0,0,0,112,32,168,6,251,0,216,0,112,64,0,16,32,0,32,2,2,0,0,0,0,0,0
007EE0  3  40 20 00 00  
007EE4  3  00 70 20 A8  
007EFC  3  80 40 04 08          .byte 128,64,4,8,16,8,0,0,0,28,8,42,193,190,0,54,0,28,16,0,4,8,0,8,128,128,0,0,0,0,0,0
007F00  3  10 08 00 00  
007F04  3  00 1C 08 2A  
007F1C  3  20 10 01 02          .byte 32,16,1,2,4,2,0,0,0,7,130,10,176,111,128,13,0,7,4,0,1,2,0,2,32,32,0,0,0,0,0,0
007F20  3  04 02 00 00  
007F24  3  00 07 82 0A  
007F3C  3  00 00 00 00          .byte 0,0,0,0,8,8,5,208,3,224,6,176,6,176,7,240,3,96,5,208,8,8,0,0,0,0,0,0,0,0,0,0
007F40  3  08 08 05 D0  
007F44  3  03 E0 06 B0  
007F5C  3  00 00 00 00          .byte 0,0,0,0,2,2,1,116,0,248,1,172,1,172,1,252,0,216,1,116,2,2,0,0,0,0,0,0,0,0,0,0
007F60  3  02 02 01 74  
007F64  3  00 F8 01 AC  
007F7C  3  00 00 00 00          .byte 0,0,0,0,128,128,0,93,0,62,0,107,0,107,0,127,0,54,0,93,128,128,0,0,0,0,0,0,0,0,0,0
007F80  3  80 80 00 5D  
007F84  3  00 3E 00 6B  
007F9C  3  00 00 00 00          .byte 0,0,0,0,32,32,64,23,128,15,192,26,192,26,192,31,128,13,64,23,32,32,0,0,0,0,0,0,0,0,0,0
007FA0  3  20 20 40 17  
007FA4  3  80 0F C0 1A  
007FBC  3  00 00 00 00          .byte 0,0,0,0,115,94,115,90,51,94,51,88,123,216,0,0,44,0,20,96,45,56,81,60,124,60,126,62,2,126,28,126
007FC0  3  73 5E 73 5A  
007FC4  3  33 5E 33 58  
007FDC  3  00 00 00 00          .byte 0,0,0,0,156,215,156,214,140,215,12,214,30,246,0,0,11,0,5,24,11,78,20,79,31,15,159,143,128,159,135,31
007FE0  3  9C D7 9C D6  
007FE4  3  8C D7 0C D6  
007FFC  3  00 00 00 00          .byte 0,0,0,0,231,53,167,53,227,53,131,53,135,189,0,0,2,192,1,70,130,211,197,19,199,195,231,227,224,39,225,199
008000  3  E7 35 A7 35  
008004  3  E3 35 83 35  
00801C  3  00 00 00 00          .byte 0,0,0,0,121,205,105,205,120,205,96,205,97,239,0,0,0,176,128,81,224,180,241,68,241,240,249,248,248,9,248,113
008020  3  79 CD 69 CD  
008024  3  78 CD 60 CD  
00803C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,20,96,45,56,81,60,124,60,126,62,60,126,0,126
008040  3  00 00 00 00  
008044  3  00 00 00 00  
00805C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,5,24,11,78,20,79,31,15,159,143,143,31,128,31
008060  3  00 00 00 00  
008064  3  00 00 00 00  
00807C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,192,1,70,130,211,197,19,199,195,231,227,227,199,224,7
008080  3  00 00 00 00  
008084  3  00 00 00 00  
00809C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,128,81,224,180,241,68,241,240,249,248,248,241,248,1
0080A0  3  00 00 00 00  
0080A4  3  00 00 00 00  
0080BC  3  10 00 00 2C          .byte 16,0,0,44,16,20,0,45,16,81,0,124,16,126,0,60,204,0,206,252,142,30,80,238,141,252,205,184,141,176,69,0
0080C0  3  10 14 00 2D  
0080C4  3  10 51 00 7C  
0080DC  3  04 00 00 0B          .byte 4,0,0,11,4,5,64,11,68,20,0,31,132,31,0,15,51,0,51,191,163,135,148,59,35,127,51,110,35,108,17,64
0080E0  3  04 05 40 0B  
0080E4  3  44 14 00 1F  
0080FC  3  01 00 C0 02          .byte 1,0,192,2,65,1,208,2,17,5,192,7,225,7,192,3,12,192,204,239,232,225,229,14,200,223,140,219,8,219,4,80
008100  3  41 01 D0 02  
008104  3  11 05 C0 07  
00811C  3  00 40 B0 00          .byte 0,64,176,0,80,64,180,0,68,65,240,1,248,65,240,0,3,48,243,59,122,56,185,67,242,55,227,54,194,54,1,20
008120  3  50 40 B4 00  
008124  3  44 41 F0 01  
00813C  3  10 00 00 58          .byte 16,0,0,88,16,40,0,90,16,162,0,248,16,252,0,120,28,0,204,248,222,60,146,222,77,238,77,124,221,120,141,176
008140  3  10 28 00 5A  
008144  3  10 A2 00 F8  
00815C  3  04 00 00 16          .byte 4,0,0,22,4,10,128,22,132,40,0,62,4,63,0,30,7,0,51,62,55,143,164,183,147,123,19,95,55,94,35,108
008160  3  04 0A 80 16  
008164  3  84 28 00 3E  
00817C  3  01 00 80 05          .byte 1,0,128,5,129,2,160,5,33,10,128,15,193,15,128,7,1,192,140,207,205,227,233,45,228,222,196,215,141,215,8,219
008180  3  81 02 A0 05  
008184  3  21 0A 80 0F  
00819C  3  00 40 60 01          .byte 0,64,96,1,160,64,104,1,136,66,224,3,240,67,224,1,0,112,227,51,243,120,122,75,185,55,241,53,227,117,194,54
0081A0  3  A0 40 68 01  
0081A4  3  88 42 E0 03  
0081BC  3  03 20 04 90          .byte 3,32,4,144,11,40,23,180,47,186,47,186,47,186,47,250,46,250,44,26,44,90,46,186,47,58,47,122,16,196,15,120
0081C0  3  0B 28 17 B4  
0081C4  3  2F BA 2F BA  
0081DC  3  00 C8 01 24          .byte 0,200,1,36,2,202,5,237,139,238,139,238,139,238,139,254,139,190,139,6,139,22,139,174,139,206,139,222,4,49,3,222
0081E0  3  02 CA 05 ED  
0081E4  3  8B EE 8B EE  
0081FC  3  00 32 00 49          .byte 0,50,0,73,128,178,65,123,162,251,162,251,162,251,162,255,162,239,162,193,162,197,162,235,162,243,162,247,65,12,128,247
008200  3  80 B2 41 7B  
008204  3  A2 FB A2 FB  
00821C  3  80 0C 40 12          .byte 128,12,64,18,160,44,208,94,232,190,232,190,232,190,232,191,232,187,104,176,104,177,232,186,232,188,232,189,16,67,224,61
008220  3  A0 2C D0 5E  
008224  3  E8 BE E8 BE  
00823C  3  00 00 EE DB          .byte 0,0,238,219,170,146,170,219,236,137,218,219,218,219,0,0,0,0,3,64,3,64,3,64,0,0,7,32,31,152,31,152
008240  3  AA 92 AA DB  
008244  3  EC 89 DA DB  
00825C  3  00 00 FB B6          .byte 0,0,251,182,170,164,234,182,123,34,246,182,246,182,0,0,0,0,0,208,0,208,0,208,0,0,1,200,7,230,7,230
008260  3  AA A4 EA B6  
008264  3  7B 22 F6 B6  
00827C  3  00 00 BE ED          .byte 0,0,190,237,42,169,186,173,158,200,189,173,189,173,0,0,0,0,0,52,0,52,0,52,0,0,0,114,129,249,129,249
008280  3  2A A9 BA AD  
008284  3  9E C8 BD AD  
00829C  3  00 00 6F BB          .byte 0,0,111,187,74,170,110,171,39,178,111,107,111,107,0,0,0,0,0,13,0,13,0,13,0,0,128,28,96,126,96,126
0082A0  3  4A AA 6E AB  
0082A4  3  27 B2 6F 6B  
0082BC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,64,3,64,3,64,0,0,7,32,31,152,31,152
0082C0  3  00 00 00 00  
0082C4  3  00 00 00 00  
0082DC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,0,208,0,208,0,0,1,200,7,230,7,230
0082E0  3  00 00 00 00  
0082E4  3  00 00 00 00  
0082FC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,52,0,52,0,0,0,114,129,249,129,249
008300  3  00 00 00 00  
008304  3  00 00 00 00  
00831C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,13,0,13,0,0,128,28,96,126,96,126
008320  3  00 00 00 00  
008324  3  00 00 00 00  
00833C  3               frmlst:
00833C  3  00 02                .byte 0,2
00833E  3  02 02                .byte 2,2
008340  3  04 02                .byte 4,2
008342  3  06 02                .byte 6,2
008344  3  08 02                .byte 8,2
008346  3  0A 02                .byte 10,2
008348  3  0C 02                .byte 12,2
00834A  3  0E 02                .byte 14,2
00834C  3  10 02                .byte 16,2
00834E  3  12 02                .byte 18,2
008350  3  14 02                .byte 20,2
008352  3  16 01                .byte 22,1
008354  3  17 01                .byte 23,1
008356  3  18 02                .byte 24,2
008358  3  1A 04                .byte 26,4
00835A  3  1E 03                .byte 30,3
00835C  3  21 03                .byte 33,3
00835E  3  24 03                .byte 36,3
008360  3  27 01                .byte 39,1
008362  3  28 02                .byte 40,2
008364  3  2A 02                .byte 42,2
008366  3  2C 02                .byte 44,2
008368  3  2E 01                .byte 46,1
00836A  3  2F 03                .byte 47,3
00836C  3  32 01                .byte 50,1
00836E  3  33 01                .byte 51,1
008370  3  34 02                .byte 52,2
008372  3  36 01                .byte 54,1
008374  3  37 01                .byte 55,1
008376  3  38 01                .byte 56,1
008378  3  39 02                .byte 57,2
00837A  3  3B 01                .byte 59,1
00837C  3  3C 02                .byte 60,2
00837E  3  3E 02                .byte 62,2
008380  3  40 02                .byte 64,2
008382  3  42 02                .byte 66,2
008384  3  44 02                .byte 68,2
008386  3  46 02                .byte 70,2
008388  3  48 01                .byte 72,1
00838A  3  49 03                .byte 73,3
00838C  3  4C 02                .byte 76,2
00838E  3  4E 02                .byte 78,2
008390  3  50 02                .byte 80,2
008392  3  52 02                .byte 82,2
008394  3  54 01                .byte 84,1
008396  3  55 02 57 00          .byte 85,2,87,0
00839A  3               scdat:
00839A  3  79 00 CC 01          .word 121,460,522,465,373,110,382,334,300,493
00839E  3  0A 02 D1 01  
0083A2  3  75 01 6E 00  
0083AE  3  FF 00 43 37          .byte 255,0,67,55,55,255,0,26,58,0,255,55,4,255,0,24,58,0,255,55,4,0,0,0,55,55,55,255,0,20,55,0,55,55,55
0083B2  3  37 FF 00 1A  
0083B6  3  3A 00 FF 37  
0083D1  3  00 00 37 37          .byte 0,0,55,55,55,255,0,82,52,28,27,0,0,30,29,51,255,0,22,53,31,32,0,0,36,23,50,255,0,21,22,56,71
0083D5  3  37 FF 00 52  
0083D9  3  34 1C 1B 00  
0083F2  3  48 48 48 3A          .byte 72,72,72,58,72,41,255,0,4,56,55,55,255,0,14,72,72,72,71,255,72,4,55,255,0,4,55,55,55,255,0,6,255,79,30
0083F6  3  48 29 FF 00  
0083FA  3  04 38 37 37  
008415  3  FF 31 1E 4C          .byte 255,49,30,76,76,76,255,61,24,255,76,63,255,34,60,255,0,90
008419  3  4C 4C FF 3D  
00841D  3  18 FF 4C 3F  
008427  3  0C 06 0D 0C          .byte 12,6,13,12,6,12,12,13,6,12,6,12,13,12,6,12,13,6,13,12,13,6,12,13,12,6,13,12,13,12,0,14,4
00842B  3  06 0C 0C 0D  
00842F  3  06 0C 06 0C  
008448  3  00 04 00 04          .byte 0,4,0,4,0,73,0,0,69,255,0,4,70,0,14,4,0,14,0,14,0,4,0,0,15,0,0,4,15,0,14,0,14
00844C  3  00 49 00 00  
008450  3  45 FF 00 04  
008469  3  00 49 00 00          .byte 0,73,0,0,69,255,0,4,70,0,0,4,255,0,5,4,0,0,4,0,0,4,15,255,0,5,73,0,0,69,255,0,4
00846D  3  45 FF 00 04  
008471  3  46 00 00 04  
00848A  3  46 00 00 0F          .byte 70,0,0,15,255,0,5,15,0,0,4,0,0,14,255,0,4,22,22,73,0,0,69,255,0,4,70,255,0,8,4,0,0
00848E  3  FF 00 05 0F  
008492  3  00 00 04 00  
0084AB  3  0F FF 00 07          .byte 15,255,0,7,55,55,73,0,0,69,255,0,4,70,255,0,8,4,255,0,4,255,5,7,0,75,0,0,69,255,0,4,70
0084AF  3  37 37 49 00  
0084B3  3  00 45 FF 00  
0084CC  3  FF 00 06 FF          .byte 255,0,6,255,5,7,13,13,6,12,6,12,6,0,75,0,0,69,255,0,4,70,255,0,6,12,13,6,13,6,12,13,20
0084D0  3  05 07 0D 0D  
0084D4  3  06 0C 06 0C  
0084ED  3  04 00 04 00          .byte 4,0,4,0,0,4,0,75,0,0,69,255,0,4,70,255,0,6,4,0,15,4,0,0,14,20,15,0,15,0,0,4,0
0084F1  3  00 04 00 4B  
0084F5  3  00 00 45 FF  
00850E  3  4B 00 00 45          .byte 75,0,0,69,255,0,4,70,255,0,6,4,0,0,4,0,0,14,20,14,0,4,0,0,14,0,75,0,0,69,255,0,4
008512  3  FF 00 04 46  
008516  3  FF 00 06 04  
00852F  3  46 FF 00 06          .byte 70,255,0,6,14,0,0,14,0,0,0,20,0,0,15,0,0,14,0,75,0,0,69,255,0,4,70,255,0,6,4,0,0
008533  3  0E 00 00 0E  
008537  3  00 00 00 14  
008550  3  0E 00 00 00          .byte 14,0,0,0,20,255,0,7,75,0,0,69,255,0,4,70,255,0,6,4,255,0,6,20,255,0,7,75,0,0,69,255,0,4
008554  3  14 FF 00 07  
008558  3  4B 00 00 45  
008572  3  46 FF 00 06          .byte 70,255,0,6,14,0,0,0,12,13,6,20,255,0,7,75,0,0,69,255,0,4,70,255,0,10,4,2,3,12,12,13,6
008576  3  0E 00 00 00  
00857A  3  0C 0D 06 14  
008593  3  FF 00 04 4B          .byte 255,0,4,75,0,0,69,255,0,4,70,255,0,10,14,2,3,1,3,2,4,255,0,7,69,255,0,4,70,255,0,10,4
008597  3  00 00 45 FF  
00859B  3  00 04 46 FF  
0085B4  3  02 03 01 03          .byte 2,3,1,3,2,14,255,0,4,75,255,0,10,22,55,255,0,6,14,2,3,1,3,2,255,0,5,75,255,0,10,55,55
0085B8  3  02 0E FF 00  
0085BC  3  04 4B FF 00  
0085D5  3  FF 00 07 02          .byte 255,0,7,2,3,1,3,2,255,5,7,255,33,8,255,5,10,2,3,1,3,2,255,74,25,2,3,255,74,30
0085D9  3  03 01 03 02  
0085DD  3  FF 05 07 FF  
0085F3  3  34 1C 1B 00          .byte 52,28,27,0,0,30,29,51,0,0,65,66,0,0,0,62,63,64,255,0,7,255,21,4,0,53,31,32,0,0,36,23,50
0085F7  3  00 1E 1D 33  
0085FB  3  00 00 41 42  
008614  3  00 00 43 44          .byte 0,0,67,68,255,0,13,4,8,8,4,8,53,25,26,37,40,45,47,50,0,22,22,48,48,48,255,0,11,4,8,9,4
008618  3  FF 00 0D 04  
00861C  3  08 08 04 08  
008635  3  08 35 5A 2A          .byte 8,53,90,42,38,43,44,101,50,78,78,255,0,15,4,7,9,4,7,0,39,255,49,4,54,0,78,78,255,0,15,17,7
008639  3  26 2B 2C 65  
00863D  3  32 4E 4E FF  
008656  3  09 0F 07 FF          .byte 9,15,7,255,5,18,255,0,7,15,7,9,18,7,0,17,8,9,0,0,82,255,0,4,9,16,8,9,9,17,8,255,5,6
00865A  3  05 12 FF 00  
00865E  3  07 0F 07 09  
008678  3  09 12 07 09          .byte 9,18,7,9,4,7,20,15,7,9,0,0,82,255,0,4,9,18,7,9,9,14,7,9,4,8,9,4,8,9,4,7,9
00867C  3  04 07 14 0F  
008680  3  07 09 00 00  
008699  3  04 07 14 12          .byte 4,7,20,18,7,9,0,0,17,255,0,4,9,4,7,9,9,18,7,9,4,7,9,4,7,0,4,7,0,4,7,20,18
00869D  3  07 09 00 00  
0086A1  3  11 FF 00 04  
0086BA  3  07 09 00 0B          .byte 7,9,0,11,11,11,0,0,0,9,4,7,9,9,18,7,9,4,7,9,4,7,0,4,0,0,17,0,20,4,7,9,0
0086BE  3  0B 0B 00 00  
0086C2  3  00 09 04 07  
0086DB  3  09 11 07 09          .byte 9,17,7,9,0,0,9,4,7,9,9,4,7,9,15,7,9,4,7,255,5,6,20,4,7,9,0,9,15,7,9,0,0
0086DF  3  00 00 09 04  
0086E3  3  07 09 09 04  
0086FC  3  09 0E 07 09          .byte 9,14,7,9,9,4,7,9,4,7,9,4,7,0,16,8,9,4,8,20,15,7,9,0,0,18,7,0,0,0,9,18,7
008700  3  09 04 07 09  
008704  3  04 07 09 04  
00871D  3  09 09 0F 07          .byte 9,9,15,7,9,4,7,9,14,7,0,4,7,9,4,7,20,4,7,0,0,0,4,7,0,0,0,9,4,7,9,0,0,0
008721  3  09 04 07 09  
008725  3  0E 07 00 04  
00873F  3  09 04 07 09          .byte 9,4,7,9,4,7,9,4,7,9,4,7,20,4,7,9,0,11,11,11,0,0,0,9,4,7,9,0,0,0,9,4,7
008743  3  04 07 09 04  
008747  3  07 09 04 07  
008760  3  09 11 07 09          .byte 9,17,7,9,17,7,9,17,7,20,4,7,9,0,0,14,255,0,4,9,17,7,9,0,0,0,9,4,7,0,17,7,9
008764  3  11 07 09 11  
008768  3  07 14 04 07  
008781  3  0F 07 09 0F          .byte 15,7,9,15,7,20,17,7,9,0,9,4,7,9,0,0,0,15,7,255,0,4,9,15,7,0,15,7,255,0,6,20,15
008785  3  07 14 11 07  
008789  3  09 00 09 04  
0087A2  3  07 00 00 00          .byte 7,0,0,0,16,7,9,255,0,21,20,255,0,25,12,6,6,13,20,255,0,9,12,6,6,13,255,0,6,12,6,6,13
0087A6  3  10 07 09 FF  
0087AA  3  00 15 14 FF  
0087C3  3  00 00 00 01          .byte 0,0,0,1,3,0,12,255,6,4,13,255,0,5,1,3,9,9,12,6,13,0,0,0,1,3,0,0,9,9,1,3,0
0087C7  3  03 00 0C FF  
0087CB  3  06 04 0D FF  
0087E4  3  21 01 03 02          .byte 33,1,3,2,3,255,33,6,1,3,33,33,33,1,255,33,4,1,3,255,33,4,1,3,33
0087E8  3  03 FF 21 06  
0087EC  3  01 03 21 21  
0087FD  3  FF 00 09 4D          .byte 255,0,9,77,22,55,255,0,13,4,75,75,4,255,0,10,55,55,55,255,0,13,4,8,7,4,8,255,0,9,22,22,48,48,48
008801  3  16 37 FF 00  
008805  3  0D 04 4B 4B  
008820  3  FF 00 0B 04          .byte 255,0,11,4,8,9,4,8,255,0,25,4,7,9,4,7,255,0,25,17,7,9,15,7,255,5,18,255,0,7,15,7,9
008824  3  08 09 04 08  
008828  3  FF 00 19 04  
008841  3  12 07 00 11          .byte 18,7,0,17,8,9,255,0,7,9,16,8,9,9,17,8,255,5,6,9,18,7,9,4,7,20,15,7,9,255,0,7,9
008845  3  08 09 FF 00  
008849  3  07 09 10 08  
008862  3  12 07 09 09          .byte 18,7,9,9,14,7,9,4,8,9,4,8,9,4,7,9,4,7,20,18,7,9,255,0,7,9,4,7,9,9,18,7,9
008866  3  0E 07 09 04  
00886A  3  08 09 04 08  
008883  3  04 07 09 04          .byte 4,7,9,4,7,0,4,7,0,4,7,20,18,7,9,0,11,11,11,0,0,0,9,4,7,9,9,18,7,9,4,7,9
008887  3  07 00 04 07  
00888B  3  00 04 07 14  
0088A4  3  04 07 00 04          .byte 4,7,0,4,0,0,17,0,20,4,7,9,0,9,17,7,9,0,0,9,4,7,9,9,4,7,9,15,7,9,4,7,255,5,6
0088A8  3  00 00 11 00  
0088AC  3  14 04 07 09  
0088C7  3  14 04 07 09          .byte 20,4,7,9,0,9,15,7,9,0,0,9,14,7,9,9,4,7,9,4,7,9,4,7,0,16,8,9,4,8,20,15,7
0088CB  3  00 09 0F 07  
0088CF  3  09 00 00 09  
0088E8  3  09 00 00 12          .byte 9,0,0,18,7,0,0,0,9,18,7,9,9,15,7,9,4,7,9,14,7,0,4,7,9,4,7,20,4,7,0,0,0
0088EC  3  07 00 00 00  
0088F0  3  09 12 07 09  
008909  3  04 07 00 00          .byte 4,7,0,0,0,9,4,7,9,0,0,0,9,4,7,9,4,7,9,4,7,9,4,7,20,4,7,9,0,11,11,11,0,0,0
00890D  3  00 09 04 07  
008911  3  09 00 00 00  
00892C  3  09 04 07 09          .byte 9,4,7,9,0,0,0,9,4,7,9,14,7,9,14,7,9,15,7,20,4,7,9,0,0,14,255,0,4,9,17,7,9
008930  3  00 00 00 09  
008934  3  04 07 09 0E  
00894D  3  00 00 00 09          .byte 0,0,0,9,4,7,0,0,0,9,0,0,9,0,0,20,16,7,0,0,9,4,7,9,0,0,0,15,7,255,0,4,9
008951  3  04 07 00 00  
008955  3  00 09 00 00  
00896E  3  0F 07 FF 00          .byte 15,7,255,0,9,20,255,0,5,16,0,9,255,0,21,20,255,0,25,12,6,6,13,20,255,0,9,12,6,6,13,255,0,6
008972  3  09 14 FF 00  
008976  3  05 10 00 09  
008990  3  0C 06 06 0D          .byte 12,6,6,13,0,0,0,1,3,0,12,255,6,4,13,255,0,5,1,3,9,9,12,6,13,0,0,0,1,3,0,0,9,9
008994  3  00 00 00 01  
008998  3  03 00 0C FF  
0089B2  3  01 03 00 21          .byte 1,3,0,33,1,3,2,3,255,33,6,1,3,33,33,33,1,255,33,4,1,3,255,33,4,1,3,33
0089B6  3  01 03 02 03  
0089BA  3  FF 21 06 01  
0089CE  3  34 1C 1B 37          .byte 52,28,27,55,0,30,29,51,0,0,65,66,0,0,0,62,63,64,255,0,7,21,21,75,4,0,53,31,32,0,0,36,23
0089D2  3  00 1E 1D 33  
0089D6  3  00 00 41 42  
0089EF  3  32 00 37 43          .byte 50,0,55,67,68,255,0,13,4,8,7,4,8,53,25,26,37,40,45,47,50,0,22,22,48,48,48,255,0,11,4,8,9
0089F3  3  44 FF 00 0D  
0089F7  3  04 08 07 04  
008A10  3  04 08 35 5A          .byte 4,8,53,90,42,38,43,44,101,50,255,0,17,4,7,9,4,7,0,39,255,49,4,54,255,0,18,17,7,9,4,7,255,5,18
008A14  3  2A 26 2B 2C  
008A18  3  65 32 FF 00  
008A33  3  53 53 53 05          .byte 83,83,83,5,5,11,0,15,7,9,15,7,0,17,8,9,8,4,8,8,4,8,8,4,8,8,16,8,4,8,8,4,8,8
008A37  3  05 0B 00 0F  
008A3B  3  07 09 0F 07  
008A55  3  04 08 09 10          .byte 4,8,9,16,7,9,4,7,20,15,0,9,9,4,7,9,4,7,9,4,7,9,4,7,16,7,9,16,7,9,16,7,9
008A59  3  07 09 04 07  
008A5D  3  14 0F 00 09  
008A76  3  04 07 09 04          .byte 4,7,9,4,7,20,17,0,0,0,4,7,9,4,7,9,16,7,9,4,7,4,7,9,16,7,9,4,7,9,4,7,9
008A7A  3  07 14 11 00  
008A7E  3  00 00 04 07  
008A97  3  04 07 14 11          .byte 4,7,20,17,0,0,0,4,7,9,4,7,9,4,7,9,4,7,4,7,9,4,7,9,16,7,9,4,7,9,4,7,20
008A9B  3  00 00 00 04  
008A9F  3  07 09 04 07  
008AB8  3  0B 0B 0B 00          .byte 11,11,11,0,4,7,9,16,7,9,16,7,9,16,7,16,7,9,15,7,9,15,7,9,16,7,9,4,7,20,4,7,7
008ABC  3  04 07 09 10  
008AC0  3  07 09 10 07  
008AD9  3  00 04 07 09          .byte 0,4,7,9,255,0,12,7,9,255,0,6,16,0,20,4,7,9,0,15,7,9,0,255,59,7,255,0,14,20,15,255,0,28
008ADD  3  FF 00 0C 07  
008AE1  3  09 FF 00 06  
008AFB  3  14 FF 00 1D          .byte 20,255,0,29,11,11,11,255,0,20,11,11,11,255,0,8,11,11,11,255,0,11,11,11,11,0,0,9,4,7,9,255,0,27
008AFF  3  0B 0B 0B FF  
008B03  3  00 14 0B 0B  
008B1D  3  0E 07 FF 00          .byte 14,7,255,0,28,4,7,255,0,28,15,7,255,0,29,12,12,6,6,6,1,3,2,255,33,8,12,6,12,6,6,255,33,10
008B21  3  1C 04 07 FF  
008B25  3  00 1C 0F 07  
008B3F  3  02 02 03 03          .byte 2,2,3,3
008B43  3  FF 00 47 57          .byte 255,0,71,87,87,255,0,28,58,58,255,0,27,22,22,85,255,0,27,72,72,84,255,0,28,73,255,0,29,73,255,0,29
008B47  3  57 FF 00 1C  
008B4B  3  3A 3A FF 00  
008B64  3  49 FF 00 1A          .byte 73,255,0,26,52,28,27,0,0,30,29,51,255,0,22,53,31,32,0,0,36,23,50,255,0,22,53,25,26,37,40,45,47
008B68  3  34 1C 1B 00  
008B6C  3  00 1E 1D 33  
008B85  3  32 FF 00 16          .byte 50,255,0,22,53,90,42,38,43,44,101,50,255,0,23,39,255,49,4,54,255,0,7,86,86,255,0,27,58,86,86,255,0,28
008B89  3  35 5A 2A 26  
008B8D  3  2B 2C 65 32  
008BA7  3  04 16 FF 00          .byte 4,22,255,0,28,55,55,255,0,156
008BAB  3  1C 37 37 FF  
008BAF  3  00 9C        
008BB1  3  34 1C 1B 00          .byte 52,28,27,0,0,30,29,51,0,0,65,66,0,0,0,62,63,64,255,0,7,21,21,0,0,0,53,31,32,0,0,36,23
008BB5  3  00 1E 1D 33  
008BB9  3  00 00 41 42  
008BD2  3  32 00 00 43          .byte 50,0,0,67,68,255,0,14,102,0,0,102,53,25,26,37,40,45,47,50,255,0,18,102,8,8,102,88,35,42,38,43,44
008BD6  3  44 FF 00 0E  
008BDA  3  66 00 00 66  
008BF3  3  2E 59 FF 00          .byte 46,89,255,0,14,8,0,0,0,102,7,9,0,255,95,4,8,8,78,8,255,95,14,8,78,0,0,102,7,9,0,102,8,8
008BF7  3  0E 08 00 00  
008BFB  3  00 66 07 09  
008C15  3  66 09 09 00          .byte 102,9,9,0,99,255,0,14,99,0,0,0,102,7,9,0,102,7,8,102,7,0,0,99,255,0,14,99,0,0,0,102,0,0,0
008C19  3  63 FF 00 0E  
008C1D  3  63 00 00 00  
008C38  3  66 07 09 66          .byte 102,7,9,102,7,0,0,99,255,0,14,99,0,0,0,102,0,0,0,102,7,9,0,0,0,78,99,255,95,14,99,78,8,8
008C3C  3  07 00 00 63  
008C40  3  FF 00 0E 63  
008C5A  3  FF 5F 04 66          .byte 255,95,4,102,7,9,255,0,4,99,255,0,14,99,0,9,9,102,8,8,102,102,255,0,6,99,255,0,14,99,0,0,0
008C5E  3  07 09 FF 00  
008C62  3  04 63 FF 00  
008C7B  3  66 08 09 66          .byte 102,8,9,102,102,255,0,6,99,255,0,14,99,0,0,0,102,7,9,0,255,95,4,8,8,78,99,255,95,14,99,78,0,0
008C7F  3  66 FF 00 06  
008C83  3  63 FF 00 0E  
008C9D  3  66 07 09 00          .byte 102,7,9,0,102,8,8,102,9,9,0,99,255,0,14,99,0,0,0,102,7,0,0,102,7,8,102,7,0,0,99,255,0,14
008CA1  3  66 08 08 66  
008CA5  3  09 09 00 63  
008CBF  3  63 FF 00 07          .byte 99,255,0,7,102,7,9,102,7,0,0,99,255,0,14,99,255,0,7,102,7,9,0,0,0,78,99,255,95,15,78,8,8
008CC3  3  66 07 09 66  
008CC7  3  07 00 00 63  
008CE0  3  FF 5F 04 66          .byte 255,95,4,102,7,9,255,0,4,99,255,0,14,99,0,9,9,0,0,0,102,102,7,9,255,0,4,99,255,0,14,99,255,0,7
008CE4  3  07 09 FF 00  
008CE8  3  04 63 FF 00  
008D03  3  66 07 FF 00          .byte 102,7,255,0,5,99,255,0,14,99,255,0,7,102,7,255,0,4,78,255,95,16,78,255,0,6,92,100,100,100,91,78,78
008D07  3  05 63 FF 00  
008D0B  3  0E 63 FF 00  
008D24  3  FF 00 0F 08          .byte 255,0,15,8,78,78,92,93,93,93,91
008D28  3  4E 4E 5C 5D  
008D2C  3  5D 5D 5B     
008D2F  3  FF 00 0C 16          .byte 255,0,12,22,22,22,62,63,64,22,22,255,0,5,21,21,255,0,15,52,28,27,0,0,30,29,51,255,0,22,53,31,32
008D33  3  16 16 3E 3F  
008D37  3  40 16 16 FF  
008D50  3  16 16 24 17          .byte 22,22,36,23,50,255,0,22,53,25,26,37,40,45,47,50,255,0,10,22,22,22,255,0,9,88,35,42,38,43,44,46,89
008D54  3  32 FF 00 16  
008D58  3  35 19 1A 25  
008D71  3  FF 00 0A 16          .byte 255,0,10,22,22,22,0,255,103,21,255,0,5,22,22,22,0,255,104,21,255,0,12,105,8,9,0,105,8,9,0,105,8
008D75  3  16 16 00 FF  
008D79  3  67 15 FF 00  
008D92  3  09 00 69 08          .byte 9,0,105,8,9,0,105,8,9,255,0,11,105,8,9,0,105,8,9,0,105,8,9,0,105,8,9,0,105,8,9,255,0,11
008D96  3  09 00 69 08  
008D9A  3  09 FF 00 0B  
008DB4  3  69 07 09 00          .byte 105,7,9,0,105,7,9,0,105,7,9,0,105,7,9,0,105,7,9,255,0,11,105,7,9,0,105,7,9,0,105,7,9
008DB8  3  69 07 09 00  
008DBC  3  69 07 09 00  
008DD5  3  00 69 07 09          .byte 0,105,7,9,0,105,7,9,255,0,11,105,7,9,0,105,7,9,0,105,7,9,0,105,7,9,0,105,7,9,255,0,11
008DD9  3  00 69 07 09  
008DDD  3  FF 00 0B 69  
008DF6  3  69 07 09 00          .byte 105,7,9,0,105,7,9,0,105,7,9,0,105,7,9,0,105,7,9,255,0,11,105,7,9,0,105,7,9,0,105,7,9
008DFA  3  69 07 09 00  
008DFE  3  69 07 09 00  
008E17  3  00 69 07 09          .byte 0,105,7,9,0,105,7,9,255,0,11,105,7,9,0,105,7,9,0,105,7,9,0,105,7,9,0,105,7,9,255,0,11
008E1B  3  00 69 07 09  
008E1F  3  FF 00 0B 69  
008E38  3  69 07 09 00          .byte 105,7,9,0,105,7,9,0,105,7,9,0,105,7,9,0,105,7,9,255,0,11,105,7,9,0,105,7,9,0,105,7,9
008E3C  3  69 07 09 00  
008E40  3  69 07 09 00  
008E59  3  00 69 07 09          .byte 0,105,7,9,0,105,7,9,255,0,11,105,7,9,0,105,7,9,0,105,7,9,0,105,7,9,0,105,7,9,255,0,94
008E5D  3  00 69 07 09  
008E61  3  FF 00 0B 69  
008E7A  3  FF 67 1E             .byte 255,103,30
008E7D  3  FF 00 0C 16          .byte 255,0,12,22,22,22,255,0,105,22,22,22,255,0,27,22,22,22,0,255,103,8,255,0,7,255,103,6,255,0,5,22,22,22
008E81  3  16 16 FF 00  
008E85  3  69 16 16 16  
008E9F  3  00 FF 68 08          .byte 0,255,104,8,255,0,7,255,104,6,255,0,12,105,8,9,0,105,8,9,255,0,5,105,8,9,0,105,8,9,255,0,11
008EA3  3  FF 00 07 FF  
008EA7  3  68 06 FF 00  
008EC0  3  69 08 09 00          .byte 105,8,9,0,105,8,9,0,0,8,9,0,105,8,9,0,105,8,9,255,0,11,105,7,9,0,105,7,9,0,0,7,9
008EC4  3  69 08 09 00  
008EC8  3  00 08 09 00  
008EE1  3  00 69 07 09          .byte 0,105,7,9,0,105,7,9,255,0,11,105,7,9,0,105,7,9,0,0,7,9,0,105,7,9,0,105,7,9,255,0,11
008EE5  3  00 69 07 09  
008EE9  3  FF 00 0B 69  
008F02  3  69 07 09 00          .byte 105,7,9,0,105,7,9,0,0,7,9,0,105,7,9,0,105,7,9,255,0,11,105,7,9,0,105,7,9,0,0,7,9
008F06  3  69 07 09 00  
008F0A  3  00 07 09 00  
008F23  3  00 69 07 09          .byte 0,105,7,9,0,105,7,9,255,0,11,105,7,9,0,105,7,9,0,0,7,9,0,105,7,9,0,105,7,9,255,0,11
008F27  3  00 69 07 09  
008F2B  3  FF 00 0B 69  
008F44  3  69 07 09 00          .byte 105,7,9,0,105,7,9,0,0,7,9,0,105,7,9,0,105,7,9,255,0,11,105,7,9,0,105,7,9,0,0,7,9
008F48  3  69 07 09 00  
008F4C  3  00 07 09 00  
008F65  3  00 69 07 09          .byte 0,105,7,9,0,105,7,9,255,0,11,105,7,9,0,105,7,9,0,0,7,9,0,105,7,9,0,105,7,9,255,0,11
008F69  3  00 69 07 09  
008F6D  3  FF 00 0B 69  
008F86  3  69 07 09 00          .byte 105,7,9,0,105,7,9,0,0,7,9,0,105,7,9,0,105,7,9,255,0,48,55,22,255,0,28,55,55,255,0,14,255,103,30
008F8A  3  69 07 09 00  
008F8E  3  00 07 09 00  
008FA9  3  FF 00 1F 0C          .byte 255,0,31,12,6,7,0,0,6,7,0,0,12,7,0,12,13,7,0,0,0,12,13,6,0,0,12,0,0,12,6,0,12
008FAD  3  06 07 00 00  
008FB1  3  06 07 00 00  
008FCA  3  07 00 00 00          .byte 7,0,0,0,12,7,6,7,12,7,6,7,13,7,13,7,0,0,0,13,0,0,12,0,13,0,6,0,13,6,7,0,6
008FCE  3  0C 07 06 07  
008FD2  3  0C 07 06 07  
008FEB  3  07 0C 07 0D          .byte 7,12,7,13,7,12,7,13,7,12,7,6,7,0,0,0,6,0,0,13,0,6,0,6,6,0,13,7,0,13,7,6,7
008FEF  3  07 0C 07 0D  
008FF3  3  07 0C 07 06  
00900C  3  06 07 0D 07          .byte 6,7,13,7,6,7,13,7,6,7,0,0,0,13,0,0,6,0,6,0,13,0,6,0,12,6,7,0,0,6,7,0,0
009010  3  06 07 0D 07  
009014  3  06 07 00 00  
00902D  3  0D 07 00 0C          .byte 13,7,0,12,13,7,99,0,99,6,255,0,4,12,0,0,6,6,255,0,16,255,99,5,255,0,12,100,0,100,255,0,11
009031  3  0D 07 63 00  
009035  3  63 06 FF 00  
00904E  3  63 63 63 FF          .byte 99,99,99,255,0,6,79,79,255,0,4,255,100,5,255,0,11,99,255,0,6,80,80,79,79,79,0,0,0,100,100,100,255,0,11
009052  3  00 06 4F 4F  
009056  3  FF 00 04 FF  
009071  3  6A 00 6A 6A          .byte 106,0,106,106,255,0,6,80,80,79,79,0,0,0,100,255,0,8,106,0,106,0,0,106,0,106,106,255,0,6,80,80,79
009075  3  FF 00 06 50  
009079  3  50 4F 4F 00  
009092  3  FF 00 0B 6A          .byte 255,0,11,106,76,106,76,106,0,255,106,4,0,0,95,95,0,0,80,80,79,255,0,6,95,95,0,0,0,255,106,5,0,0
009096  3  4C 6A 4C 6A  
00909A  3  00 FF 6A 04  
0090B4  3  6A 6A 00 00          .byte 106,106,0,0,97,95,95,0,0,80,80,80,0,0,0,79,79,0,95,95,0,0,0,75,106,0,106,0,0,95,0,0,0
0090B8  3  61 5F 5F 00  
0090BC  3  00 50 50 50  
0090D5  3  61 00 5F 00          .byte 97,0,95,0,0,0,80,80,80,0,0,0,79,80,0,0,95,255,0,5,95,0,95,0,255,95,5,255,0,4,80,80,0
0090D9  3  00 00 50 50  
0090DD  3  50 00 00 00  
0090F6  3  4F 00 00 4F          .byte 79,0,0,79,80,255,0,5,255,95,7,0,255,95,4,106,95,0,0,80,80,80,0,79,0,0,79,80,80,0,0,0,95
0090FA  3  50 FF 00 05  
0090FE  3  FF 5F 07 00  
009117  3  6A FF 5F 06          .byte 106,255,95,6,0,0,106,106,106,95,0,0,255,80,4,0,79,0,79,255,80,4,0,0,0,95,255,106,4,255,0,4,255,95,4
00911B  3  00 00 6A 6A  
00911F  3  6A 5F 00 00  
00913A  3  00 00 FF 50          .byte 0,0,255,80,4,0,79,0,255,80,5,255,0,4,95,95,95,255,0,10,255,80,5,0,79,0,0,255,80,6,255,0,5
00913E  3  04 00 4F 00  
009142  3  FF 50 05 FF  
00915B  3  5F 5F 00 5F          .byte 95,95,0,95,95,95,0,255,80,6,0,0,79,79,0,79,0,255,80,7,0,95,95,255,0,4,95,95,95,255,80,6,0
00915F  3  5F 5F 00 FF  
009163  3  50 06 00 00  
00917C  3  4F FF 50 04          .byte 79,255,80,4,79,0,255,80,6,79,255,95,5,0,95,95,95,79,255,80,4,0,79,80,80,80
009180  3  4F 00 FF 50  
009184  3  06 4F FF 5F  
009196  3               numsc:
009196  3  0A                   .byte 10
009197  3               nmedat:
009197  3  08 02 58 B0          .byte 8,2,88,176,8,15,88,120,8,16,88,72,8,17,88,104,8,26,72,104,8,17,88,88,8,19,24,64,8,20,40,80,8,21,40,128,8,18,8,152,8,18,56,16,5,33,40,32,255
00919B  3  08 0F 58 78  
00919F  3  08 10 58 48  
0091C8  3  05 03 90 A0          .byte 5,3,144,160,5,30,40,56,5,29,128,128,5,27,128,96,5,26,112,112,5,24,112,96,5,25,112,128,5,28,128,112,5,31,40,72,255
0091CC  3  05 1E 28 38  
0091D0  3  05 1D 80 80  
0091ED  3  00 00 88 20          .byte 0,0,136,32,2,5,32,128,1,8,80,16,3,26,8,32,3,22,80,88,3,13,32,80,4,14,64,56,4,14,104,216,4,14,24,216,1,9,120,176,255
0091F1  3  02 05 20 80  
0091F5  3  01 08 50 10  
009216  3  05 03 08 58          .byte 5,3,8,88,5,15,32,64,5,16,32,16,5,17,32,32,5,24,16,32,5,25,16,64,5,26,16,48,5,17,32,48,255
00921A  3  05 0F 20 40  
00921E  3  05 10 20 10  
009237  3  00 00 90 08          .byte 0,0,144,8,6,34,168,184,6,12,112,128,3,26,8,32,6,34,168,72,4,14,80,104,3,13,32,80,3,42,104,216,7,33,96,192,7,10,32,120,255
00923B  3  06 22 A8 B8  
00923F  3  06 0C 70 80  
009260  3  03 04 80 B8          .byte 3,4,128,184,3,16,40,88,3,26,80,96,3,33,112,176,3,39,24,96,8,18,8,24,8,18,144,112,8,18,64,152,255
009264  3  03 10 28 58  
009268  3  03 1A 50 60  
009281  3  00 02 90 E0          .byte 0,2,144,224,3,26,8,32,3,13,24,72,4,14,40,224,2,40,152,88,2,40,24,144,2,41,56,112,2,41,112,72,2,40,88,96,255
009285  3  03 1A 08 20  
009289  3  03 0D 18 48  
0092A6  3  04 2C 88 38          .byte 4,44,136,56,0,0,136,16,7,33,96,192,3,13,32,80,4,44,136,88,4,44,136,120,4,44,136,152,4,44,136,184,1,8,64,16,7,33,96,64,3,26,16,128,255
0092AA  3  00 00 88 10  
0092AE  3  07 21 60 C0  
0092D3  3  04 00 A0 78          .byte 4,0,160,120,4,24,16,112,4,25,16,144,4,26,16,128,4,27,32,112,4,28,32,128,4,29,32,144,4,13,32,80,255
0092D7  3  04 18 10 70  
0092DB  3  04 19 10 90  
0092F4  3  07 1F 08 20          .byte 7,31,8,32,255
0092F8  3  FF           
0092F9  3               NUMOBJ = 2
0092F9  3               objdta:
0092F9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,102,102,102
0092FD  3  00 00 00 00  
009301  3  00 00 00 00  
00931F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,141,8,8,141
009323  3  00 00 00 00  
009327  3  00 00 00 00  
009345  3               font:
009345  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
009349  3  00 00 00 00  
00934D  3  0C 1E 1E 3C          .byte 12,30,30,60,24,96,96,0
009351  3  18 60 60 00  
009355  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
009359  3  00 00 00 00  
00935D  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
009361  3  6C FE 6C 00  
009365  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
009369  3  7E 1E 7E 18  
00936D  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
009371  3  30 6E CE 00  
009375  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
009379  3  7E CC 7E 00  
00937D  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
009381  3  00 00 00 00  
009385  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
009389  3  18 18 0C 00  
00938D  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
009391  3  30 30 60 00  
009395  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
009399  3  7E 18 3C 00  
00939D  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0093A1  3  7E 18 18 00  
0093A5  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0093A9  3  00 18 18 30  
0093AD  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0093B1  3  7E 00 00 00  
0093B5  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0093B9  3  00 38 38 00  
0093BD  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0093C1  3  18 30 60 00  
0093C5  3  7C EE EE EE          .byte 124,238,238,238,254,254,124,0
0093C9  3  FE FE 7C 00  
0093CD  3  38 78 78 38          .byte 56,120,120,56,56,56,124,0
0093D1  3  38 38 7C 00  
0093D5  3  7C C6 3E 7C          .byte 124,198,62,124,240,254,254,0
0093D9  3  F0 FE FE 00  
0093DD  3  7C CE 1E EC          .byte 124,206,30,236,254,254,124,0
0093E1  3  FE FE 7C 00  
0093E5  3  38 58 D8 FC          .byte 56,88,216,252,252,252,24,0
0093E9  3  FC FC 18 00  
0093ED  3  FE E0 1C EE          .byte 254,224,28,238,254,254,124,0
0093F1  3  FE FE 7C 00  
0093F5  3  7C E0 FC EE          .byte 124,224,252,238,254,254,124,0
0093F9  3  FE FE 7C 00  
0093FD  3  7E 06 1C 3C          .byte 126,6,28,60,60,60,60,0
009401  3  3C 3C 3C 00  
009405  3  7C EE 7C EE          .byte 124,238,124,238,254,254,124,0
009409  3  FE FE 7C 00  
00940D  3  7C C6 7E 06          .byte 124,198,126,6,126,126,60,0
009411  3  7E 7E 3C 00  
009415  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
009419  3  00 00 30 00  
00941D  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
009421  3  00 30 30 60  
009425  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
009429  3  30 18 0C 00  
00942D  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
009431  3  00 7E 00 00  
009435  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
009439  3  0C 18 30 00  
00943D  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
009441  3  18 00 18 00  
009445  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
009449  3  FE C0 7C 00  
00944D  3  00 7C F6 F6          .byte 0,124,246,246,254,246,246,0
009451  3  FE F6 F6 00  
009455  3  00 FC F6 FC          .byte 0,252,246,252,246,246,252,0
009459  3  F6 F6 FC 00  
00945D  3  00 7C F6 F0          .byte 0,124,246,240,246,246,124,0
009461  3  F6 F6 7C 00  
009465  3  00 F8 EC E6          .byte 0,248,236,230,230,236,248,0
009469  3  E6 EC F8 00  
00946D  3  00 FE F0 FC          .byte 0,254,240,252,240,240,254,0
009471  3  F0 F0 FE 00  
009475  3  00 FE F0 FC          .byte 0,254,240,252,240,240,240,0
009479  3  F0 F0 F0 00  
00947D  3  00 7C F6 E0          .byte 0,124,246,224,222,230,124,0
009481  3  DE E6 7C 00  
009485  3  00 F6 F6 FE          .byte 0,246,246,254,246,246,246,0
009489  3  F6 F6 F6 00  
00948D  3  00 7E 1C 1C          .byte 0,126,28,28,28,28,126,0
009491  3  1C 1C 7E 00  
009495  3  00 06 06 06          .byte 0,6,6,6,246,246,124,0
009499  3  F6 F6 7C 00  
00949D  3  00 EC DC F0          .byte 0,236,220,240,216,238,230,0
0094A1  3  D8 EE E6 00  
0094A5  3  00 78 78 78          .byte 0,120,120,120,120,120,126,0
0094A9  3  78 78 7E 00  
0094AD  3  00 C6 EE FE          .byte 0,198,238,254,214,238,238,0
0094B1  3  D6 EE EE 00  
0094B5  3  00 CE EE F6          .byte 0,206,238,246,222,238,230,0
0094B9  3  DE EE E6 00  
0094BD  3  00 7C F6 F6          .byte 0,124,246,246,254,254,124,0
0094C1  3  FE FE 7C 00  
0094C5  3  00 FC F6 F6          .byte 0,252,246,246,252,240,240,0
0094C9  3  FC F0 F0 00  
0094CD  3  00 7C F6 C6          .byte 0,124,246,198,246,222,124,0
0094D1  3  F6 DE 7C 00  
0094D5  3  00 FC F6 F6          .byte 0,252,246,246,252,244,246,0
0094D9  3  FC F4 F6 00  
0094DD  3  00 7C F0 7C          .byte 0,124,240,124,14,238,124,0
0094E1  3  0E EE 7C 00  
0094E5  3  00 FE 38 38          .byte 0,254,56,56,56,56,56,0
0094E9  3  38 38 38 00  
0094ED  3  00 EE EE EE          .byte 0,238,238,238,238,254,124,0
0094F1  3  EE FE 7C 00  
0094F5  3  00 EE EE EE          .byte 0,238,238,238,238,108,56,0
0094F9  3  EE 6C 38 00  
0094FD  3  00 EE EE EE          .byte 0,238,238,238,214,254,108,0
009501  3  D6 FE 6C 00  
009505  3  00 EE EE 38          .byte 0,238,238,56,56,238,238,0
009509  3  38 EE EE 00  
00950D  3  00 DE DE 7C          .byte 0,222,222,124,60,216,248,112
009511  3  3C D8 F8 70  
009515  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
009519  3  30 60 FE 00  
00951D  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
009521  3  18 18 1E 00  
009525  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
009529  3  30 18 0C 00  
00952D  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
009531  3  30 30 F0 00  
009535  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
009539  3  30 30 30 00  
00953D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
009541  3  00 00 00 FF  
009545  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
009549  3  60 60 FE 00  
00954D  3  60 F1 9F 0E          .byte 96,241,159,14,96,241,159,14
009551  3  60 F1 9F 0E  
009555  3  34 4B B5 6D          .byte 52,75,181,109,238,110,213,81
009559  3  EE 6E D5 51  
00955D  3  36 DA DB ED          .byte 54,218,219,237,109,109,114,38
009561  3  6D 6D 72 26  
009565  3  B6 5B 4D EC          .byte 182,91,77,236,237,213,203,82
009569  3  ED D5 CB 52  
00956D  3  07 0C 0C 0C          .byte 7,12,12,12,12,12,12,12
009571  3  0C 0C 0C 0C  
009575  3  FF 44 DE 41          .byte 255,68,222,65,88,0,33,0
009579  3  58 00 21 00  
00957D  3  E0 30 30 30          .byte 224,48,48,48,48,48,48,48
009581  3  30 30 30 30  
009585  3  0C 0C 0C 0C          .byte 12,12,12,12,12,12,12,7
009589  3  0C 0C 0C 07  
00958D  3  30 30 30 30          .byte 48,48,48,48,48,48,48,224
009591  3  30 30 30 E0  
009595  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
009599  3  00 00 00 FF  
00959D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0095A1  3  00 00 00 00  
0095A5  3  1A 7A FA FA          .byte 26,122,250,250,26,194,122,26
0095A9  3  1A C2 7A 1A  
0095AD  3  FF 00 FF FF          .byte 255,0,255,255,0,68,170,17
0095B1  3  00 44 AA 11  
0095B5  3  FF 00 FF C7          .byte 255,0,255,199,108,56,56,56
0095B9  3  6C 38 38 38  
0095BD  3  38 38 38 7C          .byte 56,56,56,124,255,255,0,255
0095C1  3  FF FF 00 FF  
0095C5  3  00 38 7C C7          .byte 0,56,124,199,187,68,131,0
0095C9  3  BB 44 83 00  
0095CD  3  FF 00 FF FF          .byte 255,0,255,255,102,126,102,0
0095D1  3  66 7E 66 00  
0095D5  3  00 78 DC DC          .byte 0,120,220,220,192,192,192,0
0095D9  3  C0 C0 C0 00  
0095DD  3  58 5E 5F 5F          .byte 88,94,95,95,92,65,94,88
0095E1  3  5C 41 5E 58  
0095E5  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
0095E9  3  30 30 1C 00  
0095ED  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
0095F1  3  CC CC 78 00  
0095F5  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
0095F9  3  78 78 30 00  
0095FD  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
009601  3  FC FC 78 00  
009605  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
009609  3  30 78 CC 00  
00960D  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
009611  3  CC 7C 0C 78  
009615  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
009619  3  30 60 FC 00  
00961D  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
009621  3  18 18 1E 00  
009625  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
009629  3  18 18 18 00  
00962D  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
009631  3  30 30 F0 00  
009635  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
009639  3  00 00 00 00  
00963D  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
009641  3  E3 BB C6 7C  
009645  3               jtab:
009645  3  F8 F8 F8 00          .byte 248,248,248,0,0,0,0,0,0,0,8,8,9,7,8,8,8,8,8,8,8,99
009649  3  00 00 00 00  
00964D  3  00 00 08 08  
00965B  3  0A 08 3F 2F  keys:   .byte 10,8,63,47,33,35,21,31,30,26,24
00965F  3  21 23 15 1F  
009663  3  1E 1A 18     
009666  3               
009666  2               
009666  1               	.include "lib.inc"
009666  2               ;----------------------------------------------------------------------
009666  2               ; Atari 800 Platform Specific functions
009666  2               ;----------------------------------------------------------------------
009666  2               
009666  2               ;============================================================
009666  2               ; PLATFORM VARIABLES
009666  2               ;============================================================
009666  2               ;
009666  2               ; Memory map:
009666  2               ;
009666  2               ;	$0000-$01ff	 0.50kB	CPU WS
009666  2               ;	$0200-$05ff	 1,00kB	IOCB/Printer/Cassette RAM
009666  2               ;	$0600-$06ff	 0,25kB	User RAM
009666  2               ;	$0700-$1fff	 6,25kB
009666  2               ;	$2000-$ffff	56,0kB	User RAM
009666  2               ;
009666  2               ; Keyboard matrix:
009666  2               ;		0	1	2	3	4	5	6	7
009666  2               ;	$00:	L	J	;:	F1	F2	K	+\	*^
009666  2               ;	$08:	O		P	U	Ret	I	-_	=|
009666  2               ;	$10:	V	Help	C	F3	F4	B	X	Z
009666  2               ;	$18:	4$		3#	6&	Esc	5%	2"	1!
009666  2               ;	$20:	,[	Space	.]	N		M	/?	Invert
009666  2               ;	$28:	R		E	Y	Tab	T	W	Q
009666  2               ;	$30:	9(		0)	7'	Bksp	8@	<	>
009666  2               ;	$38:	F	H	D		Caps	G	S	A
009666  2               ;
009666  2               ; Video registers:
009666  2               ;
009666  2               ; Atari 800 constants:
009666  2               
009666  2               	LMS		= 64
009666  2               	HS		= 16
009666  2               	VS		= 32
009666  2               	MODE2		= 2
009666  2               	MODE3		= 3
009666  2               	MODE4		= 4
009666  2               	MODE5		= 5
009666  2               	MODEB		= $0B
009666  2               	MODED		= $0D
009666  2               	MODEE		= $0E
009666  2               	MODEF		= $0F
009666  2               
009666  2               	BLANK1		= $00
009666  2               	BLANK2		= $10
009666  2               	BLANK3		= $20
009666  2               	BLANK4		= $30
009666  2               	BLANK5		= $40
009666  2               	BLANK6		= $50
009666  2               	BLANK7		= $60
009666  2               	BLANK8		= $70
009666  2               
009666  2               	DLISTENDJUMP	= $41
009666  2               
009666  2               ; Atari 800 Addresses
009666  2               
009666  2               	HPOSP0	= $D000	; HORIZONTAL POSITION P0
009666  2               	HPOSP1	= $D001	; HORIZONTAL POSITION P1
009666  2               	HPOSP2	= $D002	; HORIZONTAL POSITION P2
009666  2               	HPOSP3	= $D003	; HORIZONTAL POSITION P3
009666  2               	HPOSM0	= $D004	; HORIZONTAL POSITION M0
009666  2               	HPOSM1	= $D005	; HORIZONTAL POSITION M1
009666  2               	HPOSM2	= $D006	; HORIZONTAL POSITION M2
009666  2               	HPOSM3	= $D007	; HORIZONTAL POSITION M3
009666  2               
009666  2               	SIZEP0	= $D008	; SIZE P0
009666  2               	SIZEP1	= $D009	; SIZE P0
009666  2               	SIZEP2	= $D00A	; SIZE P0
009666  2               	SIZEP3	= $D00B	; SIZE P0
009666  2               	SIZEM	= $D00C	; SIZE M
009666  2               
009666  2               	GRAFP0	= $D00D
009666  2               	GRAFP1	= $D00E
009666  2               	GRAFP2	= $D00F
009666  2               	GRAFP3	= $D010
009666  2               	GRAFM	= $D011
009666  2               
009666  2               	COLPM0	= $D012	; COLOR P0/M0
009666  2               	COLPM1	= $D013	; COLOR P1/M1
009666  2               	COLPM2	= $D014	; COLOR P2/M2
009666  2               	COLPM3	= $D015	; COLOR P3/M3
009666  2               
009666  2               	COLPF0	= $D016
009666  2               	COLPF1	= $D017
009666  2               	COLPF2	= $D018
009666  2               	COLPF3	= $D019
009666  2               	COLBK	= $D01A
009666  2               
009666  2               	KBCODE	= $D209
009666  2               	RANDOM	= $D20A
009666  2               	IRQEN	= $D20E
009666  2               	IRQST	= $D20E
009666  2               	SKSTAT	= $D20F
009666  2               
009666  2               	PORTB	= $D301
009666  2               	PBCTL	= $D303
009666  2               
009666  2               	DMACTL	= $D400
009666  2               	DLISTL	= $D402
009666  2               	DLISTH	= $D403
009666  2               	WSYNC	= $D40A
009666  2               	VCOUNT	= $D40B
009666  2               	NMIEN	= $D40E
009666  2               	NMIST	= $D40F
009666  2               	NMIRES	= $D40F
009666  2               
009666  2               	NMI	= $FFFA
009666  2               	RESET	= $FFFC
009666  2               	IRQ	= $FFFE
009666  2               
009666  2               ;----------------------------------------------------------------------
009666  2               ; Atari 800 hardware fns
009666  2               ;----------------------------------------------------------------------
009666  2               init:
009666  2               
009666  2               ; Disable interrupts
009666  2               
009666  2  78           	sei
009667  2  A9 00        	lda #0
009669  2  8D 0E D2     	sta IRQEN		; Disable IRQ
00966C  2  8D 0E D4     	sta NMIEN		; Disable NMI
00966F  2               
00966F  2               ; Switch BASIC + OS ROMS off
00966F  2               
00966F  2  AD 03 D3     	lda PBCTL
009672  2  09 02        	ora #%00000010
009674  2  8D 03 D3     	sta PBCTL
009677  2  AD 01 D3     	lda PORTB
00967A  2  29 7C        	and #%01111100
00967C  2  09 82        	ora #%10000010
00967E  2  8D 01 D3     	sta PORTB
009681  2               
009681  2               ; Setup new NMI handler
009681  2               
009681  2  A9 A3        	lda #<nmi_handler
009683  2  8D FA FF     	sta NMI
009686  2  A9 96        	lda #>nmi_handler
009688  2  8D FB FF     	sta NMI+1
00968B  2  A9 C0        	lda #%11000000
00968D  2  8D 0E D4     	sta NMIEN
009690  2               
009690  2               ; Init video registers
009690  2               
009690  2  A9 FA        	lda #<BITMAP_DLIST
009692  2  8D 02 D4     	sta DLISTL
009695  2  A9 96        	lda #>BITMAP_DLIST
009697  2  8D 03 D4     	sta DLISTH
00969A  2               
00969A  2               ; Screenwidth 32 bytes
00969A  2               
00969A  2  A9 31        	lda #%00110001
00969C  2  8D 00 D4     	sta DMACTL
00969F  2               
00969F  2  20 D4 20     	jsr cls
0096A2  2               
0096A2  2  60           	rts
0096A3  2               
0096A3  2               nmi_handler:
0096A3  2  2C 0F D4     	bit NMIST
0096A6  2  30 2F        	bmi dli_handler
0096A8  2  10 0D        	bpl nmi_not_dli
0096AA  2               nmi_not_vbi:
0096AA  2  A9 20        	lda #%00100000
0096AC  2  2C 0F D4     	bit NMIST
0096AF  2  D0 04        	bne nmi_not_reset
0096B1  2  8D 0F D4     	sta NMIRES
0096B4  2  40           	rti
0096B5  2               nmi_not_reset:
0096B5  2  68           	pla
0096B6  2  40           	rti
0096B7  2               nmi_not_dli:
0096B7  2  48           	pha
0096B8  2  50 F0        	bvc nmi_not_vbi
0096BA  2  8A           	txa
0096BB  2  48           	pha
0096BC  2  98           	tya
0096BD  2  48           	pha
0096BE  2               
0096BE  2  A9 FF        	lda #$FF
0096C0  2  8D 1A D0     	sta COLBK
0096C3  2  8D 0A D4     	sta WSYNC
0096C6  2  8D 0A D4     	sta WSYNC
0096C9  2  A9 00        	lda #0
0096CB  2  8D 1A D0     	sta COLBK
0096CE  2  8D 0F D4     	sta NMIRES
0096D1  2  68           	pla
0096D2  2  A8           	tay
0096D3  2  68           	pla
0096D4  2  AA           	tax
0096D5  2  68           	pla
0096D6  2  40           	rti
0096D7  2               
0096D7  2               dli_handler:
0096D7  2  40           	rti
0096D8  2               
0096D8  2  xx xx xx xx  .align $100
0096DC  2  xx xx xx xx  
0096E0  2  xx xx xx xx  
0096FA  2               
0096FA  2               BITMAP_DLIST:
0096FA  2  70           	.byte BLANK8
0096FB  2  70           	.byte BLANK8
0096FC  2  70           	.byte BLANK8
0096FD  2               
0096FD  2  4F           	.byte LMS+MODEF
0096FE  2  00 E4        	.word ScreenAddr
009700  2  0F 0F 0F 0F  	.res 95,MODEF
009704  2  0F 0F 0F 0F  
009708  2  0F 0F 0F 0F  
00975F  2               
00975F  2  4F            	.byte LMS+MODEF
009760  2  00 F0        	.word ScreenAddr+96*32
009762  2  0F 0F 0F 0F  	.res 95,MODEF
009766  2  0F 0F 0F 0F  
00976A  2  0F 0F 0F 0F  
0097C1  2               
0097C1  2  41           	.byte DLISTENDJUMP
0097C2  2  FA 96        	.word BITMAP_DLIST
0097C4  2               
0097C4  2               ;========================================================
0097C4  2               ; KEY AND JOYSTICK ROUTINES
0097C4  2               ;--------------------------------------------------------
0097C4  2               ; Keys
0097C4  2               ;
0097C4  2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
0097C4  2               ;             ||||||||
0097C4  2               ;             |||||||+> Right    KEY 0  - X
0097C4  2               ;             ||||||+-> Left     KEY 1  - Z
0097C4  2               ;             |||||+--> Down     KEY 2  - .
0097C4  2               ;             ||||+---> Up       KEY 3  - ;
0097C4  2               ;             |||+----> Fire1    KEY 4  - SPC
0097C4  2               ;             ||+-----> Fire2    KEY 5  - Q
0097C4  2               ;             |+------> Fire3    KEY 6  - P
0097C4  2               ;             +-------> Not used
0097C4  2               ;
0097C4  2               ;                       Option1  KEY 7  - 1
0097C4  2               ;                       Option2  KEY 8  - 2
0097C4  2               ;                       Option3  KEY 9  - 3
0097C4  2               ;                       Option4  KEY 10 - 4
0097C4  2               ;--------------------------------------------------------
0097C4  2               ;----------------------------------------------------
0097C4  2               ; PRSKEY
0097C4  2               ; Wait for keypress.
0097C4  2               ;----------------------------------------------------
0097C4  2               
0097C4  2               prskey:
0097C4  2  AD 0F D2     	lda SKSTAT		; Check keypress
0097C7  2  C9 FF        	cmp #255
0097C9  2  F0 03        	beq :+
0097CB  2  4C D5 97     	jmp prsend
0097CE  2               :
0097CE  2  20 E6 29     	jsr joykey		; Check joystick move
0097D1  2  C9 FF        	cmp #255
0097D3  2  F0 EF        	beq prskey
0097D5  2               prsend:
0097D5  2  60           	rts
0097D6  2               
0097D6  2               ;--------------------------------------------------------
0097D6  2               ; KTEST
0097D6  2               ; Check if key in A is pressed,
0097D6  2               ;  carry clr = key pressed
0097D6  2               ;  carry set = key not pressed
0097D6  2               ;--------------------------------------------------------
0097D6  2               
0097D6  2               ktest:
0097D6  2  85 rr        	sta tmp
0097D8  2  AD 0F D2     	lda SKSTAT		; Check keypress
0097DB  2  29 04        	and #4
0097DD  2  D0 07        	bne notpressed
0097DF  2  A5 rr        	lda tmp
0097E1  2  CD 09 D2     	cmp KBCODE
0097E4  2  F0 02        	beq pressed
0097E6  2               notpressed:
0097E6  2  38           	sec
0097E7  2  60           	rts
0097E8  2               pressed:
0097E8  2  18           	clc			; key pressed
0097E9  2  60           	rts
0097EA  2               
0097EA  2               ;---------------------------------------------------------------
0097EA  2               ; KGET
0097EA  2               ; Return keycode when a key is pressed and released
0097EA  2               ;---------------------------------------------------------------
0097EA  2               
0097EA  2               kget:
0097EA  2  AD 0F D2     	lda SKSTAT		; Check keypress
0097ED  2  29 04        	and #4
0097EF  2  D0 F9        	bne kget
0097F1  2  AD 09 D2     	lda KBCODE		; If pressed, get keycode
0097F4  2  48           	pha			; Save keycode pressed
0097F5  2               kget2:
0097F5  2  AD 0F D2     	lda SKSTAT		; Check keypress
0097F8  2  29 04        	and #4
0097FA  2  F0 F9        	beq kget2
0097FC  2  68           	pla
0097FD  2  60           	rts
0097FE  2               
0097FE  1               	.include "z80.asm"
0097FE  2               ;------------------------------------------------------
0097FE  2               ; z80.asm
0097FE  2               ; spectrum stuff
0097FE  2               ; adresses
0097FE  2               
0097FE  2               
0097FE  2               ; Contains seperatly 1 bit set
0097FE  2               
0097FE  2               _bitmem0	= $f8
0097FE  2               _bitmem1	= $f9
0097FE  2               _bitmem2	= $fa
0097FE  2               _bitmem3	= $fb
0097FE  2               _bitmem4	= $fc
0097FE  2               _bitmem5	= $fd
0097FE  2               _bitmem6	= $fe
0097FE  2               _bitmem7	= $ff
0097FE  2               
0097FE  2               ; constants
0097FE  2               _bitvalue0	= $01
0097FE  2               _bitvalue1	= $02
0097FE  2               _bitvalue2	= $04
0097FE  2               _bitvalue3	= $08
0097FE  2               _bitvalue4	= $10
0097FE  2               _bitvalue5	= $20
0097FE  2               _bitvalue6	= $40
0097FE  2               _bitvalue7	= $80
0097FE  2               
0097FE  2               _notbitvalue0	= $fe
0097FE  2               _notbitvalue1	= $fd
0097FE  2               _notbitvalue2	= $fb
0097FE  2               _notbitvalue3	= $f7
0097FE  2               _notbitvalue4	= $ef
0097FE  2               _notbitvalue5	= $df
0097FE  2               _notbitvalue6	= $bf
0097FE  2               _notbitvalue7	= $7f
0097FE  2               
0097FE  2               
0097FE  2               exx:
0097FE  2  A5 62        		lda z80_c
009800  2  A4 6E        		ldy z80_cp
009802  2  84 62        		sty z80_c
009804  2  85 6E        		sta z80_cp
009806  2  A5 63        		lda z80_b
009808  2  A4 6F        		ldy z80_bp
00980A  2  84 63        		sty z80_b
00980C  2  85 6F        		sta z80_bp
00980E  2  A5 64        		lda z80_e
009810  2  A4 70        		ldy z80_ep
009812  2  84 64        		sty z80_e
009814  2  85 70        		sta z80_ep
009816  2  A5 65        		lda z80_d
009818  2  A4 71        		ldy z80_dp
00981A  2  84 65        		sty z80_d
00981C  2  85 71        		sta z80_dp
00981E  2  A5 rr        		lda scraddr
009820  2  A4 72        		ldy z80_lp
009822  2  84 rr        		sty scraddr
009824  2  85 72        		sta z80_lp
009826  2  A5 rr        		lda scraddr+1
009828  2  A4 73        		ldy z80_hp
00982A  2  84 rr        		sty scraddr+1
00982C  2  85 73        		sta z80_hp
00982E  2  60           		rts
00982F  2               
00982F  2               
00982F  1               eind_asm:
00982F  1               eop:					; End Of Program
00982F  1               
00982F  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
00982F  1               
